
import junit.framework.*;

public class RandoopTest1 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test1"); }


    org.apache.commons.math.linear.Array2DRowRealMatrix var0 = new org.apache.commons.math.linear.Array2DRowRealMatrix();
    int var1 = var0.getRowDimension();
    int var2 = var0.getRowDimension();
    int var3 = var0.getRowDimension();
    double var4 = var0.getTrace();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealVector var6 = var0.getRowVector(1);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.0d);

  }

  public void test2() {}
//   public void test2() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test2"); }
// 
// 
//     java.math.BigInteger var0 = null;
//     java.math.BigInteger var2 = org.apache.commons.math.util.MathUtils.pow(var0, 0L);
//     java.math.BigInteger var4 = org.apache.commons.math.util.MathUtils.pow(var2, 1073741824);
//     java.math.BigInteger var5 = null;
//     java.math.BigInteger var6 = org.apache.commons.math.util.MathUtils.pow(var4, var5);
// 
//   }

  public void test3() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test3"); }


    int var2 = org.apache.commons.math.util.MathUtils.pow(100, 1079574528);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);

  }

  public void test4() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test4"); }


    java.lang.Object[] var5 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var6 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var5);
    java.lang.Object[] var9 = new java.lang.Object[] { 10L};
    org.apache.commons.math.ConvergenceException var10 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var6, "", var9);
    java.text.ParseException var11 = org.apache.commons.math.MathRuntimeException.createParseException((-1), "org.apache.commons.math.ConvergenceException: Convergence failed", var9);
    org.apache.commons.math.ConvergenceException var12 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", var9);
    org.apache.commons.math.optimization.OptimizationException var13 = new org.apache.commons.math.optimization.OptimizationException((java.lang.Throwable)var12);
    java.lang.String var14 = var12.getPattern();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "org.apache.commons.math.ConvergenceException: Convergence failed"+ "'", var14.equals("org.apache.commons.math.ConvergenceException: Convergence failed"));

  }

  public void test5() {}
//   public void test5() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test5"); }
// 
// 
//     double[] var0 = null;
//     org.apache.commons.math.linear.ArrayRealVector var2 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var4 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var6 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var4, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var7 = new org.apache.commons.math.linear.ArrayRealVector(var2, var4);
//     org.apache.commons.math.optimization.RealPointValuePair var10 = new org.apache.commons.math.optimization.RealPointValuePair(var4, 1.0d, true);
//     double var11 = org.apache.commons.math.util.MathUtils.distance1(var0, var4);
// 
//   }

  public void test6() {}
//   public void test6() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test6"); }
// 
// 
//     org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var3 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
//     org.apache.commons.math.linear.RealVector var8 = var1.mapMultiply(1.0d);
//     org.apache.commons.math.linear.RealVector var9 = null;
//     org.apache.commons.math.linear.RealVector var10 = var1.add(var9);
// 
//   }

  public void test7() {}
//   public void test7() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test7"); }
// 
// 
//     java.text.NumberFormat var3 = null;
//     org.apache.commons.math.linear.RealVectorFormat var4 = new org.apache.commons.math.linear.RealVectorFormat("", "hi!", "org.apache.commons.math.ConvergenceException: Convergence failed", var3);
//     java.lang.String var5 = var4.getSeparator();
//     java.lang.String var6 = var4.getSeparator();
//     java.lang.String var7 = var4.getPrefix();
//     java.lang.Object var8 = null;
//     java.text.AttributedCharacterIterator var9 = var4.formatToCharacterIterator(var8);
// 
//   }

  public void test8() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test8"); }


    long var2 = org.apache.commons.math.util.MathUtils.pow((-1L), 10000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1L);

  }

  public void test9() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test9"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    org.apache.commons.math.linear.RealMatrix var10 = var8.transpose();
    int var11 = var8.getColumnDimension();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var14 = var8.getEntry((-1), 1073741824);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);

  }

  public void test10() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test10"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var2 = org.apache.commons.math.util.MathUtils.binomialCoefficient((-1), 1);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }

  }

  public void test11() {}
//   public void test11() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test11"); }
// 
// 
//     java.text.NumberFormat var3 = null;
//     org.apache.commons.math.linear.RealVectorFormat var4 = new org.apache.commons.math.linear.RealVectorFormat("", "hi!", "org.apache.commons.math.ConvergenceException: Convergence failed", var3);
//     java.lang.String var5 = var4.getSeparator();
//     java.lang.String var6 = var4.getSeparator();
//     java.lang.String var7 = var4.getPrefix();
//     java.lang.Object var8 = var4.clone();
//     org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     org.apache.commons.math.linear.RealVector var11 = var10.mapCosToSelf();
//     org.apache.commons.math.linear.RealVector var12 = var10.mapAsin();
//     org.apache.commons.math.linear.ArrayRealVector var14 = new org.apache.commons.math.linear.ArrayRealVector(var10, false);
//     org.apache.commons.math.linear.RealVector var15 = var14.mapLog1pToSelf();
//     org.apache.commons.math.linear.RealVector var16 = var14.mapLog1pToSelf();
//     org.apache.commons.math.linear.RealVector var18 = var14.mapSubtractToSelf(2.9066992099956157d);
//     org.apache.commons.math.linear.ArrayRealVector var20 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var22 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var24 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var22, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var25 = new org.apache.commons.math.linear.ArrayRealVector(var20, var22);
//     org.apache.commons.math.linear.RealVector var26 = var25.mapCoshToSelf();
//     java.lang.String var27 = var25.toString();
//     org.apache.commons.math.linear.RealVector var29 = var25.mapAddToSelf(10.0d);
//     org.apache.commons.math.linear.RealVector var30 = var25.mapLog10();
//     org.apache.commons.math.linear.ArrayRealVector var32 = new org.apache.commons.math.linear.ArrayRealVector(var25, false);
//     org.apache.commons.math.linear.ArrayRealVector var34 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var36 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var38 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var36, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var39 = new org.apache.commons.math.linear.ArrayRealVector(var34, var36);
//     org.apache.commons.math.linear.ArrayRealVector var41 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     org.apache.commons.math.linear.RealVector var42 = var41.mapCosToSelf();
//     double var43 = var34.dotProduct(var42);
//     org.apache.commons.math.linear.ArrayRealVector var44 = var32.append(var34);
//     org.apache.commons.math.linear.ArrayRealVector var45 = var14.add(var34);
//     java.lang.StringBuffer var46 = null;
//     java.text.FieldPosition var47 = null;
//     java.lang.StringBuffer var48 = var4.format((org.apache.commons.math.linear.RealVector)var34, var46, var47);
// 
//   }

  public void test12() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test12"); }


    double var1 = org.apache.commons.math.util.MathUtils.sign(0.03933967394071772d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1.0d);

  }

  public void test13() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test13"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var2 = var1.getData();
    org.apache.commons.math.linear.RealVector var3 = var1.mapSignum();
    double[] var4 = var1.toArray();
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var8 = var6.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(var6, false);
    org.apache.commons.math.linear.RealVector var11 = var10.mapLog1pToSelf();
    org.apache.commons.math.linear.RealVector var12 = var10.mapTan();
    org.apache.commons.math.linear.ArrayRealVector var14 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var16 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var18 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var16, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var19 = new org.apache.commons.math.linear.ArrayRealVector(var14, var16);
    org.apache.commons.math.linear.RealVector var20 = var19.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var21 = var19.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var22 = var19.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var25 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var26 = var25.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var27 = var25.mapLog1p();
    var19.setSubVector(0, (org.apache.commons.math.linear.RealVector)var25);
    double[] var29 = var25.getData();
    org.apache.commons.math.linear.ArrayRealVector var31 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var33 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var35 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var33, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var36 = new org.apache.commons.math.linear.ArrayRealVector(var31, var33);
    org.apache.commons.math.optimization.RealPointValuePair var39 = new org.apache.commons.math.optimization.RealPointValuePair(var33, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var40 = new org.apache.commons.math.linear.ArrayRealVector(var29, var33);
    org.apache.commons.math.linear.ArrayRealVector var41 = new org.apache.commons.math.linear.ArrayRealVector(var29);
    double[] var42 = var41.toArray();
    org.apache.commons.math.linear.RealVector var43 = var10.add(var42);
    org.apache.commons.math.linear.ArrayRealVector var44 = new org.apache.commons.math.linear.ArrayRealVector(var1, var42);
    org.apache.commons.math.linear.RealVector var45 = var1.mapAbs();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test14() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test14"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var2 = org.apache.commons.math.util.MathUtils.pow(0, (-1000L));
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }

  }

  public void test15() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test15"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(var1, false);
    org.apache.commons.math.linear.RealVector var6 = var1.mapTan();
    org.apache.commons.math.linear.RealVector var7 = var1.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var9 = new org.apache.commons.math.linear.ArrayRealVector(var1, false);
    org.apache.commons.math.linear.RealVector var11 = var1.mapMultiply((-1.0d));
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var15 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var17 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var15, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(var13, var15);
    org.apache.commons.math.linear.RealVector var19 = var18.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var20 = var18.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var21 = var18.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var24 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var25 = var24.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var26 = var24.mapLog1p();
    var18.setSubVector(0, (org.apache.commons.math.linear.RealVector)var24);
    org.apache.commons.math.linear.RealVector var28 = var24.mapCosh();
    org.apache.commons.math.linear.RealVector var29 = var24.mapExpm1();
    org.apache.commons.math.linear.ArrayRealVector var31 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var32 = var31.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var33 = var31.mapAsin();
    org.apache.commons.math.linear.RealVector var34 = var31.mapCbrt();
    org.apache.commons.math.linear.RealVector var35 = var31.mapUlp();
    org.apache.commons.math.linear.RealVector var36 = var31.mapRint();
    org.apache.commons.math.linear.ArrayRealVector var37 = var24.subtract(var31);
    org.apache.commons.math.linear.ArrayRealVector var39 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var40 = var39.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var41 = var39.mapAcos();
    org.apache.commons.math.linear.ArrayRealVector var42 = var24.ebeMultiply(var39);
    org.apache.commons.math.linear.RealVector var43 = var39.mapSin();
    double var44 = var1.getL1Distance(var39);
    org.apache.commons.math.linear.RealVector var45 = var1.mapExpToSelf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test16() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test16"); }


    float var1 = org.apache.commons.math.util.MathUtils.sign(1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1.0f);

  }

  public void test17() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test17"); }


    java.lang.Object[] var2 = new java.lang.Object[] { (short)10};
    org.apache.commons.math.MathRuntimeException var3 = new org.apache.commons.math.MathRuntimeException("hi!", var2);
    java.io.IOException var4 = org.apache.commons.math.MathRuntimeException.createIOException((java.lang.Throwable)var3);
    org.apache.commons.math.MathRuntimeException var5 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var4);
    org.apache.commons.math.optimization.OptimizationException var6 = new org.apache.commons.math.optimization.OptimizationException((java.lang.Throwable)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test18() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test18"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    org.apache.commons.math.linear.RealMatrix var22 = var19.inverse();
    int var23 = var19.getRowDimension();
    double[][] var24 = var19.getData();
    org.apache.commons.math.linear.Array2DRowRealMatrix var26 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var24, false);
    var26.multiplyEntry(0, 0, 0.03933967394071772d);
    double[][] var31 = var26.getData();
    double[] var34 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var35 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var34);
    org.apache.commons.math.linear.ArrayRealVector var37 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var39 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var41 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var39, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var42 = new org.apache.commons.math.linear.ArrayRealVector(var37, var39);
    double[] var43 = var35.operate(var39);
    org.apache.commons.math.optimization.RealPointValuePair var46 = new org.apache.commons.math.optimization.RealPointValuePair(var39, (-0.7d), false);
    double[][] var47 = new double[][] { var39};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var26.setSubMatrix(var47, 101, (-1));
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test19() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test19"); }


    int var2 = org.apache.commons.math.util.MathUtils.mulAndCheck(101, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1010);

  }

  public void test20() {}
//   public void test20() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test20"); }
// 
// 
//     java.text.NumberFormat var3 = null;
//     org.apache.commons.math.linear.RealVectorFormat var4 = new org.apache.commons.math.linear.RealVectorFormat("", "hi!", "org.apache.commons.math.ConvergenceException: Convergence failed", var3);
//     java.lang.String var5 = var4.getSeparator();
//     java.lang.String var6 = var4.getSeparator();
//     java.lang.String var7 = var4.getPrefix();
//     java.lang.Object var8 = var4.clone();
//     org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var12 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var15 = new org.apache.commons.math.linear.ArrayRealVector(var10, var12);
//     org.apache.commons.math.linear.RealVector var16 = var15.mapCoshToSelf();
//     org.apache.commons.math.linear.RealVector var17 = var15.mapAtanToSelf();
//     org.apache.commons.math.linear.RealVector var18 = var15.mapUlp();
//     org.apache.commons.math.linear.ArrayRealVector var21 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     org.apache.commons.math.linear.RealVector var22 = var21.mapCosToSelf();
//     org.apache.commons.math.linear.RealVector var23 = var21.mapLog1p();
//     var15.setSubVector(0, (org.apache.commons.math.linear.RealVector)var21);
//     org.apache.commons.math.linear.RealVector var25 = var21.mapCosh();
//     org.apache.commons.math.linear.RealVector var26 = var21.mapExpm1();
//     org.apache.commons.math.linear.ArrayRealVector var28 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     org.apache.commons.math.linear.RealVector var29 = var28.mapCosToSelf();
//     org.apache.commons.math.linear.RealVector var30 = var28.mapAsin();
//     org.apache.commons.math.linear.RealVector var31 = var28.mapCbrt();
//     org.apache.commons.math.linear.RealVector var32 = var28.mapUlp();
//     org.apache.commons.math.linear.RealVector var33 = var28.mapRint();
//     org.apache.commons.math.linear.ArrayRealVector var34 = var21.subtract(var28);
//     org.apache.commons.math.linear.ArrayRealVector var36 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     org.apache.commons.math.linear.RealVector var37 = var36.mapCosToSelf();
//     org.apache.commons.math.linear.RealVector var38 = var36.mapAcos();
//     org.apache.commons.math.linear.ArrayRealVector var39 = var21.ebeMultiply(var36);
//     org.apache.commons.math.linear.RealVector var40 = var36.mapAcosToSelf();
//     java.lang.StringBuffer var41 = null;
//     java.text.FieldPosition var42 = null;
//     java.lang.StringBuffer var43 = var4.format((org.apache.commons.math.linear.RealVector)var36, var41, var42);
// 
//   }

  public void test21() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test21"); }


    org.apache.commons.math.linear.Array2DRowRealMatrix var0 = new org.apache.commons.math.linear.Array2DRowRealMatrix();
    int var1 = var0.getRowDimension();
    org.apache.commons.math.linear.RealVector var3 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRowVector(10, var3);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);

  }

  public void test22() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test22"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    double var4 = var3.getConstantTerm();
    org.apache.commons.math.linear.RealVector var5 = var3.getCoefficients();
    double[] var8 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var9 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var8);
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var13 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var15 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var13, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var16 = new org.apache.commons.math.linear.ArrayRealVector(var11, var13);
    double[] var17 = var9.operate(var13);
    double var18 = var3.getValue(var13);
    org.apache.commons.math.linear.ArrayRealVector var20 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var21 = var20.getData();
    org.apache.commons.math.linear.RealVector var22 = var20.mapSignum();
    double[] var23 = var20.toArray();
    org.apache.commons.math.linear.ArrayRealVector var25 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var26 = var25.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var27 = var25.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var29 = new org.apache.commons.math.linear.ArrayRealVector(var25, false);
    org.apache.commons.math.linear.RealVector var30 = var29.mapLog1pToSelf();
    org.apache.commons.math.linear.RealVector var31 = var29.mapTan();
    org.apache.commons.math.linear.ArrayRealVector var33 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var35 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var37 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var35, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var38 = new org.apache.commons.math.linear.ArrayRealVector(var33, var35);
    org.apache.commons.math.linear.RealVector var39 = var38.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var40 = var38.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var41 = var38.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var44 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var45 = var44.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var46 = var44.mapLog1p();
    var38.setSubVector(0, (org.apache.commons.math.linear.RealVector)var44);
    double[] var48 = var44.getData();
    org.apache.commons.math.linear.ArrayRealVector var50 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var52 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var54 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var52, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var55 = new org.apache.commons.math.linear.ArrayRealVector(var50, var52);
    org.apache.commons.math.optimization.RealPointValuePair var58 = new org.apache.commons.math.optimization.RealPointValuePair(var52, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var59 = new org.apache.commons.math.linear.ArrayRealVector(var48, var52);
    org.apache.commons.math.linear.ArrayRealVector var60 = new org.apache.commons.math.linear.ArrayRealVector(var48);
    double[] var61 = var60.toArray();
    org.apache.commons.math.linear.RealVector var62 = var29.add(var61);
    org.apache.commons.math.linear.ArrayRealVector var63 = new org.apache.commons.math.linear.ArrayRealVector(var20, var61);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var64 = var3.getValue((org.apache.commons.math.linear.RealVector)var63);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test23() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test23"); }


    double[] var2 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var3 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var2);
    int[] var4 = new int[] { };
    int[] var5 = new int[] { };
    int var6 = org.apache.commons.math.util.MathUtils.distanceInf(var4, var5);
    int[] var7 = new int[] { };
    int[] var8 = new int[] { };
    int var9 = org.apache.commons.math.util.MathUtils.distanceInf(var7, var8);
    double var10 = org.apache.commons.math.util.MathUtils.distance(var4, var7);
    int[] var11 = new int[] { };
    int[] var12 = new int[] { };
    int var13 = org.apache.commons.math.util.MathUtils.distanceInf(var11, var12);
    int var14 = org.apache.commons.math.util.MathUtils.distanceInf(var7, var11);
    int[] var15 = new int[] { };
    int[] var16 = new int[] { };
    int var17 = org.apache.commons.math.util.MathUtils.distanceInf(var15, var16);
    int[] var18 = new int[] { };
    int[] var19 = new int[] { };
    int var20 = org.apache.commons.math.util.MathUtils.distanceInf(var18, var19);
    double var21 = org.apache.commons.math.util.MathUtils.distance(var15, var18);
    int[] var22 = new int[] { };
    int[] var23 = new int[] { };
    int var24 = org.apache.commons.math.util.MathUtils.distanceInf(var22, var23);
    int var25 = org.apache.commons.math.util.MathUtils.distanceInf(var18, var22);
    double[] var27 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var29 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var27, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var31 = new org.apache.commons.math.optimization.RealPointValuePair(var27, 0.0d);
    double[][] var32 = new double[][] { var27};
    org.apache.commons.math.linear.Array2DRowRealMatrix var34 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var32, true);
    double var35 = var34.getFrobeniusNorm();
    double[] var38 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var40 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var38, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var42 = new org.apache.commons.math.optimization.RealPointValuePair(var38, 0.0d);
    double[][] var43 = new double[][] { var38};
    org.apache.commons.math.linear.Array2DRowRealMatrix var45 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var43, true);
    double var46 = var45.getFrobeniusNorm();
    var34.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var45);
    org.apache.commons.math.linear.RealMatrix var48 = var45.inverse();
    int var49 = var45.getRowDimension();
    double[][] var50 = var45.getData();
    org.apache.commons.math.linear.Array2DRowRealMatrix var52 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var50, false);
    var52.multiplyEntry(0, 0, 0.03933967394071772d);
    double[][] var57 = var52.getData();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.copySubMatrix(var7, var22, var57);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test24() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test24"); }


    double var1 = org.apache.commons.math.util.MathUtils.factorialLog(1073741824);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 2.125409172596247E10d);

  }

  public void test25() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test25"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var2 = var1.getData();
    org.apache.commons.math.linear.RealVector var3 = var1.mapSignum();
    double[] var4 = var1.toArray();
    org.apache.commons.math.linear.RealVector var5 = var1.mapTanToSelf();
    org.apache.commons.math.linear.ArrayRealVector var7 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var9 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var11 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var9, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var12 = new org.apache.commons.math.linear.ArrayRealVector(var7, var9);
    org.apache.commons.math.linear.RealVector var13 = var12.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var14 = var12.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var15 = var12.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var19 = var18.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var20 = var18.mapLog1p();
    var12.setSubVector(0, (org.apache.commons.math.linear.RealVector)var18);
    double[] var22 = var18.getData();
    org.apache.commons.math.linear.ArrayRealVector var24 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var26 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var28 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var26, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var29 = new org.apache.commons.math.linear.ArrayRealVector(var24, var26);
    org.apache.commons.math.optimization.RealPointValuePair var32 = new org.apache.commons.math.optimization.RealPointValuePair(var26, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var33 = new org.apache.commons.math.linear.ArrayRealVector(var22, var26);
    org.apache.commons.math.linear.ArrayRealVector var34 = new org.apache.commons.math.linear.ArrayRealVector(var22);
    double[] var36 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var38 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var36, 1.0d);
    double[] var41 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var42 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var41);
    org.apache.commons.math.linear.ArrayRealVector var44 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var46 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var48 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var46, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var49 = new org.apache.commons.math.linear.ArrayRealVector(var44, var46);
    double[] var50 = var42.operate(var46);
    double var51 = org.apache.commons.math.util.MathUtils.distance1(var36, var46);
    double var52 = org.apache.commons.math.util.MathUtils.distanceInf(var22, var46);
    org.apache.commons.math.linear.ArrayRealVector var53 = new org.apache.commons.math.linear.ArrayRealVector(var46);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var54 = var1.getL1Distance(var46);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.0d);

  }

  public void test26() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test26"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    double var22 = var19.getDeterminant();
    org.apache.commons.math.linear.RealMatrix var23 = var19.transpose();
    org.apache.commons.math.linear.Array2DRowRealMatrix var30 = new org.apache.commons.math.linear.Array2DRowRealMatrix(10, 100);
    double[][] var31 = var30.getDataRef();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var19.copySubMatrix((-1), 0, 1079574528, 1010, var31);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test27() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test27"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var2 = org.apache.commons.math.util.MathUtils.pow(1, (-1000L));
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }

  }

  public void test28() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test28"); }


    org.apache.commons.math.ConvergenceException var4 = new org.apache.commons.math.ConvergenceException();
    java.lang.Object[] var7 = new java.lang.Object[] { 0};
    org.apache.commons.math.ConvergenceException var8 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var4, "", var7);
    java.lang.Object[] var12 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var13 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var12);
    org.apache.commons.math.MathRuntimeException var14 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var4, "hi!", var12);
    org.apache.commons.math.MathException var15 = new org.apache.commons.math.MathException("}", var12);
    org.apache.commons.math.optimization.OptimizationException var16 = new org.apache.commons.math.optimization.OptimizationException("", var12);
    org.apache.commons.math.ConvergenceException var19 = new org.apache.commons.math.ConvergenceException();
    java.lang.Object[] var22 = new java.lang.Object[] { ""};
    org.apache.commons.math.ConvergenceException var23 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var19, "", var22);
    org.apache.commons.math.ConvergenceException var24 = new org.apache.commons.math.ConvergenceException("hi!", var22);
    org.apache.commons.math.MathRuntimeException var25 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var16, "hi!", var22);
    java.io.EOFException var26 = org.apache.commons.math.MathRuntimeException.createEOFException("Convergence failed", var22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.InvalidMatrixException var27 = new org.apache.commons.math.linear.InvalidMatrixException("{", var22);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test29() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test29"); }


    java.lang.Object[] var7 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var8 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var7);
    java.lang.Object[] var11 = new java.lang.Object[] { 10L};
    org.apache.commons.math.ConvergenceException var12 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var8, "", var11);
    java.text.ParseException var13 = org.apache.commons.math.MathRuntimeException.createParseException((-1), "org.apache.commons.math.ConvergenceException: Convergence failed", var11);
    org.apache.commons.math.ConvergenceException var14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", var11);
    org.apache.commons.math.optimization.OptimizationException var15 = new org.apache.commons.math.optimization.OptimizationException("", var11);
    org.apache.commons.math.linear.InvalidMatrixException var16 = new org.apache.commons.math.linear.InvalidMatrixException("", var11);
    java.lang.String var17 = var16.getPattern();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + ""+ "'", var17.equals(""));

  }

  public void test30() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test30"); }


    double var2 = org.apache.commons.math.util.MathUtils.normalizeAngle(50.0d, 2.4463520074491627d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-0.26548245743668986d));

  }

  public void test31() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test31"); }


    boolean var3 = org.apache.commons.math.util.MathUtils.equals(2.125409172596247E10d, 1.731030945644E13d, (-1));

  }

  public void test32() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test32"); }


    double[] var4 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var6 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var4, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var8 = new org.apache.commons.math.optimization.RealPointValuePair(var4, 0.0d);
    double[][] var9 = new double[][] { var4};
    org.apache.commons.math.linear.Array2DRowRealMatrix var11 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var9, true);
    double var12 = var11.getFrobeniusNorm();
    double[] var15 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var17 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var15, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var19 = new org.apache.commons.math.optimization.RealPointValuePair(var15, 0.0d);
    double[][] var20 = new double[][] { var15};
    org.apache.commons.math.linear.Array2DRowRealMatrix var22 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var20, true);
    double var23 = var22.getFrobeniusNorm();
    var11.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var22);
    org.apache.commons.math.linear.RealMatrix var25 = var22.inverse();
    int var26 = var22.getRowDimension();
    double[][] var27 = var22.getData();
    org.apache.commons.math.linear.Array2DRowRealMatrix var29 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var27, false);
    java.text.ParseException var30 = org.apache.commons.math.MathRuntimeException.createParseException(0, "", (java.lang.Object[])var27);
    java.lang.ArrayIndexOutOfBoundsException var31 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("Maximal number of iterations ({0}) exceeded", (java.lang.Object[])var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test33() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test33"); }


    java.math.BigInteger var0 = null;
    java.math.BigInteger var2 = org.apache.commons.math.util.MathUtils.pow(var0, 0L);
    java.math.BigInteger var4 = org.apache.commons.math.util.MathUtils.pow(var2, 1073741824);
    java.math.BigInteger var6 = org.apache.commons.math.util.MathUtils.pow(var4, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test34() {}
//   public void test34() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test34"); }
// 
// 
//     org.apache.commons.math.optimization.linear.SimplexSolver var1 = new org.apache.commons.math.optimization.linear.SimplexSolver(2.4258259770489514E8d);
//     org.apache.commons.math.optimization.RealPointValuePair var2 = var1.doOptimize();
// 
//   }

  public void test35() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test35"); }


    int var2 = org.apache.commons.math.util.MathUtils.mulAndCheck(0, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);

  }

  public void test36() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test36"); }


    org.apache.commons.math.linear.Array2DRowRealMatrix var2 = new org.apache.commons.math.linear.Array2DRowRealMatrix(10, 100);
    double[][] var3 = var2.getDataRef();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double[] var5 = var2.getRow(1079574528);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test37() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test37"); }


    java.lang.Object[] var3 = new java.lang.Object[] { (short)10};
    org.apache.commons.math.MathRuntimeException var4 = new org.apache.commons.math.MathRuntimeException("hi!", var3);
    java.lang.NullPointerException var5 = org.apache.commons.math.MathRuntimeException.createNullPointerException("Maximal number of iterations ({0}) exceeded", var3);
    java.io.IOException var6 = org.apache.commons.math.MathRuntimeException.createIOException((java.lang.Throwable)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test38() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test38"); }


    java.lang.Double[] var1 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var2 = new org.apache.commons.math.linear.ArrayRealVector(var1);
    org.apache.commons.math.linear.ArrayRealVector var4 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var6 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var8 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var6, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var9 = new org.apache.commons.math.linear.ArrayRealVector(var4, var6);
    org.apache.commons.math.linear.RealVector var10 = var2.subtract(var6);
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(var6);
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var15 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var17 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var15, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(var13, var15);
    org.apache.commons.math.linear.RealVector var19 = var18.mapCoshToSelf();
    java.lang.String var20 = var18.toString();
    org.apache.commons.math.linear.RealVector var21 = var18.mapRint();
    org.apache.commons.math.linear.RealVector var22 = var18.mapAbsToSelf();
    boolean var23 = var18.isInfinite();
    org.apache.commons.math.linear.RealVector var25 = var18.mapAdd(0.0d);
    org.apache.commons.math.linear.RealVector var26 = var18.mapCeil();
    double var27 = var11.getDistance(var18);
    org.apache.commons.math.linear.RealVector var28 = var11.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var29 = var11.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var30 = var11.mapFloor();
    org.apache.commons.math.linear.RealVector var31 = var11.mapCeil();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "{1.54}"+ "'", var20.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5430806348152439d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test39() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test39"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    org.apache.commons.math.linear.RealMatrix var10 = var8.transpose();
    int var11 = var8.getColumnDimension();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealMatrix var13 = var8.getColumnMatrix((-1));
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);

  }

  public void test40() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test40"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var2 = org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(1, 1079574528);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }

  }

  public void test41() {}
//   public void test41() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test41"); }
// 
// 
//     org.apache.commons.math.linear.RealVectorFormat var0 = org.apache.commons.math.linear.RealVectorFormat.getInstance();
//     java.lang.String var1 = var0.getSuffix();
//     java.lang.Object var2 = var0.clone();
//     org.apache.commons.math.linear.ArrayRealVector var4 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     org.apache.commons.math.linear.RealVector var5 = var4.mapCosToSelf();
//     org.apache.commons.math.linear.RealVector var6 = var4.mapAsin();
//     org.apache.commons.math.linear.RealVector var7 = var4.mapCbrt();
//     var4.set(2.302585092994046d);
//     java.lang.StringBuffer var10 = null;
//     java.text.FieldPosition var11 = null;
//     java.lang.StringBuffer var12 = var0.format((org.apache.commons.math.linear.RealVector)var4, var10, var11);
// 
//   }

  public void test42() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test42"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.optimization.RealPointValuePair var9 = new org.apache.commons.math.optimization.RealPointValuePair(var3, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(var3, true);
    int var12 = var11.getDimension();
    java.lang.Double[] var14 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var15 = new org.apache.commons.math.linear.ArrayRealVector(var14);
    org.apache.commons.math.linear.RealVector var16 = var15.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var15);
    org.apache.commons.math.linear.RealVector var18 = var11.add((org.apache.commons.math.linear.RealVector)var17);
    java.lang.Double[] var20 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var21 = new org.apache.commons.math.linear.ArrayRealVector(var20);
    org.apache.commons.math.linear.ArrayRealVector var22 = var17.projection(var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealVector var25 = var22.getSubVector(0, 1073741824);
      fail("Expected exception of type java.lang.OutOfMemoryError");
    } catch (java.lang.OutOfMemoryError e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test43() {}
//   public void test43() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test43"); }
// 
// 
//     org.apache.commons.math.ConvergenceException var4 = new org.apache.commons.math.ConvergenceException();
//     java.lang.Object[] var7 = new java.lang.Object[] { 0};
//     org.apache.commons.math.ConvergenceException var8 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var4, "", var7);
//     java.lang.Object[] var12 = new java.lang.Object[] { ' '};
//     java.lang.IllegalArgumentException var13 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var12);
//     org.apache.commons.math.MathRuntimeException var14 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var4, "hi!", var12);
//     org.apache.commons.math.MathException var15 = new org.apache.commons.math.MathException("}", var12);
//     org.apache.commons.math.optimization.OptimizationException var16 = new org.apache.commons.math.optimization.OptimizationException("", var12);
//     java.io.EOFException var17 = org.apache.commons.math.MathRuntimeException.createEOFException("org.apache.commons.math.ConvergenceException: Convergence failed", var12);
//     java.lang.IllegalStateException var18 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("{1}", var12);
//     java.lang.Throwable var19 = null;
//     var18.addSuppressed(var19);
// 
//   }

  public void test44() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test44"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.optimization.RealPointValuePair var9 = new org.apache.commons.math.optimization.RealPointValuePair(var3, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(var3, true);
    int var12 = var11.getDimension();
    java.lang.Double[] var14 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var15 = new org.apache.commons.math.linear.ArrayRealVector(var14);
    org.apache.commons.math.linear.RealVector var16 = var15.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var15);
    org.apache.commons.math.linear.RealVector var18 = var11.add((org.apache.commons.math.linear.RealVector)var17);
    java.lang.Double[] var20 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var21 = new org.apache.commons.math.linear.ArrayRealVector(var20);
    org.apache.commons.math.linear.ArrayRealVector var22 = var17.projection(var21);
    org.apache.commons.math.linear.RealVector var23 = var22.mapSinh();
    org.apache.commons.math.linear.RealVector var24 = var22.mapLog10ToSelf();
    double[] var26 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var28 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var26, 1.0d);
    double[] var31 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var32 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var31);
    org.apache.commons.math.linear.ArrayRealVector var34 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var36 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var38 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var36, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var39 = new org.apache.commons.math.linear.ArrayRealVector(var34, var36);
    double[] var40 = var32.operate(var36);
    double var41 = org.apache.commons.math.util.MathUtils.distance1(var26, var36);
    org.apache.commons.math.linear.RealVector var42 = var22.ebeMultiply(var26);
    org.apache.commons.math.linear.Array2DRowRealMatrix var43 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var26);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double[] var45 = var43.getRow((-1));
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test45() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test45"); }


    double var1 = org.apache.commons.math.util.MathUtils.indicator(1.731030945644E13d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1.0d);

  }

  public void test46() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test46"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.optimization.RealPointValuePair var9 = new org.apache.commons.math.optimization.RealPointValuePair(var3, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(var3, true);
    int var12 = var11.getDimension();
    java.lang.Double[] var14 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var15 = new org.apache.commons.math.linear.ArrayRealVector(var14);
    org.apache.commons.math.linear.RealVector var16 = var15.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var15);
    org.apache.commons.math.linear.RealVector var18 = var11.add((org.apache.commons.math.linear.RealVector)var17);
    java.lang.Double[] var20 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var21 = new org.apache.commons.math.linear.ArrayRealVector(var20);
    org.apache.commons.math.linear.ArrayRealVector var22 = var17.projection(var21);
    org.apache.commons.math.linear.RealVector var23 = var21.mapLog1pToSelf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test47() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test47"); }


    org.apache.commons.math.linear.Array2DRowRealMatrix var0 = new org.apache.commons.math.linear.Array2DRowRealMatrix();
    int var1 = var0.getRowDimension();
    int var2 = var0.getRowDimension();
    var0.luDecompose();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);

  }

  public void test48() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test48"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(var1, false);
    org.apache.commons.math.linear.RealVector var6 = var5.mapLog1pToSelf();
    org.apache.commons.math.linear.RealVector var7 = var5.mapLog1pToSelf();
    org.apache.commons.math.linear.RealVector var9 = var5.mapSubtractToSelf(2.9066992099956157d);
    org.apache.commons.math.linear.RealVector var10 = var5.mapSignumToSelf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test49() {}
//   public void test49() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test49"); }
// 
// 
//     double[] var1 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
//     double[][] var6 = new double[][] { var1};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
//     double var9 = var8.getFrobeniusNorm();
//     double[] var12 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
//     double[][] var17 = new double[][] { var12};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
//     double var20 = var19.getFrobeniusNorm();
//     var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
//     double[] var23 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var25 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var23, 1.0d);
//     double[] var28 = new double[] { 0.0d, (-1.0d)};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var29 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var28);
//     org.apache.commons.math.linear.ArrayRealVector var31 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var33 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var35 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var33, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var36 = new org.apache.commons.math.linear.ArrayRealVector(var31, var33);
//     double[] var37 = var29.operate(var33);
//     org.apache.commons.math.linear.ArrayRealVector var38 = new org.apache.commons.math.linear.ArrayRealVector(var33);
//     org.apache.commons.math.optimization.linear.Relationship var40 = null;
//     double[] var43 = new double[] { 0.0d, (-1.0d)};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var44 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var43);
//     org.apache.commons.math.linear.ArrayRealVector var46 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var48 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var50 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var48, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var51 = new org.apache.commons.math.linear.ArrayRealVector(var46, var48);
//     double[] var52 = var44.operate(var48);
//     org.apache.commons.math.linear.ArrayRealVector var53 = new org.apache.commons.math.linear.ArrayRealVector(var48);
//     org.apache.commons.math.optimization.linear.LinearConstraint var55 = new org.apache.commons.math.optimization.linear.LinearConstraint(var33, 50.0d, var40, var48, 2.302585092994046d);
//     double var56 = var25.getValue(var48);
//     org.apache.commons.math.linear.RealVector var57 = var25.getCoefficients();
//     org.apache.commons.math.linear.RealVector var58 = var8.operate(var57);
//     double[] var60 = var8.getRow(0);
//     double[] var62 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var64 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var62, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var66 = new org.apache.commons.math.optimization.RealPointValuePair(var62, 0.0d);
//     double[][] var67 = new double[][] { var62};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var69 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var67, true);
//     org.apache.commons.math.linear.RealMatrix var70 = var69.copy();
//     boolean var71 = var69.isSingular();
//     org.apache.commons.math.linear.Array2DRowRealMatrix var72 = var8.subtract(var69);
//     org.apache.commons.math.linear.RealMatrixPreservingVisitor var73 = null;
//     double var74 = var69.walkInRowOrder(var73);
// 
//   }

  public void test50() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test50"); }


    java.lang.Double[] var1 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var2 = new org.apache.commons.math.linear.ArrayRealVector(var1);
    org.apache.commons.math.linear.ArrayRealVector var4 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var6 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var8 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var6, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var9 = new org.apache.commons.math.linear.ArrayRealVector(var4, var6);
    org.apache.commons.math.linear.RealVector var10 = var2.subtract(var6);
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(var6);
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var15 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var17 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var15, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(var13, var15);
    org.apache.commons.math.optimization.RealPointValuePair var21 = new org.apache.commons.math.optimization.RealPointValuePair(var15, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var23 = new org.apache.commons.math.linear.ArrayRealVector(var15, true);
    int var24 = var23.getDimension();
    java.lang.Double[] var26 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var27 = new org.apache.commons.math.linear.ArrayRealVector(var26);
    org.apache.commons.math.linear.RealVector var28 = var27.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var29 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var27);
    org.apache.commons.math.linear.RealVector var30 = var23.add((org.apache.commons.math.linear.RealVector)var29);
    java.lang.Double[] var32 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var33 = new org.apache.commons.math.linear.ArrayRealVector(var32);
    org.apache.commons.math.linear.ArrayRealVector var34 = var29.projection(var33);
    org.apache.commons.math.linear.RealVector var35 = var34.mapSinh();
    org.apache.commons.math.linear.ArrayRealVector var36 = new org.apache.commons.math.linear.ArrayRealVector(var11, var34);
    org.apache.commons.math.linear.RealVector var37 = var11.mapCbrt();
    org.apache.commons.math.linear.ArrayRealVector var39 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var40 = var39.getData();
    double[] var41 = var39.getData();
    org.apache.commons.math.linear.RealVector var42 = var39.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var43 = var39.mapLog1pToSelf();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.ArrayRealVector var44 = var11.ebeMultiply(var39);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test51() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test51"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    java.lang.String var8 = var6.toString();
    org.apache.commons.math.linear.RealVector var10 = var6.mapAddToSelf(10.0d);
    org.apache.commons.math.linear.RealVector var11 = var6.mapLog10();
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(var6, false);
    org.apache.commons.math.linear.RealVector var14 = var13.mapLog1p();
    double[] var16 = new double[] { (-1.0d)};
    org.apache.commons.math.linear.RealVector var17 = var13.ebeMultiply(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "{1.54}"+ "'", var8.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test52() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test52"); }


    boolean var2 = org.apache.commons.math.util.MathUtils.equals(2.9066992099956157d, 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test53() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test53"); }


    org.apache.commons.math.linear.Array2DRowRealMatrix var0 = new org.apache.commons.math.linear.Array2DRowRealMatrix();
    int var1 = var0.getRowDimension();
    int var2 = var0.getRowDimension();
    org.apache.commons.math.linear.ArrayRealVector var4 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var5 = var4.getData();
    double[] var6 = var4.getData();
    double[] var7 = var0.solve(var6);
    double[][] var8 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setSubMatrix(var8, 101, 0);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test54() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test54"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    org.apache.commons.math.linear.RealMatrix var22 = var8.transpose();
    int[] var23 = new int[] { };
    int[] var24 = new int[] { };
    int var25 = org.apache.commons.math.util.MathUtils.distanceInf(var23, var24);
    int[] var26 = new int[] { };
    int[] var27 = new int[] { };
    int var28 = org.apache.commons.math.util.MathUtils.distanceInf(var26, var27);
    double var29 = org.apache.commons.math.util.MathUtils.distance(var23, var26);
    int[] var30 = new int[] { };
    int[] var31 = new int[] { };
    int var32 = org.apache.commons.math.util.MathUtils.distanceInf(var30, var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealMatrix var33 = var8.getSubMatrix(var23, var31);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);

  }

  public void test55() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test55"); }


    org.apache.commons.math.ConvergenceException var0 = new org.apache.commons.math.ConvergenceException();
    java.lang.Object[] var3 = new java.lang.Object[] { ""};
    org.apache.commons.math.ConvergenceException var4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var0, "", var3);
    java.lang.Object[] var5 = var0.getArguments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test56() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test56"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    org.apache.commons.math.linear.RealMatrix var22 = var8.transpose();
    double var23 = var8.getNorm();
    double var24 = var8.getDeterminant();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double[] var26 = var8.getRow(10);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1.0d);

  }

  public void test57() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test57"); }


    long var1 = org.apache.commons.math.util.MathUtils.sign(10000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1L);

  }

  public void test58() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test58"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var3 = org.apache.commons.math.util.MathUtils.round((-0.26548245743668986d), 1079574528, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test59() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test59"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(var1, false);
    org.apache.commons.math.linear.RealVector var6 = var5.mapLog1pToSelf();
    org.apache.commons.math.linear.ArrayRealVector var8 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double var9 = var5.dotProduct((org.apache.commons.math.linear.RealVector)var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealVector var12 = var8.getSubVector((-1), (-1));
      fail("Expected exception of type java.lang.NegativeArraySizeException");
    } catch (java.lang.NegativeArraySizeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.0d);

  }

  public void test60() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test60"); }


    org.apache.commons.math.ConvergenceException var5 = new org.apache.commons.math.ConvergenceException();
    java.lang.Object[] var8 = new java.lang.Object[] { 0};
    org.apache.commons.math.ConvergenceException var9 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var5, "", var8);
    java.lang.Object[] var13 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var14 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var13);
    org.apache.commons.math.MathRuntimeException var15 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var5, "hi!", var13);
    java.lang.Object[] var16 = var5.getArguments();
    java.lang.Object[] var17 = var5.getArguments();
    java.text.ParseException var18 = org.apache.commons.math.MathRuntimeException.createParseException(0, "}", var17);
    java.lang.IllegalStateException var19 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("; ", var17);
    java.lang.IllegalStateException var20 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("Convergence failed", var17);
    org.apache.commons.math.linear.InvalidMatrixException var21 = new org.apache.commons.math.linear.InvalidMatrixException("hi!", var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test61() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test61"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var2 = org.apache.commons.math.util.MathUtils.pow((-1L), (-1000L));
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }

  }

  public void test62() {}
//   public void test62() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test62"); }
// 
// 
//     double[] var2 = new double[] { 0.0d, (-1.0d)};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var3 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var2);
//     org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var7 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var9 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var7, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(var5, var7);
//     double[] var11 = var3.operate(var7);
//     org.apache.commons.math.linear.RealMatrix var12 = var3.transpose();
//     org.apache.commons.math.linear.Array2DRowRealMatrix var13 = null;
//     org.apache.commons.math.linear.Array2DRowRealMatrix var14 = var3.add(var13);
// 
//   }

  public void test63() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test63"); }


    java.text.NumberFormat var3 = null;
    org.apache.commons.math.linear.RealVectorFormat var4 = new org.apache.commons.math.linear.RealVectorFormat("", "hi!", "org.apache.commons.math.ConvergenceException: Convergence failed", var3);
    java.lang.String var5 = var4.getSeparator();
    java.lang.String var6 = var4.getSeparator();
    java.lang.String var7 = var4.getPrefix();
    java.lang.Object var8 = var4.clone();
    java.lang.Object[] var11 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var12 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var11);
    java.lang.Object[] var15 = new java.lang.Object[] { 10L};
    org.apache.commons.math.ConvergenceException var16 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var12, "", var15);
    org.apache.commons.math.optimization.OptimizationException var17 = new org.apache.commons.math.optimization.OptimizationException((java.lang.Throwable)var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.text.AttributedCharacterIterator var18 = var4.formatToCharacterIterator((java.lang.Object)var16);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "org.apache.commons.math.ConvergenceException: Convergence failed"+ "'", var5.equals("org.apache.commons.math.ConvergenceException: Convergence failed"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "org.apache.commons.math.ConvergenceException: Convergence failed"+ "'", var6.equals("org.apache.commons.math.ConvergenceException: Convergence failed"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ""+ "'", var7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test64() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test64"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapUlpToSelf();
    double var4 = var1.getNorm();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.0d);

  }

  public void test65() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test65"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealMatrix var26 = var8.getSubMatrix(100, 100, 101, 1073741824);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);

  }

  public void test66() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test66"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double var10 = var8.getNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    double[] var23 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var25 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var23, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var27 = new org.apache.commons.math.optimization.RealPointValuePair(var23, 0.0d);
    double[][] var28 = new double[][] { var23};
    org.apache.commons.math.linear.Array2DRowRealMatrix var30 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var28, true);
    double var31 = var30.getFrobeniusNorm();
    var19.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var30);
    org.apache.commons.math.linear.RealMatrix var33 = var30.inverse();
    int var34 = var30.getRowDimension();
    double[][] var35 = var30.getData();
    org.apache.commons.math.linear.Array2DRowRealMatrix var37 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var35, false);
    var37.multiplyEntry(0, 0, 0.03933967394071772d);
    org.apache.commons.math.linear.Array2DRowRealMatrix var42 = var8.subtract(var37);
    int[] var43 = new int[] { };
    int[] var44 = new int[] { };
    int var45 = org.apache.commons.math.util.MathUtils.distanceInf(var43, var44);
    int[] var46 = new int[] { };
    int[] var47 = new int[] { };
    int var48 = org.apache.commons.math.util.MathUtils.distanceInf(var46, var47);
    double[] var50 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var52 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var50, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var54 = new org.apache.commons.math.optimization.RealPointValuePair(var50, 0.0d);
    double[][] var55 = new double[][] { var50};
    org.apache.commons.math.linear.Array2DRowRealMatrix var57 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var55, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var42.copySubMatrix(var43, var46, var55);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test67() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test67"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    double var4 = var3.getConstantTerm();
    org.apache.commons.math.linear.RealVector var5 = var3.getCoefficients();
    double[] var8 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var9 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var8);
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var13 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var15 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var13, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var16 = new org.apache.commons.math.linear.ArrayRealVector(var11, var13);
    double[] var17 = var9.operate(var13);
    double var18 = var3.getValue(var13);
    org.apache.commons.math.linear.ArrayRealVector var20 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var21 = var20.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var22 = var20.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var24 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var25 = var24.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var26 = var24.mapAsin();
    org.apache.commons.math.linear.RealVector var27 = var24.mapCbrt();
    org.apache.commons.math.optimization.linear.Relationship var29 = null;
    org.apache.commons.math.linear.ArrayRealVector var31 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.optimization.linear.LinearConstraint var33 = new org.apache.commons.math.optimization.linear.LinearConstraint(var27, 363.7393755555636d, var29, (org.apache.commons.math.linear.RealVector)var31, 10.0d);
    double var34 = var20.getL1Distance(var31);
    org.apache.commons.math.linear.RealVector var36 = var20.mapSubtract(2.0d);
    double[] var37 = var20.toArray();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var38 = var3.getValue(var37);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test68() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test68"); }


    double[] var2 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var3 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var2);
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var7 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var9 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var7, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(var5, var7);
    double[] var11 = var3.operate(var7);
    org.apache.commons.math.linear.ArrayRealVector var12 = new org.apache.commons.math.linear.ArrayRealVector(var7);
    org.apache.commons.math.optimization.linear.Relationship var14 = null;
    double[] var17 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var18 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17);
    org.apache.commons.math.linear.ArrayRealVector var20 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var22 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var24 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var22, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var25 = new org.apache.commons.math.linear.ArrayRealVector(var20, var22);
    double[] var26 = var18.operate(var22);
    org.apache.commons.math.linear.ArrayRealVector var27 = new org.apache.commons.math.linear.ArrayRealVector(var22);
    org.apache.commons.math.optimization.linear.LinearConstraint var29 = new org.apache.commons.math.optimization.linear.LinearConstraint(var7, 50.0d, var14, var22, 2.302585092994046d);
    double var30 = var29.getValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-47.69741490700596d));

  }

  public void test69() {}
//   public void test69() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test69"); }
// 
// 
//     double[] var0 = null;
//     org.apache.commons.math.linear.ArrayRealVector var2 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     org.apache.commons.math.linear.RealVector var3 = var2.mapLog10();
//     org.apache.commons.math.linear.RealVector var4 = var2.mapExpm1ToSelf();
//     org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     org.apache.commons.math.linear.RealVector var7 = var6.mapCosToSelf();
//     org.apache.commons.math.linear.RealVector var8 = var6.mapAsin();
//     org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(var6, false);
//     org.apache.commons.math.linear.RealVector var11 = var2.subtract((org.apache.commons.math.linear.RealVector)var10);
//     double[] var12 = var2.getDataRef();
//     double var13 = org.apache.commons.math.util.MathUtils.distanceInf(var0, var12);
// 
//   }

  public void test70() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test70"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(var1, false);
    org.apache.commons.math.linear.RealVector var6 = var5.mapLog1pToSelf();
    org.apache.commons.math.linear.ArrayRealVector var8 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double var9 = var5.dotProduct((org.apache.commons.math.linear.RealVector)var8);
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var12 = var11.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var13 = var11.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var15 = new org.apache.commons.math.linear.ArrayRealVector(var11, false);
    org.apache.commons.math.linear.RealVector var16 = var11.mapSinhToSelf();
    double var17 = var8.getLInfDistance((org.apache.commons.math.linear.RealVector)var11);
    org.apache.commons.math.linear.RealVector var18 = var11.mapFloorToSelf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test71() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test71"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(var1, false);
    org.apache.commons.math.linear.RealVector var6 = var5.mapLog1pToSelf();
    org.apache.commons.math.linear.RealVector var7 = var5.mapLog1pToSelf();
    org.apache.commons.math.linear.RealVector var9 = var5.mapSubtractToSelf(2.9066992099956157d);
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var13 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var15 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var13, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var16 = new org.apache.commons.math.linear.ArrayRealVector(var11, var13);
    org.apache.commons.math.linear.RealVector var17 = var16.mapCoshToSelf();
    java.lang.String var18 = var16.toString();
    org.apache.commons.math.linear.RealVector var20 = var16.mapAddToSelf(10.0d);
    org.apache.commons.math.linear.RealVector var21 = var16.mapLog10();
    org.apache.commons.math.linear.ArrayRealVector var23 = new org.apache.commons.math.linear.ArrayRealVector(var16, false);
    org.apache.commons.math.linear.ArrayRealVector var25 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var27 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var29 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var27, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var30 = new org.apache.commons.math.linear.ArrayRealVector(var25, var27);
    org.apache.commons.math.linear.ArrayRealVector var32 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var33 = var32.mapCosToSelf();
    double var34 = var25.dotProduct(var33);
    org.apache.commons.math.linear.ArrayRealVector var35 = var23.append(var25);
    org.apache.commons.math.linear.ArrayRealVector var36 = var5.add(var25);
    org.apache.commons.math.linear.RealVector var37 = var25.mapSin();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "{1.54}"+ "'", var18.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test72() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test72"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var2 = var1.getData();
    org.apache.commons.math.linear.RealVector var3 = var1.mapSignum();
    double[] var4 = var1.toArray();
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var8 = var6.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(var6, false);
    org.apache.commons.math.linear.RealVector var12 = var10.mapDivideToSelf(0.0d);
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(var1, var10);
    org.apache.commons.math.linear.ArrayRealVector var16 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var17 = var16.getData();
    org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(var17);
    org.apache.commons.math.linear.RealVector var19 = var18.mapLog1pToSelf();
    org.apache.commons.math.linear.RealVector var20 = var18.mapSin();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var13.setSubVector(101, var20);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test73() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test73"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    double[] var23 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var25 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var23, 1.0d);
    double[] var28 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var29 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var28);
    org.apache.commons.math.linear.ArrayRealVector var31 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var33 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var35 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var33, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var36 = new org.apache.commons.math.linear.ArrayRealVector(var31, var33);
    double[] var37 = var29.operate(var33);
    org.apache.commons.math.linear.ArrayRealVector var38 = new org.apache.commons.math.linear.ArrayRealVector(var33);
    org.apache.commons.math.optimization.linear.Relationship var40 = null;
    double[] var43 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var44 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var43);
    org.apache.commons.math.linear.ArrayRealVector var46 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var48 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var50 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var48, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var51 = new org.apache.commons.math.linear.ArrayRealVector(var46, var48);
    double[] var52 = var44.operate(var48);
    org.apache.commons.math.linear.ArrayRealVector var53 = new org.apache.commons.math.linear.ArrayRealVector(var48);
    org.apache.commons.math.optimization.linear.LinearConstraint var55 = new org.apache.commons.math.optimization.linear.LinearConstraint(var33, 50.0d, var40, var48, 2.302585092994046d);
    double var56 = var25.getValue(var48);
    org.apache.commons.math.linear.RealVector var57 = var25.getCoefficients();
    org.apache.commons.math.linear.RealVector var58 = var8.operate(var57);
    double[] var60 = var8.getRow(0);
    double[] var62 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var64 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var62, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var66 = new org.apache.commons.math.optimization.RealPointValuePair(var62, 0.0d);
    double[][] var67 = new double[][] { var62};
    org.apache.commons.math.linear.Array2DRowRealMatrix var69 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var67, true);
    org.apache.commons.math.linear.RealMatrix var70 = var69.copy();
    boolean var71 = var69.isSingular();
    org.apache.commons.math.linear.Array2DRowRealMatrix var72 = var8.subtract(var69);
    org.apache.commons.math.linear.RealMatrixPreservingVisitor var73 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var78 = var72.walkInOptimizedOrder(var73, 1, 10, 1, 1010);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test74() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test74"); }


    double[] var2 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var3 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var2);
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var7 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var9 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var7, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(var5, var7);
    double[] var11 = var3.operate(var7);
    org.apache.commons.math.linear.RealMatrix var12 = var3.transpose();
    java.lang.String var13 = var3.toString();
    org.apache.commons.math.linear.RealMatrix var14 = var3.copy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Array2DRowRealMatrix{{0.0},{-1.0}}"+ "'", var13.equals("Array2DRowRealMatrix{{0.0},{-1.0}}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test75() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test75"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    java.lang.String var8 = var6.toString();
    org.apache.commons.math.linear.RealVector var10 = var6.mapAddToSelf(10.0d);
    org.apache.commons.math.linear.RealVector var11 = var6.mapLog10();
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(var6, false);
    org.apache.commons.math.linear.ArrayRealVector var15 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var17 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var19 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var17, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var20 = new org.apache.commons.math.linear.ArrayRealVector(var15, var17);
    org.apache.commons.math.linear.ArrayRealVector var22 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var23 = var22.mapCosToSelf();
    double var24 = var15.dotProduct(var23);
    org.apache.commons.math.linear.ArrayRealVector var25 = var13.append(var15);
    org.apache.commons.math.linear.RealVector var26 = var13.mapCbrt();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "{1.54}"+ "'", var8.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test76() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test76"); }


    org.apache.commons.math.linear.ArrayRealVector var2 = new org.apache.commons.math.linear.ArrayRealVector(1, 0.0d);
    org.apache.commons.math.linear.RealVector var3 = var2.mapFloorToSelf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test77() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test77"); }


    double[] var2 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var3 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var2);
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var7 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var9 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var7, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(var5, var7);
    double[] var11 = var3.operate(var7);
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var15 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var17 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var15, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(var13, var15);
    org.apache.commons.math.linear.ArrayRealVector var19 = new org.apache.commons.math.linear.ArrayRealVector(var11, var15);
    org.apache.commons.math.linear.ArrayRealVector var21 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var23 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var25 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var23, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var26 = new org.apache.commons.math.linear.ArrayRealVector(var21, var23);
    org.apache.commons.math.optimization.RealPointValuePair var29 = new org.apache.commons.math.optimization.RealPointValuePair(var23, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var31 = new org.apache.commons.math.linear.ArrayRealVector(var23, true);
    int var32 = var31.getDimension();
    java.lang.Double[] var34 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var35 = new org.apache.commons.math.linear.ArrayRealVector(var34);
    org.apache.commons.math.linear.RealVector var36 = var35.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var37 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var35);
    org.apache.commons.math.linear.RealVector var38 = var31.add((org.apache.commons.math.linear.RealVector)var37);
    java.lang.Double[] var40 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var41 = new org.apache.commons.math.linear.ArrayRealVector(var40);
    org.apache.commons.math.linear.ArrayRealVector var42 = var37.projection(var41);
    org.apache.commons.math.linear.RealVector var43 = var42.mapSinh();
    org.apache.commons.math.linear.RealVector var44 = var42.mapLog10ToSelf();
    org.apache.commons.math.linear.RealVector var45 = var19.append(var44);
    java.lang.String var46 = org.apache.commons.math.linear.RealVectorFormat.formatRealVector(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "{0.59}"+ "'", var46.equals("{0.59}"));

  }

  public void test78() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test78"); }


    int var1 = org.apache.commons.math.util.MathUtils.sign(1079574528);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);

  }

  public void test79() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test79"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    double[] var23 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var25 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var23, 1.0d);
    double[] var28 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var29 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var28);
    org.apache.commons.math.linear.ArrayRealVector var31 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var33 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var35 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var33, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var36 = new org.apache.commons.math.linear.ArrayRealVector(var31, var33);
    double[] var37 = var29.operate(var33);
    org.apache.commons.math.linear.ArrayRealVector var38 = new org.apache.commons.math.linear.ArrayRealVector(var33);
    org.apache.commons.math.optimization.linear.Relationship var40 = null;
    double[] var43 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var44 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var43);
    org.apache.commons.math.linear.ArrayRealVector var46 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var48 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var50 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var48, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var51 = new org.apache.commons.math.linear.ArrayRealVector(var46, var48);
    double[] var52 = var44.operate(var48);
    org.apache.commons.math.linear.ArrayRealVector var53 = new org.apache.commons.math.linear.ArrayRealVector(var48);
    org.apache.commons.math.optimization.linear.LinearConstraint var55 = new org.apache.commons.math.optimization.linear.LinearConstraint(var33, 50.0d, var40, var48, 2.302585092994046d);
    double var56 = var25.getValue(var48);
    org.apache.commons.math.linear.RealVector var57 = var25.getCoefficients();
    org.apache.commons.math.linear.RealVector var58 = var8.operate(var57);
    double[] var60 = var8.getRow(0);
    double[] var62 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var64 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var62, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var66 = new org.apache.commons.math.optimization.RealPointValuePair(var62, 0.0d);
    double[][] var67 = new double[][] { var62};
    org.apache.commons.math.linear.Array2DRowRealMatrix var69 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var67, true);
    org.apache.commons.math.linear.RealMatrix var70 = var69.copy();
    boolean var71 = var69.isSingular();
    org.apache.commons.math.linear.Array2DRowRealMatrix var72 = var8.subtract(var69);
    org.apache.commons.math.linear.Array2DRowRealMatrix var75 = new org.apache.commons.math.linear.Array2DRowRealMatrix(10, 100);
    double[][] var76 = var75.getDataRef();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealMatrix var77 = var8.solve((org.apache.commons.math.linear.RealMatrix)var75);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test80() {}
//   public void test80() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test80"); }
// 
// 
//     double[] var1 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
//     double[][] var6 = new double[][] { var1};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
//     double var9 = var8.getFrobeniusNorm();
//     double[] var12 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
//     double[][] var17 = new double[][] { var12};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
//     double var20 = var19.getFrobeniusNorm();
//     var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
//     org.apache.commons.math.linear.RealMatrixChangingVisitor var22 = null;
//     double var23 = var19.walkInOptimizedOrder(var22);
// 
//   }

  public void test81() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test81"); }


    org.apache.commons.math.linear.Array2DRowRealMatrix var0 = new org.apache.commons.math.linear.Array2DRowRealMatrix();
    int var1 = var0.getRowDimension();
    int var2 = var0.getRowDimension();
    double[] var5 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var7 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var5, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var9 = new org.apache.commons.math.optimization.RealPointValuePair(var5, 0.0d);
    double[][] var10 = new double[][] { var5};
    org.apache.commons.math.linear.Array2DRowRealMatrix var12 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var10, true);
    double var13 = var12.getFrobeniusNorm();
    double var14 = var12.getNorm();
    double[] var16 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var18 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var16, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var20 = new org.apache.commons.math.optimization.RealPointValuePair(var16, 0.0d);
    double[][] var21 = new double[][] { var16};
    org.apache.commons.math.linear.Array2DRowRealMatrix var23 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var21, true);
    double var24 = var23.getFrobeniusNorm();
    double[] var27 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var29 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var27, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var31 = new org.apache.commons.math.optimization.RealPointValuePair(var27, 0.0d);
    double[][] var32 = new double[][] { var27};
    org.apache.commons.math.linear.Array2DRowRealMatrix var34 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var32, true);
    double var35 = var34.getFrobeniusNorm();
    var23.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var34);
    org.apache.commons.math.linear.RealMatrix var37 = var34.inverse();
    int var38 = var34.getRowDimension();
    double[][] var39 = var34.getData();
    org.apache.commons.math.linear.Array2DRowRealMatrix var41 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var39, false);
    var41.multiplyEntry(0, 0, 0.03933967394071772d);
    org.apache.commons.math.linear.Array2DRowRealMatrix var46 = var12.subtract(var41);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setColumnMatrix(1079574528, (org.apache.commons.math.linear.RealMatrix)var41);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test82() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test82"); }


    int var2 = org.apache.commons.math.util.MathUtils.lcm(1010, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);

  }

  public void test83() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test83"); }


    org.apache.commons.math.ConvergenceException var4 = new org.apache.commons.math.ConvergenceException();
    java.lang.Object[] var7 = new java.lang.Object[] { 0};
    org.apache.commons.math.ConvergenceException var8 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var4, "", var7);
    java.lang.Object[] var12 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var13 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var12);
    org.apache.commons.math.MathRuntimeException var14 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var4, "hi!", var12);
    org.apache.commons.math.MathException var15 = new org.apache.commons.math.MathException("}", var12);
    org.apache.commons.math.optimization.OptimizationException var16 = new org.apache.commons.math.optimization.OptimizationException("", var12);
    java.util.NoSuchElementException var17 = org.apache.commons.math.MathRuntimeException.createNoSuchElementException("org.apache.commons.math.ConvergenceException: Convergence failed", var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.ArithmeticException var18 = org.apache.commons.math.MathRuntimeException.createArithmeticException("Array2DRowRealMatrix{{1.0}}", var12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test84() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test84"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(var1, false);
    org.apache.commons.math.linear.RealVector var6 = var5.mapLog1pToSelf();
    org.apache.commons.math.linear.RealVector var7 = var5.mapLog1pToSelf();
    org.apache.commons.math.linear.RealVector var9 = var5.mapSubtractToSelf(2.9066992099956157d);
    org.apache.commons.math.optimization.linear.Relationship var11 = null;
    java.lang.Double[] var13 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var14 = new org.apache.commons.math.linear.ArrayRealVector(var13);
    java.lang.Double[] var16 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var17 = new org.apache.commons.math.linear.ArrayRealVector(var16);
    org.apache.commons.math.linear.ArrayRealVector var19 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var21 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var23 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var21, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var24 = new org.apache.commons.math.linear.ArrayRealVector(var19, var21);
    org.apache.commons.math.linear.RealVector var25 = var17.subtract(var21);
    boolean var26 = var14.equals((java.lang.Object)var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.optimization.linear.LinearConstraint var28 = new org.apache.commons.math.optimization.linear.LinearConstraint(var9, 2.125409172596247E10d, var11, (org.apache.commons.math.linear.RealVector)var14, 50.0d);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test85() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test85"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    org.apache.commons.math.linear.RealMatrix var10 = var8.transpose();
    double[] var13 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var15 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var13, 1.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var8.setRow(1079574528, var13);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test86() {}
//   public void test86() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test86"); }
// 
// 
//     java.text.NumberFormat var3 = null;
//     org.apache.commons.math.linear.RealVectorFormat var4 = new org.apache.commons.math.linear.RealVectorFormat("", "hi!", "org.apache.commons.math.ConvergenceException: Convergence failed", var3);
//     java.lang.String var5 = var4.getSeparator();
//     java.lang.String var6 = var4.getSeparator();
//     java.lang.String var7 = var4.getPrefix();
//     java.lang.Object var8 = var4.clone();
//     java.lang.Object var9 = var4.clone();
//     java.text.ParsePosition var11 = null;
//     org.apache.commons.math.linear.ArrayRealVector var12 = var4.parse("}", var11);
// 
//   }

  public void test87() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test87"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(var1, false);
    org.apache.commons.math.linear.RealVector var6 = var5.mapLog1pToSelf();
    org.apache.commons.math.linear.ArrayRealVector var8 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double var9 = var5.dotProduct((org.apache.commons.math.linear.RealVector)var8);
    org.apache.commons.math.linear.RealVector var10 = var8.mapLogToSelf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test88() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test88"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double var10 = var8.getNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    double[] var23 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var25 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var23, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var27 = new org.apache.commons.math.optimization.RealPointValuePair(var23, 0.0d);
    double[][] var28 = new double[][] { var23};
    org.apache.commons.math.linear.Array2DRowRealMatrix var30 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var28, true);
    double var31 = var30.getFrobeniusNorm();
    var19.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var30);
    org.apache.commons.math.linear.RealMatrix var33 = var30.inverse();
    int var34 = var30.getRowDimension();
    double[][] var35 = var30.getData();
    org.apache.commons.math.linear.Array2DRowRealMatrix var37 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var35, false);
    var37.multiplyEntry(0, 0, 0.03933967394071772d);
    org.apache.commons.math.linear.Array2DRowRealMatrix var42 = var8.subtract(var37);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double[] var44 = var42.getRow(1);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test89() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test89"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double var10 = var8.getNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    double[] var23 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var25 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var23, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var27 = new org.apache.commons.math.optimization.RealPointValuePair(var23, 0.0d);
    double[][] var28 = new double[][] { var23};
    org.apache.commons.math.linear.Array2DRowRealMatrix var30 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var28, true);
    double var31 = var30.getFrobeniusNorm();
    var19.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var30);
    org.apache.commons.math.linear.RealMatrix var33 = var30.inverse();
    int var34 = var30.getRowDimension();
    double[][] var35 = var30.getData();
    org.apache.commons.math.linear.Array2DRowRealMatrix var37 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var35, false);
    var37.multiplyEntry(0, 0, 0.03933967394071772d);
    org.apache.commons.math.linear.Array2DRowRealMatrix var42 = var8.subtract(var37);
    org.apache.commons.math.linear.ArrayRealVector var45 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var46 = var45.mapSinhToSelf();
    org.apache.commons.math.linear.ArrayRealVector var48 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var49 = var48.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var50 = var48.mapAsin();
    org.apache.commons.math.linear.RealVector var51 = var48.mapLog10();
    org.apache.commons.math.linear.ArrayRealVector var52 = var45.append(var48);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var37.setRowVector(0, (org.apache.commons.math.linear.RealVector)var52);
      fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException");
    } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test90() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test90"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    java.lang.String var8 = var6.toString();
    org.apache.commons.math.linear.RealVector var10 = var6.mapAddToSelf(10.0d);
    org.apache.commons.math.linear.RealVector var11 = var6.mapLog10();
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(var6, false);
    org.apache.commons.math.linear.RealVector var14 = var13.mapLog1p();
    org.apache.commons.math.linear.RealVector var16 = var13.mapAddToSelf((-0.26548245743668986d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "{1.54}"+ "'", var8.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test91() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test91"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var1.mapRint();
    org.apache.commons.math.linear.RealVector var8 = var1.mapCoshToSelf();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var10 = var1.getEntry(1073741824);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test92() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test92"); }


    double var1 = org.apache.commons.math.util.MathUtils.factorialLog(1010);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 5981.260539780036d);

  }

  public void test93() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test93"); }


    int var2 = org.apache.commons.math.util.MathUtils.subAndCheck(0, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-100));

  }

  public void test94() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test94"); }


    int var1 = org.apache.commons.math.util.MathUtils.hash(49.73451754256331d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-336392980));

  }

  public void test95() {}
//   public void test95() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test95"); }
// 
// 
//     java.text.NumberFormat var3 = null;
//     org.apache.commons.math.linear.RealVectorFormat var4 = new org.apache.commons.math.linear.RealVectorFormat("", "hi!", "org.apache.commons.math.ConvergenceException: Convergence failed", var3);
//     java.lang.String var5 = var4.getSeparator();
//     java.lang.String var6 = var4.getSeparator();
//     java.lang.String var7 = var4.getPrefix();
//     java.lang.Object var8 = var4.clone();
//     java.lang.Object var9 = var4.clone();
//     java.text.NumberFormat var10 = var4.getFormat();
//     java.text.ParsePosition var12 = null;
//     org.apache.commons.math.linear.ArrayRealVector var13 = var4.parse("{1}", var12);
// 
//   }

  public void test96() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test96"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.optimization.linear.Relationship var1 = org.apache.commons.math.optimization.linear.Relationship.valueOf("Array2DRowRealMatrix{{0.0},{-1.0}}");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test97() {}
//   public void test97() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test97"); }
// 
// 
//     java.math.BigInteger var0 = null;
//     java.math.BigInteger var2 = org.apache.commons.math.util.MathUtils.pow(var0, 0L);
//     java.math.BigInteger var4 = org.apache.commons.math.util.MathUtils.pow(var2, 1073741824);
//     java.math.BigInteger var6 = org.apache.commons.math.util.MathUtils.pow(var4, 10L);
//     java.math.BigInteger var7 = null;
//     java.math.BigInteger var8 = org.apache.commons.math.util.MathUtils.pow(var4, var7);
// 
//   }

  public void test98() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test98"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var2 = var1.getData();
    org.apache.commons.math.linear.RealVector var3 = var1.mapSignum();
    double[] var4 = var1.toArray();
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var8 = var6.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(var6, false);
    org.apache.commons.math.linear.RealVector var12 = var10.mapDivideToSelf(0.0d);
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(var1, var10);
    org.apache.commons.math.linear.ArrayRealVector var15 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var17 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var19 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var17, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var20 = new org.apache.commons.math.linear.ArrayRealVector(var15, var17);
    org.apache.commons.math.optimization.RealPointValuePair var23 = new org.apache.commons.math.optimization.RealPointValuePair(var17, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var25 = new org.apache.commons.math.linear.ArrayRealVector(var17, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealVector var26 = var1.add(var17);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test99() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test99"); }


    java.lang.Double[] var1 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var2 = new org.apache.commons.math.linear.ArrayRealVector(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(var1, (-100), (-100));
      fail("Expected exception of type java.lang.NegativeArraySizeException");
    } catch (java.lang.NegativeArraySizeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test100() {}
//   public void test100() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test100"); }
// 
// 
//     java.text.NumberFormat var0 = null;
//     org.apache.commons.math.linear.RealVectorFormat var1 = new org.apache.commons.math.linear.RealVectorFormat(var0);
//     java.text.ParsePosition var3 = null;
//     java.lang.Object var4 = var1.parseObject("Array2DRowRealMatrix{{1.0}}", var3);
// 
//   }

  public void test101() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test101"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAcos();
    double[] var6 = new double[] { 1.0d, 0.0d};
    org.apache.commons.math.linear.RealVector var7 = var1.append(var6);
    org.apache.commons.math.linear.RealVector var8 = var1.mapTanhToSelf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test102() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test102"); }


    org.apache.commons.math.MaxIterationsExceededException var1 = new org.apache.commons.math.MaxIterationsExceededException(100);
    java.lang.String var2 = var1.getPattern();
    int var3 = var1.getMaxIterations();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Maximal number of iterations ({0}) exceeded"+ "'", var2.equals("Maximal number of iterations ({0}) exceeded"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 100);

  }

  public void test103() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test103"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var2 = var1.getData();
    org.apache.commons.math.linear.RealVector var3 = var1.mapSignum();
    double[] var4 = var1.toArray();
    org.apache.commons.math.linear.RealVector var5 = var1.mapTanToSelf();
    org.apache.commons.math.linear.ArrayRealVector var7 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var9 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var11 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var9, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var12 = new org.apache.commons.math.linear.ArrayRealVector(var7, var9);
    org.apache.commons.math.optimization.RealPointValuePair var15 = new org.apache.commons.math.optimization.RealPointValuePair(var9, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var17 = new org.apache.commons.math.linear.ArrayRealVector(var9, true);
    int var18 = var17.getDimension();
    java.lang.Double[] var20 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var21 = new org.apache.commons.math.linear.ArrayRealVector(var20);
    org.apache.commons.math.linear.RealVector var22 = var21.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var23 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var21);
    org.apache.commons.math.linear.RealVector var24 = var17.add((org.apache.commons.math.linear.RealVector)var23);
    org.apache.commons.math.linear.RealVector var25 = var23.mapLog10ToSelf();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.ArrayRealVector var26 = var1.add(var23);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test104() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test104"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.optimization.RealPointValuePair var9 = new org.apache.commons.math.optimization.RealPointValuePair(var3, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(var3, true);
    int var12 = var11.getDimension();
    java.lang.Double[] var14 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var15 = new org.apache.commons.math.linear.ArrayRealVector(var14);
    org.apache.commons.math.linear.RealVector var16 = var15.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var15);
    org.apache.commons.math.linear.RealVector var18 = var11.add((org.apache.commons.math.linear.RealVector)var17);
    java.lang.Double[] var20 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var21 = new org.apache.commons.math.linear.ArrayRealVector(var20);
    org.apache.commons.math.linear.ArrayRealVector var22 = var17.projection(var21);
    org.apache.commons.math.linear.RealVector var23 = var22.mapLogToSelf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test105() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test105"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(var1, false);
    org.apache.commons.math.linear.RealVector var7 = var5.mapDivideToSelf(0.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var9 = var5.getEntry(1);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test106() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test106"); }


    long var2 = org.apache.commons.math.util.MathUtils.addAndCheck((-1L), 10000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 9999L);

  }

  public void test107() {}
//   public void test107() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test107"); }
// 
// 
//     org.apache.commons.math.linear.RealVectorFormat var3 = new org.apache.commons.math.linear.RealVectorFormat("Convergence failed", "}", "Array2DRowRealMatrix{{0.0},{-1.0}}");
//     java.text.ParsePosition var5 = null;
//     java.lang.Object var6 = var3.parseObject("{1}", var5);
// 
//   }

  public void test108() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test108"); }


    int var3 = org.apache.commons.math.util.MathUtils.compareTo(0.0d, 5981.260539780036d, 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));

  }

  public void test109() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test109"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    java.lang.String var8 = var6.toString();
    org.apache.commons.math.linear.RealVector var10 = var6.mapAddToSelf(10.0d);
    org.apache.commons.math.linear.RealVector var11 = var6.mapLog10();
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(var6, false);
    org.apache.commons.math.linear.RealVector var14 = var13.mapLog1p();
    org.apache.commons.math.linear.ArrayRealVector var15 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var13);
    double var16 = var13.getNorm();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "{1.54}"+ "'", var8.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 11.543080634815244d);

  }

  public void test110() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test110"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var2 = var1.getData();
    org.apache.commons.math.linear.RealVector var3 = var1.mapSignum();
    double[] var4 = var1.toArray();
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var8 = var6.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(var6, false);
    org.apache.commons.math.linear.RealVector var12 = var10.mapDivideToSelf(0.0d);
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(var1, var10);
    org.apache.commons.math.linear.RealVector var14 = var10.mapRintToSelf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test111() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test111"); }


    double var2 = org.apache.commons.math.util.MathUtils.round(1.731030945644E13d, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1.731030945644E13d);

  }

  public void test112() {}
//   public void test112() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test112"); }
// 
// 
//     java.lang.Class var0 = null;
//     java.lang.Enum var2 = java.lang.Enum.<java.lang.Enum>valueOf(var0, "Maximal number of iterations ({0}) exceeded");
// 
//   }

  public void test113() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test113"); }


    double[] var2 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var3 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var2);
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var7 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var9 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var7, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(var5, var7);
    org.apache.commons.math.linear.RealVector var11 = var10.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var12 = var10.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var13 = var10.mapRintToSelf();
    org.apache.commons.math.linear.RealVector var15 = var10.mapSubtractToSelf(0.5430806348152439d);
    org.apache.commons.math.linear.RealVector var16 = var3.operate(var15);
    org.apache.commons.math.linear.RealMatrixChangingVisitor var17 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var22 = var3.walkInColumnOrder(var17, 10, 100, 1010, 101);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test114() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test114"); }


    org.apache.commons.math.optimization.linear.SimplexSolver var0 = new org.apache.commons.math.optimization.linear.SimplexSolver();
    int var1 = var0.getMaxIterations();
    var0.setMaxIterations((-336392980));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 100);

  }

  public void test115() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test115"); }


    org.apache.commons.math.linear.Array2DRowRealMatrix var2 = new org.apache.commons.math.linear.Array2DRowRealMatrix(10, 100);
    double[] var5 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var6 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var5);
    double var7 = var6.getNorm();
    boolean var8 = var2.equals((java.lang.Object)var6);
    org.apache.commons.math.linear.Array2DRowRealMatrix var11 = new org.apache.commons.math.linear.Array2DRowRealMatrix(10, 100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.Array2DRowRealMatrix var12 = var6.subtract(var11);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test116() {}
//   public void test116() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test116"); }
// 
// 
//     double[] var1 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
//     double[][] var6 = new double[][] { var1};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
//     double var9 = var8.getFrobeniusNorm();
//     double[] var12 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
//     double[][] var17 = new double[][] { var12};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
//     double var20 = var19.getFrobeniusNorm();
//     var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
//     org.apache.commons.math.linear.RealMatrix var22 = var8.transpose();
//     double[] var24 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var26 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var24, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var28 = new org.apache.commons.math.optimization.RealPointValuePair(var24, 0.0d);
//     double[][] var29 = new double[][] { var24};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var31 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var29, true);
//     double var32 = var31.getFrobeniusNorm();
//     double[] var35 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var37 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var35, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var39 = new org.apache.commons.math.optimization.RealPointValuePair(var35, 0.0d);
//     double[][] var40 = new double[][] { var35};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var42 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var40, true);
//     double var43 = var42.getFrobeniusNorm();
//     var31.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var42);
//     org.apache.commons.math.linear.RealMatrix var45 = var42.inverse();
//     int var46 = var42.getRowDimension();
//     double[][] var47 = var42.getData();
//     org.apache.commons.math.linear.RealMatrix var48 = var8.solve((org.apache.commons.math.linear.RealMatrix)var42);
//     double[] var49 = null;
//     double[] var50 = var8.preMultiply(var49);
// 
//   }

  public void test117() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test117"); }


    java.text.NumberFormat var0 = null;
    org.apache.commons.math.linear.RealVectorFormat var1 = new org.apache.commons.math.linear.RealVectorFormat(var0);
    java.lang.String var2 = var1.getSeparator();
    double[] var4 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var6 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var4, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var8 = new org.apache.commons.math.optimization.RealPointValuePair(var4, 0.0d);
    double[][] var9 = new double[][] { var4};
    org.apache.commons.math.linear.Array2DRowRealMatrix var11 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var9, true);
    double var12 = var11.getFrobeniusNorm();
    double[] var15 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var17 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var15, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var19 = new org.apache.commons.math.optimization.RealPointValuePair(var15, 0.0d);
    double[][] var20 = new double[][] { var15};
    org.apache.commons.math.linear.Array2DRowRealMatrix var22 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var20, true);
    double var23 = var22.getFrobeniusNorm();
    var11.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var22);
    org.apache.commons.math.linear.RealMatrix var25 = var22.inverse();
    int var26 = var22.getRowDimension();
    double[][] var27 = var22.getData();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.text.AttributedCharacterIterator var28 = var1.formatToCharacterIterator((java.lang.Object)var22);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "; "+ "'", var2.equals("; "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test118() {}
//   public void test118() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test118"); }
// 
// 
//     org.apache.commons.math.linear.Array2DRowRealMatrix var2 = new org.apache.commons.math.linear.Array2DRowRealMatrix(10, 100);
//     double[] var5 = new double[] { 0.0d, (-1.0d)};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var6 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var5);
//     double var7 = var6.getNorm();
//     boolean var8 = var2.equals((java.lang.Object)var6);
//     org.apache.commons.math.linear.RealMatrixPreservingVisitor var9 = null;
//     double var10 = var6.walkInOptimizedOrder(var9);
// 
//   }

  public void test119() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test119"); }


    java.lang.Object[] var2 = new java.lang.Object[] { (short)10};
    org.apache.commons.math.MathRuntimeException var3 = new org.apache.commons.math.MathRuntimeException("hi!", var2);
    java.lang.Object[] var5 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.MathException var6 = new org.apache.commons.math.MathException((java.lang.Throwable)var3, "{1.54}", var5);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test120() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test120"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapUlpToSelf();
    org.apache.commons.math.linear.RealVector var4 = var1.mapAtanToSelf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test121() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test121"); }


    int var2 = org.apache.commons.math.util.MathUtils.gcd(10, 101);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);

  }

  public void test122() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test122"); }


    org.apache.commons.math.ConvergenceException var0 = new org.apache.commons.math.ConvergenceException();
    java.lang.Object[] var3 = new java.lang.Object[] { 0};
    org.apache.commons.math.ConvergenceException var4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var0, "", var3);
    java.lang.Object[] var8 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var9 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var8);
    org.apache.commons.math.MathRuntimeException var10 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var0, "hi!", var8);
    java.lang.Object[] var11 = var10.getArguments();
    java.lang.Object[] var15 = new java.lang.Object[] { (short)10};
    org.apache.commons.math.MathRuntimeException var16 = new org.apache.commons.math.MathRuntimeException("hi!", var15);
    org.apache.commons.math.MathRuntimeException var17 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var10, "", var15);
    java.lang.String var18 = var17.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "org.apache.commons.math.MathRuntimeException: "+ "'", var18.equals("org.apache.commons.math.MathRuntimeException: "));

  }

  public void test123() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test123"); }


    int var2 = org.apache.commons.math.util.MathUtils.addAndCheck((-336392980), (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-336392981));

  }

  public void test124() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test124"); }


    double var1 = org.apache.commons.math.util.MathUtils.factorialDouble(101);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 9.425947759839367E159d);

  }

  public void test125() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test125"); }


    long var2 = org.apache.commons.math.util.MathUtils.mulAndCheck((-1L), 10000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-10000L));

  }

  public void test126() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test126"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var8 = var6.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var9 = var6.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var12 = var11.getData();
    double[] var13 = var11.getData();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var14 = var6.getLInfDistance(var13);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test127() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test127"); }


    java.math.BigInteger var0 = null;
    java.math.BigInteger var2 = org.apache.commons.math.util.MathUtils.pow(var0, 0L);
    java.math.BigInteger var4 = org.apache.commons.math.util.MathUtils.pow(var2, 1073741824);
    java.math.BigInteger var5 = null;
    java.math.BigInteger var7 = org.apache.commons.math.util.MathUtils.pow(var5, 0L);
    java.math.BigInteger var9 = org.apache.commons.math.util.MathUtils.pow(var7, 1073741824);
    java.math.BigInteger var10 = org.apache.commons.math.util.MathUtils.pow(var2, var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test128() {}
//   public void test128() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test128"); }
// 
// 
//     double[] var1 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
//     double[][] var6 = new double[][] { var1};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
//     double[] var10 = var8.getRow(0);
//     double[] var11 = null;
//     boolean var12 = org.apache.commons.math.util.MathUtils.equals(var10, var11);
//     double[] var13 = null;
//     double var14 = org.apache.commons.math.util.MathUtils.distance(var10, var13);
// 
//   }

  public void test129() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test129"); }


    boolean var2 = org.apache.commons.math.util.MathUtils.equals(10.0d, 3.9066992099956157d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test130() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test130"); }


    double[] var2 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var3 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var2);
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var7 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var9 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var7, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(var5, var7);
    double[] var11 = var3.operate(var7);
    org.apache.commons.math.optimization.RealPointValuePair var14 = new org.apache.commons.math.optimization.RealPointValuePair(var7, (-0.7d), false);
    org.apache.commons.math.optimization.RealPointValuePair var17 = new org.apache.commons.math.optimization.RealPointValuePair(var7, 0.0d, true);
    double[] var18 = var17.getPoint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test131() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test131"); }


    java.math.BigInteger var0 = null;
    java.math.BigInteger var2 = org.apache.commons.math.util.MathUtils.pow(var0, 0L);
    java.math.BigInteger var4 = org.apache.commons.math.util.MathUtils.pow(var2, 1073741824);
    java.math.BigInteger var6 = org.apache.commons.math.util.MathUtils.pow(var4, 101);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.math.BigInteger var8 = org.apache.commons.math.util.MathUtils.pow(var4, (-100));
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test132() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test132"); }


    double[] var2 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var3 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var2);
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var7 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var9 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var7, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(var5, var7);
    double[] var11 = var3.operate(var7);
    org.apache.commons.math.linear.ArrayRealVector var12 = new org.apache.commons.math.linear.ArrayRealVector(var7);
    org.apache.commons.math.linear.Array2DRowRealMatrix var13 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var7);
    org.apache.commons.math.linear.RealMatrixPreservingVisitor var14 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var19 = var13.walkInColumnOrder(var14, (-336392980), 1079574528, 1, (-1));
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test133() {}
//   public void test133() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test133"); }
// 
// 
//     java.text.NumberFormat var3 = null;
//     org.apache.commons.math.linear.RealVectorFormat var4 = new org.apache.commons.math.linear.RealVectorFormat("", "hi!", "org.apache.commons.math.ConvergenceException: Convergence failed", var3);
//     java.lang.String var5 = var4.getSeparator();
//     java.lang.String var6 = var4.getSeparator();
//     java.lang.String var7 = var4.getPrefix();
//     java.lang.Object var8 = var4.clone();
//     java.lang.String var9 = var4.getSuffix();
//     org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     org.apache.commons.math.linear.RealVector var12 = var11.mapCosToSelf();
//     org.apache.commons.math.linear.RealVector var13 = var11.mapAsin();
//     org.apache.commons.math.linear.RealVector var14 = var11.mapCbrt();
//     var11.set(2.302585092994046d);
//     java.lang.StringBuffer var17 = null;
//     java.text.FieldPosition var18 = null;
//     java.lang.StringBuffer var19 = var4.format((java.lang.Object)var11, var17, var18);
// 
//   }

  public void test134() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test134"); }


    double var2 = org.apache.commons.math.util.MathUtils.scalb(20.0d, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 20.0d);

  }

  public void test135() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test135"); }


    short var1 = org.apache.commons.math.util.MathUtils.indicator((short)1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (short)1);

  }

  public void test136() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test136"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    java.lang.String var8 = var6.toString();
    org.apache.commons.math.linear.RealVector var10 = var6.mapAddToSelf(10.0d);
    org.apache.commons.math.linear.RealVector var11 = var6.mapLog10();
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var15 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var17 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var15, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(var13, var15);
    org.apache.commons.math.optimization.RealPointValuePair var21 = new org.apache.commons.math.optimization.RealPointValuePair(var15, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var23 = new org.apache.commons.math.linear.ArrayRealVector(var15, true);
    int var24 = var23.getDimension();
    java.lang.Double[] var26 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var27 = new org.apache.commons.math.linear.ArrayRealVector(var26);
    org.apache.commons.math.linear.RealVector var28 = var27.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var29 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var27);
    org.apache.commons.math.linear.RealVector var30 = var23.add((org.apache.commons.math.linear.RealVector)var29);
    java.lang.Double[] var32 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var33 = new org.apache.commons.math.linear.ArrayRealVector(var32);
    org.apache.commons.math.linear.ArrayRealVector var34 = var29.projection(var33);
    org.apache.commons.math.linear.RealVector var35 = var34.mapCosh();
    java.lang.Double[] var37 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var38 = new org.apache.commons.math.linear.ArrayRealVector(var37);
    org.apache.commons.math.linear.ArrayRealVector var40 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var42 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var44 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var42, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var45 = new org.apache.commons.math.linear.ArrayRealVector(var40, var42);
    org.apache.commons.math.linear.RealVector var46 = var38.subtract(var42);
    org.apache.commons.math.linear.ArrayRealVector var47 = new org.apache.commons.math.linear.ArrayRealVector(var42);
    org.apache.commons.math.linear.ArrayRealVector var49 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var51 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var53 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var51, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var54 = new org.apache.commons.math.linear.ArrayRealVector(var49, var51);
    org.apache.commons.math.linear.RealVector var55 = var54.mapCoshToSelf();
    java.lang.String var56 = var54.toString();
    org.apache.commons.math.linear.RealVector var57 = var54.mapRint();
    org.apache.commons.math.linear.RealVector var58 = var54.mapAbsToSelf();
    boolean var59 = var54.isInfinite();
    org.apache.commons.math.linear.RealVector var61 = var54.mapAdd(0.0d);
    org.apache.commons.math.linear.RealVector var62 = var54.mapCeil();
    double var63 = var47.getDistance(var54);
    org.apache.commons.math.linear.ArrayRealVector var64 = var34.add(var54);
    org.apache.commons.math.linear.RealMatrix var65 = var6.outerProduct(var64);
    org.apache.commons.math.linear.RealVector var66 = var6.mapCbrt();
    double[] var67 = var6.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "{1.54}"+ "'", var8.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "{1.54}"+ "'", var56.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.5430806348152439d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test137() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test137"); }


    int var1 = org.apache.commons.math.util.MathUtils.sign(1010);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);

  }

  public void test138() {}
//   public void test138() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test138"); }
// 
// 
//     java.text.NumberFormat var3 = null;
//     org.apache.commons.math.linear.RealVectorFormat var4 = new org.apache.commons.math.linear.RealVectorFormat("", "hi!", "org.apache.commons.math.ConvergenceException: Convergence failed", var3);
//     java.lang.String var5 = var4.getSeparator();
//     java.lang.String var6 = var4.getSeparator();
//     java.lang.String var7 = var4.getPrefix();
//     java.lang.Object var8 = var4.clone();
//     java.lang.String var9 = var4.getSuffix();
//     org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     org.apache.commons.math.linear.RealVector var12 = var11.mapCosToSelf();
//     org.apache.commons.math.linear.RealVector var13 = var11.mapAsin();
//     org.apache.commons.math.linear.ArrayRealVector var15 = new org.apache.commons.math.linear.ArrayRealVector(var11, false);
//     java.lang.StringBuffer var16 = null;
//     java.text.FieldPosition var17 = null;
//     java.lang.StringBuffer var18 = var4.format((org.apache.commons.math.linear.RealVector)var11, var16, var17);
// 
//   }

  public void test139() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test139"); }


    double var1 = org.apache.commons.math.util.MathUtils.sign(100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1.0d);

  }

  public void test140() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test140"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var8 = var6.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var9 = var6.mapUlp();
    org.apache.commons.math.linear.RealVector var10 = var6.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var11 = var6.mapTan();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test141() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test141"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(var1, false);
    org.apache.commons.math.linear.RealVector var6 = var1.mapTan();
    double[] var8 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var10 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var8, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var12 = new org.apache.commons.math.optimization.RealPointValuePair(var8, 0.0d);
    double[][] var13 = new double[][] { var8};
    org.apache.commons.math.linear.Array2DRowRealMatrix var15 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var13, true);
    org.apache.commons.math.linear.RealMatrix var16 = var15.copy();
    double var17 = var15.getTrace();
    boolean var18 = var1.equals((java.lang.Object)var15);
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix();
    int var20 = var19.getRowDimension();
    int var21 = var19.getRowDimension();
    double var22 = var19.getNorm();
    double var23 = var19.getNorm();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.Array2DRowRealMatrix var24 = var15.subtract(var19);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.0d);

  }

  public void test142() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test142"); }


    java.lang.Double[] var1 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var2 = new org.apache.commons.math.linear.ArrayRealVector(var1);
    org.apache.commons.math.linear.RealVector var3 = var2.mapLogToSelf();
    org.apache.commons.math.linear.RealVector var4 = var2.mapAtanToSelf();
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var8 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var10 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var8, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(var6, var8);
    org.apache.commons.math.linear.RealVector var12 = var11.mapCoshToSelf();
    java.lang.String var13 = var11.toString();
    org.apache.commons.math.linear.RealVector var15 = var11.mapAddToSelf(10.0d);
    org.apache.commons.math.linear.RealVector var16 = var11.mapLog10();
    org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(var11, false);
    org.apache.commons.math.linear.ArrayRealVector var20 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var22 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var24 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var22, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var25 = new org.apache.commons.math.linear.ArrayRealVector(var20, var22);
    org.apache.commons.math.linear.ArrayRealVector var27 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var28 = var27.mapCosToSelf();
    double var29 = var20.dotProduct(var28);
    org.apache.commons.math.linear.ArrayRealVector var30 = var18.append(var20);
    org.apache.commons.math.linear.RealVector var31 = var20.mapSqrt();
    org.apache.commons.math.linear.RealVector var32 = var20.mapTanhToSelf();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.ArrayRealVector var33 = var2.ebeDivide(var20);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "{1.54}"+ "'", var13.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test143() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test143"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var2 = org.apache.commons.math.util.MathUtils.binomialCoefficient((-1), (-336392980));
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }

  }

  public void test144() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test144"); }


    java.lang.Object[] var2 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var3 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var2);
    java.lang.Object[] var6 = new java.lang.Object[] { 10L};
    org.apache.commons.math.ConvergenceException var7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var3, "", var6);
    java.lang.IllegalArgumentException var8 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable)var3);
    org.apache.commons.math.optimization.OptimizationException var9 = new org.apache.commons.math.optimization.OptimizationException((java.lang.Throwable)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test145() {}
//   public void test145() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test145"); }
// 
// 
//     double[] var1 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
//     double[][] var6 = new double[][] { var1};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
//     double var9 = var8.getFrobeniusNorm();
//     double[] var12 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
//     double[][] var17 = new double[][] { var12};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
//     double var20 = var19.getFrobeniusNorm();
//     var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
//     org.apache.commons.math.linear.RealMatrix var23 = var8.getRowMatrix(0);
//     org.apache.commons.math.linear.RealMatrixChangingVisitor var24 = null;
//     double var25 = var8.walkInOptimizedOrder(var24);
// 
//   }

  public void test146() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test146"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.Array2DRowRealMatrix var2 = new org.apache.commons.math.linear.Array2DRowRealMatrix((-100), 0);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }

  }

  public void test147() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test147"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    double[] var6 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var7 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6);
    org.apache.commons.math.linear.ArrayRealVector var9 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var11 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var13 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var11, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var14 = new org.apache.commons.math.linear.ArrayRealVector(var9, var11);
    double[] var15 = var7.operate(var11);
    org.apache.commons.math.linear.ArrayRealVector var16 = new org.apache.commons.math.linear.ArrayRealVector(var11);
    org.apache.commons.math.optimization.linear.Relationship var18 = null;
    double[] var21 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var22 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var21);
    org.apache.commons.math.linear.ArrayRealVector var24 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var26 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var28 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var26, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var29 = new org.apache.commons.math.linear.ArrayRealVector(var24, var26);
    double[] var30 = var22.operate(var26);
    org.apache.commons.math.linear.ArrayRealVector var31 = new org.apache.commons.math.linear.ArrayRealVector(var26);
    org.apache.commons.math.optimization.linear.LinearConstraint var33 = new org.apache.commons.math.optimization.linear.LinearConstraint(var11, 50.0d, var18, var26, 2.302585092994046d);
    double var34 = var3.getValue(var26);
    org.apache.commons.math.linear.RealVector var35 = var3.getCoefficients();
    org.apache.commons.math.linear.ArrayRealVector var37 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var38 = var37.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var39 = var37.mapAsin();
    org.apache.commons.math.optimization.linear.Relationship var41 = null;
    org.apache.commons.math.linear.ArrayRealVector var43 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var45 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var47 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var45, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var48 = new org.apache.commons.math.linear.ArrayRealVector(var43, var45);
    org.apache.commons.math.linear.RealVector var49 = var48.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var50 = var48.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var51 = var48.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var54 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var55 = var54.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var56 = var54.mapLog1p();
    var48.setSubVector(0, (org.apache.commons.math.linear.RealVector)var54);
    org.apache.commons.math.linear.RealVector var58 = var54.mapCosh();
    org.apache.commons.math.linear.RealVector var59 = var54.mapExpm1();
    org.apache.commons.math.linear.ArrayRealVector var61 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var62 = var61.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var63 = var61.mapAsin();
    org.apache.commons.math.linear.RealVector var64 = var61.mapCbrt();
    org.apache.commons.math.linear.RealVector var65 = var61.mapUlp();
    org.apache.commons.math.linear.RealVector var66 = var61.mapRint();
    org.apache.commons.math.linear.ArrayRealVector var67 = var54.subtract(var61);
    org.apache.commons.math.linear.ArrayRealVector var69 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var70 = var69.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var71 = var69.mapAcos();
    org.apache.commons.math.linear.ArrayRealVector var72 = var54.ebeMultiply(var69);
    org.apache.commons.math.optimization.linear.LinearConstraint var74 = new org.apache.commons.math.optimization.linear.LinearConstraint(var39, 2.4463520074491627d, var41, (org.apache.commons.math.linear.RealVector)var69, 1.3440585709080678E43d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var75 = var3.getValue(var39);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test148() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test148"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var2 = var1.getData();
    org.apache.commons.math.linear.ArrayRealVector var3 = new org.apache.commons.math.linear.ArrayRealVector(var2);
    org.apache.commons.math.linear.RealVector var4 = var3.mapCeilToSelf();
    org.apache.commons.math.linear.RealVector var5 = var3.mapCbrt();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test149() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test149"); }


    double var2 = org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(1073741824, (-336392981));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1.0d);

  }

  public void test150() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test150"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var8 = var6.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var9 = var6.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var12 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var13 = var12.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var14 = var12.mapLog1p();
    var6.setSubVector(0, (org.apache.commons.math.linear.RealVector)var12);
    double[] var16 = var12.getData();
    org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var20 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var22 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var20, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var23 = new org.apache.commons.math.linear.ArrayRealVector(var18, var20);
    org.apache.commons.math.optimization.RealPointValuePair var26 = new org.apache.commons.math.optimization.RealPointValuePair(var20, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var27 = new org.apache.commons.math.linear.ArrayRealVector(var16, var20);
    org.apache.commons.math.linear.ArrayRealVector var28 = new org.apache.commons.math.linear.ArrayRealVector(var16);
    double[] var30 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var32 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var30, 1.0d);
    double[] var35 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var36 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var35);
    org.apache.commons.math.linear.ArrayRealVector var38 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var40 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var42 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var40, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var43 = new org.apache.commons.math.linear.ArrayRealVector(var38, var40);
    double[] var44 = var36.operate(var40);
    double var45 = org.apache.commons.math.util.MathUtils.distance1(var30, var40);
    double var46 = org.apache.commons.math.util.MathUtils.distanceInf(var16, var40);
    org.apache.commons.math.linear.ArrayRealVector var47 = new org.apache.commons.math.linear.ArrayRealVector(var40);
    org.apache.commons.math.linear.RealVector var49 = var47.append(0.0d);
    org.apache.commons.math.linear.RealVector var50 = var47.mapSinh();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test151() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test151"); }


    java.lang.Double[] var1 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var2 = new org.apache.commons.math.linear.ArrayRealVector(var1);
    org.apache.commons.math.linear.RealVector var3 = var2.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var4 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var2);
    org.apache.commons.math.linear.RealVector var5 = var2.mapExpToSelf();
    org.apache.commons.math.linear.RealVector var6 = var2.mapExp();
    org.apache.commons.math.linear.RealVector var7 = var2.mapFloorToSelf();
    org.apache.commons.math.linear.RealVector var9 = var2.mapDivideToSelf(1.543080634815244d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test152() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test152"); }


    double var2 = org.apache.commons.math.util.MathUtils.nextAfter(49.73451754256331d, 1.731030945644E13d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 49.73451754256332d);

  }

  public void test153() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test153"); }


    org.apache.commons.math.ConvergenceException var1 = new org.apache.commons.math.ConvergenceException();
    java.lang.Object[] var4 = new java.lang.Object[] { 0};
    org.apache.commons.math.ConvergenceException var5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var1, "", var4);
    java.lang.Object[] var9 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var10 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var9);
    org.apache.commons.math.MathRuntimeException var11 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var1, "hi!", var9);
    java.lang.Object[] var12 = var1.getArguments();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.ArrayIndexOutOfBoundsException var13 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("{", var12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test154() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test154"); }


    double[] var2 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var3 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var2);
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var7 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var9 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var7, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(var5, var7);
    double[] var11 = var3.operate(var7);
    org.apache.commons.math.optimization.RealPointValuePair var14 = new org.apache.commons.math.optimization.RealPointValuePair(var7, (-0.7d), false);
    double[] var15 = var14.getPoint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test155() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test155"); }


    org.apache.commons.math.linear.Array2DRowRealMatrix var0 = new org.apache.commons.math.linear.Array2DRowRealMatrix();
    int var1 = var0.getRowDimension();
    int var2 = var0.getRowDimension();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealMatrix var4 = var0.getRowMatrix(1);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);

  }

  public void test156() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test156"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAsin();
    org.apache.commons.math.linear.RealVector var4 = var1.mapCbrt();
    org.apache.commons.math.optimization.linear.Relationship var6 = null;
    org.apache.commons.math.linear.ArrayRealVector var8 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.optimization.linear.LinearConstraint var10 = new org.apache.commons.math.optimization.linear.LinearConstraint(var4, 363.7393755555636d, var6, (org.apache.commons.math.linear.RealVector)var8, 10.0d);
    org.apache.commons.math.linear.RealVector var11 = var8.copy();
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var14 = var13.getData();
    org.apache.commons.math.linear.ArrayRealVector var15 = new org.apache.commons.math.linear.ArrayRealVector(var14);
    org.apache.commons.math.linear.RealVector var16 = var15.mapLog1pToSelf();
    double var17 = var8.getDistance(var15);
    double[] var19 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var21 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var19, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var23 = new org.apache.commons.math.optimization.RealPointValuePair(var19, 0.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealVector var24 = var8.ebeMultiply(var19);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test157() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test157"); }


    double var2 = org.apache.commons.math.util.MathUtils.log(2.9066992099956157d, 1.3440585709080678E43d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 93.06950707243628d);

  }

  public void test158() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test158"); }


    long var2 = org.apache.commons.math.util.MathUtils.subAndCheck(10L, (-1000L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1010L);

  }

  public void test159() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test159"); }


    int var1 = org.apache.commons.math.util.MathUtils.indicator(101);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);

  }

  public void test160() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test160"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var8 = var6.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var9 = var6.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var12 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var13 = var12.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var14 = var12.mapLog1p();
    var6.setSubVector(0, (org.apache.commons.math.linear.RealVector)var12);
    org.apache.commons.math.linear.RealVector var16 = var12.copy();
    java.lang.Double[] var18 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var19 = new org.apache.commons.math.linear.ArrayRealVector(var18);
    org.apache.commons.math.linear.ArrayRealVector var20 = new org.apache.commons.math.linear.ArrayRealVector(var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.ArrayRealVector var21 = var12.ebeDivide(var20);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test161() {}
//   public void test161() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test161"); }
// 
// 
//     double[][] var0 = null;
//     org.apache.commons.math.linear.Array2DRowRealMatrix var1 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var0);
// 
//   }

  public void test162() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test162"); }


    double[] var2 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var4 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var2, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var6 = new org.apache.commons.math.optimization.RealPointValuePair(var2, 0.0d);
    double[][] var7 = new double[][] { var2};
    org.apache.commons.math.linear.Array2DRowRealMatrix var9 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var7, true);
    org.apache.commons.math.linear.Array2DRowRealMatrix var10 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var7);
    java.lang.IllegalArgumentException var11 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", (java.lang.Object[])var7);
    org.apache.commons.math.linear.Array2DRowRealMatrix var12 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var7);
    org.apache.commons.math.linear.RealMatrixChangingVisitor var13 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var18 = var12.walkInRowOrder(var13, (-100), (-100), 101, 0);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test163() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test163"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    org.apache.commons.math.linear.RealMatrix var23 = var8.getRowMatrix(0);
    org.apache.commons.math.linear.ArrayRealVector var26 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var28 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var30 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var28, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var31 = new org.apache.commons.math.linear.ArrayRealVector(var26, var28);
    org.apache.commons.math.optimization.RealPointValuePair var34 = new org.apache.commons.math.optimization.RealPointValuePair(var28, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var36 = new org.apache.commons.math.linear.ArrayRealVector(var28, true);
    int var37 = var36.getDimension();
    java.lang.Double[] var39 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var40 = new org.apache.commons.math.linear.ArrayRealVector(var39);
    org.apache.commons.math.linear.RealVector var41 = var40.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var42 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var40);
    org.apache.commons.math.linear.RealVector var43 = var36.add((org.apache.commons.math.linear.RealVector)var42);
    java.lang.Double[] var45 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var46 = new org.apache.commons.math.linear.ArrayRealVector(var45);
    org.apache.commons.math.linear.ArrayRealVector var47 = var42.projection(var46);
    double[] var48 = var46.toArray();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var8.setRow(1073741824, var48);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test164() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test164"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var1 = org.apache.commons.math.util.MathUtils.factorialDouble((-336392980));
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }

  }

  public void test165() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test165"); }


    java.lang.Object[] var4 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var5 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var4);
    java.lang.Object[] var8 = new java.lang.Object[] { 10L};
    org.apache.commons.math.ConvergenceException var9 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var5, "", var8);
    java.text.ParseException var10 = org.apache.commons.math.MathRuntimeException.createParseException((-1), "org.apache.commons.math.ConvergenceException: Convergence failed", var8);
    org.apache.commons.math.optimization.OptimizationException var11 = new org.apache.commons.math.optimization.OptimizationException((java.lang.Throwable)var10);
    org.apache.commons.math.MathException var12 = new org.apache.commons.math.MathException((java.lang.Throwable)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test166() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test166"); }


    boolean var3 = org.apache.commons.math.util.MathUtils.equals(0.9957901442164848d, 10.0d, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test167() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test167"); }


    org.apache.commons.math.linear.Array2DRowRealMatrix var0 = new org.apache.commons.math.linear.Array2DRowRealMatrix();
    int var1 = var0.getRowDimension();
    int var2 = var0.getRowDimension();
    double var3 = var0.getNorm();
    java.lang.String var4 = var0.toString();
    double var5 = var0.getTrace();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Array2DRowRealMatrix{}"+ "'", var4.equals("Array2DRowRealMatrix{}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.0d);

  }

  public void test168() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test168"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(var1, false);
    org.apache.commons.math.linear.RealVector var6 = var1.mapTan();
    double[] var8 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var10 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var8, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var12 = new org.apache.commons.math.optimization.RealPointValuePair(var8, 0.0d);
    double[][] var13 = new double[][] { var8};
    org.apache.commons.math.linear.Array2DRowRealMatrix var15 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var13, true);
    org.apache.commons.math.linear.RealMatrix var16 = var15.copy();
    double var17 = var15.getTrace();
    boolean var18 = var1.equals((java.lang.Object)var15);
    org.apache.commons.math.linear.RealMatrixPreservingVisitor var19 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var24 = var15.walkInColumnOrder(var19, 0, (-336392981), (-100), (-336392980));
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test169() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test169"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var8 = var6.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var9 = var6.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var12 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var13 = var12.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var14 = var12.mapLog1p();
    var6.setSubVector(0, (org.apache.commons.math.linear.RealVector)var12);
    double var16 = var12.getNorm();
    double[] var19 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var20 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var21 = var12.dotProduct(var19);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test170() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test170"); }


    double[] var2 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var3 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var2);
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var7 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var9 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var7, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(var5, var7);
    org.apache.commons.math.linear.RealVector var11 = var10.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var12 = var10.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var13 = var10.mapRintToSelf();
    org.apache.commons.math.linear.RealVector var15 = var10.mapSubtractToSelf(0.5430806348152439d);
    org.apache.commons.math.linear.RealVector var16 = var3.operate(var15);
    double var17 = var3.getNorm();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1.0d);

  }

  public void test171() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test171"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var2 = org.apache.commons.math.util.MathUtils.pow((-1), (-336392981));
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }

  }

  public void test172() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test172"); }


    float var3 = org.apache.commons.math.util.MathUtils.round(100.0f, (-1), 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 110.0f);

  }

  public void test173() {}
//   public void test173() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test173"); }
// 
// 
//     double[] var2 = new double[] { 0.0d, (-1.0d)};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var3 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var2);
//     org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var7 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var9 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var7, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(var5, var7);
//     double[] var11 = var3.operate(var7);
//     org.apache.commons.math.linear.RealMatrix var12 = null;
//     org.apache.commons.math.linear.RealMatrix var13 = var3.subtract(var12);
// 
//   }

  public void test174() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test174"); }


    long var2 = org.apache.commons.math.util.MathUtils.subAndCheck((-100L), 10000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-10100L));

  }

  public void test175() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test175"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var8 = var6.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var9 = var6.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var12 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var13 = var12.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var14 = var12.mapLog1p();
    var6.setSubVector(0, (org.apache.commons.math.linear.RealVector)var12);
    double[] var16 = var12.getData();
    org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var20 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var22 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var20, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var23 = new org.apache.commons.math.linear.ArrayRealVector(var18, var20);
    org.apache.commons.math.optimization.RealPointValuePair var26 = new org.apache.commons.math.optimization.RealPointValuePair(var20, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var27 = new org.apache.commons.math.linear.ArrayRealVector(var16, var20);
    org.apache.commons.math.linear.ArrayRealVector var28 = new org.apache.commons.math.linear.ArrayRealVector(var16);
    double[] var30 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var32 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var30, 1.0d);
    double[] var35 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var36 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var35);
    org.apache.commons.math.linear.ArrayRealVector var38 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var40 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var42 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var40, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var43 = new org.apache.commons.math.linear.ArrayRealVector(var38, var40);
    double[] var44 = var36.operate(var40);
    double var45 = org.apache.commons.math.util.MathUtils.distance1(var30, var40);
    double var46 = org.apache.commons.math.util.MathUtils.distanceInf(var16, var40);
    org.apache.commons.math.linear.ArrayRealVector var47 = new org.apache.commons.math.linear.ArrayRealVector(var40);
    org.apache.commons.math.linear.RealVector var49 = var47.append(0.0d);
    org.apache.commons.math.linear.ArrayRealVector var51 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var53 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var55 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var53, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var56 = new org.apache.commons.math.linear.ArrayRealVector(var51, var53);
    org.apache.commons.math.linear.RealVector var57 = var56.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var58 = var56.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var59 = var56.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var62 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var63 = var62.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var64 = var62.mapLog1p();
    var56.setSubVector(0, (org.apache.commons.math.linear.RealVector)var62);
    double[] var66 = var62.getData();
    org.apache.commons.math.linear.ArrayRealVector var68 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var70 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var72 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var70, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var73 = new org.apache.commons.math.linear.ArrayRealVector(var68, var70);
    org.apache.commons.math.optimization.RealPointValuePair var76 = new org.apache.commons.math.optimization.RealPointValuePair(var70, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var77 = new org.apache.commons.math.linear.ArrayRealVector(var66, var70);
    org.apache.commons.math.linear.ArrayRealVector var78 = new org.apache.commons.math.linear.ArrayRealVector(var66);
    double[] var80 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var82 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var80, 1.0d);
    double[] var85 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var86 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var85);
    org.apache.commons.math.linear.ArrayRealVector var88 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var90 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var92 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var90, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var93 = new org.apache.commons.math.linear.ArrayRealVector(var88, var90);
    double[] var94 = var86.operate(var90);
    double var95 = org.apache.commons.math.util.MathUtils.distance1(var80, var90);
    double var96 = org.apache.commons.math.util.MathUtils.distanceInf(var66, var90);
    org.apache.commons.math.linear.ArrayRealVector var97 = new org.apache.commons.math.linear.ArrayRealVector(var90);
    org.apache.commons.math.linear.RealVector var98 = var47.ebeDivide(var90);
    org.apache.commons.math.linear.RealVector var99 = var47.mapInv();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test176() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test176"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var2 = var1.getData();
    double[] var3 = var1.getData();
    org.apache.commons.math.linear.RealVector var5 = var1.mapAdd((-1.0d));
    org.apache.commons.math.linear.ArrayRealVector var8 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var10 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var12 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var10, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(var8, var10);
    org.apache.commons.math.linear.RealVector var14 = var13.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var15 = var13.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var16 = var13.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var19 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var20 = var19.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var21 = var19.mapLog1p();
    var13.setSubVector(0, (org.apache.commons.math.linear.RealVector)var19);
    double[] var23 = var19.getData();
    org.apache.commons.math.linear.ArrayRealVector var25 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var27 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var29 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var27, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var30 = new org.apache.commons.math.linear.ArrayRealVector(var25, var27);
    org.apache.commons.math.optimization.RealPointValuePair var33 = new org.apache.commons.math.optimization.RealPointValuePair(var27, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var34 = new org.apache.commons.math.linear.ArrayRealVector(var23, var27);
    org.apache.commons.math.linear.ArrayRealVector var35 = new org.apache.commons.math.linear.ArrayRealVector(var23);
    double[] var37 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var39 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var37, 1.0d);
    double[] var42 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var43 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var42);
    org.apache.commons.math.linear.ArrayRealVector var45 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var47 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var49 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var47, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var50 = new org.apache.commons.math.linear.ArrayRealVector(var45, var47);
    double[] var51 = var43.operate(var47);
    double var52 = org.apache.commons.math.util.MathUtils.distance1(var37, var47);
    double var53 = org.apache.commons.math.util.MathUtils.distanceInf(var23, var47);
    org.apache.commons.math.linear.ArrayRealVector var54 = new org.apache.commons.math.linear.ArrayRealVector(var47);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setSubVector(10, var47);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.0d);

  }

  public void test177() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test177"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var8 = var6.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var9 = var6.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var12 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var13 = var12.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var14 = var12.mapLog1p();
    var6.setSubVector(0, (org.apache.commons.math.linear.RealVector)var12);
    org.apache.commons.math.linear.RealVector var16 = var12.mapCosh();
    org.apache.commons.math.linear.RealVector var18 = var12.mapPowToSelf(1.3440585709080678E43d);
    org.apache.commons.math.linear.ArrayRealVector var20 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var21 = var20.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var22 = var20.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var24 = new org.apache.commons.math.linear.ArrayRealVector(var20, false);
    org.apache.commons.math.linear.RealVector var25 = var20.mapTan();
    org.apache.commons.math.linear.RealVector var26 = var20.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var28 = new org.apache.commons.math.linear.ArrayRealVector(var20, false);
    org.apache.commons.math.linear.RealVector var30 = var20.mapMultiply((-1.0d));
    org.apache.commons.math.linear.ArrayRealVector var32 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var34 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var36 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var34, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var37 = new org.apache.commons.math.linear.ArrayRealVector(var32, var34);
    org.apache.commons.math.linear.RealVector var38 = var37.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var39 = var37.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var40 = var37.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var43 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var44 = var43.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var45 = var43.mapLog1p();
    var37.setSubVector(0, (org.apache.commons.math.linear.RealVector)var43);
    org.apache.commons.math.linear.RealVector var47 = var43.mapCosh();
    org.apache.commons.math.linear.RealVector var48 = var43.mapExpm1();
    org.apache.commons.math.linear.ArrayRealVector var50 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var51 = var50.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var52 = var50.mapAsin();
    org.apache.commons.math.linear.RealVector var53 = var50.mapCbrt();
    org.apache.commons.math.linear.RealVector var54 = var50.mapUlp();
    org.apache.commons.math.linear.RealVector var55 = var50.mapRint();
    org.apache.commons.math.linear.ArrayRealVector var56 = var43.subtract(var50);
    org.apache.commons.math.linear.ArrayRealVector var58 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var59 = var58.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var60 = var58.mapAcos();
    org.apache.commons.math.linear.ArrayRealVector var61 = var43.ebeMultiply(var58);
    org.apache.commons.math.linear.RealVector var62 = var58.mapSin();
    double var63 = var20.getL1Distance(var58);
    double var64 = var12.getL1Distance(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0.0d);

  }

  public void test178() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test178"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    double[] var23 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var25 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var23, 1.0d);
    double[] var28 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var29 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var28);
    org.apache.commons.math.linear.ArrayRealVector var31 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var33 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var35 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var33, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var36 = new org.apache.commons.math.linear.ArrayRealVector(var31, var33);
    double[] var37 = var29.operate(var33);
    org.apache.commons.math.linear.ArrayRealVector var38 = new org.apache.commons.math.linear.ArrayRealVector(var33);
    org.apache.commons.math.optimization.linear.Relationship var40 = null;
    double[] var43 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var44 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var43);
    org.apache.commons.math.linear.ArrayRealVector var46 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var48 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var50 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var48, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var51 = new org.apache.commons.math.linear.ArrayRealVector(var46, var48);
    double[] var52 = var44.operate(var48);
    org.apache.commons.math.linear.ArrayRealVector var53 = new org.apache.commons.math.linear.ArrayRealVector(var48);
    org.apache.commons.math.optimization.linear.LinearConstraint var55 = new org.apache.commons.math.optimization.linear.LinearConstraint(var33, 50.0d, var40, var48, 2.302585092994046d);
    double var56 = var25.getValue(var48);
    org.apache.commons.math.linear.RealVector var57 = var25.getCoefficients();
    org.apache.commons.math.linear.RealVector var58 = var8.operate(var57);
    double[] var60 = var8.getRow(0);
    int[] var61 = new int[] { };
    int[] var62 = new int[] { };
    int var63 = org.apache.commons.math.util.MathUtils.distanceInf(var61, var62);
    int[] var64 = new int[] { };
    int[] var65 = new int[] { };
    int var66 = org.apache.commons.math.util.MathUtils.distanceInf(var64, var65);
    int[] var67 = new int[] { };
    int[] var68 = new int[] { };
    int var69 = org.apache.commons.math.util.MathUtils.distanceInf(var67, var68);
    int[] var70 = new int[] { };
    int[] var71 = new int[] { };
    int var72 = org.apache.commons.math.util.MathUtils.distanceInf(var70, var71);
    double var73 = org.apache.commons.math.util.MathUtils.distance(var67, var70);
    int[] var74 = new int[] { };
    int[] var75 = new int[] { };
    int var76 = org.apache.commons.math.util.MathUtils.distanceInf(var74, var75);
    int var77 = org.apache.commons.math.util.MathUtils.distanceInf(var70, var74);
    double var78 = org.apache.commons.math.util.MathUtils.distance(var64, var70);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealMatrix var79 = var8.getSubMatrix(var61, var70);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0.0d);

  }

  public void test179() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test179"); }


    java.lang.Double[] var1 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var2 = new org.apache.commons.math.linear.ArrayRealVector(var1);
    java.lang.Double[] var4 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(var4);
    org.apache.commons.math.linear.ArrayRealVector var7 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var9 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var11 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var9, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var12 = new org.apache.commons.math.linear.ArrayRealVector(var7, var9);
    org.apache.commons.math.linear.RealVector var13 = var5.subtract(var9);
    boolean var14 = var2.equals((java.lang.Object)var9);
    org.apache.commons.math.linear.RealVector var15 = var2.mapSin();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test180() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test180"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    org.apache.commons.math.linear.RealMatrix var23 = var8.getRowMatrix(0);
    org.apache.commons.math.linear.RealMatrixChangingVisitor var24 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var29 = var8.walkInOptimizedOrder(var24, 100, 1073741824, (-1), (-336392981));
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test181() {}
//   public void test181() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test181"); }
// 
// 
//     org.apache.commons.math.linear.Array2DRowRealMatrix var2 = new org.apache.commons.math.linear.Array2DRowRealMatrix(10, 100);
//     org.apache.commons.math.linear.RealMatrix var4 = var2.scalarMultiply(1.0d);
//     org.apache.commons.math.linear.RealMatrixPreservingVisitor var5 = null;
//     double var6 = var2.walkInColumnOrder(var5);
// 
//   }

  public void test182() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test182"); }


    java.lang.Double[] var1 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var2 = new org.apache.commons.math.linear.ArrayRealVector(var1);
    org.apache.commons.math.linear.ArrayRealVector var4 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var6 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var8 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var6, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var9 = new org.apache.commons.math.linear.ArrayRealVector(var4, var6);
    org.apache.commons.math.linear.RealVector var10 = var2.subtract(var6);
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(var6);
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var15 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var17 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var15, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(var13, var15);
    org.apache.commons.math.optimization.RealPointValuePair var21 = new org.apache.commons.math.optimization.RealPointValuePair(var15, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var23 = new org.apache.commons.math.linear.ArrayRealVector(var15, true);
    int var24 = var23.getDimension();
    java.lang.Double[] var26 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var27 = new org.apache.commons.math.linear.ArrayRealVector(var26);
    org.apache.commons.math.linear.RealVector var28 = var27.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var29 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var27);
    org.apache.commons.math.linear.RealVector var30 = var23.add((org.apache.commons.math.linear.RealVector)var29);
    java.lang.Double[] var32 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var33 = new org.apache.commons.math.linear.ArrayRealVector(var32);
    org.apache.commons.math.linear.ArrayRealVector var34 = var29.projection(var33);
    org.apache.commons.math.linear.RealVector var35 = var34.mapSinh();
    org.apache.commons.math.linear.ArrayRealVector var36 = new org.apache.commons.math.linear.ArrayRealVector(var11, var34);
    org.apache.commons.math.linear.RealVector var37 = var11.mapCbrt();
    org.apache.commons.math.linear.ArrayRealVector var39 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var40 = var39.mapSinhToSelf();
    org.apache.commons.math.linear.RealVector var41 = var39.mapUlpToSelf();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealVector var42 = var11.subtract((org.apache.commons.math.linear.RealVector)var39);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test183() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test183"); }


    java.lang.Double[] var1 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var2 = new org.apache.commons.math.linear.ArrayRealVector(var1);
    org.apache.commons.math.linear.ArrayRealVector var3 = new org.apache.commons.math.linear.ArrayRealVector(var1);
    org.apache.commons.math.linear.ArrayRealVector var4 = new org.apache.commons.math.linear.ArrayRealVector(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.ArrayRealVector var7 = new org.apache.commons.math.linear.ArrayRealVector(var1, 1, (-336392981));
      fail("Expected exception of type java.lang.NegativeArraySizeException");
    } catch (java.lang.NegativeArraySizeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test184() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test184"); }


    org.apache.commons.math.ConvergenceException var3 = new org.apache.commons.math.ConvergenceException();
    java.lang.Object[] var6 = new java.lang.Object[] { 0};
    org.apache.commons.math.ConvergenceException var7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var3, "", var6);
    java.lang.Object[] var11 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var12 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var11);
    org.apache.commons.math.MathRuntimeException var13 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var3, "hi!", var11);
    org.apache.commons.math.MathException var14 = new org.apache.commons.math.MathException("}", var11);
    org.apache.commons.math.optimization.OptimizationException var15 = new org.apache.commons.math.optimization.OptimizationException("", var11);
    org.apache.commons.math.ConvergenceException var18 = new org.apache.commons.math.ConvergenceException();
    java.lang.Object[] var21 = new java.lang.Object[] { ""};
    org.apache.commons.math.ConvergenceException var22 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var18, "", var21);
    org.apache.commons.math.ConvergenceException var23 = new org.apache.commons.math.ConvergenceException("hi!", var21);
    org.apache.commons.math.MathRuntimeException var24 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var15, "hi!", var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.MathRuntimeException var25 = new org.apache.commons.math.MathRuntimeException("{", var21);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test185() {}
//   public void test185() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test185"); }
// 
// 
//     org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     org.apache.commons.math.linear.RealVector var2 = var1.mapSinhToSelf();
//     org.apache.commons.math.linear.ArrayRealVector var4 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     org.apache.commons.math.linear.RealVector var5 = var4.mapCosToSelf();
//     org.apache.commons.math.linear.RealVector var6 = var4.mapAsin();
//     org.apache.commons.math.linear.RealVector var7 = var4.mapLog10();
//     org.apache.commons.math.linear.ArrayRealVector var8 = var1.append(var4);
//     org.apache.commons.math.linear.ArrayRealVector var9 = null;
//     org.apache.commons.math.linear.ArrayRealVector var10 = var1.ebeDivide(var9);
// 
//   }

  public void test186() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test186"); }


    double var2 = org.apache.commons.math.util.MathUtils.log(0.03933967394071772d, 2.4258259770489514E8d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-5.967152838277089d));

  }

  public void test187() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test187"); }


    org.apache.commons.math.ConvergenceException var0 = new org.apache.commons.math.ConvergenceException();
    java.lang.Object[] var3 = new java.lang.Object[] { 0};
    org.apache.commons.math.ConvergenceException var4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var0, "", var3);
    org.apache.commons.math.MathRuntimeException var5 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test188() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test188"); }


    java.lang.Object[] var1 = null;
    java.lang.ArrayIndexOutOfBoundsException var2 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("", var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test189() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test189"); }


    byte var1 = org.apache.commons.math.util.MathUtils.indicator((byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (byte)1);

  }

  public void test190() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test190"); }


    org.apache.commons.math.linear.Array2DRowRealMatrix var2 = new org.apache.commons.math.linear.Array2DRowRealMatrix(10, 100);
    double[] var5 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var6 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var5);
    double var7 = var6.getNorm();
    boolean var8 = var2.equals((java.lang.Object)var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.multiplyEntry(100, 1010, (-47.69741490700596d));
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test191() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test191"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapLog1p();
    org.apache.commons.math.linear.RealVector var4 = var1.mapTanh();
    org.apache.commons.math.linear.RealVector var5 = var1.mapLog10();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test192() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test192"); }


    double var2 = org.apache.commons.math.util.MathUtils.scalb(2.4258259770489514E8d, (-336392980));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1.4901262290311448E-229d);

  }

  public void test193() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test193"); }


    java.lang.Double[] var1 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var2 = new org.apache.commons.math.linear.ArrayRealVector(var1);
    org.apache.commons.math.linear.ArrayRealVector var4 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var6 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var8 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var6, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var9 = new org.apache.commons.math.linear.ArrayRealVector(var4, var6);
    org.apache.commons.math.linear.RealVector var10 = var2.subtract(var6);
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(var6);
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var15 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var17 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var15, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(var13, var15);
    org.apache.commons.math.optimization.RealPointValuePair var21 = new org.apache.commons.math.optimization.RealPointValuePair(var15, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var23 = new org.apache.commons.math.linear.ArrayRealVector(var15, true);
    int var24 = var23.getDimension();
    java.lang.Double[] var26 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var27 = new org.apache.commons.math.linear.ArrayRealVector(var26);
    org.apache.commons.math.linear.RealVector var28 = var27.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var29 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var27);
    org.apache.commons.math.linear.RealVector var30 = var23.add((org.apache.commons.math.linear.RealVector)var29);
    java.lang.Double[] var32 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var33 = new org.apache.commons.math.linear.ArrayRealVector(var32);
    org.apache.commons.math.linear.ArrayRealVector var34 = var29.projection(var33);
    org.apache.commons.math.linear.RealVector var35 = var34.mapSinh();
    org.apache.commons.math.linear.ArrayRealVector var36 = new org.apache.commons.math.linear.ArrayRealVector(var11, var34);
    double var37 = var34.getNorm();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var34.setEntry(1073741824, 1715.7021615142228d);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 3.9066992099956157d);

  }

  public void test194() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test194"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapUlpToSelf();
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var8 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var10 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var8, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(var6, var8);
    org.apache.commons.math.linear.RealVector var12 = var11.mapCoshToSelf();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.set((-1), var11);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test195() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test195"); }


    org.apache.commons.math.linear.Array2DRowRealMatrix var2 = new org.apache.commons.math.linear.Array2DRowRealMatrix(10, 100);
    double[] var5 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var6 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var5);
    double var7 = var6.getNorm();
    boolean var8 = var2.equals((java.lang.Object)var6);
    double[][] var9 = var6.getDataRef();
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var12 = var11.mapLog10();
    boolean var13 = var6.equals((java.lang.Object)var11);
    org.apache.commons.math.linear.ArrayRealVector var15 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var16 = var15.getData();
    org.apache.commons.math.linear.RealVector var17 = var15.mapSignum();
    double[] var18 = var15.toArray();
    int var19 = org.apache.commons.math.util.MathUtils.hash(var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double[] var20 = var6.solve(var18);
      fail("Expected exception of type org.apache.commons.math.linear.NonSquareMatrixException");
    } catch (org.apache.commons.math.linear.NonSquareMatrixException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);

  }

  public void test196() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test196"); }


    org.apache.commons.math.linear.Array2DRowRealMatrix var0 = new org.apache.commons.math.linear.Array2DRowRealMatrix();
    int var1 = var0.getRowDimension();
    int var2 = var0.getRowDimension();
    double var3 = var0.getNorm();
    java.lang.String var4 = var0.toString();
    org.apache.commons.math.linear.RealMatrixPreservingVisitor var5 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var10 = var0.walkInRowOrder(var5, 1, 10, 101, 100);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Array2DRowRealMatrix{}"+ "'", var4.equals("Array2DRowRealMatrix{}"));

  }

  public void test197() {}
//   public void test197() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test197"); }
// 
// 
//     org.apache.commons.math.linear.RealVectorFormat var0 = new org.apache.commons.math.linear.RealVectorFormat();
//     java.text.ParsePosition var2 = null;
//     java.lang.Object var3 = var0.parseObject("Maximal number of iterations ({0}) exceeded", var2);
// 
//   }

  public void test198() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test198"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(var1, false);
    org.apache.commons.math.linear.RealVector var6 = var5.mapLog1pToSelf();
    org.apache.commons.math.linear.RealVector var7 = var5.mapLog1pToSelf();
    org.apache.commons.math.linear.RealVector var8 = var5.mapSignum();
    org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var15 = new org.apache.commons.math.linear.ArrayRealVector(var10, var12);
    org.apache.commons.math.linear.RealVector var16 = var15.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var17 = var15.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var18 = var15.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var21 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var22 = var21.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var23 = var21.mapLog1p();
    var15.setSubVector(0, (org.apache.commons.math.linear.RealVector)var21);
    double[] var25 = var21.getData();
    org.apache.commons.math.linear.RealVector var26 = var21.mapLog10();
    org.apache.commons.math.linear.RealVector var27 = var5.ebeMultiply((org.apache.commons.math.linear.RealVector)var21);
    org.apache.commons.math.linear.ArrayRealVector var29 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var30 = var29.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var31 = var29.mapAcos();
    double[] var34 = new double[] { 1.0d, 0.0d};
    org.apache.commons.math.linear.RealVector var35 = var29.append(var34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var36 = var5.getLInfDistance(var34);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test199() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test199"); }


    org.apache.commons.math.linear.Array2DRowRealMatrix var2 = new org.apache.commons.math.linear.Array2DRowRealMatrix(10, 100);
    double[] var4 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var6 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var4, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var8 = new org.apache.commons.math.optimization.RealPointValuePair(var4, 0.0d);
    double[][] var9 = new double[][] { var4};
    org.apache.commons.math.linear.Array2DRowRealMatrix var11 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var9, true);
    double var12 = var11.getFrobeniusNorm();
    java.lang.String var13 = var11.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealMatrix var14 = var2.multiply((org.apache.commons.math.linear.RealMatrix)var11);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Array2DRowRealMatrix{{1.0}}"+ "'", var13.equals("Array2DRowRealMatrix{{1.0}}"));

  }

  public void test200() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test200"); }


    double var1 = org.apache.commons.math.util.MathUtils.indicator(11.543080634815244d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1.0d);

  }

  public void test201() {}
//   public void test201() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test201"); }
// 
// 
//     double[] var1 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
//     double[][] var6 = new double[][] { var1};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
//     org.apache.commons.math.linear.RealMatrix var9 = var8.copy();
//     double[] var11 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var13 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var11, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var15 = new org.apache.commons.math.optimization.RealPointValuePair(var11, 0.0d);
//     double[][] var16 = new double[][] { var11};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var18 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var16, true);
//     double var19 = var18.getFrobeniusNorm();
//     double[] var22 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var24 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var22, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var26 = new org.apache.commons.math.optimization.RealPointValuePair(var22, 0.0d);
//     double[][] var27 = new double[][] { var22};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var29 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var27, true);
//     double var30 = var29.getFrobeniusNorm();
//     var18.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var29);
//     org.apache.commons.math.linear.RealMatrix var32 = var18.transpose();
//     double[] var34 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var36 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var34, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var38 = new org.apache.commons.math.optimization.RealPointValuePair(var34, 0.0d);
//     double[][] var39 = new double[][] { var34};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var41 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var39, true);
//     double var42 = var41.getFrobeniusNorm();
//     double[] var45 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var47 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var45, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var49 = new org.apache.commons.math.optimization.RealPointValuePair(var45, 0.0d);
//     double[][] var50 = new double[][] { var45};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var52 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var50, true);
//     double var53 = var52.getFrobeniusNorm();
//     var41.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var52);
//     org.apache.commons.math.linear.RealMatrix var55 = var52.inverse();
//     int var56 = var52.getRowDimension();
//     double[][] var57 = var52.getData();
//     org.apache.commons.math.linear.RealMatrix var58 = var18.solve((org.apache.commons.math.linear.RealMatrix)var52);
//     org.apache.commons.math.linear.RealMatrix var59 = var8.preMultiply((org.apache.commons.math.linear.RealMatrix)var52);
//     org.apache.commons.math.linear.RealMatrix var60 = null;
//     org.apache.commons.math.linear.RealMatrix var61 = var8.subtract(var60);
// 
//   }

  public void test202() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test202"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    org.apache.commons.math.linear.RealMatrix var22 = var19.inverse();
    org.apache.commons.math.linear.RealMatrixChangingVisitor var23 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var28 = var19.walkInOptimizedOrder(var23, (-336392981), 1010, 0, 1079574528);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test203() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test203"); }


    org.apache.commons.math.linear.Array2DRowRealMatrix var2 = new org.apache.commons.math.linear.Array2DRowRealMatrix(1, 100);
    double[] var5 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var7 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var5, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var9 = new org.apache.commons.math.optimization.RealPointValuePair(var5, 0.0d);
    double[][] var10 = new double[][] { var5};
    org.apache.commons.math.linear.Array2DRowRealMatrix var12 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var10, true);
    double var13 = var12.getFrobeniusNorm();
    double var14 = var12.getNorm();
    double[] var16 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var18 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var16, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var20 = new org.apache.commons.math.optimization.RealPointValuePair(var16, 0.0d);
    double[][] var21 = new double[][] { var16};
    org.apache.commons.math.linear.Array2DRowRealMatrix var23 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var21, true);
    double var24 = var23.getFrobeniusNorm();
    double[] var27 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var29 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var27, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var31 = new org.apache.commons.math.optimization.RealPointValuePair(var27, 0.0d);
    double[][] var32 = new double[][] { var27};
    org.apache.commons.math.linear.Array2DRowRealMatrix var34 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var32, true);
    double var35 = var34.getFrobeniusNorm();
    var23.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var34);
    org.apache.commons.math.linear.RealMatrix var37 = var34.inverse();
    int var38 = var34.getRowDimension();
    double[][] var39 = var34.getData();
    org.apache.commons.math.linear.Array2DRowRealMatrix var41 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var39, false);
    var41.multiplyEntry(0, 0, 0.03933967394071772d);
    org.apache.commons.math.linear.Array2DRowRealMatrix var46 = var12.subtract(var41);
    double[] var48 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var50 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var48, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var52 = new org.apache.commons.math.optimization.RealPointValuePair(var48, 0.0d);
    double[][] var53 = new double[][] { var48};
    org.apache.commons.math.linear.Array2DRowRealMatrix var55 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var53, true);
    org.apache.commons.math.linear.ArrayRealVector var57 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var59 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var61 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var59, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var62 = new org.apache.commons.math.linear.ArrayRealVector(var57, var59);
    org.apache.commons.math.linear.ArrayRealVector var64 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var66 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var68 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var66, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var69 = new org.apache.commons.math.linear.ArrayRealVector(var64, var66);
    double var70 = var69.getNorm();
    org.apache.commons.math.linear.RealMatrix var71 = var62.outerProduct(var69);
    org.apache.commons.math.linear.RealMatrix var72 = var55.solve(var71);
    org.apache.commons.math.linear.Array2DRowRealMatrix var73 = var41.multiply(var55);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setRowMatrix((-336392981), (org.apache.commons.math.linear.RealMatrix)var55);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test204() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test204"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var1.mapRint();
    org.apache.commons.math.linear.RealVector var8 = var1.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var9 = var1.mapLog();
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var13 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var15 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var13, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var16 = new org.apache.commons.math.linear.ArrayRealVector(var11, var13);
    org.apache.commons.math.optimization.RealPointValuePair var19 = new org.apache.commons.math.optimization.RealPointValuePair(var13, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var21 = new org.apache.commons.math.linear.ArrayRealVector(var13, true);
    int var22 = var21.getDimension();
    java.lang.Double[] var24 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var25 = new org.apache.commons.math.linear.ArrayRealVector(var24);
    org.apache.commons.math.linear.RealVector var26 = var25.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var27 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var25);
    org.apache.commons.math.linear.RealVector var28 = var21.add((org.apache.commons.math.linear.RealVector)var27);
    java.lang.Double[] var30 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var31 = new org.apache.commons.math.linear.ArrayRealVector(var30);
    org.apache.commons.math.linear.ArrayRealVector var32 = var27.projection(var31);
    org.apache.commons.math.linear.RealVector var33 = var32.mapSinh();
    org.apache.commons.math.linear.RealVector var34 = var32.mapLog10ToSelf();
    org.apache.commons.math.linear.RealVector var36 = var32.mapAdd(0.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var37 = var1.getLInfDistance(var32);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test205() {}
//   public void test205() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test205"); }
// 
// 
//     double[] var1 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
//     double[][] var6 = new double[][] { var1};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
//     double var9 = var8.getFrobeniusNorm();
//     double var10 = var8.getNorm();
//     double[] var12 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
//     double[][] var17 = new double[][] { var12};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
//     double var20 = var19.getFrobeniusNorm();
//     double[] var23 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var25 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var23, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var27 = new org.apache.commons.math.optimization.RealPointValuePair(var23, 0.0d);
//     double[][] var28 = new double[][] { var23};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var30 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var28, true);
//     double var31 = var30.getFrobeniusNorm();
//     var19.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var30);
//     org.apache.commons.math.linear.RealMatrix var33 = var30.inverse();
//     int var34 = var30.getRowDimension();
//     double[][] var35 = var30.getData();
//     org.apache.commons.math.linear.Array2DRowRealMatrix var37 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var35, false);
//     var37.multiplyEntry(0, 0, 0.03933967394071772d);
//     org.apache.commons.math.linear.Array2DRowRealMatrix var42 = var8.subtract(var37);
//     org.apache.commons.math.linear.RealMatrixPreservingVisitor var43 = null;
//     double var44 = var42.walkInOptimizedOrder(var43);
// 
//   }

  public void test206() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test206"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var7 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var9 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var7, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(var5, var7);
    org.apache.commons.math.linear.RealVector var11 = var10.mapCoshToSelf();
    java.lang.String var12 = var10.toString();
    org.apache.commons.math.linear.RealVector var14 = var10.mapAddToSelf(10.0d);
    org.apache.commons.math.linear.RealVector var15 = var10.mapLog10();
    double var16 = var3.getValue((org.apache.commons.math.linear.RealVector)var10);
    org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var19 = var18.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var20 = var18.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var22 = new org.apache.commons.math.linear.ArrayRealVector(var18, false);
    org.apache.commons.math.linear.RealVector var23 = var22.mapLog1pToSelf();
    org.apache.commons.math.linear.RealVector var24 = var22.mapLog1pToSelf();
    org.apache.commons.math.linear.RealVector var26 = var22.mapSubtractToSelf(2.9066992099956157d);
    org.apache.commons.math.linear.RealVector var27 = var22.mapLog();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealVector var28 = var10.projection((org.apache.commons.math.linear.RealVector)var22);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "{1.54}"+ "'", var12.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 12.543080634815244d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test207() {}
//   public void test207() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test207"); }
// 
// 
//     java.lang.Class var0 = null;
//     java.lang.Enum var2 = java.lang.Enum.<java.lang.Enum>valueOf(var0, "Array2DRowRealMatrix{}");
// 
//   }

  public void test208() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test208"); }


    int var2 = org.apache.commons.math.util.MathUtils.lcm(0, 1073741824);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);

  }

  public void test209() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test209"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.optimization.GoalType var1 = org.apache.commons.math.optimization.GoalType.valueOf("{0.59}");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test210() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test210"); }


    int var2 = org.apache.commons.math.util.MathUtils.mulAndCheck(1079574528, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1079574528);

  }

  public void test211() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test211"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    double[] var23 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var25 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var23, 1.0d);
    double[] var28 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var29 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var28);
    org.apache.commons.math.linear.ArrayRealVector var31 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var33 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var35 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var33, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var36 = new org.apache.commons.math.linear.ArrayRealVector(var31, var33);
    double[] var37 = var29.operate(var33);
    org.apache.commons.math.linear.ArrayRealVector var38 = new org.apache.commons.math.linear.ArrayRealVector(var33);
    org.apache.commons.math.optimization.linear.Relationship var40 = null;
    double[] var43 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var44 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var43);
    org.apache.commons.math.linear.ArrayRealVector var46 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var48 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var50 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var48, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var51 = new org.apache.commons.math.linear.ArrayRealVector(var46, var48);
    double[] var52 = var44.operate(var48);
    org.apache.commons.math.linear.ArrayRealVector var53 = new org.apache.commons.math.linear.ArrayRealVector(var48);
    org.apache.commons.math.optimization.linear.LinearConstraint var55 = new org.apache.commons.math.optimization.linear.LinearConstraint(var33, 50.0d, var40, var48, 2.302585092994046d);
    double var56 = var25.getValue(var48);
    org.apache.commons.math.linear.RealVector var57 = var25.getCoefficients();
    org.apache.commons.math.linear.RealVector var58 = var8.operate(var57);
    double[] var60 = var8.getRow(0);
    double[] var62 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var64 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var62, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var66 = new org.apache.commons.math.optimization.RealPointValuePair(var62, 0.0d);
    double[][] var67 = new double[][] { var62};
    org.apache.commons.math.linear.Array2DRowRealMatrix var69 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var67, true);
    org.apache.commons.math.linear.RealMatrix var70 = var69.copy();
    boolean var71 = var69.isSingular();
    org.apache.commons.math.linear.Array2DRowRealMatrix var72 = var8.subtract(var69);
    java.lang.String var73 = var8.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "Array2DRowRealMatrix{{1.0}}"+ "'", var73.equals("Array2DRowRealMatrix{{1.0}}"));

  }

  public void test212() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test212"); }


    java.math.BigInteger var0 = null;
    java.math.BigInteger var2 = org.apache.commons.math.util.MathUtils.pow(var0, 0L);
    java.math.BigInteger var4 = org.apache.commons.math.util.MathUtils.pow(var2, 1073741824);
    java.math.BigInteger var6 = org.apache.commons.math.util.MathUtils.pow(var4, 101);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.math.BigInteger var8 = org.apache.commons.math.util.MathUtils.pow(var6, (-100L));
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test213() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test213"); }


    org.apache.commons.math.linear.Array2DRowRealMatrix var2 = new org.apache.commons.math.linear.Array2DRowRealMatrix(1, 100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealVector var4 = var2.getRowVector((-1));
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }

  }

  public void test214() {}
//   public void test214() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test214"); }
// 
// 
//     java.lang.Double[] var1 = new java.lang.Double[] { 49.73451754256331d};
//     org.apache.commons.math.linear.ArrayRealVector var2 = new org.apache.commons.math.linear.ArrayRealVector(var1);
//     org.apache.commons.math.linear.ArrayRealVector var4 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var6 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var8 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var6, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var9 = new org.apache.commons.math.linear.ArrayRealVector(var4, var6);
//     org.apache.commons.math.linear.RealVector var10 = var2.subtract(var6);
//     org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(var6);
//     org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var15 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var17 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var15, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(var13, var15);
//     org.apache.commons.math.optimization.RealPointValuePair var21 = new org.apache.commons.math.optimization.RealPointValuePair(var15, 1.0d, true);
//     org.apache.commons.math.linear.ArrayRealVector var23 = new org.apache.commons.math.linear.ArrayRealVector(var15, true);
//     int var24 = var23.getDimension();
//     java.lang.Double[] var26 = new java.lang.Double[] { 49.73451754256331d};
//     org.apache.commons.math.linear.ArrayRealVector var27 = new org.apache.commons.math.linear.ArrayRealVector(var26);
//     org.apache.commons.math.linear.RealVector var28 = var27.mapLogToSelf();
//     org.apache.commons.math.linear.ArrayRealVector var29 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var27);
//     org.apache.commons.math.linear.RealVector var30 = var23.add((org.apache.commons.math.linear.RealVector)var29);
//     java.lang.Double[] var32 = new java.lang.Double[] { 49.73451754256331d};
//     org.apache.commons.math.linear.ArrayRealVector var33 = new org.apache.commons.math.linear.ArrayRealVector(var32);
//     org.apache.commons.math.linear.ArrayRealVector var34 = var29.projection(var33);
//     org.apache.commons.math.linear.RealVector var35 = var34.mapSinh();
//     org.apache.commons.math.linear.ArrayRealVector var36 = new org.apache.commons.math.linear.ArrayRealVector(var11, var34);
//     org.apache.commons.math.linear.RealVector var37 = var11.mapCeilToSelf();
//     org.apache.commons.math.linear.ArrayRealVector var38 = null;
//     double var39 = var11.getL1Distance(var38);
// 
//   }

  public void test215() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test215"); }


    int var1 = org.apache.commons.math.util.MathUtils.indicator(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);

  }

  public void test216() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test216"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAsin();
    org.apache.commons.math.linear.RealVector var4 = var1.mapCbrt();
    double var5 = var1.getNorm();
    double[] var6 = var1.getData();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.ArrayRealVector var9 = new org.apache.commons.math.linear.ArrayRealVector(var6, (-336392981), 1010);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test217() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test217"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    org.apache.commons.math.linear.RealMatrix var9 = var8.copy();
    double var10 = var8.getTrace();
    org.apache.commons.math.linear.ArrayRealVector var12 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var13 = var12.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var14 = var12.mapAsin();
    org.apache.commons.math.linear.RealVector var15 = var12.mapCbrt();
    double var16 = var12.getNorm();
    double[] var17 = var12.getData();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double[] var18 = var8.operate(var17);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test218() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test218"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    double[] var23 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var25 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var23, 1.0d);
    double[] var28 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var29 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var28);
    org.apache.commons.math.linear.ArrayRealVector var31 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var33 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var35 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var33, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var36 = new org.apache.commons.math.linear.ArrayRealVector(var31, var33);
    double[] var37 = var29.operate(var33);
    org.apache.commons.math.linear.ArrayRealVector var38 = new org.apache.commons.math.linear.ArrayRealVector(var33);
    org.apache.commons.math.optimization.linear.Relationship var40 = null;
    double[] var43 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var44 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var43);
    org.apache.commons.math.linear.ArrayRealVector var46 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var48 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var50 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var48, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var51 = new org.apache.commons.math.linear.ArrayRealVector(var46, var48);
    double[] var52 = var44.operate(var48);
    org.apache.commons.math.linear.ArrayRealVector var53 = new org.apache.commons.math.linear.ArrayRealVector(var48);
    org.apache.commons.math.optimization.linear.LinearConstraint var55 = new org.apache.commons.math.optimization.linear.LinearConstraint(var33, 50.0d, var40, var48, 2.302585092994046d);
    double var56 = var25.getValue(var48);
    org.apache.commons.math.linear.RealVector var57 = var25.getCoefficients();
    org.apache.commons.math.linear.RealVector var58 = var8.operate(var57);
    double[] var60 = var8.getRow(0);
    double[] var62 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var64 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var62, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var66 = new org.apache.commons.math.optimization.RealPointValuePair(var62, 0.0d);
    double[][] var67 = new double[][] { var62};
    org.apache.commons.math.linear.Array2DRowRealMatrix var69 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var67, true);
    org.apache.commons.math.linear.RealMatrix var70 = var69.copy();
    boolean var71 = var69.isSingular();
    org.apache.commons.math.linear.Array2DRowRealMatrix var72 = var8.subtract(var69);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var69.setEntry(1079574528, 1, 1.731030945644E13d);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test219() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test219"); }


    int var2 = org.apache.commons.math.util.MathUtils.lcm(100, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 100);

  }

  public void test220() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test220"); }


    org.apache.commons.math.MaxIterationsExceededException var1 = new org.apache.commons.math.MaxIterationsExceededException(0);
    int var2 = var1.getMaxIterations();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);

  }

  public void test221() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test221"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.optimization.RealPointValuePair var9 = new org.apache.commons.math.optimization.RealPointValuePair(var3, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(var3, true);
    org.apache.commons.math.linear.RealVector var12 = var11.mapRintToSelf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test222() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test222"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(var1, false);
    org.apache.commons.math.linear.RealVector var6 = var5.mapLog1pToSelf();
    org.apache.commons.math.linear.ArrayRealVector var8 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double var9 = var5.dotProduct((org.apache.commons.math.linear.RealVector)var8);
    org.apache.commons.math.linear.RealVector var11 = var8.append(0.9957901442164848d);
    org.apache.commons.math.linear.RealVector var12 = var8.mapSinh();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealVector var13 = var8.unitVector();
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test223() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test223"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    java.lang.String var8 = var6.toString();
    org.apache.commons.math.linear.RealVector var9 = var6.mapRint();
    org.apache.commons.math.linear.RealVector var10 = var6.mapAbsToSelf();
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var6);
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var14 = var13.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var15 = var13.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var17 = new org.apache.commons.math.linear.ArrayRealVector(var13, false);
    org.apache.commons.math.linear.RealVector var18 = var17.mapLog1pToSelf();
    org.apache.commons.math.linear.RealVector var19 = var17.mapLog1pToSelf();
    org.apache.commons.math.linear.RealVector var21 = var17.mapSubtractToSelf(2.9066992099956157d);
    org.apache.commons.math.linear.ArrayRealVector var23 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var25 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var27 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var25, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var28 = new org.apache.commons.math.linear.ArrayRealVector(var23, var25);
    org.apache.commons.math.linear.RealVector var29 = var28.mapCoshToSelf();
    java.lang.String var30 = var28.toString();
    org.apache.commons.math.linear.RealVector var32 = var28.mapAddToSelf(10.0d);
    org.apache.commons.math.linear.RealVector var33 = var28.mapLog10();
    org.apache.commons.math.linear.ArrayRealVector var35 = new org.apache.commons.math.linear.ArrayRealVector(var28, false);
    org.apache.commons.math.linear.ArrayRealVector var37 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var39 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var41 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var39, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var42 = new org.apache.commons.math.linear.ArrayRealVector(var37, var39);
    org.apache.commons.math.linear.ArrayRealVector var44 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var45 = var44.mapCosToSelf();
    double var46 = var37.dotProduct(var45);
    org.apache.commons.math.linear.ArrayRealVector var47 = var35.append(var37);
    org.apache.commons.math.linear.ArrayRealVector var48 = var17.add(var37);
    org.apache.commons.math.linear.RealVector var49 = var37.mapLog();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var50 = var6.getL1Distance((org.apache.commons.math.linear.RealVector)var37);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "{1.54}"+ "'", var8.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "{1.54}"+ "'", var30.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test224() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test224"); }


    long var2 = org.apache.commons.math.util.MathUtils.pow((-10100L), 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1L);

  }

  public void test225() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test225"); }


    org.apache.commons.math.linear.Array2DRowRealMatrix var2 = new org.apache.commons.math.linear.Array2DRowRealMatrix(10, 100);
    double[][] var3 = var2.getDataRef();
    org.apache.commons.math.linear.RealMatrixChangingVisitor var4 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var9 = var2.walkInOptimizedOrder(var4, 1010, (-336392980), 10, 0);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test226() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test226"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var2 = org.apache.commons.math.util.MathUtils.pow((-1), (-100));
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }

  }

  public void test227() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test227"); }


    java.lang.Double[] var2 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var3 = new org.apache.commons.math.linear.ArrayRealVector(var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.NullPointerException var4 = org.apache.commons.math.MathRuntimeException.createNullPointerException("Array2DRowRealMatrix{{0.0},{-1.0}}", (java.lang.Object[])var2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test228() {}
//   public void test228() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test228"); }
// 
// 
//     double[] var2 = new double[] { 0.0d, (-1.0d)};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var3 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var2);
//     org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var7 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var9 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var7, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(var5, var7);
//     double[] var11 = var3.operate(var7);
//     org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var15 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var17 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var15, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(var13, var15);
//     org.apache.commons.math.linear.ArrayRealVector var19 = new org.apache.commons.math.linear.ArrayRealVector(var11, var15);
//     org.apache.commons.math.linear.RealVector var20 = var19.mapInvToSelf();
//     org.apache.commons.math.linear.RealVector var22 = null;
//     var19.setSubVector(100, var22);
// 
//   }

  public void test229() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test229"); }


    org.apache.commons.math.optimization.linear.SimplexSolver var1 = new org.apache.commons.math.optimization.linear.SimplexSolver(0.5430806348152439d);
    var1.setMaxIterations(10);

  }

  public void test230() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test230"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    java.lang.String var8 = var6.toString();
    org.apache.commons.math.linear.RealVector var10 = var6.mapAddToSelf(10.0d);
    org.apache.commons.math.linear.RealVector var11 = var6.mapLog10();
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(var6, false);
    org.apache.commons.math.linear.ArrayRealVector var15 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var17 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var19 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var17, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var20 = new org.apache.commons.math.linear.ArrayRealVector(var15, var17);
    org.apache.commons.math.linear.ArrayRealVector var22 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var23 = var22.mapCosToSelf();
    double var24 = var15.dotProduct(var23);
    org.apache.commons.math.linear.ArrayRealVector var25 = var13.append(var15);
    org.apache.commons.math.linear.ArrayRealVector var27 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var28 = var27.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var29 = var27.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var31 = new org.apache.commons.math.linear.ArrayRealVector(var27, false);
    org.apache.commons.math.linear.RealVector var32 = var27.mapTan();
    org.apache.commons.math.linear.RealVector var33 = var27.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var35 = new org.apache.commons.math.linear.ArrayRealVector(var27, false);
    org.apache.commons.math.linear.RealVector var37 = var27.mapMultiply((-1.0d));
    org.apache.commons.math.linear.ArrayRealVector var39 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var41 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var43 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var41, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var44 = new org.apache.commons.math.linear.ArrayRealVector(var39, var41);
    org.apache.commons.math.linear.RealVector var45 = var44.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var46 = var44.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var47 = var44.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var50 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var51 = var50.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var52 = var50.mapLog1p();
    var44.setSubVector(0, (org.apache.commons.math.linear.RealVector)var50);
    org.apache.commons.math.linear.RealVector var54 = var50.mapCosh();
    org.apache.commons.math.linear.RealVector var55 = var50.mapExpm1();
    org.apache.commons.math.linear.ArrayRealVector var57 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var58 = var57.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var59 = var57.mapAsin();
    org.apache.commons.math.linear.RealVector var60 = var57.mapCbrt();
    org.apache.commons.math.linear.RealVector var61 = var57.mapUlp();
    org.apache.commons.math.linear.RealVector var62 = var57.mapRint();
    org.apache.commons.math.linear.ArrayRealVector var63 = var50.subtract(var57);
    org.apache.commons.math.linear.ArrayRealVector var65 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var66 = var65.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var67 = var65.mapAcos();
    org.apache.commons.math.linear.ArrayRealVector var68 = var50.ebeMultiply(var65);
    org.apache.commons.math.linear.RealVector var69 = var65.mapSin();
    double var70 = var27.getL1Distance(var65);
    org.apache.commons.math.linear.RealVector var71 = var27.mapTanhToSelf();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.ArrayRealVector var72 = var13.ebeDivide(var27);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "{1.54}"+ "'", var8.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test231() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test231"); }


    long var2 = org.apache.commons.math.util.MathUtils.addAndCheck(3628800L, 1010L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3629810L);

  }

  public void test232() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test232"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(var1, false);
    org.apache.commons.math.linear.RealVector var6 = var1.mapTan();
    double[] var8 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var10 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var8, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var12 = new org.apache.commons.math.optimization.RealPointValuePair(var8, 0.0d);
    double[][] var13 = new double[][] { var8};
    org.apache.commons.math.linear.Array2DRowRealMatrix var15 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var13, true);
    org.apache.commons.math.linear.RealMatrix var16 = var15.copy();
    double var17 = var15.getTrace();
    boolean var18 = var1.equals((java.lang.Object)var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double[] var20 = var15.getRow(1);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test233() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test233"); }


    double[] var0 = null;
    double[] var2 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var4 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var2, 1.0d);
    double[] var7 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var7);
    org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var15 = new org.apache.commons.math.linear.ArrayRealVector(var10, var12);
    double[] var16 = var8.operate(var12);
    org.apache.commons.math.linear.ArrayRealVector var17 = new org.apache.commons.math.linear.ArrayRealVector(var12);
    org.apache.commons.math.optimization.linear.Relationship var19 = null;
    double[] var22 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var23 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var22);
    org.apache.commons.math.linear.ArrayRealVector var25 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var27 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var29 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var27, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var30 = new org.apache.commons.math.linear.ArrayRealVector(var25, var27);
    double[] var31 = var23.operate(var27);
    org.apache.commons.math.linear.ArrayRealVector var32 = new org.apache.commons.math.linear.ArrayRealVector(var27);
    org.apache.commons.math.optimization.linear.LinearConstraint var34 = new org.apache.commons.math.optimization.linear.LinearConstraint(var12, 50.0d, var19, var27, 2.302585092994046d);
    double var35 = var4.getValue(var27);
    boolean var36 = org.apache.commons.math.util.MathUtils.equals(var0, var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test234() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test234"); }


    org.apache.commons.math.linear.Array2DRowRealMatrix var0 = new org.apache.commons.math.linear.Array2DRowRealMatrix();
    int var1 = var0.getRowDimension();
    int var2 = var0.getRowDimension();
    int var3 = var0.getRowDimension();
    double[] var5 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var7 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var5, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var9 = new org.apache.commons.math.optimization.RealPointValuePair(var5, 0.0d);
    double[][] var10 = new double[][] { var5};
    org.apache.commons.math.linear.Array2DRowRealMatrix var12 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var10, true);
    double var13 = var12.getFrobeniusNorm();
    double[] var16 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var18 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var16, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var20 = new org.apache.commons.math.optimization.RealPointValuePair(var16, 0.0d);
    double[][] var21 = new double[][] { var16};
    org.apache.commons.math.linear.Array2DRowRealMatrix var23 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var21, true);
    double var24 = var23.getFrobeniusNorm();
    var12.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var23);
    org.apache.commons.math.linear.RealMatrix var26 = var23.inverse();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealMatrix var27 = var0.add(var26);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test235() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test235"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapSignum();
    org.apache.commons.math.optimization.linear.Relationship var8 = null;
    org.apache.commons.math.optimization.linear.LinearConstraint var10 = new org.apache.commons.math.optimization.linear.LinearConstraint(var7, var8, 0.0d);
    org.apache.commons.math.linear.RealVector var11 = var10.getCoefficients();
    org.apache.commons.math.optimization.linear.Relationship var12 = var10.getRelationship();
    org.apache.commons.math.linear.RealVector var13 = var10.getCoefficients();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test236() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test236"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var8 = var6.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var9 = var6.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var12 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var13 = var12.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var14 = var12.mapLog1p();
    var6.setSubVector(0, (org.apache.commons.math.linear.RealVector)var12);
    org.apache.commons.math.linear.RealVector var16 = var12.mapRint();
    org.apache.commons.math.linear.RealVector var17 = var12.mapSqrtToSelf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test237() {}
//   public void test237() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test237"); }
// 
// 
//     double[] var1 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
//     double[][] var6 = new double[][] { var1};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
//     double var9 = var8.getFrobeniusNorm();
//     double[] var12 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
//     double[][] var17 = new double[][] { var12};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
//     double var20 = var19.getFrobeniusNorm();
//     var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
//     double[] var23 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var25 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var23, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var27 = new org.apache.commons.math.optimization.RealPointValuePair(var23, 0.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var30 = new org.apache.commons.math.optimization.RealPointValuePair(var23, 50.0d, true);
//     double[] var31 = var19.operate(var23);
//     boolean var32 = var19.isSingular();
//     org.apache.commons.math.linear.RealMatrixPreservingVisitor var33 = null;
//     double var34 = var19.walkInOptimizedOrder(var33);
// 
//   }

  public void test238() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test238"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var2 = org.apache.commons.math.util.MathUtils.pow((-10000L), (-100L));
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }

  }

  public void test239() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test239"); }


    org.apache.commons.math.linear.Array2DRowRealMatrix var2 = new org.apache.commons.math.linear.Array2DRowRealMatrix(10, 100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setEntry(100, 0, 1.731030945644E13d);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }

  }

  public void test240() {}
//   public void test240() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test240"); }
// 
// 
//     java.text.NumberFormat var3 = null;
//     org.apache.commons.math.linear.RealVectorFormat var4 = new org.apache.commons.math.linear.RealVectorFormat("}", "hi!", "hi!", var3);
//     org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var8 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var10 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var8, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(var6, var8);
//     java.lang.StringBuffer var12 = null;
//     java.text.FieldPosition var13 = null;
//     java.lang.StringBuffer var14 = var4.format((org.apache.commons.math.linear.RealVector)var11, var12, var13);
// 
//   }

  public void test241() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test241"); }


    java.lang.Throwable var0 = null;
    org.apache.commons.math.ConvergenceException var1 = new org.apache.commons.math.ConvergenceException(var0);

  }

  public void test242() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test242"); }


    java.lang.Double[] var1 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var2 = new org.apache.commons.math.linear.ArrayRealVector(var1);
    java.lang.Double[] var4 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(var4);
    org.apache.commons.math.linear.ArrayRealVector var7 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var9 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var11 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var9, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var12 = new org.apache.commons.math.linear.ArrayRealVector(var7, var9);
    org.apache.commons.math.linear.RealVector var13 = var5.subtract(var9);
    boolean var14 = var2.equals((java.lang.Object)var9);
    org.apache.commons.math.optimization.linear.Relationship var16 = null;
    double[] var18 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var20 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var18, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var22 = new org.apache.commons.math.optimization.RealPointValuePair(var18, 0.0d);
    double[][] var23 = new double[][] { var18};
    org.apache.commons.math.linear.Array2DRowRealMatrix var25 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var23, true);
    double var26 = var25.getFrobeniusNorm();
    double[] var29 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var31 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var29, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var33 = new org.apache.commons.math.optimization.RealPointValuePair(var29, 0.0d);
    double[][] var34 = new double[][] { var29};
    org.apache.commons.math.linear.Array2DRowRealMatrix var36 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var34, true);
    double var37 = var36.getFrobeniusNorm();
    var25.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var36);
    double[] var40 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var42 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var40, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var44 = new org.apache.commons.math.optimization.RealPointValuePair(var40, 0.0d);
    org.apache.commons.math.optimization.RealPointValuePair var47 = new org.apache.commons.math.optimization.RealPointValuePair(var40, 50.0d, true);
    double[] var48 = var36.operate(var40);
    org.apache.commons.math.linear.ArrayRealVector var49 = new org.apache.commons.math.linear.ArrayRealVector(var40);
    org.apache.commons.math.optimization.linear.LinearConstraint var51 = new org.apache.commons.math.optimization.linear.LinearConstraint(var9, 12.543080634815244d, var16, var40, (-1.0d));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.ArrayRealVector var54 = new org.apache.commons.math.linear.ArrayRealVector(var9, 1010, 0);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test243() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test243"); }


    org.apache.commons.math.ConvergenceException var2 = new org.apache.commons.math.ConvergenceException();
    java.lang.Object[] var5 = new java.lang.Object[] { 0};
    org.apache.commons.math.ConvergenceException var6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var2, "", var5);
    java.lang.Object[] var10 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var11 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var10);
    org.apache.commons.math.MathRuntimeException var12 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var2, "hi!", var10);
    java.lang.Object[] var13 = var12.getArguments();
    java.lang.Object[] var17 = new java.lang.Object[] { (short)10};
    org.apache.commons.math.MathRuntimeException var18 = new org.apache.commons.math.MathRuntimeException("hi!", var17);
    org.apache.commons.math.MathRuntimeException var19 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var12, "", var17);
    java.lang.Object[] var20 = var12.getArguments();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.text.ParseException var21 = org.apache.commons.math.MathRuntimeException.createParseException(0, "{", var20);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test244() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test244"); }


    java.lang.Double[] var1 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var2 = new org.apache.commons.math.linear.ArrayRealVector(var1);
    org.apache.commons.math.linear.ArrayRealVector var4 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var6 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var8 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var6, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var9 = new org.apache.commons.math.linear.ArrayRealVector(var4, var6);
    org.apache.commons.math.linear.RealVector var10 = var2.subtract(var6);
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(var6);
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var15 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var17 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var15, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(var13, var15);
    org.apache.commons.math.linear.RealVector var19 = var18.mapCoshToSelf();
    java.lang.String var20 = var18.toString();
    org.apache.commons.math.linear.RealVector var21 = var18.mapRint();
    org.apache.commons.math.linear.RealVector var22 = var18.mapAbsToSelf();
    boolean var23 = var18.isInfinite();
    org.apache.commons.math.linear.RealVector var25 = var18.mapAdd(0.0d);
    org.apache.commons.math.linear.RealVector var26 = var18.mapCeil();
    double var27 = var11.getDistance(var18);
    org.apache.commons.math.linear.ArrayRealVector var29 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var30 = var29.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var31 = var29.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var33 = new org.apache.commons.math.linear.ArrayRealVector(var29, false);
    org.apache.commons.math.linear.RealVector var34 = var29.mapTan();
    org.apache.commons.math.linear.RealVector var35 = var29.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var37 = new org.apache.commons.math.linear.ArrayRealVector(var29, false);
    org.apache.commons.math.linear.RealVector var39 = var29.mapMultiply((-1.0d));
    org.apache.commons.math.linear.RealVector var40 = var29.mapInvToSelf();
    double[] var43 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var44 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var43);
    org.apache.commons.math.linear.ArrayRealVector var46 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var48 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var50 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var48, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var51 = new org.apache.commons.math.linear.ArrayRealVector(var46, var48);
    double[] var52 = var44.operate(var48);
    org.apache.commons.math.linear.ArrayRealVector var54 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var56 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var58 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var56, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var59 = new org.apache.commons.math.linear.ArrayRealVector(var54, var56);
    org.apache.commons.math.linear.ArrayRealVector var60 = new org.apache.commons.math.linear.ArrayRealVector(var52, var56);
    org.apache.commons.math.linear.ArrayRealVector var61 = new org.apache.commons.math.linear.ArrayRealVector(var29, var56);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealVector var62 = var11.subtract((org.apache.commons.math.linear.RealVector)var29);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "{1.54}"+ "'", var20.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5430806348152439d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test245() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test245"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var2 = org.apache.commons.math.util.MathUtils.mulAndCheck(1079574528, (-336392981));
      fail("Expected exception of type java.lang.ArithmeticException");
    } catch (java.lang.ArithmeticException e) {
      // Expected exception.
    }

  }

  public void test246() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test246"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAsin();
    org.apache.commons.math.linear.RealVector var4 = var1.mapCbrt();
    org.apache.commons.math.optimization.linear.Relationship var6 = null;
    org.apache.commons.math.linear.ArrayRealVector var8 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.optimization.linear.LinearConstraint var10 = new org.apache.commons.math.optimization.linear.LinearConstraint(var4, 363.7393755555636d, var6, (org.apache.commons.math.linear.RealVector)var8, 10.0d);
    java.lang.Object var11 = null;
    boolean var12 = var10.equals(var11);
    org.apache.commons.math.linear.RealVector var13 = var10.getCoefficients();
    double var14 = var10.getValue();
    org.apache.commons.math.optimization.linear.Relationship var15 = var10.getRelationship();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-353.7393755555636d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test247() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test247"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    org.apache.commons.math.linear.RealMatrix var23 = var8.getRowMatrix(0);
    double var24 = var8.getTrace();
    org.apache.commons.math.linear.ArrayRealVector var27 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var28 = var27.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var29 = var27.mapLog1p();
    double[] var30 = var27.toArray();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var8.setRow(0, var30);
      fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException");
    } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test248() {}
//   public void test248() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test248"); }
// 
// 
//     org.apache.commons.math.MaxIterationsExceededException var1 = new org.apache.commons.math.MaxIterationsExceededException(1079574528);
//     java.lang.Throwable var2 = null;
//     var1.addSuppressed(var2);
// 
//   }

  public void test249() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test249"); }


    int var1 = org.apache.commons.math.util.MathUtils.sign(101);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);

  }

  public void test250() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test250"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    java.lang.String var8 = var6.toString();
    org.apache.commons.math.linear.RealVector var10 = var6.mapAddToSelf(10.0d);
    org.apache.commons.math.linear.RealVector var11 = var6.mapLog10();
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(var6, false);
    org.apache.commons.math.linear.ArrayRealVector var15 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var17 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var19 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var17, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var20 = new org.apache.commons.math.linear.ArrayRealVector(var15, var17);
    org.apache.commons.math.linear.ArrayRealVector var22 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var23 = var22.mapCosToSelf();
    double var24 = var15.dotProduct(var23);
    org.apache.commons.math.linear.ArrayRealVector var25 = var13.append(var15);
    org.apache.commons.math.linear.RealVector var26 = var15.mapSqrt();
    boolean var27 = var15.isInfinite();
    org.apache.commons.math.linear.RealVector var28 = var15.mapCosh();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "{1.54}"+ "'", var8.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test251() {}
//   public void test251() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test251"); }
// 
// 
//     java.text.NumberFormat var3 = null;
//     org.apache.commons.math.linear.RealVectorFormat var4 = new org.apache.commons.math.linear.RealVectorFormat("", "hi!", "org.apache.commons.math.ConvergenceException: Convergence failed", var3);
//     java.lang.String var5 = var4.getSeparator();
//     java.lang.Object var7 = var4.parseObject("Array2DRowRealMatrix{{1.0}}");
// 
//   }

  public void test252() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test252"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var2 = var1.getData();
    double[] var3 = var1.getData();
    org.apache.commons.math.linear.RealVector var4 = var1.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var5 = var1.mapCbrtToSelf();
    org.apache.commons.math.linear.RealVector var6 = var1.mapExpm1();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test253() {}
//   public void test253() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test253"); }
// 
// 
//     org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var3 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
//     org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
//     org.apache.commons.math.linear.RealVector var8 = var6.mapAtanToSelf();
//     org.apache.commons.math.linear.RealVector var9 = var6.mapUlp();
//     org.apache.commons.math.linear.ArrayRealVector var12 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     org.apache.commons.math.linear.RealVector var13 = var12.mapCosToSelf();
//     org.apache.commons.math.linear.RealVector var14 = var12.mapLog1p();
//     var6.setSubVector(0, (org.apache.commons.math.linear.RealVector)var12);
//     double[] var16 = var12.getData();
//     org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var20 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var22 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var20, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var23 = new org.apache.commons.math.linear.ArrayRealVector(var18, var20);
//     org.apache.commons.math.optimization.RealPointValuePair var26 = new org.apache.commons.math.optimization.RealPointValuePair(var20, 1.0d, true);
//     org.apache.commons.math.linear.ArrayRealVector var27 = new org.apache.commons.math.linear.ArrayRealVector(var16, var20);
//     org.apache.commons.math.linear.RealVector var28 = var27.mapSinToSelf();
//     org.apache.commons.math.linear.RealVector var29 = null;
//     org.apache.commons.math.linear.RealVector var30 = var27.ebeMultiply(var29);
// 
//   }

  public void test254() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test254"); }


    org.apache.commons.math.ConvergenceException var0 = new org.apache.commons.math.ConvergenceException();
    java.lang.Object[] var3 = new java.lang.Object[] { ""};
    org.apache.commons.math.ConvergenceException var4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var0, "", var3);
    java.lang.RuntimeException var5 = org.apache.commons.math.MathRuntimeException.createInternalError((java.lang.Throwable)var0);
    java.lang.Object[] var8 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var9 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var8);
    var5.addSuppressed((java.lang.Throwable)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test255() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test255"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    double[] var23 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var25 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var23, 1.0d);
    double[] var28 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var29 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var28);
    org.apache.commons.math.linear.ArrayRealVector var31 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var33 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var35 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var33, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var36 = new org.apache.commons.math.linear.ArrayRealVector(var31, var33);
    double[] var37 = var29.operate(var33);
    org.apache.commons.math.linear.ArrayRealVector var38 = new org.apache.commons.math.linear.ArrayRealVector(var33);
    org.apache.commons.math.optimization.linear.Relationship var40 = null;
    double[] var43 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var44 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var43);
    org.apache.commons.math.linear.ArrayRealVector var46 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var48 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var50 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var48, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var51 = new org.apache.commons.math.linear.ArrayRealVector(var46, var48);
    double[] var52 = var44.operate(var48);
    org.apache.commons.math.linear.ArrayRealVector var53 = new org.apache.commons.math.linear.ArrayRealVector(var48);
    org.apache.commons.math.optimization.linear.LinearConstraint var55 = new org.apache.commons.math.optimization.linear.LinearConstraint(var33, 50.0d, var40, var48, 2.302585092994046d);
    double var56 = var25.getValue(var48);
    org.apache.commons.math.linear.RealVector var57 = var25.getCoefficients();
    org.apache.commons.math.linear.RealVector var58 = var8.operate(var57);
    org.apache.commons.math.linear.RealMatrixChangingVisitor var59 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var64 = var8.walkInOptimizedOrder(var59, 0, 101, (-336392981), (-1));
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test256() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test256"); }


    org.apache.commons.math.linear.Array2DRowRealMatrix var3 = new org.apache.commons.math.linear.Array2DRowRealMatrix(10, 100);
    double[][] var4 = var3.getDataRef();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.NoSuchElementException var5 = org.apache.commons.math.MathRuntimeException.createNoSuchElementException("Array2DRowRealMatrix{}", (java.lang.Object[])var4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test257() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test257"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var2 = var1.getData();
    org.apache.commons.math.linear.RealVector var3 = var1.mapSignum();
    double[] var4 = var1.toArray();
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var8 = var6.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(var6, false);
    org.apache.commons.math.linear.RealVector var12 = var10.mapDivideToSelf(0.0d);
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(var1, var10);
    org.apache.commons.math.linear.ArrayRealVector var15 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var16 = var15.getData();
    org.apache.commons.math.linear.RealVector var17 = var15.mapSignum();
    double[] var18 = var15.toArray();
    org.apache.commons.math.linear.ArrayRealVector var20 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var21 = var20.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var22 = var20.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var24 = new org.apache.commons.math.linear.ArrayRealVector(var20, false);
    org.apache.commons.math.linear.RealVector var25 = var24.mapLog1pToSelf();
    org.apache.commons.math.linear.RealVector var26 = var24.mapTan();
    org.apache.commons.math.linear.ArrayRealVector var28 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var30 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var32 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var30, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var33 = new org.apache.commons.math.linear.ArrayRealVector(var28, var30);
    org.apache.commons.math.linear.RealVector var34 = var33.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var35 = var33.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var36 = var33.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var39 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var40 = var39.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var41 = var39.mapLog1p();
    var33.setSubVector(0, (org.apache.commons.math.linear.RealVector)var39);
    double[] var43 = var39.getData();
    org.apache.commons.math.linear.ArrayRealVector var45 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var47 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var49 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var47, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var50 = new org.apache.commons.math.linear.ArrayRealVector(var45, var47);
    org.apache.commons.math.optimization.RealPointValuePair var53 = new org.apache.commons.math.optimization.RealPointValuePair(var47, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var54 = new org.apache.commons.math.linear.ArrayRealVector(var43, var47);
    org.apache.commons.math.linear.ArrayRealVector var55 = new org.apache.commons.math.linear.ArrayRealVector(var43);
    double[] var56 = var55.toArray();
    org.apache.commons.math.linear.RealVector var57 = var24.add(var56);
    org.apache.commons.math.linear.ArrayRealVector var58 = new org.apache.commons.math.linear.ArrayRealVector(var15, var56);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealMatrix var59 = var1.outerProduct(var15);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test258() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test258"); }


    boolean var3 = org.apache.commons.math.util.MathUtils.equals(0.0d, (-47.69741490700596d), 0.03933967394071772d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test259() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test259"); }


    java.lang.Object[] var2 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var3 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var2);
    java.lang.Object[] var6 = new java.lang.Object[] { 10L};
    org.apache.commons.math.ConvergenceException var7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var3, "", var6);
    org.apache.commons.math.MathException var8 = new org.apache.commons.math.MathException((java.lang.Throwable)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test260() {}
//   public void test260() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test260"); }
// 
// 
//     org.apache.commons.math.optimization.linear.SimplexSolver var1 = new org.apache.commons.math.optimization.linear.SimplexSolver(0.5430806348152439d);
//     int var2 = var1.getIterations();
//     var1.setMaxIterations((-336392980));
//     double[] var6 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var8 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var6, 1.0d);
//     double[] var11 = new double[] { 0.0d, (-1.0d)};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var12 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var11);
//     org.apache.commons.math.linear.ArrayRealVector var14 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var16 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var18 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var16, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var19 = new org.apache.commons.math.linear.ArrayRealVector(var14, var16);
//     double[] var20 = var12.operate(var16);
//     org.apache.commons.math.linear.ArrayRealVector var21 = new org.apache.commons.math.linear.ArrayRealVector(var16);
//     org.apache.commons.math.optimization.linear.Relationship var23 = null;
//     double[] var26 = new double[] { 0.0d, (-1.0d)};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var27 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var26);
//     org.apache.commons.math.linear.ArrayRealVector var29 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var31 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var33 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var31, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var34 = new org.apache.commons.math.linear.ArrayRealVector(var29, var31);
//     double[] var35 = var27.operate(var31);
//     org.apache.commons.math.linear.ArrayRealVector var36 = new org.apache.commons.math.linear.ArrayRealVector(var31);
//     org.apache.commons.math.optimization.linear.LinearConstraint var38 = new org.apache.commons.math.optimization.linear.LinearConstraint(var16, 50.0d, var23, var31, 2.302585092994046d);
//     double var39 = var8.getValue(var31);
//     java.util.Collection var40 = null;
//     org.apache.commons.math.optimization.GoalType var41 = null;
//     org.apache.commons.math.optimization.RealPointValuePair var43 = var1.optimize(var8, var40, var41, true);
// 
//   }

  public void test261() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test261"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var8 = var6.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var9 = var6.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var12 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var13 = var12.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var14 = var12.mapLog1p();
    var6.setSubVector(0, (org.apache.commons.math.linear.RealVector)var12);
    org.apache.commons.math.linear.RealVector var16 = var12.mapCosh();
    org.apache.commons.math.linear.RealVector var17 = var12.mapExpm1();
    org.apache.commons.math.linear.ArrayRealVector var19 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var20 = var19.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var21 = var19.mapAsin();
    org.apache.commons.math.linear.RealVector var22 = var19.mapCbrt();
    org.apache.commons.math.linear.RealVector var23 = var19.mapUlp();
    org.apache.commons.math.linear.RealVector var24 = var19.mapRint();
    org.apache.commons.math.linear.ArrayRealVector var25 = var12.subtract(var19);
    org.apache.commons.math.linear.ArrayRealVector var27 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var29 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var31 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var29, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var32 = new org.apache.commons.math.linear.ArrayRealVector(var27, var29);
    org.apache.commons.math.linear.RealVector var33 = var32.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var34 = var32.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var35 = var32.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var38 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var39 = var38.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var40 = var38.mapLog1p();
    var32.setSubVector(0, (org.apache.commons.math.linear.RealVector)var38);
    double[] var42 = var38.getData();
    org.apache.commons.math.linear.ArrayRealVector var44 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var46 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var48 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var46, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var49 = new org.apache.commons.math.linear.ArrayRealVector(var44, var46);
    org.apache.commons.math.optimization.RealPointValuePair var52 = new org.apache.commons.math.optimization.RealPointValuePair(var46, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var53 = new org.apache.commons.math.linear.ArrayRealVector(var42, var46);
    org.apache.commons.math.linear.ArrayRealVector var54 = new org.apache.commons.math.linear.ArrayRealVector(var42);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealVector var55 = var12.projection(var42);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test262() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test262"); }


    boolean var3 = org.apache.commons.math.util.MathUtils.equals(2.4258259770489514E8d, 12.543080634815244d, 3.9066992099956157d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test263() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test263"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double var10 = var8.getNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    double[] var23 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var25 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var23, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var27 = new org.apache.commons.math.optimization.RealPointValuePair(var23, 0.0d);
    double[][] var28 = new double[][] { var23};
    org.apache.commons.math.linear.Array2DRowRealMatrix var30 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var28, true);
    double var31 = var30.getFrobeniusNorm();
    var19.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var30);
    org.apache.commons.math.linear.RealMatrix var33 = var30.inverse();
    int var34 = var30.getRowDimension();
    double[][] var35 = var30.getData();
    org.apache.commons.math.linear.Array2DRowRealMatrix var37 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var35, false);
    var37.multiplyEntry(0, 0, 0.03933967394071772d);
    org.apache.commons.math.linear.Array2DRowRealMatrix var42 = var8.subtract(var37);
    double[] var44 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var46 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var44, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var48 = new org.apache.commons.math.optimization.RealPointValuePair(var44, 0.0d);
    double[][] var49 = new double[][] { var44};
    org.apache.commons.math.linear.Array2DRowRealMatrix var51 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var49, true);
    org.apache.commons.math.linear.ArrayRealVector var53 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var55 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var57 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var55, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var58 = new org.apache.commons.math.linear.ArrayRealVector(var53, var55);
    org.apache.commons.math.linear.ArrayRealVector var60 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var62 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var64 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var62, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var65 = new org.apache.commons.math.linear.ArrayRealVector(var60, var62);
    double var66 = var65.getNorm();
    org.apache.commons.math.linear.RealMatrix var67 = var58.outerProduct(var65);
    org.apache.commons.math.linear.RealMatrix var68 = var51.solve(var67);
    org.apache.commons.math.linear.Array2DRowRealMatrix var69 = var37.multiply(var51);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double[] var71 = var51.getColumn(101);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test264() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test264"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapSinhToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapUlpToSelf();
    org.apache.commons.math.linear.RealVector var4 = var1.mapSinToSelf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test265() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test265"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var2 = var1.getData();
    org.apache.commons.math.linear.RealVector var3 = var1.mapSignum();
    double[] var4 = var1.toArray();
    org.apache.commons.math.linear.RealVector var5 = var1.mapTanToSelf();
    org.apache.commons.math.linear.RealVector var6 = var1.mapAcosToSelf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test266() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test266"); }


    org.apache.commons.math.ConvergenceException var3 = new org.apache.commons.math.ConvergenceException();
    java.lang.Object[] var6 = new java.lang.Object[] { 0};
    org.apache.commons.math.ConvergenceException var7 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var3, "", var6);
    java.lang.Object[] var11 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var12 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var11);
    org.apache.commons.math.MathRuntimeException var13 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var3, "hi!", var11);
    org.apache.commons.math.MathException var14 = new org.apache.commons.math.MathException("}", var11);
    org.apache.commons.math.optimization.OptimizationException var15 = new org.apache.commons.math.optimization.OptimizationException("", var11);
    org.apache.commons.math.ConvergenceException var18 = new org.apache.commons.math.ConvergenceException();
    java.lang.Object[] var21 = new java.lang.Object[] { ""};
    org.apache.commons.math.ConvergenceException var22 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var18, "", var21);
    org.apache.commons.math.ConvergenceException var23 = new org.apache.commons.math.ConvergenceException("hi!", var21);
    org.apache.commons.math.MathRuntimeException var24 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var15, "hi!", var21);
    java.util.NoSuchElementException var25 = org.apache.commons.math.MathRuntimeException.createNoSuchElementException("hi!", var21);
    org.apache.commons.math.MathRuntimeException var26 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test267() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test267"); }


    double var2 = org.apache.commons.math.util.MathUtils.scalb(1.731030945644E13d, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3.462061891288E13d);

  }

  public void test268() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test268"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var8 = var6.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var9 = var6.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var12 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var13 = var12.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var14 = var12.mapLog1p();
    var6.setSubVector(0, (org.apache.commons.math.linear.RealVector)var12);
    org.apache.commons.math.linear.RealVector var16 = var12.mapRint();
    org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var20 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var22 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var20, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var23 = new org.apache.commons.math.linear.ArrayRealVector(var18, var20);
    org.apache.commons.math.linear.RealVector var24 = var23.mapCoshToSelf();
    java.lang.String var25 = var23.toString();
    org.apache.commons.math.linear.RealVector var26 = var23.mapRint();
    org.apache.commons.math.linear.RealVector var27 = var23.mapAbsToSelf();
    boolean var28 = var23.isInfinite();
    org.apache.commons.math.linear.RealVector var30 = var23.mapAdd(0.0d);
    double var31 = var23.getL1Norm();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var32 = var12.getDistance(var23);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "{1.54}"+ "'", var25.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1.543080634815244d);

  }

  public void test269() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test269"); }


    int var2 = org.apache.commons.math.util.MathUtils.mulAndCheck(0, 1010);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);

  }

  public void test270() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test270"); }


    java.lang.Object[] var7 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var8 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var7);
    java.lang.Object[] var11 = new java.lang.Object[] { 10L};
    org.apache.commons.math.ConvergenceException var12 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var8, "", var11);
    java.text.ParseException var13 = org.apache.commons.math.MathRuntimeException.createParseException((-1), "org.apache.commons.math.ConvergenceException: Convergence failed", var11);
    org.apache.commons.math.ConvergenceException var14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", var11);
    org.apache.commons.math.optimization.OptimizationException var15 = new org.apache.commons.math.optimization.OptimizationException("", var11);
    org.apache.commons.math.linear.InvalidMatrixException var16 = new org.apache.commons.math.linear.InvalidMatrixException("", var11);
    double[] var20 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var22 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var20, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var24 = new org.apache.commons.math.optimization.RealPointValuePair(var20, 0.0d);
    double[][] var25 = new double[][] { var20};
    org.apache.commons.math.linear.Array2DRowRealMatrix var27 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var25, true);
    org.apache.commons.math.linear.Array2DRowRealMatrix var28 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var25);
    java.lang.ArrayIndexOutOfBoundsException var29 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("Convergence failed", (java.lang.Object[])var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.MathRuntimeException var30 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var16, "Array2DRowRealMatrix{{1.0}}", (java.lang.Object[])var25);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test271() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test271"); }


    int var2 = org.apache.commons.math.util.MathUtils.subAndCheck((-336392981), 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-336392981));

  }

  public void test272() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test272"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var2 = var1.getData();
    double var3 = var1.getLInfNorm();
    org.apache.commons.math.linear.RealVector var4 = var1.mapTan();
    org.apache.commons.math.linear.RealVector var5 = var1.mapRint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test273() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test273"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    double[] var23 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var25 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var23, 1.0d);
    double[] var28 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var29 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var28);
    org.apache.commons.math.linear.ArrayRealVector var31 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var33 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var35 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var33, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var36 = new org.apache.commons.math.linear.ArrayRealVector(var31, var33);
    double[] var37 = var29.operate(var33);
    org.apache.commons.math.linear.ArrayRealVector var38 = new org.apache.commons.math.linear.ArrayRealVector(var33);
    org.apache.commons.math.optimization.linear.Relationship var40 = null;
    double[] var43 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var44 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var43);
    org.apache.commons.math.linear.ArrayRealVector var46 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var48 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var50 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var48, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var51 = new org.apache.commons.math.linear.ArrayRealVector(var46, var48);
    double[] var52 = var44.operate(var48);
    org.apache.commons.math.linear.ArrayRealVector var53 = new org.apache.commons.math.linear.ArrayRealVector(var48);
    org.apache.commons.math.optimization.linear.LinearConstraint var55 = new org.apache.commons.math.optimization.linear.LinearConstraint(var33, 50.0d, var40, var48, 2.302585092994046d);
    double var56 = var25.getValue(var48);
    org.apache.commons.math.linear.RealVector var57 = var25.getCoefficients();
    org.apache.commons.math.linear.RealVector var58 = var8.operate(var57);
    double[] var60 = var8.getRow(0);
    org.apache.commons.math.linear.RealMatrix var61 = var8.transpose();
    double[] var63 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var65 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var63, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var67 = new org.apache.commons.math.optimization.RealPointValuePair(var63, 0.0d);
    double[][] var68 = new double[][] { var63};
    org.apache.commons.math.linear.Array2DRowRealMatrix var70 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var68, true);
    double var71 = var70.getFrobeniusNorm();
    double[] var74 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var76 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var74, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var78 = new org.apache.commons.math.optimization.RealPointValuePair(var74, 0.0d);
    double[][] var79 = new double[][] { var74};
    org.apache.commons.math.linear.Array2DRowRealMatrix var81 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var79, true);
    double var82 = var81.getFrobeniusNorm();
    var70.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var81);
    org.apache.commons.math.linear.RealMatrix var84 = var81.inverse();
    int var85 = var81.getRowDimension();
    double[][] var86 = var81.getData();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var8.setSubMatrix(var86, 100, 1);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test274() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test274"); }


    double var1 = org.apache.commons.math.util.MathUtils.cosh(0.7853981633974483d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1.3246090892520057d);

  }

  public void test275() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test275"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(var1, false);
    org.apache.commons.math.linear.RealVector var6 = var1.mapTan();
    org.apache.commons.math.linear.RealVector var7 = var1.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var9 = new org.apache.commons.math.linear.ArrayRealVector(var1, false);
    org.apache.commons.math.linear.RealVector var10 = var9.mapSinhToSelf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test276() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test276"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var8 = var6.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var9 = var6.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var12 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var13 = var12.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var14 = var12.mapLog1p();
    var6.setSubVector(0, (org.apache.commons.math.linear.RealVector)var12);
    org.apache.commons.math.linear.RealVector var16 = var12.mapCosh();
    org.apache.commons.math.linear.RealVector var17 = var12.mapExpm1();
    org.apache.commons.math.linear.ArrayRealVector var19 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var20 = var19.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var21 = var19.mapAsin();
    org.apache.commons.math.linear.RealVector var22 = var19.mapCbrt();
    org.apache.commons.math.linear.RealVector var23 = var19.mapUlp();
    org.apache.commons.math.linear.RealVector var24 = var19.mapRint();
    org.apache.commons.math.linear.ArrayRealVector var25 = var12.subtract(var19);
    org.apache.commons.math.linear.ArrayRealVector var27 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var28 = var27.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var29 = var27.mapAcos();
    org.apache.commons.math.linear.ArrayRealVector var30 = var12.ebeMultiply(var27);
    org.apache.commons.math.linear.RealVector var31 = var27.mapSin();
    org.apache.commons.math.optimization.linear.Relationship var32 = null;
    org.apache.commons.math.optimization.linear.LinearConstraint var34 = new org.apache.commons.math.optimization.linear.LinearConstraint((org.apache.commons.math.linear.RealVector)var27, var32, 2.4258259770489514E8d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var27.unitize();
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test277() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test277"); }


    java.lang.Object[] var4 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var5 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var4);
    java.lang.Object[] var8 = new java.lang.Object[] { 10L};
    org.apache.commons.math.ConvergenceException var9 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var5, "", var8);
    java.text.ParseException var10 = org.apache.commons.math.MathRuntimeException.createParseException((-1), "org.apache.commons.math.ConvergenceException: Convergence failed", var8);
    org.apache.commons.math.optimization.OptimizationException var11 = new org.apache.commons.math.optimization.OptimizationException((java.lang.Throwable)var10);
    org.apache.commons.math.ConvergenceException var12 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var11);
    java.lang.RuntimeException var13 = org.apache.commons.math.MathRuntimeException.createInternalError((java.lang.Throwable)var12);
    java.lang.IllegalArgumentException var14 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test278() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test278"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    double[] var23 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var25 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var23, 1.0d);
    double[] var28 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var29 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var28);
    org.apache.commons.math.linear.ArrayRealVector var31 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var33 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var35 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var33, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var36 = new org.apache.commons.math.linear.ArrayRealVector(var31, var33);
    double[] var37 = var29.operate(var33);
    org.apache.commons.math.linear.ArrayRealVector var38 = new org.apache.commons.math.linear.ArrayRealVector(var33);
    org.apache.commons.math.optimization.linear.Relationship var40 = null;
    double[] var43 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var44 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var43);
    org.apache.commons.math.linear.ArrayRealVector var46 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var48 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var50 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var48, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var51 = new org.apache.commons.math.linear.ArrayRealVector(var46, var48);
    double[] var52 = var44.operate(var48);
    org.apache.commons.math.linear.ArrayRealVector var53 = new org.apache.commons.math.linear.ArrayRealVector(var48);
    org.apache.commons.math.optimization.linear.LinearConstraint var55 = new org.apache.commons.math.optimization.linear.LinearConstraint(var33, 50.0d, var40, var48, 2.302585092994046d);
    double var56 = var25.getValue(var48);
    org.apache.commons.math.linear.RealVector var57 = var25.getCoefficients();
    org.apache.commons.math.linear.RealVector var58 = var8.operate(var57);
    double[] var60 = var8.getRow(0);
    double[] var63 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var64 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var63);
    org.apache.commons.math.linear.ArrayRealVector var66 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var68 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var70 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var68, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var71 = new org.apache.commons.math.linear.ArrayRealVector(var66, var68);
    double[] var72 = var64.operate(var68);
    org.apache.commons.math.linear.ArrayRealVector var73 = new org.apache.commons.math.linear.ArrayRealVector(var68);
    org.apache.commons.math.optimization.linear.Relationship var75 = null;
    double[] var78 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var79 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var78);
    org.apache.commons.math.linear.ArrayRealVector var81 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var83 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var85 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var83, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var86 = new org.apache.commons.math.linear.ArrayRealVector(var81, var83);
    double[] var87 = var79.operate(var83);
    org.apache.commons.math.linear.ArrayRealVector var88 = new org.apache.commons.math.linear.ArrayRealVector(var83);
    org.apache.commons.math.optimization.linear.LinearConstraint var90 = new org.apache.commons.math.optimization.linear.LinearConstraint(var68, 50.0d, var75, var83, 2.302585092994046d);
    double var91 = org.apache.commons.math.util.MathUtils.distance(var60, var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 0.0d);

  }

  public void test279() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test279"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var1.mapRint();
    org.apache.commons.math.linear.RealVector var8 = var1.mapExpm1();
    org.apache.commons.math.linear.RealVector var9 = var1.mapExpm1ToSelf();
    java.lang.Double[] var11 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var12 = new org.apache.commons.math.linear.ArrayRealVector(var11);
    org.apache.commons.math.linear.RealVector var13 = var12.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var14 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var12);
    double[] var16 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var18 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var16, 1.0d);
    double[] var21 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var22 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var21);
    org.apache.commons.math.linear.ArrayRealVector var24 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var26 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var28 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var26, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var29 = new org.apache.commons.math.linear.ArrayRealVector(var24, var26);
    double[] var30 = var22.operate(var26);
    org.apache.commons.math.linear.ArrayRealVector var31 = new org.apache.commons.math.linear.ArrayRealVector(var26);
    org.apache.commons.math.optimization.linear.Relationship var33 = null;
    double[] var36 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var37 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var36);
    org.apache.commons.math.linear.ArrayRealVector var39 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var41 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var43 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var41, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var44 = new org.apache.commons.math.linear.ArrayRealVector(var39, var41);
    double[] var45 = var37.operate(var41);
    org.apache.commons.math.linear.ArrayRealVector var46 = new org.apache.commons.math.linear.ArrayRealVector(var41);
    org.apache.commons.math.optimization.linear.LinearConstraint var48 = new org.apache.commons.math.optimization.linear.LinearConstraint(var26, 50.0d, var33, var41, 2.302585092994046d);
    double var49 = var18.getValue(var41);
    double var50 = var12.getL1Distance(var41);
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var52 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var41, (-0.7d));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var53 = var1.getL1Distance(var41);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2.9066992099956157d);

  }

  public void test280() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test280"); }


    org.apache.commons.math.MathException var0 = new org.apache.commons.math.MathException();
    double[] var5 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var7 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var5, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var9 = new org.apache.commons.math.optimization.RealPointValuePair(var5, 0.0d);
    double[][] var10 = new double[][] { var5};
    org.apache.commons.math.linear.Array2DRowRealMatrix var12 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var10, true);
    org.apache.commons.math.linear.Array2DRowRealMatrix var13 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var10);
    java.lang.IllegalArgumentException var14 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", (java.lang.Object[])var10);
    org.apache.commons.math.linear.Array2DRowRealMatrix var15 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var10);
    org.apache.commons.math.optimization.OptimizationException var16 = new org.apache.commons.math.optimization.OptimizationException("", (java.lang.Object[])var10);
    org.apache.commons.math.MathRuntimeException var17 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var0, "", (java.lang.Object[])var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test281() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test281"); }


    float var1 = org.apache.commons.math.util.MathUtils.sign(0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.0f);

  }

  public void test282() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test282"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var2 = org.apache.commons.math.util.MathUtils.pow(1073741824, (-336392981));
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }

  }

  public void test283() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test283"); }


    java.lang.Throwable var0 = null;
    org.apache.commons.math.optimization.OptimizationException var1 = new org.apache.commons.math.optimization.OptimizationException(var0);
    java.io.IOException var2 = org.apache.commons.math.MathRuntimeException.createIOException((java.lang.Throwable)var1);
    java.lang.Throwable[] var3 = var2.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test284() {}
//   public void test284() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test284"); }
// 
// 
//     double[] var2 = new double[] { 0.0d, (-1.0d)};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var3 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var2);
//     org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var7 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var9 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var7, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(var5, var7);
//     double[] var11 = var3.operate(var7);
//     org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var15 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var17 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var15, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(var13, var15);
//     org.apache.commons.math.linear.ArrayRealVector var19 = new org.apache.commons.math.linear.ArrayRealVector(var11, var15);
//     org.apache.commons.math.linear.ArrayRealVector var21 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var23 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var25 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var23, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var26 = new org.apache.commons.math.linear.ArrayRealVector(var21, var23);
//     org.apache.commons.math.optimization.RealPointValuePair var29 = new org.apache.commons.math.optimization.RealPointValuePair(var23, 1.0d, true);
//     org.apache.commons.math.linear.ArrayRealVector var31 = new org.apache.commons.math.linear.ArrayRealVector(var23, true);
//     int var32 = var31.getDimension();
//     java.lang.Double[] var34 = new java.lang.Double[] { 49.73451754256331d};
//     org.apache.commons.math.linear.ArrayRealVector var35 = new org.apache.commons.math.linear.ArrayRealVector(var34);
//     org.apache.commons.math.linear.RealVector var36 = var35.mapLogToSelf();
//     org.apache.commons.math.linear.ArrayRealVector var37 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var35);
//     org.apache.commons.math.linear.RealVector var38 = var31.add((org.apache.commons.math.linear.RealVector)var37);
//     java.lang.Double[] var40 = new java.lang.Double[] { 49.73451754256331d};
//     org.apache.commons.math.linear.ArrayRealVector var41 = new org.apache.commons.math.linear.ArrayRealVector(var40);
//     org.apache.commons.math.linear.ArrayRealVector var42 = var37.projection(var41);
//     org.apache.commons.math.linear.RealVector var43 = var42.mapSinh();
//     org.apache.commons.math.linear.RealVector var44 = var42.mapLog10ToSelf();
//     org.apache.commons.math.linear.RealVector var45 = var19.append(var44);
//     org.apache.commons.math.linear.ArrayRealVector var46 = null;
//     double var47 = var19.dotProduct(var46);
// 
//   }

  public void test285() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test285"); }


    java.lang.Object[] var2 = null;
    java.text.ParseException var3 = org.apache.commons.math.MathRuntimeException.createParseException(10, "}", var2);
    java.io.IOException var4 = org.apache.commons.math.MathRuntimeException.createIOException((java.lang.Throwable)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test286() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test286"); }


    org.apache.commons.math.linear.RealVectorFormat var3 = new org.apache.commons.math.linear.RealVectorFormat("", "}", "{1.54}");

  }

  public void test287() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test287"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    double[] var23 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var25 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var23, 1.0d);
    double[] var28 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var29 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var28);
    org.apache.commons.math.linear.ArrayRealVector var31 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var33 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var35 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var33, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var36 = new org.apache.commons.math.linear.ArrayRealVector(var31, var33);
    double[] var37 = var29.operate(var33);
    org.apache.commons.math.linear.ArrayRealVector var38 = new org.apache.commons.math.linear.ArrayRealVector(var33);
    org.apache.commons.math.optimization.linear.Relationship var40 = null;
    double[] var43 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var44 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var43);
    org.apache.commons.math.linear.ArrayRealVector var46 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var48 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var50 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var48, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var51 = new org.apache.commons.math.linear.ArrayRealVector(var46, var48);
    double[] var52 = var44.operate(var48);
    org.apache.commons.math.linear.ArrayRealVector var53 = new org.apache.commons.math.linear.ArrayRealVector(var48);
    org.apache.commons.math.optimization.linear.LinearConstraint var55 = new org.apache.commons.math.optimization.linear.LinearConstraint(var33, 50.0d, var40, var48, 2.302585092994046d);
    double var56 = var25.getValue(var48);
    org.apache.commons.math.linear.RealVector var57 = var25.getCoefficients();
    org.apache.commons.math.linear.RealVector var58 = var8.operate(var57);
    double[] var60 = var8.getRow(0);
    double[] var62 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var64 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var62, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var66 = new org.apache.commons.math.optimization.RealPointValuePair(var62, 0.0d);
    double[][] var67 = new double[][] { var62};
    org.apache.commons.math.linear.Array2DRowRealMatrix var69 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var67, true);
    org.apache.commons.math.linear.RealMatrix var70 = var69.copy();
    boolean var71 = var69.isSingular();
    org.apache.commons.math.linear.Array2DRowRealMatrix var72 = var8.subtract(var69);
    double var73 = var8.getDeterminant();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double[] var75 = var8.getColumn(1079574528);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1.0d);

  }

  public void test288() {}
//   public void test288() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test288"); }
// 
// 
//     org.apache.commons.math.linear.RealVector var0 = null;
//     java.lang.String var1 = org.apache.commons.math.linear.RealVectorFormat.formatRealVector(var0);
// 
//   }

  public void test289() {}
//   public void test289() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test289"); }
// 
// 
//     java.lang.Throwable var0 = null;
//     java.io.IOException var1 = org.apache.commons.math.MathRuntimeException.createIOException(var0);
// 
//   }

  public void test290() {}
//   public void test290() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test290"); }
// 
// 
//     double[] var1 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
//     double[][] var6 = new double[][] { var1};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
//     double var9 = var8.getFrobeniusNorm();
//     double[] var12 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
//     double[][] var17 = new double[][] { var12};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
//     double var20 = var19.getFrobeniusNorm();
//     var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
//     org.apache.commons.math.linear.RealMatrix var22 = var8.transpose();
//     double var23 = var8.getNorm();
//     double var24 = var8.getDeterminant();
//     org.apache.commons.math.linear.RealMatrixChangingVisitor var25 = null;
//     double var26 = var8.walkInOptimizedOrder(var25);
// 
//   }

  public void test291() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test291"); }


    java.lang.Object[] var1 = null;
    org.apache.commons.math.ConvergenceException var2 = new org.apache.commons.math.ConvergenceException("", var1);
    org.apache.commons.math.MathRuntimeException var3 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var2);
    java.lang.Throwable[] var4 = var2.getSuppressed();
    double[] var7 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var9 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var7, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var11 = new org.apache.commons.math.optimization.RealPointValuePair(var7, 0.0d);
    double[][] var12 = new double[][] { var7};
    org.apache.commons.math.linear.Array2DRowRealMatrix var14 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var12, true);
    org.apache.commons.math.linear.Array2DRowRealMatrix var15 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.ConvergenceException var16 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var2, "Array2DRowRealMatrix{}", (java.lang.Object[])var12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test292() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test292"); }


    double var1 = org.apache.commons.math.util.MathUtils.sign((-353.7393755555636d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1.0d));

  }

  public void test293() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test293"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var8 = var1.mapMultiply(1.0d);
    org.apache.commons.math.optimization.linear.Relationship var9 = null;
    org.apache.commons.math.optimization.linear.LinearConstraint var11 = new org.apache.commons.math.optimization.linear.LinearConstraint(var8, var9, (-1.0d));
    org.apache.commons.math.ConvergenceException var12 = new org.apache.commons.math.ConvergenceException();
    java.lang.Object[] var15 = new java.lang.Object[] { 0};
    org.apache.commons.math.ConvergenceException var16 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var12, "", var15);
    boolean var17 = var11.equals((java.lang.Object)"");
    java.lang.Object[] var22 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var23 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var22);
    java.lang.Object[] var26 = new java.lang.Object[] { 10L};
    org.apache.commons.math.ConvergenceException var27 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var23, "", var26);
    java.text.ParseException var28 = org.apache.commons.math.MathRuntimeException.createParseException((-1), "org.apache.commons.math.ConvergenceException: Convergence failed", var26);
    org.apache.commons.math.optimization.OptimizationException var29 = new org.apache.commons.math.optimization.OptimizationException((java.lang.Throwable)var28);
    org.apache.commons.math.MathRuntimeException var30 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var28);
    boolean var31 = var11.equals((java.lang.Object)var30);
    double[] var34 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var36 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var34, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var38 = new org.apache.commons.math.optimization.RealPointValuePair(var34, 0.0d);
    double[][] var39 = new double[][] { var34};
    org.apache.commons.math.linear.Array2DRowRealMatrix var41 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var39, true);
    org.apache.commons.math.linear.Array2DRowRealMatrix var42 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var39);
    java.lang.IllegalArgumentException var43 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", (java.lang.Object[])var39);
    var30.addSuppressed((java.lang.Throwable)var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test294() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test294"); }


    double[] var2 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var3 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var2);
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var7 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var9 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var7, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(var5, var7);
    org.apache.commons.math.linear.RealVector var11 = var10.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var12 = var10.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var13 = var10.mapRintToSelf();
    org.apache.commons.math.linear.RealVector var15 = var10.mapSubtractToSelf(0.5430806348152439d);
    org.apache.commons.math.linear.RealVector var16 = var3.operate(var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double[] var18 = var3.getColumn(1073741824);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test295() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test295"); }


    double var2 = org.apache.commons.math.util.MathUtils.log(1.3246090892520057d, 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == Double.NEGATIVE_INFINITY);

  }

  public void test296() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test296"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    java.lang.String var8 = var6.toString();
    org.apache.commons.math.linear.RealVector var10 = var6.mapAddToSelf(10.0d);
    org.apache.commons.math.linear.RealVector var11 = var6.mapLog10();
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(var6, false);
    org.apache.commons.math.linear.RealVector var14 = var13.mapLog1p();
    org.apache.commons.math.linear.RealVector var15 = var13.mapRintToSelf();
    org.apache.commons.math.linear.RealVector var16 = var13.mapInv();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "{1.54}"+ "'", var8.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test297() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test297"); }


    long var2 = org.apache.commons.math.util.MathUtils.addAndCheck(9999L, 100L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 10099L);

  }

  public void test298() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test298"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    java.lang.String var8 = var6.toString();
    org.apache.commons.math.linear.RealVector var10 = var6.mapAddToSelf(10.0d);
    org.apache.commons.math.linear.RealVector var11 = var6.mapLog10();
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(var6, false);
    org.apache.commons.math.linear.ArrayRealVector var15 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var17 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var19 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var17, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var20 = new org.apache.commons.math.linear.ArrayRealVector(var15, var17);
    org.apache.commons.math.linear.ArrayRealVector var22 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var23 = var22.mapCosToSelf();
    double var24 = var15.dotProduct(var23);
    org.apache.commons.math.linear.ArrayRealVector var25 = var13.append(var15);
    org.apache.commons.math.linear.RealVector var26 = var15.mapSqrt();
    org.apache.commons.math.linear.RealVector var27 = var15.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var28 = var15.mapSinToSelf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "{1.54}"+ "'", var8.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test299() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test299"); }


    int var3 = org.apache.commons.math.util.MathUtils.compareTo(1.4901262290311448E-229d, (-5.967152838277089d), 93.06950707243628d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test300() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test300"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    org.apache.commons.math.linear.RealMatrix var9 = var8.copy();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealMatrix var11 = var8.getRowMatrix(1010);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test301() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test301"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAsin();
    org.apache.commons.math.linear.RealVector var4 = var1.mapCbrt();
    org.apache.commons.math.optimization.linear.Relationship var6 = null;
    org.apache.commons.math.linear.ArrayRealVector var8 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.optimization.linear.LinearConstraint var10 = new org.apache.commons.math.optimization.linear.LinearConstraint(var4, 363.7393755555636d, var6, (org.apache.commons.math.linear.RealVector)var8, 10.0d);
    org.apache.commons.math.linear.RealVector var11 = var8.copy();
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var14 = var13.getData();
    org.apache.commons.math.linear.ArrayRealVector var15 = new org.apache.commons.math.linear.ArrayRealVector(var14);
    org.apache.commons.math.linear.RealVector var16 = var15.mapLog1pToSelf();
    double var17 = var8.getDistance(var15);
    org.apache.commons.math.linear.RealVector var18 = var8.mapFloorToSelf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test302() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test302"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    org.apache.commons.math.linear.RealMatrix var22 = var8.transpose();
    double var23 = var8.getNorm();
    double var24 = var8.getDeterminant();
    java.lang.Double[] var26 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var27 = new org.apache.commons.math.linear.ArrayRealVector(var26);
    org.apache.commons.math.linear.RealVector var28 = var27.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var29 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var27);
    double[] var31 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var33 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var31, 1.0d);
    double[] var36 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var37 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var36);
    org.apache.commons.math.linear.ArrayRealVector var39 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var41 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var43 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var41, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var44 = new org.apache.commons.math.linear.ArrayRealVector(var39, var41);
    double[] var45 = var37.operate(var41);
    org.apache.commons.math.linear.ArrayRealVector var46 = new org.apache.commons.math.linear.ArrayRealVector(var41);
    org.apache.commons.math.optimization.linear.Relationship var48 = null;
    double[] var51 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var52 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var51);
    org.apache.commons.math.linear.ArrayRealVector var54 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var56 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var58 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var56, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var59 = new org.apache.commons.math.linear.ArrayRealVector(var54, var56);
    double[] var60 = var52.operate(var56);
    org.apache.commons.math.linear.ArrayRealVector var61 = new org.apache.commons.math.linear.ArrayRealVector(var56);
    org.apache.commons.math.optimization.linear.LinearConstraint var63 = new org.apache.commons.math.optimization.linear.LinearConstraint(var41, 50.0d, var48, var56, 2.302585092994046d);
    double var64 = var33.getValue(var56);
    double var65 = var27.getL1Distance(var56);
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var67 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var56, (-0.7d));
    double[] var68 = var8.preMultiply(var56);
    org.apache.commons.math.linear.ArrayRealVector var71 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var73 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var75 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var73, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var76 = new org.apache.commons.math.linear.ArrayRealVector(var71, var73);
    org.apache.commons.math.optimization.RealPointValuePair var79 = new org.apache.commons.math.optimization.RealPointValuePair(var73, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var81 = new org.apache.commons.math.linear.ArrayRealVector(var73, true);
    int var82 = var81.getDimension();
    java.lang.Double[] var84 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var85 = new org.apache.commons.math.linear.ArrayRealVector(var84);
    org.apache.commons.math.linear.RealVector var86 = var85.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var87 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var85);
    org.apache.commons.math.linear.RealVector var88 = var81.add((org.apache.commons.math.linear.RealVector)var87);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var8.setColumnVector((-336392980), var88);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2.9066992099956157d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test303() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test303"); }


    boolean var3 = org.apache.commons.math.util.MathUtils.equals((-47.69741490700596d), 1.0d, (-336392980));

  }

  public void test304() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test304"); }


    org.apache.commons.math.ConvergenceException var4 = new org.apache.commons.math.ConvergenceException();
    java.lang.Object[] var7 = new java.lang.Object[] { 0};
    org.apache.commons.math.ConvergenceException var8 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var4, "", var7);
    java.lang.Object[] var12 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var13 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var12);
    org.apache.commons.math.MathRuntimeException var14 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var4, "hi!", var12);
    java.lang.Object[] var15 = var14.getArguments();
    java.lang.Object[] var19 = new java.lang.Object[] { (short)10};
    org.apache.commons.math.MathRuntimeException var20 = new org.apache.commons.math.MathRuntimeException("hi!", var19);
    org.apache.commons.math.MathRuntimeException var21 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var14, "", var19);
    org.apache.commons.math.MaxIterationsExceededException var22 = new org.apache.commons.math.MaxIterationsExceededException(100, "{1}", var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.MaxIterationsExceededException var23 = new org.apache.commons.math.MaxIterationsExceededException((-336392980), "{}", var19);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test305() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test305"); }


    org.apache.commons.math.ConvergenceException var1 = new org.apache.commons.math.ConvergenceException();
    java.lang.Object[] var4 = new java.lang.Object[] { 0};
    org.apache.commons.math.ConvergenceException var5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var1, "", var4);
    java.lang.Object[] var9 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var10 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var9);
    org.apache.commons.math.MathRuntimeException var11 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var1, "hi!", var9);
    java.lang.Object[] var12 = var1.getArguments();
    org.apache.commons.math.MathException var13 = new org.apache.commons.math.MathException("Convergence failed", var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test306() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test306"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAsin();
    org.apache.commons.math.linear.RealVector var4 = var1.mapCbrt();
    org.apache.commons.math.optimization.linear.Relationship var6 = null;
    org.apache.commons.math.linear.ArrayRealVector var8 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.optimization.linear.LinearConstraint var10 = new org.apache.commons.math.optimization.linear.LinearConstraint(var4, 363.7393755555636d, var6, (org.apache.commons.math.linear.RealVector)var8, 10.0d);
    org.apache.commons.math.linear.RealVector var11 = var8.mapExp();
    org.apache.commons.math.linear.RealVector var12 = var8.mapCeilToSelf();
    org.apache.commons.math.linear.RealVector var14 = var8.append(50.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test307() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test307"); }


    java.lang.Object[] var4 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var5 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var4);
    java.lang.Object[] var8 = new java.lang.Object[] { 10L};
    org.apache.commons.math.ConvergenceException var9 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var5, "", var8);
    java.text.ParseException var10 = org.apache.commons.math.MathRuntimeException.createParseException((-1), "org.apache.commons.math.ConvergenceException: Convergence failed", var8);
    org.apache.commons.math.MathRuntimeException var11 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test308() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test308"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    java.lang.String var8 = var6.toString();
    org.apache.commons.math.linear.RealVector var9 = var6.mapRint();
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var13 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var15 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var13, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var16 = new org.apache.commons.math.linear.ArrayRealVector(var11, var13);
    org.apache.commons.math.linear.RealVector var17 = var16.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var18 = var16.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var19 = var16.mapUlp();
    org.apache.commons.math.linear.RealVector var20 = var16.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var21 = var16.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var22 = var6.ebeDivide(var21);
    org.apache.commons.math.linear.ArrayRealVector var24 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var25 = var24.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var26 = var24.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var28 = new org.apache.commons.math.linear.ArrayRealVector(var24, false);
    org.apache.commons.math.linear.RealVector var29 = var24.mapTan();
    org.apache.commons.math.linear.RealVector var30 = var24.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var32 = new org.apache.commons.math.linear.ArrayRealVector(var24, false);
    org.apache.commons.math.linear.RealVector var34 = var32.mapPowToSelf(49.73451754256331d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealVector var35 = var6.projection((org.apache.commons.math.linear.RealVector)var32);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "{1.54}"+ "'", var8.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test309() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test309"); }


    long var1 = org.apache.commons.math.util.MathUtils.sign(100L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1L);

  }

  public void test310() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test310"); }


    int var1 = org.apache.commons.math.util.MathUtils.indicator(1010);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);

  }

  public void test311() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test311"); }


    double var1 = org.apache.commons.math.util.MathUtils.sign((-1.2074402543612646d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1.0d));

  }

  public void test312() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test312"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.optimization.RealPointValuePair var9 = new org.apache.commons.math.optimization.RealPointValuePair(var3, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(var3, true);
    int var12 = var11.getDimension();
    java.lang.Double[] var14 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var15 = new org.apache.commons.math.linear.ArrayRealVector(var14);
    org.apache.commons.math.linear.RealVector var16 = var15.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var15);
    org.apache.commons.math.linear.RealVector var18 = var11.add((org.apache.commons.math.linear.RealVector)var17);
    java.lang.Double[] var20 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var21 = new org.apache.commons.math.linear.ArrayRealVector(var20);
    org.apache.commons.math.linear.ArrayRealVector var22 = var17.projection(var21);
    org.apache.commons.math.linear.RealVector var23 = var17.mapTanh();
    org.apache.commons.math.linear.ArrayRealVector var26 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var27 = var26.getData();
    org.apache.commons.math.linear.RealVector var28 = var26.mapSignum();
    double[] var29 = var26.toArray();
    org.apache.commons.math.linear.ArrayRealVector var31 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var32 = var31.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var33 = var31.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var35 = new org.apache.commons.math.linear.ArrayRealVector(var31, false);
    org.apache.commons.math.linear.RealVector var36 = var35.mapLog1pToSelf();
    org.apache.commons.math.linear.RealVector var37 = var35.mapTan();
    org.apache.commons.math.linear.ArrayRealVector var39 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var41 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var43 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var41, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var44 = new org.apache.commons.math.linear.ArrayRealVector(var39, var41);
    org.apache.commons.math.linear.RealVector var45 = var44.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var46 = var44.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var47 = var44.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var50 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var51 = var50.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var52 = var50.mapLog1p();
    var44.setSubVector(0, (org.apache.commons.math.linear.RealVector)var50);
    double[] var54 = var50.getData();
    org.apache.commons.math.linear.ArrayRealVector var56 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var58 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var60 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var58, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var61 = new org.apache.commons.math.linear.ArrayRealVector(var56, var58);
    org.apache.commons.math.optimization.RealPointValuePair var64 = new org.apache.commons.math.optimization.RealPointValuePair(var58, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var65 = new org.apache.commons.math.linear.ArrayRealVector(var54, var58);
    org.apache.commons.math.linear.ArrayRealVector var66 = new org.apache.commons.math.linear.ArrayRealVector(var54);
    double[] var67 = var66.toArray();
    org.apache.commons.math.linear.RealVector var68 = var35.add(var67);
    org.apache.commons.math.linear.ArrayRealVector var69 = new org.apache.commons.math.linear.ArrayRealVector(var26, var67);
    var17.setSubVector(0, var67);
    org.apache.commons.math.linear.RealVector var71 = var17.mapAtanToSelf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test313() {}
//   public void test313() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test313"); }
// 
// 
//     org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
//     org.apache.commons.math.linear.RealVector var3 = var1.mapAsin();
//     org.apache.commons.math.linear.RealVector var4 = var1.mapCbrt();
//     org.apache.commons.math.linear.RealVector var5 = var1.mapUlp();
//     org.apache.commons.math.linear.ArrayRealVector var6 = null;
//     org.apache.commons.math.linear.ArrayRealVector var7 = new org.apache.commons.math.linear.ArrayRealVector(var1, var6);
// 
//   }

  public void test314() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test314"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    org.apache.commons.math.linear.RealMatrix var22 = var8.transpose();
    double var23 = var8.getNorm();
    double var24 = var8.getDeterminant();
    java.lang.Double[] var26 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var27 = new org.apache.commons.math.linear.ArrayRealVector(var26);
    org.apache.commons.math.linear.RealVector var28 = var27.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var29 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var27);
    double[] var31 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var33 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var31, 1.0d);
    double[] var36 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var37 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var36);
    org.apache.commons.math.linear.ArrayRealVector var39 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var41 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var43 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var41, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var44 = new org.apache.commons.math.linear.ArrayRealVector(var39, var41);
    double[] var45 = var37.operate(var41);
    org.apache.commons.math.linear.ArrayRealVector var46 = new org.apache.commons.math.linear.ArrayRealVector(var41);
    org.apache.commons.math.optimization.linear.Relationship var48 = null;
    double[] var51 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var52 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var51);
    org.apache.commons.math.linear.ArrayRealVector var54 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var56 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var58 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var56, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var59 = new org.apache.commons.math.linear.ArrayRealVector(var54, var56);
    double[] var60 = var52.operate(var56);
    org.apache.commons.math.linear.ArrayRealVector var61 = new org.apache.commons.math.linear.ArrayRealVector(var56);
    org.apache.commons.math.optimization.linear.LinearConstraint var63 = new org.apache.commons.math.optimization.linear.LinearConstraint(var41, 50.0d, var48, var56, 2.302585092994046d);
    double var64 = var33.getValue(var56);
    double var65 = var27.getL1Distance(var56);
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var67 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var56, (-0.7d));
    double[] var68 = var8.preMultiply(var56);
    double var69 = var8.getFrobeniusNorm();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2.9066992099956157d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1.0d);

  }

  public void test315() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test315"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    org.apache.commons.math.linear.RealMatrixPreservingVisitor var10 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var15 = var8.walkInColumnOrder(var10, (-336392981), 1, 0, (-336392981));
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);

  }

  public void test316() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test316"); }


    org.apache.commons.math.linear.Array2DRowRealMatrix var0 = new org.apache.commons.math.linear.Array2DRowRealMatrix();
    double[] var2 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var4 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var2, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var6 = new org.apache.commons.math.optimization.RealPointValuePair(var2, 0.0d);
    double[][] var7 = new double[][] { var2};
    org.apache.commons.math.linear.Array2DRowRealMatrix var9 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var7, true);
    double var10 = var9.getFrobeniusNorm();
    double[] var13 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var15 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var13, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var17 = new org.apache.commons.math.optimization.RealPointValuePair(var13, 0.0d);
    double[][] var18 = new double[][] { var13};
    org.apache.commons.math.linear.Array2DRowRealMatrix var20 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var18, true);
    double var21 = var20.getFrobeniusNorm();
    var9.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var20);
    double[] var24 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var26 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var24, 1.0d);
    double[] var29 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var30 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var29);
    org.apache.commons.math.linear.ArrayRealVector var32 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var34 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var36 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var34, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var37 = new org.apache.commons.math.linear.ArrayRealVector(var32, var34);
    double[] var38 = var30.operate(var34);
    org.apache.commons.math.linear.ArrayRealVector var39 = new org.apache.commons.math.linear.ArrayRealVector(var34);
    org.apache.commons.math.optimization.linear.Relationship var41 = null;
    double[] var44 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var45 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var44);
    org.apache.commons.math.linear.ArrayRealVector var47 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var49 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var51 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var49, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var52 = new org.apache.commons.math.linear.ArrayRealVector(var47, var49);
    double[] var53 = var45.operate(var49);
    org.apache.commons.math.linear.ArrayRealVector var54 = new org.apache.commons.math.linear.ArrayRealVector(var49);
    org.apache.commons.math.optimization.linear.LinearConstraint var56 = new org.apache.commons.math.optimization.linear.LinearConstraint(var34, 50.0d, var41, var49, 2.302585092994046d);
    double var57 = var26.getValue(var49);
    org.apache.commons.math.linear.RealVector var58 = var26.getCoefficients();
    org.apache.commons.math.linear.RealVector var59 = var9.operate(var58);
    double[] var61 = var9.getRow(0);
    double[] var63 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var65 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var63, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var67 = new org.apache.commons.math.optimization.RealPointValuePair(var63, 0.0d);
    double[][] var68 = new double[][] { var63};
    org.apache.commons.math.linear.Array2DRowRealMatrix var70 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var68, true);
    org.apache.commons.math.linear.RealMatrix var71 = var70.copy();
    boolean var72 = var70.isSingular();
    org.apache.commons.math.linear.Array2DRowRealMatrix var73 = var9.subtract(var70);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.Array2DRowRealMatrix var74 = var0.subtract(var73);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test317() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test317"); }


    java.lang.Double[] var1 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var2 = new org.apache.commons.math.linear.ArrayRealVector(var1);
    org.apache.commons.math.linear.ArrayRealVector var3 = new org.apache.commons.math.linear.ArrayRealVector(var1);
    org.apache.commons.math.linear.ArrayRealVector var4 = new org.apache.commons.math.linear.ArrayRealVector(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.ArrayRealVector var7 = new org.apache.commons.math.linear.ArrayRealVector(var1, 101, 100);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test318() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test318"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapLog10();
    org.apache.commons.math.linear.RealVector var3 = var1.mapExpm1ToSelf();
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var6 = var5.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var7 = var5.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var9 = new org.apache.commons.math.linear.ArrayRealVector(var5, false);
    org.apache.commons.math.linear.RealVector var10 = var1.subtract((org.apache.commons.math.linear.RealVector)var9);
    org.apache.commons.math.linear.RealVector var11 = var9.mapTanhToSelf();
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var15 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var17 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var15, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(var13, var15);
    org.apache.commons.math.linear.RealVector var19 = var18.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var20 = var18.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var21 = var18.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var24 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var25 = var24.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var26 = var24.mapLog1p();
    var18.setSubVector(0, (org.apache.commons.math.linear.RealVector)var24);
    double[] var28 = var24.getData();
    org.apache.commons.math.linear.ArrayRealVector var30 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var32 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var34 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var32, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var35 = new org.apache.commons.math.linear.ArrayRealVector(var30, var32);
    org.apache.commons.math.optimization.RealPointValuePair var38 = new org.apache.commons.math.optimization.RealPointValuePair(var32, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var39 = new org.apache.commons.math.linear.ArrayRealVector(var28, var32);
    org.apache.commons.math.linear.ArrayRealVector var40 = new org.apache.commons.math.linear.ArrayRealVector(var28);
    double[] var42 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var44 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var42, 1.0d);
    double[] var47 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var48 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var47);
    org.apache.commons.math.linear.ArrayRealVector var50 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var52 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var54 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var52, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var55 = new org.apache.commons.math.linear.ArrayRealVector(var50, var52);
    double[] var56 = var48.operate(var52);
    double var57 = org.apache.commons.math.util.MathUtils.distance1(var42, var52);
    double var58 = org.apache.commons.math.util.MathUtils.distanceInf(var28, var52);
    double var59 = var9.getL1Distance(var28);
    org.apache.commons.math.linear.RealVector var61 = var9.mapSubtractToSelf(1.8219365641849925d);
    org.apache.commons.math.linear.ArrayRealVector var63 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var64 = var63.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var65 = var63.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var67 = new org.apache.commons.math.linear.ArrayRealVector(var63, false);
    org.apache.commons.math.linear.RealVector var68 = var67.mapLog1pToSelf();
    org.apache.commons.math.linear.ArrayRealVector var70 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double var71 = var67.dotProduct((org.apache.commons.math.linear.RealVector)var70);
    org.apache.commons.math.linear.ArrayRealVector var73 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var74 = var73.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var75 = var73.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var77 = new org.apache.commons.math.linear.ArrayRealVector(var73, false);
    org.apache.commons.math.linear.RealVector var78 = var73.mapSinhToSelf();
    double var79 = var70.getLInfDistance((org.apache.commons.math.linear.RealVector)var73);
    org.apache.commons.math.linear.RealVector var80 = var9.projection((org.apache.commons.math.linear.RealVector)var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test319() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test319"); }


    org.apache.commons.math.ConvergenceException var2 = new org.apache.commons.math.ConvergenceException();
    java.lang.Object[] var5 = new java.lang.Object[] { 0};
    org.apache.commons.math.ConvergenceException var6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var2, "", var5);
    java.lang.Object[] var10 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var11 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var10);
    org.apache.commons.math.MathRuntimeException var12 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var2, "hi!", var10);
    java.lang.Object[] var13 = var2.getArguments();
    java.lang.Object[] var14 = var2.getArguments();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.MaxIterationsExceededException var15 = new org.apache.commons.math.MaxIterationsExceededException(101, "{0.59}", var14);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test320() {}
//   public void test320() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test320"); }
// 
// 
//     double var2 = org.apache.commons.math.util.MathUtils.log(1.543080634815244d, Double.NEGATIVE_INFINITY);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == Double.NaN);
// 
//   }

  public void test321() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test321"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    org.apache.commons.math.linear.RealMatrix var22 = var19.inverse();
    int var23 = var19.getRowDimension();
    double[][] var24 = var19.getData();
    org.apache.commons.math.linear.Array2DRowRealMatrix var26 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var24, false);
    double[][] var27 = var26.getDataRef();
    org.apache.commons.math.linear.RealMatrix var28 = var26.transpose();
    org.apache.commons.math.linear.Array2DRowRealMatrix var32 = new org.apache.commons.math.linear.Array2DRowRealMatrix(10, 100);
    double var33 = var32.getNorm();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var26.setColumnMatrix(10, (org.apache.commons.math.linear.RealMatrix)var32);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.0d);

  }

  public void test322() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test322"); }


    java.lang.Double[] var1 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var2 = new org.apache.commons.math.linear.ArrayRealVector(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(var1, 0, 1073741824);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test323() {}
//   public void test323() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test323"); }
// 
// 
//     float var2 = org.apache.commons.math.util.MathUtils.round(110.0f, (-336392980));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == Float.NaN);
// 
//   }

  public void test324() {}
//   public void test324() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test324"); }
// 
// 
//     org.apache.commons.math.linear.Array2DRowRealMatrix var0 = new org.apache.commons.math.linear.Array2DRowRealMatrix();
//     int var1 = var0.getRowDimension();
//     double var4 = var0.getEntry((-100), (-336392980));
// 
//   }

  public void test325() {}
//   public void test325() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test325"); }
// 
// 
//     double[] var2 = new double[] { 0.0d, (-1.0d)};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var3 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var2);
//     org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var7 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var9 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var7, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(var5, var7);
//     double[] var11 = var3.operate(var7);
//     double var12 = var3.getFrobeniusNorm();
//     org.apache.commons.math.linear.RealMatrixPreservingVisitor var13 = null;
//     double var14 = var3.walkInColumnOrder(var13);
// 
//   }

  public void test326() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test326"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    double var4 = var3.getConstantTerm();
    org.apache.commons.math.linear.RealVector var5 = var3.getCoefficients();
    double var6 = var3.getConstantTerm();
    org.apache.commons.math.linear.ArrayRealVector var8 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var9 = var8.mapLog10();
    org.apache.commons.math.linear.RealVector var10 = var8.mapExpm1ToSelf();
    org.apache.commons.math.linear.ArrayRealVector var12 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var13 = var12.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var14 = var12.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var16 = new org.apache.commons.math.linear.ArrayRealVector(var12, false);
    org.apache.commons.math.linear.RealVector var17 = var8.subtract((org.apache.commons.math.linear.RealVector)var16);
    double[] var18 = var8.getDataRef();
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var20 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var18, 1.3440585709080678E43d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var21 = var3.getValue(var18);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test327() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test327"); }


    double var1 = org.apache.commons.math.util.MathUtils.sign(5.0706024009129176E30d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1.0d);

  }

  public void test328() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test328"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    double[] var23 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var25 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var23, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var27 = new org.apache.commons.math.optimization.RealPointValuePair(var23, 0.0d);
    org.apache.commons.math.optimization.RealPointValuePair var30 = new org.apache.commons.math.optimization.RealPointValuePair(var23, 50.0d, true);
    double[] var31 = var19.operate(var23);
    boolean var32 = var19.isSingular();
    org.apache.commons.math.linear.ArrayRealVector var34 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var36 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var38 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var36, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var39 = new org.apache.commons.math.linear.ArrayRealVector(var34, var36);
    org.apache.commons.math.linear.RealVector var40 = var39.mapCoshToSelf();
    java.lang.String var41 = var39.toString();
    org.apache.commons.math.linear.RealVector var43 = var39.mapAddToSelf(10.0d);
    org.apache.commons.math.linear.RealVector var44 = var39.mapLog10();
    org.apache.commons.math.linear.ArrayRealVector var46 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var48 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var50 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var48, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var51 = new org.apache.commons.math.linear.ArrayRealVector(var46, var48);
    org.apache.commons.math.optimization.RealPointValuePair var54 = new org.apache.commons.math.optimization.RealPointValuePair(var48, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var56 = new org.apache.commons.math.linear.ArrayRealVector(var48, true);
    int var57 = var56.getDimension();
    java.lang.Double[] var59 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var60 = new org.apache.commons.math.linear.ArrayRealVector(var59);
    org.apache.commons.math.linear.RealVector var61 = var60.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var62 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var60);
    org.apache.commons.math.linear.RealVector var63 = var56.add((org.apache.commons.math.linear.RealVector)var62);
    java.lang.Double[] var65 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var66 = new org.apache.commons.math.linear.ArrayRealVector(var65);
    org.apache.commons.math.linear.ArrayRealVector var67 = var62.projection(var66);
    org.apache.commons.math.linear.RealVector var68 = var67.mapCosh();
    java.lang.Double[] var70 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var71 = new org.apache.commons.math.linear.ArrayRealVector(var70);
    org.apache.commons.math.linear.ArrayRealVector var73 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var75 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var77 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var75, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var78 = new org.apache.commons.math.linear.ArrayRealVector(var73, var75);
    org.apache.commons.math.linear.RealVector var79 = var71.subtract(var75);
    org.apache.commons.math.linear.ArrayRealVector var80 = new org.apache.commons.math.linear.ArrayRealVector(var75);
    org.apache.commons.math.linear.ArrayRealVector var82 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var84 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var86 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var84, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var87 = new org.apache.commons.math.linear.ArrayRealVector(var82, var84);
    org.apache.commons.math.linear.RealVector var88 = var87.mapCoshToSelf();
    java.lang.String var89 = var87.toString();
    org.apache.commons.math.linear.RealVector var90 = var87.mapRint();
    org.apache.commons.math.linear.RealVector var91 = var87.mapAbsToSelf();
    boolean var92 = var87.isInfinite();
    org.apache.commons.math.linear.RealVector var94 = var87.mapAdd(0.0d);
    org.apache.commons.math.linear.RealVector var95 = var87.mapCeil();
    double var96 = var80.getDistance(var87);
    org.apache.commons.math.linear.ArrayRealVector var97 = var67.add(var87);
    org.apache.commons.math.linear.RealMatrix var98 = var39.outerProduct(var97);
    org.apache.commons.math.linear.RealVector var99 = var19.operate((org.apache.commons.math.linear.RealVector)var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "{1.54}"+ "'", var41.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "{1.54}"+ "'", var89.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == 0.5430806348152439d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test329() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test329"); }


    int var2 = org.apache.commons.math.util.MathUtils.lcm(0, 1010);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);

  }

  public void test330() {}
//   public void test330() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test330"); }
// 
// 
//     java.text.NumberFormat var3 = null;
//     org.apache.commons.math.linear.RealVectorFormat var4 = new org.apache.commons.math.linear.RealVectorFormat("", "hi!", "org.apache.commons.math.ConvergenceException: Convergence failed", var3);
//     org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     org.apache.commons.math.linear.RealVector var7 = var6.mapCosToSelf();
//     org.apache.commons.math.linear.RealVector var8 = var6.mapAsin();
//     org.apache.commons.math.linear.RealVector var9 = var6.mapCbrt();
//     org.apache.commons.math.optimization.linear.Relationship var11 = null;
//     org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     org.apache.commons.math.optimization.linear.LinearConstraint var15 = new org.apache.commons.math.optimization.linear.LinearConstraint(var9, 363.7393755555636d, var11, (org.apache.commons.math.linear.RealVector)var13, 10.0d);
//     org.apache.commons.math.linear.RealVector var16 = var13.copy();
//     org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var19 = var18.getData();
//     org.apache.commons.math.linear.ArrayRealVector var20 = new org.apache.commons.math.linear.ArrayRealVector(var19);
//     org.apache.commons.math.linear.RealVector var21 = var20.mapLog1pToSelf();
//     double var22 = var13.getDistance(var20);
//     org.apache.commons.math.linear.ArrayRealVector var24 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     org.apache.commons.math.linear.RealVector var25 = var24.mapCosToSelf();
//     org.apache.commons.math.linear.RealVector var26 = var24.mapAsin();
//     org.apache.commons.math.linear.ArrayRealVector var28 = new org.apache.commons.math.linear.ArrayRealVector(var24, false);
//     org.apache.commons.math.linear.RealVector var29 = var28.mapLog1pToSelf();
//     org.apache.commons.math.linear.RealVector var30 = var28.mapLog1pToSelf();
//     org.apache.commons.math.linear.RealVector var32 = var28.mapSubtractToSelf(2.9066992099956157d);
//     org.apache.commons.math.linear.ArrayRealVector var34 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var36 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var38 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var36, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var39 = new org.apache.commons.math.linear.ArrayRealVector(var34, var36);
//     org.apache.commons.math.linear.RealVector var40 = var39.mapCoshToSelf();
//     java.lang.String var41 = var39.toString();
//     org.apache.commons.math.linear.RealVector var43 = var39.mapAddToSelf(10.0d);
//     org.apache.commons.math.linear.RealVector var44 = var39.mapLog10();
//     org.apache.commons.math.linear.ArrayRealVector var46 = new org.apache.commons.math.linear.ArrayRealVector(var39, false);
//     org.apache.commons.math.linear.ArrayRealVector var48 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var50 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var52 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var50, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var53 = new org.apache.commons.math.linear.ArrayRealVector(var48, var50);
//     org.apache.commons.math.linear.ArrayRealVector var55 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     org.apache.commons.math.linear.RealVector var56 = var55.mapCosToSelf();
//     double var57 = var48.dotProduct(var56);
//     org.apache.commons.math.linear.ArrayRealVector var58 = var46.append(var48);
//     org.apache.commons.math.linear.ArrayRealVector var59 = var28.add(var48);
//     org.apache.commons.math.linear.RealVector var60 = var48.mapLog();
//     double var61 = var13.getL1Distance(var60);
//     java.lang.StringBuffer var62 = null;
//     java.text.FieldPosition var63 = null;
//     java.lang.StringBuffer var64 = var4.format((org.apache.commons.math.linear.RealVector)var13, var62, var63);
// 
//   }

  public void test331() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test331"); }


    org.apache.commons.math.linear.RealVectorFormat var0 = org.apache.commons.math.linear.RealVectorFormat.getInstance();
    java.lang.String var1 = var0.getSeparator();
    java.lang.Double[] var3 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var4 = new org.apache.commons.math.linear.ArrayRealVector(var3);
    org.apache.commons.math.linear.RealVector var5 = var4.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var4);
    org.apache.commons.math.linear.RealVector var7 = var4.mapExpToSelf();
    java.text.AttributedCharacterIterator var8 = var0.formatToCharacterIterator((java.lang.Object)var4);
    org.apache.commons.math.linear.RealVector var9 = var4.mapCbrt();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "; "+ "'", var1.equals("; "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test332() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test332"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var8 = var6.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var9 = var6.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var12 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var13 = var12.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var14 = var12.mapLog1p();
    var6.setSubVector(0, (org.apache.commons.math.linear.RealVector)var12);
    double[] var16 = var12.getData();
    org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var20 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var22 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var20, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var23 = new org.apache.commons.math.linear.ArrayRealVector(var18, var20);
    org.apache.commons.math.optimization.RealPointValuePair var26 = new org.apache.commons.math.optimization.RealPointValuePair(var20, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var27 = new org.apache.commons.math.linear.ArrayRealVector(var16, var20);
    int var28 = org.apache.commons.math.util.MathUtils.hash(var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.ArrayRealVector var31 = new org.apache.commons.math.linear.ArrayRealVector(var16, (-1), 1);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);

  }

  public void test333() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test333"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    double var22 = var19.getFrobeniusNorm();
    org.apache.commons.math.linear.RealMatrixPreservingVisitor var23 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var28 = var19.walkInRowOrder(var23, 101, 0, 1010, 0);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1.0d);

  }

  public void test334() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test334"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var8 = var6.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var9 = var6.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var12 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var13 = var12.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var14 = var12.mapLog1p();
    var6.setSubVector(0, (org.apache.commons.math.linear.RealVector)var12);
    org.apache.commons.math.linear.RealVector var16 = var12.mapExp();
    org.apache.commons.math.linear.RealVector var17 = var12.mapCeilToSelf();
    org.apache.commons.math.linear.ArrayRealVector var19 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var20 = var19.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var21 = var19.mapAcos();
    double[] var24 = new double[] { 1.0d, 0.0d};
    org.apache.commons.math.linear.RealVector var25 = var19.append(var24);
    org.apache.commons.math.optimization.RealPointValuePair var27 = new org.apache.commons.math.optimization.RealPointValuePair(var24, (-47.69741490700596d));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var28 = var12.getDistance(var24);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test335() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test335"); }


    float var1 = org.apache.commons.math.util.MathUtils.sign((-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1.0f));

  }

  public void test336() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test336"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    java.lang.String var8 = var6.toString();
    org.apache.commons.math.linear.RealVector var10 = var6.mapAddToSelf(10.0d);
    org.apache.commons.math.linear.RealVector var11 = var6.mapLog10();
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(var6, false);
    org.apache.commons.math.linear.RealVector var14 = var13.mapLog1p();
    org.apache.commons.math.linear.RealVector var16 = var13.append(1732.4286165853446d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "{1.54}"+ "'", var8.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test337() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test337"); }


    org.apache.commons.math.ConvergenceException var1 = new org.apache.commons.math.ConvergenceException();
    java.lang.Object[] var4 = new java.lang.Object[] { 0};
    org.apache.commons.math.ConvergenceException var5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var1, "", var4);
    java.lang.Object[] var9 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var10 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var9);
    org.apache.commons.math.MathRuntimeException var11 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var1, "hi!", var9);
    java.lang.Object[] var12 = var1.getArguments();
    java.lang.Object[] var13 = var1.getArguments();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.MathRuntimeException var14 = new org.apache.commons.math.MathRuntimeException("Array2DRowRealMatrix{{1.0}}", var13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test338() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test338"); }


    java.lang.Object[] var6 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var7 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var6);
    java.lang.Object[] var10 = new java.lang.Object[] { 10L};
    org.apache.commons.math.ConvergenceException var11 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var7, "", var10);
    java.text.ParseException var12 = org.apache.commons.math.MathRuntimeException.createParseException((-1), "org.apache.commons.math.ConvergenceException: Convergence failed", var10);
    org.apache.commons.math.ConvergenceException var13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", var10);
    org.apache.commons.math.optimization.OptimizationException var14 = new org.apache.commons.math.optimization.OptimizationException((java.lang.Throwable)var13);
    java.lang.Throwable[] var15 = var14.getSuppressed();
    org.apache.commons.math.MathRuntimeException var16 = new org.apache.commons.math.MathRuntimeException("hi!", (java.lang.Object[])var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test339() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test339"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapLog10();
    org.apache.commons.math.linear.RealVector var3 = var1.mapExpm1ToSelf();
    org.apache.commons.math.linear.RealVector var4 = var1.mapExpm1();
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var8 = var6.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(var6, false);
    org.apache.commons.math.linear.RealVector var11 = var6.mapTan();
    org.apache.commons.math.linear.RealVector var12 = var6.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var14 = new org.apache.commons.math.linear.ArrayRealVector(var6, false);
    double var15 = var1.dotProduct(var6);
    org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var19 = var18.mapSinhToSelf();
    org.apache.commons.math.linear.ArrayRealVector var21 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var22 = var21.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var23 = var21.mapAsin();
    org.apache.commons.math.linear.RealVector var24 = var21.mapCbrt();
    org.apache.commons.math.optimization.linear.Relationship var26 = null;
    org.apache.commons.math.linear.ArrayRealVector var28 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.optimization.linear.LinearConstraint var30 = new org.apache.commons.math.optimization.linear.LinearConstraint(var24, 363.7393755555636d, var26, (org.apache.commons.math.linear.RealVector)var28, 10.0d);
    org.apache.commons.math.linear.RealVector var31 = var28.mapExp();
    org.apache.commons.math.linear.RealVector var32 = var18.projection((org.apache.commons.math.linear.RealVector)var28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.set((-336392980), var28);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test340() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test340"); }


    org.apache.commons.math.ConvergenceException var4 = new org.apache.commons.math.ConvergenceException();
    java.lang.Object[] var7 = new java.lang.Object[] { 0};
    org.apache.commons.math.ConvergenceException var8 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var4, "", var7);
    java.lang.Object[] var12 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var13 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var12);
    org.apache.commons.math.MathRuntimeException var14 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var4, "hi!", var12);
    java.lang.Object[] var15 = var4.getArguments();
    org.apache.commons.math.optimization.OptimizationException var16 = new org.apache.commons.math.optimization.OptimizationException("", var15);
    java.util.ConcurrentModificationException var17 = org.apache.commons.math.MathRuntimeException.createConcurrentModificationException("}", var15);
    java.lang.ArrayIndexOutOfBoundsException var18 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("org.apache.commons.math.ConvergenceException: Convergence failed", var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.optimization.OptimizationException var19 = new org.apache.commons.math.optimization.OptimizationException("{}", var15);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test341() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test341"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var8 = var6.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var9 = var6.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var12 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var13 = var12.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var14 = var12.mapLog1p();
    var6.setSubVector(0, (org.apache.commons.math.linear.RealVector)var12);
    double[] var16 = var12.getData();
    org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var20 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var22 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var20, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var23 = new org.apache.commons.math.linear.ArrayRealVector(var18, var20);
    org.apache.commons.math.optimization.RealPointValuePair var26 = new org.apache.commons.math.optimization.RealPointValuePair(var20, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var27 = new org.apache.commons.math.linear.ArrayRealVector(var16, var20);
    org.apache.commons.math.optimization.RealPointValuePair var29 = new org.apache.commons.math.optimization.RealPointValuePair(var20, 93.06950707243628d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test342() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test342"); }


    double var1 = org.apache.commons.math.util.MathUtils.sinh(49.73451754256332d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1.9879091522531785E21d);

  }

  public void test343() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test343"); }


    org.apache.commons.math.optimization.linear.SimplexSolver var1 = new org.apache.commons.math.optimization.linear.SimplexSolver(0.5430806348152439d);
    var1.setMaxIterations((-1));

  }

  public void test344() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test344"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var8 = var6.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var9 = var6.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var12 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var13 = var12.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var14 = var12.mapLog1p();
    var6.setSubVector(0, (org.apache.commons.math.linear.RealVector)var12);
    double[] var16 = var12.getData();
    org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var20 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var22 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var20, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var23 = new org.apache.commons.math.linear.ArrayRealVector(var18, var20);
    org.apache.commons.math.optimization.RealPointValuePair var26 = new org.apache.commons.math.optimization.RealPointValuePair(var20, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var27 = new org.apache.commons.math.linear.ArrayRealVector(var16, var20);
    org.apache.commons.math.linear.ArrayRealVector var28 = new org.apache.commons.math.linear.ArrayRealVector(var16);
    org.apache.commons.math.linear.RealVector var29 = var28.mapLog10();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test345() {}
//   public void test345() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test345"); }
// 
// 
//     double[] var1 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
//     double[][] var6 = new double[][] { var1};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
//     double var9 = var8.getFrobeniusNorm();
//     java.lang.String var10 = var8.toString();
//     org.apache.commons.math.linear.RealMatrixChangingVisitor var11 = null;
//     double var12 = var8.walkInColumnOrder(var11);
// 
//   }

  public void test346() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test346"); }


    java.lang.Object[] var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.InvalidMatrixException var2 = new org.apache.commons.math.linear.InvalidMatrixException("{}", var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test347() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test347"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var2 = var1.getData();
    org.apache.commons.math.linear.ArrayRealVector var3 = new org.apache.commons.math.linear.ArrayRealVector(var2);
    org.apache.commons.math.linear.RealVector var4 = var3.mapSignumToSelf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test348() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test348"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    java.lang.String var8 = var6.toString();
    org.apache.commons.math.linear.RealVector var9 = var6.mapRint();
    org.apache.commons.math.linear.RealVector var10 = var6.mapCeilToSelf();
    org.apache.commons.math.linear.RealVector var11 = var6.mapAcosToSelf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "{1.54}"+ "'", var8.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test349() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test349"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    java.lang.String var8 = var6.toString();
    org.apache.commons.math.linear.RealVector var10 = var6.mapAddToSelf(10.0d);
    org.apache.commons.math.linear.RealVector var11 = var6.mapLog10();
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(var6, false);
    org.apache.commons.math.linear.ArrayRealVector var15 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var17 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var19 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var17, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var20 = new org.apache.commons.math.linear.ArrayRealVector(var15, var17);
    org.apache.commons.math.linear.ArrayRealVector var22 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var23 = var22.mapCosToSelf();
    double var24 = var15.dotProduct(var23);
    org.apache.commons.math.linear.ArrayRealVector var25 = var13.append(var15);
    org.apache.commons.math.linear.ArrayRealVector var27 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var28 = var27.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var29 = var27.mapLog1p();
    org.apache.commons.math.linear.RealVector var31 = var27.mapMultiply(0.5430806348152439d);
    org.apache.commons.math.linear.ArrayRealVector var33 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var35 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var37 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var35, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var38 = new org.apache.commons.math.linear.ArrayRealVector(var33, var35);
    org.apache.commons.math.linear.RealVector var39 = var38.mapCoshToSelf();
    java.lang.String var40 = var38.toString();
    org.apache.commons.math.linear.RealVector var42 = var38.mapAddToSelf(10.0d);
    org.apache.commons.math.linear.RealVector var43 = var38.mapLog10();
    org.apache.commons.math.linear.ArrayRealVector var45 = new org.apache.commons.math.linear.ArrayRealVector(var38, false);
    org.apache.commons.math.linear.ArrayRealVector var47 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var49 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var51 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var49, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var52 = new org.apache.commons.math.linear.ArrayRealVector(var47, var49);
    org.apache.commons.math.linear.ArrayRealVector var54 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var55 = var54.mapCosToSelf();
    double var56 = var47.dotProduct(var55);
    org.apache.commons.math.linear.ArrayRealVector var57 = var45.append(var47);
    org.apache.commons.math.linear.RealVector var58 = var47.mapSqrt();
    org.apache.commons.math.linear.RealVector var59 = var47.mapTanhToSelf();
    org.apache.commons.math.linear.ArrayRealVector var60 = var27.add(var47);
    org.apache.commons.math.linear.RealVector var61 = var60.mapSignum();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealVector var62 = var25.add((org.apache.commons.math.linear.RealVector)var60);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "{1.54}"+ "'", var8.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "{1.54}"+ "'", var40.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test350() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test350"); }


    int var1 = org.apache.commons.math.util.MathUtils.hash(2.302585092994046d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-71876953));

  }

  public void test351() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test351"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      float var3 = org.apache.commons.math.util.MathUtils.round(Float.NaN, 10, (-1));
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }

  }

  public void test352() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test352"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var1.mapRint();
    org.apache.commons.math.linear.RealVector var8 = var1.mapExpm1();
    org.apache.commons.math.linear.RealVector var9 = var1.mapRintToSelf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test353() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test353"); }


    boolean var3 = org.apache.commons.math.util.MathUtils.equals(10.0d, 5981.260539780036d, 0);

  }

  public void test354() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test354"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.optimization.RealPointValuePair var9 = new org.apache.commons.math.optimization.RealPointValuePair(var3, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(var3, true);
    int var12 = var11.getDimension();
    java.lang.Double[] var14 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var15 = new org.apache.commons.math.linear.ArrayRealVector(var14);
    org.apache.commons.math.linear.RealVector var16 = var15.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var15);
    org.apache.commons.math.linear.RealVector var18 = var11.add((org.apache.commons.math.linear.RealVector)var17);
    java.lang.Double[] var20 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var21 = new org.apache.commons.math.linear.ArrayRealVector(var20);
    org.apache.commons.math.linear.ArrayRealVector var22 = var17.projection(var21);
    org.apache.commons.math.linear.RealVector var23 = var17.mapTanh();
    org.apache.commons.math.linear.RealVector var24 = var17.mapCbrtToSelf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test355() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test355"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    double[] var23 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var25 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var23, 1.0d);
    double[] var28 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var29 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var28);
    org.apache.commons.math.linear.ArrayRealVector var31 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var33 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var35 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var33, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var36 = new org.apache.commons.math.linear.ArrayRealVector(var31, var33);
    double[] var37 = var29.operate(var33);
    org.apache.commons.math.linear.ArrayRealVector var38 = new org.apache.commons.math.linear.ArrayRealVector(var33);
    org.apache.commons.math.optimization.linear.Relationship var40 = null;
    double[] var43 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var44 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var43);
    org.apache.commons.math.linear.ArrayRealVector var46 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var48 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var50 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var48, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var51 = new org.apache.commons.math.linear.ArrayRealVector(var46, var48);
    double[] var52 = var44.operate(var48);
    org.apache.commons.math.linear.ArrayRealVector var53 = new org.apache.commons.math.linear.ArrayRealVector(var48);
    org.apache.commons.math.optimization.linear.LinearConstraint var55 = new org.apache.commons.math.optimization.linear.LinearConstraint(var33, 50.0d, var40, var48, 2.302585092994046d);
    double var56 = var25.getValue(var48);
    org.apache.commons.math.linear.RealVector var57 = var25.getCoefficients();
    org.apache.commons.math.linear.RealVector var58 = var8.operate(var57);
    double[] var60 = var8.getRow(0);
    double[] var62 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var64 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var62, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var66 = new org.apache.commons.math.optimization.RealPointValuePair(var62, 0.0d);
    double[][] var67 = new double[][] { var62};
    org.apache.commons.math.linear.Array2DRowRealMatrix var69 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var67, true);
    org.apache.commons.math.linear.RealMatrix var70 = var69.copy();
    boolean var71 = var69.isSingular();
    org.apache.commons.math.linear.Array2DRowRealMatrix var72 = var8.subtract(var69);
    org.apache.commons.math.linear.ArrayRealVector var74 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var75 = var74.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var76 = var74.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var78 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var79 = var78.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var80 = var78.mapAsin();
    org.apache.commons.math.linear.RealVector var81 = var78.mapCbrt();
    org.apache.commons.math.optimization.linear.Relationship var83 = null;
    org.apache.commons.math.linear.ArrayRealVector var85 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.optimization.linear.LinearConstraint var87 = new org.apache.commons.math.optimization.linear.LinearConstraint(var81, 363.7393755555636d, var83, (org.apache.commons.math.linear.RealVector)var85, 10.0d);
    double var88 = var74.getL1Distance(var85);
    org.apache.commons.math.linear.RealVector var90 = var74.mapSubtract(2.0d);
    double[] var91 = var74.toArray();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double[] var92 = var69.preMultiply(var91);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test356() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test356"); }


    org.apache.commons.math.ConvergenceException var2 = new org.apache.commons.math.ConvergenceException();
    java.lang.Object[] var5 = new java.lang.Object[] { 0};
    org.apache.commons.math.ConvergenceException var6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var2, "", var5);
    java.lang.Object[] var10 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var11 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var10);
    org.apache.commons.math.MathRuntimeException var12 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var2, "hi!", var10);
    java.lang.Object[] var13 = var2.getArguments();
    org.apache.commons.math.optimization.OptimizationException var14 = new org.apache.commons.math.optimization.OptimizationException("", var13);
    java.lang.IllegalStateException var15 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("; ", var13);
    org.apache.commons.math.linear.InvalidMatrixException var16 = new org.apache.commons.math.linear.InvalidMatrixException((java.lang.Throwable)var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test357() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test357"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    org.apache.commons.math.linear.RealMatrix var9 = var8.copy();
    double var10 = var8.getTrace();
    int var11 = var8.getRowDimension();
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var14 = var13.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var15 = var13.mapAsin();
    org.apache.commons.math.linear.RealVector var16 = var13.mapCbrt();
    double var17 = var13.getNorm();
    double[] var18 = var13.getData();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double[] var19 = var8.preMultiply(var18);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test358() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test358"); }


    org.apache.commons.math.linear.RealVectorFormat var0 = org.apache.commons.math.linear.RealVectorFormat.getInstance();
    java.lang.String var1 = var0.getSeparator();
    java.lang.Double[] var3 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var4 = new org.apache.commons.math.linear.ArrayRealVector(var3);
    org.apache.commons.math.linear.RealVector var5 = var4.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var4);
    org.apache.commons.math.linear.RealVector var7 = var4.mapExpToSelf();
    java.text.AttributedCharacterIterator var8 = var0.formatToCharacterIterator((java.lang.Object)var4);
    org.apache.commons.math.linear.RealVector var9 = var4.mapLog1pToSelf();
    org.apache.commons.math.linear.RealVector var11 = var4.append(2.4258259770489514E8d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "; "+ "'", var1.equals("; "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test359() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test359"); }


    java.lang.Double[] var1 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var2 = new org.apache.commons.math.linear.ArrayRealVector(var1);
    org.apache.commons.math.linear.ArrayRealVector var4 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var6 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var8 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var6, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var9 = new org.apache.commons.math.linear.ArrayRealVector(var4, var6);
    org.apache.commons.math.linear.RealVector var10 = var2.subtract(var6);
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(var6);
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var15 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var17 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var15, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(var13, var15);
    org.apache.commons.math.linear.RealVector var19 = var18.mapCoshToSelf();
    java.lang.String var20 = var18.toString();
    org.apache.commons.math.linear.RealVector var21 = var18.mapRint();
    org.apache.commons.math.linear.RealVector var22 = var18.mapAbsToSelf();
    boolean var23 = var18.isInfinite();
    org.apache.commons.math.linear.RealVector var25 = var18.mapAdd(0.0d);
    org.apache.commons.math.linear.RealVector var26 = var18.mapCeil();
    double var27 = var11.getDistance(var18);
    org.apache.commons.math.linear.RealVector var28 = var11.mapAtanToSelf();
    double[] var30 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var32 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var30, 1.0d);
    double[] var35 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var36 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var35);
    org.apache.commons.math.linear.ArrayRealVector var38 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var40 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var42 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var40, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var43 = new org.apache.commons.math.linear.ArrayRealVector(var38, var40);
    double[] var44 = var36.operate(var40);
    double var45 = org.apache.commons.math.util.MathUtils.distance1(var30, var40);
    double var46 = var11.dotProduct(var30);
    boolean var47 = var11.isNaN();
    org.apache.commons.math.linear.RealVector var48 = var11.mapCos();
    java.lang.Double[] var50 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var51 = new org.apache.commons.math.linear.ArrayRealVector(var50);
    org.apache.commons.math.linear.ArrayRealVector var53 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var55 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var57 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var55, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var58 = new org.apache.commons.math.linear.ArrayRealVector(var53, var55);
    org.apache.commons.math.linear.RealVector var59 = var51.subtract(var55);
    org.apache.commons.math.linear.ArrayRealVector var60 = new org.apache.commons.math.linear.ArrayRealVector(var55);
    org.apache.commons.math.linear.ArrayRealVector var62 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var64 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var66 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var64, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var67 = new org.apache.commons.math.linear.ArrayRealVector(var62, var64);
    org.apache.commons.math.optimization.RealPointValuePair var70 = new org.apache.commons.math.optimization.RealPointValuePair(var64, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var72 = new org.apache.commons.math.linear.ArrayRealVector(var64, true);
    int var73 = var72.getDimension();
    java.lang.Double[] var75 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var76 = new org.apache.commons.math.linear.ArrayRealVector(var75);
    org.apache.commons.math.linear.RealVector var77 = var76.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var78 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var76);
    org.apache.commons.math.linear.RealVector var79 = var72.add((org.apache.commons.math.linear.RealVector)var78);
    java.lang.Double[] var81 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var82 = new org.apache.commons.math.linear.ArrayRealVector(var81);
    org.apache.commons.math.linear.ArrayRealVector var83 = var78.projection(var82);
    org.apache.commons.math.linear.RealVector var84 = var83.mapSinh();
    org.apache.commons.math.linear.ArrayRealVector var85 = new org.apache.commons.math.linear.ArrayRealVector(var60, var83);
    org.apache.commons.math.linear.RealVector var86 = var60.mapCbrt();
    double var87 = var11.dotProduct(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "{1.54}"+ "'", var20.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5430806348152439d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.7853981633974483d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0.7853981633974483d);

  }

  public void test360() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test360"); }


    org.apache.commons.math.linear.Array2DRowRealMatrix var0 = new org.apache.commons.math.linear.Array2DRowRealMatrix();
    int var1 = var0.getRowDimension();
    int var2 = var0.getRowDimension();
    double var3 = var0.getNorm();
    java.lang.String var4 = var0.toString();
    double var5 = var0.getDeterminant();
    org.apache.commons.math.linear.RealMatrixPreservingVisitor var6 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var11 = var0.walkInRowOrder(var6, 1073741824, 101, (-100), 1073741824);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Array2DRowRealMatrix{}"+ "'", var4.equals("Array2DRowRealMatrix{}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1.0d);

  }

  public void test361() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test361"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var8 = var6.mapAtanToSelf();
    double var9 = var6.getNorm();
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var12 = var11.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var13 = var11.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var15 = new org.apache.commons.math.linear.ArrayRealVector(var11, false);
    org.apache.commons.math.linear.RealVector var16 = var11.mapTan();
    org.apache.commons.math.linear.RealVector var17 = var11.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var19 = new org.apache.commons.math.linear.ArrayRealVector(var11, false);
    org.apache.commons.math.linear.RealVector var21 = var19.mapPowToSelf(49.73451754256331d);
    org.apache.commons.math.linear.RealVector var22 = var19.mapSinh();
    org.apache.commons.math.linear.ArrayRealVector var23 = var6.append(var19);
    org.apache.commons.math.linear.RealVector var24 = var6.mapLog10();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.9957901442164848d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test362() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test362"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    double[] var23 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var25 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var23, 1.0d);
    double[] var28 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var29 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var28);
    org.apache.commons.math.linear.ArrayRealVector var31 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var33 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var35 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var33, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var36 = new org.apache.commons.math.linear.ArrayRealVector(var31, var33);
    double[] var37 = var29.operate(var33);
    org.apache.commons.math.linear.ArrayRealVector var38 = new org.apache.commons.math.linear.ArrayRealVector(var33);
    org.apache.commons.math.optimization.linear.Relationship var40 = null;
    double[] var43 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var44 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var43);
    org.apache.commons.math.linear.ArrayRealVector var46 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var48 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var50 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var48, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var51 = new org.apache.commons.math.linear.ArrayRealVector(var46, var48);
    double[] var52 = var44.operate(var48);
    org.apache.commons.math.linear.ArrayRealVector var53 = new org.apache.commons.math.linear.ArrayRealVector(var48);
    org.apache.commons.math.optimization.linear.LinearConstraint var55 = new org.apache.commons.math.optimization.linear.LinearConstraint(var33, 50.0d, var40, var48, 2.302585092994046d);
    double var56 = var25.getValue(var48);
    org.apache.commons.math.linear.RealVector var57 = var25.getCoefficients();
    org.apache.commons.math.linear.RealVector var58 = var8.operate(var57);
    double[] var60 = var8.getRow(0);
    double[] var62 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var64 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var62, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var66 = new org.apache.commons.math.optimization.RealPointValuePair(var62, 0.0d);
    double[][] var67 = new double[][] { var62};
    org.apache.commons.math.linear.Array2DRowRealMatrix var69 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var67, true);
    org.apache.commons.math.linear.RealMatrix var70 = var69.copy();
    boolean var71 = var69.isSingular();
    org.apache.commons.math.linear.Array2DRowRealMatrix var72 = var8.subtract(var69);
    double var73 = var8.getDeterminant();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealVector var75 = var8.getColumnVector((-71876953));
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1.0d);

  }

  public void test363() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test363"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double var10 = var8.getNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    double[] var23 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var25 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var23, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var27 = new org.apache.commons.math.optimization.RealPointValuePair(var23, 0.0d);
    double[][] var28 = new double[][] { var23};
    org.apache.commons.math.linear.Array2DRowRealMatrix var30 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var28, true);
    double var31 = var30.getFrobeniusNorm();
    var19.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var30);
    org.apache.commons.math.linear.RealMatrix var33 = var30.inverse();
    int var34 = var30.getRowDimension();
    double[][] var35 = var30.getData();
    org.apache.commons.math.linear.Array2DRowRealMatrix var37 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var35, false);
    var37.multiplyEntry(0, 0, 0.03933967394071772d);
    org.apache.commons.math.linear.Array2DRowRealMatrix var42 = var8.subtract(var37);
    double[] var44 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var46 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var44, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var48 = new org.apache.commons.math.optimization.RealPointValuePair(var44, 0.0d);
    double[][] var49 = new double[][] { var44};
    org.apache.commons.math.linear.Array2DRowRealMatrix var51 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var49, true);
    org.apache.commons.math.linear.ArrayRealVector var53 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var55 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var57 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var55, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var58 = new org.apache.commons.math.linear.ArrayRealVector(var53, var55);
    org.apache.commons.math.linear.ArrayRealVector var60 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var62 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var64 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var62, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var65 = new org.apache.commons.math.linear.ArrayRealVector(var60, var62);
    double var66 = var65.getNorm();
    org.apache.commons.math.linear.RealMatrix var67 = var58.outerProduct(var65);
    org.apache.commons.math.linear.RealMatrix var68 = var51.solve(var67);
    org.apache.commons.math.linear.Array2DRowRealMatrix var69 = var37.multiply(var51);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var69.addToEntry(101, (-1), 363.7393755555636d);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test364() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test364"); }


    double var1 = org.apache.commons.math.util.MathUtils.sinh(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.0d);

  }

  public void test365() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test365"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapLog10();
    java.lang.Double[] var5 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var5);
    org.apache.commons.math.linear.ArrayRealVector var8 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var10 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var12 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var10, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(var8, var10);
    org.apache.commons.math.linear.RealVector var14 = var6.subtract(var10);
    org.apache.commons.math.linear.ArrayRealVector var15 = new org.apache.commons.math.linear.ArrayRealVector(var10);
    org.apache.commons.math.linear.ArrayRealVector var17 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var19 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var21 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var19, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var22 = new org.apache.commons.math.linear.ArrayRealVector(var17, var19);
    org.apache.commons.math.optimization.RealPointValuePair var25 = new org.apache.commons.math.optimization.RealPointValuePair(var19, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var27 = new org.apache.commons.math.linear.ArrayRealVector(var19, true);
    int var28 = var27.getDimension();
    java.lang.Double[] var30 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var31 = new org.apache.commons.math.linear.ArrayRealVector(var30);
    org.apache.commons.math.linear.RealVector var32 = var31.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var33 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var31);
    org.apache.commons.math.linear.RealVector var34 = var27.add((org.apache.commons.math.linear.RealVector)var33);
    java.lang.Double[] var36 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var37 = new org.apache.commons.math.linear.ArrayRealVector(var36);
    org.apache.commons.math.linear.ArrayRealVector var38 = var33.projection(var37);
    org.apache.commons.math.linear.RealVector var39 = var38.mapSinh();
    org.apache.commons.math.linear.ArrayRealVector var40 = new org.apache.commons.math.linear.ArrayRealVector(var15, var38);
    org.apache.commons.math.linear.RealVector var41 = var40.mapRintToSelf();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setSubVector((-336392980), var41);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test366() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test366"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.ArrayRealVector var2 = new org.apache.commons.math.linear.ArrayRealVector(1079574528, 368.35449607240486d);
      fail("Expected exception of type java.lang.OutOfMemoryError");
    } catch (java.lang.OutOfMemoryError e) {
      // Expected exception.
    }

  }

  public void test367() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test367"); }


    java.lang.Double[] var1 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var2 = new org.apache.commons.math.linear.ArrayRealVector(var1);
    org.apache.commons.math.linear.RealVector var3 = var2.copy();
    org.apache.commons.math.linear.RealVector var4 = var2.mapAsinToSelf();
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var8 = var6.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(var6, false);
    org.apache.commons.math.linear.RealVector var11 = var6.mapTan();
    org.apache.commons.math.linear.RealVector var12 = var6.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var14 = new org.apache.commons.math.linear.ArrayRealVector(var6, false);
    org.apache.commons.math.linear.RealVector var16 = var6.mapMultiply((-1.0d));
    org.apache.commons.math.linear.RealVector var17 = var6.mapInvToSelf();
    org.apache.commons.math.linear.RealVector var18 = var6.mapTanh();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var19 = var2.getL1Distance(var6);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test368() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test368"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    double[] var8 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var10 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var8, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var12 = new org.apache.commons.math.optimization.RealPointValuePair(var8, 0.0d);
    double[][] var13 = new double[][] { var8};
    org.apache.commons.math.linear.Array2DRowRealMatrix var15 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var13, true);
    double var16 = var15.getFrobeniusNorm();
    double[] var19 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var21 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var19, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var23 = new org.apache.commons.math.optimization.RealPointValuePair(var19, 0.0d);
    double[][] var24 = new double[][] { var19};
    org.apache.commons.math.linear.Array2DRowRealMatrix var26 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var24, true);
    double var27 = var26.getFrobeniusNorm();
    var15.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var26);
    double[] var30 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var32 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var30, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var34 = new org.apache.commons.math.optimization.RealPointValuePair(var30, 0.0d);
    org.apache.commons.math.optimization.RealPointValuePair var37 = new org.apache.commons.math.optimization.RealPointValuePair(var30, 50.0d, true);
    double[] var38 = var26.operate(var30);
    org.apache.commons.math.linear.ArrayRealVector var40 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var41 = var40.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var42 = var40.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var44 = new org.apache.commons.math.linear.ArrayRealVector(var40, false);
    org.apache.commons.math.linear.RealVector var45 = var44.mapLog1pToSelf();
    org.apache.commons.math.linear.RealVector var46 = var44.mapTan();
    org.apache.commons.math.linear.ArrayRealVector var48 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var50 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var52 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var50, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var53 = new org.apache.commons.math.linear.ArrayRealVector(var48, var50);
    org.apache.commons.math.linear.RealVector var54 = var53.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var55 = var53.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var56 = var53.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var59 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var60 = var59.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var61 = var59.mapLog1p();
    var53.setSubVector(0, (org.apache.commons.math.linear.RealVector)var59);
    double[] var63 = var59.getData();
    org.apache.commons.math.linear.ArrayRealVector var65 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var67 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var69 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var67, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var70 = new org.apache.commons.math.linear.ArrayRealVector(var65, var67);
    org.apache.commons.math.optimization.RealPointValuePair var73 = new org.apache.commons.math.optimization.RealPointValuePair(var67, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var74 = new org.apache.commons.math.linear.ArrayRealVector(var63, var67);
    org.apache.commons.math.linear.ArrayRealVector var75 = new org.apache.commons.math.linear.ArrayRealVector(var63);
    double[] var76 = var75.toArray();
    org.apache.commons.math.linear.RealVector var77 = var44.add(var76);
    org.apache.commons.math.linear.ArrayRealVector var78 = new org.apache.commons.math.linear.ArrayRealVector(var38, var76);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var79 = var1.getL1Distance(var78);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test369() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test369"); }


    long var2 = org.apache.commons.math.util.MathUtils.addAndCheck(0L, 9999L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 9999L);

  }

  public void test370() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test370"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAsin();
    org.apache.commons.math.linear.RealVector var4 = var1.mapCbrt();
    org.apache.commons.math.optimization.linear.Relationship var6 = null;
    org.apache.commons.math.linear.ArrayRealVector var8 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.optimization.linear.LinearConstraint var10 = new org.apache.commons.math.optimization.linear.LinearConstraint(var4, 363.7393755555636d, var6, (org.apache.commons.math.linear.RealVector)var8, 10.0d);
    org.apache.commons.math.linear.RealVector var11 = var8.mapExp();
    org.apache.commons.math.linear.RealVector var12 = var8.mapCeilToSelf();
    org.apache.commons.math.linear.ArrayRealVector var14 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var16 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var18 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var16, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var19 = new org.apache.commons.math.linear.ArrayRealVector(var14, var16);
    org.apache.commons.math.linear.RealVector var20 = var19.mapCoshToSelf();
    java.lang.String var21 = var19.toString();
    org.apache.commons.math.linear.RealVector var23 = var19.mapAddToSelf(10.0d);
    org.apache.commons.math.linear.RealVector var24 = var19.mapLog10();
    org.apache.commons.math.linear.ArrayRealVector var26 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var28 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var30 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var28, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var31 = new org.apache.commons.math.linear.ArrayRealVector(var26, var28);
    org.apache.commons.math.optimization.RealPointValuePair var34 = new org.apache.commons.math.optimization.RealPointValuePair(var28, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var36 = new org.apache.commons.math.linear.ArrayRealVector(var28, true);
    int var37 = var36.getDimension();
    java.lang.Double[] var39 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var40 = new org.apache.commons.math.linear.ArrayRealVector(var39);
    org.apache.commons.math.linear.RealVector var41 = var40.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var42 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var40);
    org.apache.commons.math.linear.RealVector var43 = var36.add((org.apache.commons.math.linear.RealVector)var42);
    java.lang.Double[] var45 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var46 = new org.apache.commons.math.linear.ArrayRealVector(var45);
    org.apache.commons.math.linear.ArrayRealVector var47 = var42.projection(var46);
    org.apache.commons.math.linear.RealVector var48 = var47.mapCosh();
    java.lang.Double[] var50 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var51 = new org.apache.commons.math.linear.ArrayRealVector(var50);
    org.apache.commons.math.linear.ArrayRealVector var53 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var55 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var57 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var55, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var58 = new org.apache.commons.math.linear.ArrayRealVector(var53, var55);
    org.apache.commons.math.linear.RealVector var59 = var51.subtract(var55);
    org.apache.commons.math.linear.ArrayRealVector var60 = new org.apache.commons.math.linear.ArrayRealVector(var55);
    org.apache.commons.math.linear.ArrayRealVector var62 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var64 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var66 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var64, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var67 = new org.apache.commons.math.linear.ArrayRealVector(var62, var64);
    org.apache.commons.math.linear.RealVector var68 = var67.mapCoshToSelf();
    java.lang.String var69 = var67.toString();
    org.apache.commons.math.linear.RealVector var70 = var67.mapRint();
    org.apache.commons.math.linear.RealVector var71 = var67.mapAbsToSelf();
    boolean var72 = var67.isInfinite();
    org.apache.commons.math.linear.RealVector var74 = var67.mapAdd(0.0d);
    org.apache.commons.math.linear.RealVector var75 = var67.mapCeil();
    double var76 = var60.getDistance(var67);
    org.apache.commons.math.linear.ArrayRealVector var77 = var47.add(var67);
    org.apache.commons.math.linear.RealMatrix var78 = var19.outerProduct(var77);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var79 = var8.getL1Distance(var19);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "{1.54}"+ "'", var21.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "{1.54}"+ "'", var69.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0.5430806348152439d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test371() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test371"); }


    int var1 = org.apache.commons.math.util.MathUtils.indicator(1073741824);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);

  }

  public void test372() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test372"); }


    long var2 = org.apache.commons.math.util.MathUtils.mulAndCheck(3629810L, 10L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 36298100L);

  }

  public void test373() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test373"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var7 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var9 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var7, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(var5, var7);
    org.apache.commons.math.linear.RealVector var11 = var10.mapCoshToSelf();
    java.lang.String var12 = var10.toString();
    org.apache.commons.math.linear.RealVector var14 = var10.mapAddToSelf(10.0d);
    org.apache.commons.math.linear.RealVector var15 = var10.mapLog10();
    double var16 = var3.getValue((org.apache.commons.math.linear.RealVector)var10);
    org.apache.commons.math.linear.RealVector var17 = var10.mapInv();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "{1.54}"+ "'", var12.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 12.543080634815244d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test374() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test374"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var8 = var6.mapAtanToSelf();
    org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var11 = var10.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var12 = var10.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var14 = new org.apache.commons.math.linear.ArrayRealVector(var10, false);
    org.apache.commons.math.linear.RealVector var15 = var10.mapSinhToSelf();
    org.apache.commons.math.linear.ArrayRealVector var17 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var18 = var17.getData();
    org.apache.commons.math.linear.RealVector var19 = var17.mapSignum();
    double[] var20 = var17.toArray();
    org.apache.commons.math.linear.ArrayRealVector var22 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var23 = var22.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var24 = var22.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var26 = new org.apache.commons.math.linear.ArrayRealVector(var22, false);
    org.apache.commons.math.linear.RealVector var27 = var26.mapLog1pToSelf();
    org.apache.commons.math.linear.RealVector var28 = var26.mapTan();
    org.apache.commons.math.linear.ArrayRealVector var30 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var32 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var34 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var32, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var35 = new org.apache.commons.math.linear.ArrayRealVector(var30, var32);
    org.apache.commons.math.linear.RealVector var36 = var35.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var37 = var35.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var38 = var35.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var41 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var42 = var41.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var43 = var41.mapLog1p();
    var35.setSubVector(0, (org.apache.commons.math.linear.RealVector)var41);
    double[] var45 = var41.getData();
    org.apache.commons.math.linear.ArrayRealVector var47 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var49 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var51 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var49, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var52 = new org.apache.commons.math.linear.ArrayRealVector(var47, var49);
    org.apache.commons.math.optimization.RealPointValuePair var55 = new org.apache.commons.math.optimization.RealPointValuePair(var49, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var56 = new org.apache.commons.math.linear.ArrayRealVector(var45, var49);
    org.apache.commons.math.linear.ArrayRealVector var57 = new org.apache.commons.math.linear.ArrayRealVector(var45);
    double[] var58 = var57.toArray();
    org.apache.commons.math.linear.RealVector var59 = var26.add(var58);
    org.apache.commons.math.linear.ArrayRealVector var60 = new org.apache.commons.math.linear.ArrayRealVector(var17, var58);
    org.apache.commons.math.linear.RealVector var61 = var10.add(var58);
    org.apache.commons.math.linear.ArrayRealVector var63 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var64 = var63.getData();
    double[] var65 = var63.getData();
    double[] var66 = null;
    double var67 = org.apache.commons.math.util.MathUtils.distanceInf(var65, var66);
    double var68 = org.apache.commons.math.util.MathUtils.distance(var58, var65);
    org.apache.commons.math.linear.ArrayRealVector var70 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var72 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var74 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var72, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var75 = new org.apache.commons.math.linear.ArrayRealVector(var70, var72);
    double var76 = org.apache.commons.math.util.MathUtils.distance(var65, var72);
    double var77 = var6.getDistance(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0.004209855783515182d);

  }

  public void test375() {}
//   public void test375() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test375"); }
// 
// 
//     org.apache.commons.math.linear.RealVectorFormat var0 = org.apache.commons.math.linear.RealVectorFormat.getInstance();
//     java.lang.String var1 = var0.getSuffix();
//     java.lang.Object var2 = var0.clone();
//     org.apache.commons.math.linear.ArrayRealVector var4 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     org.apache.commons.math.linear.RealVector var5 = var4.mapCosToSelf();
//     org.apache.commons.math.linear.RealVector var6 = var4.mapAsin();
//     org.apache.commons.math.linear.ArrayRealVector var8 = new org.apache.commons.math.linear.ArrayRealVector(var4, false);
//     org.apache.commons.math.linear.RealVector var9 = var4.mapAbs();
//     java.lang.String var10 = var0.format((java.lang.Object)var9);
//     java.text.ParsePosition var12 = null;
//     org.apache.commons.math.linear.ArrayRealVector var13 = var0.parse("Array2DRowRealMatrix{}", var12);
// 
//   }

  public void test376() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test376"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var1.mapRint();
    org.apache.commons.math.linear.RealVector var8 = var1.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var9 = var1.mapLog();
    org.apache.commons.math.linear.RealVector var10 = var1.mapInv();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test377() {}
//   public void test377() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test377"); }
// 
// 
//     double[] var1 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
//     double[][] var6 = new double[][] { var1};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
//     double var9 = var8.getFrobeniusNorm();
//     double var10 = var8.getNorm();
//     double[] var12 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
//     double[][] var17 = new double[][] { var12};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
//     double var20 = var19.getFrobeniusNorm();
//     double[] var23 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var25 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var23, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var27 = new org.apache.commons.math.optimization.RealPointValuePair(var23, 0.0d);
//     double[][] var28 = new double[][] { var23};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var30 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var28, true);
//     double var31 = var30.getFrobeniusNorm();
//     var19.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var30);
//     org.apache.commons.math.linear.RealMatrix var33 = var30.inverse();
//     int var34 = var30.getRowDimension();
//     double[][] var35 = var30.getData();
//     org.apache.commons.math.linear.Array2DRowRealMatrix var37 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var35, false);
//     var37.multiplyEntry(0, 0, 0.03933967394071772d);
//     org.apache.commons.math.linear.Array2DRowRealMatrix var42 = var8.subtract(var37);
//     double[] var44 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var46 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var44, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var48 = new org.apache.commons.math.optimization.RealPointValuePair(var44, 0.0d);
//     double[][] var49 = new double[][] { var44};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var51 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var49, true);
//     org.apache.commons.math.linear.ArrayRealVector var53 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var55 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var57 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var55, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var58 = new org.apache.commons.math.linear.ArrayRealVector(var53, var55);
//     org.apache.commons.math.linear.ArrayRealVector var60 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var62 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var64 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var62, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var65 = new org.apache.commons.math.linear.ArrayRealVector(var60, var62);
//     double var66 = var65.getNorm();
//     org.apache.commons.math.linear.RealMatrix var67 = var58.outerProduct(var65);
//     org.apache.commons.math.linear.RealMatrix var68 = var51.solve(var67);
//     org.apache.commons.math.linear.Array2DRowRealMatrix var69 = var37.multiply(var51);
//     org.apache.commons.math.linear.RealMatrixPreservingVisitor var70 = null;
//     double var71 = var51.walkInOptimizedOrder(var70);
// 
//   }

  public void test378() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test378"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var15 = new org.apache.commons.math.linear.ArrayRealVector(var10, var12);
    org.apache.commons.math.linear.ArrayRealVector var17 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var19 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var21 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var19, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var22 = new org.apache.commons.math.linear.ArrayRealVector(var17, var19);
    double var23 = var22.getNorm();
    org.apache.commons.math.linear.RealMatrix var24 = var15.outerProduct(var22);
    org.apache.commons.math.linear.RealMatrix var25 = var8.solve(var24);
    double[][] var26 = var8.getDataRef();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double[] var28 = var8.getColumn((-336392980));
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test379() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test379"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapLog10();
    org.apache.commons.math.linear.RealVector var3 = var1.mapExpm1ToSelf();
    org.apache.commons.math.linear.RealVector var4 = var1.mapExpm1();
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var8 = var6.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(var6, false);
    org.apache.commons.math.linear.RealVector var11 = var6.mapTan();
    org.apache.commons.math.linear.RealVector var12 = var6.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var14 = new org.apache.commons.math.linear.ArrayRealVector(var6, false);
    double var15 = var1.dotProduct(var6);
    org.apache.commons.math.linear.RealVector var16 = var6.mapExpm1ToSelf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test380() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test380"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapLog10();
    org.apache.commons.math.linear.RealVector var3 = var1.mapExpm1ToSelf();
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var6 = var5.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var7 = var5.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var9 = new org.apache.commons.math.linear.ArrayRealVector(var5, false);
    org.apache.commons.math.linear.RealVector var10 = var1.subtract((org.apache.commons.math.linear.RealVector)var9);
    double[] var11 = var1.getDataRef();
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var13 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var11, 1.3440585709080678E43d);
    org.apache.commons.math.optimization.linear.Relationship var15 = null;
    org.apache.commons.math.linear.ArrayRealVector var17 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var18 = var17.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var19 = var17.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var21 = new org.apache.commons.math.linear.ArrayRealVector(var17, false);
    org.apache.commons.math.linear.RealVector var22 = var17.mapSinhToSelf();
    org.apache.commons.math.linear.ArrayRealVector var24 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var25 = var24.getData();
    org.apache.commons.math.linear.RealVector var26 = var24.mapSignum();
    double[] var27 = var24.toArray();
    org.apache.commons.math.linear.ArrayRealVector var29 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var30 = var29.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var31 = var29.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var33 = new org.apache.commons.math.linear.ArrayRealVector(var29, false);
    org.apache.commons.math.linear.RealVector var34 = var33.mapLog1pToSelf();
    org.apache.commons.math.linear.RealVector var35 = var33.mapTan();
    org.apache.commons.math.linear.ArrayRealVector var37 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var39 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var41 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var39, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var42 = new org.apache.commons.math.linear.ArrayRealVector(var37, var39);
    org.apache.commons.math.linear.RealVector var43 = var42.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var44 = var42.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var45 = var42.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var48 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var49 = var48.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var50 = var48.mapLog1p();
    var42.setSubVector(0, (org.apache.commons.math.linear.RealVector)var48);
    double[] var52 = var48.getData();
    org.apache.commons.math.linear.ArrayRealVector var54 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var56 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var58 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var56, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var59 = new org.apache.commons.math.linear.ArrayRealVector(var54, var56);
    org.apache.commons.math.optimization.RealPointValuePair var62 = new org.apache.commons.math.optimization.RealPointValuePair(var56, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var63 = new org.apache.commons.math.linear.ArrayRealVector(var52, var56);
    org.apache.commons.math.linear.ArrayRealVector var64 = new org.apache.commons.math.linear.ArrayRealVector(var52);
    double[] var65 = var64.toArray();
    org.apache.commons.math.linear.RealVector var66 = var33.add(var65);
    org.apache.commons.math.linear.ArrayRealVector var67 = new org.apache.commons.math.linear.ArrayRealVector(var24, var65);
    org.apache.commons.math.linear.RealVector var68 = var17.add(var65);
    org.apache.commons.math.linear.ArrayRealVector var70 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var71 = var70.getData();
    double[] var72 = var70.getData();
    double[] var73 = null;
    double var74 = org.apache.commons.math.util.MathUtils.distanceInf(var72, var73);
    double var75 = org.apache.commons.math.util.MathUtils.distance(var65, var72);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.optimization.linear.LinearConstraint var77 = new org.apache.commons.math.optimization.linear.LinearConstraint(var11, (-1.2074402543612646d), var15, var72, (-0.6853722608524322d));
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0.0d);

  }

  public void test381() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test381"); }


    org.apache.commons.math.ConvergenceException var0 = new org.apache.commons.math.ConvergenceException();
    java.lang.Object[] var3 = new java.lang.Object[] { 0};
    org.apache.commons.math.ConvergenceException var4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var0, "", var3);
    java.lang.String var5 = var0.toString();
    java.lang.IllegalArgumentException var6 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "org.apache.commons.math.ConvergenceException: Convergence failed"+ "'", var5.equals("org.apache.commons.math.ConvergenceException: Convergence failed"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test382() {}
//   public void test382() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test382"); }
// 
// 
//     java.lang.Class var0 = null;
//     java.lang.Enum var2 = java.lang.Enum.<java.lang.Enum>valueOf(var0, "}");
// 
//   }

  public void test383() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test383"); }


    double[] var2 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var3 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var2);
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var7 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var9 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var7, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(var5, var7);
    double[] var11 = var3.operate(var7);
    double var12 = var3.getFrobeniusNorm();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double[] var14 = var3.getColumn((-100));
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1.0d);

  }

  public void test384() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test384"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapLog10();
    org.apache.commons.math.linear.RealVector var3 = var1.mapExpm1ToSelf();
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var6 = var5.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var7 = var5.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var9 = new org.apache.commons.math.linear.ArrayRealVector(var5, false);
    org.apache.commons.math.linear.RealVector var10 = var1.subtract((org.apache.commons.math.linear.RealVector)var9);
    double[] var11 = var1.getDataRef();
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var13 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var11, 1.3440585709080678E43d);
    double[] var16 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var17 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var16);
    org.apache.commons.math.linear.ArrayRealVector var19 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var21 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var23 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var21, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var24 = new org.apache.commons.math.linear.ArrayRealVector(var19, var21);
    double[] var25 = var17.operate(var21);
    org.apache.commons.math.linear.ArrayRealVector var26 = new org.apache.commons.math.linear.ArrayRealVector(var21);
    org.apache.commons.math.optimization.linear.Relationship var28 = null;
    double[] var31 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var32 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var31);
    org.apache.commons.math.linear.ArrayRealVector var34 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var36 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var38 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var36, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var39 = new org.apache.commons.math.linear.ArrayRealVector(var34, var36);
    double[] var40 = var32.operate(var36);
    org.apache.commons.math.linear.ArrayRealVector var41 = new org.apache.commons.math.linear.ArrayRealVector(var36);
    org.apache.commons.math.optimization.linear.LinearConstraint var43 = new org.apache.commons.math.optimization.linear.LinearConstraint(var21, 50.0d, var28, var36, 2.302585092994046d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var44 = var13.getValue(var21);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test385() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test385"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var8.setEntry(1079574528, 100, 0.0d);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);

  }

  public void test386() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test386"); }


    java.text.NumberFormat var0 = null;
    org.apache.commons.math.linear.RealVectorFormat var1 = new org.apache.commons.math.linear.RealVectorFormat(var0);
    java.text.NumberFormat var2 = var1.getFormat();
    java.lang.String var3 = var1.getSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "; "+ "'", var3.equals("; "));

  }

  public void test387() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test387"); }


    org.apache.commons.math.linear.Array2DRowRealMatrix var0 = new org.apache.commons.math.linear.Array2DRowRealMatrix();
    int var1 = var0.getRowDimension();
    int var2 = var0.getRowDimension();
    org.apache.commons.math.linear.ArrayRealVector var4 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var5 = var4.getData();
    double[] var6 = var4.getData();
    double[] var7 = var0.solve(var6);
    org.apache.commons.math.linear.Array2DRowRealMatrix var11 = new org.apache.commons.math.linear.Array2DRowRealMatrix(10, 100);
    double[][] var12 = var11.getDataRef();
    java.lang.ArrayIndexOutOfBoundsException var13 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("Convergence failed", (java.lang.Object[])var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setSubMatrix(var12, 101, 100);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test388() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test388"); }


    boolean var3 = org.apache.commons.math.util.MathUtils.equals(2.0d, (-47.69741490700596d), (-71876953));

  }

  public void test389() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test389"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapLog10();
    org.apache.commons.math.linear.RealVector var3 = var1.mapExpm1ToSelf();
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var6 = var5.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var7 = var5.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var9 = new org.apache.commons.math.linear.ArrayRealVector(var5, false);
    org.apache.commons.math.linear.RealVector var10 = var1.subtract((org.apache.commons.math.linear.RealVector)var9);
    org.apache.commons.math.linear.RealVector var11 = var9.mapTanhToSelf();
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var15 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var17 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var15, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(var13, var15);
    org.apache.commons.math.linear.RealVector var19 = var18.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var20 = var18.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var21 = var18.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var24 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var25 = var24.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var26 = var24.mapLog1p();
    var18.setSubVector(0, (org.apache.commons.math.linear.RealVector)var24);
    double[] var28 = var24.getData();
    org.apache.commons.math.linear.ArrayRealVector var30 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var32 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var34 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var32, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var35 = new org.apache.commons.math.linear.ArrayRealVector(var30, var32);
    org.apache.commons.math.optimization.RealPointValuePair var38 = new org.apache.commons.math.optimization.RealPointValuePair(var32, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var39 = new org.apache.commons.math.linear.ArrayRealVector(var28, var32);
    org.apache.commons.math.linear.ArrayRealVector var40 = new org.apache.commons.math.linear.ArrayRealVector(var28);
    double[] var42 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var44 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var42, 1.0d);
    double[] var47 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var48 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var47);
    org.apache.commons.math.linear.ArrayRealVector var50 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var52 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var54 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var52, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var55 = new org.apache.commons.math.linear.ArrayRealVector(var50, var52);
    double[] var56 = var48.operate(var52);
    double var57 = org.apache.commons.math.util.MathUtils.distance1(var42, var52);
    double var58 = org.apache.commons.math.util.MathUtils.distanceInf(var28, var52);
    double var59 = var9.getL1Distance(var28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealVector var60 = var9.unitVector();
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0.0d);

  }

  public void test390() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test390"); }


    org.apache.commons.math.linear.RealVectorFormat var0 = org.apache.commons.math.linear.RealVectorFormat.getInstance();
    java.lang.String var1 = var0.getSuffix();
    java.lang.Object var2 = var0.clone();
    java.lang.String var3 = var0.getSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "}"+ "'", var1.equals("}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "; "+ "'", var3.equals("; "));

  }

  public void test391() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test391"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    org.apache.commons.math.linear.RealMatrix var9 = var8.copy();
    double[] var11 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var13 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var11, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var15 = new org.apache.commons.math.optimization.RealPointValuePair(var11, 0.0d);
    double[][] var16 = new double[][] { var11};
    org.apache.commons.math.linear.Array2DRowRealMatrix var18 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var16, true);
    double var19 = var18.getFrobeniusNorm();
    double[] var22 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var24 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var22, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var26 = new org.apache.commons.math.optimization.RealPointValuePair(var22, 0.0d);
    double[][] var27 = new double[][] { var22};
    org.apache.commons.math.linear.Array2DRowRealMatrix var29 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var27, true);
    double var30 = var29.getFrobeniusNorm();
    var18.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var29);
    org.apache.commons.math.linear.RealMatrix var32 = var18.transpose();
    double[] var34 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var36 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var34, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var38 = new org.apache.commons.math.optimization.RealPointValuePair(var34, 0.0d);
    double[][] var39 = new double[][] { var34};
    org.apache.commons.math.linear.Array2DRowRealMatrix var41 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var39, true);
    double var42 = var41.getFrobeniusNorm();
    double[] var45 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var47 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var45, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var49 = new org.apache.commons.math.optimization.RealPointValuePair(var45, 0.0d);
    double[][] var50 = new double[][] { var45};
    org.apache.commons.math.linear.Array2DRowRealMatrix var52 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var50, true);
    double var53 = var52.getFrobeniusNorm();
    var41.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var52);
    org.apache.commons.math.linear.RealMatrix var55 = var52.inverse();
    int var56 = var52.getRowDimension();
    double[][] var57 = var52.getData();
    org.apache.commons.math.linear.RealMatrix var58 = var18.solve((org.apache.commons.math.linear.RealMatrix)var52);
    org.apache.commons.math.linear.RealMatrix var59 = var8.preMultiply((org.apache.commons.math.linear.RealMatrix)var52);
    int[] var60 = new int[] { };
    int[] var61 = new int[] { };
    int var62 = org.apache.commons.math.util.MathUtils.distanceInf(var60, var61);
    int[] var63 = new int[] { };
    int[] var64 = new int[] { };
    int var65 = org.apache.commons.math.util.MathUtils.distanceInf(var63, var64);
    double var66 = org.apache.commons.math.util.MathUtils.distance(var60, var63);
    int[] var67 = new int[] { };
    int[] var68 = new int[] { };
    int var69 = org.apache.commons.math.util.MathUtils.distanceInf(var67, var68);
    int[] var70 = new int[] { };
    int[] var71 = new int[] { };
    int var72 = org.apache.commons.math.util.MathUtils.distanceInf(var70, var71);
    double var73 = org.apache.commons.math.util.MathUtils.distance(var67, var70);
    int[] var74 = new int[] { };
    int[] var75 = new int[] { };
    int var76 = org.apache.commons.math.util.MathUtils.distanceInf(var74, var75);
    int[] var77 = new int[] { };
    int[] var78 = new int[] { };
    int var79 = org.apache.commons.math.util.MathUtils.distanceInf(var77, var78);
    int[] var80 = new int[] { };
    int[] var81 = new int[] { };
    int var82 = org.apache.commons.math.util.MathUtils.distanceInf(var80, var81);
    double var83 = org.apache.commons.math.util.MathUtils.distance(var77, var80);
    int[] var84 = new int[] { };
    int[] var85 = new int[] { };
    int var86 = org.apache.commons.math.util.MathUtils.distanceInf(var84, var85);
    int var87 = org.apache.commons.math.util.MathUtils.distanceInf(var80, var84);
    double var88 = org.apache.commons.math.util.MathUtils.distance(var74, var80);
    int var89 = org.apache.commons.math.util.MathUtils.distance1(var70, var74);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealMatrix var90 = var8.getSubMatrix(var63, var74);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);

  }

  public void test392() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test392"); }


    double var2 = org.apache.commons.math.util.MathUtils.normalizeAngle((-47.69741490700596d), 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 8.85125285761032d);

  }

  public void test393() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test393"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    org.apache.commons.math.linear.RealMatrix var22 = var19.inverse();
    int var23 = var19.getRowDimension();
    double[][] var24 = var19.getData();
    org.apache.commons.math.linear.Array2DRowRealMatrix var26 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var24, false);
    var26.multiplyEntry(0, 0, 0.03933967394071772d);
    double[][] var31 = var26.getData();
    double[][] var32 = var26.getData();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test394() {}
//   public void test394() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test394"); }
// 
// 
//     org.apache.commons.math.linear.RealVector var0 = null;
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var2 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var0, 1.731030945644E13d);
//     java.lang.Double[] var4 = new java.lang.Double[] { 49.73451754256331d};
//     org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(var4);
//     org.apache.commons.math.linear.ArrayRealVector var7 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var9 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var11 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var9, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var12 = new org.apache.commons.math.linear.ArrayRealVector(var7, var9);
//     org.apache.commons.math.linear.RealVector var13 = var5.subtract(var9);
//     org.apache.commons.math.linear.ArrayRealVector var14 = new org.apache.commons.math.linear.ArrayRealVector(var9);
//     org.apache.commons.math.linear.ArrayRealVector var16 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var18 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var20 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var18, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var21 = new org.apache.commons.math.linear.ArrayRealVector(var16, var18);
//     org.apache.commons.math.optimization.RealPointValuePair var24 = new org.apache.commons.math.optimization.RealPointValuePair(var18, 1.0d, true);
//     org.apache.commons.math.linear.ArrayRealVector var26 = new org.apache.commons.math.linear.ArrayRealVector(var18, true);
//     int var27 = var26.getDimension();
//     java.lang.Double[] var29 = new java.lang.Double[] { 49.73451754256331d};
//     org.apache.commons.math.linear.ArrayRealVector var30 = new org.apache.commons.math.linear.ArrayRealVector(var29);
//     org.apache.commons.math.linear.RealVector var31 = var30.mapLogToSelf();
//     org.apache.commons.math.linear.ArrayRealVector var32 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var30);
//     org.apache.commons.math.linear.RealVector var33 = var26.add((org.apache.commons.math.linear.RealVector)var32);
//     java.lang.Double[] var35 = new java.lang.Double[] { 49.73451754256331d};
//     org.apache.commons.math.linear.ArrayRealVector var36 = new org.apache.commons.math.linear.ArrayRealVector(var35);
//     org.apache.commons.math.linear.ArrayRealVector var37 = var32.projection(var36);
//     org.apache.commons.math.linear.RealVector var38 = var37.mapSinh();
//     org.apache.commons.math.linear.ArrayRealVector var39 = new org.apache.commons.math.linear.ArrayRealVector(var14, var37);
//     double var40 = var2.getValue((org.apache.commons.math.linear.RealVector)var37);
// 
//   }

  public void test395() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test395"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var8 = var1.mapMultiply(1.0d);
    org.apache.commons.math.optimization.linear.Relationship var9 = null;
    org.apache.commons.math.optimization.linear.LinearConstraint var11 = new org.apache.commons.math.optimization.linear.LinearConstraint(var8, var9, (-1.0d));
    double var12 = var11.getValue();
    java.lang.Object var13 = null;
    boolean var14 = var11.equals(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test396() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test396"); }


    org.apache.commons.math.linear.ArrayRealVector var2 = new org.apache.commons.math.linear.ArrayRealVector(0, 0.0d);

  }

  public void test397() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test397"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAsin();
    org.apache.commons.math.linear.RealVector var4 = var1.mapCbrt();
    org.apache.commons.math.optimization.linear.Relationship var6 = null;
    org.apache.commons.math.linear.ArrayRealVector var8 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.optimization.linear.LinearConstraint var10 = new org.apache.commons.math.optimization.linear.LinearConstraint(var4, 363.7393755555636d, var6, (org.apache.commons.math.linear.RealVector)var8, 10.0d);
    org.apache.commons.math.linear.RealVector var12 = var8.mapPowToSelf(20.0d);
    org.apache.commons.math.linear.RealVector var13 = var8.mapTan();
    double[] var14 = var8.getDataRef();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test398() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test398"); }


    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var7 = new org.apache.commons.math.optimization.RealPointValuePair(var3, 0.0d);
    double[][] var8 = new double[][] { var3};
    org.apache.commons.math.linear.Array2DRowRealMatrix var10 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var8, true);
    org.apache.commons.math.linear.Array2DRowRealMatrix var11 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var8);
    java.lang.ArrayIndexOutOfBoundsException var12 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("Convergence failed", (java.lang.Object[])var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.ConvergenceException var13 = new org.apache.commons.math.ConvergenceException("Array2DRowRealMatrix{}", (java.lang.Object[])var8);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test399() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test399"); }


    double var1 = org.apache.commons.math.util.MathUtils.cosh(1732.4286165853446d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == Double.POSITIVE_INFINITY);

  }

  public void test400() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test400"); }


    double[] var2 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var4 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var2, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var6 = new org.apache.commons.math.optimization.RealPointValuePair(var2, 0.0d);
    double[][] var7 = new double[][] { var2};
    org.apache.commons.math.linear.Array2DRowRealMatrix var9 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var7, true);
    org.apache.commons.math.linear.Array2DRowRealMatrix var10 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var7);
    java.lang.IllegalArgumentException var11 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", (java.lang.Object[])var7);
    org.apache.commons.math.linear.Array2DRowRealMatrix var12 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var7);
    int var13 = var12.getColumnDimension();
    org.apache.commons.math.linear.RealMatrix var15 = var12.scalarAdd((-1.2074402543612646d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test401() {}
//   public void test401() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test401"); }
// 
// 
//     java.math.BigInteger var0 = null;
//     java.math.BigInteger var1 = null;
//     java.math.BigInteger var3 = org.apache.commons.math.util.MathUtils.pow(var1, 0L);
//     java.math.BigInteger var5 = org.apache.commons.math.util.MathUtils.pow(var3, 1073741824);
//     java.math.BigInteger var7 = org.apache.commons.math.util.MathUtils.pow(var5, 10L);
//     java.math.BigInteger var8 = org.apache.commons.math.util.MathUtils.pow(var0, var7);
// 
//   }

  public void test402() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test402"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    double var22 = var19.getDeterminant();
    double[] var24 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var26 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var24, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var28 = new org.apache.commons.math.optimization.RealPointValuePair(var24, 0.0d);
    double[][] var29 = new double[][] { var24};
    org.apache.commons.math.linear.Array2DRowRealMatrix var31 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var29, true);
    double var32 = var31.getFrobeniusNorm();
    double[] var35 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var37 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var35, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var39 = new org.apache.commons.math.optimization.RealPointValuePair(var35, 0.0d);
    double[][] var40 = new double[][] { var35};
    org.apache.commons.math.linear.Array2DRowRealMatrix var42 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var40, true);
    double var43 = var42.getFrobeniusNorm();
    var31.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var42);
    org.apache.commons.math.linear.RealMatrix var45 = var42.inverse();
    int var46 = var42.getRowDimension();
    double[][] var47 = var42.getData();
    org.apache.commons.math.linear.Array2DRowRealMatrix var49 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var47, false);
    var49.multiplyEntry(0, 0, 0.03933967394071772d);
    double[][] var54 = var49.getData();
    org.apache.commons.math.linear.RealMatrix var55 = var19.preMultiply((org.apache.commons.math.linear.RealMatrix)var49);
    double var56 = var49.getTrace();
    org.apache.commons.math.linear.RealMatrix var57 = var49.transpose();
    org.apache.commons.math.linear.ArrayRealVector var59 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var60 = var59.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var61 = var59.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var63 = new org.apache.commons.math.linear.ArrayRealVector(var59, false);
    org.apache.commons.math.linear.RealVector var65 = var63.mapDivideToSelf(0.0d);
    org.apache.commons.math.linear.RealVector var67 = var63.mapDivideToSelf(0.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealVector var68 = var49.preMultiply((org.apache.commons.math.linear.RealVector)var63);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0.03933967394071772d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test403() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test403"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    java.lang.String var8 = var6.toString();
    org.apache.commons.math.linear.RealVector var10 = var6.mapAddToSelf(10.0d);
    org.apache.commons.math.linear.RealVector var11 = var6.mapLog10();
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(var6, false);
    org.apache.commons.math.linear.RealVector var15 = var13.mapPow(10.0d);
    org.apache.commons.math.linear.RealVector var16 = var13.copy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "{1.54}"+ "'", var8.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test404() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test404"); }


    double var1 = org.apache.commons.math.util.MathUtils.sign(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.0d);

  }

  public void test405() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test405"); }


    int var2 = org.apache.commons.math.util.MathUtils.pow(0, 10000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);

  }

  public void test406() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test406"); }


    double var2 = org.apache.commons.math.util.MathUtils.nextAfter(0.0d, (-0.7d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-4.9E-324d));

  }

  public void test407() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test407"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAcos();
    double[] var6 = new double[] { 1.0d, 0.0d};
    org.apache.commons.math.linear.RealVector var7 = var1.append(var6);
    double var8 = var1.getL1Norm();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);

  }

  public void test408() {}
//   public void test408() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test408"); }
// 
// 
//     java.lang.Class var0 = null;
//     java.lang.Enum var2 = java.lang.Enum.<java.lang.Enum>valueOf(var0, "org.apache.commons.math.ConvergenceException: ");
// 
//   }

  public void test409() {}
//   public void test409() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test409"); }
// 
// 
//     org.apache.commons.math.linear.RealVectorFormat var0 = org.apache.commons.math.linear.RealVectorFormat.getInstance();
//     java.lang.String var1 = var0.getSuffix();
//     java.lang.Object var2 = var0.clone();
//     org.apache.commons.math.linear.ArrayRealVector var4 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     org.apache.commons.math.linear.RealVector var5 = var4.mapCosToSelf();
//     org.apache.commons.math.linear.RealVector var6 = var4.mapAsin();
//     org.apache.commons.math.linear.ArrayRealVector var8 = new org.apache.commons.math.linear.ArrayRealVector(var4, false);
//     org.apache.commons.math.linear.RealVector var9 = var4.mapAbs();
//     java.lang.String var10 = var0.format((java.lang.Object)var9);
//     org.apache.commons.math.linear.ArrayRealVector var12 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     org.apache.commons.math.linear.RealVector var13 = var12.mapCosToSelf();
//     org.apache.commons.math.linear.RealVector var14 = var12.mapAsin();
//     org.apache.commons.math.linear.ArrayRealVector var16 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     org.apache.commons.math.linear.RealVector var17 = var16.mapCosToSelf();
//     org.apache.commons.math.linear.RealVector var18 = var16.mapAsin();
//     org.apache.commons.math.linear.RealVector var19 = var16.mapCbrt();
//     org.apache.commons.math.optimization.linear.Relationship var21 = null;
//     org.apache.commons.math.linear.ArrayRealVector var23 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     org.apache.commons.math.optimization.linear.LinearConstraint var25 = new org.apache.commons.math.optimization.linear.LinearConstraint(var19, 363.7393755555636d, var21, (org.apache.commons.math.linear.RealVector)var23, 10.0d);
//     double var26 = var12.getL1Distance(var23);
//     java.lang.StringBuffer var27 = null;
//     java.text.FieldPosition var28 = null;
//     java.lang.StringBuffer var29 = var0.format((org.apache.commons.math.linear.RealVector)var23, var27, var28);
// 
//   }

  public void test410() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test410"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAcos();
    java.lang.String var4 = var1.toString();
    org.apache.commons.math.linear.RealVector var5 = var1.mapAcosToSelf();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealVector var8 = var1.getSubVector((-71876953), 1079574528);
      fail("Expected exception of type java.lang.OutOfMemoryError");
    } catch (java.lang.OutOfMemoryError e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "{}"+ "'", var4.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test411() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test411"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var8 = var6.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var9 = var6.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var12 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var13 = var12.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var14 = var12.mapLog1p();
    var6.setSubVector(0, (org.apache.commons.math.linear.RealVector)var12);
    double var16 = var12.getNorm();
    org.apache.commons.math.linear.RealVector var17 = var12.mapCbrtToSelf();
    org.apache.commons.math.linear.RealVector var18 = var12.mapExpToSelf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test412() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test412"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var8 = var6.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var9 = var6.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var12 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var13 = var12.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var14 = var12.mapLog1p();
    var6.setSubVector(0, (org.apache.commons.math.linear.RealVector)var12);
    org.apache.commons.math.linear.RealVector var16 = var12.mapCosh();
    org.apache.commons.math.linear.RealVector var17 = var12.mapExpm1();
    org.apache.commons.math.linear.ArrayRealVector var19 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var20 = var19.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var21 = var19.mapAsin();
    org.apache.commons.math.linear.RealVector var22 = var19.mapCbrt();
    org.apache.commons.math.linear.RealVector var23 = var19.mapUlp();
    org.apache.commons.math.linear.RealVector var24 = var19.mapRint();
    org.apache.commons.math.linear.ArrayRealVector var25 = var12.subtract(var19);
    org.apache.commons.math.linear.ArrayRealVector var27 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var28 = var27.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var29 = var27.mapAcos();
    org.apache.commons.math.linear.ArrayRealVector var30 = var12.ebeMultiply(var27);
    org.apache.commons.math.linear.RealVector var31 = var27.mapSin();
    org.apache.commons.math.linear.RealVector var32 = var27.mapAcosToSelf();
    org.apache.commons.math.linear.RealVector var34 = var27.mapPowToSelf(1.8219365641849925d);
    org.apache.commons.math.optimization.linear.Relationship var35 = null;
    org.apache.commons.math.optimization.linear.LinearConstraint var37 = new org.apache.commons.math.optimization.linear.LinearConstraint(var34, var35, 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test413() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test413"); }


    int var2 = org.apache.commons.math.util.MathUtils.pow(2, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);

  }

  public void test414() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test414"); }


    java.lang.Double[] var1 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var2 = new org.apache.commons.math.linear.ArrayRealVector(var1);
    org.apache.commons.math.linear.ArrayRealVector var4 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var6 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var8 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var6, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var9 = new org.apache.commons.math.linear.ArrayRealVector(var4, var6);
    org.apache.commons.math.linear.RealVector var10 = var2.subtract(var6);
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(var6);
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var15 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var17 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var15, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(var13, var15);
    org.apache.commons.math.linear.RealVector var19 = var18.mapCoshToSelf();
    java.lang.String var20 = var18.toString();
    org.apache.commons.math.linear.RealVector var21 = var18.mapRint();
    org.apache.commons.math.linear.RealVector var22 = var18.mapAbsToSelf();
    boolean var23 = var18.isInfinite();
    org.apache.commons.math.linear.RealVector var25 = var18.mapAdd(0.0d);
    org.apache.commons.math.linear.RealVector var26 = var18.mapCeil();
    double var27 = var11.getDistance(var18);
    org.apache.commons.math.linear.RealVector var28 = var11.mapInvToSelf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "{1.54}"+ "'", var20.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5430806348152439d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test415() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test415"); }


    org.apache.commons.math.linear.Array2DRowRealMatrix var0 = new org.apache.commons.math.linear.Array2DRowRealMatrix();
    int var1 = var0.getRowDimension();
    int var2 = var0.getRowDimension();
    int var3 = var0.getRowDimension();
    double var4 = var0.getTrace();
    int[] var5 = new int[] { };
    int[] var6 = new int[] { };
    int var7 = org.apache.commons.math.util.MathUtils.distanceInf(var5, var6);
    int[] var8 = new int[] { };
    int[] var9 = new int[] { };
    int var10 = org.apache.commons.math.util.MathUtils.distanceInf(var8, var9);
    double var11 = org.apache.commons.math.util.MathUtils.distance(var5, var8);
    int[] var12 = new int[] { };
    int[] var13 = new int[] { };
    int var14 = org.apache.commons.math.util.MathUtils.distanceInf(var12, var13);
    int[] var15 = new int[] { };
    int[] var16 = new int[] { };
    int var17 = org.apache.commons.math.util.MathUtils.distanceInf(var15, var16);
    double var18 = org.apache.commons.math.util.MathUtils.distance(var12, var15);
    int[] var19 = new int[] { };
    int[] var20 = new int[] { };
    int var21 = org.apache.commons.math.util.MathUtils.distanceInf(var19, var20);
    int[] var22 = new int[] { };
    int[] var23 = new int[] { };
    int var24 = org.apache.commons.math.util.MathUtils.distanceInf(var22, var23);
    int[] var25 = new int[] { };
    int[] var26 = new int[] { };
    int var27 = org.apache.commons.math.util.MathUtils.distanceInf(var25, var26);
    double var28 = org.apache.commons.math.util.MathUtils.distance(var22, var25);
    int[] var29 = new int[] { };
    int[] var30 = new int[] { };
    int var31 = org.apache.commons.math.util.MathUtils.distanceInf(var29, var30);
    int var32 = org.apache.commons.math.util.MathUtils.distanceInf(var25, var29);
    double var33 = org.apache.commons.math.util.MathUtils.distance(var19, var25);
    int var34 = org.apache.commons.math.util.MathUtils.distance1(var15, var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealMatrix var35 = var0.getSubMatrix(var8, var15);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);

  }

  public void test416() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test416"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAcos();
    org.apache.commons.math.linear.RealVector var4 = var1.mapLog10();
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var8 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var10 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var8, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(var6, var8);
    org.apache.commons.math.linear.RealVector var12 = var6.mapRint();
    org.apache.commons.math.linear.RealVector var13 = var6.mapExpm1();
    org.apache.commons.math.linear.ArrayRealVector var15 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var17 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var19 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var17, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var20 = new org.apache.commons.math.linear.ArrayRealVector(var15, var17);
    org.apache.commons.math.linear.RealVector var21 = var20.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var22 = var20.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var23 = var20.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var26 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var27 = var26.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var28 = var26.mapLog1p();
    var20.setSubVector(0, (org.apache.commons.math.linear.RealVector)var26);
    double[] var30 = var26.getData();
    org.apache.commons.math.linear.ArrayRealVector var32 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var34 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var36 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var34, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var37 = new org.apache.commons.math.linear.ArrayRealVector(var32, var34);
    org.apache.commons.math.optimization.RealPointValuePair var40 = new org.apache.commons.math.optimization.RealPointValuePair(var34, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var41 = new org.apache.commons.math.linear.ArrayRealVector(var30, var34);
    org.apache.commons.math.linear.ArrayRealVector var42 = new org.apache.commons.math.linear.ArrayRealVector(var30);
    double[] var44 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var46 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var44, 1.0d);
    double[] var49 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var50 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var49);
    org.apache.commons.math.linear.ArrayRealVector var52 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var54 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var56 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var54, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var57 = new org.apache.commons.math.linear.ArrayRealVector(var52, var54);
    double[] var58 = var50.operate(var54);
    double var59 = org.apache.commons.math.util.MathUtils.distance1(var44, var54);
    double var60 = org.apache.commons.math.util.MathUtils.distanceInf(var30, var54);
    org.apache.commons.math.linear.ArrayRealVector var61 = new org.apache.commons.math.linear.ArrayRealVector(var54);
    org.apache.commons.math.linear.RealVector var62 = var6.append(var54);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealVector var63 = var1.projection(var54);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test417() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test417"); }


    boolean var2 = org.apache.commons.math.util.MathUtils.equals(1.3440585709080678E43d, 0.5430806348152439d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test418() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test418"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    java.lang.String var10 = var8.toString();
    org.apache.commons.math.linear.RealMatrix var11 = var8.copy();
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var15 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var17 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var15, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(var13, var15);
    org.apache.commons.math.optimization.RealPointValuePair var21 = new org.apache.commons.math.optimization.RealPointValuePair(var15, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var23 = new org.apache.commons.math.linear.ArrayRealVector(var15, true);
    int var24 = var23.getDimension();
    java.lang.Double[] var26 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var27 = new org.apache.commons.math.linear.ArrayRealVector(var26);
    org.apache.commons.math.linear.RealVector var28 = var27.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var29 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var27);
    org.apache.commons.math.linear.RealVector var30 = var23.add((org.apache.commons.math.linear.RealVector)var29);
    java.lang.Double[] var32 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var33 = new org.apache.commons.math.linear.ArrayRealVector(var32);
    org.apache.commons.math.linear.ArrayRealVector var34 = var29.projection(var33);
    org.apache.commons.math.linear.RealVector var35 = var34.mapCosh();
    boolean var36 = var8.equals((java.lang.Object)var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Array2DRowRealMatrix{{1.0}}"+ "'", var10.equals("Array2DRowRealMatrix{{1.0}}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test419() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test419"); }


    java.math.BigInteger var0 = null;
    java.math.BigInteger var2 = org.apache.commons.math.util.MathUtils.pow(var0, 0L);
    java.math.BigInteger var4 = org.apache.commons.math.util.MathUtils.pow(var2, 1073741824);
    java.math.BigInteger var6 = org.apache.commons.math.util.MathUtils.pow(var4, 10L);
    java.math.BigInteger var8 = org.apache.commons.math.util.MathUtils.pow(var4, 101);
    java.math.BigInteger var10 = org.apache.commons.math.util.MathUtils.pow(var8, 9999L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test420() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test420"); }


    double[] var2 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var3 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var2);
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var7 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var9 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var7, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(var5, var7);
    double[] var11 = var3.operate(var7);
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var15 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var17 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var15, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(var13, var15);
    org.apache.commons.math.linear.RealVector var19 = var18.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var20 = var18.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var21 = var18.mapRintToSelf();
    org.apache.commons.math.linear.RealVector var23 = var18.mapSubtractToSelf(0.5430806348152439d);
    double[] var24 = var18.getData();
    boolean var25 = org.apache.commons.math.util.MathUtils.equals(var11, var24);
    org.apache.commons.math.linear.ArrayRealVector var27 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var29 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var31 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var29, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var32 = new org.apache.commons.math.linear.ArrayRealVector(var27, var29);
    org.apache.commons.math.linear.RealVector var33 = var32.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var34 = var32.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var35 = var32.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var38 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var39 = var38.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var40 = var38.mapLog1p();
    var32.setSubVector(0, (org.apache.commons.math.linear.RealVector)var38);
    double[] var42 = var38.getData();
    org.apache.commons.math.linear.ArrayRealVector var44 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var46 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var48 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var46, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var49 = new org.apache.commons.math.linear.ArrayRealVector(var44, var46);
    org.apache.commons.math.optimization.RealPointValuePair var52 = new org.apache.commons.math.optimization.RealPointValuePair(var46, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var53 = new org.apache.commons.math.linear.ArrayRealVector(var42, var46);
    org.apache.commons.math.linear.ArrayRealVector var54 = new org.apache.commons.math.linear.ArrayRealVector(var42);
    double[] var56 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var58 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var56, 1.0d);
    double[] var61 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var62 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var61);
    org.apache.commons.math.linear.ArrayRealVector var64 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var66 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var68 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var66, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var69 = new org.apache.commons.math.linear.ArrayRealVector(var64, var66);
    double[] var70 = var62.operate(var66);
    double var71 = org.apache.commons.math.util.MathUtils.distance1(var56, var66);
    double var72 = org.apache.commons.math.util.MathUtils.distanceInf(var42, var66);
    org.apache.commons.math.linear.Array2DRowRealMatrix var73 = new org.apache.commons.math.linear.Array2DRowRealMatrix();
    int var74 = var73.getRowDimension();
    int var75 = var73.getRowDimension();
    org.apache.commons.math.linear.ArrayRealVector var77 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var78 = var77.getData();
    double[] var79 = var77.getData();
    double[] var80 = var73.solve(var79);
    org.apache.commons.math.linear.ArrayRealVector var81 = new org.apache.commons.math.linear.ArrayRealVector(var42, var80);
    org.apache.commons.math.linear.ArrayRealVector var82 = new org.apache.commons.math.linear.ArrayRealVector(var24, var80);
    org.apache.commons.math.linear.ArrayRealVector var84 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var85 = var84.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var86 = var84.mapAcos();
    java.lang.String var87 = var84.toString();
    org.apache.commons.math.linear.RealVector var88 = var84.mapTanToSelf();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealMatrix var89 = var82.outerProduct(var88);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "{}"+ "'", var87.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test421() {}
//   public void test421() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test421"); }
// 
// 
//     double[] var1 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
//     double[][] var6 = new double[][] { var1};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
//     double var9 = var8.getFrobeniusNorm();
//     org.apache.commons.math.linear.RealMatrix var10 = var8.transpose();
//     int var11 = var8.getColumnDimension();
//     org.apache.commons.math.linear.RealMatrix var12 = var8.inverse();
//     double[] var14 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var16 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var14, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var18 = new org.apache.commons.math.optimization.RealPointValuePair(var14, 0.0d);
//     double[][] var19 = new double[][] { var14};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var21 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var19, true);
//     double var22 = var21.getFrobeniusNorm();
//     double[] var25 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var27 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var25, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var29 = new org.apache.commons.math.optimization.RealPointValuePair(var25, 0.0d);
//     double[][] var30 = new double[][] { var25};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var32 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var30, true);
//     double var33 = var32.getFrobeniusNorm();
//     var21.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var32);
//     double[] var36 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var38 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var36, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var40 = new org.apache.commons.math.optimization.RealPointValuePair(var36, 0.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var43 = new org.apache.commons.math.optimization.RealPointValuePair(var36, 50.0d, true);
//     double[] var44 = var32.operate(var36);
//     org.apache.commons.math.linear.ArrayRealVector var46 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var48 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var50 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var48, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var51 = new org.apache.commons.math.linear.ArrayRealVector(var46, var48);
//     org.apache.commons.math.linear.RealVector var52 = var51.mapCoshToSelf();
//     org.apache.commons.math.linear.RealVector var53 = var51.mapAtanToSelf();
//     org.apache.commons.math.linear.RealVector var54 = var51.mapRintToSelf();
//     org.apache.commons.math.linear.RealVector var56 = var51.mapSubtractToSelf(0.5430806348152439d);
//     double[] var57 = var51.getData();
//     double var58 = org.apache.commons.math.util.MathUtils.distance1(var44, var57);
//     double[] var59 = var8.solve(var57);
//     double[][] var60 = null;
//     var8.setSubMatrix(var60, (-100), 10);
// 
//   }

  public void test422() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test422"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.optimization.RealPointValuePair var9 = new org.apache.commons.math.optimization.RealPointValuePair(var3, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(var3, true);
    int var12 = var11.getDimension();
    java.lang.Double[] var14 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var15 = new org.apache.commons.math.linear.ArrayRealVector(var14);
    org.apache.commons.math.linear.RealVector var16 = var15.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var15);
    org.apache.commons.math.linear.RealVector var18 = var11.add((org.apache.commons.math.linear.RealVector)var17);
    java.lang.Double[] var20 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var21 = new org.apache.commons.math.linear.ArrayRealVector(var20);
    org.apache.commons.math.linear.ArrayRealVector var22 = var17.projection(var21);
    org.apache.commons.math.linear.RealVector var23 = var22.mapSinh();
    org.apache.commons.math.linear.RealVector var24 = var22.mapLog10ToSelf();
    double[] var26 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var28 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var26, 1.0d);
    double[] var31 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var32 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var31);
    org.apache.commons.math.linear.ArrayRealVector var34 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var36 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var38 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var36, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var39 = new org.apache.commons.math.linear.ArrayRealVector(var34, var36);
    double[] var40 = var32.operate(var36);
    double var41 = org.apache.commons.math.util.MathUtils.distance1(var26, var36);
    org.apache.commons.math.linear.RealVector var42 = var22.ebeMultiply(var26);
    org.apache.commons.math.linear.Array2DRowRealMatrix var43 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var26);
    int[] var44 = new int[] { };
    int[] var45 = new int[] { };
    int var46 = org.apache.commons.math.util.MathUtils.distanceInf(var44, var45);
    int[] var47 = new int[] { };
    int[] var48 = new int[] { };
    int var49 = org.apache.commons.math.util.MathUtils.distanceInf(var47, var48);
    double var50 = org.apache.commons.math.util.MathUtils.distance(var44, var47);
    int[] var51 = new int[] { };
    int[] var52 = new int[] { };
    int var53 = org.apache.commons.math.util.MathUtils.distanceInf(var51, var52);
    int[] var54 = new int[] { };
    int[] var55 = new int[] { };
    int var56 = org.apache.commons.math.util.MathUtils.distanceInf(var54, var55);
    double var57 = org.apache.commons.math.util.MathUtils.distance(var51, var54);
    int[] var58 = new int[] { };
    int[] var59 = new int[] { };
    int var60 = org.apache.commons.math.util.MathUtils.distanceInf(var58, var59);
    int[] var61 = new int[] { };
    int[] var62 = new int[] { };
    int var63 = org.apache.commons.math.util.MathUtils.distanceInf(var61, var62);
    int[] var64 = new int[] { };
    int[] var65 = new int[] { };
    int var66 = org.apache.commons.math.util.MathUtils.distanceInf(var64, var65);
    double var67 = org.apache.commons.math.util.MathUtils.distance(var61, var64);
    int[] var68 = new int[] { };
    int[] var69 = new int[] { };
    int var70 = org.apache.commons.math.util.MathUtils.distanceInf(var68, var69);
    int var71 = org.apache.commons.math.util.MathUtils.distanceInf(var64, var68);
    double var72 = org.apache.commons.math.util.MathUtils.distance(var58, var64);
    int var73 = org.apache.commons.math.util.MathUtils.distance1(var54, var58);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealMatrix var74 = var43.getSubMatrix(var44, var58);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);

  }

  public void test423() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test423"); }


    org.apache.commons.math.linear.RealVectorFormat var0 = org.apache.commons.math.linear.RealVectorFormat.getInstance();
    java.lang.String var1 = var0.getSuffix();
    java.lang.Object var2 = var0.clone();
    org.apache.commons.math.linear.ArrayRealVector var4 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var5 = var4.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var6 = var4.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var8 = new org.apache.commons.math.linear.ArrayRealVector(var4, false);
    org.apache.commons.math.linear.RealVector var9 = var4.mapAbs();
    java.lang.String var10 = var0.format((java.lang.Object)var9);
    java.text.NumberFormat var11 = var0.getFormat();
    org.apache.commons.math.linear.RealVectorFormat var12 = new org.apache.commons.math.linear.RealVectorFormat(var11);
    double[] var14 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var16 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var14, 1.0d);
    double var17 = var16.getConstantTerm();
    org.apache.commons.math.linear.RealVector var18 = var16.getCoefficients();
    double var19 = var16.getConstantTerm();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.text.AttributedCharacterIterator var20 = var12.formatToCharacterIterator((java.lang.Object)var16);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "}"+ "'", var1.equals("}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "{}"+ "'", var10.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1.0d);

  }

  public void test424() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test424"); }


    java.lang.Object[] var4 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var5 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var4);
    java.lang.Object[] var8 = new java.lang.Object[] { 10L};
    org.apache.commons.math.ConvergenceException var9 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var5, "", var8);
    java.text.ParseException var10 = org.apache.commons.math.MathRuntimeException.createParseException((-1), "org.apache.commons.math.ConvergenceException: Convergence failed", var8);
    org.apache.commons.math.optimization.OptimizationException var11 = new org.apache.commons.math.optimization.OptimizationException((java.lang.Throwable)var10);
    org.apache.commons.math.ConvergenceException var12 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var11);
    java.lang.RuntimeException var13 = org.apache.commons.math.MathRuntimeException.createInternalError((java.lang.Throwable)var12);
    org.apache.commons.math.optimization.OptimizationException var14 = new org.apache.commons.math.optimization.OptimizationException((java.lang.Throwable)var13);
    org.apache.commons.math.ConvergenceException var19 = new org.apache.commons.math.ConvergenceException();
    java.lang.Object[] var22 = new java.lang.Object[] { 0};
    org.apache.commons.math.ConvergenceException var23 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var19, "", var22);
    java.lang.Object[] var27 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var28 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var27);
    org.apache.commons.math.MathRuntimeException var29 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var19, "hi!", var27);
    java.lang.Object[] var30 = var19.getArguments();
    java.lang.Object[] var31 = var19.getArguments();
    java.text.ParseException var32 = org.apache.commons.math.MathRuntimeException.createParseException(0, "}", var31);
    java.lang.IllegalStateException var33 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("; ", var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.MathRuntimeException var34 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var13, "{", var31);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test425() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test425"); }


    java.lang.Double[] var1 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var2 = new org.apache.commons.math.linear.ArrayRealVector(var1);
    org.apache.commons.math.linear.RealVector var3 = var2.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var4 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var2);
    org.apache.commons.math.linear.RealVector var5 = var4.mapSignum();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test426() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test426"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    double[] var23 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var25 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var23, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var27 = new org.apache.commons.math.optimization.RealPointValuePair(var23, 0.0d);
    org.apache.commons.math.optimization.RealPointValuePair var30 = new org.apache.commons.math.optimization.RealPointValuePair(var23, 50.0d, true);
    double[] var31 = var19.operate(var23);
    org.apache.commons.math.linear.ArrayRealVector var33 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var34 = var33.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var35 = var33.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var37 = new org.apache.commons.math.linear.ArrayRealVector(var33, false);
    org.apache.commons.math.linear.RealVector var38 = var37.mapLog1pToSelf();
    org.apache.commons.math.linear.RealVector var39 = var37.mapTan();
    org.apache.commons.math.linear.ArrayRealVector var41 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var43 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var45 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var43, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var46 = new org.apache.commons.math.linear.ArrayRealVector(var41, var43);
    org.apache.commons.math.linear.RealVector var47 = var46.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var48 = var46.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var49 = var46.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var52 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var53 = var52.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var54 = var52.mapLog1p();
    var46.setSubVector(0, (org.apache.commons.math.linear.RealVector)var52);
    double[] var56 = var52.getData();
    org.apache.commons.math.linear.ArrayRealVector var58 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var60 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var62 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var60, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var63 = new org.apache.commons.math.linear.ArrayRealVector(var58, var60);
    org.apache.commons.math.optimization.RealPointValuePair var66 = new org.apache.commons.math.optimization.RealPointValuePair(var60, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var67 = new org.apache.commons.math.linear.ArrayRealVector(var56, var60);
    org.apache.commons.math.linear.ArrayRealVector var68 = new org.apache.commons.math.linear.ArrayRealVector(var56);
    double[] var69 = var68.toArray();
    org.apache.commons.math.linear.RealVector var70 = var37.add(var69);
    org.apache.commons.math.linear.ArrayRealVector var71 = new org.apache.commons.math.linear.ArrayRealVector(var31, var69);
    org.apache.commons.math.optimization.RealPointValuePair var74 = new org.apache.commons.math.optimization.RealPointValuePair(var69, Double.NaN, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test427() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test427"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.optimization.RealPointValuePair var9 = new org.apache.commons.math.optimization.RealPointValuePair(var3, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(var3, true);
    int var12 = var11.getDimension();
    java.lang.Double[] var14 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var15 = new org.apache.commons.math.linear.ArrayRealVector(var14);
    org.apache.commons.math.linear.RealVector var16 = var15.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var15);
    org.apache.commons.math.linear.RealVector var18 = var11.add((org.apache.commons.math.linear.RealVector)var17);
    java.lang.Double[] var20 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var21 = new org.apache.commons.math.linear.ArrayRealVector(var20);
    org.apache.commons.math.linear.ArrayRealVector var22 = var17.projection(var21);
    org.apache.commons.math.linear.RealVector var23 = var17.mapTanh();
    org.apache.commons.math.linear.RealVector var24 = var17.mapExp();
    org.apache.commons.math.linear.ArrayRealVector var26 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var27 = var26.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var28 = var26.mapAsin();
    org.apache.commons.math.linear.RealVector var29 = var26.mapCbrt();
    org.apache.commons.math.linear.RealVector var30 = var26.mapUlp();
    org.apache.commons.math.linear.RealVector var31 = var26.mapRint();
    org.apache.commons.math.linear.RealVector var32 = var26.mapSinh();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.ArrayRealVector var33 = var17.add(var26);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test428() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test428"); }


    float var1 = org.apache.commons.math.util.MathUtils.indicator(100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1.0f);

  }

  public void test429() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test429"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.ConvergenceException var4 = new org.apache.commons.math.ConvergenceException();
    boolean var5 = var3.equals((java.lang.Object)var4);
    java.lang.IllegalArgumentException var6 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable)var4);
    org.apache.commons.math.MathException var7 = new org.apache.commons.math.MathException((java.lang.Throwable)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test430() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test430"); }


    int var2 = org.apache.commons.math.util.MathUtils.addAndCheck(0, 101);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 101);

  }

  public void test431() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test431"); }


    org.apache.commons.math.MaxIterationsExceededException var1 = new org.apache.commons.math.MaxIterationsExceededException(2);

  }

  public void test432() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test432"); }


    org.apache.commons.math.ConvergenceException var2 = new org.apache.commons.math.ConvergenceException();
    java.lang.Object[] var5 = new java.lang.Object[] { 0};
    org.apache.commons.math.ConvergenceException var6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var2, "", var5);
    java.lang.Object[] var10 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var11 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var10);
    org.apache.commons.math.MathRuntimeException var12 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var2, "hi!", var10);
    org.apache.commons.math.MathException var13 = new org.apache.commons.math.MathException("}", var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.ArrayIndexOutOfBoundsException var14 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("Array2DRowRealMatrix{{1.0}}", var10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test433() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test433"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    org.apache.commons.math.linear.RealMatrix var22 = var19.inverse();
    int var23 = var19.getRowDimension();
    double[] var26 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var27 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var26);
    org.apache.commons.math.linear.ArrayRealVector var29 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var31 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var33 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var31, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var34 = new org.apache.commons.math.linear.ArrayRealVector(var29, var31);
    org.apache.commons.math.linear.RealVector var35 = var34.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var36 = var34.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var37 = var34.mapRintToSelf();
    org.apache.commons.math.linear.RealVector var39 = var34.mapSubtractToSelf(0.5430806348152439d);
    org.apache.commons.math.linear.RealVector var40 = var27.operate(var39);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.Array2DRowRealMatrix var41 = var19.add(var27);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test434() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test434"); }


    org.apache.commons.math.ConvergenceException var2 = new org.apache.commons.math.ConvergenceException();
    java.lang.Object[] var5 = new java.lang.Object[] { 0};
    org.apache.commons.math.ConvergenceException var6 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var2, "", var5);
    java.lang.Object[] var10 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var11 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var10);
    org.apache.commons.math.MathRuntimeException var12 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var2, "hi!", var10);
    java.lang.Object[] var13 = var2.getArguments();
    java.lang.Object[] var14 = var2.getArguments();
    java.text.ParseException var15 = org.apache.commons.math.MathRuntimeException.createParseException(0, "}", var14);
    java.lang.Object[] var21 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var22 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var21);
    java.lang.Object[] var25 = new java.lang.Object[] { 10L};
    org.apache.commons.math.ConvergenceException var26 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var22, "", var25);
    org.apache.commons.math.optimization.OptimizationException var27 = new org.apache.commons.math.optimization.OptimizationException((java.lang.Throwable)var26);
    java.lang.Object[] var28 = var26.getArguments();
    org.apache.commons.math.MaxIterationsExceededException var29 = new org.apache.commons.math.MaxIterationsExceededException(1079574528, "hi!", var28);
    org.apache.commons.math.ConvergenceException var30 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var15, "org.apache.commons.math.MathRuntimeException: ", var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test435() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test435"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    org.apache.commons.math.linear.RealMatrix var22 = var19.inverse();
    int var23 = var19.getRowDimension();
    double[][] var24 = var19.getData();
    org.apache.commons.math.linear.Array2DRowRealMatrix var26 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var24, false);
    double[][] var27 = var26.getDataRef();
    org.apache.commons.math.linear.RealVector var29 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var26.setColumnVector((-71876953), var29);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test436() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test436"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAcos();
    java.lang.String var4 = var1.toString();
    org.apache.commons.math.linear.RealVector var5 = var1.mapTanToSelf();
    org.apache.commons.math.linear.RealVector var6 = var1.mapAtan();
    org.apache.commons.math.linear.RealVector var8 = var1.mapDivide(2.302585092994046d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "{}"+ "'", var4.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test437() {}
//   public void test437() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test437"); }
// 
// 
//     double[] var1 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
//     double[][] var6 = new double[][] { var1};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
//     double var9 = var8.getFrobeniusNorm();
//     double[] var12 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
//     double[][] var17 = new double[][] { var12};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
//     double var20 = var19.getFrobeniusNorm();
//     var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
//     double[] var23 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var25 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var23, 1.0d);
//     double[] var28 = new double[] { 0.0d, (-1.0d)};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var29 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var28);
//     org.apache.commons.math.linear.ArrayRealVector var31 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var33 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var35 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var33, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var36 = new org.apache.commons.math.linear.ArrayRealVector(var31, var33);
//     double[] var37 = var29.operate(var33);
//     org.apache.commons.math.linear.ArrayRealVector var38 = new org.apache.commons.math.linear.ArrayRealVector(var33);
//     org.apache.commons.math.optimization.linear.Relationship var40 = null;
//     double[] var43 = new double[] { 0.0d, (-1.0d)};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var44 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var43);
//     org.apache.commons.math.linear.ArrayRealVector var46 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var48 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var50 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var48, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var51 = new org.apache.commons.math.linear.ArrayRealVector(var46, var48);
//     double[] var52 = var44.operate(var48);
//     org.apache.commons.math.linear.ArrayRealVector var53 = new org.apache.commons.math.linear.ArrayRealVector(var48);
//     org.apache.commons.math.optimization.linear.LinearConstraint var55 = new org.apache.commons.math.optimization.linear.LinearConstraint(var33, 50.0d, var40, var48, 2.302585092994046d);
//     double var56 = var25.getValue(var48);
//     org.apache.commons.math.linear.RealVector var57 = var25.getCoefficients();
//     org.apache.commons.math.linear.RealVector var58 = var8.operate(var57);
//     double[] var60 = var8.getRow(0);
//     double[] var62 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var64 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var62, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var66 = new org.apache.commons.math.optimization.RealPointValuePair(var62, 0.0d);
//     double[][] var67 = new double[][] { var62};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var69 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var67, true);
//     org.apache.commons.math.linear.RealMatrix var70 = var69.copy();
//     boolean var71 = var69.isSingular();
//     org.apache.commons.math.linear.Array2DRowRealMatrix var72 = var8.subtract(var69);
//     org.apache.commons.math.linear.RealMatrix var73 = var8.transpose();
//     double[][] var74 = var8.getDataRef();
//     org.apache.commons.math.linear.RealMatrixChangingVisitor var75 = null;
//     double var76 = var8.walkInOptimizedOrder(var75);
// 
//   }

  public void test438() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test438"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapSignum();
    org.apache.commons.math.optimization.linear.Relationship var8 = null;
    org.apache.commons.math.optimization.linear.LinearConstraint var10 = new org.apache.commons.math.optimization.linear.LinearConstraint(var7, var8, 0.0d);
    org.apache.commons.math.linear.RealVector var11 = var10.getCoefficients();
    org.apache.commons.math.linear.RealVector var12 = var10.getCoefficients();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test439() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test439"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    org.apache.commons.math.linear.RealMatrix var10 = var8.transpose();
    int var11 = var8.getColumnDimension();
    org.apache.commons.math.linear.RealMatrix var12 = var8.inverse();
    double[] var14 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var16 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var14, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var18 = new org.apache.commons.math.optimization.RealPointValuePair(var14, 0.0d);
    double[][] var19 = new double[][] { var14};
    org.apache.commons.math.linear.Array2DRowRealMatrix var21 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var19, true);
    double var22 = var21.getFrobeniusNorm();
    double[] var25 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var27 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var25, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var29 = new org.apache.commons.math.optimization.RealPointValuePair(var25, 0.0d);
    double[][] var30 = new double[][] { var25};
    org.apache.commons.math.linear.Array2DRowRealMatrix var32 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var30, true);
    double var33 = var32.getFrobeniusNorm();
    var21.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var32);
    double[] var36 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var38 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var36, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var40 = new org.apache.commons.math.optimization.RealPointValuePair(var36, 0.0d);
    org.apache.commons.math.optimization.RealPointValuePair var43 = new org.apache.commons.math.optimization.RealPointValuePair(var36, 50.0d, true);
    double[] var44 = var32.operate(var36);
    org.apache.commons.math.linear.ArrayRealVector var46 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var48 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var50 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var48, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var51 = new org.apache.commons.math.linear.ArrayRealVector(var46, var48);
    org.apache.commons.math.linear.RealVector var52 = var51.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var53 = var51.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var54 = var51.mapRintToSelf();
    org.apache.commons.math.linear.RealVector var56 = var51.mapSubtractToSelf(0.5430806348152439d);
    double[] var57 = var51.getData();
    double var58 = org.apache.commons.math.util.MathUtils.distance1(var44, var57);
    double[] var59 = var8.solve(var57);
    org.apache.commons.math.linear.RealMatrix var60 = var8.inverse();
    double[] var68 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var70 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var68, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var72 = new org.apache.commons.math.optimization.RealPointValuePair(var68, 0.0d);
    double[][] var73 = new double[][] { var68};
    org.apache.commons.math.linear.Array2DRowRealMatrix var75 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var73, true);
    org.apache.commons.math.linear.Array2DRowRealMatrix var76 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var73);
    java.lang.IllegalArgumentException var77 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", (java.lang.Object[])var73);
    org.apache.commons.math.linear.Array2DRowRealMatrix var78 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var73);
    org.apache.commons.math.optimization.OptimizationException var79 = new org.apache.commons.math.optimization.OptimizationException("", (java.lang.Object[])var73);
    org.apache.commons.math.linear.Array2DRowRealMatrix var81 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var73, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var8.copySubMatrix((-1), 0, 101, 1010, var73);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5430806348152439d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test440() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test440"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAcos();
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var7 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var9 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var7, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(var5, var7);
    org.apache.commons.math.linear.RealVector var11 = var10.mapCoshToSelf();
    java.lang.String var12 = var10.toString();
    org.apache.commons.math.linear.RealVector var14 = var10.mapAddToSelf(10.0d);
    org.apache.commons.math.linear.RealVector var15 = var10.mapLog10();
    org.apache.commons.math.linear.ArrayRealVector var17 = new org.apache.commons.math.linear.ArrayRealVector(var10, false);
    org.apache.commons.math.linear.RealVector var18 = var10.mapCosh();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.ArrayRealVector var19 = var1.ebeDivide(var10);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "{1.54}"+ "'", var12.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test441() {}
//   public void test441() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test441"); }
// 
// 
//     org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var3 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
//     org.apache.commons.math.linear.ArrayRealVector var8 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var10 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var12 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var10, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(var8, var10);
//     double var14 = var13.getNorm();
//     org.apache.commons.math.linear.RealMatrix var15 = var6.outerProduct(var13);
//     org.apache.commons.math.linear.ArrayRealVector var16 = null;
//     org.apache.commons.math.linear.ArrayRealVector var17 = var13.ebeDivide(var16);
// 
//   }

  public void test442() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test442"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    java.lang.String var8 = var6.toString();
    org.apache.commons.math.linear.RealVector var9 = var6.mapRint();
    org.apache.commons.math.linear.RealVector var10 = var6.mapAbsToSelf();
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var6);
    var11.set(Double.NEGATIVE_INFINITY);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "{1.54}"+ "'", var8.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test443() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test443"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    double[] var6 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var7 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6);
    org.apache.commons.math.linear.ArrayRealVector var9 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var11 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var13 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var11, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var14 = new org.apache.commons.math.linear.ArrayRealVector(var9, var11);
    double[] var15 = var7.operate(var11);
    org.apache.commons.math.linear.ArrayRealVector var16 = new org.apache.commons.math.linear.ArrayRealVector(var11);
    org.apache.commons.math.optimization.linear.Relationship var18 = null;
    double[] var21 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var22 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var21);
    org.apache.commons.math.linear.ArrayRealVector var24 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var26 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var28 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var26, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var29 = new org.apache.commons.math.linear.ArrayRealVector(var24, var26);
    double[] var30 = var22.operate(var26);
    org.apache.commons.math.linear.ArrayRealVector var31 = new org.apache.commons.math.linear.ArrayRealVector(var26);
    org.apache.commons.math.optimization.linear.LinearConstraint var33 = new org.apache.commons.math.optimization.linear.LinearConstraint(var11, 50.0d, var18, var26, 2.302585092994046d);
    double var34 = var3.getValue(var26);
    org.apache.commons.math.linear.RealVector var35 = var3.getCoefficients();
    org.apache.commons.math.linear.RealVector var36 = var3.getCoefficients();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test444() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test444"); }


    org.apache.commons.math.linear.Array2DRowRealMatrix var2 = new org.apache.commons.math.linear.Array2DRowRealMatrix(10, 100);
    double[][] var3 = var2.getDataRef();
    double[] var5 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var7 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var5, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var9 = new org.apache.commons.math.optimization.RealPointValuePair(var5, 0.0d);
    double[][] var10 = new double[][] { var5};
    org.apache.commons.math.linear.Array2DRowRealMatrix var12 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var10, true);
    double var13 = var12.getFrobeniusNorm();
    double[] var16 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var18 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var16, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var20 = new org.apache.commons.math.optimization.RealPointValuePair(var16, 0.0d);
    double[][] var21 = new double[][] { var16};
    org.apache.commons.math.linear.Array2DRowRealMatrix var23 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var21, true);
    double var24 = var23.getFrobeniusNorm();
    var12.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var23);
    org.apache.commons.math.linear.RealMatrix var26 = var12.transpose();
    double var27 = var12.getNorm();
    double var28 = var12.getDeterminant();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.Array2DRowRealMatrix var29 = var2.subtract(var12);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1.0d);

  }

  public void test445() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test445"); }


    java.lang.Double[] var1 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var2 = new org.apache.commons.math.linear.ArrayRealVector(var1);
    org.apache.commons.math.linear.RealVector var3 = var2.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var4 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var2);
    double[] var6 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var8 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var6, 1.0d);
    double[] var11 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var12 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var11);
    org.apache.commons.math.linear.ArrayRealVector var14 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var16 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var18 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var16, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var19 = new org.apache.commons.math.linear.ArrayRealVector(var14, var16);
    double[] var20 = var12.operate(var16);
    org.apache.commons.math.linear.ArrayRealVector var21 = new org.apache.commons.math.linear.ArrayRealVector(var16);
    org.apache.commons.math.optimization.linear.Relationship var23 = null;
    double[] var26 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var27 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var26);
    org.apache.commons.math.linear.ArrayRealVector var29 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var31 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var33 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var31, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var34 = new org.apache.commons.math.linear.ArrayRealVector(var29, var31);
    double[] var35 = var27.operate(var31);
    org.apache.commons.math.linear.ArrayRealVector var36 = new org.apache.commons.math.linear.ArrayRealVector(var31);
    org.apache.commons.math.optimization.linear.LinearConstraint var38 = new org.apache.commons.math.optimization.linear.LinearConstraint(var16, 50.0d, var23, var31, 2.302585092994046d);
    double var39 = var8.getValue(var31);
    double var40 = var2.getL1Distance(var31);
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var42 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var31, (-0.7d));
    org.apache.commons.math.linear.RealVector var43 = var42.getCoefficients();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2.9066992099956157d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test446() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test446"); }


    org.apache.commons.math.ConvergenceException var6 = new org.apache.commons.math.ConvergenceException();
    java.lang.Object[] var9 = new java.lang.Object[] { 0};
    org.apache.commons.math.ConvergenceException var10 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var6, "", var9);
    java.lang.Object[] var14 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var15 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var14);
    org.apache.commons.math.MathRuntimeException var16 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var6, "hi!", var14);
    org.apache.commons.math.MathException var17 = new org.apache.commons.math.MathException("}", var14);
    org.apache.commons.math.optimization.OptimizationException var18 = new org.apache.commons.math.optimization.OptimizationException("", var14);
    java.io.EOFException var19 = org.apache.commons.math.MathRuntimeException.createEOFException("org.apache.commons.math.ConvergenceException: Convergence failed", var14);
    java.lang.IllegalStateException var20 = org.apache.commons.math.MathRuntimeException.createIllegalStateException("{1}", var14);
    org.apache.commons.math.optimization.OptimizationException var21 = new org.apache.commons.math.optimization.OptimizationException("Maximal number of iterations ({0}) exceeded", var14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.ConvergenceException var22 = new org.apache.commons.math.ConvergenceException("Array2DRowRealMatrix{{1.0}}", var14);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test447() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test447"); }


    int var1 = org.apache.commons.math.util.MathUtils.hash(1.4901262290311448E-229d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1694235892));

  }

  public void test448() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test448"); }


    java.lang.Double[] var1 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var2 = new org.apache.commons.math.linear.ArrayRealVector(var1);
    org.apache.commons.math.linear.ArrayRealVector var4 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var6 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var8 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var6, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var9 = new org.apache.commons.math.linear.ArrayRealVector(var4, var6);
    org.apache.commons.math.linear.RealVector var10 = var2.subtract(var6);
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(var6);
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var15 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var17 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var15, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(var13, var15);
    org.apache.commons.math.optimization.RealPointValuePair var21 = new org.apache.commons.math.optimization.RealPointValuePair(var15, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var23 = new org.apache.commons.math.linear.ArrayRealVector(var15, true);
    int var24 = var23.getDimension();
    java.lang.Double[] var26 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var27 = new org.apache.commons.math.linear.ArrayRealVector(var26);
    org.apache.commons.math.linear.RealVector var28 = var27.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var29 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var27);
    org.apache.commons.math.linear.RealVector var30 = var23.add((org.apache.commons.math.linear.RealVector)var29);
    java.lang.Double[] var32 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var33 = new org.apache.commons.math.linear.ArrayRealVector(var32);
    org.apache.commons.math.linear.ArrayRealVector var34 = var29.projection(var33);
    org.apache.commons.math.linear.RealVector var35 = var34.mapSinh();
    org.apache.commons.math.linear.ArrayRealVector var36 = new org.apache.commons.math.linear.ArrayRealVector(var11, var34);
    org.apache.commons.math.linear.RealVector var37 = var36.mapRintToSelf();
    org.apache.commons.math.linear.RealVector var39 = var36.mapSubtractToSelf(2.9066992099956157d);
    org.apache.commons.math.linear.RealVector var40 = var36.mapSin();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test449() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test449"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(var1, false);
    org.apache.commons.math.linear.RealVector var6 = var1.mapAbs();
    double[] var8 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var10 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var8, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var12 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var14 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var16 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var14, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var17 = new org.apache.commons.math.linear.ArrayRealVector(var12, var14);
    org.apache.commons.math.optimization.RealPointValuePair var20 = new org.apache.commons.math.optimization.RealPointValuePair(var14, 1.0d, true);
    double[] var21 = var20.getPointRef();
    double var22 = var10.getValue(var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealVector var23 = var1.subtract(var21);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2.0d);

  }

  public void test450() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test450"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    org.apache.commons.math.linear.RealMatrix var22 = var19.inverse();
    double[] var24 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var26 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var24, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var28 = new org.apache.commons.math.optimization.RealPointValuePair(var24, 0.0d);
    double[][] var29 = new double[][] { var24};
    org.apache.commons.math.linear.Array2DRowRealMatrix var31 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var29, true);
    double var32 = var31.getFrobeniusNorm();
    double[] var35 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var37 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var35, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var39 = new org.apache.commons.math.optimization.RealPointValuePair(var35, 0.0d);
    double[][] var40 = new double[][] { var35};
    org.apache.commons.math.linear.Array2DRowRealMatrix var42 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var40, true);
    double var43 = var42.getFrobeniusNorm();
    var31.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var42);
    double[] var46 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var48 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var46, 1.0d);
    double[] var51 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var52 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var51);
    org.apache.commons.math.linear.ArrayRealVector var54 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var56 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var58 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var56, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var59 = new org.apache.commons.math.linear.ArrayRealVector(var54, var56);
    double[] var60 = var52.operate(var56);
    org.apache.commons.math.linear.ArrayRealVector var61 = new org.apache.commons.math.linear.ArrayRealVector(var56);
    org.apache.commons.math.optimization.linear.Relationship var63 = null;
    double[] var66 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var67 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var66);
    org.apache.commons.math.linear.ArrayRealVector var69 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var71 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var73 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var71, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var74 = new org.apache.commons.math.linear.ArrayRealVector(var69, var71);
    double[] var75 = var67.operate(var71);
    org.apache.commons.math.linear.ArrayRealVector var76 = new org.apache.commons.math.linear.ArrayRealVector(var71);
    org.apache.commons.math.optimization.linear.LinearConstraint var78 = new org.apache.commons.math.optimization.linear.LinearConstraint(var56, 50.0d, var63, var71, 2.302585092994046d);
    double var79 = var48.getValue(var71);
    org.apache.commons.math.linear.RealVector var80 = var48.getCoefficients();
    org.apache.commons.math.linear.RealVector var81 = var31.operate(var80);
    double[] var83 = var31.getRow(0);
    double[] var85 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var87 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var85, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var89 = new org.apache.commons.math.optimization.RealPointValuePair(var85, 0.0d);
    double[][] var90 = new double[][] { var85};
    org.apache.commons.math.linear.Array2DRowRealMatrix var92 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var90, true);
    org.apache.commons.math.linear.RealMatrix var93 = var92.copy();
    boolean var94 = var92.isSingular();
    org.apache.commons.math.linear.Array2DRowRealMatrix var95 = var31.subtract(var92);
    org.apache.commons.math.linear.RealMatrix var96 = var31.transpose();
    org.apache.commons.math.linear.RealMatrix var97 = var19.add((org.apache.commons.math.linear.RealMatrix)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test451() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test451"); }


    double var1 = org.apache.commons.math.util.MathUtils.cosh(0.03933967394071772d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1.0007739047737187d);

  }

  public void test452() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test452"); }


    java.lang.Object[] var2 = new java.lang.Object[] { (short)10};
    org.apache.commons.math.MathRuntimeException var3 = new org.apache.commons.math.MathRuntimeException("hi!", var2);
    java.io.IOException var4 = org.apache.commons.math.MathRuntimeException.createIOException((java.lang.Throwable)var3);
    org.apache.commons.math.MathRuntimeException var5 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var4);
    java.lang.Object[] var6 = var5.getArguments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test453() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test453"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    org.apache.commons.math.linear.RealMatrix var22 = var8.transpose();
    double[] var24 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var26 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var24, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var28 = new org.apache.commons.math.optimization.RealPointValuePair(var24, 0.0d);
    double[][] var29 = new double[][] { var24};
    org.apache.commons.math.linear.Array2DRowRealMatrix var31 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var29, true);
    double var32 = var31.getFrobeniusNorm();
    double[] var35 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var37 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var35, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var39 = new org.apache.commons.math.optimization.RealPointValuePair(var35, 0.0d);
    double[][] var40 = new double[][] { var35};
    org.apache.commons.math.linear.Array2DRowRealMatrix var42 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var40, true);
    double var43 = var42.getFrobeniusNorm();
    var31.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var42);
    org.apache.commons.math.linear.RealMatrix var45 = var42.inverse();
    int var46 = var42.getRowDimension();
    double[][] var47 = var42.getData();
    org.apache.commons.math.linear.RealMatrix var48 = var8.solve((org.apache.commons.math.linear.RealMatrix)var42);
    org.apache.commons.math.linear.ArrayRealVector var50 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var52 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var54 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var52, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var55 = new org.apache.commons.math.linear.ArrayRealVector(var50, var52);
    org.apache.commons.math.linear.RealVector var56 = var50.mapRint();
    org.apache.commons.math.linear.RealVector var57 = var50.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var58 = var50.mapLog();
    org.apache.commons.math.linear.RealVector var59 = var50.mapLog();
    boolean var60 = var8.equals((java.lang.Object)var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test454() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test454"); }


    double var2 = org.apache.commons.math.util.MathUtils.normalizeAngle(1.3246090892520057d, 3.9066992099956157d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1.3246090892520057d);

  }

  public void test455() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test455"); }


    org.apache.commons.math.linear.Array2DRowRealMatrix var2 = new org.apache.commons.math.linear.Array2DRowRealMatrix(10, 100);
    double[][] var3 = var2.getDataRef();
    org.apache.commons.math.linear.RealMatrix var4 = var2.transpose();
    org.apache.commons.math.linear.Array2DRowRealMatrix var12 = new org.apache.commons.math.linear.Array2DRowRealMatrix(10, 100);
    double[][] var13 = var12.getDataRef();
    java.lang.ArrayIndexOutOfBoundsException var14 = org.apache.commons.math.MathRuntimeException.createArrayIndexOutOfBoundsException("Convergence failed", (java.lang.Object[])var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.copySubMatrix(1010, (-336392980), 2, (-1694235892), var13);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test456() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test456"); }


    java.math.BigInteger var0 = null;
    java.math.BigInteger var2 = org.apache.commons.math.util.MathUtils.pow(var0, 0L);
    java.math.BigInteger var4 = org.apache.commons.math.util.MathUtils.pow(var2, 1073741824);
    java.math.BigInteger var6 = org.apache.commons.math.util.MathUtils.pow(var4, 101);
    java.math.BigInteger var7 = null;
    java.math.BigInteger var9 = org.apache.commons.math.util.MathUtils.pow(var7, 0L);
    java.math.BigInteger var11 = org.apache.commons.math.util.MathUtils.pow(var9, 1073741824);
    java.math.BigInteger var13 = org.apache.commons.math.util.MathUtils.pow(var11, 10L);
    java.math.BigInteger var14 = org.apache.commons.math.util.MathUtils.pow(var6, var13);
    java.math.BigInteger var15 = null;
    java.math.BigInteger var17 = org.apache.commons.math.util.MathUtils.pow(var15, 0L);
    java.math.BigInteger var19 = org.apache.commons.math.util.MathUtils.pow(var17, 1073741824);
    java.math.BigInteger var21 = org.apache.commons.math.util.MathUtils.pow(var19, 10L);
    java.math.BigInteger var22 = org.apache.commons.math.util.MathUtils.pow(var13, var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.math.BigInteger var24 = org.apache.commons.math.util.MathUtils.pow(var13, (-1694235892));
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test457() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test457"); }


    java.lang.Double[] var1 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var2 = new org.apache.commons.math.linear.ArrayRealVector(var1);
    org.apache.commons.math.linear.ArrayRealVector var4 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var6 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var8 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var6, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var9 = new org.apache.commons.math.linear.ArrayRealVector(var4, var6);
    org.apache.commons.math.linear.RealVector var10 = var2.subtract(var6);
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(var6);
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var15 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var17 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var15, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(var13, var15);
    org.apache.commons.math.optimization.RealPointValuePair var21 = new org.apache.commons.math.optimization.RealPointValuePair(var15, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var23 = new org.apache.commons.math.linear.ArrayRealVector(var15, true);
    int var24 = var23.getDimension();
    java.lang.Double[] var26 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var27 = new org.apache.commons.math.linear.ArrayRealVector(var26);
    org.apache.commons.math.linear.RealVector var28 = var27.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var29 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var27);
    org.apache.commons.math.linear.RealVector var30 = var23.add((org.apache.commons.math.linear.RealVector)var29);
    java.lang.Double[] var32 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var33 = new org.apache.commons.math.linear.ArrayRealVector(var32);
    org.apache.commons.math.linear.ArrayRealVector var34 = var29.projection(var33);
    org.apache.commons.math.linear.RealVector var35 = var34.mapSinh();
    org.apache.commons.math.linear.ArrayRealVector var36 = new org.apache.commons.math.linear.ArrayRealVector(var11, var34);
    org.apache.commons.math.linear.RealVector var37 = var11.mapCbrt();
    org.apache.commons.math.linear.RealVector var38 = var11.mapLog10();
    org.apache.commons.math.linear.RealVector var40 = var11.mapMultiply(5981.260539780036d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test458() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test458"); }


    org.apache.commons.math.ConvergenceException var0 = new org.apache.commons.math.ConvergenceException();
    java.lang.Object[] var3 = new java.lang.Object[] { 0};
    org.apache.commons.math.ConvergenceException var4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var0, "", var3);
    java.io.IOException var5 = org.apache.commons.math.MathRuntimeException.createIOException((java.lang.Throwable)var0);
    java.lang.IllegalArgumentException var6 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException((java.lang.Throwable)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test459() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test459"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    java.lang.Double[] var5 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var5);
    java.lang.Double[] var8 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var9 = new org.apache.commons.math.linear.ArrayRealVector(var8);
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var13 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var15 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var13, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var16 = new org.apache.commons.math.linear.ArrayRealVector(var11, var13);
    org.apache.commons.math.linear.RealVector var17 = var9.subtract(var13);
    boolean var18 = var6.equals((java.lang.Object)var13);
    double var19 = org.apache.commons.math.util.MathUtils.distance1(var1, var13);
    org.apache.commons.math.linear.ArrayRealVector var21 = new org.apache.commons.math.linear.ArrayRealVector(var13, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.0d);

  }

  public void test460() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test460"); }


    boolean var3 = org.apache.commons.math.util.MathUtils.equals(1.4901262290311448E-229d, 49.73451754256331d, 0);

  }

  public void test461() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test461"); }


    org.apache.commons.math.linear.RealVectorFormat var0 = org.apache.commons.math.linear.RealVectorFormat.getInstance();
    java.lang.String var1 = var0.getSuffix();
    java.lang.Object var2 = var0.clone();
    org.apache.commons.math.linear.ArrayRealVector var4 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var5 = var4.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var6 = var4.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var8 = new org.apache.commons.math.linear.ArrayRealVector(var4, false);
    org.apache.commons.math.linear.RealVector var9 = var4.mapAbs();
    java.lang.String var10 = var0.format((java.lang.Object)var9);
    java.text.NumberFormat var11 = var0.getFormat();
    java.lang.Object[] var14 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var15 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var14);
    java.lang.Object[] var18 = new java.lang.Object[] { 10L};
    org.apache.commons.math.ConvergenceException var19 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var15, "", var18);
    org.apache.commons.math.optimization.OptimizationException var20 = new org.apache.commons.math.optimization.OptimizationException((java.lang.Throwable)var19);
    org.apache.commons.math.MathRuntimeException var21 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var20);
    java.lang.StringBuffer var22 = null;
    java.text.FieldPosition var23 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.StringBuffer var24 = var0.format((java.lang.Object)var20, var22, var23);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "}"+ "'", var1.equals("}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "{}"+ "'", var10.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test462() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test462"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    java.lang.String var8 = var6.toString();
    org.apache.commons.math.linear.RealVector var10 = var6.mapAddToSelf(10.0d);
    org.apache.commons.math.linear.RealVector var11 = var6.mapLog10();
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var13 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction((org.apache.commons.math.linear.RealVector)var6, 363.7393755555636d);
    org.apache.commons.math.linear.RealVector var14 = var13.getCoefficients();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "{1.54}"+ "'", var8.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test463() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test463"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    org.apache.commons.math.linear.RealMatrix var22 = var8.transpose();
    double[] var24 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var26 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var24, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var28 = new org.apache.commons.math.optimization.RealPointValuePair(var24, 0.0d);
    double[][] var29 = new double[][] { var24};
    org.apache.commons.math.linear.Array2DRowRealMatrix var31 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var29, true);
    double var32 = var31.getFrobeniusNorm();
    double[] var35 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var37 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var35, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var39 = new org.apache.commons.math.optimization.RealPointValuePair(var35, 0.0d);
    double[][] var40 = new double[][] { var35};
    org.apache.commons.math.linear.Array2DRowRealMatrix var42 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var40, true);
    double var43 = var42.getFrobeniusNorm();
    var31.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var42);
    org.apache.commons.math.linear.RealMatrix var45 = var42.inverse();
    int var46 = var42.getRowDimension();
    double[][] var47 = var42.getData();
    org.apache.commons.math.linear.RealMatrix var48 = var8.solve((org.apache.commons.math.linear.RealMatrix)var42);
    boolean var49 = var8.isSingular();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test464() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test464"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.optimization.RealPointValuePair var9 = new org.apache.commons.math.optimization.RealPointValuePair(var3, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(var3, true);
    int var12 = var11.getDimension();
    org.apache.commons.math.linear.RealVector var13 = var11.mapAcos();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test465() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test465"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    org.apache.commons.math.linear.RealMatrix var9 = var8.copy();
    boolean var10 = var8.isSingular();
    double[] var12 = var8.getColumn(0);
    double[] var15 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var17 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var15, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var19 = new org.apache.commons.math.optimization.RealPointValuePair(var15, 0.0d);
    double[][] var20 = new double[][] { var15};
    org.apache.commons.math.linear.Array2DRowRealMatrix var22 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var20, true);
    double var23 = var22.getFrobeniusNorm();
    double[] var26 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var28 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var26, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var30 = new org.apache.commons.math.optimization.RealPointValuePair(var26, 0.0d);
    double[][] var31 = new double[][] { var26};
    org.apache.commons.math.linear.Array2DRowRealMatrix var33 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var31, true);
    double var34 = var33.getFrobeniusNorm();
    var22.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var33);
    double[] var37 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var39 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var37, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var41 = new org.apache.commons.math.optimization.RealPointValuePair(var37, 0.0d);
    org.apache.commons.math.optimization.RealPointValuePair var44 = new org.apache.commons.math.optimization.RealPointValuePair(var37, 50.0d, true);
    double[] var45 = var33.operate(var37);
    org.apache.commons.math.linear.ArrayRealVector var47 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var48 = var47.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var49 = var47.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var51 = new org.apache.commons.math.linear.ArrayRealVector(var47, false);
    org.apache.commons.math.linear.RealVector var52 = var51.mapLog1pToSelf();
    org.apache.commons.math.linear.RealVector var53 = var51.mapTan();
    org.apache.commons.math.linear.ArrayRealVector var55 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var57 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var59 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var57, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var60 = new org.apache.commons.math.linear.ArrayRealVector(var55, var57);
    org.apache.commons.math.linear.RealVector var61 = var60.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var62 = var60.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var63 = var60.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var66 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var67 = var66.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var68 = var66.mapLog1p();
    var60.setSubVector(0, (org.apache.commons.math.linear.RealVector)var66);
    double[] var70 = var66.getData();
    org.apache.commons.math.linear.ArrayRealVector var72 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var74 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var76 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var74, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var77 = new org.apache.commons.math.linear.ArrayRealVector(var72, var74);
    org.apache.commons.math.optimization.RealPointValuePair var80 = new org.apache.commons.math.optimization.RealPointValuePair(var74, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var81 = new org.apache.commons.math.linear.ArrayRealVector(var70, var74);
    org.apache.commons.math.linear.ArrayRealVector var82 = new org.apache.commons.math.linear.ArrayRealVector(var70);
    double[] var83 = var82.toArray();
    org.apache.commons.math.linear.RealVector var84 = var51.add(var83);
    org.apache.commons.math.linear.ArrayRealVector var85 = new org.apache.commons.math.linear.ArrayRealVector(var45, var83);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var8.setColumn(0, var83);
      fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException");
    } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test466() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test466"); }


    double var2 = org.apache.commons.math.util.MathUtils.normalizeAngle(5.0706024009129176E30d, (-4.9E-324d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0.0d);

  }

  public void test467() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test467"); }


    org.apache.commons.math.linear.Array2DRowRealMatrix var0 = new org.apache.commons.math.linear.Array2DRowRealMatrix();
    int var1 = var0.getRowDimension();
    int var2 = var0.getRowDimension();
    int var3 = var0.getRowDimension();
    double var4 = var0.getTrace();
    java.lang.Double[] var6 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var7 = new org.apache.commons.math.linear.ArrayRealVector(var6);
    org.apache.commons.math.linear.ArrayRealVector var9 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var11 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var13 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var11, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var14 = new org.apache.commons.math.linear.ArrayRealVector(var9, var11);
    org.apache.commons.math.linear.RealVector var15 = var7.subtract(var11);
    org.apache.commons.math.linear.ArrayRealVector var16 = new org.apache.commons.math.linear.ArrayRealVector(var11);
    org.apache.commons.math.linear.ArrayRealVector var18 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var20 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var22 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var20, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var23 = new org.apache.commons.math.linear.ArrayRealVector(var18, var20);
    org.apache.commons.math.optimization.RealPointValuePair var26 = new org.apache.commons.math.optimization.RealPointValuePair(var20, 1.0d, true);
    org.apache.commons.math.linear.ArrayRealVector var28 = new org.apache.commons.math.linear.ArrayRealVector(var20, true);
    int var29 = var28.getDimension();
    java.lang.Double[] var31 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var32 = new org.apache.commons.math.linear.ArrayRealVector(var31);
    org.apache.commons.math.linear.RealVector var33 = var32.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var34 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var32);
    org.apache.commons.math.linear.RealVector var35 = var28.add((org.apache.commons.math.linear.RealVector)var34);
    java.lang.Double[] var37 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var38 = new org.apache.commons.math.linear.ArrayRealVector(var37);
    org.apache.commons.math.linear.ArrayRealVector var39 = var34.projection(var38);
    org.apache.commons.math.linear.RealVector var40 = var39.mapSinh();
    org.apache.commons.math.linear.ArrayRealVector var41 = new org.apache.commons.math.linear.ArrayRealVector(var16, var39);
    org.apache.commons.math.linear.RealVector var42 = var16.mapCbrt();
    org.apache.commons.math.linear.RealVector var43 = var16.mapLog10();
    org.apache.commons.math.linear.RealVector var44 = var16.mapLog10();
    org.apache.commons.math.linear.RealVector var45 = var16.mapCeil();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealVector var46 = var0.operate((org.apache.commons.math.linear.RealVector)var16);
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test468() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test468"); }


    org.apache.commons.math.linear.Array2DRowRealMatrix var2 = new org.apache.commons.math.linear.Array2DRowRealMatrix(10, 100);
    double[] var5 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var6 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var5);
    double var7 = var6.getNorm();
    boolean var8 = var2.equals((java.lang.Object)var6);
    double[][] var9 = var6.getDataRef();
    double[] var13 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var15 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var13, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var17 = new org.apache.commons.math.optimization.RealPointValuePair(var13, 0.0d);
    double[][] var18 = new double[][] { var13};
    org.apache.commons.math.linear.Array2DRowRealMatrix var20 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var18, true);
    org.apache.commons.math.linear.Array2DRowRealMatrix var21 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var18);
    java.lang.IllegalArgumentException var22 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", (java.lang.Object[])var18);
    org.apache.commons.math.linear.Array2DRowRealMatrix var23 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var18);
    int var24 = var23.getColumnDimension();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.setColumnMatrix(1010, (org.apache.commons.math.linear.RealMatrix)var23);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);

  }

  public void test469() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test469"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(var1, false);
    org.apache.commons.math.linear.RealVector var6 = var5.mapLog1pToSelf();
    org.apache.commons.math.linear.ArrayRealVector var8 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double var9 = var5.dotProduct((org.apache.commons.math.linear.RealVector)var8);
    org.apache.commons.math.linear.RealVector var10 = var8.mapLog10ToSelf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test470() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test470"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    int var22 = var19.getColumnDimension();
    org.apache.commons.math.linear.RealMatrixChangingVisitor var23 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var28 = var19.walkInColumnOrder(var23, (-336392980), 0, 1073741824, (-1694235892));
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);

  }

  public void test471() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test471"); }


    double[] var2 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var3 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var2);
    double var4 = var3.getNorm();
    org.apache.commons.math.ConvergenceException var5 = new org.apache.commons.math.ConvergenceException();
    java.lang.Object[] var8 = new java.lang.Object[] { 0};
    org.apache.commons.math.ConvergenceException var9 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var5, "", var8);
    java.lang.Object[] var13 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var14 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var13);
    org.apache.commons.math.MathRuntimeException var15 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var5, "hi!", var13);
    java.lang.Object[] var16 = var15.getArguments();
    java.lang.Object[] var20 = new java.lang.Object[] { (short)10};
    org.apache.commons.math.MathRuntimeException var21 = new org.apache.commons.math.MathRuntimeException("hi!", var20);
    org.apache.commons.math.MathRuntimeException var22 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var15, "", var20);
    boolean var23 = var3.equals((java.lang.Object)var15);
    org.apache.commons.math.linear.ArrayRealVector var26 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var28 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var30 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var28, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var31 = new org.apache.commons.math.linear.ArrayRealVector(var26, var28);
    org.apache.commons.math.optimization.RealPointValuePair var34 = new org.apache.commons.math.optimization.RealPointValuePair(var28, 1.0d, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.setRow((-336392980), var28);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test472() {}
//   public void test472() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test472"); }
// 
// 
//     org.apache.commons.math.linear.RealVectorFormat var0 = org.apache.commons.math.linear.RealVectorFormat.getInstance();
//     java.lang.String var1 = var0.getSeparator();
//     org.apache.commons.math.linear.ArrayRealVector var3 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var5 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var7 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var5, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var8 = new org.apache.commons.math.linear.ArrayRealVector(var3, var5);
//     org.apache.commons.math.linear.RealVector var9 = var8.mapCoshToSelf();
//     org.apache.commons.math.linear.RealVector var10 = var8.mapAtanToSelf();
//     java.text.AttributedCharacterIterator var11 = var0.formatToCharacterIterator((java.lang.Object)var8);
//     java.text.ParsePosition var13 = null;
//     java.lang.Object var14 = var0.parseObject("Array2DRowRealMatrix{}", var13);
// 
//   }

  public void test473() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test473"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var8 = var6.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var9 = var6.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var12 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var13 = var12.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var14 = var12.mapLog1p();
    var6.setSubVector(0, (org.apache.commons.math.linear.RealVector)var12);
    org.apache.commons.math.linear.RealVector var16 = var12.mapCosh();
    org.apache.commons.math.linear.RealVector var17 = var12.mapExpm1();
    org.apache.commons.math.linear.ArrayRealVector var19 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var20 = var19.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var21 = var19.mapAsin();
    org.apache.commons.math.linear.RealVector var22 = var19.mapCbrt();
    org.apache.commons.math.linear.RealVector var23 = var19.mapUlp();
    org.apache.commons.math.linear.RealVector var24 = var19.mapRint();
    org.apache.commons.math.linear.ArrayRealVector var25 = var12.subtract(var19);
    org.apache.commons.math.linear.ArrayRealVector var27 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var28 = var27.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var29 = var27.mapAcos();
    org.apache.commons.math.linear.ArrayRealVector var30 = var12.ebeMultiply(var27);
    double[] var31 = var12.getDataRef();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test474() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test474"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(var1, false);
    org.apache.commons.math.linear.RealVector var6 = var1.mapTan();
    org.apache.commons.math.linear.RealVector var7 = var1.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var9 = new org.apache.commons.math.linear.ArrayRealVector(var1, false);
    org.apache.commons.math.linear.RealVector var11 = var1.mapMultiply((-1.0d));
    java.lang.String var12 = var1.toString();
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction((org.apache.commons.math.linear.RealVector)var1, 0.03933967394071772d);
    org.apache.commons.math.linear.RealVector var15 = var1.mapInvToSelf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "{}"+ "'", var12.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test475() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test475"); }


    float var1 = org.apache.commons.math.util.MathUtils.sign(110.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1.0f);

  }

  public void test476() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test476"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double var10 = var8.getNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    double[] var23 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var25 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var23, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var27 = new org.apache.commons.math.optimization.RealPointValuePair(var23, 0.0d);
    double[][] var28 = new double[][] { var23};
    org.apache.commons.math.linear.Array2DRowRealMatrix var30 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var28, true);
    double var31 = var30.getFrobeniusNorm();
    var19.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var30);
    org.apache.commons.math.linear.RealMatrix var33 = var30.inverse();
    int var34 = var30.getRowDimension();
    double[][] var35 = var30.getData();
    org.apache.commons.math.linear.Array2DRowRealMatrix var37 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var35, false);
    var37.multiplyEntry(0, 0, 0.03933967394071772d);
    org.apache.commons.math.linear.Array2DRowRealMatrix var42 = var8.subtract(var37);
    boolean var43 = var42.isSingular();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test477() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test477"); }


    org.apache.commons.math.linear.Array2DRowRealMatrix var2 = new org.apache.commons.math.linear.Array2DRowRealMatrix(10, 100);
    double[][] var3 = var2.getDataRef();
    org.apache.commons.math.linear.RealMatrix var4 = var2.transpose();
    org.apache.commons.math.linear.RealMatrixPreservingVisitor var5 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var10 = var2.walkInColumnOrder(var5, (-336392981), (-336392981), (-100), 0);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test478() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test478"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(var1, false);
    org.apache.commons.math.linear.RealVector var6 = var1.mapAbs();
    org.apache.commons.math.linear.RealVector var7 = var1.mapSinhToSelf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test479() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test479"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var2 = var1.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var3 = var1.mapAsin();
    org.apache.commons.math.linear.RealVector var4 = var1.mapCbrt();
    org.apache.commons.math.linear.RealVector var5 = var1.mapUlp();
    org.apache.commons.math.linear.RealVector var6 = var1.mapRint();
    org.apache.commons.math.linear.RealVector var8 = var1.mapAddToSelf(1.3440585709080678E43d);
    org.apache.commons.math.linear.RealVector var9 = var1.mapFloor();
    org.apache.commons.math.linear.RealVector var10 = var1.mapCbrtToSelf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test480() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test480"); }


    org.apache.commons.math.ConvergenceException var1 = new org.apache.commons.math.ConvergenceException();
    java.lang.Object[] var4 = new java.lang.Object[] { 0};
    org.apache.commons.math.ConvergenceException var5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable)var1, "", var4);
    java.lang.Object[] var9 = new java.lang.Object[] { ' '};
    java.lang.IllegalArgumentException var10 = org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("hi!", var9);
    org.apache.commons.math.MathRuntimeException var11 = new org.apache.commons.math.MathRuntimeException((java.lang.Throwable)var1, "hi!", var9);
    java.lang.Object[] var12 = var1.getArguments();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.MathRuntimeException var13 = new org.apache.commons.math.MathRuntimeException("{1.54}", var12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test481() {}
//   public void test481() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test481"); }
// 
// 
//     double[] var1 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
//     double[][] var6 = new double[][] { var1};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
//     double var9 = var8.getFrobeniusNorm();
//     double[] var12 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
//     double[][] var17 = new double[][] { var12};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
//     double var20 = var19.getFrobeniusNorm();
//     var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
//     org.apache.commons.math.linear.RealMatrix var22 = var19.inverse();
//     int var23 = var19.getRowDimension();
//     double[] var25 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var27 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var25, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var29 = new org.apache.commons.math.optimization.RealPointValuePair(var25, 0.0d);
//     double[][] var30 = new double[][] { var25};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var32 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var30, true);
//     double var33 = var32.getFrobeniusNorm();
//     double var34 = var32.getNorm();
//     double[] var36 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var38 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var36, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var40 = new org.apache.commons.math.optimization.RealPointValuePair(var36, 0.0d);
//     double[][] var41 = new double[][] { var36};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var43 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var41, true);
//     double var44 = var43.getFrobeniusNorm();
//     double[] var47 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var49 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var47, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var51 = new org.apache.commons.math.optimization.RealPointValuePair(var47, 0.0d);
//     double[][] var52 = new double[][] { var47};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var54 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var52, true);
//     double var55 = var54.getFrobeniusNorm();
//     var43.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var54);
//     org.apache.commons.math.linear.RealMatrix var57 = var54.inverse();
//     int var58 = var54.getRowDimension();
//     double[][] var59 = var54.getData();
//     org.apache.commons.math.linear.Array2DRowRealMatrix var61 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var59, false);
//     var61.multiplyEntry(0, 0, 0.03933967394071772d);
//     org.apache.commons.math.linear.Array2DRowRealMatrix var66 = var32.subtract(var61);
//     double[] var68 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var70 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var68, 1.0d);
//     org.apache.commons.math.optimization.RealPointValuePair var72 = new org.apache.commons.math.optimization.RealPointValuePair(var68, 0.0d);
//     double[][] var73 = new double[][] { var68};
//     org.apache.commons.math.linear.Array2DRowRealMatrix var75 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var73, true);
//     org.apache.commons.math.linear.ArrayRealVector var77 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var79 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var81 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var79, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var82 = new org.apache.commons.math.linear.ArrayRealVector(var77, var79);
//     org.apache.commons.math.linear.ArrayRealVector var84 = new org.apache.commons.math.linear.ArrayRealVector(0);
//     double[] var86 = new double[] { 1.0d};
//     org.apache.commons.math.optimization.linear.LinearObjectiveFunction var88 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var86, 1.0d);
//     org.apache.commons.math.linear.ArrayRealVector var89 = new org.apache.commons.math.linear.ArrayRealVector(var84, var86);
//     double var90 = var89.getNorm();
//     org.apache.commons.math.linear.RealMatrix var91 = var82.outerProduct(var89);
//     org.apache.commons.math.linear.RealMatrix var92 = var75.solve(var91);
//     org.apache.commons.math.linear.Array2DRowRealMatrix var93 = var61.multiply(var75);
//     org.apache.commons.math.linear.RealMatrix var94 = var19.subtract((org.apache.commons.math.linear.RealMatrix)var61);
//     org.apache.commons.math.linear.RealMatrixPreservingVisitor var95 = null;
//     double var96 = var19.walkInColumnOrder(var95);
// 
//   }

  public void test482() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test482"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var8 = var1.mapMultiply(1.0d);
    org.apache.commons.math.optimization.linear.Relationship var9 = null;
    org.apache.commons.math.optimization.linear.LinearConstraint var11 = new org.apache.commons.math.optimization.linear.LinearConstraint(var8, var9, (-1.0d));
    java.lang.Throwable var12 = null;
    org.apache.commons.math.optimization.OptimizationException var13 = new org.apache.commons.math.optimization.OptimizationException(var12);
    boolean var14 = var11.equals((java.lang.Object)var13);
    java.lang.Object[] var15 = var13.getArguments();
    org.apache.commons.math.linear.InvalidMatrixException var16 = new org.apache.commons.math.linear.InvalidMatrixException((java.lang.Throwable)var13);
    java.lang.RuntimeException var17 = org.apache.commons.math.MathRuntimeException.createInternalError((java.lang.Throwable)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test483() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test483"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    org.apache.commons.math.linear.RealMatrix var9 = var8.copy();
    double var10 = var8.getTrace();
    org.apache.commons.math.linear.RealMatrixChangingVisitor var11 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var16 = var8.walkInRowOrder(var11, 1073741824, 1010, (-336392980), 101);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1.0d);

  }

  public void test484() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test484"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.ArrayRealVector var8 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var9 = var8.mapCosToSelf();
    double var10 = var1.dotProduct(var9);
    int var11 = var1.getDimension();
    org.apache.commons.math.linear.RealVector var12 = var1.copy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test485() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test485"); }


    org.apache.commons.math.optimization.linear.SimplexSolver var0 = new org.apache.commons.math.optimization.linear.SimplexSolver();
    int var1 = var0.getMaxIterations();
    int var2 = var0.getMaxIterations();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 100);

  }

  public void test486() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test486"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    double[] var23 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var25 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var23, 1.0d);
    double[] var28 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var29 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var28);
    org.apache.commons.math.linear.ArrayRealVector var31 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var33 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var35 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var33, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var36 = new org.apache.commons.math.linear.ArrayRealVector(var31, var33);
    double[] var37 = var29.operate(var33);
    org.apache.commons.math.linear.ArrayRealVector var38 = new org.apache.commons.math.linear.ArrayRealVector(var33);
    org.apache.commons.math.optimization.linear.Relationship var40 = null;
    double[] var43 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var44 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var43);
    org.apache.commons.math.linear.ArrayRealVector var46 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var48 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var50 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var48, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var51 = new org.apache.commons.math.linear.ArrayRealVector(var46, var48);
    double[] var52 = var44.operate(var48);
    org.apache.commons.math.linear.ArrayRealVector var53 = new org.apache.commons.math.linear.ArrayRealVector(var48);
    org.apache.commons.math.optimization.linear.LinearConstraint var55 = new org.apache.commons.math.optimization.linear.LinearConstraint(var33, 50.0d, var40, var48, 2.302585092994046d);
    double var56 = var25.getValue(var48);
    org.apache.commons.math.linear.RealVector var57 = var25.getCoefficients();
    org.apache.commons.math.linear.RealVector var58 = var8.operate(var57);
    double[] var60 = var8.getRow(0);
    double[] var62 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var64 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var62, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var66 = new org.apache.commons.math.optimization.RealPointValuePair(var62, 0.0d);
    double[][] var67 = new double[][] { var62};
    org.apache.commons.math.linear.Array2DRowRealMatrix var69 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var67, true);
    org.apache.commons.math.linear.RealMatrix var70 = var69.copy();
    boolean var71 = var69.isSingular();
    org.apache.commons.math.linear.Array2DRowRealMatrix var72 = var8.subtract(var69);
    org.apache.commons.math.linear.RealMatrix var73 = var72.transpose();
    double[] var75 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var77 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var75, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var79 = new org.apache.commons.math.optimization.RealPointValuePair(var75, 0.0d);
    double[][] var80 = new double[][] { var75};
    org.apache.commons.math.linear.Array2DRowRealMatrix var82 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var80, true);
    double var83 = var82.getFrobeniusNorm();
    double[] var86 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var88 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var86, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var90 = new org.apache.commons.math.optimization.RealPointValuePair(var86, 0.0d);
    double[][] var91 = new double[][] { var86};
    org.apache.commons.math.linear.Array2DRowRealMatrix var93 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var91, true);
    double var94 = var93.getFrobeniusNorm();
    var82.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var93);
    org.apache.commons.math.linear.RealMatrix var96 = var93.inverse();
    int var97 = var93.getRowDimension();
    double var98 = var93.getNorm();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealMatrix var99 = var72.solve((org.apache.commons.math.linear.RealMatrix)var93);
      fail("Expected exception of type org.apache.commons.math.linear.SingularMatrixException");
    } catch (org.apache.commons.math.linear.SingularMatrixException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == 1.0d);

  }

  public void test487() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test487"); }


    org.apache.commons.math.linear.Array2DRowRealMatrix var2 = new org.apache.commons.math.linear.Array2DRowRealMatrix(10, 100);
    double[][] var3 = var2.getDataRef();
    org.apache.commons.math.linear.Array2DRowRealMatrix var4 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var3);
    org.apache.commons.math.linear.RealMatrixPreservingVisitor var5 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var10 = var4.walkInRowOrder(var5, 1010, (-71876953), 1073741824, 100);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test488() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test488"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    java.lang.String var8 = var6.toString();
    org.apache.commons.math.linear.RealVector var10 = var6.mapAddToSelf(10.0d);
    org.apache.commons.math.linear.RealVector var11 = var6.mapLog10();
    org.apache.commons.math.linear.ArrayRealVector var13 = new org.apache.commons.math.linear.ArrayRealVector(var6, false);
    org.apache.commons.math.linear.ArrayRealVector var15 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var17 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var19 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var17, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var20 = new org.apache.commons.math.linear.ArrayRealVector(var15, var17);
    org.apache.commons.math.linear.ArrayRealVector var22 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var23 = var22.mapCosToSelf();
    double var24 = var15.dotProduct(var23);
    org.apache.commons.math.linear.ArrayRealVector var25 = var13.append(var15);
    org.apache.commons.math.linear.RealVector var26 = var15.mapSqrt();
    org.apache.commons.math.linear.RealVector var27 = var15.mapCos();
    org.apache.commons.math.linear.RealVector var28 = var15.mapSinhToSelf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "{1.54}"+ "'", var8.equals("{1.54}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test489() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test489"); }


    double[] var2 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var3 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var2);
    org.apache.commons.math.linear.ArrayRealVector var5 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var7 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var9 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var7, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var10 = new org.apache.commons.math.linear.ArrayRealVector(var5, var7);
    double[] var11 = var3.operate(var7);
    org.apache.commons.math.linear.ArrayRealVector var12 = new org.apache.commons.math.linear.ArrayRealVector(var7);
    org.apache.commons.math.optimization.linear.Relationship var14 = null;
    double[] var17 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var18 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17);
    org.apache.commons.math.linear.ArrayRealVector var20 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var22 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var24 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var22, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var25 = new org.apache.commons.math.linear.ArrayRealVector(var20, var22);
    double[] var26 = var18.operate(var22);
    org.apache.commons.math.linear.ArrayRealVector var27 = new org.apache.commons.math.linear.ArrayRealVector(var22);
    org.apache.commons.math.optimization.linear.LinearConstraint var29 = new org.apache.commons.math.optimization.linear.LinearConstraint(var7, 50.0d, var14, var22, 2.302585092994046d);
    double[] var31 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var33 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var31, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var35 = new org.apache.commons.math.optimization.RealPointValuePair(var31, 0.0d);
    double[][] var36 = new double[][] { var31};
    org.apache.commons.math.linear.Array2DRowRealMatrix var38 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var36, true);
    boolean var39 = var29.equals((java.lang.Object)var38);
    double[] var41 = var38.getColumn(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.RealMatrix var43 = var38.getColumnMatrix(2);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test490() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test490"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    org.apache.commons.math.linear.RealMatrix var23 = var8.getRowMatrix(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var8.addToEntry((-71876953), 10, 1.731030945644E13d);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test491() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test491"); }


    double var2 = org.apache.commons.math.util.MathUtils.nextAfter(1.3246090892520057d, 2.9066992099956157d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1.324609089252006d);

  }

  public void test492() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test492"); }


    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var7 = new org.apache.commons.math.optimization.RealPointValuePair(var3, 0.0d);
    double[][] var8 = new double[][] { var3};
    org.apache.commons.math.linear.Array2DRowRealMatrix var10 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var8, true);
    double var11 = var10.getFrobeniusNorm();
    double[] var14 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var16 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var14, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var18 = new org.apache.commons.math.optimization.RealPointValuePair(var14, 0.0d);
    double[][] var19 = new double[][] { var14};
    org.apache.commons.math.linear.Array2DRowRealMatrix var21 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var19, true);
    double var22 = var21.getFrobeniusNorm();
    var10.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var21);
    org.apache.commons.math.linear.RealMatrix var24 = var21.inverse();
    int var25 = var21.getRowDimension();
    double[][] var26 = var21.getData();
    java.util.NoSuchElementException var27 = org.apache.commons.math.MathRuntimeException.createNoSuchElementException("}", (java.lang.Object[])var26);
    org.apache.commons.math.linear.MatrixIndexException var28 = new org.apache.commons.math.linear.MatrixIndexException("{1}", (java.lang.Object[])var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test493() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test493"); }


    org.apache.commons.math.linear.Array2DRowRealMatrix var2 = new org.apache.commons.math.linear.Array2DRowRealMatrix(10, 100);
    double[] var5 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var6 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var5);
    double var7 = var6.getNorm();
    boolean var8 = var2.equals((java.lang.Object)var6);
    double[][] var9 = var6.getDataRef();
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var12 = var11.mapLog10();
    boolean var13 = var6.equals((java.lang.Object)var11);
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var15 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction((org.apache.commons.math.linear.RealVector)var11, 5.0706024009129176E30d);
    org.apache.commons.math.linear.RealVector var16 = var15.getCoefficients();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test494() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test494"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    org.apache.commons.math.linear.RealMatrix var10 = var8.transpose();
    int var11 = var8.getColumnDimension();
    double[] var13 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var15 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var13, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var17 = new org.apache.commons.math.optimization.RealPointValuePair(var13, 0.0d);
    double[][] var18 = new double[][] { var13};
    org.apache.commons.math.linear.Array2DRowRealMatrix var20 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var18, true);
    org.apache.commons.math.linear.Array2DRowRealMatrix var21 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var18);
    org.apache.commons.math.linear.RealMatrix var22 = var8.preMultiply((org.apache.commons.math.linear.RealMatrix)var21);
    double[] var25 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var27 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var25, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var29 = new org.apache.commons.math.optimization.RealPointValuePair(var25, 0.0d);
    double[][] var30 = new double[][] { var25};
    org.apache.commons.math.linear.Array2DRowRealMatrix var32 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var30, true);
    double var33 = var32.getFrobeniusNorm();
    double[] var36 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var38 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var36, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var40 = new org.apache.commons.math.optimization.RealPointValuePair(var36, 0.0d);
    double[][] var41 = new double[][] { var36};
    org.apache.commons.math.linear.Array2DRowRealMatrix var43 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var41, true);
    double var44 = var43.getFrobeniusNorm();
    var32.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var43);
    org.apache.commons.math.linear.RealMatrix var46 = var43.inverse();
    org.apache.commons.math.linear.RealMatrix var49 = var43.createMatrix(100, 100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var21.setColumnMatrix(1079574528, var49);
      fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException");
    } catch (org.apache.commons.math.linear.MatrixIndexException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test495() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test495"); }


    org.apache.commons.math.linear.RealVectorFormat var0 = org.apache.commons.math.linear.RealVectorFormat.getInstance();
    java.lang.String var1 = var0.getSeparator();
    java.lang.Double[] var3 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var4 = new org.apache.commons.math.linear.ArrayRealVector(var3);
    org.apache.commons.math.linear.RealVector var5 = var4.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var4);
    org.apache.commons.math.linear.RealVector var7 = var4.mapExpToSelf();
    java.text.AttributedCharacterIterator var8 = var0.formatToCharacterIterator((java.lang.Object)var4);
    java.lang.String var9 = var0.getPrefix();
    org.apache.commons.math.linear.ArrayRealVector var11 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var12 = var11.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var13 = var11.mapAsin();
    org.apache.commons.math.linear.ArrayRealVector var15 = new org.apache.commons.math.linear.ArrayRealVector(var11, false);
    org.apache.commons.math.linear.RealVector var16 = var15.mapLog1pToSelf();
    org.apache.commons.math.linear.RealVector var17 = var15.mapLog1pToSelf();
    org.apache.commons.math.linear.RealVector var18 = var15.mapLog1p();
    java.lang.String var19 = var0.format((java.lang.Object)var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.ArrayRealVector var21 = var0.parse("; ");
      fail("Expected exception of type Exception");
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "; "+ "'", var1.equals("; "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "{"+ "'", var9.equals("{"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "{}"+ "'", var19.equals("{}"));

  }

  public void test496() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test496"); }


    org.apache.commons.math.linear.ArrayRealVector var1 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var3 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var5 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var3, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var6 = new org.apache.commons.math.linear.ArrayRealVector(var1, var3);
    org.apache.commons.math.linear.RealVector var7 = var6.mapCoshToSelf();
    org.apache.commons.math.linear.RealVector var8 = var6.mapAtanToSelf();
    org.apache.commons.math.linear.RealVector var9 = var6.mapUlp();
    org.apache.commons.math.linear.ArrayRealVector var12 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var13 = var12.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var14 = var12.mapLog1p();
    var6.setSubVector(0, (org.apache.commons.math.linear.RealVector)var12);
    org.apache.commons.math.linear.RealVector var16 = var12.mapCosh();
    org.apache.commons.math.linear.RealVector var17 = var12.mapExpm1();
    org.apache.commons.math.linear.ArrayRealVector var19 = new org.apache.commons.math.linear.ArrayRealVector(0);
    org.apache.commons.math.linear.RealVector var20 = var19.mapCosToSelf();
    org.apache.commons.math.linear.RealVector var21 = var19.mapAsin();
    org.apache.commons.math.linear.RealVector var22 = var19.mapCbrt();
    org.apache.commons.math.linear.RealVector var23 = var19.mapUlp();
    org.apache.commons.math.linear.RealVector var24 = var19.mapRint();
    org.apache.commons.math.linear.ArrayRealVector var25 = var12.subtract(var19);
    org.apache.commons.math.linear.RealVector var26 = var12.mapInv();
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var28 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction((org.apache.commons.math.linear.RealVector)var12, 1.8219365641849925d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test497() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test497"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    double[] var6 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var7 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6);
    org.apache.commons.math.linear.ArrayRealVector var9 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var11 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var13 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var11, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var14 = new org.apache.commons.math.linear.ArrayRealVector(var9, var11);
    double[] var15 = var7.operate(var11);
    org.apache.commons.math.linear.ArrayRealVector var16 = new org.apache.commons.math.linear.ArrayRealVector(var11);
    org.apache.commons.math.optimization.linear.Relationship var18 = null;
    double[] var21 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var22 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var21);
    org.apache.commons.math.linear.ArrayRealVector var24 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var26 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var28 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var26, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var29 = new org.apache.commons.math.linear.ArrayRealVector(var24, var26);
    double[] var30 = var22.operate(var26);
    org.apache.commons.math.linear.ArrayRealVector var31 = new org.apache.commons.math.linear.ArrayRealVector(var26);
    org.apache.commons.math.optimization.linear.LinearConstraint var33 = new org.apache.commons.math.optimization.linear.LinearConstraint(var11, 50.0d, var18, var26, 2.302585092994046d);
    double var34 = var3.getValue(var26);
    double var35 = var3.getConstantTerm();
    org.apache.commons.math.linear.RealVector var36 = var3.getCoefficients();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test498() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test498"); }


    java.lang.Double[] var1 = new java.lang.Double[] { 49.73451754256331d};
    org.apache.commons.math.linear.ArrayRealVector var2 = new org.apache.commons.math.linear.ArrayRealVector(var1);
    org.apache.commons.math.linear.RealVector var3 = var2.mapLogToSelf();
    org.apache.commons.math.linear.ArrayRealVector var4 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector)var2);
    double[] var6 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var8 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var6, 1.0d);
    double[] var11 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var12 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var11);
    org.apache.commons.math.linear.ArrayRealVector var14 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var16 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var18 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var16, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var19 = new org.apache.commons.math.linear.ArrayRealVector(var14, var16);
    double[] var20 = var12.operate(var16);
    org.apache.commons.math.linear.ArrayRealVector var21 = new org.apache.commons.math.linear.ArrayRealVector(var16);
    org.apache.commons.math.optimization.linear.Relationship var23 = null;
    double[] var26 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var27 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var26);
    org.apache.commons.math.linear.ArrayRealVector var29 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var31 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var33 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var31, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var34 = new org.apache.commons.math.linear.ArrayRealVector(var29, var31);
    double[] var35 = var27.operate(var31);
    org.apache.commons.math.linear.ArrayRealVector var36 = new org.apache.commons.math.linear.ArrayRealVector(var31);
    org.apache.commons.math.optimization.linear.LinearConstraint var38 = new org.apache.commons.math.optimization.linear.LinearConstraint(var16, 50.0d, var23, var31, 2.302585092994046d);
    double var39 = var8.getValue(var31);
    double var40 = var2.getL1Distance(var31);
    org.apache.commons.math.linear.RealVector var41 = var2.mapSqrtToSelf();
    org.apache.commons.math.linear.RealVector var42 = var2.mapLog();
    org.apache.commons.math.linear.RealVector var43 = var2.mapCosToSelf();
    org.apache.commons.math.linear.ArrayRealVector var45 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var47 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var49 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var47, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var50 = new org.apache.commons.math.linear.ArrayRealVector(var45, var47);
    org.apache.commons.math.linear.RealVector var51 = var50.mapSignum();
    double[] var52 = var50.getDataRef();
    org.apache.commons.math.linear.ArrayRealVector var53 = new org.apache.commons.math.linear.ArrayRealVector(var2, var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2.9066992099956157d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test499() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test499"); }


    double[] var1 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var3 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var1, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var5 = new org.apache.commons.math.optimization.RealPointValuePair(var1, 0.0d);
    double[][] var6 = new double[][] { var1};
    org.apache.commons.math.linear.Array2DRowRealMatrix var8 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var6, true);
    double var9 = var8.getFrobeniusNorm();
    double[] var12 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var14 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var12, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var16 = new org.apache.commons.math.optimization.RealPointValuePair(var12, 0.0d);
    double[][] var17 = new double[][] { var12};
    org.apache.commons.math.linear.Array2DRowRealMatrix var19 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var17, true);
    double var20 = var19.getFrobeniusNorm();
    var8.setRowMatrix(0, (org.apache.commons.math.linear.RealMatrix)var19);
    org.apache.commons.math.linear.RealMatrix var22 = var19.inverse();
    double[] var26 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var27 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var26);
    org.apache.commons.math.linear.ArrayRealVector var29 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var31 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var33 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var31, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var34 = new org.apache.commons.math.linear.ArrayRealVector(var29, var31);
    double[] var35 = var27.operate(var31);
    org.apache.commons.math.linear.ArrayRealVector var36 = new org.apache.commons.math.linear.ArrayRealVector(var31);
    org.apache.commons.math.optimization.linear.Relationship var38 = null;
    double[] var41 = new double[] { 0.0d, (-1.0d)};
    org.apache.commons.math.linear.Array2DRowRealMatrix var42 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var41);
    org.apache.commons.math.linear.ArrayRealVector var44 = new org.apache.commons.math.linear.ArrayRealVector(0);
    double[] var46 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var48 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var46, 1.0d);
    org.apache.commons.math.linear.ArrayRealVector var49 = new org.apache.commons.math.linear.ArrayRealVector(var44, var46);
    double[] var50 = var42.operate(var46);
    org.apache.commons.math.linear.ArrayRealVector var51 = new org.apache.commons.math.linear.ArrayRealVector(var46);
    org.apache.commons.math.optimization.linear.LinearConstraint var53 = new org.apache.commons.math.optimization.linear.LinearConstraint(var31, 50.0d, var38, var46, 2.302585092994046d);
    double[] var55 = new double[] { 1.0d};
    org.apache.commons.math.optimization.linear.LinearObjectiveFunction var57 = new org.apache.commons.math.optimization.linear.LinearObjectiveFunction(var55, 1.0d);
    org.apache.commons.math.optimization.RealPointValuePair var59 = new org.apache.commons.math.optimization.RealPointValuePair(var55, 0.0d);
    double[][] var60 = new double[][] { var55};
    org.apache.commons.math.linear.Array2DRowRealMatrix var62 = new org.apache.commons.math.linear.Array2DRowRealMatrix(var60, true);
    boolean var63 = var53.equals((java.lang.Object)var62);
    double[] var65 = var62.getColumn(0);
    var19.setRow(0, var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test500() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test500"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.apache.commons.math.linear.ArrayRealVector var2 = new org.apache.commons.math.linear.ArrayRealVector(1073741824, 49.73451754256332d);
      fail("Expected exception of type java.lang.OutOfMemoryError");
    } catch (java.lang.OutOfMemoryError e) {
      // Expected exception.
    }

  }

}
