
import junit.framework.*;

public class RandoopTest0 extends TestCase {

  public static boolean debug = false;

  public void test1() {}
//   public void test1() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test1"); }
// 
// 
//     com.google.javascript.jscomp.CheckLevel var3 = null;
//     com.google.javascript.jscomp.DiagnosticType var4 = null;
//     java.lang.String[] var6 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var7 = com.google.javascript.jscomp.JSError.make("", 0, 1, var3, var4, var6);
// 
//   }

  public void test2() {}
//   public void test2() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test2"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticType var0 = null;
//     com.google.javascript.jscomp.DiagnosticGroup var1 = com.google.javascript.jscomp.DiagnosticGroup.forType(var0);
// 
//   }

  public void test3() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test3"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var9 = var8.getDirectives();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var10 = var3.removeChildAfter(var8);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test4() {}
//   public void test4() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test4"); }
// 
// 
//     com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var4 = var3.getDirectives();
//     var3.putIntProp((-1), 0);
//     com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var12 = var11.getDirectives();
//     var11.putIntProp((-1), 0);
//     com.google.javascript.rhino.Node var19 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var20 = var19.getDirectives();
//     boolean var21 = var19.isThrow();
//     var3.replaceChild(var11, var19);
// 
//   }

  public void test5() {}
//   public void test5() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test5"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     java.util.List var1 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var2 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var0, var1, var2);
// 
//   }

  public void test6() {}
//   public void test6() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test6"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
//     java.util.List var3 = null;
//     var2.traverseRoots(var3);
// 
//   }

  public void test7() {}
//   public void test7() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test7"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var0 = null;
//     com.google.javascript.jscomp.CompilerInput var1 = new com.google.javascript.jscomp.CompilerInput(var0);
// 
//   }

  public void test8() {}
//   public void test8() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test8"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
//     com.google.javascript.rhino.Node var3 = null;
//     com.google.javascript.jscomp.DiagnosticType var4 = null;
//     java.lang.String[] var6 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var7 = var2.makeError(var3, var4, var6);
// 
//   }

  public void test9() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test9"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    boolean var5 = var3.isThrow();
    com.google.javascript.rhino.Node var9 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var10 = var9.getDirectives();
    int var11 = var9.getChangeTime();
    com.google.javascript.rhino.Node var12 = var9.removeFirstChild();
    boolean var13 = var9.isFromExterns();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.regexp(var3, var9);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test10() {}
//   public void test10() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test10"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.neg(var0);
// 
//   }

  public void test11() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test11"); }


    com.google.javascript.jscomp.CheckLevel[] var0 = com.google.javascript.jscomp.CheckLevel.values();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test12() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test12"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    int var5 = var3.getChangeTime();
    com.google.javascript.rhino.Node var6 = var3.removeFirstChild();
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var14 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.comma(var10, var14);
    boolean var16 = var10.isContinue();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.addChildToFront(var10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test13() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test13"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    var3.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.not(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var9 = var8.getString();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test14() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test14"); }


    com.google.javascript.jscomp.SourceFile.Builder var0 = com.google.javascript.jscomp.SourceFile.builder();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test15() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test15"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    var3.putIntProp((-1), 0);
    com.google.javascript.rhino.Node[] var8 = new com.google.javascript.rhino.Node[] { var3};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.objectlit(var8);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test16() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test16"); }


    com.google.javascript.rhino.jstype.JSType var0 = null;
    com.google.javascript.rhino.jstype.ObjectType var1 = com.google.javascript.rhino.jstype.ObjectType.cast(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test17() {}
//   public void test17() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test17"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var4 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.comma(var4, var8);
//     boolean var10 = var4.isContinue();
//     boolean var11 = var4.isInc();
//     com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var16 = var15.getDirectives();
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.ifNode(var0, var4, var15);
// 
//   }

  public void test18() {}
//   public void test18() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test18"); }
// 
// 
//     com.google.javascript.rhino.Node var4 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var5 = var4.getDirectives();
//     int var6 = var4.getChangeTime();
//     com.google.javascript.rhino.Node var7 = var4.removeFirstChild();
//     com.google.javascript.jscomp.CheckLevel var8 = null;
//     com.google.javascript.jscomp.DiagnosticType var9 = null;
//     java.lang.String[] var11 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var12 = com.google.javascript.jscomp.JSError.make("", var4, var8, var9, var11);
// 
//   }

  public void test19() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test19"); }


    com.google.javascript.rhino.jstype.JSType var0 = null;
    com.google.javascript.rhino.jstype.FunctionType var1 = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test20() {}
//   public void test20() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test20"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var2 = var0.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var4 = var0.getNeighborNodes((java.lang.Object)'#');
// 
//   }

  public void test21() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test21"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    int var5 = var3.getChangeTime();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.continueNode(var3);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test22() {}
//   public void test22() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test22"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.ModificationVisitor var1 = new com.google.javascript.rhino.jstype.ModificationVisitor(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = var1.caseAllType();
// 
//   }

  public void test23() {}
//   public void test23() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test23"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.block(var0);
// 
//   }

  public void test24() {}
//   public void test24() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test24"); }
// 
// 
//     java.io.File var0 = null;
//     com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile(var0);
// 
//   }

  public void test25() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test25"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    var3.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.not(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test26() {}
//   public void test26() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test26"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var2 = new com.google.javascript.jscomp.CompilerInput(var0, true);
// 
//   }

  public void test27() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test27"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.comma(var3, var7);
    boolean var9 = var7.mayMutateArguments();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.neg(var7);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test28() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test28"); }


    java.util.logging.Level var0 = null;
    com.google.javascript.jscomp.Compiler.setLoggingLevel(var0);

  }

  public void test29() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test29"); }


    boolean var1 = com.google.javascript.jscomp.NodeUtil.isValidQualifiedName("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test30() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test30"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    com.google.javascript.rhino.Node var4 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.comma(var4, var8);
    boolean var10 = var4.isContinue();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var12 = var0.isConnected((java.lang.Object)var10, (java.lang.Object)(byte)(-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test31() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test31"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("hi!", 1, (-1));
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.comma(var7, var11);
    boolean var13 = var11.isUnscopedQualifiedName();
    com.google.javascript.rhino.Node var17 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var18 = var17.getDirectives();
    int var19 = var17.getChangeTime();
    boolean var20 = var17.isAssignAdd();
    com.google.javascript.rhino.Node var21 = var11.clonePropsFrom(var17);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.var(var3, var11);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test32() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test32"); }


    com.google.javascript.rhino.jstype.JSType var0 = null;
    com.google.javascript.rhino.jstype.JSType var1 = null;
    boolean var2 = com.google.javascript.rhino.jstype.JSType.isEquivalent(var0, var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test33() {}
//   public void test33() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test33"); }
// 
// 
//     com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var4 = var3.getDirectives();
//     boolean var5 = var3.isThrow();
//     boolean var7 = var3.getBooleanProp(1);
//     boolean var8 = var3.isCast();
//     com.google.javascript.rhino.Node var12 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var16 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.comma(var12, var16);
//     var3.removeChild(var17);
// 
//   }

  public void test34() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test34"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    boolean var5 = var3.isThrow();
    boolean var7 = var3.getBooleanProp(1);
    boolean var8 = var3.isCast();
    com.google.javascript.rhino.Node var12 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var16 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.comma(var12, var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.addChildToFront(var16);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test35() {}
//   public void test35() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test35"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var2 = new com.google.javascript.jscomp.CompilerInput(var0, false);
// 
//   }

  public void test36() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test36"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var2 = var0.createDirectedGraphNode((java.lang.Object)(-1));
    com.google.javascript.jscomp.MessageFormatter var3 = null;
    java.util.logging.Logger var4 = null;
    com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var3, var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var7 = var0.getDirectedGraphEdges((java.lang.Object)var4, (java.lang.Object)'#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test37() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test37"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.rhino.Node var4 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var5 = var4.getDirectives();
    boolean var6 = var4.isThrow();
    boolean var8 = var4.getBooleanProp(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var9 = var0.getNodeDegree((java.lang.Object)1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test38() {}
//   public void test38() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test38"); }
// 
// 
//     com.google.javascript.rhino.Node var4 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.comma(var4, var8);
//     boolean var10 = var8.isUnscopedQualifiedName();
//     boolean var11 = var8.isVar();
//     com.google.javascript.jscomp.CheckLevel var12 = null;
//     com.google.javascript.jscomp.DiagnosticType var13 = null;
//     java.lang.String[] var15 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", var8, var12, var13, var15);
// 
//   }

  public void test39() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test39"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var1 = var0.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var2 = new com.google.javascript.jscomp.ComposeWarningsGuard(var1);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.script(var1);
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var8 = var7.getDirectives();
    int var9 = var7.getChangeTime();
    boolean var10 = var7.isAssignAdd();
    java.lang.String var11 = var7.getSourceFileName();
    boolean var12 = var7.isCast();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var13 = var3.removeChildAfter(var7);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test40() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test40"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    boolean var5 = var3.isThrow();
    boolean var7 = var3.getBooleanProp(1);
    boolean var8 = var3.isQualifiedName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.JSDocInfo var9 = com.google.javascript.jscomp.NodeUtil.getFunctionJSDocInfo(var3);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test41() {}
//   public void test41() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test41"); }
// 
// 
//     com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(0);
//     com.google.javascript.rhino.Node var6 = var3.getChildBefore(var5);
// 
//   }

  public void test42() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test42"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.comma(var3, var7);
    boolean var9 = var3.isContinue();
    com.google.javascript.rhino.Node[] var10 = new com.google.javascript.rhino.Node[] { var3};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.script(var10);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test43() {}
//   public void test43() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test43"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.TemplateTypeMap var1 = null;
//     com.google.javascript.rhino.jstype.TemplateTypeMapReplacer var2 = new com.google.javascript.rhino.jstype.TemplateTypeMapReplacer(var0, var1);
//     com.google.javascript.rhino.jstype.TemplateType var3 = null;
//     com.google.javascript.rhino.jstype.JSType var4 = var2.caseTemplateType(var3);
// 
//   }

  public void test44() {}
//   public void test44() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test44"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var1 = new com.google.javascript.jscomp.CompilerInput(var0);
// 
//   }

  public void test45() {}
//   public void test45() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test45"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var0 = null;
//     com.google.javascript.jscomp.JSModule[] var1 = new com.google.javascript.jscomp.JSModule[] { var0};
//     com.google.javascript.jscomp.JSModuleGraph var2 = new com.google.javascript.jscomp.JSModuleGraph(var1);
// 
//   }

  public void test46() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test46"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var1 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var4 = var2.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var5 = var1.getDirectedPredNodes(var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var6 = com.google.javascript.rhino.SimpleErrorReporter.getMessage1("hi!", (java.lang.Object)var5);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test47() {}
//   public void test47() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test47"); }
// 
// 
//     com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var4 = var3.getDirectives();
//     int var5 = var3.getChangeTime();
//     boolean var6 = var3.isWith();
//     com.google.javascript.rhino.Node var7 = null;
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.eq(var3, var7);
// 
//   }

  public void test48() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test48"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var2 = var1.getOriginalPath();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var3 = var1.getCode();
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));

  }

  public void test49() {}
//   public void test49() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test49"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var1 = var0.getEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var2 = new com.google.javascript.jscomp.ComposeWarningsGuard(var1);
//     com.google.javascript.jscomp.DiagnosticGroup var3 = null;
//     boolean var4 = var2.disables(var3);
// 
//   }

  public void test50() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test50"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var2 = var0.createDirectedGraphNode((java.lang.Object)(-1));
    com.google.javascript.rhino.Node var6 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var7 = var6.getDirectives();
    int var8 = var6.getChangeTime();
    boolean var9 = var6.isAssignAdd();
    java.lang.String var10 = var6.getSourceFileName();
    com.google.javascript.rhino.Node var14 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var15 = var14.getDirectives();
    int var16 = var14.getChangeTime();
    boolean var17 = var14.isAssignAdd();
    java.lang.String var18 = var14.getSourceFileName();
    java.lang.Iterable var19 = var14.children();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var20 = var0.getDirectedGraphEdges((java.lang.Object)var6, (java.lang.Object)var14);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test51() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test51"); }


    java.lang.String var1 = com.google.javascript.rhino.Token.name((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "ERROR"+ "'", var1.equals("ERROR"));

  }

  public void test52() {}
//   public void test52() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test52"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var2 = var0.createDirectedGraphNode((java.lang.Object)(-1));
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var4 = var3.getEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var5 = new com.google.javascript.jscomp.ComposeWarningsGuard(var4);
//     com.google.javascript.jscomp.JSModuleGraph var6 = new com.google.javascript.jscomp.JSModuleGraph(var4);
//     java.util.List var7 = var0.getNeighborNodes((java.lang.Object)var6);
// 
//   }

  public void test53() {}
//   public void test53() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test53"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.CheckEventfulObjectDisposal.DisposalCheckingPolicy var1 = null;
//     com.google.javascript.jscomp.CheckEventfulObjectDisposal var2 = new com.google.javascript.jscomp.CheckEventfulObjectDisposal(var0, var1);
// 
//   }

  public void test54() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test54"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    boolean var5 = var3.isThrow();
    boolean var7 = var3.getBooleanProp(1);
    com.google.javascript.rhino.Node[] var8 = new com.google.javascript.rhino.Node[] { var3};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.script(var8);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test55() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test55"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(100, 1, 10);
    com.google.javascript.rhino.Node var4 = var3.getLastSibling();
    boolean var5 = var4.isCast();
    boolean var6 = var4.isDebugger();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test56() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test56"); }


    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var4 = var3.getEdges();
    com.google.javascript.jscomp.deps.SortedDependencies var5 = new com.google.javascript.jscomp.deps.SortedDependencies(var4);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var6 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var7 = var6.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var8 = new com.google.javascript.jscomp.ComposeWarningsGuard(var7);
    com.google.javascript.jscomp.JSModuleGraph var9 = new com.google.javascript.jscomp.JSModuleGraph(var7);
    java.util.List var10 = var5.getSortedDependenciesOf(var7);
    com.google.javascript.rhino.Node var11 = var2.createParametersWithVarArgs(var10);
    com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var19 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.comma(var15, var19);
    boolean var21 = var19.isUnscopedQualifiedName();
    com.google.javascript.rhino.Node var25 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var26 = var25.getDirectives();
    int var27 = var25.getChangeTime();
    boolean var28 = var25.isAssignAdd();
    com.google.javascript.rhino.Node var29 = var19.clonePropsFrom(var25);
    boolean var30 = var29.isObjectLit();
    com.google.javascript.rhino.Node var34 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var38 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.comma(var34, var38);
    boolean var40 = var34.isContinue();
    boolean var41 = var34.isInc();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var46 = var45.getDirectives();
    int var47 = var45.getChangeTime();
    com.google.javascript.rhino.Node var48 = var45.removeFirstChild();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var49 = new com.google.javascript.rhino.Node(100, var11, var29, var34, var45);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);

  }

  public void test57() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test57"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var1 = var0.getEdges();
    com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var6 = var5.getDirectives();
    var5.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.not(var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var11 = var0.getNodeDegree((java.lang.Object)var10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test58() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test58"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var1 = com.google.javascript.rhino.Token.name(0);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }

  }

  public void test59() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test59"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
    com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var6 = var5.getDirectives();
    var5.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.exprResult(var5);
    com.google.javascript.jscomp.CodingConvention.Bind var11 = var1.describeFunctionBind(var5);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var13 = var12.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var14 = new com.google.javascript.jscomp.ComposeWarningsGuard(var13);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.script(var13);
    boolean var16 = var1.isPrototypeAlias(var15);
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.Node var23 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var24 = var23.getDirectives();
    boolean var25 = var23.isThrow();
    boolean var27 = var23.getBooleanProp(1);
    boolean var28 = var23.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var29 = var18.createFunctionType(var19, var23);
    java.lang.Iterable var31 = var18.getTypesWithProperty("ERROR");
    java.lang.Iterable var33 = var18.getEachReferenceTypeWithProperty("ERROR");
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.jscomp.AbstractCompiler var37 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var38 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var39 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var41 = var39.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var42 = var38.getDirectedPredNodes(var41);
    com.google.javascript.jscomp.NodeTraversal.Callback var43 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var37, var42, var43);
    com.google.javascript.rhino.jstype.FunctionType var45 = var35.createFunctionType(var36, var42);
    java.lang.Iterable var46 = var45.getImplementedInterfaces();
    boolean var47 = var45.isStruct();
    java.lang.String var48 = var45.getDisplayName();
    com.google.javascript.jscomp.AbstractCompiler var49 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var53 = var51.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var54 = var50.getDirectedPredNodes(var53);
    com.google.javascript.jscomp.NodeTraversal.Callback var55 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var49, var54, var55);
    java.util.Map var57 = null;
    var1.defineDelegateProxyPrototypeProperties(var18, (com.google.javascript.rhino.jstype.StaticScope)var45, var54, var57);
    com.google.javascript.rhino.Node var63 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var67 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.comma(var63, var67);
    com.google.javascript.rhino.Node var72 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var73 = var72.getDirectives();
    int var74 = var72.getChangeTime();
    boolean var75 = var72.isAssignAdd();
    java.lang.String var76 = var72.getSourceFileName();
    java.lang.Iterable var77 = var72.children();
    com.google.javascript.rhino.ErrorReporter var78 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var79 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var78);
    com.google.javascript.rhino.ErrorReporter var80 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var81 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var80);
    com.google.javascript.rhino.jstype.JSType var82 = null;
    com.google.javascript.jscomp.AbstractCompiler var83 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var84 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var85 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var87 = var85.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var88 = var84.getDirectedPredNodes(var87);
    com.google.javascript.jscomp.NodeTraversal.Callback var89 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var83, var88, var89);
    com.google.javascript.rhino.jstype.FunctionType var91 = var81.createFunctionType(var82, var88);
    com.google.javascript.rhino.jstype.JSType var92 = var79.createNullableType((com.google.javascript.rhino.jstype.JSType)var91);
    com.google.common.collect.ImmutableList var93 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.FunctionType var94 = var18.createConstructorType("ERROR", var68, var72, (com.google.javascript.rhino.jstype.JSType)var91, var93);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test60() {}
//   public void test60() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test60"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.JsAst var2 = null;
//     var1.addNewScript(var2);
// 
//   }

  public void test61() {}
//   public void test61() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test61"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.CheckEventfulObjectDisposal.DisposalCheckingPolicy var2 = null;
//     com.google.javascript.jscomp.CheckEventfulObjectDisposal var3 = new com.google.javascript.jscomp.CheckEventfulObjectDisposal((com.google.javascript.jscomp.AbstractCompiler)var1, var2);
// 
//   }

  public void test62() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test62"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var1 = var0.getEdges();
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = null;
    com.google.javascript.rhino.jstype.ModificationVisitor var3 = new com.google.javascript.rhino.jstype.ModificationVisitor(var2);
    com.google.javascript.rhino.jstype.EnumElementType var4 = null;
    com.google.javascript.rhino.jstype.JSType var5 = var3.caseEnumElementType(var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var6 = var0.getDirectedPredNodes((java.lang.Object)var4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test63() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test63"); }


    com.google.javascript.rhino.Token var0 = new com.google.javascript.rhino.Token();

  }

  public void test64() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test64"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    int var6 = var3.getIntProp((-1));
    boolean var7 = var3.isWith();
    com.google.javascript.rhino.Node[] var8 = new com.google.javascript.rhino.Node[] { var3};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.objectlit(var8);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test65() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test65"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.continueNode();
    boolean var1 = var0.isSwitch();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setSideEffectFlags(10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test66() {}
//   public void test66() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test66"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
//     com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
//     com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var6 = var5.getDirectives();
//     var5.putIntProp((-1), 0);
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.exprResult(var5);
//     com.google.javascript.jscomp.CodingConvention.Bind var11 = var1.describeFunctionBind(var5);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var13 = var12.getEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var14 = new com.google.javascript.jscomp.ComposeWarningsGuard(var13);
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.script(var13);
//     boolean var16 = var1.isPrototypeAlias(var15);
//     com.google.javascript.rhino.ErrorReporter var17 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
//     com.google.javascript.rhino.jstype.JSType var19 = null;
//     com.google.javascript.rhino.Node var23 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var24 = var23.getDirectives();
//     boolean var25 = var23.isThrow();
//     boolean var27 = var23.getBooleanProp(1);
//     boolean var28 = var23.isQualifiedName();
//     com.google.javascript.rhino.jstype.FunctionType var29 = var18.createFunctionType(var19, var23);
//     java.lang.Iterable var31 = var18.getTypesWithProperty("ERROR");
//     java.lang.Iterable var33 = var18.getEachReferenceTypeWithProperty("ERROR");
//     com.google.javascript.rhino.ErrorReporter var34 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
//     com.google.javascript.rhino.jstype.JSType var36 = null;
//     com.google.javascript.jscomp.AbstractCompiler var37 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var38 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var39 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var41 = var39.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var42 = var38.getDirectedPredNodes(var41);
//     com.google.javascript.jscomp.NodeTraversal.Callback var43 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var37, var42, var43);
//     com.google.javascript.rhino.jstype.FunctionType var45 = var35.createFunctionType(var36, var42);
//     java.lang.Iterable var46 = var45.getImplementedInterfaces();
//     boolean var47 = var45.isStruct();
//     java.lang.String var48 = var45.getDisplayName();
//     com.google.javascript.jscomp.AbstractCompiler var49 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var53 = var51.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var54 = var50.getDirectedPredNodes(var53);
//     com.google.javascript.jscomp.NodeTraversal.Callback var55 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var49, var54, var55);
//     java.util.Map var57 = null;
//     var1.defineDelegateProxyPrototypeProperties(var18, (com.google.javascript.rhino.jstype.StaticScope)var45, var54, var57);
//     com.google.javascript.rhino.jstype.JSTypeNative var59 = null;
//     com.google.javascript.rhino.jstype.JSType var60 = var18.getNativeType(var59);
// 
//   }

  public void test67() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test67"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    var0.pushEdgeAnnotations();
    java.util.List var2 = var0.getGraphvizEdges();
    com.google.javascript.jscomp.AstValidator var4 = new com.google.javascript.jscomp.AstValidator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var5 = var0.getDirectedGraphEdges((java.lang.Object)"", (java.lang.Object)var4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test68() {}
//   public void test68() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test68"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
//     int var6 = var1.getWarningCount();
// 
//   }

  public void test69() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test69"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var1 = var0.getEdges();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var3 = var2.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var4 = new com.google.javascript.jscomp.ComposeWarningsGuard(var3);
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    com.google.javascript.rhino.ErrorReporter var7 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    com.google.javascript.jscomp.AbstractCompiler var10 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var14 = var12.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var15 = var11.getDirectedPredNodes(var14);
    com.google.javascript.jscomp.NodeTraversal.Callback var16 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var10, var15, var16);
    com.google.javascript.rhino.jstype.FunctionType var18 = var8.createFunctionType(var9, var15);
    com.google.javascript.rhino.jstype.JSType var19 = var6.createNullableType((com.google.javascript.rhino.jstype.JSType)var18);
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    com.google.javascript.rhino.Node var26 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var27 = var26.getDirectives();
    boolean var28 = var26.isThrow();
    boolean var30 = var26.getBooleanProp(1);
    boolean var31 = var26.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var32 = var21.createFunctionType(var22, var26);
    com.google.javascript.rhino.jstype.JSType[] var33 = new com.google.javascript.rhino.jstype.JSType[] { var22};
    com.google.javascript.rhino.Node var34 = var6.createParameters(var33);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var35 = var0.isConnectedInDirection((java.lang.Object)var3, (java.lang.Object)var33);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test70() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test70"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    int var5 = var3.getChangeTime();
    boolean var6 = var3.isAssignAdd();
    boolean var7 = var3.isGetterDef();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.setDouble(1.0d);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test71() {}
//   public void test71() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test71"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.TemplateTypeMap var1 = null;
//     com.google.javascript.rhino.jstype.TemplateTypeMapReplacer var2 = new com.google.javascript.rhino.jstype.TemplateTypeMapReplacer(var0, var1);
//     com.google.javascript.rhino.ErrorReporter var3 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.jscomp.AbstractCompiler var6 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var7 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var10 = var8.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var11 = var7.getDirectedPredNodes(var10);
//     com.google.javascript.jscomp.NodeTraversal.Callback var12 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var6, var11, var12);
//     com.google.javascript.rhino.jstype.FunctionType var14 = var4.createFunctionType(var5, var11);
//     com.google.javascript.rhino.jstype.TemplateType var15 = var4.getObjectElementKey();
//     com.google.javascript.rhino.jstype.JSType var16 = var2.caseTemplateType(var15);
// 
//   }

  public void test72() {}
//   public void test72() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test72"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     int var2 = var1.getErrorCount();
// 
//   }

  public void test73() {}
//   public void test73() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test73"); }
// 
// 
//     java.util.Map var0 = null;
//     com.google.javascript.rhino.Node var4 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var5 = var4.getDirectives();
//     var4.putIntProp((-1), 0);
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.not(var4);
//     java.io.PrintStream var11 = null;
//     com.google.javascript.jscomp.Compiler var12 = new com.google.javascript.jscomp.Compiler(var11);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var13 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var14 = var13.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var15 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var12, var14, var15);
//     com.google.javascript.jscomp.NodeUtil.verifyScopeChanges(var0, var9, true, (com.google.javascript.jscomp.AbstractCompiler)var12);
// 
//   }

  public void test74() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test74"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("hi!", 10, 0);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var5 = var4.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var6 = new com.google.javascript.jscomp.ComposeWarningsGuard(var5);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.script(var5);
    com.google.javascript.rhino.Node var8 = var3.copyInformationFromForTree(var7);
    com.google.javascript.rhino.Node var12 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var16 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("hi!");
    var18.setOptionalArg(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.forNode(var8, var12, var16, var18);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test75() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test75"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
    com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var6 = var5.getDirectives();
    var5.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.exprResult(var5);
    com.google.javascript.jscomp.CodingConvention.Bind var11 = var1.describeFunctionBind(var5);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var13 = var12.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var14 = new com.google.javascript.jscomp.ComposeWarningsGuard(var13);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.script(var13);
    boolean var16 = var1.isPrototypeAlias(var15);
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.Node var23 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var24 = var23.getDirectives();
    boolean var25 = var23.isThrow();
    boolean var27 = var23.getBooleanProp(1);
    boolean var28 = var23.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var29 = var18.createFunctionType(var19, var23);
    java.lang.Iterable var31 = var18.getTypesWithProperty("ERROR");
    java.lang.Iterable var33 = var18.getEachReferenceTypeWithProperty("ERROR");
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.jscomp.AbstractCompiler var37 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var38 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var39 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var41 = var39.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var42 = var38.getDirectedPredNodes(var41);
    com.google.javascript.jscomp.NodeTraversal.Callback var43 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var37, var42, var43);
    com.google.javascript.rhino.jstype.FunctionType var45 = var35.createFunctionType(var36, var42);
    java.lang.Iterable var46 = var45.getImplementedInterfaces();
    boolean var47 = var45.isStruct();
    java.lang.String var48 = var45.getDisplayName();
    com.google.javascript.jscomp.AbstractCompiler var49 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var53 = var51.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var54 = var50.getDirectedPredNodes(var53);
    com.google.javascript.jscomp.NodeTraversal.Callback var55 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var49, var54, var55);
    java.util.Map var57 = null;
    var1.defineDelegateProxyPrototypeProperties(var18, (com.google.javascript.rhino.jstype.StaticScope)var45, var54, var57);
    com.google.javascript.rhino.Node var62 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var63 = var62.getDirectives();
    int var64 = var62.getChangeTime();
    com.google.javascript.rhino.Node var65 = var62.removeFirstChild();
    java.util.List var66 = var1.identifyTypeDeclarationCall(var62);
    com.google.javascript.rhino.Node var70 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var71 = var70.getDirectives();
    int var72 = var70.getChangeTime();
    boolean var73 = var70.isWith();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var74 = var1.isInlinableFunction(var70);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test76() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test76"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.io.PrintStream var1 = null;
    com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var4 = var3.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var2, var4, var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var7 = var0.getDirectedPredNodes((java.lang.Object)var4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test77() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test77"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(100, 1, 10);
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.returnNode(var3);
    com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var9 = var8.getDirectives();
    boolean var10 = var8.isThrow();
    boolean var12 = var8.getBooleanProp(1);
    boolean var13 = var8.isLabelName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.getelem(var4, var8);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test78() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test78"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var3 = var2.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
    java.lang.String var6 = var1.getAstDotGraph();
    com.google.javascript.jscomp.NodeTraversal.FunctionCallback var7 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.NodeTraversal.traverseChangedFunctions((com.google.javascript.jscomp.AbstractCompiler)var1, var7);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));

  }

  public void test79() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test79"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
    com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var6 = var5.getDirectives();
    var5.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.exprResult(var5);
    com.google.javascript.jscomp.CodingConvention.Bind var11 = var1.describeFunctionBind(var5);
    boolean var14 = var1.isExported("hi!", false);
    java.lang.String var15 = var1.getDelegateSuperclassName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test80() {}
//   public void test80() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test80"); }
// 
// 
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("hi!", 10, 0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var5 = var4.getEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var6 = new com.google.javascript.jscomp.ComposeWarningsGuard(var5);
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.script(var5);
//     com.google.javascript.rhino.Node var8 = var3.copyInformationFromForTree(var7);
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var11 = var3.getChildBefore(var10);
// 
//   }

  public void test81() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test81"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
    com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var6 = var5.getDirectives();
    var5.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.exprResult(var5);
    com.google.javascript.jscomp.CodingConvention.Bind var11 = var1.describeFunctionBind(var5);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var13 = var12.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var14 = new com.google.javascript.jscomp.ComposeWarningsGuard(var13);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.script(var13);
    boolean var16 = var1.isPrototypeAlias(var15);
    boolean var17 = var15.isSwitch();
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var25 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.comma(var21, var25);
    boolean var27 = var25.isUnscopedQualifiedName();
    com.google.javascript.rhino.Node var31 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var32 = var31.getDirectives();
    int var33 = var31.getChangeTime();
    boolean var34 = var31.isAssignAdd();
    com.google.javascript.rhino.Node var35 = var25.clonePropsFrom(var31);
    com.google.javascript.rhino.Node var39 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var43 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.comma(var39, var43);
    boolean var45 = var39.isContinue();
    boolean var46 = var39.isInc();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.function(var15, var25, var39);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test82() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test82"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var3 = var2.getEdges();
    com.google.javascript.jscomp.deps.SortedDependencies var4 = new com.google.javascript.jscomp.deps.SortedDependencies(var3);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var6 = var5.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var7 = new com.google.javascript.jscomp.ComposeWarningsGuard(var6);
    com.google.javascript.jscomp.JSModuleGraph var8 = new com.google.javascript.jscomp.JSModuleGraph(var6);
    java.util.List var9 = var4.getSortedDependenciesOf(var6);
    com.google.javascript.rhino.Node var10 = var1.createParametersWithVarArgs(var9);
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    com.google.javascript.rhino.jstype.JSType var14 = null;
    com.google.javascript.jscomp.AbstractCompiler var15 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var16 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var19 = var17.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var20 = var16.getDirectedPredNodes(var19);
    com.google.javascript.jscomp.NodeTraversal.Callback var21 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var15, var20, var21);
    com.google.javascript.rhino.jstype.FunctionType var23 = var13.createFunctionType(var14, var20);
    java.lang.Iterable var24 = var23.getImplementedInterfaces();
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.jscomp.AbstractCompiler var28 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var29 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var32 = var30.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var33 = var29.getDirectedPredNodes(var32);
    com.google.javascript.jscomp.NodeTraversal.Callback var34 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var28, var33, var34);
    com.google.javascript.rhino.jstype.FunctionType var36 = var26.createFunctionType(var27, var33);
    com.google.javascript.rhino.ErrorReporter var38 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.jscomp.AbstractCompiler var41 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var42 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var43 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var45 = var43.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var46 = var42.getDirectedPredNodes(var45);
    com.google.javascript.jscomp.NodeTraversal.Callback var47 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var41, var46, var47);
    com.google.javascript.rhino.jstype.FunctionType var49 = var39.createFunctionType(var40, var46);
    com.google.javascript.rhino.Node var50 = null;
    boolean var51 = var36.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var49, var50);
    boolean var52 = var23.isInvariant((com.google.javascript.rhino.jstype.JSType)var36);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.overwriteDeclaredType("", (com.google.javascript.rhino.jstype.JSType)var23);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);

  }

  public void test83() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test83"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setPropertyAffinity(false);
    byte[] var4 = new byte[] { (byte)100};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setInputVariableMapSerialized(var4);
      fail("Expected exception of type java.text.ParseException");
    } catch (java.text.ParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test84() {}
//   public void test84() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test84"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
//     java.lang.String var6 = var1.getAstDotGraph();
//     com.google.javascript.jscomp.CompilerOptions var7 = null;
//     com.google.javascript.jscomp.DefaultPassConfig var8 = new com.google.javascript.jscomp.DefaultPassConfig(var7);
//     var1.setPassConfig((com.google.javascript.jscomp.PassConfig)var8);
//     com.google.javascript.jscomp.JSSourceFile[] var10 = null;
//     com.google.javascript.jscomp.JSModule var11 = null;
//     com.google.javascript.jscomp.JSModule[] var12 = new com.google.javascript.jscomp.JSModule[] { var11};
//     com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
//     var1.init(var10, var12, var13);
// 
//   }

  public void test85() {}
//   public void test85() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test85"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
//     com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
//     com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
//     com.google.javascript.rhino.ErrorReporter var3 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.rhino.Node var9 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var10 = var9.getDirectives();
//     boolean var11 = var9.isThrow();
//     boolean var13 = var9.getBooleanProp(1);
//     boolean var14 = var9.isQualifiedName();
//     com.google.javascript.rhino.jstype.FunctionType var15 = var4.createFunctionType(var5, var9);
//     com.google.javascript.rhino.ErrorReporter var16 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
//     com.google.javascript.rhino.jstype.JSType var18 = null;
//     com.google.javascript.jscomp.AbstractCompiler var19 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var23 = var21.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var24 = var20.getDirectedPredNodes(var23);
//     com.google.javascript.jscomp.NodeTraversal.Callback var25 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var19, var24, var25);
//     com.google.javascript.rhino.jstype.FunctionType var27 = var17.createFunctionType(var18, var24);
//     com.google.javascript.rhino.ErrorReporter var29 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     com.google.javascript.jscomp.AbstractCompiler var32 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var36 = var34.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var37 = var33.getDirectedPredNodes(var36);
//     com.google.javascript.jscomp.NodeTraversal.Callback var38 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var32, var37, var38);
//     com.google.javascript.rhino.jstype.FunctionType var40 = var30.createFunctionType(var31, var37);
//     com.google.javascript.rhino.Node var41 = null;
//     boolean var42 = var27.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var40, var41);
//     com.google.javascript.rhino.jstype.FunctionType var43 = var40.toMaybeFunctionType();
//     boolean var44 = var40.hasCachedValues();
//     com.google.javascript.rhino.ErrorReporter var45 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
//     com.google.javascript.rhino.ErrorReporter var47 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
//     com.google.javascript.rhino.jstype.JSType var49 = null;
//     com.google.javascript.jscomp.AbstractCompiler var50 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var52 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var54 = var52.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var55 = var51.getDirectedPredNodes(var54);
//     com.google.javascript.jscomp.NodeTraversal.Callback var56 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var50, var55, var56);
//     com.google.javascript.rhino.jstype.FunctionType var58 = var48.createFunctionType(var49, var55);
//     com.google.javascript.rhino.jstype.JSType var59 = var46.createNullableType((com.google.javascript.rhino.jstype.JSType)var58);
//     boolean var60 = var40.canCastTo(var59);
//     com.google.javascript.jscomp.CodingConvention.SubclassType var61 = null;
//     var2.applySubclassRelationship(var15, var40, var61);
//     com.google.javascript.rhino.Node var66 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var67 = var66.getDirectives();
//     int var68 = var66.getChangeTime();
//     boolean var69 = var66.isAssignAdd();
//     java.lang.String var70 = var66.getSourceFileName();
//     boolean var71 = var66.isIn();
//     java.lang.String var72 = var2.getSingletonGetterClassName(var66);
// 
//   }

  public void test86() {}
//   public void test86() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test86"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
//     com.google.javascript.jscomp.JSSourceFile var6 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var7 = new com.google.javascript.jscomp.JSSourceFile[] { var6};
//     com.google.javascript.jscomp.JSSourceFile var8 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var9 = new com.google.javascript.jscomp.JSSourceFile[] { var8};
//     com.google.javascript.jscomp.CompilerOptions var10 = null;
//     var1.init(var7, var9, var10);
// 
//   }

  public void test87() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test87"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    int var5 = var3.getChangeTime();
    com.google.javascript.rhino.Node var6 = var3.removeFirstChild();
    boolean var7 = var3.isFromExterns();
    com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var12 = var11.getDirectives();
    boolean var13 = var11.isThrow();
    boolean var15 = var11.getBooleanProp(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.assign(var3, var11);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test88() {}
//   public void test88() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test88"); }
// 
// 
//     java.util.Map var0 = null;
//     com.google.javascript.rhino.Node var4 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var5 = var4.getDirectives();
//     boolean var6 = var4.isThrow();
//     var4.removeProp(1);
//     boolean var9 = var4.isDebugger();
//     java.io.PrintStream var11 = null;
//     com.google.javascript.jscomp.Compiler var12 = new com.google.javascript.jscomp.Compiler(var11);
//     com.google.javascript.jscomp.NodeUtil.verifyScopeChanges(var0, var4, true, (com.google.javascript.jscomp.AbstractCompiler)var12);
// 
//   }

  public void test89() {}
//   public void test89() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test89"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
//     com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
//     com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var6 = var5.getDirectives();
//     var5.putIntProp((-1), 0);
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.exprResult(var5);
//     com.google.javascript.jscomp.CodingConvention.Bind var11 = var1.describeFunctionBind(var5);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var13 = var12.getEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var14 = new com.google.javascript.jscomp.ComposeWarningsGuard(var13);
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.script(var13);
//     boolean var16 = var1.isPrototypeAlias(var15);
//     com.google.javascript.rhino.ErrorReporter var17 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
//     com.google.javascript.rhino.jstype.JSType var19 = null;
//     com.google.javascript.rhino.Node var23 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var24 = var23.getDirectives();
//     boolean var25 = var23.isThrow();
//     boolean var27 = var23.getBooleanProp(1);
//     boolean var28 = var23.isQualifiedName();
//     com.google.javascript.rhino.jstype.FunctionType var29 = var18.createFunctionType(var19, var23);
//     java.lang.Iterable var31 = var18.getTypesWithProperty("ERROR");
//     java.lang.Iterable var33 = var18.getEachReferenceTypeWithProperty("ERROR");
//     com.google.javascript.rhino.ErrorReporter var34 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
//     com.google.javascript.rhino.jstype.JSType var36 = null;
//     com.google.javascript.jscomp.AbstractCompiler var37 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var38 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var39 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var41 = var39.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var42 = var38.getDirectedPredNodes(var41);
//     com.google.javascript.jscomp.NodeTraversal.Callback var43 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var37, var42, var43);
//     com.google.javascript.rhino.jstype.FunctionType var45 = var35.createFunctionType(var36, var42);
//     java.lang.Iterable var46 = var45.getImplementedInterfaces();
//     boolean var47 = var45.isStruct();
//     java.lang.String var48 = var45.getDisplayName();
//     com.google.javascript.jscomp.AbstractCompiler var49 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var53 = var51.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var54 = var50.getDirectedPredNodes(var53);
//     com.google.javascript.jscomp.NodeTraversal.Callback var55 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var49, var54, var55);
//     java.util.Map var57 = null;
//     var1.defineDelegateProxyPrototypeProperties(var18, (com.google.javascript.rhino.jstype.StaticScope)var45, var54, var57);
//     com.google.javascript.rhino.jstype.JSTypeNative var59 = null;
//     com.google.javascript.rhino.jstype.FunctionType var60 = var18.getNativeFunctionType(var59);
// 
//   }

  public void test90() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test90"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.comma(var3, var7);
    boolean var9 = var7.isDebugger();
    var7.setVarArgs(true);
    com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var16 = var15.getDirectives();
    var15.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.exprResult(var15);
    java.lang.Iterable var21 = var20.siblings();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.sub(var7, var20);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test91() {}
//   public void test91() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test91"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
//     boolean var6 = var1.acceptConstKeyword();
// 
//   }

  public void test92() {}
//   public void test92() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test92"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
//     java.lang.String var6 = var1.getAstDotGraph();
//     com.google.javascript.jscomp.type.ReverseAbstractInterpreter var7 = var1.getReverseAbstractInterpreter();
// 
//   }

  public void test93() {}
//   public void test93() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test93"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
//     com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
//     com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
//     com.google.javascript.rhino.Node var6 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var7 = var6.getDirectives();
//     var6.putIntProp((-1), 0);
//     var6.setVarArgs(false);
//     com.google.javascript.rhino.jstype.StaticSourceFile var13 = var6.getStaticSourceFile();
//     com.google.javascript.jscomp.CodingConvention.Bind var14 = var2.describeFunctionBind(var6);
//     com.google.javascript.rhino.Node var15 = null;
//     com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast var16 = var2.getObjectLiteralCast(var15);
// 
//   }

  public void test94() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test94"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("hi!", 10, 0);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var5 = var4.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var6 = new com.google.javascript.jscomp.ComposeWarningsGuard(var5);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.script(var5);
    com.google.javascript.rhino.Node var8 = var3.copyInformationFromForTree(var7);
    boolean var9 = var8.isContinue();
    com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var17 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.comma(var13, var17);
    com.google.javascript.rhino.Node var22 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var26 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.comma(var22, var26);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var8.replaceChildAfter(var18, var22);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test95() {}
//   public void test95() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test95"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     var0.popEdgeAnnotations();
// 
//   }

  public void test96() {}
//   public void test96() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test96"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
//     java.lang.String var6 = var1.getAstDotGraph();
//     com.google.javascript.jscomp.CompilerOptions.LanguageMode var7 = var1.languageMode();
// 
//   }

  public void test97() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test97"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
    com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var6 = var5.getDirectives();
    var5.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.exprResult(var5);
    com.google.javascript.jscomp.CodingConvention.Bind var11 = var1.describeFunctionBind(var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.var(var5);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test98() {}
//   public void test98() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test98"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.deps.SortedDependencies var4 = new com.google.javascript.jscomp.deps.SortedDependencies(var3);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var6 = var5.getEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var7 = new com.google.javascript.jscomp.ComposeWarningsGuard(var6);
//     com.google.javascript.jscomp.JSModuleGraph var8 = new com.google.javascript.jscomp.JSModuleGraph(var6);
//     java.util.List var9 = var4.getSortedDependenciesOf(var6);
//     com.google.javascript.rhino.Node var10 = var1.createParametersWithVarArgs(var9);
//     com.google.javascript.rhino.ErrorReporter var11 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var13 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var14 = var13.getEdges();
//     com.google.javascript.jscomp.deps.SortedDependencies var15 = new com.google.javascript.jscomp.deps.SortedDependencies(var14);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var16 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var17 = var16.getEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var18 = new com.google.javascript.jscomp.ComposeWarningsGuard(var17);
//     com.google.javascript.jscomp.JSModuleGraph var19 = new com.google.javascript.jscomp.JSModuleGraph(var17);
//     java.util.List var20 = var15.getSortedDependenciesOf(var17);
//     com.google.javascript.rhino.Node var21 = var12.createParametersWithVarArgs(var20);
//     com.google.common.collect.ImmutableList var22 = null;
//     com.google.common.collect.ImmutableList var23 = null;
//     com.google.javascript.rhino.jstype.TemplateTypeMap var24 = var12.createTemplateTypeMap(var22, var23);
//     com.google.javascript.rhino.ErrorReporter var25 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
//     com.google.javascript.rhino.jstype.JSType var27 = null;
//     com.google.javascript.jscomp.AbstractCompiler var28 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var29 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var32 = var30.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var33 = var29.getDirectedPredNodes(var32);
//     com.google.javascript.jscomp.NodeTraversal.Callback var34 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var28, var33, var34);
//     com.google.javascript.rhino.jstype.FunctionType var36 = var26.createFunctionType(var27, var33);
//     com.google.javascript.rhino.jstype.TemplateType var37 = var26.getObjectElementKey();
//     com.google.javascript.rhino.jstype.JSType var38 = var24.getTemplateType(var37);
//     com.google.javascript.rhino.jstype.JSType var39 = var1.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType)var37);
// 
//   }

  public void test99() {}
//   public void test99() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test99"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticGroup var0 = null;
//     com.google.javascript.jscomp.CheckLevel var1 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var2 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var0, var1);
//     com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.comma(var7, var11);
//     boolean var13 = var12.isNoSideEffectsCall();
//     com.google.javascript.jscomp.DiagnosticType var16 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "ERROR");
//     java.lang.String[] var18 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var19 = com.google.javascript.jscomp.JSError.make("", var12, var16, var18);
//     com.google.javascript.jscomp.DiagnosticGroup var20 = com.google.javascript.jscomp.DiagnosticGroup.forType(var16);
//     boolean var21 = var2.enables(var20);
// 
//   }

  public void test100() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test100"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setNameReferenceReportPath("");
    var0.setManageClosureDependencies(false);
    var0.setNameAnonymousFunctionsOnly(true);

  }

  public void test101() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test101"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
    com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.Node var9 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var10 = var9.getDirectives();
    boolean var11 = var9.isThrow();
    boolean var13 = var9.getBooleanProp(1);
    boolean var14 = var9.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var15 = var4.createFunctionType(var5, var9);
    com.google.javascript.rhino.ErrorReporter var16 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.jscomp.AbstractCompiler var19 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var23 = var21.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var24 = var20.getDirectedPredNodes(var23);
    com.google.javascript.jscomp.NodeTraversal.Callback var25 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var19, var24, var25);
    com.google.javascript.rhino.jstype.FunctionType var27 = var17.createFunctionType(var18, var24);
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.jscomp.AbstractCompiler var32 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var36 = var34.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var37 = var33.getDirectedPredNodes(var36);
    com.google.javascript.jscomp.NodeTraversal.Callback var38 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var32, var37, var38);
    com.google.javascript.rhino.jstype.FunctionType var40 = var30.createFunctionType(var31, var37);
    com.google.javascript.rhino.Node var41 = null;
    boolean var42 = var27.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var40, var41);
    com.google.javascript.rhino.jstype.FunctionType var43 = var40.toMaybeFunctionType();
    boolean var44 = var40.hasCachedValues();
    com.google.javascript.rhino.ErrorReporter var45 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.jscomp.AbstractCompiler var50 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var52 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var54 = var52.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var55 = var51.getDirectedPredNodes(var54);
    com.google.javascript.jscomp.NodeTraversal.Callback var56 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var50, var55, var56);
    com.google.javascript.rhino.jstype.FunctionType var58 = var48.createFunctionType(var49, var55);
    com.google.javascript.rhino.jstype.JSType var59 = var46.createNullableType((com.google.javascript.rhino.jstype.JSType)var58);
    boolean var60 = var40.canCastTo(var59);
    com.google.javascript.jscomp.CodingConvention.SubclassType var61 = null;
    var2.applySubclassRelationship(var15, var40, var61);
    com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.Node.newString("hi!", 10, 0);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var67 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var68 = var67.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var69 = new com.google.javascript.jscomp.ComposeWarningsGuard(var68);
    com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.IR.script(var68);
    com.google.javascript.rhino.Node var71 = var66.copyInformationFromForTree(var70);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var72 = var2.isPropertyTestFunction(var66);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test102() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test102"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var2 = var0.createDirectedGraphNode((java.lang.Object)(-1));
    com.google.javascript.jscomp.DiagnosticGroups var3 = new com.google.javascript.jscomp.DiagnosticGroups();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var6 = var4.createDirectedGraphNode((java.lang.Object)(-1));
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var7 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var8 = var7.getEdges();
    com.google.javascript.jscomp.deps.SortedDependencies var9 = new com.google.javascript.jscomp.deps.SortedDependencies(var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var11 = var10.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var12 = new com.google.javascript.jscomp.ComposeWarningsGuard(var11);
    com.google.javascript.jscomp.JSModuleGraph var13 = new com.google.javascript.jscomp.JSModuleGraph(var11);
    java.util.List var14 = var9.getSortedDependenciesOf(var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.connectIfNotFound((java.lang.Object)var3, (java.lang.Object)(-1), (java.lang.Object)var9);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test103() {}
//   public void test103() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test103"); }
// 
// 
//     java.io.Reader var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromReader("{ }", var1);
// 
//   }

  public void test104() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test104"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.comma(var3, var7);
    boolean var9 = var7.isUnscopedQualifiedName();
    com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var14 = var13.getDirectives();
    int var15 = var13.getChangeTime();
    boolean var16 = var13.isAssignAdd();
    com.google.javascript.rhino.Node var17 = var7.clonePropsFrom(var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.voidNode(var17);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test105() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test105"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
    com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var6 = var5.getDirectives();
    var5.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.exprResult(var5);
    com.google.javascript.jscomp.CodingConvention.Bind var11 = var1.describeFunctionBind(var5);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var13 = var12.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var14 = new com.google.javascript.jscomp.ComposeWarningsGuard(var13);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.script(var13);
    boolean var16 = var1.isPrototypeAlias(var15);
    boolean var17 = var15.isSwitch();
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var25 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.comma(var21, var25);
    boolean var27 = var25.isUnscopedQualifiedName();
    com.google.javascript.rhino.Node var31 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var32 = var31.getDirectives();
    int var33 = var31.getChangeTime();
    boolean var34 = var31.isAssignAdd();
    com.google.javascript.rhino.Node var35 = var25.clonePropsFrom(var31);
    boolean var36 = var35.isObjectLit();
    com.google.javascript.rhino.Node var37 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.addChildAfter(var35, var37);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test106() {}
//   public void test106() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test106"); }
// 
// 
//     java.lang.Class var0 = null;
//     java.lang.Enum var2 = java.lang.Enum.<java.lang.Enum>valueOf(var0, "ERROR");
// 
//   }

  public void test107() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test107"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    var3.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.not(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.continueNode(var8);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test108() {}
//   public void test108() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test108"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     var1.reportCodeChange();
//     com.google.javascript.jscomp.SourceFile var4 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
//     java.lang.String var5 = var4.getOriginalPath();
//     com.google.javascript.rhino.Node var6 = var1.parse(var4);
//     com.google.javascript.jscomp.JsAst var7 = null;
//     var1.addNewScript(var7);
// 
//   }

  public void test109() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test109"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.comma(var3, var7);
    com.google.javascript.rhino.ErrorReporter var9 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var9);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    com.google.javascript.jscomp.AbstractCompiler var14 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var15 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var16 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var18 = var16.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var19 = var15.getDirectedPredNodes(var18);
    com.google.javascript.jscomp.NodeTraversal.Callback var20 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var14, var19, var20);
    com.google.javascript.rhino.jstype.FunctionType var22 = var12.createFunctionType(var13, var19);
    com.google.javascript.rhino.jstype.JSType var23 = var10.createNullableType((com.google.javascript.rhino.jstype.JSType)var22);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.rhino.Node var30 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var31 = var30.getDirectives();
    boolean var32 = var30.isThrow();
    boolean var34 = var30.getBooleanProp(1);
    boolean var35 = var30.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var36 = var25.createFunctionType(var26, var30);
    com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var26};
    com.google.javascript.rhino.Node var38 = var10.createParameters(var37);
    boolean var39 = var38.isAssign();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.getelem(var8, var38);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test110() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test110"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    boolean var5 = var3.isThrow();
    boolean var7 = var3.getBooleanProp(1);
    boolean var8 = var3.isQualifiedName();
    var3.putProp(10, (java.lang.Object)(short)0);
    com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var19 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.comma(var15, var19);
    boolean var21 = var19.isUnscopedQualifiedName();
    boolean var22 = var19.isVar();
    boolean var23 = var19.hasOneChild();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.regexp(var3, var19);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test111() {}
//   public void test111() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test111"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
//     java.lang.String var6 = var1.getAstDotGraph();
//     com.google.javascript.jscomp.NodeTraversal.Callback var7 = null;
//     com.google.javascript.jscomp.NodeTraversal var8 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var1, var7);
//     com.google.javascript.jscomp.Scope var9 = var1.getTopScope();
//     com.google.javascript.jscomp.CheckEventfulObjectDisposal.DisposalCheckingPolicy var10 = null;
//     com.google.javascript.jscomp.CheckEventfulObjectDisposal var11 = new com.google.javascript.jscomp.CheckEventfulObjectDisposal((com.google.javascript.jscomp.AbstractCompiler)var1, var10);
// 
//   }

  public void test112() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test112"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var3 = var2.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
    java.lang.String var6 = var1.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var7 = null;
    com.google.javascript.jscomp.DefaultPassConfig var8 = new com.google.javascript.jscomp.DefaultPassConfig(var7);
    var1.setPassConfig((com.google.javascript.jscomp.PassConfig)var8);
    com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var17 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.comma(var13, var17);
    boolean var19 = var13.isContinue();
    com.google.javascript.jscomp.NodeTraversal.Callback var20 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.NodeTraversal.traverse((com.google.javascript.jscomp.AbstractCompiler)var1, var13, var20);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test113() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test113"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.continueNode();
    boolean var1 = var0.isSwitch();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.pos(var0);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test114() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test114"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    var0.pushEdgeAnnotations();
    java.util.List var2 = var0.getGraphvizEdges();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var4 = var3.getEdges();
    com.google.javascript.jscomp.deps.SortedDependencies var5 = new com.google.javascript.jscomp.deps.SortedDependencies(var4);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var6 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var7 = var6.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var8 = new com.google.javascript.jscomp.ComposeWarningsGuard(var7);
    com.google.javascript.jscomp.JSModuleGraph var9 = new com.google.javascript.jscomp.JSModuleGraph(var7);
    java.util.List var10 = var5.getSortedDependenciesOf(var7);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var12 = var11.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var13 = new com.google.javascript.jscomp.ComposeWarningsGuard(var12);
    java.util.List var14 = var5.getSortedDependenciesOf(var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var15 = var0.getInEdges((java.lang.Object)var12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test115() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test115"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.jscomp.AbstractCompiler var3 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var5.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var8 = var4.getDirectedPredNodes(var7);
    com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var3, var8, var9);
    com.google.javascript.rhino.jstype.FunctionType var11 = var1.createFunctionType(var2, var8);
    boolean var13 = var1.isForwardDeclaredType("ERROR");
    var1.setLastGeneration(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test116() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test116"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    var0.pushEdgeAnnotations();
    java.util.List var2 = var0.getGraphvizEdges();
    com.google.javascript.rhino.Node var6 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var7 = var6.getDirectives();
    var6.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.not(var6);
    com.google.javascript.rhino.jstype.StaticSourceFile var12 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var11);
    com.google.javascript.rhino.Node var16 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var17 = var16.getDirectives();
    int var18 = var16.getChangeTime();
    boolean var19 = var16.isWith();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.add(var11, var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var22 = var0.isConnectedInDirection((java.lang.Object)var11, (java.lang.Object)(-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test117() {}
//   public void test117() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test117"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     var1.reportCodeChange();
//     var1.check();
// 
//   }

  public void test118() {}
//   public void test118() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test118"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
//     java.lang.String var3 = var2.getSourceName();
//     com.google.javascript.jscomp.JSModule var4 = var2.getModule();
// 
//   }

  public void test119() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test119"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    int var5 = var3.getChangeTime();
    boolean var6 = var3.isAssignAdd();
    java.lang.String var7 = var3.getSourceFileName();
    boolean var8 = var3.isContinue();
    int var9 = var3.getLineno();
    com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(100, 1, 10);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.returnNode(var13);
    boolean var15 = var3.isEquivalentToShallow(var14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var14.setSideEffectFlags(1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test120() {}
//   public void test120() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test120"); }
// 
// 
//     com.google.javascript.rhino.Node var4 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.comma(var4, var8);
//     boolean var10 = var8.isUnscopedQualifiedName();
//     com.google.javascript.rhino.Node var14 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var15 = var14.getDirectives();
//     int var16 = var14.getChangeTime();
//     boolean var17 = var14.isAssignAdd();
//     com.google.javascript.rhino.Node var18 = var8.clonePropsFrom(var14);
//     com.google.javascript.rhino.Node var22 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var23 = var22.getDirectives();
//     int var24 = var22.getChangeTime();
//     boolean var25 = var22.isWith();
//     com.google.javascript.rhino.Node var29 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var33 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.comma(var29, var33);
//     boolean var35 = var33.isUnscopedQualifiedName();
//     com.google.javascript.rhino.Node var39 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var40 = var39.getDirectives();
//     int var41 = var39.getChangeTime();
//     boolean var42 = var39.isAssignAdd();
//     com.google.javascript.rhino.Node var43 = var33.clonePropsFrom(var39);
//     com.google.javascript.rhino.Node var44 = null;
//     com.google.javascript.rhino.Node var47 = new com.google.javascript.rhino.Node(100, var14, var22, var39, var44, 10, 0);
// 
//   }

  public void test121() {}
//   public void test121() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test121"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
//     java.lang.String var6 = var1.getAstDotGraph();
//     com.google.javascript.jscomp.CompilerOptions var7 = null;
//     com.google.javascript.jscomp.DefaultPassConfig var8 = new com.google.javascript.jscomp.DefaultPassConfig(var7);
//     var1.setPassConfig((com.google.javascript.jscomp.PassConfig)var8);
//     com.google.javascript.rhino.InputId var10 = null;
//     com.google.javascript.jscomp.CompilerInput var11 = var1.getInput(var10);
// 
//   }

  public void test122() {}
//   public void test122() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test122"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
//     java.lang.String var6 = var1.getAstDotGraph();
//     com.google.javascript.jscomp.NodeTraversal.Callback var7 = null;
//     com.google.javascript.jscomp.NodeTraversal var8 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var1, var7);
//     com.google.javascript.jscomp.Scope var9 = var1.getTopScope();
//     com.google.javascript.jscomp.JSError[] var10 = var1.getWarnings();
// 
//   }

  public void test123() {}
//   public void test123() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test123"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = null;
//     com.google.javascript.rhino.Node var6 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var7 = var6.getDirectives();
//     boolean var8 = var6.isThrow();
//     boolean var10 = var6.getBooleanProp(1);
//     boolean var11 = var6.isQualifiedName();
//     com.google.javascript.rhino.jstype.FunctionType var12 = var1.createFunctionType(var2, var6);
//     java.lang.Iterable var14 = var1.getTypesWithProperty("ERROR");
//     com.google.javascript.rhino.jstype.JSTypeNative var15 = null;
//     com.google.javascript.rhino.jstype.FunctionType var16 = var1.getNativeFunctionType(var15);
// 
//   }

  public void test124() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test124"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    int var6 = var3.getIntProp((-1));
    boolean var7 = var3.isWith();
    com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var12 = var11.getDirectives();
    int var13 = var11.getChangeTime();
    boolean var14 = var11.isAssignAdd();
    com.google.javascript.rhino.Node var18 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var22 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.comma(var18, var22);
    boolean var24 = var18.isContinue();
    boolean var25 = var18.isInc();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.hook(var3, var11, var18);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test125() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test125"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    boolean var5 = var3.isThrow();
    boolean var7 = var3.getBooleanProp(1);
    boolean var8 = var3.isLabelName();
    com.google.javascript.rhino.Node var9 = null;
    com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var14 = var13.getDirectives();
    boolean var15 = var13.isThrow();
    int var16 = var13.getSideEffectFlags();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.addChildBefore(var9, var13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);

  }

  public void test126() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test126"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    var3.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.exprResult(var3);
    boolean var9 = var8.isDo();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.var(var8);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test127() {}
//   public void test127() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test127"); }
// 
// 
//     com.google.javascript.rhino.Node var4 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.comma(var4, var8);
//     boolean var10 = var9.isNoSideEffectsCall();
//     com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "ERROR");
//     java.lang.String[] var15 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", var9, var13, var15);
//     com.google.javascript.jscomp.CheckLevel var17 = null;
//     com.google.javascript.jscomp.MessageFormatter var18 = null;
//     java.lang.String var19 = var16.format(var17, var18);
// 
//   }

  public void test128() {}
//   public void test128() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test128"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     var1.processDefines();
// 
//   }

  public void test129() {}
//   public void test129() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test129"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.ModificationVisitor var1 = new com.google.javascript.rhino.jstype.ModificationVisitor(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = var1.caseBooleanType();
// 
//   }

  public void test130() {}
//   public void test130() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test130"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var4 = new com.google.javascript.jscomp.ComposeWarningsGuard(var3);
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.script(var3);
//     com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var6);
//     com.google.javascript.jscomp.SymbolTable var8 = var1.buildKnownSymbolTable();
// 
//   }

  public void test131() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test131"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.comma(var3, var7);
    boolean var9 = var7.isUnscopedQualifiedName();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.continueNode();
    var10.putIntProp(100, 10);
    com.google.javascript.rhino.Node var17 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.comma(var17, var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.addChildrenAfter(var10, var21);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test132() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test132"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var1 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var3 = var1.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var4 = var0.getDirectedPredNodes(var3);
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var7 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var8 = var7.getEdges();
    com.google.javascript.jscomp.deps.SortedDependencies var9 = new com.google.javascript.jscomp.deps.SortedDependencies(var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var11 = var10.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var12 = new com.google.javascript.jscomp.ComposeWarningsGuard(var11);
    com.google.javascript.jscomp.JSModuleGraph var13 = new com.google.javascript.jscomp.JSModuleGraph(var11);
    java.util.List var14 = var9.getSortedDependenciesOf(var11);
    com.google.javascript.rhino.Node var15 = var6.createParametersWithVarArgs(var14);
    com.google.common.collect.ImmutableList var16 = null;
    com.google.common.collect.ImmutableList var17 = null;
    com.google.javascript.rhino.jstype.TemplateTypeMap var18 = var6.createTemplateTypeMap(var16, var17);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var19 = var0.getDirectedSuccNodes((java.lang.Object)var18);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test133() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test133"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    int var5 = var3.getChangeTime();
    boolean var6 = var3.isAssignAdd();
    java.lang.String var7 = var3.getSourceFileName();
    boolean var8 = var3.isContinue();
    int var9 = var3.getLineno();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.Node.newString("hi!", 10, 0);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var14 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var15 = var14.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var16 = new com.google.javascript.jscomp.ComposeWarningsGuard(var15);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.script(var15);
    com.google.javascript.rhino.Node var18 = var13.copyInformationFromForTree(var17);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.labelName("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.ifNode(var3, var13, var20);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test134() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test134"); }


    com.google.javascript.jscomp.CheckLevel var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.DiagnosticType var3 = com.google.javascript.jscomp.DiagnosticType.make("Node tree inequality:\nTree1:\nNOT\n    BITXOR 10\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NOT\n    BITXOR 10\n\n\nSubtree2: PARAM_LIST\n", var1, "{ }");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test135() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test135"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    java.io.PrintStream var2 = null;
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler(var2);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var5 = var4.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var3, var5, var6);
    java.lang.String var8 = var3.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var9 = null;
    com.google.javascript.jscomp.DefaultPassConfig var10 = new com.google.javascript.jscomp.DefaultPassConfig(var9);
    var3.setPassConfig((com.google.javascript.jscomp.PassConfig)var10);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var13 = var12.getEdges();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var14 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var15 = var14.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var16 = new com.google.javascript.jscomp.ComposeWarningsGuard(var15);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.script(var15);
    com.google.javascript.jscomp.CompilerOptions var18 = new com.google.javascript.jscomp.CompilerOptions();
    var18.setPropertyAffinity(false);
    com.google.javascript.jscomp.CheckLevel var21 = null;
    var18.setBrokenClosureRequiresLevel(var21);
    var3.<com.google.javascript.jscomp.SourceFile>initModules(var13, var15, var18);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var24 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    var24.pushEdgeAnnotations();
    java.util.List var26 = var24.getGraphvizEdges();
    com.google.javascript.jscomp.CompilerOptions var27 = new com.google.javascript.jscomp.CompilerOptions();
    var27.setNameReferenceReportPath("");
    var27.setSyntheticBlockEndMarker("hi!");
    var27.setTightenTypes(true);
    java.util.Set var34 = null;
    var27.setCssRenamingWhitelist(var34);
    var27.setInlineVariables(false);
    com.google.javascript.jscomp.CheckLevel var38 = null;
    var27.setCheckUnreachableCode(var38);
    var27.setDeadAssignmentElimination(true);
    byte[] var42 = new byte[] { };
    var27.setInputVariableMapSerialized(var42);
    var27.setPrintInputDelimiter(true);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var46 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var47 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var49 = var47.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var50 = var46.getDirectedPredNodes(var49);
    var27.setSourceMapLocationMappings(var50);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.Result var52 = var1.<com.google.javascript.jscomp.SourceFile,com.google.javascript.jscomp.SourceFile>compile(var13, var26, var27);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test136() {}
//   public void test136() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test136"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     var1.reportCodeChange();
//     com.google.javascript.jscomp.SourceFile var4 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
//     java.lang.String var5 = var4.getOriginalPath();
//     com.google.javascript.rhino.Node var6 = var1.parse(var4);
//     com.google.javascript.jscomp.JSSourceFile[] var7 = null;
//     com.google.javascript.jscomp.JSSourceFile var8 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var9 = new com.google.javascript.jscomp.JSSourceFile[] { var8};
//     com.google.javascript.jscomp.CompilerOptions var10 = new com.google.javascript.jscomp.CompilerOptions();
//     var10.setNameReferenceReportPath("");
//     var10.setSyntheticBlockEndMarker("hi!");
//     com.google.javascript.jscomp.Result var15 = var1.compile(var7, var9, var10);
// 
//   }

  public void test137() {}
//   public void test137() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test137"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     var1.reportCodeChange();
//     com.google.javascript.jscomp.SourceFile var4 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
//     java.lang.String var5 = var4.getOriginalPath();
//     com.google.javascript.rhino.Node var6 = var1.parse(var4);
//     com.google.javascript.jscomp.SourceFile var8 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
//     java.lang.String var9 = var8.getOriginalPath();
//     com.google.javascript.jscomp.JSSourceFile var10 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var11 = new com.google.javascript.jscomp.JSSourceFile[] { var10};
//     com.google.javascript.jscomp.CompilerOptions var12 = new com.google.javascript.jscomp.CompilerOptions();
//     var12.setPropertyAffinity(false);
//     com.google.javascript.jscomp.CheckLevel var15 = null;
//     var12.setBrokenClosureRequiresLevel(var15);
//     var12.setGenerateExports(false);
//     com.google.javascript.jscomp.SourceMap.Format var19 = null;
//     var12.setSourceMapFormat(var19);
//     com.google.javascript.jscomp.Result var21 = var1.compile(var8, var11, var12);
// 
//   }

  public void test138() {}
//   public void test138() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test138"); }
// 
// 
//     java.io.InputStream var2 = null;
//     com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromInputStream("", "hi!: ERROR", var2);
// 
//   }

  public void test139() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test139"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
    com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
    com.google.javascript.rhino.Node var6 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var7 = var6.getDirectives();
    var6.putIntProp((-1), 0);
    var6.setVarArgs(false);
    com.google.javascript.rhino.jstype.StaticSourceFile var13 = var6.getStaticSourceFile();
    com.google.javascript.jscomp.CodingConvention.Bind var14 = var2.describeFunctionBind(var6);
    com.google.javascript.rhino.Node var18 = new com.google.javascript.rhino.Node(100, 1, 10);
    com.google.javascript.rhino.Node var19 = var18.getLastSibling();
    boolean var20 = var19.isCast();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var21 = var2.isInlinableFunction(var19);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test140() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test140"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.comma(var3, var7);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.breakNode();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.caseNode(var7, var9);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test141() {}
//   public void test141() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test141"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticGroup var0 = null;
//     com.google.javascript.jscomp.CheckLevel var1 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var2 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var0, var1);
//     com.google.javascript.jscomp.DiagnosticType var5 = com.google.javascript.jscomp.DiagnosticType.disabled("(function (): ?|null)", "LABEL_NAME hi!\n");
//     com.google.javascript.jscomp.DiagnosticGroup var6 = com.google.javascript.jscomp.DiagnosticGroup.forType(var5);
//     boolean var7 = var2.disables(var6);
// 
//   }

  public void test142() {}
//   public void test142() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test142"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
//     java.lang.String var6 = var1.getAstDotGraph();
//     com.google.javascript.jscomp.NodeTraversal.Callback var7 = null;
//     com.google.javascript.jscomp.NodeTraversal var8 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var1, var7);
//     com.google.javascript.jscomp.JsAst var9 = null;
//     var1.replaceScript(var9);
// 
//   }

  public void test143() {}
//   public void test143() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test143"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setNameReferenceReportPath("");
//     var0.setSyntheticBlockEndMarker("hi!");
//     var0.setTightenTypes(true);
//     java.util.Set var7 = null;
//     var0.setCssRenamingWhitelist(var7);
//     var0.setCollapseProperties(false);
//     java.util.Map var11 = null;
//     var0.setPropertyInvalidationErrors(var11);
// 
//   }

  public void test144() {}
//   public void test144() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test144"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
//     java.lang.String var6 = var1.getAstDotGraph();
//     com.google.javascript.jscomp.NodeTraversal.Callback var7 = null;
//     com.google.javascript.jscomp.NodeTraversal var8 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var1, var7);
//     com.google.javascript.jscomp.JSModule var9 = var8.getModule();
// 
//   }

  public void test145() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test145"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    var3.putIntProp((-1), 0);
    var3.setVarArgs(false);
    com.google.javascript.rhino.jstype.StaticSourceFile var10 = var3.getStaticSourceFile();
    com.google.javascript.jscomp.CodingConvention var11 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var12 = new com.google.javascript.jscomp.GoogleCodingConvention(var11);
    com.google.javascript.rhino.Node var16 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var17 = var16.getDirectives();
    var16.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.exprResult(var16);
    com.google.javascript.jscomp.CodingConvention.Bind var22 = var12.describeFunctionBind(var16);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var23 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var24 = var23.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var25 = new com.google.javascript.jscomp.ComposeWarningsGuard(var24);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.script(var24);
    boolean var27 = var12.isPrototypeAlias(var26);
    com.google.javascript.rhino.Node var31 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var35 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.comma(var31, var35);
    boolean var37 = var35.mayMutateArguments();
    com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast var38 = var12.getObjectLiteralCast(var35);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.doNode(var3, var35);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);

  }

  public void test146() {}
//   public void test146() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test146"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator var0 = new com.google.javascript.jscomp.AstValidator();
//     com.google.javascript.rhino.Node var1 = null;
//     var0.validateCodeRoot(var1);
// 
//   }

  public void test147() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test147"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.jscomp.AbstractCompiler var3 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var5.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var8 = var4.getDirectedPredNodes(var7);
    com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var3, var8, var9);
    com.google.javascript.rhino.jstype.FunctionType var11 = var1.createFunctionType(var2, var8);
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.AbstractCompiler var16 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var20 = var18.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var21 = var17.getDirectedPredNodes(var20);
    com.google.javascript.jscomp.NodeTraversal.Callback var22 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var16, var21, var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var14.createFunctionType(var15, var21);
    com.google.javascript.rhino.Node var25 = null;
    boolean var26 = var11.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var24, var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.FunctionType var27 = var11.cloneWithoutArrowType();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);

  }

  public void test148() {}
//   public void test148() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test148"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setNameReferenceReportPath("");
//     var0.setSyntheticBlockEndMarker("hi!");
//     var0.setTightenTypes(true);
//     java.util.Set var7 = null;
//     var0.setCssRenamingWhitelist(var7);
//     var0.setInlineVariables(false);
//     var0.setCollapseVariableDeclarations(true);
//     var0.setDeadAssignmentElimination(false);
//     java.util.Map var15 = null;
//     var0.setPropertyInvalidationErrors(var15);
// 
//   }

  public void test149() {}
//   public void test149() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test149"); }
// 
// 
//     com.google.javascript.jscomp.CheckLevel var3 = null;
//     com.google.javascript.jscomp.DiagnosticType var4 = null;
//     java.lang.String[] var6 = new java.lang.String[] { "BITXOR 10"};
//     com.google.javascript.jscomp.JSError var7 = com.google.javascript.jscomp.JSError.make("ERROR", 1, 10, var3, var4, var6);
// 
//   }

  public void test150() {}
//   public void test150() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test150"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.CheckLevel var3 = null;
//     com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var12 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.comma(var8, var12);
//     boolean var14 = var13.isNoSideEffectsCall();
//     com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "ERROR");
//     java.lang.String[] var19 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var20 = com.google.javascript.jscomp.JSError.make("", var13, var17, var19);
//     int var21 = var20.getNodeLength();
//     var2.println(var3, var20);
// 
//   }

  public void test151() {}
//   public void test151() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test151"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = null;
//     com.google.javascript.jscomp.AbstractCompiler var3 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var5.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var8 = var4.getDirectedPredNodes(var7);
//     com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var3, var8, var9);
//     com.google.javascript.rhino.jstype.FunctionType var11 = var1.createFunctionType(var2, var8);
//     com.google.javascript.rhino.ErrorReporter var12 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var14 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var15 = var14.getEdges();
//     com.google.javascript.jscomp.deps.SortedDependencies var16 = new com.google.javascript.jscomp.deps.SortedDependencies(var15);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var18 = var17.getEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var19 = new com.google.javascript.jscomp.ComposeWarningsGuard(var18);
//     com.google.javascript.jscomp.JSModuleGraph var20 = new com.google.javascript.jscomp.JSModuleGraph(var18);
//     java.util.List var21 = var16.getSortedDependenciesOf(var18);
//     com.google.javascript.rhino.Node var22 = var13.createParametersWithVarArgs(var21);
//     com.google.common.collect.ImmutableList var23 = null;
//     com.google.common.collect.ImmutableList var24 = null;
//     com.google.javascript.rhino.jstype.TemplateTypeMap var25 = var13.createTemplateTypeMap(var23, var24);
//     java.lang.String var26 = var25.toString();
//     com.google.javascript.rhino.jstype.TemplateTypeMapReplacer var27 = new com.google.javascript.rhino.jstype.TemplateTypeMapReplacer(var1, var25);
//     java.util.List var28 = null;
//     var1.setTemplateTypeNames(var28);
// 
//   }

  public void test152() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test152"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("hi!", 10, 0);
    java.lang.Object var5 = var3.getProp(1);
    var3.addSuppression("");
    com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var12 = var11.getDirectives();
    var11.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.not(var11);
    com.google.javascript.rhino.jstype.StaticSourceFile var17 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var18 = var3.removeChildAfter(var16);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test153() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test153"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    var0.pushEdgeAnnotations();
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = null;
    com.google.javascript.rhino.jstype.TemplateTypeMap var3 = null;
    com.google.javascript.rhino.jstype.TemplateTypeMapReplacer var4 = new com.google.javascript.rhino.jstype.TemplateTypeMapReplacer(var2, var3);
    com.google.javascript.rhino.jstype.EnumElementType var5 = null;
    com.google.javascript.rhino.jstype.JSType var6 = var4.caseEnumElementType(var5);
    com.google.javascript.jscomp.CodingConvention var7 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var8 = new com.google.javascript.jscomp.GoogleCodingConvention(var7);
    com.google.javascript.rhino.Node var12 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var13 = var12.getDirectives();
    var12.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.exprResult(var12);
    com.google.javascript.jscomp.CodingConvention.Bind var18 = var8.describeFunctionBind(var12);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var19 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var20 = var19.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var21 = new com.google.javascript.jscomp.ComposeWarningsGuard(var20);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.script(var20);
    boolean var23 = var8.isPrototypeAlias(var22);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.rhino.Node var30 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var31 = var30.getDirectives();
    boolean var32 = var30.isThrow();
    boolean var34 = var30.getBooleanProp(1);
    boolean var35 = var30.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var36 = var25.createFunctionType(var26, var30);
    java.lang.Iterable var38 = var25.getTypesWithProperty("ERROR");
    java.lang.Iterable var40 = var25.getEachReferenceTypeWithProperty("ERROR");
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.jscomp.AbstractCompiler var44 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var45 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var46 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var48 = var46.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var49 = var45.getDirectedPredNodes(var48);
    com.google.javascript.jscomp.NodeTraversal.Callback var50 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var44, var49, var50);
    com.google.javascript.rhino.jstype.FunctionType var52 = var42.createFunctionType(var43, var49);
    java.lang.Iterable var53 = var52.getImplementedInterfaces();
    boolean var54 = var52.isStruct();
    java.lang.String var55 = var52.getDisplayName();
    com.google.javascript.jscomp.AbstractCompiler var56 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var57 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var58 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var60 = var58.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var61 = var57.getDirectedPredNodes(var60);
    com.google.javascript.jscomp.NodeTraversal.Callback var62 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var56, var61, var62);
    java.util.Map var64 = null;
    var8.defineDelegateProxyPrototypeProperties(var25, (com.google.javascript.rhino.jstype.StaticScope)var52, var61, var64);
    com.google.javascript.rhino.jstype.ObjectType var66 = var52.toObjectType();
    com.google.javascript.rhino.JSDocInfo var67 = var52.getJSDocInfo();
    com.google.javascript.rhino.jstype.JSType var68 = var4.caseObjectType((com.google.javascript.rhino.jstype.ObjectType)var52);
    com.google.javascript.rhino.Node var72 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var73 = var72.getDirectives();
    var72.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.not(var72);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.disconnect((java.lang.Object)var4, (java.lang.Object)var77);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test154() {}
//   public void test154() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test154"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
//     java.lang.String var6 = var1.getAstDotGraph();
//     com.google.javascript.jscomp.NodeTraversal.Callback var7 = null;
//     com.google.javascript.jscomp.NodeTraversal var8 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var1, var7);
//     boolean var9 = var1.acceptConstKeyword();
// 
//   }

  public void test155() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test155"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    java.util.Collection var1 = var0.getNodes();
    var0.pushNodeAnnotations();
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.AbstractCompiler var6 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var7 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var10 = var8.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var11 = var7.getDirectedPredNodes(var10);
    com.google.javascript.jscomp.NodeTraversal.Callback var12 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var6, var11, var12);
    com.google.javascript.rhino.jstype.FunctionType var14 = var4.createFunctionType(var5, var11);
    com.google.javascript.rhino.ErrorReporter var16 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.jscomp.AbstractCompiler var19 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var23 = var21.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var24 = var20.getDirectedPredNodes(var23);
    com.google.javascript.jscomp.NodeTraversal.Callback var25 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var19, var24, var25);
    com.google.javascript.rhino.jstype.FunctionType var27 = var17.createFunctionType(var18, var24);
    com.google.javascript.rhino.Node var28 = null;
    boolean var29 = var14.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var27, var28);
    com.google.javascript.rhino.jstype.FunctionType var30 = var27.toMaybeFunctionType();
    boolean var31 = var27.hasCachedValues();
    com.google.javascript.rhino.ErrorReporter var32 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var32);
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.jscomp.AbstractCompiler var37 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var38 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var39 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var41 = var39.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var42 = var38.getDirectedPredNodes(var41);
    com.google.javascript.jscomp.NodeTraversal.Callback var43 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var37, var42, var43);
    com.google.javascript.rhino.jstype.FunctionType var45 = var35.createFunctionType(var36, var42);
    com.google.javascript.rhino.jstype.JSType var46 = var33.createNullableType((com.google.javascript.rhino.jstype.JSType)var45);
    boolean var47 = var27.canCastTo(var46);
    com.google.javascript.rhino.ErrorReporter var48 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var48);
    com.google.javascript.rhino.ErrorReporter var50 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var50);
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.jscomp.AbstractCompiler var53 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var54 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var55 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var57 = var55.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var58 = var54.getDirectedPredNodes(var57);
    com.google.javascript.jscomp.NodeTraversal.Callback var59 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var53, var58, var59);
    com.google.javascript.rhino.jstype.FunctionType var61 = var51.createFunctionType(var52, var58);
    com.google.javascript.rhino.jstype.JSType var62 = var49.createNullableType((com.google.javascript.rhino.jstype.JSType)var61);
    com.google.javascript.rhino.jstype.JSType.TypePair var63 = var27.getTypesUnderEquality((com.google.javascript.rhino.jstype.JSType)var61);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var64 = var0.getOutEdges((java.lang.Object)var61);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test156() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test156"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    int var5 = var3.getChangeTime();
    boolean var6 = var3.isAssignAdd();
    java.lang.String var7 = var3.getSourceFileName();
    boolean var8 = var3.isContinue();
    int var9 = var3.getLineno();
    com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(100, 1, 10);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.returnNode(var13);
    boolean var15 = var3.isEquivalentToShallow(var14);
    com.google.javascript.rhino.Node var19 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var23 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.comma(var19, var23);
    boolean var25 = var23.isUnscopedQualifiedName();
    boolean var26 = var23.isVar();
    boolean var27 = var23.hasOneChild();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.caseNode(var3, var23);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test157() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test157"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
    com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var6 = var5.getDirectives();
    var5.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.exprResult(var5);
    com.google.javascript.jscomp.CodingConvention.Bind var11 = var1.describeFunctionBind(var5);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var13 = var12.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var14 = new com.google.javascript.jscomp.ComposeWarningsGuard(var13);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.script(var13);
    boolean var16 = var1.isPrototypeAlias(var15);
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.Node var23 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var24 = var23.getDirectives();
    boolean var25 = var23.isThrow();
    boolean var27 = var23.getBooleanProp(1);
    boolean var28 = var23.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var29 = var18.createFunctionType(var19, var23);
    java.lang.Iterable var31 = var18.getTypesWithProperty("ERROR");
    java.lang.Iterable var33 = var18.getEachReferenceTypeWithProperty("ERROR");
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.jscomp.AbstractCompiler var37 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var38 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var39 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var41 = var39.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var42 = var38.getDirectedPredNodes(var41);
    com.google.javascript.jscomp.NodeTraversal.Callback var43 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var37, var42, var43);
    com.google.javascript.rhino.jstype.FunctionType var45 = var35.createFunctionType(var36, var42);
    java.lang.Iterable var46 = var45.getImplementedInterfaces();
    boolean var47 = var45.isStruct();
    java.lang.String var48 = var45.getDisplayName();
    com.google.javascript.jscomp.AbstractCompiler var49 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var53 = var51.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var54 = var50.getDirectedPredNodes(var53);
    com.google.javascript.jscomp.NodeTraversal.Callback var55 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var49, var54, var55);
    java.util.Map var57 = null;
    var1.defineDelegateProxyPrototypeProperties(var18, (com.google.javascript.rhino.jstype.StaticScope)var45, var54, var57);
    com.google.javascript.rhino.jstype.ObjectType var59 = var45.toObjectType();
    com.google.javascript.rhino.JSDocInfo var60 = var45.getJSDocInfo();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.ObjectType var62 = var45.getTopMostDefiningType("BITXOR 10");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);

  }

  public void test158() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test158"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.JSTypeNative var1 = com.google.javascript.rhino.jstype.JSTypeNative.valueOf("");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test159() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test159"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    java.lang.String var2 = var1.toStringTree();
    boolean var3 = var1.isOptionalArg();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "LABEL_NAME hi!\n"+ "'", var2.equals("LABEL_NAME hi!\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test160() {}
//   public void test160() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test160"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
//     com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
//     com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
//     com.google.javascript.rhino.Node var6 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var7 = var6.getDirectives();
//     boolean var8 = var6.isThrow();
//     boolean var10 = var6.getBooleanProp(1);
//     boolean var11 = var6.isLabelName();
//     java.util.Map var12 = null;
//     var2.checkForCallingConventionDefiningCalls(var6, var12);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.trueNode();
//     boolean var15 = var14.isExprResult();
//     java.util.List var16 = var2.identifyTypeDeclarationCall(var14);
// 
//   }

  public void test161() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test161"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    java.io.PrintStream var1 = null;
    com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var4 = var3.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var2, var4, var5);
    java.lang.String var7 = var2.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var8 = null;
    com.google.javascript.jscomp.DefaultPassConfig var9 = new com.google.javascript.jscomp.DefaultPassConfig(var8);
    var2.setPassConfig((com.google.javascript.jscomp.PassConfig)var9);
    java.io.PrintStream var11 = null;
    com.google.javascript.jscomp.Compiler var12 = new com.google.javascript.jscomp.Compiler(var11);
    var12.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var15 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var16 = var15.getOriginalPath();
    com.google.javascript.rhino.Node var17 = var12.parse(var15);
    var15.setOriginalPath("{ }");
    com.google.javascript.rhino.Node var20 = var2.parse(var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var21 = var0.getNodeDegree((java.lang.Object)var20);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ""+ "'", var7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test162() {}
//   public void test162() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test162"); }
// 
// 
//     java.lang.String var0 = com.google.javascript.jscomp.Compiler.getReleaseDate();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var0 + "' != '" + "2014/12/24 01:19"+ "'", var0.equals("2014/12/24 01:19"));
// 
//   }

  public void test163() {}
//   public void test163() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test163"); }
// 
// 
//     com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.comma(var3, var7);
//     boolean var9 = var7.isUnscopedQualifiedName();
//     boolean var10 = var7.isVar();
//     boolean var11 = var7.hasOneChild();
//     com.google.javascript.rhino.Node var13 = var7.getChildAtIndex(1);
// 
//   }

  public void test164() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test164"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    var3.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.not(var3);
    com.google.javascript.rhino.jstype.StaticSourceFile var9 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var8);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var13 = var12.getEdges();
    com.google.javascript.jscomp.deps.SortedDependencies var14 = new com.google.javascript.jscomp.deps.SortedDependencies(var13);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var15 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var16 = var15.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var17 = new com.google.javascript.jscomp.ComposeWarningsGuard(var16);
    com.google.javascript.jscomp.JSModuleGraph var18 = new com.google.javascript.jscomp.JSModuleGraph(var16);
    java.util.List var19 = var14.getSortedDependenciesOf(var16);
    com.google.javascript.rhino.Node var20 = var11.createParametersWithVarArgs(var19);
    java.lang.String var21 = var8.checkTreeEquals(var20);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(var20);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "Node tree inequality:\nTree1:\nNOT\n    BITXOR 10\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NOT\n    BITXOR 10\n\n\nSubtree2: PARAM_LIST\n"+ "'", var21.equals("Node tree inequality:\nTree1:\nNOT\n    BITXOR 10\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NOT\n    BITXOR 10\n\n\nSubtree2: PARAM_LIST\n"));

  }

  public void test165() {}
//   public void test165() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test165"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.ModificationVisitor var1 = new com.google.javascript.rhino.jstype.ModificationVisitor(var0);
//     com.google.javascript.rhino.jstype.EnumElementType var2 = null;
//     com.google.javascript.rhino.jstype.JSType var3 = var1.caseEnumElementType(var2);
//     com.google.javascript.rhino.jstype.JSType var4 = var1.caseVoidType();
// 
//   }

  public void test166() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test166"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    int var5 = var3.getChangeTime();
    com.google.javascript.rhino.Node var6 = var3.removeFirstChild();
    boolean var7 = var3.isFromExterns();
    com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.comma(var11, var15);
    boolean var17 = var11.isContinue();
    boolean var18 = var11.isInc();
    boolean var19 = var11.isVoid();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.addChildrenToFront(var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test167() {}
//   public void test167() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test167"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
//     java.lang.String var6 = var1.getAstDotGraph();
//     com.google.javascript.jscomp.CompilerOptions var7 = null;
//     com.google.javascript.jscomp.DefaultPassConfig var8 = new com.google.javascript.jscomp.DefaultPassConfig(var7);
//     var1.setPassConfig((com.google.javascript.jscomp.PassConfig)var8);
//     var1.processDefines();
// 
//   }

  public void test168() {}
//   public void test168() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test168"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.cast(var0);
// 
//   }

  public void test169() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test169"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("hi!");
    var2.setOptionalArg(false);
    int var5 = var2.getCharno();
    var2.setSourceEncodedPositionForTree(100);
    com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.comma(var11, var15);
    boolean var17 = var15.isUnscopedQualifiedName();
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var22 = var21.getDirectives();
    int var23 = var21.getChangeTime();
    boolean var24 = var21.isAssignAdd();
    com.google.javascript.rhino.Node var25 = var15.clonePropsFrom(var21);
    boolean var26 = var25.isObjectLit();
    boolean var27 = var25.isInstanceOf();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var30 = new com.google.javascript.rhino.Node(0, var2, var25, 100, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test170() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test170"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.CheckLevel var1 = com.google.javascript.jscomp.CheckLevel.valueOf("Object#Element");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test171() {}
//   public void test171() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test171"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var1 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     com.google.javascript.jscomp.AbstractCompiler var4 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var6 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var8 = var6.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var9 = var5.getDirectedPredNodes(var8);
//     com.google.javascript.jscomp.NodeTraversal.Callback var10 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var4, var9, var10);
//     com.google.javascript.rhino.jstype.FunctionType var12 = var2.createFunctionType(var3, var9);
//     com.google.javascript.rhino.ErrorReporter var14 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     com.google.javascript.jscomp.AbstractCompiler var17 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var19 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var21 = var19.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var22 = var18.getDirectedPredNodes(var21);
//     com.google.javascript.jscomp.NodeTraversal.Callback var23 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var17, var22, var23);
//     com.google.javascript.rhino.jstype.FunctionType var25 = var15.createFunctionType(var16, var22);
//     com.google.javascript.rhino.Node var26 = null;
//     boolean var27 = var12.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var25, var26);
//     com.google.javascript.rhino.Node var28 = var12.getParametersNode();
//     int var29 = var28.getChildCount();
//     com.google.javascript.rhino.Node var30 = null;
//     com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.name("hi!");
//     var32.setOptionalArg(false);
//     com.google.javascript.rhino.Node var38 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var42 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.comma(var38, var42);
//     boolean var44 = var42.isDebugger();
//     var42.setVarArgs(true);
//     com.google.javascript.rhino.Node var47 = new com.google.javascript.rhino.Node((-1), var28, var30, var32, var42);
// 
//   }

  public void test172() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test172"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(100, 1, 10);
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.returnNode(var3);
    com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var9 = var8.getDirectives();
    int var10 = var8.getChangeTime();
    boolean var11 = var8.isAssignAdd();
    java.lang.String var12 = var8.getSourceFileName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.assign(var3, var8);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test173() {}
//   public void test173() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test173"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setNameReferenceReportPath("");
//     var0.setSyntheticBlockEndMarker("hi!");
//     var0.setDefineToBooleanLiteral("", false);
//     java.util.Map var8 = null;
//     var0.setIdGenerators(var8);
// 
//   }

  public void test174() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test174"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.comma(var3, var7);
    boolean var9 = var7.isUnscopedQualifiedName();
    boolean var10 = var7.isVar();
    boolean var11 = var7.hasOneChild();
    int var12 = var7.getLength();
    com.google.javascript.rhino.Node var16 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var17 = var16.getDirectives();
    int var18 = var16.getChangeTime();
    com.google.javascript.rhino.Node var19 = var16.removeFirstChild();
    boolean var20 = var16.isFromExterns();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.sheq(var7, var16);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test175() {}
//   public void test175() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test175"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.ModificationVisitor var1 = new com.google.javascript.rhino.jstype.ModificationVisitor(var0);
//     com.google.javascript.rhino.jstype.EnumElementType var2 = null;
//     com.google.javascript.rhino.jstype.JSType var3 = var1.caseEnumElementType(var2);
//     com.google.javascript.rhino.jstype.EnumElementType var4 = null;
//     com.google.javascript.rhino.jstype.JSType var5 = var1.caseEnumElementType(var4);
//     com.google.javascript.rhino.jstype.JSType var6 = var1.caseStringType();
// 
//   }

  public void test176() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test176"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    int var5 = var3.getChangeTime();
    com.google.javascript.rhino.Node var6 = var3.removeFirstChild();
    boolean var7 = var3.isFromExterns();
    boolean var8 = var3.isParamList();
    boolean var9 = var3.isAssignAdd();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.breakNode();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var11 = var3.removeChildAfter(var10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test177() {}
//   public void test177() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test177"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.TemplateTypeMap var1 = null;
//     com.google.javascript.rhino.jstype.TemplateTypeMapReplacer var2 = new com.google.javascript.rhino.jstype.TemplateTypeMapReplacer(var0, var1);
//     com.google.javascript.rhino.jstype.JSType var3 = var2.caseBooleanType();
// 
//   }

  public void test178() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test178"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setNameReferenceReportPath("");
    var0.setSyntheticBlockEndMarker("hi!");
    var0.setLooseTypes(false);
    boolean var7 = var0.assumeStrictThis();
    var0.setAssumeStrictThis(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test179() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test179"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
    com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var6 = var5.getDirectives();
    var5.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.exprResult(var5);
    com.google.javascript.jscomp.CodingConvention.Bind var11 = var1.describeFunctionBind(var5);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var13 = var12.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var14 = new com.google.javascript.jscomp.ComposeWarningsGuard(var13);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.script(var13);
    boolean var16 = var1.isPrototypeAlias(var15);
    boolean var17 = var15.isSwitch();
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var22 = var21.getDirectives();
    var21.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.exprResult(var21);
    java.lang.Iterable var27 = var26.siblings();
    com.google.javascript.rhino.Node var31 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var32 = var31.getDirectives();
    boolean var33 = var31.isThrow();
    boolean var35 = var31.getBooleanProp(1);
    boolean var36 = var31.isQualifiedName();
    var31.putProp(10, (java.lang.Object)(short)0);
    boolean var41 = var31.getBooleanProp(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.addChildrenAfter(var26, var31);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test180() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test180"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var3 = var2.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
    java.lang.String var6 = var1.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var7 = null;
    com.google.javascript.jscomp.DefaultPassConfig var8 = new com.google.javascript.jscomp.DefaultPassConfig(var7);
    var1.setPassConfig((com.google.javascript.jscomp.PassConfig)var8);
    java.io.PrintStream var10 = null;
    com.google.javascript.jscomp.Compiler var11 = new com.google.javascript.jscomp.Compiler(var10);
    var11.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var14 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var15 = var14.getOriginalPath();
    com.google.javascript.rhino.Node var16 = var11.parse(var14);
    var14.setOriginalPath("{ }");
    com.google.javascript.rhino.Node var19 = var1.parse(var14);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var22 = var20.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var23 = var20.getGraphvizEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var24 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var23, var24);
    com.google.javascript.jscomp.MessageFormatter var26 = null;
    java.util.logging.Logger var27 = null;
    com.google.javascript.jscomp.LoggerErrorManager var28 = new com.google.javascript.jscomp.LoggerErrorManager(var26, var27);
    int var29 = var28.getWarningCount();
    com.google.javascript.jscomp.JSError[] var30 = var28.getWarnings();
    var1.setErrorManager((com.google.javascript.jscomp.ErrorManager)var28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String[] var32 = var1.toSourceArray();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test181() {}
//   public void test181() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test181"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticGroup var0 = null;
//     com.google.javascript.jscomp.CheckLevel var1 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var2 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var0, var1);
//     com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.comma(var7, var11);
//     boolean var13 = var12.isNoSideEffectsCall();
//     com.google.javascript.jscomp.DiagnosticType var16 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "ERROR");
//     java.lang.String[] var18 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var19 = com.google.javascript.jscomp.JSError.make("", var12, var16, var18);
//     com.google.javascript.jscomp.DiagnosticGroup var20 = com.google.javascript.jscomp.DiagnosticGroup.forType(var16);
//     java.lang.Iterable var21 = var20.getTypes();
//     boolean var22 = var2.disables(var20);
// 
//   }

  public void test182() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test182"); }


    com.google.javascript.jscomp.AstValidator var0 = new com.google.javascript.jscomp.AstValidator();
    com.google.javascript.rhino.Node var4 = new com.google.javascript.rhino.Node(100, 1, 10);
    com.google.javascript.rhino.Node var5 = var4.getLastSibling();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.validateStatement(var5);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test183() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test183"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    int var5 = var3.getChangeTime();
    boolean var6 = var3.isAssignAdd();
    boolean var7 = var3.isGetterDef();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.setQuotedString();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test184() {}
//   public void test184() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test184"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
//     java.lang.String var3 = var2.getSourceName();
//     com.google.javascript.rhino.Node var4 = var2.getCurrentNode();
//     com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var9 = var8.getDirectives();
//     int var10 = var8.getChangeTime();
//     boolean var11 = var8.isAssignAdd();
//     java.lang.String var12 = var8.getSourceFileName();
//     boolean var13 = var8.isIn();
//     com.google.javascript.rhino.Node var18 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var22 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.comma(var18, var22);
//     boolean var24 = var23.isNoSideEffectsCall();
//     com.google.javascript.jscomp.DiagnosticType var27 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "ERROR");
//     java.lang.String[] var29 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var30 = com.google.javascript.jscomp.JSError.make("", var23, var27, var29);
//     java.lang.String[] var31 = null;
//     var2.report(var8, var27, var31);
// 
//   }

  public void test185() {}
//   public void test185() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test185"); }
// 
// 
//     com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(100, 1, 10);
//     com.google.javascript.rhino.Node var8 = var7.getLastSibling();
//     boolean var9 = var7.isGetElem();
//     var7.setWasEmptyNode(false);
//     com.google.javascript.rhino.Node var12 = var3.useSourceInfoFromForTree(var7);
//     com.google.javascript.rhino.InputId var13 = var3.getInputId();
//     java.lang.Appendable var14 = null;
//     var3.appendStringTree(var14);
// 
//   }

  public void test186() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test186"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.comma(var3, var7);
    boolean var9 = var7.isUnscopedQualifiedName();
    com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var14 = var13.getDirectives();
    int var15 = var13.getChangeTime();
    boolean var16 = var13.isAssignAdd();
    com.google.javascript.rhino.Node var17 = var7.clonePropsFrom(var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var13.setQuotedString();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test187() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test187"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
    com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.comma(var7, var11);
    boolean var13 = var11.isDebugger();
    var11.setVarArgs(true);
    com.google.javascript.rhino.JSDocInfo var16 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNodeDeclaration((com.google.javascript.jscomp.CodingConvention)var2, "hi!", var11, var16);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test188() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test188"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
    com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
    com.google.javascript.rhino.Node var6 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var7 = var6.getDirectives();
    var6.putIntProp((-1), 0);
    var6.setVarArgs(false);
    com.google.javascript.rhino.jstype.StaticSourceFile var13 = var6.getStaticSourceFile();
    com.google.javascript.jscomp.CodingConvention.Bind var14 = var2.describeFunctionBind(var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var15 = var6.getString();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test189() {}
//   public void test189() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test189"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setNameReferenceReportPath("");
//     var0.setSyntheticBlockEndMarker("hi!");
//     var0.setLooseTypes(false);
//     java.util.Map var7 = null;
//     var0.setPropertyInvalidationErrors(var7);
// 
//   }

  public void test190() {}
//   public void test190() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test190"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
//     boolean var3 = var2.hasScope();
//     com.google.javascript.jscomp.CompilerInput var4 = var2.getInput();
// 
//   }

  public void test191() {}
//   public void test191() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test191"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.deps.SortedDependencies var4 = new com.google.javascript.jscomp.deps.SortedDependencies(var3);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var6 = var5.getEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var7 = new com.google.javascript.jscomp.ComposeWarningsGuard(var6);
//     com.google.javascript.jscomp.JSModuleGraph var8 = new com.google.javascript.jscomp.JSModuleGraph(var6);
//     java.util.List var9 = var4.getSortedDependenciesOf(var6);
//     com.google.javascript.rhino.Node var10 = var1.createParametersWithVarArgs(var9);
//     com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var16 = var15.getDirectives();
//     int var17 = var15.getChangeTime();
//     boolean var18 = var15.isAssignAdd();
//     java.lang.String var19 = var15.getSourceFileName();
//     boolean var20 = var15.isCast();
//     com.google.javascript.rhino.ErrorReporter var21 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
//     com.google.javascript.rhino.jstype.JSType var23 = null;
//     com.google.javascript.rhino.Node var27 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var28 = var27.getDirectives();
//     boolean var29 = var27.isThrow();
//     boolean var31 = var27.getBooleanProp(1);
//     boolean var32 = var27.isQualifiedName();
//     com.google.javascript.rhino.jstype.FunctionType var33 = var22.createFunctionType(var23, var27);
//     boolean var34 = var33.matchesNumberContext();
//     com.google.javascript.rhino.jstype.ObjectType var35 = var1.createObjectType("LABEL_NAME hi!\n", var15, (com.google.javascript.rhino.jstype.ObjectType)var33);
//     com.google.javascript.rhino.jstype.JSTypeNative var36 = null;
//     com.google.javascript.rhino.jstype.ObjectType var37 = var1.getNativeObjectType(var36);
// 
//   }

  public void test192() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test192"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var8 = var7.getDirectives();
    var7.putIntProp((-1), 0);
    var7.setVarArgs(false);
    com.google.javascript.rhino.jstype.StaticSourceFile var14 = var7.getStaticSourceFile();
    boolean var15 = var7.isLocalResultCall();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.getprop(var3, var7);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test193() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test193"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.jscomp.AbstractCompiler var5 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var6 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var7 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var9 = var7.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var10 = var6.getDirectedPredNodes(var9);
    com.google.javascript.jscomp.NodeTraversal.Callback var11 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var5, var10, var11);
    com.google.javascript.rhino.jstype.FunctionType var13 = var3.createFunctionType(var4, var10);
    com.google.javascript.rhino.jstype.JSType var14 = var1.createNullableType((com.google.javascript.rhino.jstype.JSType)var13);
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var22 = var21.getDirectives();
    boolean var23 = var21.isThrow();
    boolean var25 = var21.getBooleanProp(1);
    boolean var26 = var21.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var27 = var16.createFunctionType(var17, var21);
    com.google.javascript.rhino.jstype.JSType[] var28 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.Node var29 = var1.createParameters(var28);
    com.google.javascript.rhino.ErrorReporter var31 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var31);
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.jscomp.AbstractCompiler var34 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var36 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var38 = var36.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var39 = var35.getDirectedPredNodes(var38);
    com.google.javascript.jscomp.NodeTraversal.Callback var40 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var34, var39, var40);
    com.google.javascript.rhino.jstype.FunctionType var42 = var32.createFunctionType(var33, var39);
    java.lang.Iterable var43 = var42.getImplementedInterfaces();
    com.google.javascript.rhino.ErrorReporter var44 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    com.google.javascript.jscomp.AbstractCompiler var47 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var48 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var49 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var51 = var49.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var52 = var48.getDirectedPredNodes(var51);
    com.google.javascript.jscomp.NodeTraversal.Callback var53 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var47, var52, var53);
    com.google.javascript.rhino.jstype.FunctionType var55 = var45.createFunctionType(var46, var52);
    com.google.javascript.rhino.ErrorReporter var57 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var57);
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.jscomp.AbstractCompiler var60 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var61 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var62 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var64 = var62.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var65 = var61.getDirectedPredNodes(var64);
    com.google.javascript.jscomp.NodeTraversal.Callback var66 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var60, var65, var66);
    com.google.javascript.rhino.jstype.FunctionType var68 = var58.createFunctionType(var59, var65);
    com.google.javascript.rhino.Node var69 = null;
    boolean var70 = var55.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var68, var69);
    boolean var71 = var42.isInvariant((com.google.javascript.rhino.jstype.JSType)var55);
    com.google.javascript.rhino.jstype.JSType var72 = var42.getReturnType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.overwriteDeclaredType("", (com.google.javascript.rhino.jstype.JSType)var42);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test194() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test194"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    var0.pushEdgeAnnotations();
    java.util.List var2 = var0.getGraphvizEdges();
    com.google.javascript.rhino.Node var6 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.comma(var6, var10);
    boolean var12 = var10.isDebugger();
    var10.setSourceEncodedPositionForTree((-1));
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.Node.newString("", 100, 10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.disconnectInDirection((java.lang.Object)(-1), (java.lang.Object)var18);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test195() {}
//   public void test195() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test195"); }
// 
// 
//     com.google.javascript.rhino.Node var4 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.comma(var4, var8);
//     boolean var10 = var9.isNoSideEffectsCall();
//     com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "ERROR");
//     java.lang.String[] var15 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", var9, var13, var15);
//     int var17 = var16.getNodeLength();
//     com.google.javascript.jscomp.CheckLevel var18 = null;
//     com.google.javascript.jscomp.MessageFormatter var19 = null;
//     java.lang.String var20 = var16.format(var18, var19);
// 
//   }

  public void test196() {}
//   public void test196() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test196"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = null;
//     com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var6 = var5.getDirectives();
//     var5.putIntProp((-1), 0);
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.not(var5);
//     com.google.javascript.rhino.jstype.StaticSourceFile var11 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var10);
//     com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var16 = var15.getDirectives();
//     int var17 = var15.getChangeTime();
//     boolean var18 = var15.isWith();
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.add(var10, var15);
//     com.google.javascript.rhino.Node var23 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var24 = var23.getDirectives();
//     var23.putIntProp((-1), 0);
//     com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.exprResult(var23);
//     java.lang.Iterable var29 = var28.siblings();
//     com.google.javascript.rhino.Node var30 = var15.useSourceInfoIfMissingFrom(var28);
//     com.google.javascript.rhino.Node var31 = var28.cloneTree();
//     com.google.javascript.rhino.JSDocInfo var32 = null;
//     com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNodeDeclaration(var0, "", var28, var32);
// 
//   }

  public void test197() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test197"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.comma(var3, var7);
    boolean var9 = var7.isUnscopedQualifiedName();
    com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var14 = var13.getDirectives();
    int var15 = var13.getChangeTime();
    boolean var16 = var13.isAssignAdd();
    com.google.javascript.rhino.Node var17 = var7.clonePropsFrom(var13);
    boolean var18 = var17.isObjectLit();
    com.google.javascript.rhino.Node[] var19 = new com.google.javascript.rhino.Node[] { var17};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.paramList(var19);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test198() {}
//   public void test198() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test198"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
//     java.lang.String var3 = var2.getSourceName();
//     com.google.javascript.jscomp.CompilerInput var4 = var2.getInput();
// 
//   }

  public void test199() {}
//   public void test199() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test199"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
//     java.lang.String var2 = var1.getOriginalPath();
//     int var4 = var1.getColumnOfOffset(10);
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var1, false);
//     java.io.PrintStream var7 = null;
//     com.google.javascript.jscomp.Compiler var8 = new com.google.javascript.jscomp.Compiler(var7);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var9 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var10 = var9.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var11 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var8, var10, var11);
//     java.lang.String var13 = var8.getAstDotGraph();
//     com.google.javascript.jscomp.CompilerOptions var14 = null;
//     com.google.javascript.jscomp.DefaultPassConfig var15 = new com.google.javascript.jscomp.DefaultPassConfig(var14);
//     var8.setPassConfig((com.google.javascript.jscomp.PassConfig)var15);
//     java.io.PrintStream var17 = null;
//     com.google.javascript.jscomp.Compiler var18 = new com.google.javascript.jscomp.Compiler(var17);
//     var18.reportCodeChange();
//     com.google.javascript.jscomp.SourceFile var21 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
//     java.lang.String var22 = var21.getOriginalPath();
//     com.google.javascript.rhino.Node var23 = var18.parse(var21);
//     var21.setOriginalPath("{ }");
//     com.google.javascript.rhino.Node var26 = var8.parse(var21);
//     var6.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var8);
//     com.google.javascript.jscomp.JsAst var28 = null;
//     var8.replaceScript(var28);
// 
//   }

  public void test200() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test200"); }


    com.google.javascript.rhino.Node var4 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.comma(var4, var8);
    boolean var10 = var9.isNoSideEffectsCall();
    com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "ERROR");
    java.lang.String[] var15 = new java.lang.String[] { "hi!"};
    com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", var9, var13, var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var17 = com.google.javascript.jscomp.NodeUtil.isLValue(var9);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test201() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test201"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var1 = var0.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var2 = new com.google.javascript.jscomp.ComposeWarningsGuard(var1);
    java.lang.String var3 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));

  }

  public void test202() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test202"); }


    com.google.javascript.rhino.Node var4 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var5 = var4.getDirectives();
    boolean var6 = var4.isThrow();
    boolean var8 = var4.getBooleanProp(1);
    boolean var9 = var4.isQualifiedName();
    com.google.javascript.rhino.Node[] var10 = new com.google.javascript.rhino.Node[] { var4};
    com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node((-1), var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.script(var10);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test203() {}
//   public void test203() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test203"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.TemplateTypeMap var1 = null;
//     com.google.javascript.rhino.jstype.TemplateTypeMapReplacer var2 = new com.google.javascript.rhino.jstype.TemplateTypeMapReplacer(var0, var1);
//     com.google.javascript.rhino.jstype.EnumElementType var3 = null;
//     com.google.javascript.rhino.jstype.JSType var4 = var2.caseEnumElementType(var3);
//     com.google.javascript.rhino.jstype.JSType var5 = var2.caseBooleanType();
// 
//   }

  public void test204() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test204"); }


    com.google.javascript.jscomp.AstValidator var0 = new com.google.javascript.jscomp.AstValidator();
    com.google.javascript.rhino.Node var4 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.comma(var4, var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.validateScript(var4);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test205() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test205"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.comma(var3, var7);
    boolean var9 = var7.isDebugger();
    var7.setVarArgs(true);
    com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var16 = var15.getDirectives();
    int var17 = var15.getChangeTime();
    boolean var18 = var15.isAssignAdd();
    java.lang.String var19 = var15.getSourceFileName();
    int var20 = var15.getSourceOffset();
    com.google.javascript.rhino.Node var21 = var7.srcrefTree(var15);
    boolean var22 = var21.isDec();
    com.google.javascript.rhino.Node var26 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var27 = var26.getDirectives();
    var26.putIntProp((-1), 0);
    var26.setVarArgs(false);
    com.google.javascript.rhino.jstype.StaticSourceFile var33 = var26.getStaticSourceFile();
    var26.setCharno(10);
    com.google.javascript.rhino.Node var39 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var40 = var39.getDirectives();
    var39.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.exprResult(var39);
    boolean var45 = var44.isDo();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.forIn(var21, var26, var44);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test206() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test206"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    var3.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.exprResult(var3);
    java.lang.Iterable var9 = var8.siblings();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.Node.newString("hi!", 1, (-1));
    var8.addChildToBack(var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var15 = var13.getDouble();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test207() {}
//   public void test207() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test207"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
//     java.lang.String var2 = var1.getOriginalPath();
//     int var4 = var1.getColumnOfOffset(10);
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var1, false);
//     java.io.PrintStream var7 = null;
//     com.google.javascript.jscomp.Compiler var8 = new com.google.javascript.jscomp.Compiler(var7);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var9 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var10 = var9.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var11 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var8, var10, var11);
//     java.lang.String var13 = var8.getAstDotGraph();
//     com.google.javascript.jscomp.CompilerOptions var14 = null;
//     com.google.javascript.jscomp.DefaultPassConfig var15 = new com.google.javascript.jscomp.DefaultPassConfig(var14);
//     var8.setPassConfig((com.google.javascript.jscomp.PassConfig)var15);
//     java.io.PrintStream var17 = null;
//     com.google.javascript.jscomp.Compiler var18 = new com.google.javascript.jscomp.Compiler(var17);
//     var18.reportCodeChange();
//     com.google.javascript.jscomp.SourceFile var21 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
//     java.lang.String var22 = var21.getOriginalPath();
//     com.google.javascript.rhino.Node var23 = var18.parse(var21);
//     var21.setOriginalPath("{ }");
//     com.google.javascript.rhino.Node var26 = var8.parse(var21);
//     var6.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var8);
//     com.google.javascript.rhino.InputId var28 = null;
//     com.google.javascript.jscomp.CompilerInput var29 = var8.getInput(var28);
// 
//   }

  public void test208() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test208"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    int var5 = var3.getChangeTime();
    com.google.javascript.rhino.Node var6 = var3.removeFirstChild();
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var14 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.comma(var10, var14);
    boolean var16 = var14.isUnscopedQualifiedName();
    com.google.javascript.rhino.Node var20 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var21 = var20.getDirectives();
    int var22 = var20.getChangeTime();
    boolean var23 = var20.isAssignAdd();
    com.google.javascript.rhino.Node var24 = var14.clonePropsFrom(var20);
    boolean var25 = var14.isCast();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.getprop(var3, var14);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test209() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test209"); }


    com.google.javascript.jscomp.VariableRenamingPolicy[] var0 = com.google.javascript.jscomp.VariableRenamingPolicy.values();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test210() {}
//   public void test210() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test210"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setNameReferenceReportPath("");
//     var0.setSyntheticBlockEndMarker("hi!");
//     var0.setTightenTypes(true);
//     java.util.Set var7 = null;
//     var0.setCssRenamingWhitelist(var7);
//     var0.setInlineVariables(false);
//     com.google.javascript.jscomp.CheckLevel var11 = null;
//     var0.setCheckUnreachableCode(var11);
//     var0.setDeadAssignmentElimination(true);
//     byte[] var15 = new byte[] { };
//     var0.setInputVariableMapSerialized(var15);
//     var0.setPrintInputDelimiter(true);
//     var0.setOptimizeReturns(true);
//     var0.setCollapseProperties(false);
//     com.google.javascript.jscomp.CompilerOptions.Reach var23 = null;
//     var0.setInlineFunctions(var23);
// 
//   }

  public void test211() {}
//   public void test211() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test211"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
//     java.lang.String var2 = var1.getOriginalPath();
//     int var4 = var1.getColumnOfOffset(10);
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var1, false);
//     com.google.javascript.jscomp.Region var8 = var6.getRegion(0);
//     var6.removeRequire("(function (): ?|null)");
// 
//   }

  public void test212() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test212"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.comma(var3, var7);
    boolean var9 = var7.isUnscopedQualifiedName();
    var7.setVarArgs(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.setDouble(0.0d);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test213() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test213"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var2 = var0.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var3 = var0.getGraphvizEdges();
    com.google.javascript.jscomp.CompilerOptions var4 = new com.google.javascript.jscomp.CompilerOptions();
    var4.setPropertyAffinity(false);
    com.google.javascript.jscomp.CheckLevel var7 = null;
    var4.setBrokenClosureRequiresLevel(var7);
    var4.setOptimizeParameters(false);
    var4.setInlineFunctions(true);
    boolean var13 = var4.assumeStrictThis();
    var4.setTransformAMDToCJSModules(true);
    com.google.javascript.rhino.ErrorReporter var16 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.jscomp.AbstractCompiler var19 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var23 = var21.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var24 = var20.getDirectedPredNodes(var23);
    com.google.javascript.jscomp.NodeTraversal.Callback var25 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var19, var24, var25);
    com.google.javascript.rhino.jstype.FunctionType var27 = var17.createFunctionType(var18, var24);
    java.util.Set var28 = var27.getOwnPropertyNames();
    var4.setIdGenerators(var28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var30 = var0.getOutEdges((java.lang.Object)var28);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test214() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test214"); }


    com.google.javascript.jscomp.CodePrinter var0 = new com.google.javascript.jscomp.CodePrinter();

  }

  public void test215() {}
//   public void test215() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test215"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
//     com.google.javascript.jscomp.JSError[] var6 = var1.getErrors();
// 
//   }

  public void test216() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test216"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.jscomp.AbstractCompiler var3 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var5.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var8 = var4.getDirectedPredNodes(var7);
    com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var3, var8, var9);
    com.google.javascript.rhino.jstype.FunctionType var11 = var1.createFunctionType(var2, var8);
    boolean var13 = var1.isForwardDeclaredType("ERROR");
    var1.resetForTypeCheck();
    com.google.javascript.rhino.jstype.FunctionBuilder var15 = new com.google.javascript.rhino.jstype.FunctionBuilder(var1);
    com.google.javascript.rhino.Node var20 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var24 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.comma(var20, var24);
    boolean var26 = var20.isContinue();
    boolean var27 = var20.isInc();
    boolean var28 = var20.isAssign();
    com.google.common.collect.ImmutableList var29 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.FunctionType var30 = var1.createInterfaceType("Object#Element", var20, var29);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test217() {}
//   public void test217() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test217"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.ModificationVisitor var1 = new com.google.javascript.rhino.jstype.ModificationVisitor(var0);
//     com.google.javascript.rhino.jstype.EnumElementType var2 = null;
//     com.google.javascript.rhino.jstype.JSType var3 = var1.caseEnumElementType(var2);
//     com.google.javascript.rhino.jstype.JSType var4 = var1.caseNumberType();
// 
//   }

  public void test218() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test218"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.TemplateTypeMap var1 = null;
    com.google.javascript.rhino.jstype.TemplateTypeMapReplacer var2 = new com.google.javascript.rhino.jstype.TemplateTypeMapReplacer(var0, var1);
    com.google.javascript.rhino.jstype.EnumElementType var3 = null;
    com.google.javascript.rhino.jstype.JSType var4 = var2.caseEnumElementType(var3);
    com.google.javascript.jscomp.CodingConvention var5 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var6 = new com.google.javascript.jscomp.GoogleCodingConvention(var5);
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var11 = var10.getDirectives();
    var10.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.exprResult(var10);
    com.google.javascript.jscomp.CodingConvention.Bind var16 = var6.describeFunctionBind(var10);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var18 = var17.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var19 = new com.google.javascript.jscomp.ComposeWarningsGuard(var18);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.script(var18);
    boolean var21 = var6.isPrototypeAlias(var20);
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    com.google.javascript.rhino.Node var28 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var29 = var28.getDirectives();
    boolean var30 = var28.isThrow();
    boolean var32 = var28.getBooleanProp(1);
    boolean var33 = var28.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var34 = var23.createFunctionType(var24, var28);
    java.lang.Iterable var36 = var23.getTypesWithProperty("ERROR");
    java.lang.Iterable var38 = var23.getEachReferenceTypeWithProperty("ERROR");
    com.google.javascript.rhino.ErrorReporter var39 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var39);
    com.google.javascript.rhino.jstype.JSType var41 = null;
    com.google.javascript.jscomp.AbstractCompiler var42 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var43 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var44 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var46 = var44.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var47 = var43.getDirectedPredNodes(var46);
    com.google.javascript.jscomp.NodeTraversal.Callback var48 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var42, var47, var48);
    com.google.javascript.rhino.jstype.FunctionType var50 = var40.createFunctionType(var41, var47);
    java.lang.Iterable var51 = var50.getImplementedInterfaces();
    boolean var52 = var50.isStruct();
    java.lang.String var53 = var50.getDisplayName();
    com.google.javascript.jscomp.AbstractCompiler var54 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var55 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var58 = var56.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var59 = var55.getDirectedPredNodes(var58);
    com.google.javascript.jscomp.NodeTraversal.Callback var60 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var54, var59, var60);
    java.util.Map var62 = null;
    var6.defineDelegateProxyPrototypeProperties(var23, (com.google.javascript.rhino.jstype.StaticScope)var50, var59, var62);
    com.google.javascript.rhino.jstype.ObjectType var64 = var50.toObjectType();
    com.google.javascript.rhino.JSDocInfo var65 = var50.getJSDocInfo();
    com.google.javascript.rhino.jstype.JSType var66 = var2.caseObjectType((com.google.javascript.rhino.jstype.ObjectType)var50);
    com.google.javascript.rhino.jstype.ObjectType var67 = var50.dereference();
    com.google.javascript.rhino.jstype.ObjectType var68 = var67.dereference();
    boolean var69 = var67.isTemplatizedType();
    com.google.javascript.rhino.jstype.JSType var71 = var67.findPropertyType("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);

  }

  public void test219() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test219"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    var0.pushEdgeAnnotations();
    java.util.List var2 = var0.getGraphvizEdges();
    java.util.Collection var3 = var0.getNodes();
    com.google.javascript.jscomp.CompilerOptions var4 = new com.google.javascript.jscomp.CompilerOptions();
    var4.setNameReferenceReportPath("");
    var4.setSyntheticBlockEndMarker("hi!");
    var4.setTightenTypes(true);
    java.util.Set var11 = null;
    var4.setCssRenamingWhitelist(var11);
    var4.setAmbiguateProperties(false);
    java.lang.Object var15 = var4.clone();
    com.google.javascript.rhino.ErrorReporter var16 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.jscomp.AbstractCompiler var19 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var23 = var21.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var24 = var20.getDirectedPredNodes(var23);
    com.google.javascript.jscomp.NodeTraversal.Callback var25 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var19, var24, var25);
    com.google.javascript.rhino.jstype.FunctionType var27 = var17.createFunctionType(var18, var24);
    com.google.javascript.rhino.jstype.TemplateType var28 = var17.getObjectElementKey();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var29 = var0.isConnectedInDirection((java.lang.Object)var4, (java.lang.Object)var17);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test220() {}
//   public void test220() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test220"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
//     java.lang.String var3 = var2.getSourceName();
//     com.google.javascript.rhino.Node var4 = var2.getCurrentNode();
//     com.google.javascript.rhino.Node var5 = var2.getEnclosingFunction();
//     com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("(function (): ?|null)");
//     java.io.PrintStream var8 = null;
//     com.google.javascript.jscomp.Compiler var9 = new com.google.javascript.jscomp.Compiler(var8);
//     var9.reportCodeChange();
//     com.google.javascript.jscomp.SourceFile var12 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
//     java.lang.String var13 = var12.getOriginalPath();
//     com.google.javascript.rhino.Node var14 = var9.parse(var12);
//     var7.add(var12);
//     java.util.List var16 = var7.getRequires();
//     var2.traverseRoots(var16);
//     com.google.javascript.jscomp.CompilerInput var18 = var2.getInput();
// 
//   }

  public void test221() {}
//   public void test221() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test221"); }
// 
// 
//     java.io.Reader var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromReader("2014/12/24 01:19", var1);
// 
//   }

  public void test222() {}
//   public void test222() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test222"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
//     com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
//     com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
//     com.google.javascript.rhino.ErrorReporter var3 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.rhino.Node var9 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var10 = var9.getDirectives();
//     boolean var11 = var9.isThrow();
//     boolean var13 = var9.getBooleanProp(1);
//     boolean var14 = var9.isQualifiedName();
//     com.google.javascript.rhino.jstype.FunctionType var15 = var4.createFunctionType(var5, var9);
//     com.google.javascript.rhino.ErrorReporter var16 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
//     com.google.javascript.rhino.jstype.JSType var18 = null;
//     com.google.javascript.jscomp.AbstractCompiler var19 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var23 = var21.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var24 = var20.getDirectedPredNodes(var23);
//     com.google.javascript.jscomp.NodeTraversal.Callback var25 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var19, var24, var25);
//     com.google.javascript.rhino.jstype.FunctionType var27 = var17.createFunctionType(var18, var24);
//     com.google.javascript.rhino.ErrorReporter var29 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     com.google.javascript.jscomp.AbstractCompiler var32 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var36 = var34.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var37 = var33.getDirectedPredNodes(var36);
//     com.google.javascript.jscomp.NodeTraversal.Callback var38 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var32, var37, var38);
//     com.google.javascript.rhino.jstype.FunctionType var40 = var30.createFunctionType(var31, var37);
//     com.google.javascript.rhino.Node var41 = null;
//     boolean var42 = var27.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var40, var41);
//     com.google.javascript.rhino.jstype.FunctionType var43 = var40.toMaybeFunctionType();
//     boolean var44 = var40.hasCachedValues();
//     com.google.javascript.rhino.ErrorReporter var45 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
//     com.google.javascript.rhino.ErrorReporter var47 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
//     com.google.javascript.rhino.jstype.JSType var49 = null;
//     com.google.javascript.jscomp.AbstractCompiler var50 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var52 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var54 = var52.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var55 = var51.getDirectedPredNodes(var54);
//     com.google.javascript.jscomp.NodeTraversal.Callback var56 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var50, var55, var56);
//     com.google.javascript.rhino.jstype.FunctionType var58 = var48.createFunctionType(var49, var55);
//     com.google.javascript.rhino.jstype.JSType var59 = var46.createNullableType((com.google.javascript.rhino.jstype.JSType)var58);
//     boolean var60 = var40.canCastTo(var59);
//     com.google.javascript.jscomp.CodingConvention.SubclassType var61 = null;
//     var2.applySubclassRelationship(var15, var40, var61);
//     boolean var64 = var2.isSuperClassReference("Node tree inequality:\nTree1:\nNOT\n    BITXOR 10\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NOT\n    BITXOR 10\n\n\nSubtree2: PARAM_LIST\n");
//     com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.trueNode();
//     com.google.javascript.rhino.Node var69 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var70 = var69.getDirectives();
//     int var71 = var69.getChangeTime();
//     boolean var72 = var69.isAssignAdd();
//     java.lang.String var73 = var69.getSourceFileName();
//     boolean var74 = var69.isContinue();
//     boolean var75 = var69.isGetterDef();
//     java.lang.String var76 = var2.extractClassNameIfRequire(var65, var69);
//     java.io.PrintStream var77 = null;
//     com.google.javascript.jscomp.Compiler var78 = new com.google.javascript.jscomp.Compiler(var77);
//     var78.reportCodeChange();
//     com.google.javascript.jscomp.SourceFile var81 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
//     java.lang.String var82 = var81.getOriginalPath();
//     com.google.javascript.rhino.Node var83 = var78.parse(var81);
//     boolean var84 = var83.isFor();
//     java.util.List var85 = var2.identifyTypeDeclarationCall(var83);
// 
//   }

  public void test223() {}
//   public void test223() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test223"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
//     double var6 = var1.getProgress();
//     com.google.javascript.jscomp.SourceFile var7 = null;
//     com.google.javascript.jscomp.SourceFile var9 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
//     java.lang.String var10 = var9.getOriginalPath();
//     var9.setOriginalPath("Object#Element");
//     com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
//     var13.setNameReferenceReportPath("");
//     var13.setSyntheticBlockEndMarker("hi!");
//     var13.setTightenTypes(true);
//     java.util.Set var20 = null;
//     var13.setCssRenamingWhitelist(var20);
//     var13.setInlineVariables(false);
//     com.google.javascript.jscomp.CheckLevel var24 = null;
//     var13.setCheckUnreachableCode(var24);
//     var13.setSaveDataStructures(false);
//     com.google.javascript.jscomp.Result var28 = var1.compile(var7, var9, var13);
// 
//   }

  public void test224() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test224"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    var3.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.exprResult(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.setSideEffectFlags(0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test225() {}
//   public void test225() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test225"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.ModificationVisitor var2 = new com.google.javascript.rhino.jstype.ModificationVisitor(var1);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     com.google.javascript.rhino.jstype.JSType var4 = var1.createOptionalNullableType(var3);
// 
//   }

  public void test226() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test226"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    var3.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.not(var3);
    com.google.javascript.rhino.jstype.StaticSourceFile var9 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var8);
    com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var14 = var13.getDirectives();
    int var15 = var13.getChangeTime();
    boolean var16 = var13.isWith();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.add(var8, var13);
    com.google.javascript.rhino.ErrorReporter var18 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var21 = var20.getEdges();
    com.google.javascript.jscomp.deps.SortedDependencies var22 = new com.google.javascript.jscomp.deps.SortedDependencies(var21);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var23 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var24 = var23.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var25 = new com.google.javascript.jscomp.ComposeWarningsGuard(var24);
    com.google.javascript.jscomp.JSModuleGraph var26 = new com.google.javascript.jscomp.JSModuleGraph(var24);
    java.util.List var27 = var22.getSortedDependenciesOf(var24);
    com.google.javascript.rhino.Node var28 = var19.createParametersWithVarArgs(var27);
    com.google.javascript.rhino.Node var33 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var34 = var33.getDirectives();
    int var35 = var33.getChangeTime();
    boolean var36 = var33.isAssignAdd();
    java.lang.String var37 = var33.getSourceFileName();
    boolean var38 = var33.isCast();
    com.google.javascript.rhino.ErrorReporter var39 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var39);
    com.google.javascript.rhino.jstype.JSType var41 = null;
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var46 = var45.getDirectives();
    boolean var47 = var45.isThrow();
    boolean var49 = var45.getBooleanProp(1);
    boolean var50 = var45.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var51 = var40.createFunctionType(var41, var45);
    boolean var52 = var51.matchesNumberContext();
    com.google.javascript.rhino.jstype.ObjectType var53 = var19.createObjectType("LABEL_NAME hi!\n", var33, (com.google.javascript.rhino.jstype.ObjectType)var51);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.regexp(var13, var33);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test227() {}
//   public void test227() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test227"); }
// 
// 
//     com.google.javascript.rhino.Node var4 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.comma(var4, var8);
//     com.google.javascript.rhino.Node var10 = null;
//     com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(1, var9, var10);
// 
//   }

  public void test228() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test228"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    var3.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.not(var3);
    com.google.javascript.rhino.jstype.StaticSourceFile var9 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var8);
    com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var14 = var13.getDirectives();
    int var15 = var13.getChangeTime();
    boolean var16 = var13.isWith();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.add(var8, var13);
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var22 = var21.getDirectives();
    var21.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.exprResult(var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.regexp(var17, var21);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test229() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test229"); }


    com.google.javascript.jscomp.AstValidator var0 = new com.google.javascript.jscomp.AstValidator();
    com.google.javascript.rhino.Node var4 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var5 = var4.getDirectives();
    boolean var6 = var4.isThrow();
    boolean var8 = var4.getBooleanProp(1);
    boolean var9 = var4.isQualifiedName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.validateRoot(var4);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test230() {}
//   public void test230() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test230"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
//     java.lang.String var6 = var1.getAstDotGraph();
//     com.google.javascript.jscomp.NodeTraversal.Callback var7 = null;
//     com.google.javascript.jscomp.NodeTraversal var8 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var1, var7);
//     var1.rebuildInputsFromModules();
// 
//   }

  public void test231() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test231"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.comma(var3, var7);
    boolean var9 = var7.isDebugger();
    var7.setVarArgs(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.paramList(var7);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test232() {}
//   public void test232() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test232"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = null;
//     com.google.javascript.jscomp.AbstractCompiler var3 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var5.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var8 = var4.getDirectedPredNodes(var7);
//     com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var3, var8, var9);
//     com.google.javascript.rhino.jstype.FunctionType var11 = var1.createFunctionType(var2, var8);
//     com.google.javascript.rhino.jstype.TemplateType var12 = var1.getObjectElementKey();
//     com.google.javascript.rhino.jstype.JSTypeNative var13 = null;
//     com.google.javascript.rhino.jstype.JSTypeNative[] var14 = new com.google.javascript.rhino.jstype.JSTypeNative[] { var13};
//     com.google.javascript.rhino.jstype.JSType var15 = var1.createUnionType(var14);
// 
//   }

  public void test233() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test233"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.error("Node tree inequality:\nTree1:\nNOT\n    BITXOR 10\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NOT\n    BITXOR 10\n\n\nSubtree2: PARAM_LIST\n", "{ }");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test234() {}
//   public void test234() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test234"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticType[] var0 = null;
//     com.google.javascript.jscomp.DiagnosticGroup var1 = new com.google.javascript.jscomp.DiagnosticGroup(var0);
// 
//   }

  public void test235() {}
//   public void test235() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test235"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
//     java.lang.String var3 = var2.getSourceName();
//     com.google.javascript.rhino.Node var4 = var2.getCurrentNode();
//     java.lang.String var5 = var2.getSourceName();
//     com.google.javascript.rhino.Node var9 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var10 = var9.getDirectives();
//     int var11 = var9.getChangeTime();
//     boolean var12 = var9.isAssignAdd();
//     var2.traverse(var9);
// 
//   }

  public void test236() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test236"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var1 = com.google.javascript.rhino.SimpleErrorReporter.getMessage0("");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test237() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test237"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.TemplateTypeMap var1 = null;
    com.google.javascript.rhino.jstype.TemplateTypeMapReplacer var2 = new com.google.javascript.rhino.jstype.TemplateTypeMapReplacer(var0, var1);
    com.google.javascript.rhino.jstype.EnumElementType var3 = null;
    com.google.javascript.rhino.jstype.JSType var4 = var2.caseEnumElementType(var3);
    com.google.javascript.jscomp.CodingConvention var5 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var6 = new com.google.javascript.jscomp.GoogleCodingConvention(var5);
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var11 = var10.getDirectives();
    var10.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.exprResult(var10);
    com.google.javascript.jscomp.CodingConvention.Bind var16 = var6.describeFunctionBind(var10);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var18 = var17.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var19 = new com.google.javascript.jscomp.ComposeWarningsGuard(var18);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.script(var18);
    boolean var21 = var6.isPrototypeAlias(var20);
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    com.google.javascript.rhino.Node var28 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var29 = var28.getDirectives();
    boolean var30 = var28.isThrow();
    boolean var32 = var28.getBooleanProp(1);
    boolean var33 = var28.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var34 = var23.createFunctionType(var24, var28);
    java.lang.Iterable var36 = var23.getTypesWithProperty("ERROR");
    java.lang.Iterable var38 = var23.getEachReferenceTypeWithProperty("ERROR");
    com.google.javascript.rhino.ErrorReporter var39 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var39);
    com.google.javascript.rhino.jstype.JSType var41 = null;
    com.google.javascript.jscomp.AbstractCompiler var42 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var43 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var44 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var46 = var44.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var47 = var43.getDirectedPredNodes(var46);
    com.google.javascript.jscomp.NodeTraversal.Callback var48 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var42, var47, var48);
    com.google.javascript.rhino.jstype.FunctionType var50 = var40.createFunctionType(var41, var47);
    java.lang.Iterable var51 = var50.getImplementedInterfaces();
    boolean var52 = var50.isStruct();
    java.lang.String var53 = var50.getDisplayName();
    com.google.javascript.jscomp.AbstractCompiler var54 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var55 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var58 = var56.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var59 = var55.getDirectedPredNodes(var58);
    com.google.javascript.jscomp.NodeTraversal.Callback var60 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var54, var59, var60);
    java.util.Map var62 = null;
    var6.defineDelegateProxyPrototypeProperties(var23, (com.google.javascript.rhino.jstype.StaticScope)var50, var59, var62);
    com.google.javascript.rhino.jstype.ObjectType var64 = var50.toObjectType();
    com.google.javascript.rhino.JSDocInfo var65 = var50.getJSDocInfo();
    com.google.javascript.rhino.jstype.JSType var66 = var2.caseObjectType((com.google.javascript.rhino.jstype.ObjectType)var50);
    boolean var67 = var66.isNominalConstructor();
    boolean var68 = var66.isNumberObjectType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);

  }

  public void test238() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test238"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.jscomp.AbstractCompiler var3 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var5.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var8 = var4.getDirectedPredNodes(var7);
    com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var3, var8, var9);
    com.google.javascript.rhino.jstype.FunctionType var11 = var1.createFunctionType(var2, var8);
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.AbstractCompiler var16 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var20 = var18.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var21 = var17.getDirectedPredNodes(var20);
    com.google.javascript.jscomp.NodeTraversal.Callback var22 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var16, var21, var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var14.createFunctionType(var15, var21);
    com.google.javascript.rhino.Node var25 = null;
    boolean var26 = var11.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var24, var25);
    boolean var28 = var11.isPropertyTypeInferred("LABEL_NAME hi!\n");
    boolean var29 = var11.isNumberObjectType();
    com.google.javascript.rhino.ErrorReporter var30 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.jscomp.AbstractCompiler var33 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var37 = var35.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var38 = var34.getDirectedPredNodes(var37);
    com.google.javascript.jscomp.NodeTraversal.Callback var39 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var33, var38, var39);
    com.google.javascript.rhino.jstype.FunctionType var41 = var31.createFunctionType(var32, var38);
    com.google.javascript.rhino.ErrorReporter var43 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var43);
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.jscomp.AbstractCompiler var46 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var47 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var48 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var50 = var48.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var51 = var47.getDirectedPredNodes(var50);
    com.google.javascript.jscomp.NodeTraversal.Callback var52 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var46, var51, var52);
    com.google.javascript.rhino.jstype.FunctionType var54 = var44.createFunctionType(var45, var51);
    com.google.javascript.rhino.Node var55 = null;
    boolean var56 = var41.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var54, var55);
    com.google.javascript.rhino.ErrorReporter var57 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var57);
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.jscomp.AbstractCompiler var60 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var61 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var62 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var64 = var62.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var65 = var61.getDirectedPredNodes(var64);
    com.google.javascript.jscomp.NodeTraversal.Callback var66 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var60, var65, var66);
    com.google.javascript.rhino.jstype.FunctionType var68 = var58.createFunctionType(var59, var65);
    java.lang.Iterable var69 = var68.getImplementedInterfaces();
    com.google.javascript.rhino.ErrorReporter var70 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var70);
    com.google.javascript.rhino.jstype.JSType var72 = null;
    com.google.javascript.jscomp.AbstractCompiler var73 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var74 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var75 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var77 = var75.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var78 = var74.getDirectedPredNodes(var77);
    com.google.javascript.jscomp.NodeTraversal.Callback var79 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var73, var78, var79);
    com.google.javascript.rhino.jstype.FunctionType var81 = var71.createFunctionType(var72, var78);
    com.google.javascript.rhino.ErrorReporter var83 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var84 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var83);
    com.google.javascript.rhino.jstype.JSType var85 = null;
    com.google.javascript.jscomp.AbstractCompiler var86 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var87 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var88 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var90 = var88.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var91 = var87.getDirectedPredNodes(var90);
    com.google.javascript.jscomp.NodeTraversal.Callback var92 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var86, var91, var92);
    com.google.javascript.rhino.jstype.FunctionType var94 = var84.createFunctionType(var85, var91);
    com.google.javascript.rhino.Node var95 = null;
    boolean var96 = var81.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var94, var95);
    boolean var97 = var68.isInvariant((com.google.javascript.rhino.jstype.JSType)var81);
    boolean var98 = var41.isEquivalentTo((com.google.javascript.rhino.jstype.JSType)var68);
    com.google.javascript.rhino.jstype.JSType.TypePair var99 = var11.getTypesUnderEquality((com.google.javascript.rhino.jstype.JSType)var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test239() {}
//   public void test239() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test239"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
//     java.util.Collection var1 = var0.getNodes();
//     var0.popNodeAnnotations();
// 
//   }

  public void test240() {}
//   public void test240() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test240"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setRecordFunctionInformation(true);
//     var0.resetWarningsGuard();
//     com.google.javascript.jscomp.CompilerOptions.Reach var4 = null;
//     var0.setInlineFunctions(var4);
// 
//   }

  public void test241() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test241"); }


    com.google.javascript.rhino.Node var4 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(100, 1, 10);
    com.google.javascript.rhino.Node var9 = var8.getLastSibling();
    boolean var10 = var8.isGetElem();
    var8.setWasEmptyNode(false);
    com.google.javascript.rhino.Node var13 = var4.useSourceInfoFromForTree(var8);
    com.google.javascript.rhino.Node var17 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var18 = var17.getDirectives();
    int var19 = var17.getChangeTime();
    boolean var20 = var17.isAssignAdd();
    java.lang.String var21 = var17.getSourceFileName();
    java.lang.Iterable var22 = var17.children();
    com.google.javascript.jscomp.CodingConvention var23 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var24 = new com.google.javascript.jscomp.GoogleCodingConvention(var23);
    com.google.javascript.rhino.Node var28 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var29 = var28.getDirectives();
    var28.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.exprResult(var28);
    com.google.javascript.jscomp.CodingConvention.Bind var34 = var24.describeFunctionBind(var28);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var36 = var35.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var37 = new com.google.javascript.jscomp.ComposeWarningsGuard(var36);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.script(var36);
    boolean var39 = var24.isPrototypeAlias(var38);
    com.google.javascript.rhino.Node var40 = new com.google.javascript.rhino.Node((-1), var4, var17, var38);
    boolean var41 = var40.isNot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test242() {}
//   public void test242() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test242"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
//     java.lang.String var6 = var1.getAstDotGraph();
//     com.google.javascript.jscomp.CompilerOptions var7 = null;
//     com.google.javascript.jscomp.DefaultPassConfig var8 = new com.google.javascript.jscomp.DefaultPassConfig(var7);
//     var1.setPassConfig((com.google.javascript.jscomp.PassConfig)var8);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var11 = var10.getEdges();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var13 = var12.getEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var14 = new com.google.javascript.jscomp.ComposeWarningsGuard(var13);
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.script(var13);
//     com.google.javascript.jscomp.CompilerOptions var16 = new com.google.javascript.jscomp.CompilerOptions();
//     var16.setPropertyAffinity(false);
//     com.google.javascript.jscomp.CheckLevel var19 = null;
//     var16.setBrokenClosureRequiresLevel(var19);
//     var1.<com.google.javascript.jscomp.SourceFile>initModules(var11, var13, var16);
//     com.google.javascript.jscomp.JSError[] var22 = var1.getMessages();
//     com.google.javascript.jscomp.type.ReverseAbstractInterpreter var23 = null;
//     com.google.javascript.jscomp.CodingConvention var24 = com.google.javascript.jscomp.CodingConventions.getDefault();
//     com.google.javascript.jscomp.GoogleCodingConvention var25 = new com.google.javascript.jscomp.GoogleCodingConvention(var24);
//     com.google.javascript.rhino.Node var29 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var30 = var29.getDirectives();
//     var29.putIntProp((-1), 0);
//     com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.exprResult(var29);
//     com.google.javascript.jscomp.CodingConvention.Bind var35 = var25.describeFunctionBind(var29);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var36 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var37 = var36.getEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var38 = new com.google.javascript.jscomp.ComposeWarningsGuard(var37);
//     com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.script(var37);
//     boolean var40 = var25.isPrototypeAlias(var39);
//     com.google.javascript.rhino.ErrorReporter var41 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
//     com.google.javascript.rhino.jstype.JSType var43 = null;
//     com.google.javascript.rhino.Node var47 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var48 = var47.getDirectives();
//     boolean var49 = var47.isThrow();
//     boolean var51 = var47.getBooleanProp(1);
//     boolean var52 = var47.isQualifiedName();
//     com.google.javascript.rhino.jstype.FunctionType var53 = var42.createFunctionType(var43, var47);
//     java.lang.Iterable var55 = var42.getTypesWithProperty("ERROR");
//     java.lang.Iterable var57 = var42.getEachReferenceTypeWithProperty("ERROR");
//     com.google.javascript.rhino.ErrorReporter var58 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
//     com.google.javascript.rhino.jstype.JSType var60 = null;
//     com.google.javascript.jscomp.AbstractCompiler var61 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var62 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var63 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var65 = var63.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var66 = var62.getDirectedPredNodes(var65);
//     com.google.javascript.jscomp.NodeTraversal.Callback var67 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var61, var66, var67);
//     com.google.javascript.rhino.jstype.FunctionType var69 = var59.createFunctionType(var60, var66);
//     java.lang.Iterable var70 = var69.getImplementedInterfaces();
//     boolean var71 = var69.isStruct();
//     java.lang.String var72 = var69.getDisplayName();
//     com.google.javascript.jscomp.AbstractCompiler var73 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var74 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var75 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var77 = var75.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var78 = var74.getDirectedPredNodes(var77);
//     com.google.javascript.jscomp.NodeTraversal.Callback var79 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var73, var78, var79);
//     java.util.Map var81 = null;
//     var25.defineDelegateProxyPrototypeProperties(var42, (com.google.javascript.rhino.jstype.StaticScope)var69, var78, var81);
//     com.google.javascript.jscomp.CheckLevel var83 = null;
//     com.google.javascript.jscomp.TypeCheck var84 = new com.google.javascript.jscomp.TypeCheck((com.google.javascript.jscomp.AbstractCompiler)var1, var23, var42, var83);
//     com.google.javascript.rhino.Node var85 = null;
//     var84.check(var85, false);
// 
//   }

  public void test243() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test243"); }


    com.google.javascript.jscomp.AstValidator var0 = new com.google.javascript.jscomp.AstValidator();
    com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var9 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.comma(var5, var9);
    boolean var11 = var10.isNoSideEffectsCall();
    com.google.javascript.jscomp.DiagnosticType var14 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "ERROR");
    java.lang.String[] var16 = new java.lang.String[] { "hi!"};
    com.google.javascript.jscomp.JSError var17 = com.google.javascript.jscomp.JSError.make("", var10, var14, var16);
    int var18 = var10.getCharno();
    com.google.javascript.rhino.Node var22 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var23 = var22.getDirectives();
    var22.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.exprResult(var22);
    java.lang.Iterable var28 = var27.siblings();
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.Node.newString("hi!", 1, (-1));
    var27.addChildToBack(var32);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.process(var10, var27);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test244() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test244"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var1 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var4 = var2.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var5 = var1.getDirectedPredNodes(var4);
    com.google.javascript.jscomp.DependencyOptions var6 = new com.google.javascript.jscomp.DependencyOptions();
    com.google.javascript.jscomp.DependencyOptions var8 = var6.setDependencyPruning(false);
    com.google.javascript.jscomp.DependencyOptions var10 = var8.setMoocherDropping(false);
    com.google.javascript.jscomp.CompilerOptions var11 = new com.google.javascript.jscomp.CompilerOptions();
    var11.setNameReferenceReportPath("");
    var11.setSyntheticBlockEndMarker("hi!");
    var11.setTightenTypes(true);
    java.util.Set var18 = null;
    var11.setCssRenamingWhitelist(var18);
    com.google.javascript.jscomp.VariableMap var20 = null;
    var11.setInputAnonymousFunctionNamingMap(var20);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.connectIfNotFound((java.lang.Object)var4, (java.lang.Object)var10, (java.lang.Object)var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test245() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test245"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var1 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var2 = var1.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var3 = new com.google.javascript.jscomp.ComposeWarningsGuard(var2);
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.script(var2);
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var7 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var8 = var7.getEdges();
    com.google.javascript.jscomp.deps.SortedDependencies var9 = new com.google.javascript.jscomp.deps.SortedDependencies(var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var11 = var10.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var12 = new com.google.javascript.jscomp.ComposeWarningsGuard(var11);
    com.google.javascript.jscomp.JSModuleGraph var13 = new com.google.javascript.jscomp.JSModuleGraph(var11);
    java.util.List var14 = var9.getSortedDependenciesOf(var11);
    com.google.javascript.rhino.Node var15 = var6.createParametersWithVarArgs(var14);
    com.google.javascript.rhino.Node var20 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var21 = var20.getDirectives();
    int var22 = var20.getChangeTime();
    boolean var23 = var20.isAssignAdd();
    java.lang.String var24 = var20.getSourceFileName();
    boolean var25 = var20.isCast();
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.Node var32 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var33 = var32.getDirectives();
    boolean var34 = var32.isThrow();
    boolean var36 = var32.getBooleanProp(1);
    boolean var37 = var32.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var38 = var27.createFunctionType(var28, var32);
    boolean var39 = var38.matchesNumberContext();
    com.google.javascript.rhino.jstype.ObjectType var40 = var6.createObjectType("LABEL_NAME hi!\n", var20, (com.google.javascript.rhino.jstype.ObjectType)var38);
    com.google.javascript.rhino.Node var44 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var45 = var44.getDirectives();
    var44.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.not(var44);
    com.google.javascript.rhino.jstype.StaticSourceFile var50 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var49);
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var53 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var54 = var53.getEdges();
    com.google.javascript.jscomp.deps.SortedDependencies var55 = new com.google.javascript.jscomp.deps.SortedDependencies(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var57 = var56.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var58 = new com.google.javascript.jscomp.ComposeWarningsGuard(var57);
    com.google.javascript.jscomp.JSModuleGraph var59 = new com.google.javascript.jscomp.JSModuleGraph(var57);
    java.util.List var60 = var55.getSortedDependenciesOf(var57);
    com.google.javascript.rhino.Node var61 = var52.createParametersWithVarArgs(var60);
    java.lang.String var62 = var49.checkTreeEquals(var61);
    com.google.javascript.rhino.Node var65 = new com.google.javascript.rhino.Node(100, var4, var20, var61, 10, 10);
    com.google.javascript.rhino.Node var69 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var70 = var69.getDirectives();
    boolean var71 = var69.isReturn();
    java.io.PrintStream var72 = null;
    com.google.javascript.jscomp.Compiler var73 = new com.google.javascript.jscomp.Compiler(var72);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var74 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var75 = var74.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var76 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var73, var75, var76);
    java.lang.String var78 = var73.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var79 = null;
    com.google.javascript.jscomp.DefaultPassConfig var80 = new com.google.javascript.jscomp.DefaultPassConfig(var79);
    var73.setPassConfig((com.google.javascript.jscomp.PassConfig)var80);
    java.io.PrintStream var82 = null;
    com.google.javascript.jscomp.Compiler var83 = new com.google.javascript.jscomp.Compiler(var82);
    var83.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var86 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var87 = var86.getOriginalPath();
    com.google.javascript.rhino.Node var88 = var83.parse(var86);
    var86.setOriginalPath("{ }");
    com.google.javascript.rhino.Node var91 = var73.parse(var86);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var92 = com.google.javascript.rhino.IR.tryCatchFinally(var4, var69, var91);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "Node tree inequality:\nTree1:\nNOT\n    BITXOR 10\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NOT\n    BITXOR 10\n\n\nSubtree2: PARAM_LIST\n"+ "'", var62.equals("Node tree inequality:\nTree1:\nNOT\n    BITXOR 10\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NOT\n    BITXOR 10\n\n\nSubtree2: PARAM_LIST\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + ""+ "'", var78.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "hi!"+ "'", var87.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test246() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test246"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node((-1), 1, 100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.breakNode(var3);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }

  }

  public void test247() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test247"); }


    com.google.javascript.rhino.Node var4 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var5 = var4.getDirectives();
    boolean var6 = var4.isThrow();
    boolean var8 = var4.getBooleanProp(1);
    boolean var9 = var4.isQualifiedName();
    com.google.javascript.rhino.Node[] var10 = new com.google.javascript.rhino.Node[] { var4};
    com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node((-1), var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.arraylit(var10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test248() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test248"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(100, 1, 10);
    com.google.javascript.rhino.Node var4 = var3.getLastSibling();
    boolean var5 = var3.isGetElem();
    var3.setWasEmptyNode(false);
    var3.setIsSyntheticBlock(true);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.trueNode();
    com.google.javascript.rhino.Node var14 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var15 = var14.getDirectives();
    var14.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.exprResult(var14);
    java.lang.Iterable var20 = var19.siblings();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.forIn(var3, var10, var19);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test249() {}
//   public void test249() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test249"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
//     java.lang.String var6 = var1.getAstDotGraph();
//     com.google.javascript.jscomp.CompilerOptions var7 = null;
//     com.google.javascript.jscomp.DefaultPassConfig var8 = new com.google.javascript.jscomp.DefaultPassConfig(var7);
//     var1.setPassConfig((com.google.javascript.jscomp.PassConfig)var8);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var11 = var10.getEdges();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var13 = var12.getEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var14 = new com.google.javascript.jscomp.ComposeWarningsGuard(var13);
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.script(var13);
//     com.google.javascript.jscomp.CompilerOptions var16 = new com.google.javascript.jscomp.CompilerOptions();
//     var16.setPropertyAffinity(false);
//     com.google.javascript.jscomp.CheckLevel var19 = null;
//     var16.setBrokenClosureRequiresLevel(var19);
//     var1.<com.google.javascript.jscomp.SourceFile>initModules(var11, var13, var16);
//     com.google.javascript.jscomp.JSError[] var22 = var1.getMessages();
//     com.google.javascript.jscomp.type.ReverseAbstractInterpreter var23 = null;
//     com.google.javascript.jscomp.CodingConvention var24 = com.google.javascript.jscomp.CodingConventions.getDefault();
//     com.google.javascript.jscomp.GoogleCodingConvention var25 = new com.google.javascript.jscomp.GoogleCodingConvention(var24);
//     com.google.javascript.rhino.Node var29 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var30 = var29.getDirectives();
//     var29.putIntProp((-1), 0);
//     com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.exprResult(var29);
//     com.google.javascript.jscomp.CodingConvention.Bind var35 = var25.describeFunctionBind(var29);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var36 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var37 = var36.getEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var38 = new com.google.javascript.jscomp.ComposeWarningsGuard(var37);
//     com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.script(var37);
//     boolean var40 = var25.isPrototypeAlias(var39);
//     com.google.javascript.rhino.ErrorReporter var41 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
//     com.google.javascript.rhino.jstype.JSType var43 = null;
//     com.google.javascript.rhino.Node var47 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var48 = var47.getDirectives();
//     boolean var49 = var47.isThrow();
//     boolean var51 = var47.getBooleanProp(1);
//     boolean var52 = var47.isQualifiedName();
//     com.google.javascript.rhino.jstype.FunctionType var53 = var42.createFunctionType(var43, var47);
//     java.lang.Iterable var55 = var42.getTypesWithProperty("ERROR");
//     java.lang.Iterable var57 = var42.getEachReferenceTypeWithProperty("ERROR");
//     com.google.javascript.rhino.ErrorReporter var58 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
//     com.google.javascript.rhino.jstype.JSType var60 = null;
//     com.google.javascript.jscomp.AbstractCompiler var61 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var62 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var63 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var65 = var63.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var66 = var62.getDirectedPredNodes(var65);
//     com.google.javascript.jscomp.NodeTraversal.Callback var67 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var61, var66, var67);
//     com.google.javascript.rhino.jstype.FunctionType var69 = var59.createFunctionType(var60, var66);
//     java.lang.Iterable var70 = var69.getImplementedInterfaces();
//     boolean var71 = var69.isStruct();
//     java.lang.String var72 = var69.getDisplayName();
//     com.google.javascript.jscomp.AbstractCompiler var73 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var74 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var75 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var77 = var75.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var78 = var74.getDirectedPredNodes(var77);
//     com.google.javascript.jscomp.NodeTraversal.Callback var79 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var73, var78, var79);
//     java.util.Map var81 = null;
//     var25.defineDelegateProxyPrototypeProperties(var42, (com.google.javascript.rhino.jstype.StaticScope)var69, var78, var81);
//     com.google.javascript.jscomp.CheckLevel var83 = null;
//     com.google.javascript.jscomp.TypeCheck var84 = new com.google.javascript.jscomp.TypeCheck((com.google.javascript.jscomp.AbstractCompiler)var1, var23, var42, var83);
//     com.google.javascript.rhino.Node var89 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var93 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var94 = com.google.javascript.rhino.IR.comma(var89, var93);
//     boolean var95 = var93.isDebugger();
//     boolean var96 = var93.isSwitch();
//     com.google.javascript.rhino.jstype.JSType var97 = null;
//     com.google.javascript.rhino.jstype.EnumType var98 = var42.createEnumType("LABEL_NAME hi!\n", var93, var97);
// 
//   }

  public void test250() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test250"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.jscomp.AbstractCompiler var3 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var5.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var8 = var4.getDirectedPredNodes(var7);
    com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var3, var8, var9);
    com.google.javascript.rhino.jstype.FunctionType var11 = var1.createFunctionType(var2, var8);
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.AbstractCompiler var16 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var20 = var18.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var21 = var17.getDirectedPredNodes(var20);
    com.google.javascript.jscomp.NodeTraversal.Callback var22 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var16, var21, var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var14.createFunctionType(var15, var21);
    com.google.javascript.rhino.Node var25 = null;
    boolean var26 = var11.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var24, var25);
    com.google.javascript.rhino.jstype.FunctionType var27 = var24.toMaybeFunctionType();
    boolean var28 = var24.hasCachedValues();
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    com.google.javascript.rhino.ErrorReporter var31 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var31);
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.jscomp.AbstractCompiler var34 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var36 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var38 = var36.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var39 = var35.getDirectedPredNodes(var38);
    com.google.javascript.jscomp.NodeTraversal.Callback var40 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var34, var39, var40);
    com.google.javascript.rhino.jstype.FunctionType var42 = var32.createFunctionType(var33, var39);
    com.google.javascript.rhino.jstype.JSType var43 = var30.createNullableType((com.google.javascript.rhino.jstype.JSType)var42);
    boolean var44 = var24.canCastTo(var43);
    com.google.javascript.rhino.ErrorReporter var45 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.jscomp.AbstractCompiler var50 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var52 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var54 = var52.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var55 = var51.getDirectedPredNodes(var54);
    com.google.javascript.jscomp.NodeTraversal.Callback var56 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var50, var55, var56);
    com.google.javascript.rhino.jstype.FunctionType var58 = var48.createFunctionType(var49, var55);
    com.google.javascript.rhino.jstype.JSType var59 = var46.createNullableType((com.google.javascript.rhino.jstype.JSType)var58);
    com.google.javascript.rhino.jstype.JSType.TypePair var60 = var24.getTypesUnderEquality((com.google.javascript.rhino.jstype.JSType)var58);
    int var61 = var24.getExtendedInterfacesCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);

  }

  public void test251() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test251"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var2 = var1.getOriginalPath();
    int var4 = var1.getColumnOfOffset(10);
    com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var1, false);
    java.io.PrintStream var7 = null;
    com.google.javascript.jscomp.Compiler var8 = new com.google.javascript.jscomp.Compiler(var7);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var9 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var10 = var9.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var11 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var8, var10, var11);
    java.lang.String var13 = var8.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var14 = null;
    com.google.javascript.jscomp.DefaultPassConfig var15 = new com.google.javascript.jscomp.DefaultPassConfig(var14);
    var8.setPassConfig((com.google.javascript.jscomp.PassConfig)var15);
    java.io.PrintStream var17 = null;
    com.google.javascript.jscomp.Compiler var18 = new com.google.javascript.jscomp.Compiler(var17);
    var18.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var21 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var22 = var21.getOriginalPath();
    com.google.javascript.rhino.Node var23 = var18.parse(var21);
    var21.setOriginalPath("{ }");
    com.google.javascript.rhino.Node var26 = var8.parse(var21);
    var6.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var8);
    java.io.PrintStream var28 = null;
    com.google.javascript.jscomp.Compiler var29 = new com.google.javascript.jscomp.Compiler(var28);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var31 = var30.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var32 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var29, var31, var32);
    java.lang.String var34 = var29.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var35 = null;
    com.google.javascript.jscomp.DefaultPassConfig var36 = new com.google.javascript.jscomp.DefaultPassConfig(var35);
    var29.setPassConfig((com.google.javascript.jscomp.PassConfig)var36);
    java.io.PrintStream var38 = null;
    com.google.javascript.jscomp.Compiler var39 = new com.google.javascript.jscomp.Compiler(var38);
    var39.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var42 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var43 = var42.getOriginalPath();
    com.google.javascript.rhino.Node var44 = var39.parse(var42);
    var42.setOriginalPath("{ }");
    com.google.javascript.rhino.Node var47 = var29.parse(var42);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var48 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var50 = var48.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var51 = var48.getGraphvizEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var52 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var29, var51, var52);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var54 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var55 = var54.getEdges();
    com.google.javascript.jscomp.deps.SortedDependencies var56 = new com.google.javascript.jscomp.deps.SortedDependencies(var55);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var57 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var58 = var57.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var59 = new com.google.javascript.jscomp.ComposeWarningsGuard(var58);
    com.google.javascript.jscomp.JSModuleGraph var60 = new com.google.javascript.jscomp.JSModuleGraph(var58);
    java.util.List var61 = var56.getSortedDependenciesOf(var58);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var62 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var63 = var62.getEdges();
    com.google.javascript.jscomp.CompilerOptions var64 = new com.google.javascript.jscomp.CompilerOptions();
    var64.setNameReferenceReportPath("");
    var64.setSyntheticBlockEndMarker("hi!");
    var64.setTightenTypes(true);
    java.util.Set var71 = null;
    var64.setCssRenamingWhitelist(var71);
    var64.setOptimizeArgumentsArray(true);
    com.google.javascript.jscomp.Result var75 = var29.<com.google.javascript.jscomp.SourceFile>compileModules(var58, var63, var64);
    com.google.javascript.rhino.Node var76 = var6.getAstRoot((com.google.javascript.jscomp.AbstractCompiler)var29);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.exprResult(var76);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ""+ "'", var13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + ""+ "'", var34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test252() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test252"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    java.util.Collection var1 = var0.getNodes();
    com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var4 = var3.getOriginalPath();
    int var6 = var3.getColumnOfOffset(10);
    com.google.javascript.jscomp.CompilerInput var8 = new com.google.javascript.jscomp.CompilerInput(var3, false);
    com.google.javascript.jscomp.CompilerInput var11 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var8, "", true);
    com.google.javascript.jscomp.SourceFile var12 = var8.getSourceFile();
    java.lang.Object var13 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.graph.Graph.GraphEdge var14 = var0.getFirstEdge((java.lang.Object)var8, var13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test253() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test253"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!: ERROR");
    com.google.javascript.rhino.Node[] var2 = new com.google.javascript.rhino.Node[] { var1};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.block(var2);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test254() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test254"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.comma(var3, var7);
    boolean var9 = var7.isUnscopedQualifiedName();
    com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var14 = var13.getDirectives();
    int var15 = var13.getChangeTime();
    boolean var16 = var13.isAssignAdd();
    com.google.javascript.rhino.Node var17 = var7.clonePropsFrom(var13);
    boolean var18 = var17.isObjectLit();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var17.setQuotedString();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test255() {}
//   public void test255() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test255"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
//     java.lang.String var2 = var1.getOriginalPath();
//     int var4 = var1.getColumnOfOffset(10);
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var1, false);
//     java.util.Collection var7 = var6.getRequires();
// 
//   }

  public void test256() {}
//   public void test256() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test256"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
//     com.google.javascript.jscomp.JSSourceFile var6 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var7 = new com.google.javascript.jscomp.JSSourceFile[] { var6};
//     com.google.javascript.jscomp.JSSourceFile var8 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var9 = new com.google.javascript.jscomp.JSSourceFile[] { var8};
//     com.google.javascript.jscomp.CompilerOptions var10 = new com.google.javascript.jscomp.CompilerOptions();
//     var10.setNameReferenceReportPath("");
//     var10.setSyntheticBlockEndMarker("hi!");
//     var10.setTightenTypes(true);
//     java.util.Set var17 = null;
//     var10.setCssRenamingWhitelist(var17);
//     var10.setInlineVariables(false);
//     com.google.javascript.jscomp.CheckLevel var21 = null;
//     var10.setCheckUnreachableCode(var21);
//     var10.setDeadAssignmentElimination(true);
//     byte[] var25 = new byte[] { };
//     var10.setInputVariableMapSerialized(var25);
//     var10.setPrintInputDelimiter(true);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var29 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var32 = var30.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var33 = var29.getDirectedPredNodes(var32);
//     var10.setSourceMapLocationMappings(var33);
//     com.google.javascript.jscomp.CompilerOptions.TracerMode var35 = null;
//     var10.setTracerMode(var35);
//     var10.setRenamePrefix("Object#Element");
//     var10.setDefineToBooleanLiteral("2014/12/24 01:19", false);
//     var10.setOutputCharset("goog.exportSymbol");
//     com.google.javascript.jscomp.Result var44 = var1.compile(var7, var9, var10);
// 
//   }

  public void test257() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test257"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    var3.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.exprResult(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.pos(var3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test258() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test258"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    var3.putIntProp((-1), 0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.setDouble(0.0d);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test259() {}
//   public void test259() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test259"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
//     java.lang.String var6 = var1.getAstDotGraph();
//     com.google.javascript.jscomp.CompilerOptions var7 = null;
//     com.google.javascript.jscomp.DefaultPassConfig var8 = new com.google.javascript.jscomp.DefaultPassConfig(var7);
//     var1.setPassConfig((com.google.javascript.jscomp.PassConfig)var8);
//     java.io.PrintStream var10 = null;
//     com.google.javascript.jscomp.Compiler var11 = new com.google.javascript.jscomp.Compiler(var10);
//     var11.reportCodeChange();
//     com.google.javascript.jscomp.SourceFile var14 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
//     java.lang.String var15 = var14.getOriginalPath();
//     com.google.javascript.rhino.Node var16 = var11.parse(var14);
//     var14.setOriginalPath("{ }");
//     com.google.javascript.rhino.Node var19 = var1.parse(var14);
//     var1.rebuildInputsFromModules();
// 
//   }

  public void test260() {}
//   public void test260() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test260"); }
// 
// 
//     java.io.File var0 = null;
//     java.nio.charset.Charset var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromFile(var0, var1);
// 
//   }

  public void test261() {}
//   public void test261() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test261"); }
// 
// 
//     com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var4 = var3.getDirectives();
//     int var5 = var3.getChangeTime();
//     boolean var6 = var3.isAssignAdd();
//     java.lang.String var7 = var3.getSourceFileName();
//     boolean var8 = var3.isContinue();
//     int var9 = var3.getLineno();
//     com.google.javascript.rhino.Node.SideEffectFlags var10 = null;
//     var3.setSideEffectFlags(var10);
// 
//   }

  public void test262() {}
//   public void test262() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test262"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
//     java.lang.String var3 = var2.getSourceName();
//     com.google.javascript.rhino.Node var4 = var2.getCurrentNode();
//     java.lang.String var5 = var2.getSourceName();
//     com.google.javascript.jscomp.JSModule var6 = var2.getModule();
// 
//   }

  public void test263() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test263"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.comma(var7, var11);
    boolean var13 = var11.isUnscopedQualifiedName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.doNode(var3, var11);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test264() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test264"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.jscomp.AbstractCompiler var3 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var5.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var8 = var4.getDirectedPredNodes(var7);
    com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var3, var8, var9);
    com.google.javascript.rhino.jstype.FunctionType var11 = var1.createFunctionType(var2, var8);
    boolean var13 = var1.isForwardDeclaredType("ERROR");
    var1.resetForTypeCheck();
    com.google.javascript.rhino.jstype.FunctionBuilder var15 = new com.google.javascript.rhino.jstype.FunctionBuilder(var1);
    com.google.javascript.rhino.jstype.FunctionBuilder var17 = var15.withName("hi!: ERROR");
    com.google.javascript.rhino.ErrorReporter var18 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.jscomp.AbstractCompiler var21 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var22 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var23 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var25 = var23.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var26 = var22.getDirectedPredNodes(var25);
    com.google.javascript.jscomp.NodeTraversal.Callback var27 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var21, var26, var27);
    com.google.javascript.rhino.jstype.FunctionType var29 = var19.createFunctionType(var20, var26);
    boolean var31 = var19.isForwardDeclaredType("ERROR");
    com.google.javascript.rhino.JSDocInfo var32 = null;
    com.google.javascript.rhino.jstype.ObjectType var33 = var19.createAnonymousObjectType(var32);
    com.google.javascript.jscomp.CodingConvention var35 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var36 = new com.google.javascript.jscomp.GoogleCodingConvention(var35);
    com.google.javascript.rhino.Node var40 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var41 = var40.getDirectives();
    var40.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.exprResult(var40);
    com.google.javascript.jscomp.CodingConvention.Bind var46 = var36.describeFunctionBind(var40);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var47 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var48 = var47.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var49 = new com.google.javascript.jscomp.ComposeWarningsGuard(var48);
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.script(var48);
    boolean var51 = var36.isPrototypeAlias(var50);
    com.google.javascript.rhino.ErrorReporter var52 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var52);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    com.google.javascript.jscomp.AbstractCompiler var55 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var57 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var59 = var57.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var60 = var56.getDirectedPredNodes(var59);
    com.google.javascript.jscomp.NodeTraversal.Callback var61 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var55, var60, var61);
    com.google.javascript.rhino.jstype.FunctionType var63 = var53.createFunctionType(var54, var60);
    com.google.javascript.rhino.ErrorReporter var65 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var65);
    com.google.javascript.rhino.jstype.JSType var67 = null;
    com.google.javascript.jscomp.AbstractCompiler var68 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var69 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var70 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var72 = var70.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var73 = var69.getDirectedPredNodes(var72);
    com.google.javascript.jscomp.NodeTraversal.Callback var74 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var68, var73, var74);
    com.google.javascript.rhino.jstype.FunctionType var76 = var66.createFunctionType(var67, var73);
    com.google.javascript.rhino.Node var77 = null;
    boolean var78 = var63.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var76, var77);
    boolean var79 = var63.isReturnTypeInferred();
    com.google.javascript.rhino.jstype.ObjectType var80 = var19.createObjectType("(function (): ?|null)", var50, (com.google.javascript.rhino.jstype.ObjectType)var63);
    com.google.javascript.rhino.jstype.FunctionBuilder var82 = var17.withReturnType((com.google.javascript.rhino.jstype.JSType)var63, true);
    com.google.javascript.rhino.jstype.Property var84 = var63.getOwnSlot("EXPR_RESULT");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);

  }

  public void test265() {}
//   public void test265() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test265"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
//     var0.pushEdgeAnnotations();
//     com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
//     var2.setNameReferenceReportPath("");
//     var2.setSyntheticBlockEndMarker("hi!");
//     var2.setTightenTypes(true);
//     java.util.Set var9 = null;
//     var2.setCssRenamingWhitelist(var9);
//     var2.setInlineVariables(false);
//     var2.setCollapseVariableDeclarations(true);
//     com.google.javascript.jscomp.CheckLevel var15 = null;
//     var2.setCheckGlobalThisLevel(var15);
//     var2.setInlineVariables(false);
//     boolean var19 = var2.assumeStrictThis();
//     java.util.Iterator var20 = var0.getNeighborNodesIterator((java.lang.Object)var2);
// 
//   }

  public void test266() {}
//   public void test266() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test266"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
//     boolean var3 = var2.hasScope();
//     java.lang.String var4 = var2.getSourceName();
//     com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var12 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.comma(var8, var12);
//     boolean var14 = var8.isContinue();
//     boolean var15 = var8.isInc();
//     boolean var16 = var8.isAssign();
//     com.google.javascript.jscomp.DiagnosticType var19 = com.google.javascript.jscomp.DiagnosticType.disabled("hi!", "(function (): ?|null)");
//     com.google.javascript.rhino.Node var24 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var28 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.comma(var24, var28);
//     boolean var30 = var29.isNoSideEffectsCall();
//     com.google.javascript.jscomp.DiagnosticType var33 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "ERROR");
//     java.lang.String[] var35 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var36 = com.google.javascript.jscomp.JSError.make("", var29, var33, var35);
//     var2.report(var8, var19, var35);
// 
//   }

  public void test267() {}
//   public void test267() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test267"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     var1.reportCodeChange();
//     int var3 = var1.getErrorCount();
// 
//   }

  public void test268() {}
//   public void test268() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test268"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setNameReferenceReportPath("");
//     var0.setSyntheticBlockEndMarker("hi!");
//     var0.setTightenTypes(true);
//     java.util.Set var7 = null;
//     var0.setCssRenamingWhitelist(var7);
//     var0.setInlineVariables(false);
//     var0.setCollapseVariableDeclarations(true);
//     var0.setDeadAssignmentElimination(false);
//     java.util.Map var15 = var0.getTweakReplacements();
//     com.google.javascript.jscomp.CompilerOptions.Reach var16 = null;
//     var0.setRemoveUnusedVariable(var16);
// 
//   }

  public void test269() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test269"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    java.lang.Object var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var2 = var0.getDirectedPredNodes(var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test270() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test270"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setNameReferenceReportPath("");
    var0.setSyntheticBlockEndMarker("hi!");
    var0.setLooseTypes(false);
    var0.setOptimizeArgumentsArray(false);

  }

  public void test271() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test271"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.comma(var3, var7);
    boolean var9 = var7.isDebugger();
    var7.setVarArgs(true);
    com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var16 = var15.getDirectives();
    int var17 = var15.getChangeTime();
    boolean var18 = var15.isAssignAdd();
    java.lang.String var19 = var15.getSourceFileName();
    int var20 = var15.getSourceOffset();
    com.google.javascript.rhino.Node var21 = var7.srcrefTree(var15);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.name("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.caseNode(var21, var23);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test272() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test272"); }


    com.google.javascript.jscomp.AstValidator var0 = new com.google.javascript.jscomp.AstValidator();
    com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var6 = var5.getDirectives();
    var5.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.exprResult(var5);
    java.lang.Iterable var11 = var10.siblings();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.Node.newString("hi!", 1, (-1));
    var10.addChildToBack(var15);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.Node.newString("hi!", 10, 0);
    java.lang.Object var22 = var20.getProp(1);
    com.google.javascript.rhino.Node var25 = new com.google.javascript.rhino.Node(100, var10, var20, 1, 100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.validateStatement(var25);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test273() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test273"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
    com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
    com.google.javascript.rhino.Node var6 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var7 = var6.getDirectives();
    boolean var8 = var6.isThrow();
    boolean var10 = var6.getBooleanProp(1);
    boolean var11 = var6.isLabelName();
    java.util.Map var12 = null;
    var2.checkForCallingConventionDefiningCalls(var6, var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var14 = var6.getDouble();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test274() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test274"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.comma(var3, var7);
    boolean var9 = var7.isUnscopedQualifiedName();
    com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var14 = var13.getDirectives();
    int var15 = var13.getChangeTime();
    boolean var16 = var13.isAssignAdd();
    com.google.javascript.rhino.Node var17 = var7.clonePropsFrom(var13);
    boolean var18 = var17.isObjectLit();
    boolean var19 = var17.isFalse();
    boolean var20 = var17.isLabel();
    com.google.javascript.jscomp.CodingConvention var21 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var22 = new com.google.javascript.jscomp.GoogleCodingConvention(var21);
    com.google.javascript.rhino.Node var26 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var30 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.comma(var26, var30);
    boolean var32 = var30.isUnscopedQualifiedName();
    com.google.javascript.rhino.Node var36 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var37 = var36.getDirectives();
    int var38 = var36.getChangeTime();
    boolean var39 = var36.isAssignAdd();
    com.google.javascript.rhino.Node var40 = var30.clonePropsFrom(var36);
    com.google.javascript.jscomp.CodingConvention.DelegateRelationship var41 = var22.getDelegateRelationship(var30);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.label(var17, var30);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test275() {}
//   public void test275() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test275"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var1 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var3 = var1.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var4 = var0.getDirectedPredNodes(var3);
//     var0.popNodeAnnotations();
// 
//   }

  public void test276() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test276"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.PropertyRenamingPolicy var1 = com.google.javascript.jscomp.PropertyRenamingPolicy.valueOf("Node tree inequality:\nTree1:\nNOT\n    BITXOR 10\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NOT\n    BITXOR 10\n\n\nSubtree2: PARAM_LIST\n");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test277() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test277"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.jscomp.AbstractCompiler var3 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var5.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var8 = var4.getDirectedPredNodes(var7);
    com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var3, var8, var9);
    com.google.javascript.rhino.jstype.FunctionType var11 = var1.createFunctionType(var2, var8);
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.AbstractCompiler var16 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var20 = var18.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var21 = var17.getDirectedPredNodes(var20);
    com.google.javascript.jscomp.NodeTraversal.Callback var22 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var16, var21, var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var14.createFunctionType(var15, var21);
    com.google.javascript.rhino.Node var25 = null;
    boolean var26 = var11.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var24, var25);
    com.google.javascript.rhino.jstype.FunctionType var27 = var24.toMaybeFunctionType();
    com.google.javascript.rhino.jstype.JSType var29 = var24.getPropertyType("(function (): ?|null)");
    com.google.javascript.rhino.jstype.EnumElementType var30 = var24.toMaybeEnumElementType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.ObjectType var32 = var24.getTopMostDefiningType("function (): {370336078}");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);

  }

  public void test278() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test278"); }


    com.google.javascript.rhino.Node var4 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.comma(var4, var8);
    boolean var10 = var9.isNoSideEffectsCall();
    com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "ERROR");
    java.lang.String[] var15 = new java.lang.String[] { "hi!"};
    com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", var9, var13, var15);
    com.google.javascript.jscomp.DiagnosticGroup var17 = com.google.javascript.jscomp.DiagnosticGroup.forType(var13);
    java.lang.String var18 = var13.toString();
    java.lang.String var19 = var13.toString();
    java.lang.String var20 = var13.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!: ERROR"+ "'", var18.equals("hi!: ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!: ERROR"+ "'", var19.equals("hi!: ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!: ERROR"+ "'", var20.equals("hi!: ERROR"));

  }

  public void test279() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test279"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.VariableRenamingPolicy var1 = com.google.javascript.jscomp.VariableRenamingPolicy.valueOf("window");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test280() {}
//   public void test280() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test280"); }
// 
// 
//     com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var8 = var7.getDirectives();
//     boolean var9 = var7.isThrow();
//     boolean var11 = var7.getBooleanProp(1);
//     boolean var12 = var7.isLabelName();
//     var3.removeChild(var7);
// 
//   }

  public void test281() {}
//   public void test281() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test281"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var6 = var5.getDirectives();
//     boolean var7 = var5.isThrow();
//     boolean var9 = var5.getBooleanProp(1);
//     boolean var10 = var5.isQualifiedName();
//     com.google.javascript.rhino.Node[] var11 = new com.google.javascript.rhino.Node[] { var5};
//     com.google.javascript.rhino.Node var12 = new com.google.javascript.rhino.Node((-1), var11);
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.switchNode(var0, var11);
// 
//   }

  public void test282() {}
//   public void test282() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test282"); }
// 
// 
//     com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var4 = var3.getDirectives();
//     var3.putIntProp((-1), 0);
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.not(var3);
//     com.google.javascript.rhino.jstype.StaticSourceFile var9 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var8);
//     com.google.javascript.rhino.ErrorReporter var10 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var13 = var12.getEdges();
//     com.google.javascript.jscomp.deps.SortedDependencies var14 = new com.google.javascript.jscomp.deps.SortedDependencies(var13);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var15 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var16 = var15.getEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var17 = new com.google.javascript.jscomp.ComposeWarningsGuard(var16);
//     com.google.javascript.jscomp.JSModuleGraph var18 = new com.google.javascript.jscomp.JSModuleGraph(var16);
//     java.util.List var19 = var14.getSortedDependenciesOf(var16);
//     com.google.javascript.rhino.Node var20 = var11.createParametersWithVarArgs(var19);
//     java.lang.String var21 = var8.checkTreeEquals(var20);
//     int var22 = var8.getLineno();
//     java.lang.Appendable var23 = null;
//     var8.appendStringTree(var23);
// 
//   }

  public void test283() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test283"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    var0.pushEdgeAnnotations();
    com.google.javascript.rhino.Node var6 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.comma(var6, var10);
    boolean var12 = var11.isNoSideEffectsCall();
    com.google.javascript.jscomp.DiagnosticType var15 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "ERROR");
    java.lang.String[] var17 = new java.lang.String[] { "hi!"};
    com.google.javascript.jscomp.JSError var18 = com.google.javascript.jscomp.JSError.make("", var11, var15, var17);
    com.google.javascript.jscomp.DiagnosticGroup var19 = com.google.javascript.jscomp.DiagnosticGroup.forType(var15);
    com.google.javascript.jscomp.DiagnosticGroup[] var20 = new com.google.javascript.jscomp.DiagnosticGroup[] { var19};
    com.google.javascript.jscomp.DiagnosticGroup var21 = new com.google.javascript.jscomp.DiagnosticGroup(var20);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var22 = var0.getNodeDegree((java.lang.Object)var21);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test284() {}
//   public void test284() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test284"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = null;
//     com.google.javascript.jscomp.AbstractCompiler var3 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var5.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var8 = var4.getDirectedPredNodes(var7);
//     com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var3, var8, var9);
//     com.google.javascript.rhino.jstype.FunctionType var11 = var1.createFunctionType(var2, var8);
//     boolean var13 = var1.isForwardDeclaredType("ERROR");
//     com.google.javascript.rhino.JSDocInfo var14 = null;
//     com.google.javascript.rhino.jstype.ObjectType var15 = var1.createAnonymousObjectType(var14);
//     com.google.javascript.rhino.jstype.JSTypeNative[] var16 = com.google.javascript.rhino.jstype.JSTypeNative.values();
//     com.google.javascript.rhino.jstype.JSType var17 = var1.createUnionType(var16);
//     com.google.javascript.rhino.jstype.ObjectType var18 = null;
//     java.util.Collection var19 = var1.getDirectImplementors(var18);
// 
//   }

  public void test285() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test285"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var2 = var1.getOriginalPath();
    int var4 = var1.getColumnOfOffset(10);
    com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var1, false);
    com.google.javascript.jscomp.CompilerInput var9 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var6, "", true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var11 = var6.getLineOffset(0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 10);

  }

  public void test286() {}
//   public void test286() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test286"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
//     java.lang.String var6 = var1.getAstDotGraph();
//     com.google.javascript.jscomp.CompilerOptions var7 = null;
//     com.google.javascript.jscomp.DefaultPassConfig var8 = new com.google.javascript.jscomp.DefaultPassConfig(var7);
//     var1.setPassConfig((com.google.javascript.jscomp.PassConfig)var8);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var11 = var10.getEdges();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var13 = var12.getEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var14 = new com.google.javascript.jscomp.ComposeWarningsGuard(var13);
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.script(var13);
//     com.google.javascript.jscomp.CompilerOptions var16 = new com.google.javascript.jscomp.CompilerOptions();
//     var16.setPropertyAffinity(false);
//     com.google.javascript.jscomp.CheckLevel var19 = null;
//     var16.setBrokenClosureRequiresLevel(var19);
//     var1.<com.google.javascript.jscomp.SourceFile>initModules(var11, var13, var16);
//     com.google.javascript.jscomp.JSError[] var22 = var1.getMessages();
//     com.google.javascript.jscomp.type.ReverseAbstractInterpreter var23 = null;
//     com.google.javascript.jscomp.CodingConvention var24 = com.google.javascript.jscomp.CodingConventions.getDefault();
//     com.google.javascript.jscomp.GoogleCodingConvention var25 = new com.google.javascript.jscomp.GoogleCodingConvention(var24);
//     com.google.javascript.rhino.Node var29 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var30 = var29.getDirectives();
//     var29.putIntProp((-1), 0);
//     com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.exprResult(var29);
//     com.google.javascript.jscomp.CodingConvention.Bind var35 = var25.describeFunctionBind(var29);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var36 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var37 = var36.getEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var38 = new com.google.javascript.jscomp.ComposeWarningsGuard(var37);
//     com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.script(var37);
//     boolean var40 = var25.isPrototypeAlias(var39);
//     com.google.javascript.rhino.ErrorReporter var41 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
//     com.google.javascript.rhino.jstype.JSType var43 = null;
//     com.google.javascript.rhino.Node var47 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var48 = var47.getDirectives();
//     boolean var49 = var47.isThrow();
//     boolean var51 = var47.getBooleanProp(1);
//     boolean var52 = var47.isQualifiedName();
//     com.google.javascript.rhino.jstype.FunctionType var53 = var42.createFunctionType(var43, var47);
//     java.lang.Iterable var55 = var42.getTypesWithProperty("ERROR");
//     java.lang.Iterable var57 = var42.getEachReferenceTypeWithProperty("ERROR");
//     com.google.javascript.rhino.ErrorReporter var58 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
//     com.google.javascript.rhino.jstype.JSType var60 = null;
//     com.google.javascript.jscomp.AbstractCompiler var61 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var62 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var63 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var65 = var63.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var66 = var62.getDirectedPredNodes(var65);
//     com.google.javascript.jscomp.NodeTraversal.Callback var67 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var61, var66, var67);
//     com.google.javascript.rhino.jstype.FunctionType var69 = var59.createFunctionType(var60, var66);
//     java.lang.Iterable var70 = var69.getImplementedInterfaces();
//     boolean var71 = var69.isStruct();
//     java.lang.String var72 = var69.getDisplayName();
//     com.google.javascript.jscomp.AbstractCompiler var73 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var74 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var75 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var77 = var75.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var78 = var74.getDirectedPredNodes(var77);
//     com.google.javascript.jscomp.NodeTraversal.Callback var79 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var73, var78, var79);
//     java.util.Map var81 = null;
//     var25.defineDelegateProxyPrototypeProperties(var42, (com.google.javascript.rhino.jstype.StaticScope)var69, var78, var81);
//     com.google.javascript.jscomp.CheckLevel var83 = null;
//     com.google.javascript.jscomp.TypeCheck var84 = new com.google.javascript.jscomp.TypeCheck((com.google.javascript.jscomp.AbstractCompiler)var1, var23, var42, var83);
//     com.google.javascript.rhino.Node var88 = com.google.javascript.rhino.Node.newString("", 100, 10);
//     var84.check(var88, true);
// 
//   }

  public void test287() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test287"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var3 = var2.getEdges();
    com.google.javascript.jscomp.deps.SortedDependencies var4 = new com.google.javascript.jscomp.deps.SortedDependencies(var3);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var6 = var5.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var7 = new com.google.javascript.jscomp.ComposeWarningsGuard(var6);
    com.google.javascript.jscomp.JSModuleGraph var8 = new com.google.javascript.jscomp.JSModuleGraph(var6);
    java.util.List var9 = var4.getSortedDependenciesOf(var6);
    com.google.javascript.rhino.Node var10 = var1.createParametersWithVarArgs(var9);
    com.google.common.collect.ImmutableList var11 = null;
    com.google.common.collect.ImmutableList var12 = null;
    com.google.javascript.rhino.jstype.TemplateTypeMap var13 = var1.createTemplateTypeMap(var11, var12);
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.jscomp.AbstractCompiler var17 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var19 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var21 = var19.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var22 = var18.getDirectedPredNodes(var21);
    com.google.javascript.jscomp.NodeTraversal.Callback var23 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var17, var22, var23);
    com.google.javascript.rhino.jstype.FunctionType var25 = var15.createFunctionType(var16, var22);
    com.google.javascript.rhino.jstype.TemplateType var26 = var15.getObjectElementKey();
    com.google.javascript.rhino.jstype.JSType var27 = var13.getTemplateType(var26);
    boolean var28 = var27.isDict();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test288() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test288"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var3 = var2.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
    java.lang.String var6 = var1.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var7 = null;
    com.google.javascript.jscomp.DefaultPassConfig var8 = new com.google.javascript.jscomp.DefaultPassConfig(var7);
    var1.setPassConfig((com.google.javascript.jscomp.PassConfig)var8);
    java.io.PrintStream var10 = null;
    com.google.javascript.jscomp.Compiler var11 = new com.google.javascript.jscomp.Compiler(var10);
    var11.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var14 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var15 = var14.getOriginalPath();
    com.google.javascript.rhino.Node var16 = var11.parse(var14);
    var14.setOriginalPath("{ }");
    com.google.javascript.rhino.Node var19 = var1.parse(var14);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var22 = var20.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var23 = var20.getGraphvizEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var24 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var23, var24);
    com.google.javascript.jscomp.MessageFormatter var26 = null;
    java.util.logging.Logger var27 = null;
    com.google.javascript.jscomp.LoggerErrorManager var28 = new com.google.javascript.jscomp.LoggerErrorManager(var26, var27);
    int var29 = var28.getWarningCount();
    com.google.javascript.jscomp.JSError[] var30 = var28.getWarnings();
    var1.setErrorManager((com.google.javascript.jscomp.ErrorManager)var28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.processDefines();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test289() {}
//   public void test289() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test289"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
//     var0.pushEdgeAnnotations();
//     java.util.List var2 = var0.getGraphvizEdges();
//     var0.clearNodeAnnotations();
//     java.util.List var4 = var0.getEdges();
//     com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
//     var5.setNameReferenceReportPath("");
//     var5.setSyntheticBlockEndMarker("hi!");
//     var5.setTightenTypes(true);
//     java.util.Set var12 = null;
//     var5.setCssRenamingWhitelist(var12);
//     var5.setCollapseProperties(false);
//     java.util.Iterator var16 = var0.getNeighborNodesIterator((java.lang.Object)false);
// 
//   }

  public void test290() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test290"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    var3.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.exprResult(var3);
    java.lang.Iterable var9 = var8.siblings();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.Node.newString("hi!", 1, (-1));
    var8.addChildToBack(var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var8.setQuotedString();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test291() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test291"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
    com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
    com.google.javascript.rhino.Node var6 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var7 = var6.getDirectives();
    boolean var8 = var6.isReturn();
    boolean var9 = var2.isPrototypeAlias(var6);
    com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var14 = var13.getDirectives();
    boolean var15 = var13.isThrow();
    boolean var17 = var13.getBooleanProp(1);
    boolean var18 = var13.isQualifiedName();
    boolean var19 = var2.isVarArgsParameter(var13);
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    com.google.javascript.jscomp.AbstractCompiler var23 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var24 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var25 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var27 = var25.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var28 = var24.getDirectedPredNodes(var27);
    com.google.javascript.jscomp.NodeTraversal.Callback var29 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var23, var28, var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var21.createFunctionType(var22, var28);
    java.util.Set var32 = var31.getOwnPropertyNames();
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33);
    com.google.javascript.rhino.jstype.JSType var35 = null;
    com.google.javascript.rhino.Node var39 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var40 = var39.getDirectives();
    boolean var41 = var39.isThrow();
    boolean var43 = var39.getBooleanProp(1);
    boolean var44 = var39.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var45 = var34.createFunctionType(var35, var39);
    java.lang.Iterable var47 = var34.getTypesWithProperty("ERROR");
    com.google.javascript.rhino.ErrorReporter var48 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var48);
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.jscomp.AbstractCompiler var51 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var52 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var53 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var55 = var53.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var56 = var52.getDirectedPredNodes(var55);
    com.google.javascript.jscomp.NodeTraversal.Callback var57 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var51, var56, var57);
    com.google.javascript.rhino.jstype.FunctionType var59 = var49.createFunctionType(var50, var56);
    com.google.javascript.rhino.ErrorReporter var61 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    com.google.javascript.jscomp.AbstractCompiler var64 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var65 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var66 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var68 = var66.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var69 = var65.getDirectedPredNodes(var68);
    com.google.javascript.jscomp.NodeTraversal.Callback var70 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var64, var69, var70);
    com.google.javascript.rhino.jstype.FunctionType var72 = var62.createFunctionType(var63, var69);
    com.google.javascript.rhino.Node var73 = null;
    boolean var74 = var59.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var72, var73);
    com.google.javascript.rhino.jstype.FunctionType var75 = var72.toMaybeFunctionType();
    boolean var76 = var72.hasCachedValues();
    com.google.javascript.rhino.ErrorReporter var77 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var78 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var77);
    com.google.javascript.rhino.ErrorReporter var79 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var80 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var79);
    com.google.javascript.rhino.jstype.JSType var81 = null;
    com.google.javascript.jscomp.AbstractCompiler var82 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var83 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var84 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var86 = var84.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var87 = var83.getDirectedPredNodes(var86);
    com.google.javascript.jscomp.NodeTraversal.Callback var88 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var82, var87, var88);
    com.google.javascript.rhino.jstype.FunctionType var90 = var80.createFunctionType(var81, var87);
    com.google.javascript.rhino.jstype.JSType var91 = var78.createNullableType((com.google.javascript.rhino.jstype.JSType)var90);
    boolean var92 = var72.canCastTo(var91);
    com.google.javascript.rhino.jstype.JSType var94 = var34.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType)var72, "ERROR");
    com.google.javascript.jscomp.CodingConvention.SubclassType var95 = null;
    var2.applySubclassRelationship(var31, var72, var95);
    java.lang.String var97 = var2.getAbstractMethodName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var97 + "' != '" + "goog.abstractMethod"+ "'", var97.equals("goog.abstractMethod"));

  }

  public void test292() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test292"); }


    com.google.javascript.rhino.Node var4 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.comma(var4, var8);
    boolean var10 = var8.isDebugger();
    java.util.Set var11 = null;
    var8.setDirectives(var11);
    com.google.javascript.rhino.Node var17 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.comma(var17, var21);
    boolean var23 = var22.isNoSideEffectsCall();
    com.google.javascript.jscomp.DiagnosticType var26 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "ERROR");
    java.lang.String[] var28 = new java.lang.String[] { "hi!"};
    com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("", var22, var26, var28);
    int var30 = var22.getCharno();
    com.google.javascript.rhino.Node var31 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var34 = new com.google.javascript.rhino.Node((-1), var8, var22, var31, 0, 1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));

  }

  public void test293() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test293"); }


    java.lang.String var1 = com.google.javascript.rhino.Token.name(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "OR"+ "'", var1.equals("OR"));

  }

  public void test294() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test294"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
    com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var6 = var5.getDirectives();
    var5.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.exprResult(var5);
    com.google.javascript.jscomp.CodingConvention.Bind var11 = var1.describeFunctionBind(var5);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var13 = var12.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var14 = new com.google.javascript.jscomp.ComposeWarningsGuard(var13);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.script(var13);
    boolean var16 = var1.isPrototypeAlias(var15);
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.Node var23 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var24 = var23.getDirectives();
    boolean var25 = var23.isThrow();
    boolean var27 = var23.getBooleanProp(1);
    boolean var28 = var23.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var29 = var18.createFunctionType(var19, var23);
    java.lang.Iterable var31 = var18.getTypesWithProperty("ERROR");
    java.lang.Iterable var33 = var18.getEachReferenceTypeWithProperty("ERROR");
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.jscomp.AbstractCompiler var37 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var38 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var39 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var41 = var39.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var42 = var38.getDirectedPredNodes(var41);
    com.google.javascript.jscomp.NodeTraversal.Callback var43 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var37, var42, var43);
    com.google.javascript.rhino.jstype.FunctionType var45 = var35.createFunctionType(var36, var42);
    java.lang.Iterable var46 = var45.getImplementedInterfaces();
    boolean var47 = var45.isStruct();
    java.lang.String var48 = var45.getDisplayName();
    com.google.javascript.jscomp.AbstractCompiler var49 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var53 = var51.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var54 = var50.getDirectedPredNodes(var53);
    com.google.javascript.jscomp.NodeTraversal.Callback var55 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var49, var54, var55);
    java.util.Map var57 = null;
    var1.defineDelegateProxyPrototypeProperties(var18, (com.google.javascript.rhino.jstype.StaticScope)var45, var54, var57);
    com.google.javascript.rhino.jstype.ObjectType var59 = var45.toObjectType();
    java.lang.Iterable var60 = var45.getExtendedInterfaces();
    com.google.javascript.rhino.ErrorReporter var61 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var61);
    com.google.javascript.rhino.ErrorReporter var63 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var63);
    com.google.javascript.rhino.jstype.JSType var65 = null;
    com.google.javascript.jscomp.AbstractCompiler var66 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var67 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var68 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var70 = var68.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var71 = var67.getDirectedPredNodes(var70);
    com.google.javascript.jscomp.NodeTraversal.Callback var72 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var66, var71, var72);
    com.google.javascript.rhino.jstype.FunctionType var74 = var64.createFunctionType(var65, var71);
    com.google.javascript.rhino.jstype.JSType var75 = var62.createNullableType((com.google.javascript.rhino.jstype.JSType)var74);
    com.google.javascript.rhino.jstype.JSType.TypePair var76 = var45.getTypesUnderEquality(var75);
    com.google.javascript.rhino.jstype.Property var78 = var45.getOwnSlot("LABEL_NAME hi!\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);

  }

  public void test295() {}
//   public void test295() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test295"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.disabled("LABEL_NAME hi!\n", "LABEL_NAME hi!\n");
//     com.google.javascript.jscomp.DiagnosticType[] var3 = new com.google.javascript.jscomp.DiagnosticType[] { var2};
//     com.google.javascript.jscomp.DiagnosticGroup var4 = new com.google.javascript.jscomp.DiagnosticGroup(var3);
//     com.google.javascript.jscomp.CheckLevel var5 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var6 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var4, var5);
//     com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.comma(var11, var15);
//     boolean var17 = var16.isNoSideEffectsCall();
//     com.google.javascript.jscomp.DiagnosticType var20 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "ERROR");
//     java.lang.String[] var22 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var23 = com.google.javascript.jscomp.JSError.make("", var16, var20, var22);
//     com.google.javascript.jscomp.DiagnosticGroup var24 = com.google.javascript.jscomp.DiagnosticGroup.forType(var20);
//     java.lang.Iterable var25 = var24.getTypes();
//     boolean var26 = var6.enables(var24);
// 
//   }

  public void test296() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test296"); }


    com.google.javascript.jscomp.AstValidator var0 = new com.google.javascript.jscomp.AstValidator();
    com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var9 = new com.google.javascript.rhino.Node(100, 1, 10);
    com.google.javascript.rhino.Node var10 = var9.getLastSibling();
    boolean var11 = var9.isGetElem();
    var9.setWasEmptyNode(false);
    com.google.javascript.rhino.Node var14 = var5.useSourceInfoFromForTree(var9);
    com.google.javascript.rhino.Node var18 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var19 = var18.getDirectives();
    int var20 = var18.getChangeTime();
    boolean var21 = var18.isAssignAdd();
    java.lang.String var22 = var18.getSourceFileName();
    java.lang.Iterable var23 = var18.children();
    com.google.javascript.jscomp.CodingConvention var24 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var25 = new com.google.javascript.jscomp.GoogleCodingConvention(var24);
    com.google.javascript.rhino.Node var29 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var30 = var29.getDirectives();
    var29.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.exprResult(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var35 = var25.describeFunctionBind(var29);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var36 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var37 = var36.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var38 = new com.google.javascript.jscomp.ComposeWarningsGuard(var37);
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.script(var37);
    boolean var40 = var25.isPrototypeAlias(var39);
    com.google.javascript.rhino.Node var41 = new com.google.javascript.rhino.Node((-1), var5, var18, var39);
    boolean var42 = var41.isOr();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.validateScript(var41);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test297() {}
//   public void test297() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test297"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.deps.SortedDependencies var4 = new com.google.javascript.jscomp.deps.SortedDependencies(var3);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var6 = var5.getEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var7 = new com.google.javascript.jscomp.ComposeWarningsGuard(var6);
//     com.google.javascript.jscomp.JSModuleGraph var8 = new com.google.javascript.jscomp.JSModuleGraph(var6);
//     java.util.List var9 = var4.getSortedDependenciesOf(var6);
//     com.google.javascript.rhino.Node var10 = var1.createParametersWithVarArgs(var9);
//     com.google.common.collect.ImmutableList var11 = null;
//     com.google.common.collect.ImmutableList var12 = null;
//     com.google.javascript.rhino.jstype.TemplateTypeMap var13 = var1.createTemplateTypeMap(var11, var12);
//     com.google.javascript.rhino.ErrorReporter var14 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     com.google.javascript.jscomp.AbstractCompiler var17 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var19 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var21 = var19.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var22 = var18.getDirectedPredNodes(var21);
//     com.google.javascript.jscomp.NodeTraversal.Callback var23 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var17, var22, var23);
//     com.google.javascript.rhino.jstype.FunctionType var25 = var15.createFunctionType(var16, var22);
//     com.google.javascript.rhino.jstype.TemplateType var26 = var15.getObjectElementKey();
//     com.google.javascript.rhino.jstype.JSType var27 = var13.getTemplateType(var26);
//     boolean var28 = var26.hasAnyTemplateTypesInternal();
//     boolean var29 = var26.isNominalType();
// 
//   }

  public void test298() {}
//   public void test298() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test298"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
//     java.lang.String var6 = var1.getAstDotGraph();
//     com.google.javascript.jscomp.CompilerOptions var7 = null;
//     com.google.javascript.jscomp.DefaultPassConfig var8 = new com.google.javascript.jscomp.DefaultPassConfig(var7);
//     var1.setPassConfig((com.google.javascript.jscomp.PassConfig)var8);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var11 = var10.getEdges();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var13 = var12.getEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var14 = new com.google.javascript.jscomp.ComposeWarningsGuard(var13);
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.script(var13);
//     com.google.javascript.jscomp.CompilerOptions var16 = new com.google.javascript.jscomp.CompilerOptions();
//     var16.setPropertyAffinity(false);
//     com.google.javascript.jscomp.CheckLevel var19 = null;
//     var16.setBrokenClosureRequiresLevel(var19);
//     var1.<com.google.javascript.jscomp.SourceFile>initModules(var11, var13, var16);
//     com.google.javascript.jscomp.JSError[] var22 = var1.getMessages();
//     com.google.javascript.jscomp.CompilerInput var24 = var1.newExternInput("hi!");
// 
//   }

  public void test299() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test299"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setNameReferenceReportPath("");
    var0.setSyntheticBlockEndMarker("hi!");
    var0.setTightenTypes(true);
    var0.setSyntheticBlockStartMarker("(function (): ?|null)");
    var0.setAcceptConstKeyword(false);

  }

  public void test300() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test300"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.jscomp.AbstractCompiler var3 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var5.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var8 = var4.getDirectedPredNodes(var7);
    com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var3, var8, var9);
    com.google.javascript.rhino.jstype.FunctionType var11 = var1.createFunctionType(var2, var8);
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.AbstractCompiler var16 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var20 = var18.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var21 = var17.getDirectedPredNodes(var20);
    com.google.javascript.jscomp.NodeTraversal.Callback var22 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var16, var21, var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var14.createFunctionType(var15, var21);
    com.google.javascript.rhino.Node var25 = null;
    boolean var26 = var11.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var24, var25);
    com.google.javascript.rhino.jstype.FunctionType var27 = var24.toMaybeFunctionType();
    boolean var28 = var24.hasCachedValues();
    com.google.javascript.rhino.jstype.TemplatizedType var29 = com.google.javascript.rhino.jstype.JSType.toMaybeTemplatizedType((com.google.javascript.rhino.jstype.JSType)var24);
    com.google.javascript.rhino.jstype.FunctionType var30 = var24.toMaybeFunctionType();
    com.google.javascript.rhino.jstype.TemplateTypeMap var31 = var24.getTemplateTypeMap();
    com.google.javascript.rhino.jstype.TemplateType var33 = var31.getTemplateTypeKeyByName("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }

  public void test301() {}
//   public void test301() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test301"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.deps.SortedDependencies var4 = new com.google.javascript.jscomp.deps.SortedDependencies(var3);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var6 = var5.getEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var7 = new com.google.javascript.jscomp.ComposeWarningsGuard(var6);
//     com.google.javascript.jscomp.JSModuleGraph var8 = new com.google.javascript.jscomp.JSModuleGraph(var6);
//     java.util.List var9 = var4.getSortedDependenciesOf(var6);
//     com.google.javascript.rhino.Node var10 = var1.createParametersWithVarArgs(var9);
//     com.google.common.collect.ImmutableList var11 = null;
//     com.google.common.collect.ImmutableList var12 = null;
//     com.google.javascript.rhino.jstype.TemplateTypeMap var13 = var1.createTemplateTypeMap(var11, var12);
//     com.google.javascript.rhino.ErrorReporter var14 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
//     com.google.javascript.rhino.ErrorReporter var16 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
//     com.google.javascript.rhino.jstype.JSType var18 = null;
//     com.google.javascript.jscomp.AbstractCompiler var19 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var23 = var21.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var24 = var20.getDirectedPredNodes(var23);
//     com.google.javascript.jscomp.NodeTraversal.Callback var25 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var19, var24, var25);
//     com.google.javascript.rhino.jstype.FunctionType var27 = var17.createFunctionType(var18, var24);
//     com.google.javascript.rhino.jstype.JSType var28 = var15.createNullableType((com.google.javascript.rhino.jstype.JSType)var27);
//     com.google.javascript.rhino.ErrorReporter var29 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
//     com.google.javascript.rhino.ErrorReporter var31 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var31);
//     com.google.javascript.rhino.jstype.JSType var33 = null;
//     com.google.javascript.jscomp.AbstractCompiler var34 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var36 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var38 = var36.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var39 = var35.getDirectedPredNodes(var38);
//     com.google.javascript.jscomp.NodeTraversal.Callback var40 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var34, var39, var40);
//     com.google.javascript.rhino.jstype.FunctionType var42 = var32.createFunctionType(var33, var39);
//     com.google.javascript.rhino.jstype.JSType var43 = var30.createNullableType((com.google.javascript.rhino.jstype.JSType)var42);
//     com.google.javascript.rhino.ErrorReporter var44 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var44);
//     com.google.javascript.rhino.ErrorReporter var46 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
//     com.google.javascript.rhino.jstype.JSType var48 = null;
//     com.google.javascript.jscomp.AbstractCompiler var49 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var53 = var51.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var54 = var50.getDirectedPredNodes(var53);
//     com.google.javascript.jscomp.NodeTraversal.Callback var55 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var49, var54, var55);
//     com.google.javascript.rhino.jstype.FunctionType var57 = var47.createFunctionType(var48, var54);
//     com.google.javascript.rhino.jstype.JSType var58 = var45.createNullableType((com.google.javascript.rhino.jstype.JSType)var57);
//     com.google.javascript.rhino.ErrorReporter var59 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var59);
//     com.google.javascript.rhino.jstype.JSType var61 = null;
//     com.google.javascript.rhino.Node var65 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var66 = var65.getDirectives();
//     boolean var67 = var65.isThrow();
//     boolean var69 = var65.getBooleanProp(1);
//     boolean var70 = var65.isQualifiedName();
//     com.google.javascript.rhino.jstype.FunctionType var71 = var60.createFunctionType(var61, var65);
//     com.google.javascript.rhino.jstype.JSType[] var72 = new com.google.javascript.rhino.jstype.JSType[] { var61};
//     com.google.javascript.rhino.Node var73 = var45.createParameters(var72);
//     com.google.javascript.rhino.jstype.FunctionType var74 = var15.createConstructorType(var43, var72);
//     com.google.javascript.rhino.jstype.JSType var75 = var1.createUnionType(var72);
// 
//   }

  public void test302() {}
//   public void test302() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test302"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = null;
//     java.io.PrintStream var2 = null;
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler(var2);
//     var3.reportCodeChange();
//     com.google.javascript.jscomp.SourceFile var6 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
//     java.lang.String var7 = var6.getOriginalPath();
//     com.google.javascript.rhino.Node var8 = var3.parse(var6);
//     com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(10, var1, var8, 0, 0);
// 
//   }

  public void test303() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test303"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var3 = var2.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
    java.lang.String var6 = var1.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var7 = null;
    com.google.javascript.jscomp.DefaultPassConfig var8 = new com.google.javascript.jscomp.DefaultPassConfig(var7);
    var1.setPassConfig((com.google.javascript.jscomp.PassConfig)var8);
    java.io.PrintStream var10 = null;
    com.google.javascript.jscomp.Compiler var11 = new com.google.javascript.jscomp.Compiler(var10);
    var11.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var14 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var15 = var14.getOriginalPath();
    com.google.javascript.rhino.Node var16 = var11.parse(var14);
    var14.setOriginalPath("{ }");
    com.google.javascript.rhino.Node var19 = var1.parse(var14);
    var14.setOriginalPath("BITXOR 10");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test304() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test304"); }


    com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var6 = var5.getDirectives();
    boolean var7 = var5.isThrow();
    boolean var9 = var5.getBooleanProp(1);
    boolean var10 = var5.isQualifiedName();
    com.google.javascript.rhino.Node[] var11 = new com.google.javascript.rhino.Node[] { var5};
    com.google.javascript.rhino.Node var12 = new com.google.javascript.rhino.Node((-1), var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(100, var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test305() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test305"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.trueNode();
    boolean var1 = var0.isExprResult();
    com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(100, 1, 10);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.returnNode(var5);
    java.io.PrintStream var7 = null;
    com.google.javascript.jscomp.Compiler var8 = new com.google.javascript.jscomp.Compiler(var7);
    var8.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var11 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var12 = var11.getOriginalPath();
    com.google.javascript.rhino.Node var13 = var8.parse(var11);
    var11.setOriginalPath("{ }");
    var6.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var11);
    com.google.javascript.rhino.Node var17 = var0.useSourceInfoIfMissingFrom(var6);
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(100, 1, 10);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.returnNode(var21);
    java.io.PrintStream var23 = null;
    com.google.javascript.jscomp.Compiler var24 = new com.google.javascript.jscomp.Compiler(var23);
    var24.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var27 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var28 = var27.getOriginalPath();
    com.google.javascript.rhino.Node var29 = var24.parse(var27);
    var27.setOriginalPath("{ }");
    var22.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var27);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.tryCatch(var0, var22);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test306() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test306"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setNameReferenceReportPath("");
    var0.setSyntheticBlockEndMarker("hi!");
    var0.setTightenTypes(true);
    java.util.Set var7 = null;
    var0.setCssRenamingWhitelist(var7);
    var0.setInlineVariables(false);
    com.google.javascript.jscomp.CheckLevel var11 = null;
    var0.setCheckUnreachableCode(var11);
    var0.setDeadAssignmentElimination(true);
    byte[] var15 = new byte[] { };
    var0.setInputVariableMapSerialized(var15);
    var0.setPrintInputDelimiter(true);
    var0.setOptimizeReturns(true);
    boolean var21 = var0.getCheckDeterminism();
    var0.setClosurePass(false);
    boolean var24 = var0.isRemoveUnusedClassProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test307() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test307"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(100, 1, 10);
    com.google.javascript.rhino.Node var8 = var7.getLastSibling();
    boolean var9 = var7.isGetElem();
    var7.setWasEmptyNode(false);
    com.google.javascript.rhino.Node var12 = var3.useSourceInfoFromForTree(var7);
    var7.addSuppression("hi!: ERROR");
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.Node.newString("hi!", 10, 0);
    java.lang.Object var20 = var18.getProp(1);
    com.google.javascript.rhino.Node var24 = new com.google.javascript.rhino.Node(100, 1, 10);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.returnNode(var24);
    com.google.javascript.rhino.InputId var26 = null;
    var25.setInputId(var26);
    boolean var28 = var25.isDebugger();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.addChildBefore(var18, var25);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test308() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test308"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.comma(var3, var7);
    boolean var9 = var7.isDebugger();
    var7.setVarArgs(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.exprResult(var7);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test309() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test309"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.jscomp.AbstractCompiler var3 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var5.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var8 = var4.getDirectedPredNodes(var7);
    com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var3, var8, var9);
    com.google.javascript.rhino.jstype.FunctionType var11 = var1.createFunctionType(var2, var8);
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.AbstractCompiler var16 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var20 = var18.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var21 = var17.getDirectedPredNodes(var20);
    com.google.javascript.jscomp.NodeTraversal.Callback var22 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var16, var21, var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var14.createFunctionType(var15, var21);
    com.google.javascript.rhino.Node var25 = null;
    boolean var26 = var11.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var24, var25);
    com.google.javascript.rhino.jstype.FunctionType var27 = var24.toMaybeFunctionType();
    boolean var28 = var24.hasCachedValues();
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    com.google.javascript.rhino.ErrorReporter var31 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var31);
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.jscomp.AbstractCompiler var34 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var36 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var38 = var36.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var39 = var35.getDirectedPredNodes(var38);
    com.google.javascript.jscomp.NodeTraversal.Callback var40 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var34, var39, var40);
    com.google.javascript.rhino.jstype.FunctionType var42 = var32.createFunctionType(var33, var39);
    com.google.javascript.rhino.jstype.JSType var43 = var30.createNullableType((com.google.javascript.rhino.jstype.JSType)var42);
    boolean var44 = var24.canCastTo(var43);
    com.google.javascript.rhino.jstype.TemplatizedType var45 = com.google.javascript.rhino.jstype.JSType.toMaybeTemplatizedType(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);

  }

  public void test310() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test310"); }


    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    com.google.javascript.jscomp.AbstractCompiler var4 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var6 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var8 = var6.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var9 = var5.getDirectedPredNodes(var8);
    com.google.javascript.jscomp.NodeTraversal.Callback var10 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var4, var9, var10);
    com.google.javascript.rhino.jstype.FunctionType var12 = var2.createFunctionType(var3, var9);
    java.lang.Iterable var13 = var12.getImplementedInterfaces();
    boolean var14 = var12.isStruct();
    java.lang.String var15 = var12.getDisplayName();
    com.google.javascript.rhino.ErrorReporter var16 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
    com.google.javascript.rhino.ErrorReporter var18 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.jscomp.AbstractCompiler var21 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var22 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var23 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var25 = var23.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var26 = var22.getDirectedPredNodes(var25);
    com.google.javascript.jscomp.NodeTraversal.Callback var27 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var21, var26, var27);
    com.google.javascript.rhino.jstype.FunctionType var29 = var19.createFunctionType(var20, var26);
    com.google.javascript.rhino.jstype.JSType var30 = var17.createNullableType((com.google.javascript.rhino.jstype.JSType)var29);
    java.lang.String var31 = var30.toAnnotationString();
    boolean var32 = var12.isSubtype(var30);
    com.google.javascript.jscomp.CodingConvention var33 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var34 = new com.google.javascript.jscomp.GoogleCodingConvention(var33);
    com.google.javascript.rhino.Node var38 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var39 = var38.getDirectives();
    var38.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.exprResult(var38);
    com.google.javascript.jscomp.CodingConvention.Bind var44 = var34.describeFunctionBind(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var45 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var46 = var45.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var47 = new com.google.javascript.jscomp.ComposeWarningsGuard(var46);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.script(var46);
    boolean var49 = var34.isPrototypeAlias(var48);
    com.google.javascript.rhino.ErrorReporter var50 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var50);
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.Node var56 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var57 = var56.getDirectives();
    boolean var58 = var56.isThrow();
    boolean var60 = var56.getBooleanProp(1);
    boolean var61 = var56.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var62 = var51.createFunctionType(var52, var56);
    java.lang.Iterable var64 = var51.getTypesWithProperty("ERROR");
    java.lang.Iterable var66 = var51.getEachReferenceTypeWithProperty("ERROR");
    com.google.javascript.rhino.ErrorReporter var67 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var68 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var67);
    com.google.javascript.rhino.jstype.JSType var69 = null;
    com.google.javascript.jscomp.AbstractCompiler var70 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var71 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var72 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var74 = var72.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var75 = var71.getDirectedPredNodes(var74);
    com.google.javascript.jscomp.NodeTraversal.Callback var76 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var70, var75, var76);
    com.google.javascript.rhino.jstype.FunctionType var78 = var68.createFunctionType(var69, var75);
    java.lang.Iterable var79 = var78.getImplementedInterfaces();
    boolean var80 = var78.isStruct();
    java.lang.String var81 = var78.getDisplayName();
    com.google.javascript.jscomp.AbstractCompiler var82 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var83 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var84 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var86 = var84.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var87 = var83.getDirectedPredNodes(var86);
    com.google.javascript.jscomp.NodeTraversal.Callback var88 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var82, var87, var88);
    java.util.Map var90 = null;
    var34.defineDelegateProxyPrototypeProperties(var51, (com.google.javascript.rhino.jstype.StaticScope)var78, var87, var90);
    com.google.javascript.rhino.jstype.ObjectType var92 = var78.toObjectType();
    com.google.javascript.rhino.JSDocInfo var93 = var78.getJSDocInfo();
    boolean var94 = var30.differsFrom((com.google.javascript.rhino.jstype.JSType)var78);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var95 = com.google.javascript.rhino.SimpleErrorReporter.getMessage1("", (java.lang.Object)var78);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "(function (): ?|null)"+ "'", var31.equals("(function (): ?|null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == true);

  }

  public void test311() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test311"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setNameReferenceReportPath("");
    var0.setSyntheticBlockEndMarker("hi!");
    var0.setTightenTypes(true);
    java.util.Set var7 = null;
    var0.setCssRenamingWhitelist(var7);
    var0.setAmbiguateProperties(false);
    var0.setClosurePass(false);
    var0.setCheckSuspiciousCode(false);
    com.google.javascript.jscomp.ErrorFormat var15 = null;
    var0.setErrorFormat(var15);

  }

  public void test312() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test312"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    var0.pushEdgeAnnotations();
    java.util.List var2 = var0.getGraphvizEdges();
    var0.clearNodeAnnotations();
    java.util.List var4 = var0.getEdges();
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.jscomp.AbstractCompiler var8 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var9 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var12 = var10.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var13 = var9.getDirectedPredNodes(var12);
    com.google.javascript.jscomp.NodeTraversal.Callback var14 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var8, var13, var14);
    com.google.javascript.rhino.jstype.FunctionType var16 = var6.createFunctionType(var7, var13);
    boolean var18 = var6.isForwardDeclaredType("ERROR");
    com.google.javascript.rhino.JSDocInfo var19 = null;
    com.google.javascript.rhino.jstype.ObjectType var20 = var6.createAnonymousObjectType(var19);
    com.google.javascript.rhino.jstype.JSTypeNative[] var21 = com.google.javascript.rhino.jstype.JSTypeNative.values();
    com.google.javascript.rhino.jstype.JSType var22 = var6.createUnionType(var21);
    java.lang.Object var23 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.disconnect((java.lang.Object)var22, var23);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test313() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test313"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var3 = var2.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
    java.lang.String var6 = var1.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var7 = null;
    com.google.javascript.jscomp.DefaultPassConfig var8 = new com.google.javascript.jscomp.DefaultPassConfig(var7);
    var1.setPassConfig((com.google.javascript.jscomp.PassConfig)var8);
    java.io.PrintStream var10 = null;
    com.google.javascript.jscomp.Compiler var11 = new com.google.javascript.jscomp.Compiler(var10);
    var11.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var14 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var15 = var14.getOriginalPath();
    com.google.javascript.rhino.Node var16 = var11.parse(var14);
    var14.setOriginalPath("{ }");
    com.google.javascript.rhino.Node var19 = var1.parse(var14);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var22 = var20.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var23 = var20.getGraphvizEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var24 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var23, var24);
    com.google.javascript.jscomp.MessageFormatter var26 = null;
    java.util.logging.Logger var27 = null;
    com.google.javascript.jscomp.LoggerErrorManager var28 = new com.google.javascript.jscomp.LoggerErrorManager(var26, var27);
    int var29 = var28.getWarningCount();
    com.google.javascript.jscomp.JSError[] var30 = var28.getWarnings();
    var1.setErrorManager((com.google.javascript.jscomp.ErrorManager)var28);
    com.google.javascript.jscomp.NodeTraversal.FunctionCallback var32 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.NodeTraversal.traverseChangedFunctions((com.google.javascript.jscomp.AbstractCompiler)var1, var32);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test314() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test314"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("(function (): ?|null)");
    java.io.PrintStream var2 = null;
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler(var2);
    var3.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var6 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var7 = var6.getOriginalPath();
    com.google.javascript.rhino.Node var8 = var3.parse(var6);
    var1.add(var6);
    java.util.List var10 = var1.getRequires();
    com.google.javascript.jscomp.SourceFile var12 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var13 = var12.getOriginalPath();
    int var15 = var12.getColumnOfOffset(10);
    com.google.javascript.jscomp.CompilerInput var17 = new com.google.javascript.jscomp.CompilerInput(var12, false);
    java.io.PrintStream var18 = null;
    com.google.javascript.jscomp.Compiler var19 = new com.google.javascript.jscomp.Compiler(var18);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var21 = var20.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var22 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var19, var21, var22);
    java.lang.String var24 = var19.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var25 = null;
    com.google.javascript.jscomp.DefaultPassConfig var26 = new com.google.javascript.jscomp.DefaultPassConfig(var25);
    var19.setPassConfig((com.google.javascript.jscomp.PassConfig)var26);
    java.io.PrintStream var28 = null;
    com.google.javascript.jscomp.Compiler var29 = new com.google.javascript.jscomp.Compiler(var28);
    var29.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var32 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var33 = var32.getOriginalPath();
    com.google.javascript.rhino.Node var34 = var29.parse(var32);
    var32.setOriginalPath("{ }");
    com.google.javascript.rhino.Node var37 = var19.parse(var32);
    var17.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var19);
    com.google.javascript.jscomp.CompilerInput var39 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var17);
    var1.add(var17);
    com.google.javascript.jscomp.JSModule var42 = new com.google.javascript.jscomp.JSModule("(function (): ?|null)");
    java.io.PrintStream var43 = null;
    com.google.javascript.jscomp.Compiler var44 = new com.google.javascript.jscomp.Compiler(var43);
    var44.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var47 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var48 = var47.getOriginalPath();
    com.google.javascript.rhino.Node var49 = var44.parse(var47);
    var42.add(var47);
    int var51 = var42.getDepth();
    com.google.javascript.jscomp.JSModule var53 = new com.google.javascript.jscomp.JSModule("(function (): ?|null)");
    java.io.PrintStream var54 = null;
    com.google.javascript.jscomp.Compiler var55 = new com.google.javascript.jscomp.Compiler(var54);
    var55.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var58 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var59 = var58.getOriginalPath();
    com.google.javascript.rhino.Node var60 = var55.parse(var58);
    var53.add(var58);
    var42.addDependency(var53);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var17.setModule(var42);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + ""+ "'", var24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "hi!"+ "'", var59.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test315() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test315"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
    com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var6 = var5.getDirectives();
    var5.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.exprResult(var5);
    com.google.javascript.jscomp.CodingConvention.Bind var11 = var1.describeFunctionBind(var5);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var13 = var12.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var14 = new com.google.javascript.jscomp.ComposeWarningsGuard(var13);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.script(var13);
    boolean var16 = var1.isPrototypeAlias(var15);
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.Node var23 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var24 = var23.getDirectives();
    boolean var25 = var23.isThrow();
    boolean var27 = var23.getBooleanProp(1);
    boolean var28 = var23.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var29 = var18.createFunctionType(var19, var23);
    java.lang.Iterable var31 = var18.getTypesWithProperty("ERROR");
    java.lang.Iterable var33 = var18.getEachReferenceTypeWithProperty("ERROR");
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.jscomp.AbstractCompiler var37 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var38 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var39 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var41 = var39.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var42 = var38.getDirectedPredNodes(var41);
    com.google.javascript.jscomp.NodeTraversal.Callback var43 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var37, var42, var43);
    com.google.javascript.rhino.jstype.FunctionType var45 = var35.createFunctionType(var36, var42);
    java.lang.Iterable var46 = var45.getImplementedInterfaces();
    boolean var47 = var45.isStruct();
    java.lang.String var48 = var45.getDisplayName();
    com.google.javascript.jscomp.AbstractCompiler var49 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var53 = var51.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var54 = var50.getDirectedPredNodes(var53);
    com.google.javascript.jscomp.NodeTraversal.Callback var55 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var49, var54, var55);
    java.util.Map var57 = null;
    var1.defineDelegateProxyPrototypeProperties(var18, (com.google.javascript.rhino.jstype.StaticScope)var45, var54, var57);
    com.google.javascript.rhino.jstype.ObjectType var59 = var45.toObjectType();
    com.google.javascript.rhino.Node var60 = var45.getRootNode();
    java.lang.Iterable var61 = var45.getParameters();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.ObjectType var63 = var45.getTopMostDefiningType("function (): ?");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test316() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test316"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(100, 1, 10);
    com.google.javascript.rhino.Node var8 = var7.getLastSibling();
    boolean var9 = var7.isGetElem();
    var7.setWasEmptyNode(false);
    com.google.javascript.rhino.Node var12 = var3.useSourceInfoFromForTree(var7);
    com.google.javascript.rhino.Node[] var13 = new com.google.javascript.rhino.Node[] { var12};
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.arraylit(var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.paramList(var13);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test317() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test317"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
    com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var6 = var5.getDirectives();
    var5.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.exprResult(var5);
    com.google.javascript.jscomp.CodingConvention.Bind var11 = var1.describeFunctionBind(var5);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var13 = var12.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var14 = new com.google.javascript.jscomp.ComposeWarningsGuard(var13);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.script(var13);
    boolean var16 = var1.isPrototypeAlias(var15);
    java.lang.String var17 = var1.getGlobalObject();
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var25 = new com.google.javascript.rhino.Node(100, 1, 10);
    com.google.javascript.rhino.Node var26 = var25.getLastSibling();
    boolean var27 = var25.isGetElem();
    var25.setWasEmptyNode(false);
    com.google.javascript.rhino.Node var30 = var21.useSourceInfoFromForTree(var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var31 = var1.isVarArgsParameter(var30);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "window"+ "'", var17.equals("window"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test318() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test318"); }


    com.google.javascript.jscomp.AstValidator var0 = new com.google.javascript.jscomp.AstValidator();
    com.google.javascript.jscomp.CodingConvention var1 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var2 = new com.google.javascript.jscomp.GoogleCodingConvention(var1);
    com.google.javascript.jscomp.ClosureCodingConvention var3 = new com.google.javascript.jscomp.ClosureCodingConvention(var1);
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var11 = var10.getDirectives();
    boolean var12 = var10.isThrow();
    boolean var14 = var10.getBooleanProp(1);
    boolean var15 = var10.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var16 = var5.createFunctionType(var6, var10);
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.AbstractCompiler var20 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var22 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var24 = var22.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var25 = var21.getDirectedPredNodes(var24);
    com.google.javascript.jscomp.NodeTraversal.Callback var26 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var20, var25, var26);
    com.google.javascript.rhino.jstype.FunctionType var28 = var18.createFunctionType(var19, var25);
    com.google.javascript.rhino.ErrorReporter var30 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.jscomp.AbstractCompiler var33 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var37 = var35.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var38 = var34.getDirectedPredNodes(var37);
    com.google.javascript.jscomp.NodeTraversal.Callback var39 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var33, var38, var39);
    com.google.javascript.rhino.jstype.FunctionType var41 = var31.createFunctionType(var32, var38);
    com.google.javascript.rhino.Node var42 = null;
    boolean var43 = var28.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var41, var42);
    com.google.javascript.rhino.jstype.FunctionType var44 = var41.toMaybeFunctionType();
    boolean var45 = var41.hasCachedValues();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    com.google.javascript.rhino.ErrorReporter var48 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var48);
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.jscomp.AbstractCompiler var51 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var52 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var53 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var55 = var53.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var56 = var52.getDirectedPredNodes(var55);
    com.google.javascript.jscomp.NodeTraversal.Callback var57 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var51, var56, var57);
    com.google.javascript.rhino.jstype.FunctionType var59 = var49.createFunctionType(var50, var56);
    com.google.javascript.rhino.jstype.JSType var60 = var47.createNullableType((com.google.javascript.rhino.jstype.JSType)var59);
    boolean var61 = var41.canCastTo(var60);
    com.google.javascript.jscomp.CodingConvention.SubclassType var62 = null;
    var3.applySubclassRelationship(var16, var41, var62);
    boolean var65 = var3.isSuperClassReference("Node tree inequality:\nTree1:\nNOT\n    BITXOR 10\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NOT\n    BITXOR 10\n\n\nSubtree2: PARAM_LIST\n");
    com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.trueNode();
    com.google.javascript.rhino.Node var70 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var71 = var70.getDirectives();
    int var72 = var70.getChangeTime();
    boolean var73 = var70.isAssignAdd();
    java.lang.String var74 = var70.getSourceFileName();
    boolean var75 = var70.isContinue();
    boolean var76 = var70.isGetterDef();
    java.lang.String var77 = var3.extractClassNameIfRequire(var66, var70);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.validateExpression(var70);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);

  }

  public void test319() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test319"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setRecordFunctionInformation(true);
    boolean var3 = var0.isRemoveUnusedClassProperties();
    com.google.javascript.jscomp.CssRenamingMap var4 = null;
    var0.setCssRenamingMap(var4);
    var0.setOutputCharset("ERROR");
    var0.setCheckTypes(false);
    var0.setExternExportsPath("LABEL_NAME hi!\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test320() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test320"); }


    com.google.javascript.jscomp.AbstractCompiler var0 = null;
    com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
    com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
    java.lang.String var3 = var2.getSourceName();
    com.google.javascript.rhino.Node var4 = var2.getCurrentNode();
    java.lang.String var5 = var2.getSourceName();
    com.google.javascript.jscomp.Scope var6 = var2.getScope();
    int var7 = var2.getLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test321() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test321"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("2014/12/24 01:19");
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.returnNode(var2);
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.comma(var7, var11);
    boolean var13 = var11.isDebugger();
    var11.setSourceEncodedPositionForTree((-1));
    com.google.javascript.rhino.ErrorReporter var16 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var19 = var18.getEdges();
    com.google.javascript.jscomp.deps.SortedDependencies var20 = new com.google.javascript.jscomp.deps.SortedDependencies(var19);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var22 = var21.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var23 = new com.google.javascript.jscomp.ComposeWarningsGuard(var22);
    com.google.javascript.jscomp.JSModuleGraph var24 = new com.google.javascript.jscomp.JSModuleGraph(var22);
    java.util.List var25 = var20.getSortedDependenciesOf(var22);
    com.google.javascript.rhino.Node var26 = var17.createParametersWithVarArgs(var25);
    java.lang.String var27 = var26.getQualifiedName();
    com.google.javascript.rhino.Node var31 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var32 = var31.getDirectives();
    boolean var33 = var31.isThrow();
    boolean var35 = var31.getBooleanProp(1);
    boolean var36 = var31.isQualifiedName();
    boolean var37 = var31.isStringKey();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var38 = new com.google.javascript.rhino.Node(100, var3, var11, var26, var31);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test322() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test322"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.breakNode();
    boolean var1 = var0.isDec();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test323() {}
//   public void test323() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test323"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("hi!");
//     var1.setOptionalArg(false);
//     int var4 = var1.getCharno();
//     com.google.javascript.rhino.Node.SideEffectFlags var5 = null;
//     var1.setSideEffectFlags(var5);
// 
//   }

  public void test324() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test324"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    int var5 = var3.getChangeTime();
    com.google.javascript.rhino.Node var9 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var10 = var9.getDirectives();
    boolean var11 = var9.isThrow();
    var9.removeProp(1);
    boolean var14 = var3.isEquivalentToTyped(var9);
    boolean var15 = var3.isNumber();
    boolean var16 = var3.isContinue();
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var22 = var21.getDirectives();
    var21.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.exprResult(var21);
    java.lang.Iterable var27 = var26.siblings();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.Node.newString("hi!", 1, (-1));
    var26.addChildToBack(var31);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.Node.newString("hi!", 10, 0);
    java.lang.Object var38 = var36.getProp(1);
    com.google.javascript.rhino.Node var41 = new com.google.javascript.rhino.Node(100, var26, var36, 1, 100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.regexp(var3, var41);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);

  }

  public void test325() {}
//   public void test325() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test325"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("(function (): ?|null)");
//     java.io.PrintStream var2 = null;
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler(var2);
//     var3.reportCodeChange();
//     com.google.javascript.jscomp.SourceFile var6 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
//     java.lang.String var7 = var6.getOriginalPath();
//     com.google.javascript.rhino.Node var8 = var3.parse(var6);
//     var1.add(var6);
//     java.util.List var10 = var1.getRequires();
//     com.google.javascript.jscomp.SourceFile var12 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
//     java.lang.String var13 = var12.getOriginalPath();
//     int var15 = var12.getColumnOfOffset(10);
//     com.google.javascript.jscomp.CompilerInput var17 = new com.google.javascript.jscomp.CompilerInput(var12, false);
//     java.io.PrintStream var18 = null;
//     com.google.javascript.jscomp.Compiler var19 = new com.google.javascript.jscomp.Compiler(var18);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var21 = var20.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var22 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var19, var21, var22);
//     java.lang.String var24 = var19.getAstDotGraph();
//     com.google.javascript.jscomp.CompilerOptions var25 = null;
//     com.google.javascript.jscomp.DefaultPassConfig var26 = new com.google.javascript.jscomp.DefaultPassConfig(var25);
//     var19.setPassConfig((com.google.javascript.jscomp.PassConfig)var26);
//     java.io.PrintStream var28 = null;
//     com.google.javascript.jscomp.Compiler var29 = new com.google.javascript.jscomp.Compiler(var28);
//     var29.reportCodeChange();
//     com.google.javascript.jscomp.SourceFile var32 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
//     java.lang.String var33 = var32.getOriginalPath();
//     com.google.javascript.rhino.Node var34 = var29.parse(var32);
//     var32.setOriginalPath("{ }");
//     com.google.javascript.rhino.Node var37 = var19.parse(var32);
//     var17.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var19);
//     com.google.javascript.jscomp.CompilerInput var39 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var17);
//     var1.add(var17);
//     boolean var42 = var1.removeByName("goog.abstractMethod");
//     com.google.javascript.jscomp.CompilerInput var43 = null;
//     var1.add(var43);
// 
//   }

  public void test326() {}
//   public void test326() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test326"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setNameReferenceReportPath("");
//     var0.setSyntheticBlockEndMarker("hi!");
//     com.google.javascript.jscomp.VariableMap var5 = null;
//     var0.setInputAnonymousFunctionNamingMap(var5);
//     com.google.javascript.jscomp.CompilerOptions.Reach var7 = null;
//     var0.setRemoveUnusedVariable(var7);
// 
//   }

  public void test327() {}
//   public void test327() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test327"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
//     boolean var3 = var2.hasScope();
//     java.lang.String var4 = var2.getSourceName();
//     com.google.javascript.jscomp.JSModule var5 = var2.getModule();
// 
//   }

  public void test328() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test328"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.empty();
    com.google.javascript.rhino.Node var1 = var0.cloneTree();
    com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var6 = var5.getDirectives();
    var5.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.not(var5);
    com.google.javascript.rhino.jstype.StaticSourceFile var11 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.propdef(var0, var10);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test329() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test329"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
    com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.Node var9 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var10 = var9.getDirectives();
    boolean var11 = var9.isThrow();
    boolean var13 = var9.getBooleanProp(1);
    boolean var14 = var9.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var15 = var4.createFunctionType(var5, var9);
    com.google.javascript.rhino.ErrorReporter var16 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.jscomp.AbstractCompiler var19 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var23 = var21.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var24 = var20.getDirectedPredNodes(var23);
    com.google.javascript.jscomp.NodeTraversal.Callback var25 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var19, var24, var25);
    com.google.javascript.rhino.jstype.FunctionType var27 = var17.createFunctionType(var18, var24);
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.jscomp.AbstractCompiler var32 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var36 = var34.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var37 = var33.getDirectedPredNodes(var36);
    com.google.javascript.jscomp.NodeTraversal.Callback var38 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var32, var37, var38);
    com.google.javascript.rhino.jstype.FunctionType var40 = var30.createFunctionType(var31, var37);
    com.google.javascript.rhino.Node var41 = null;
    boolean var42 = var27.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var40, var41);
    com.google.javascript.rhino.jstype.FunctionType var43 = var40.toMaybeFunctionType();
    boolean var44 = var40.hasCachedValues();
    com.google.javascript.rhino.ErrorReporter var45 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.jscomp.AbstractCompiler var50 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var52 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var54 = var52.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var55 = var51.getDirectedPredNodes(var54);
    com.google.javascript.jscomp.NodeTraversal.Callback var56 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var50, var55, var56);
    com.google.javascript.rhino.jstype.FunctionType var58 = var48.createFunctionType(var49, var55);
    com.google.javascript.rhino.jstype.JSType var59 = var46.createNullableType((com.google.javascript.rhino.jstype.JSType)var58);
    boolean var60 = var40.canCastTo(var59);
    com.google.javascript.jscomp.CodingConvention.SubclassType var61 = null;
    var2.applySubclassRelationship(var15, var40, var61);
    boolean var64 = var2.isSuperClassReference("Node tree inequality:\nTree1:\nNOT\n    BITXOR 10\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NOT\n    BITXOR 10\n\n\nSubtree2: PARAM_LIST\n");
    com.google.javascript.rhino.Node var68 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var69 = var68.getDirectives();
    var68.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var73 = com.google.javascript.rhino.IR.not(var68);
    com.google.javascript.rhino.jstype.StaticSourceFile var74 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var73);
    com.google.javascript.rhino.Node var78 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var79 = var78.getDirectives();
    int var80 = var78.getChangeTime();
    boolean var81 = var78.isWith();
    com.google.javascript.rhino.Node var82 = com.google.javascript.rhino.IR.add(var73, var78);
    java.lang.Iterable var83 = var78.siblings();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var84 = var2.isInlinableFunction(var78);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test330() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test330"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var3 = var2.getEdges();
    com.google.javascript.jscomp.deps.SortedDependencies var4 = new com.google.javascript.jscomp.deps.SortedDependencies(var3);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var6 = var5.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var7 = new com.google.javascript.jscomp.ComposeWarningsGuard(var6);
    com.google.javascript.jscomp.JSModuleGraph var8 = new com.google.javascript.jscomp.JSModuleGraph(var6);
    java.util.List var9 = var4.getSortedDependenciesOf(var6);
    com.google.javascript.rhino.Node var10 = var1.createParametersWithVarArgs(var9);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    com.google.javascript.rhino.Node var17 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var18 = var17.getDirectives();
    boolean var19 = var17.isThrow();
    boolean var21 = var17.getBooleanProp(1);
    boolean var22 = var17.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var23 = var12.createFunctionType(var13, var17);
    boolean var24 = var23.matchesNumberContext();
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.jscomp.AbstractCompiler var28 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var29 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var32 = var30.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var33 = var29.getDirectedPredNodes(var32);
    com.google.javascript.jscomp.NodeTraversal.Callback var34 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var28, var33, var34);
    com.google.javascript.rhino.jstype.FunctionType var36 = var26.createFunctionType(var27, var33);
    boolean var38 = var26.isForwardDeclaredType("ERROR");
    com.google.javascript.rhino.JSDocInfo var39 = null;
    com.google.javascript.rhino.jstype.ObjectType var40 = var26.createAnonymousObjectType(var39);
    com.google.javascript.jscomp.CodingConvention var42 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var43 = new com.google.javascript.jscomp.GoogleCodingConvention(var42);
    com.google.javascript.rhino.Node var47 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var48 = var47.getDirectives();
    var47.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.exprResult(var47);
    com.google.javascript.jscomp.CodingConvention.Bind var53 = var43.describeFunctionBind(var47);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var54 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var55 = var54.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var56 = new com.google.javascript.jscomp.ComposeWarningsGuard(var55);
    com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.IR.script(var55);
    boolean var58 = var43.isPrototypeAlias(var57);
    com.google.javascript.rhino.ErrorReporter var59 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var59);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    com.google.javascript.jscomp.AbstractCompiler var62 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var63 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var64 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var66 = var64.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var67 = var63.getDirectedPredNodes(var66);
    com.google.javascript.jscomp.NodeTraversal.Callback var68 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var62, var67, var68);
    com.google.javascript.rhino.jstype.FunctionType var70 = var60.createFunctionType(var61, var67);
    com.google.javascript.rhino.ErrorReporter var72 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var73 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var72);
    com.google.javascript.rhino.jstype.JSType var74 = null;
    com.google.javascript.jscomp.AbstractCompiler var75 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var76 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var77 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var79 = var77.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var80 = var76.getDirectedPredNodes(var79);
    com.google.javascript.jscomp.NodeTraversal.Callback var81 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var75, var80, var81);
    com.google.javascript.rhino.jstype.FunctionType var83 = var73.createFunctionType(var74, var80);
    com.google.javascript.rhino.Node var84 = null;
    boolean var85 = var70.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var83, var84);
    boolean var86 = var70.isReturnTypeInferred();
    com.google.javascript.rhino.jstype.ObjectType var87 = var26.createObjectType("(function (): ?|null)", var57, (com.google.javascript.rhino.jstype.ObjectType)var70);
    boolean var88 = var1.resetImplicitPrototype((com.google.javascript.rhino.jstype.JSType)var23, var87);
    java.lang.Iterable var90 = var1.getEachReferenceTypeWithProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test331() {}
//   public void test331() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test331"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.TemplateTypeMap var1 = null;
//     com.google.javascript.rhino.jstype.TemplateTypeMapReplacer var2 = new com.google.javascript.rhino.jstype.TemplateTypeMapReplacer(var0, var1);
//     com.google.javascript.rhino.jstype.EnumElementType var3 = null;
//     com.google.javascript.rhino.jstype.JSType var4 = var2.caseEnumElementType(var3);
//     com.google.javascript.rhino.jstype.JSType var5 = var2.caseAllType();
// 
//   }

  public void test332() {}
//   public void test332() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test332"); }
// 
// 
//     com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var4 = var3.getDirectives();
//     boolean var5 = var3.isThrow();
//     boolean var7 = var3.getBooleanProp(1);
//     boolean var8 = var3.isQualifiedName();
//     var3.putProp(10, (java.lang.Object)(short)0);
//     boolean var13 = var3.getBooleanProp(1);
//     com.google.javascript.rhino.Node.SideEffectFlags var14 = null;
//     var3.setSideEffectFlags(var14);
// 
//   }

  public void test333() {}
//   public void test333() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test333"); }
// 
// 
//     com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(100, 1, 10);
//     com.google.javascript.rhino.Node var8 = var7.getLastSibling();
//     boolean var9 = var7.isGetElem();
//     var7.setWasEmptyNode(false);
//     com.google.javascript.rhino.Node var12 = var3.useSourceInfoFromForTree(var7);
//     com.google.javascript.rhino.Node[] var13 = new com.google.javascript.rhino.Node[] { var12};
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.arraylit(var13);
//     com.google.javascript.rhino.Node.SideEffectFlags var15 = null;
//     var14.setSideEffectFlags(var15);
// 
//   }

  public void test334() {}
//   public void test334() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test334"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
//     double var6 = var1.getProgress();
//     com.google.javascript.jscomp.DiagnosticType var12 = com.google.javascript.jscomp.DiagnosticType.disabled("LABEL_NAME hi!\n", "LABEL_NAME hi!\n");
//     java.lang.String[] var14 = new java.lang.String[] { "Node tree inequality:\nTree1:\nNOT\n    BITXOR 10\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NOT\n    BITXOR 10\n\n\nSubtree2: PARAM_LIST\n"};
//     com.google.javascript.jscomp.JSError var15 = com.google.javascript.jscomp.JSError.make("", 0, 0, var12, var14);
//     var1.report(var15);
//     com.google.javascript.jscomp.CheckLevel var17 = null;
//     java.io.PrintStream var18 = null;
//     com.google.javascript.jscomp.Compiler var19 = new com.google.javascript.jscomp.Compiler(var18);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var21 = var20.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var22 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var19, var21, var22);
//     double var24 = var19.getProgress();
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var25 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var26 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var19, var25);
//     java.lang.String var27 = var15.format(var17, (com.google.javascript.jscomp.MessageFormatter)var26);
// 
//   }

  public void test335() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test335"); }


    com.google.javascript.rhino.Node var4 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.comma(var4, var8);
    boolean var10 = var9.isNoSideEffectsCall();
    com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "ERROR");
    java.lang.String[] var15 = new java.lang.String[] { "hi!"};
    com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", var9, var13, var15);
    int var17 = var9.getCharno();
    com.google.javascript.rhino.ErrorReporter var18 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18);
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    com.google.javascript.jscomp.AbstractCompiler var23 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var24 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var25 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var27 = var25.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var28 = var24.getDirectedPredNodes(var27);
    com.google.javascript.jscomp.NodeTraversal.Callback var29 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var23, var28, var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var21.createFunctionType(var22, var28);
    com.google.javascript.rhino.jstype.JSType var32 = var19.createNullableType((com.google.javascript.rhino.jstype.JSType)var31);
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33);
    com.google.javascript.rhino.jstype.JSType var35 = null;
    com.google.javascript.rhino.Node var39 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var40 = var39.getDirectives();
    boolean var41 = var39.isThrow();
    boolean var43 = var39.getBooleanProp(1);
    boolean var44 = var39.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var45 = var34.createFunctionType(var35, var39);
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var35};
    com.google.javascript.rhino.Node var47 = var19.createParameters(var46);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.var(var9, var47);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test336() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test336"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var2 = var1.getOriginalPath();
    int var4 = var1.getColumnOfOffset(10);
    com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var1, false);
    java.io.PrintStream var7 = null;
    com.google.javascript.jscomp.Compiler var8 = new com.google.javascript.jscomp.Compiler(var7);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var9 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var10 = var9.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var11 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var8, var10, var11);
    java.lang.String var13 = var8.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var14 = null;
    com.google.javascript.jscomp.DefaultPassConfig var15 = new com.google.javascript.jscomp.DefaultPassConfig(var14);
    var8.setPassConfig((com.google.javascript.jscomp.PassConfig)var15);
    java.io.PrintStream var17 = null;
    com.google.javascript.jscomp.Compiler var18 = new com.google.javascript.jscomp.Compiler(var17);
    var18.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var21 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var22 = var21.getOriginalPath();
    com.google.javascript.rhino.Node var23 = var18.parse(var21);
    var21.setOriginalPath("{ }");
    com.google.javascript.rhino.Node var26 = var8.parse(var21);
    var6.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var8);
    com.google.javascript.rhino.InputId var28 = var6.getInputId();
    java.io.PrintStream var29 = null;
    com.google.javascript.jscomp.Compiler var30 = new com.google.javascript.jscomp.Compiler(var29);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var31 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var32 = var31.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var33 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var30, var32, var33);
    java.lang.String var35 = var30.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var36 = null;
    com.google.javascript.jscomp.DefaultPassConfig var37 = new com.google.javascript.jscomp.DefaultPassConfig(var36);
    var30.setPassConfig((com.google.javascript.jscomp.PassConfig)var37);
    java.io.PrintStream var39 = null;
    com.google.javascript.jscomp.Compiler var40 = new com.google.javascript.jscomp.Compiler(var39);
    var40.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var43 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var44 = var43.getOriginalPath();
    com.google.javascript.rhino.Node var45 = var40.parse(var43);
    var43.setOriginalPath("{ }");
    com.google.javascript.rhino.Node var48 = var30.parse(var43);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var49 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var51 = var49.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var52 = var49.getGraphvizEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var53 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var30, var52, var53);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var55 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var56 = var55.getEdges();
    com.google.javascript.jscomp.deps.SortedDependencies var57 = new com.google.javascript.jscomp.deps.SortedDependencies(var56);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var58 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var59 = var58.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var60 = new com.google.javascript.jscomp.ComposeWarningsGuard(var59);
    com.google.javascript.jscomp.JSModuleGraph var61 = new com.google.javascript.jscomp.JSModuleGraph(var59);
    java.util.List var62 = var57.getSortedDependenciesOf(var59);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var63 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var64 = var63.getEdges();
    com.google.javascript.jscomp.CompilerOptions var65 = new com.google.javascript.jscomp.CompilerOptions();
    var65.setNameReferenceReportPath("");
    var65.setSyntheticBlockEndMarker("hi!");
    var65.setTightenTypes(true);
    java.util.Set var72 = null;
    var65.setCssRenamingWhitelist(var72);
    var65.setOptimizeArgumentsArray(true);
    com.google.javascript.jscomp.Result var76 = var30.<com.google.javascript.jscomp.SourceFile>compileModules(var59, var64, var65);
    boolean var77 = var28.equals((java.lang.Object)var65);
    var65.setFoldConstants(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ""+ "'", var13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "hi!"+ "'", var44.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);

  }

  public void test337() {}
//   public void test337() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test337"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     double var3 = var2.getTypedPercent();
//     com.google.javascript.jscomp.CheckLevel var4 = null;
//     com.google.javascript.rhino.Node var9 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.comma(var9, var13);
//     boolean var15 = var14.isNoSideEffectsCall();
//     com.google.javascript.jscomp.DiagnosticType var18 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "ERROR");
//     java.lang.String[] var20 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var21 = com.google.javascript.jscomp.JSError.make("", var14, var18, var20);
//     int var22 = var21.getNodeLength();
//     int var23 = var21.getLineNumber();
//     var2.println(var4, var21);
// 
//   }

  public void test338() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test338"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var3 = var2.getEdges();
    com.google.javascript.jscomp.deps.SortedDependencies var4 = new com.google.javascript.jscomp.deps.SortedDependencies(var3);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var6 = var5.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var7 = new com.google.javascript.jscomp.ComposeWarningsGuard(var6);
    com.google.javascript.jscomp.JSModuleGraph var8 = new com.google.javascript.jscomp.JSModuleGraph(var6);
    java.util.List var9 = var4.getSortedDependenciesOf(var6);
    com.google.javascript.rhino.Node var10 = var1.createParametersWithVarArgs(var9);
    com.google.common.collect.ImmutableList var11 = null;
    com.google.common.collect.ImmutableList var12 = null;
    com.google.javascript.rhino.jstype.TemplateTypeMap var13 = var1.createTemplateTypeMap(var11, var12);
    java.lang.String var14 = var13.toString();
    boolean var15 = var13.isEmpty();
    com.google.javascript.rhino.jstype.TemplateType var17 = var13.getTemplateTypeKeyByName("LABEL_NAME hi!\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "{ }"+ "'", var14.equals("{ }"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test339() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test339"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var3 = var2.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
    java.lang.String var6 = var1.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var7 = null;
    com.google.javascript.jscomp.DefaultPassConfig var8 = new com.google.javascript.jscomp.DefaultPassConfig(var7);
    var1.setPassConfig((com.google.javascript.jscomp.PassConfig)var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var11 = var10.getEdges();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var13 = var12.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var14 = new com.google.javascript.jscomp.ComposeWarningsGuard(var13);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.script(var13);
    com.google.javascript.jscomp.CompilerOptions var16 = new com.google.javascript.jscomp.CompilerOptions();
    var16.setPropertyAffinity(false);
    com.google.javascript.jscomp.CheckLevel var19 = null;
    var16.setBrokenClosureRequiresLevel(var19);
    var1.<com.google.javascript.jscomp.SourceFile>initModules(var11, var13, var16);
    com.google.javascript.jscomp.JSError[] var22 = var1.getMessages();
    com.google.javascript.jscomp.type.ReverseAbstractInterpreter var23 = null;
    com.google.javascript.jscomp.CodingConvention var24 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var25 = new com.google.javascript.jscomp.GoogleCodingConvention(var24);
    com.google.javascript.rhino.Node var29 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var30 = var29.getDirectives();
    var29.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.exprResult(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var35 = var25.describeFunctionBind(var29);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var36 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var37 = var36.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var38 = new com.google.javascript.jscomp.ComposeWarningsGuard(var37);
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.script(var37);
    boolean var40 = var25.isPrototypeAlias(var39);
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.rhino.Node var47 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var48 = var47.getDirectives();
    boolean var49 = var47.isThrow();
    boolean var51 = var47.getBooleanProp(1);
    boolean var52 = var47.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var53 = var42.createFunctionType(var43, var47);
    java.lang.Iterable var55 = var42.getTypesWithProperty("ERROR");
    java.lang.Iterable var57 = var42.getEachReferenceTypeWithProperty("ERROR");
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var60 = null;
    com.google.javascript.jscomp.AbstractCompiler var61 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var62 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var63 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var65 = var63.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var66 = var62.getDirectedPredNodes(var65);
    com.google.javascript.jscomp.NodeTraversal.Callback var67 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var61, var66, var67);
    com.google.javascript.rhino.jstype.FunctionType var69 = var59.createFunctionType(var60, var66);
    java.lang.Iterable var70 = var69.getImplementedInterfaces();
    boolean var71 = var69.isStruct();
    java.lang.String var72 = var69.getDisplayName();
    com.google.javascript.jscomp.AbstractCompiler var73 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var74 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var75 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var77 = var75.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var78 = var74.getDirectedPredNodes(var77);
    com.google.javascript.jscomp.NodeTraversal.Callback var79 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var73, var78, var79);
    java.util.Map var81 = null;
    var25.defineDelegateProxyPrototypeProperties(var42, (com.google.javascript.rhino.jstype.StaticScope)var69, var78, var81);
    com.google.javascript.jscomp.CheckLevel var83 = null;
    com.google.javascript.jscomp.TypeCheck var84 = new com.google.javascript.jscomp.TypeCheck((com.google.javascript.jscomp.AbstractCompiler)var1, var23, var42, var83);
    com.google.javascript.jscomp.AbstractCompiler var85 = null;
    com.google.javascript.jscomp.NodeTraversal.Callback var86 = null;
    com.google.javascript.jscomp.NodeTraversal var87 = new com.google.javascript.jscomp.NodeTraversal(var85, var86);
    com.google.javascript.rhino.Node var91 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var92 = var91.getDirectives();
    int var93 = var91.getChangeTime();
    boolean var94 = var91.isAssignAdd();
    boolean var95 = var91.isGetterDef();
    java.lang.String var96 = var91.toString();
    com.google.javascript.rhino.Node var97 = com.google.javascript.rhino.IR.empty();
    com.google.javascript.rhino.Node var98 = var97.cloneTree();
    boolean var99 = var84.shouldTraverse(var87, var91, var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "BITXOR 10"+ "'", var96.equals("BITXOR 10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == true);

  }

  public void test340() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test340"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
    com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var6 = var5.getDirectives();
    var5.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.exprResult(var5);
    com.google.javascript.jscomp.CodingConvention.Bind var11 = var1.describeFunctionBind(var5);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var13 = var12.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var14 = new com.google.javascript.jscomp.ComposeWarningsGuard(var13);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.script(var13);
    boolean var16 = var1.isPrototypeAlias(var15);
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.Node var23 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var24 = var23.getDirectives();
    boolean var25 = var23.isThrow();
    boolean var27 = var23.getBooleanProp(1);
    boolean var28 = var23.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var29 = var18.createFunctionType(var19, var23);
    java.lang.Iterable var31 = var18.getTypesWithProperty("ERROR");
    java.lang.Iterable var33 = var18.getEachReferenceTypeWithProperty("ERROR");
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.jscomp.AbstractCompiler var37 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var38 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var39 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var41 = var39.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var42 = var38.getDirectedPredNodes(var41);
    com.google.javascript.jscomp.NodeTraversal.Callback var43 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var37, var42, var43);
    com.google.javascript.rhino.jstype.FunctionType var45 = var35.createFunctionType(var36, var42);
    java.lang.Iterable var46 = var45.getImplementedInterfaces();
    boolean var47 = var45.isStruct();
    java.lang.String var48 = var45.getDisplayName();
    com.google.javascript.jscomp.AbstractCompiler var49 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var53 = var51.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var54 = var50.getDirectedPredNodes(var53);
    com.google.javascript.jscomp.NodeTraversal.Callback var55 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var49, var54, var55);
    java.util.Map var57 = null;
    var1.defineDelegateProxyPrototypeProperties(var18, (com.google.javascript.rhino.jstype.StaticScope)var45, var54, var57);
    java.util.Collection var59 = var1.getIndirectlyDeclaredProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test341() {}
//   public void test341() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test341"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.ModificationVisitor var1 = new com.google.javascript.rhino.jstype.ModificationVisitor(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = var1.caseUnknownType();
// 
//   }

  public void test342() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test342"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var2 = var1.getOriginalPath();
    int var4 = var1.getColumnOfOffset(10);
    com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var1, false);
    java.io.PrintStream var7 = null;
    com.google.javascript.jscomp.Compiler var8 = new com.google.javascript.jscomp.Compiler(var7);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var9 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var10 = var9.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var11 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var8, var10, var11);
    java.lang.String var13 = var8.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var14 = null;
    com.google.javascript.jscomp.DefaultPassConfig var15 = new com.google.javascript.jscomp.DefaultPassConfig(var14);
    var8.setPassConfig((com.google.javascript.jscomp.PassConfig)var15);
    java.io.PrintStream var17 = null;
    com.google.javascript.jscomp.Compiler var18 = new com.google.javascript.jscomp.Compiler(var17);
    var18.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var21 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var22 = var21.getOriginalPath();
    com.google.javascript.rhino.Node var23 = var18.parse(var21);
    var21.setOriginalPath("{ }");
    com.google.javascript.rhino.Node var26 = var8.parse(var21);
    var6.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var8);
    java.io.PrintStream var28 = null;
    com.google.javascript.jscomp.Compiler var29 = new com.google.javascript.jscomp.Compiler(var28);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var31 = var30.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var32 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var29, var31, var32);
    java.lang.String var34 = var29.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var35 = null;
    com.google.javascript.jscomp.DefaultPassConfig var36 = new com.google.javascript.jscomp.DefaultPassConfig(var35);
    var29.setPassConfig((com.google.javascript.jscomp.PassConfig)var36);
    java.io.PrintStream var38 = null;
    com.google.javascript.jscomp.Compiler var39 = new com.google.javascript.jscomp.Compiler(var38);
    var39.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var42 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var43 = var42.getOriginalPath();
    com.google.javascript.rhino.Node var44 = var39.parse(var42);
    var42.setOriginalPath("{ }");
    com.google.javascript.rhino.Node var47 = var29.parse(var42);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var48 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var50 = var48.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var51 = var48.getGraphvizEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var52 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var29, var51, var52);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var54 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var55 = var54.getEdges();
    com.google.javascript.jscomp.deps.SortedDependencies var56 = new com.google.javascript.jscomp.deps.SortedDependencies(var55);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var57 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var58 = var57.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var59 = new com.google.javascript.jscomp.ComposeWarningsGuard(var58);
    com.google.javascript.jscomp.JSModuleGraph var60 = new com.google.javascript.jscomp.JSModuleGraph(var58);
    java.util.List var61 = var56.getSortedDependenciesOf(var58);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var62 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var63 = var62.getEdges();
    com.google.javascript.jscomp.CompilerOptions var64 = new com.google.javascript.jscomp.CompilerOptions();
    var64.setNameReferenceReportPath("");
    var64.setSyntheticBlockEndMarker("hi!");
    var64.setTightenTypes(true);
    java.util.Set var71 = null;
    var64.setCssRenamingWhitelist(var71);
    var64.setOptimizeArgumentsArray(true);
    com.google.javascript.jscomp.Result var75 = var29.<com.google.javascript.jscomp.SourceFile>compileModules(var58, var63, var64);
    com.google.javascript.rhino.Node var76 = var6.getAstRoot((com.google.javascript.jscomp.AbstractCompiler)var29);
    com.google.javascript.rhino.Node var80 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var84 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var85 = com.google.javascript.rhino.IR.comma(var80, var84);
    boolean var86 = var84.isUnscopedQualifiedName();
    com.google.javascript.rhino.Node var90 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var91 = var90.getDirectives();
    int var92 = var90.getChangeTime();
    boolean var93 = var90.isAssignAdd();
    com.google.javascript.rhino.Node var94 = var84.clonePropsFrom(var90);
    boolean var95 = var94.isObjectLit();
    boolean var96 = var94.isSetterDef();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var97 = com.google.javascript.rhino.IR.doNode(var76, var94);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ""+ "'", var13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + ""+ "'", var34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);

  }

  public void test343() {}
//   public void test343() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test343"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = null;
//     com.google.javascript.jscomp.AbstractCompiler var3 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var5.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var8 = var4.getDirectedPredNodes(var7);
//     com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var3, var8, var9);
//     com.google.javascript.rhino.jstype.FunctionType var11 = var1.createFunctionType(var2, var8);
//     java.util.Set var12 = var11.getOwnPropertyNames();
//     var11.setDict();
//     com.google.javascript.rhino.ErrorReporter var14 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     com.google.javascript.rhino.Node var20 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var21 = var20.getDirectives();
//     boolean var22 = var20.isThrow();
//     boolean var24 = var20.getBooleanProp(1);
//     boolean var25 = var20.isQualifiedName();
//     com.google.javascript.rhino.jstype.FunctionType var26 = var15.createFunctionType(var16, var20);
//     boolean var27 = var26.matchesNumberContext();
//     com.google.javascript.rhino.jstype.JSType.TypePair var28 = var11.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType)var26);
//     com.google.javascript.rhino.jstype.FunctionType var29 = null;
//     boolean var30 = var11.hasEqualCallType(var29);
// 
//   }

  public void test344() {}
//   public void test344() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test344"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithEdgeAnnotations();
//     java.io.PrintStream var1 = null;
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler(var1);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var4 = var3.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var2, var4, var5);
//     double var7 = var2.getProgress();
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var8 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var9 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var2, var8);
//     java.util.List var10 = var0.getNeighborNodes((java.lang.Object)var8);
// 
//   }

  public void test345() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test345"); }


    com.google.javascript.rhino.Node var1 = new com.google.javascript.rhino.Node(0);
    boolean var2 = var1.mayMutateArguments();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test346() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test346"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setNameReferenceReportPath("");
    var0.setSyntheticBlockEndMarker("hi!");
    var0.setProtectHiddenSideEffects(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var7 = var0.getTweakProcessing();
    java.lang.String var8 = var7.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "OFF"+ "'", var8.equals("OFF"));

  }

  public void test347() {}
//   public void test347() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test347"); }
// 
// 
//     java.lang.Class var0 = null;
//     java.lang.Enum var2 = java.lang.Enum.<java.lang.Enum>valueOf(var0, "hi!");
// 
//   }

  public void test348() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test348"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setNameReferenceReportPath("");
    var0.setSyntheticBlockEndMarker("hi!");
    var0.setTightenTypes(true);
    var0.setDefineToBooleanLiteral("", false);
    com.google.javascript.jscomp.CheckLevel var10 = null;
    var0.setAggressiveVarCheck(var10);
    com.google.javascript.jscomp.CompilerOptions.TracerMode var12 = var0.getTracerMode();
    com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
    var13.setPropertyAffinity(false);
    com.google.javascript.jscomp.CheckLevel var16 = null;
    var13.setBrokenClosureRequiresLevel(var16);
    var13.setOptimizeParameters(false);
    var13.setInlineFunctions(true);
    var13.setOptimizeReturns(false);
    var13.setPreferSingleQuotes(false);
    var13.setClosurePass(false);
    var13.setRenamePrefixNamespace("Object#Element");
    boolean var30 = var12.equals((java.lang.Object)"Object#Element");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test349() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test349"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.jscomp.AbstractCompiler var3 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var5.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var8 = var4.getDirectedPredNodes(var7);
    com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var3, var8, var9);
    com.google.javascript.rhino.jstype.FunctionType var11 = var1.createFunctionType(var2, var8);
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.AbstractCompiler var16 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var20 = var18.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var21 = var17.getDirectedPredNodes(var20);
    com.google.javascript.jscomp.NodeTraversal.Callback var22 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var16, var21, var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var14.createFunctionType(var15, var21);
    com.google.javascript.rhino.Node var25 = null;
    boolean var26 = var11.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var24, var25);
    com.google.javascript.rhino.Node var27 = var11.getParametersNode();
    boolean var28 = var27.isThrow();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.Node.newString("hi!");
    com.google.javascript.rhino.Node var34 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var35 = var34.getDirectives();
    int var36 = var34.getChangeTime();
    boolean var37 = var34.isAssignAdd();
    boolean var38 = var34.isGetterDef();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var27.addChildrenAfter(var30, var34);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test350() {}
//   public void test350() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test350"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
//     com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
//     com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
//     com.google.javascript.rhino.ErrorReporter var3 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.rhino.Node var9 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var10 = var9.getDirectives();
//     boolean var11 = var9.isThrow();
//     boolean var13 = var9.getBooleanProp(1);
//     boolean var14 = var9.isQualifiedName();
//     com.google.javascript.rhino.jstype.FunctionType var15 = var4.createFunctionType(var5, var9);
//     com.google.javascript.rhino.ErrorReporter var16 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
//     com.google.javascript.rhino.jstype.JSType var18 = null;
//     com.google.javascript.jscomp.AbstractCompiler var19 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var23 = var21.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var24 = var20.getDirectedPredNodes(var23);
//     com.google.javascript.jscomp.NodeTraversal.Callback var25 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var19, var24, var25);
//     com.google.javascript.rhino.jstype.FunctionType var27 = var17.createFunctionType(var18, var24);
//     com.google.javascript.rhino.ErrorReporter var29 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     com.google.javascript.jscomp.AbstractCompiler var32 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var36 = var34.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var37 = var33.getDirectedPredNodes(var36);
//     com.google.javascript.jscomp.NodeTraversal.Callback var38 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var32, var37, var38);
//     com.google.javascript.rhino.jstype.FunctionType var40 = var30.createFunctionType(var31, var37);
//     com.google.javascript.rhino.Node var41 = null;
//     boolean var42 = var27.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var40, var41);
//     com.google.javascript.rhino.jstype.FunctionType var43 = var40.toMaybeFunctionType();
//     boolean var44 = var40.hasCachedValues();
//     com.google.javascript.rhino.ErrorReporter var45 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
//     com.google.javascript.rhino.ErrorReporter var47 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
//     com.google.javascript.rhino.jstype.JSType var49 = null;
//     com.google.javascript.jscomp.AbstractCompiler var50 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var52 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var54 = var52.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var55 = var51.getDirectedPredNodes(var54);
//     com.google.javascript.jscomp.NodeTraversal.Callback var56 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var50, var55, var56);
//     com.google.javascript.rhino.jstype.FunctionType var58 = var48.createFunctionType(var49, var55);
//     com.google.javascript.rhino.jstype.JSType var59 = var46.createNullableType((com.google.javascript.rhino.jstype.JSType)var58);
//     boolean var60 = var40.canCastTo(var59);
//     com.google.javascript.jscomp.CodingConvention.SubclassType var61 = null;
//     var2.applySubclassRelationship(var15, var40, var61);
//     java.lang.String var63 = var2.getExportSymbolFunction();
//     com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.Node.newString("hi!", 10, 0);
//     java.lang.Object var69 = var67.getProp(1);
//     com.google.javascript.jscomp.CodingConvention.SubclassRelationship var70 = var2.getClassesDefinedByCall(var67);
// 
//   }

  public void test351() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test351"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.jscomp.AbstractCompiler var5 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var6 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var7 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var9 = var7.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var10 = var6.getDirectedPredNodes(var9);
    com.google.javascript.jscomp.NodeTraversal.Callback var11 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var5, var10, var11);
    com.google.javascript.rhino.jstype.FunctionType var13 = var3.createFunctionType(var4, var10);
    com.google.javascript.rhino.jstype.JSType var14 = var1.createNullableType((com.google.javascript.rhino.jstype.JSType)var13);
    java.lang.String var15 = var14.toAnnotationString();
    boolean var16 = var14.isNullType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "(function (): ?|null)"+ "'", var15.equals("(function (): ?|null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test352() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test352"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
    com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var6 = var5.getDirectives();
    var5.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.exprResult(var5);
    com.google.javascript.jscomp.CodingConvention.Bind var11 = var1.describeFunctionBind(var5);
    boolean var14 = var1.isExported("hi!", false);
    boolean var17 = var1.isExported("", true);
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var22 = var21.getDirectives();
    var21.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.not(var21);
    com.google.javascript.rhino.jstype.StaticSourceFile var27 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var26);
    com.google.javascript.rhino.Node var31 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var32 = var31.getDirectives();
    int var33 = var31.getChangeTime();
    boolean var34 = var31.isWith();
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.add(var26, var31);
    com.google.javascript.jscomp.CodingConvention.Bind var37 = var1.describeFunctionBind(var31, false);
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.string("2014/12/24 01:19");
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.returnNode(var39);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var41 = var1.isVarArgsParameter(var40);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test353() {}
//   public void test353() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test353"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.TemplateTypeMap var1 = null;
//     com.google.javascript.rhino.jstype.TemplateTypeMapReplacer var2 = new com.google.javascript.rhino.jstype.TemplateTypeMapReplacer(var0, var1);
//     com.google.javascript.rhino.jstype.EnumElementType var3 = null;
//     com.google.javascript.rhino.jstype.JSType var4 = var2.caseEnumElementType(var3);
//     com.google.javascript.jscomp.CodingConvention var5 = com.google.javascript.jscomp.CodingConventions.getDefault();
//     com.google.javascript.jscomp.GoogleCodingConvention var6 = new com.google.javascript.jscomp.GoogleCodingConvention(var5);
//     com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var11 = var10.getDirectives();
//     var10.putIntProp((-1), 0);
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.exprResult(var10);
//     com.google.javascript.jscomp.CodingConvention.Bind var16 = var6.describeFunctionBind(var10);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var18 = var17.getEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var19 = new com.google.javascript.jscomp.ComposeWarningsGuard(var18);
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.script(var18);
//     boolean var21 = var6.isPrototypeAlias(var20);
//     com.google.javascript.rhino.ErrorReporter var22 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
//     com.google.javascript.rhino.jstype.JSType var24 = null;
//     com.google.javascript.rhino.Node var28 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var29 = var28.getDirectives();
//     boolean var30 = var28.isThrow();
//     boolean var32 = var28.getBooleanProp(1);
//     boolean var33 = var28.isQualifiedName();
//     com.google.javascript.rhino.jstype.FunctionType var34 = var23.createFunctionType(var24, var28);
//     java.lang.Iterable var36 = var23.getTypesWithProperty("ERROR");
//     java.lang.Iterable var38 = var23.getEachReferenceTypeWithProperty("ERROR");
//     com.google.javascript.rhino.ErrorReporter var39 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var39);
//     com.google.javascript.rhino.jstype.JSType var41 = null;
//     com.google.javascript.jscomp.AbstractCompiler var42 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var43 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var44 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var46 = var44.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var47 = var43.getDirectedPredNodes(var46);
//     com.google.javascript.jscomp.NodeTraversal.Callback var48 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var42, var47, var48);
//     com.google.javascript.rhino.jstype.FunctionType var50 = var40.createFunctionType(var41, var47);
//     java.lang.Iterable var51 = var50.getImplementedInterfaces();
//     boolean var52 = var50.isStruct();
//     java.lang.String var53 = var50.getDisplayName();
//     com.google.javascript.jscomp.AbstractCompiler var54 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var55 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var58 = var56.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var59 = var55.getDirectedPredNodes(var58);
//     com.google.javascript.jscomp.NodeTraversal.Callback var60 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var54, var59, var60);
//     java.util.Map var62 = null;
//     var6.defineDelegateProxyPrototypeProperties(var23, (com.google.javascript.rhino.jstype.StaticScope)var50, var59, var62);
//     com.google.javascript.rhino.jstype.ObjectType var64 = var50.toObjectType();
//     com.google.javascript.rhino.JSDocInfo var65 = var50.getJSDocInfo();
//     com.google.javascript.rhino.jstype.JSType var66 = var2.caseObjectType((com.google.javascript.rhino.jstype.ObjectType)var50);
//     com.google.javascript.rhino.jstype.JSType var67 = var2.caseStringType();
// 
//   }

  public void test354() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test354"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.jscomp.AbstractCompiler var3 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var5.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var8 = var4.getDirectedPredNodes(var7);
    com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var3, var8, var9);
    com.google.javascript.rhino.jstype.FunctionType var11 = var1.createFunctionType(var2, var8);
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.AbstractCompiler var16 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var20 = var18.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var21 = var17.getDirectedPredNodes(var20);
    com.google.javascript.jscomp.NodeTraversal.Callback var22 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var16, var21, var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var14.createFunctionType(var15, var21);
    com.google.javascript.rhino.Node var25 = null;
    boolean var26 = var11.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var24, var25);
    boolean var28 = var11.isPropertyTypeInferred("LABEL_NAME hi!\n");
    boolean var29 = var11.isNumberObjectType();
    boolean var30 = var11.isUnionType();
    boolean var31 = var11.isObject();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);

  }

  public void test355() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test355"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    var0.pushEdgeAnnotations();
    java.util.List var2 = var0.getGraphvizEdges();
    java.util.Collection var3 = var0.getNodes();
    java.io.PrintStream var4 = null;
    com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler(var4);
    var5.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var8 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var9 = var8.getOriginalPath();
    com.google.javascript.rhino.Node var10 = var5.parse(var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var11 = var0.getNodeDegree((java.lang.Object)var5);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test356() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test356"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("hi!", 10, 0);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var5 = var4.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var6 = new com.google.javascript.jscomp.ComposeWarningsGuard(var5);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.script(var5);
    com.google.javascript.rhino.Node var8 = var3.copyInformationFromForTree(var7);
    boolean var9 = var7.isQualifiedName();
    boolean var10 = var7.isTypeOf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test357() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test357"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setNameReferenceReportPath("");
    var0.setSyntheticBlockEndMarker("hi!");
    var0.setTightenTypes(true);
    java.util.Set var7 = null;
    var0.setCssRenamingWhitelist(var7);
    var0.setInlineVariables(false);
    com.google.javascript.jscomp.CheckLevel var11 = null;
    var0.setCheckUnreachableCode(var11);
    var0.setDeadAssignmentElimination(true);
    var0.disableRuntimeTypeCheck();
    var0.setInlineLocalVariables(false);

  }

  public void test358() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test358"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.comma(var3, var7);
    boolean var9 = var7.mayMutateArguments();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.setSideEffectFlags((-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test359() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test359"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInstrumentMemoryAllocations(false);
    var0.setRemoveUnusedLocalVars(true);
    var0.setInstrumentForCoverage(true);
    var0.setRecordFunctionInformation(false);
    var0.setPrintInputDelimiter(false);
    var0.setProtectHiddenSideEffects(true);

  }

  public void test360() {}
//   public void test360() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test360"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.TemplateTypeMap var1 = null;
//     com.google.javascript.rhino.jstype.TemplateTypeMapReplacer var2 = new com.google.javascript.rhino.jstype.TemplateTypeMapReplacer(var0, var1);
//     com.google.javascript.rhino.jstype.EnumElementType var3 = null;
//     com.google.javascript.rhino.jstype.JSType var4 = var2.caseEnumElementType(var3);
//     com.google.javascript.rhino.jstype.JSType var5 = var2.caseStringType();
// 
//   }

  public void test361() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test361"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    int var5 = var3.getChangeTime();
    com.google.javascript.rhino.Node var6 = var3.removeFirstChild();
    boolean var7 = var3.isFromExterns();
    com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var12 = var11.getDirectives();
    var11.putIntProp((-1), 0);
    var11.setSourceEncodedPosition(10);
    com.google.javascript.rhino.Node var18 = var3.useSourceInfoIfMissingFrom(var11);
    com.google.javascript.rhino.Node var22 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var23 = var22.getDirectives();
    boolean var24 = var22.isThrow();
    int var25 = var22.getSideEffectFlags();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.doNode(var11, var22);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);

  }

  public void test362() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test362"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.jscomp.AbstractCompiler var3 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var5.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var8 = var4.getDirectedPredNodes(var7);
    com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var3, var8, var9);
    com.google.javascript.rhino.jstype.FunctionType var11 = var1.createFunctionType(var2, var8);
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.AbstractCompiler var16 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var20 = var18.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var21 = var17.getDirectedPredNodes(var20);
    com.google.javascript.jscomp.NodeTraversal.Callback var22 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var16, var21, var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var14.createFunctionType(var15, var21);
    com.google.javascript.rhino.Node var25 = null;
    boolean var26 = var11.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var24, var25);
    boolean var27 = var11.isReturnTypeInferred();
    boolean var28 = var11.isUnknownType();
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.jscomp.AbstractCompiler var32 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var36 = var34.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var37 = var33.getDirectedPredNodes(var36);
    com.google.javascript.jscomp.NodeTraversal.Callback var38 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var32, var37, var38);
    com.google.javascript.rhino.jstype.FunctionType var40 = var30.createFunctionType(var31, var37);
    com.google.javascript.rhino.ErrorReporter var42 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var42);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    com.google.javascript.jscomp.AbstractCompiler var45 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var46 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var47 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var49 = var47.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var50 = var46.getDirectedPredNodes(var49);
    com.google.javascript.jscomp.NodeTraversal.Callback var51 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var45, var50, var51);
    com.google.javascript.rhino.jstype.FunctionType var53 = var43.createFunctionType(var44, var50);
    com.google.javascript.rhino.Node var54 = null;
    boolean var55 = var40.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var53, var54);
    com.google.javascript.rhino.jstype.FunctionType var56 = var53.toMaybeFunctionType();
    boolean var57 = var53.hasCachedValues();
    com.google.javascript.rhino.jstype.JSType var58 = var11.getGreatestSubtype((com.google.javascript.rhino.jstype.JSType)var53);
    java.util.List var59 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var53.setExtendedInterfaces(var59);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test363() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test363"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.jscomp.AbstractCompiler var3 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var5.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var8 = var4.getDirectedPredNodes(var7);
    com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var3, var8, var9);
    com.google.javascript.rhino.jstype.FunctionType var11 = var1.createFunctionType(var2, var8);
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.AbstractCompiler var16 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var20 = var18.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var21 = var17.getDirectedPredNodes(var20);
    com.google.javascript.jscomp.NodeTraversal.Callback var22 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var16, var21, var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var14.createFunctionType(var15, var21);
    com.google.javascript.rhino.Node var25 = null;
    boolean var26 = var11.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var24, var25);
    com.google.javascript.rhino.jstype.FunctionType var27 = var24.toMaybeFunctionType();
    boolean var28 = var24.hasCachedValues();
    com.google.javascript.rhino.jstype.TemplatizedType var29 = com.google.javascript.rhino.jstype.JSType.toMaybeTemplatizedType((com.google.javascript.rhino.jstype.JSType)var24);
    com.google.javascript.rhino.jstype.FunctionType var30 = var24.toMaybeFunctionType();
    com.google.javascript.rhino.jstype.TemplateTypeMap var31 = var24.getTemplateTypeMap();
    java.lang.String var32 = var31.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "{ }"+ "'", var32.equals("{ }"));

  }

  public void test364() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test364"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
    com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var9 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.comma(var5, var9);
    boolean var11 = var9.isUnscopedQualifiedName();
    com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var16 = var15.getDirectives();
    int var17 = var15.getChangeTime();
    boolean var18 = var15.isAssignAdd();
    com.google.javascript.rhino.Node var19 = var9.clonePropsFrom(var15);
    com.google.javascript.jscomp.CodingConvention.DelegateRelationship var20 = var1.getDelegateRelationship(var9);
    com.google.javascript.rhino.Node var24 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var28 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.comma(var24, var28);
    boolean var30 = var24.isContinue();
    boolean var31 = var24.isInc();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var32 = var1.isVarArgsParameter(var24);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test365() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test365"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    int var6 = var3.getIntProp((-1));
    boolean var7 = var3.isWith();
    com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var12 = var11.getDirectives();
    boolean var13 = var11.isThrow();
    boolean var15 = var11.getBooleanProp(1);
    boolean var16 = var11.isLabelName();
    boolean var17 = var3.hasChild(var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.var(var11);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test366() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test366"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    var0.clearNodeAnnotations();
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.jscomp.AbstractCompiler var5 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var6 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var7 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var9 = var7.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var10 = var6.getDirectedPredNodes(var9);
    com.google.javascript.jscomp.NodeTraversal.Callback var11 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var5, var10, var11);
    com.google.javascript.rhino.jstype.FunctionType var13 = var3.createFunctionType(var4, var10);
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.jscomp.AbstractCompiler var18 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var19 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var22 = var20.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var23 = var19.getDirectedPredNodes(var22);
    com.google.javascript.jscomp.NodeTraversal.Callback var24 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var18, var23, var24);
    com.google.javascript.rhino.jstype.FunctionType var26 = var16.createFunctionType(var17, var23);
    com.google.javascript.rhino.Node var27 = null;
    boolean var28 = var13.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var26, var27);
    boolean var29 = var13.isReturnTypeInferred();
    boolean var30 = var13.isUnknownType();
    com.google.javascript.rhino.ErrorReporter var31 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var31);
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.jscomp.AbstractCompiler var34 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var36 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var38 = var36.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var39 = var35.getDirectedPredNodes(var38);
    com.google.javascript.jscomp.NodeTraversal.Callback var40 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var34, var39, var40);
    com.google.javascript.rhino.jstype.FunctionType var42 = var32.createFunctionType(var33, var39);
    com.google.javascript.rhino.ErrorReporter var44 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    com.google.javascript.jscomp.AbstractCompiler var47 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var48 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var49 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var51 = var49.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var52 = var48.getDirectedPredNodes(var51);
    com.google.javascript.jscomp.NodeTraversal.Callback var53 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var47, var52, var53);
    com.google.javascript.rhino.jstype.FunctionType var55 = var45.createFunctionType(var46, var52);
    com.google.javascript.rhino.Node var56 = null;
    boolean var57 = var42.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var55, var56);
    com.google.javascript.rhino.jstype.FunctionType var58 = var55.toMaybeFunctionType();
    boolean var59 = var55.hasCachedValues();
    com.google.javascript.rhino.jstype.JSType var60 = var13.getGreatestSubtype((com.google.javascript.rhino.jstype.JSType)var55);
    com.google.javascript.rhino.jstype.Property var62 = var13.getSlot("window");
    java.io.PrintStream var63 = null;
    com.google.javascript.jscomp.Compiler var64 = new com.google.javascript.jscomp.Compiler(var63);
    var64.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var67 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var68 = var67.getOriginalPath();
    com.google.javascript.rhino.Node var69 = var64.parse(var67);
    var67.setOriginalPath("{ }");
    var67.setOriginalPath("LABEL_NAME hi!\n");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var74 = var0.getDirectedGraphEdges((java.lang.Object)"window", (java.lang.Object)"LABEL_NAME hi!\n");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "hi!"+ "'", var68.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test367() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test367"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    int var5 = var3.getChangeTime();
    boolean var6 = var3.isAssignAdd();
    java.lang.String var7 = var3.getSourceFileName();
    boolean var8 = var3.isCast();
    boolean var9 = var3.isBreak();
    com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var14 = var13.getDirectives();
    var13.putIntProp((-1), 0);
    var13.setVarArgs(false);
    com.google.javascript.rhino.jstype.StaticSourceFile var20 = var13.getStaticSourceFile();
    boolean var21 = var13.isLocalResultCall();
    boolean var22 = var13.isCall();
    java.util.Map var23 = com.google.javascript.jscomp.NodeUtil.mapMainToClone(var3, var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.defaultCase(var3);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test368() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test368"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var3 = var1.getLine(100);
    com.google.javascript.jscomp.CompilerInput var5 = new com.google.javascript.jscomp.CompilerInput(var1, true);
    boolean var6 = var5.isExtern();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test369() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test369"); }


    com.google.javascript.rhino.Node var4 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var5 = var4.getDirectives();
    var4.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.not(var4);
    boolean var10 = var9.isLabel();
    com.google.javascript.rhino.Node var14 = new com.google.javascript.rhino.Node(100, 1, 10);
    com.google.javascript.rhino.Node var15 = var14.getLastSibling();
    boolean var16 = var14.isGetElem();
    var14.setWasEmptyNode(false);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.name("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.exprResult(var20);
    com.google.javascript.rhino.Node var25 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var26 = var25.getDirectives();
    boolean var27 = var25.isThrow();
    boolean var29 = var25.getBooleanProp(1);
    boolean var30 = var25.isQualifiedName();
    var25.putProp(10, (java.lang.Object)(short)0);
    boolean var35 = var25.getBooleanProp(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var38 = new com.google.javascript.rhino.Node((-1), var9, var14, var20, var25, 100, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test370() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test370"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    var1.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var4 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var5 = var4.getOriginalPath();
    com.google.javascript.rhino.Node var6 = var1.parse(var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.normalize();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test371() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test371"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    var3.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.not(var3);
    com.google.javascript.rhino.jstype.StaticSourceFile var9 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var8);
    com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var14 = var13.getDirectives();
    int var15 = var13.getChangeTime();
    boolean var16 = var13.isWith();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.add(var8, var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var17.setSideEffectFlags(1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test372() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test372"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.jscomp.AbstractCompiler var3 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var5.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var8 = var4.getDirectedPredNodes(var7);
    com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var3, var8, var9);
    com.google.javascript.rhino.jstype.FunctionType var11 = var1.createFunctionType(var2, var8);
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.AbstractCompiler var16 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var20 = var18.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var21 = var17.getDirectedPredNodes(var20);
    com.google.javascript.jscomp.NodeTraversal.Callback var22 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var16, var21, var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var14.createFunctionType(var15, var21);
    com.google.javascript.rhino.Node var25 = null;
    boolean var26 = var11.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var24, var25);
    com.google.javascript.rhino.jstype.FunctionType var27 = var24.toMaybeFunctionType();
    boolean var28 = var24.hasCachedValues();
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    com.google.javascript.rhino.ErrorReporter var31 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var31);
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.jscomp.AbstractCompiler var34 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var36 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var38 = var36.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var39 = var35.getDirectedPredNodes(var38);
    com.google.javascript.jscomp.NodeTraversal.Callback var40 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var34, var39, var40);
    com.google.javascript.rhino.jstype.FunctionType var42 = var32.createFunctionType(var33, var39);
    com.google.javascript.rhino.jstype.JSType var43 = var30.createNullableType((com.google.javascript.rhino.jstype.JSType)var42);
    boolean var44 = var24.canCastTo(var43);
    com.google.javascript.rhino.ErrorReporter var45 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.jscomp.AbstractCompiler var50 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var52 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var54 = var52.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var55 = var51.getDirectedPredNodes(var54);
    com.google.javascript.jscomp.NodeTraversal.Callback var56 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var50, var55, var56);
    com.google.javascript.rhino.jstype.FunctionType var58 = var48.createFunctionType(var49, var55);
    com.google.javascript.rhino.jstype.JSType var59 = var46.createNullableType((com.google.javascript.rhino.jstype.JSType)var58);
    com.google.javascript.rhino.jstype.JSType.TypePair var60 = var24.getTypesUnderEquality((com.google.javascript.rhino.jstype.JSType)var58);
    com.google.javascript.rhino.ErrorReporter var61 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var61);
    com.google.javascript.rhino.ErrorReporter var63 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var63);
    com.google.javascript.rhino.jstype.JSType var65 = null;
    com.google.javascript.jscomp.AbstractCompiler var66 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var67 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var68 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var70 = var68.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var71 = var67.getDirectedPredNodes(var70);
    com.google.javascript.jscomp.NodeTraversal.Callback var72 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var66, var71, var72);
    com.google.javascript.rhino.jstype.FunctionType var74 = var64.createFunctionType(var65, var71);
    com.google.javascript.rhino.jstype.JSType var75 = var62.createNullableType((com.google.javascript.rhino.jstype.JSType)var74);
    var58.matchConstraint((com.google.javascript.rhino.jstype.JSType)var74);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.ObjectType var78 = var58.getTopMostDefiningType("");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test373() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test373"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    boolean var5 = var3.isThrow();
    com.google.javascript.rhino.Node var9 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.comma(var9, var13);
    boolean var15 = var9.isContinue();
    boolean var16 = var9.isNot();
    com.google.javascript.rhino.Node var20 = new com.google.javascript.rhino.Node(100, 1, 10);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.returnNode(var20);
    com.google.javascript.rhino.InputId var22 = null;
    var21.setInputId(var22);
    boolean var24 = var21.isDebugger();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.addChildBefore(var9, var21);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test374() {}
//   public void test374() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test374"); }
// 
// 
//     java.io.Reader var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromReader("BITXOR 10", var1);
// 
//   }

  public void test375() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test375"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(100, 1, 10);
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.returnNode(var3);
    java.io.PrintStream var5 = null;
    com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler(var5);
    var6.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var9 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var10 = var9.getOriginalPath();
    com.google.javascript.rhino.Node var11 = var6.parse(var9);
    var9.setOriginalPath("{ }");
    var4.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.io.Reader var15 = var9.getCodeReader();
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test376() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test376"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    var3.putIntProp((-1), 0);
    var3.setVarArgs(false);
    com.google.javascript.rhino.jstype.StaticSourceFile var10 = var3.getStaticSourceFile();
    boolean var11 = var3.isLocalResultCall();
    boolean var12 = var3.isCall();
    com.google.javascript.rhino.Node var16 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var17 = var16.getDirectives();
    var16.putIntProp((-1), 0);
    var16.setSourceEncodedPosition(10);
    com.google.javascript.rhino.Node var23 = var3.useSourceInfoIfMissingFromForTree(var16);
    boolean var24 = var3.isExprResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test377() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test377"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.trueNode();
    com.google.javascript.jscomp.CodingConvention var1 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var2 = new com.google.javascript.jscomp.GoogleCodingConvention(var1);
    com.google.javascript.rhino.Node var6 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var7 = var6.getDirectives();
    var6.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.exprResult(var6);
    com.google.javascript.jscomp.CodingConvention.Bind var12 = var2.describeFunctionBind(var6);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var13 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var14 = var13.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var15 = new com.google.javascript.jscomp.ComposeWarningsGuard(var14);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.script(var14);
    boolean var17 = var2.isPrototypeAlias(var16);
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var25 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.comma(var21, var25);
    boolean var27 = var25.mayMutateArguments();
    com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast var28 = var2.getObjectLiteralCast(var25);
    boolean var29 = var25.isDo();
    com.google.javascript.rhino.Node var33 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var34 = var33.getDirectives();
    boolean var35 = var33.isThrow();
    boolean var37 = var33.getBooleanProp(1);
    boolean var38 = var33.isQualifiedName();
    boolean var39 = var33.isBreak();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addChildAfter(var25, var33);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test378() {}
//   public void test378() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test378"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.ModificationVisitor var2 = new com.google.javascript.rhino.jstype.ModificationVisitor(var1);
//     com.google.javascript.rhino.jstype.UnionType var3 = null;
//     com.google.javascript.rhino.jstype.JSType var4 = var2.caseUnionType(var3);
// 
//   }

  public void test379() {}
//   public void test379() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test379"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = null;
//     com.google.javascript.jscomp.AbstractCompiler var3 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var5.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var8 = var4.getDirectedPredNodes(var7);
//     com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var3, var8, var9);
//     com.google.javascript.rhino.jstype.FunctionType var11 = var1.createFunctionType(var2, var8);
//     boolean var13 = var1.isForwardDeclaredType("ERROR");
//     var1.resetForTypeCheck();
//     com.google.javascript.rhino.jstype.ModificationVisitor var15 = new com.google.javascript.rhino.jstype.ModificationVisitor(var1);
//     com.google.javascript.rhino.jstype.UnionType var16 = null;
//     com.google.javascript.rhino.jstype.JSType var17 = var15.caseUnionType(var16);
// 
//   }

  public void test380() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test380"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
    com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
    com.google.javascript.rhino.Node var6 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var7 = var6.getDirectives();
    boolean var8 = var6.isThrow();
    boolean var10 = var6.getBooleanProp(1);
    boolean var11 = var6.isLabelName();
    java.util.Map var12 = null;
    var2.checkForCallingConventionDefiningCalls(var6, var12);
    java.lang.String var14 = var2.getAbstractMethodName();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.continueNode();
    boolean var16 = var15.isSwitch();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast var17 = var2.getObjectLiteralCast(var15);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "goog.abstractMethod"+ "'", var14.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test381() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test381"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var4 = var3.getString();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }

  }

  public void test382() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test382"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var3 = var2.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
    java.lang.String var6 = var1.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var7 = null;
    com.google.javascript.jscomp.DefaultPassConfig var8 = new com.google.javascript.jscomp.DefaultPassConfig(var7);
    var1.setPassConfig((com.google.javascript.jscomp.PassConfig)var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var11 = var10.getEdges();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var13 = var12.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var14 = new com.google.javascript.jscomp.ComposeWarningsGuard(var13);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.script(var13);
    com.google.javascript.jscomp.CompilerOptions var16 = new com.google.javascript.jscomp.CompilerOptions();
    var16.setPropertyAffinity(false);
    com.google.javascript.jscomp.CheckLevel var19 = null;
    var16.setBrokenClosureRequiresLevel(var19);
    var1.<com.google.javascript.jscomp.SourceFile>initModules(var11, var13, var16);
    com.google.javascript.jscomp.JSError[] var22 = var1.getMessages();
    com.google.javascript.jscomp.type.ReverseAbstractInterpreter var23 = null;
    com.google.javascript.jscomp.CodingConvention var24 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var25 = new com.google.javascript.jscomp.GoogleCodingConvention(var24);
    com.google.javascript.rhino.Node var29 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var30 = var29.getDirectives();
    var29.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.exprResult(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var35 = var25.describeFunctionBind(var29);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var36 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var37 = var36.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var38 = new com.google.javascript.jscomp.ComposeWarningsGuard(var37);
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.script(var37);
    boolean var40 = var25.isPrototypeAlias(var39);
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.rhino.Node var47 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var48 = var47.getDirectives();
    boolean var49 = var47.isThrow();
    boolean var51 = var47.getBooleanProp(1);
    boolean var52 = var47.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var53 = var42.createFunctionType(var43, var47);
    java.lang.Iterable var55 = var42.getTypesWithProperty("ERROR");
    java.lang.Iterable var57 = var42.getEachReferenceTypeWithProperty("ERROR");
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var60 = null;
    com.google.javascript.jscomp.AbstractCompiler var61 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var62 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var63 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var65 = var63.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var66 = var62.getDirectedPredNodes(var65);
    com.google.javascript.jscomp.NodeTraversal.Callback var67 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var61, var66, var67);
    com.google.javascript.rhino.jstype.FunctionType var69 = var59.createFunctionType(var60, var66);
    java.lang.Iterable var70 = var69.getImplementedInterfaces();
    boolean var71 = var69.isStruct();
    java.lang.String var72 = var69.getDisplayName();
    com.google.javascript.jscomp.AbstractCompiler var73 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var74 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var75 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var77 = var75.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var78 = var74.getDirectedPredNodes(var77);
    com.google.javascript.jscomp.NodeTraversal.Callback var79 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var73, var78, var79);
    java.util.Map var81 = null;
    var25.defineDelegateProxyPrototypeProperties(var42, (com.google.javascript.rhino.jstype.StaticScope)var69, var78, var81);
    com.google.javascript.jscomp.CheckLevel var83 = null;
    com.google.javascript.jscomp.TypeCheck var84 = new com.google.javascript.jscomp.TypeCheck((com.google.javascript.jscomp.AbstractCompiler)var1, var23, var42, var83);
    com.google.javascript.jscomp.MessageFormatter var85 = null;
    java.util.logging.Logger var86 = null;
    com.google.javascript.jscomp.LoggerErrorManager var87 = new com.google.javascript.jscomp.LoggerErrorManager(var85, var86);
    com.google.javascript.jscomp.JSError[] var88 = var87.getWarnings();
    var1.setErrorManager((com.google.javascript.jscomp.ErrorManager)var87);
    com.google.javascript.jscomp.Region var92 = var1.getSourceRegion("ERROR", (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);

  }

  public void test383() {}
//   public void test383() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test383"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = null;
//     com.google.javascript.jscomp.AbstractCompiler var3 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var5.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var8 = var4.getDirectedPredNodes(var7);
//     com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var3, var8, var9);
//     com.google.javascript.rhino.jstype.FunctionType var11 = var1.createFunctionType(var2, var8);
//     com.google.javascript.rhino.ErrorReporter var13 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     com.google.javascript.jscomp.AbstractCompiler var16 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var20 = var18.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var21 = var17.getDirectedPredNodes(var20);
//     com.google.javascript.jscomp.NodeTraversal.Callback var22 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var16, var21, var22);
//     com.google.javascript.rhino.jstype.FunctionType var24 = var14.createFunctionType(var15, var21);
//     com.google.javascript.rhino.Node var25 = null;
//     boolean var26 = var11.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var24, var25);
//     boolean var27 = var11.isReturnTypeInferred();
//     boolean var28 = var11.canBeCalled();
//     java.lang.String var29 = var11.getDisplayName();
//     com.google.javascript.rhino.jstype.FunctionType var30 = null;
//     boolean var31 = var11.hasEqualCallType(var30);
// 
//   }

  public void test384() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test384"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("(function (): ?|null)");
    java.io.PrintStream var2 = null;
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler(var2);
    var3.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var6 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var7 = var6.getOriginalPath();
    com.google.javascript.rhino.Node var8 = var3.parse(var6);
    var1.add(var6);
    java.util.List var10 = var1.getRequires();
    com.google.javascript.jscomp.SourceFile var12 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var13 = var12.getOriginalPath();
    int var15 = var12.getColumnOfOffset(10);
    com.google.javascript.jscomp.CompilerInput var17 = new com.google.javascript.jscomp.CompilerInput(var12, false);
    java.io.PrintStream var18 = null;
    com.google.javascript.jscomp.Compiler var19 = new com.google.javascript.jscomp.Compiler(var18);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var21 = var20.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var22 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var19, var21, var22);
    java.lang.String var24 = var19.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var25 = null;
    com.google.javascript.jscomp.DefaultPassConfig var26 = new com.google.javascript.jscomp.DefaultPassConfig(var25);
    var19.setPassConfig((com.google.javascript.jscomp.PassConfig)var26);
    java.io.PrintStream var28 = null;
    com.google.javascript.jscomp.Compiler var29 = new com.google.javascript.jscomp.Compiler(var28);
    var29.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var32 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var33 = var32.getOriginalPath();
    com.google.javascript.rhino.Node var34 = var29.parse(var32);
    var32.setOriginalPath("{ }");
    com.google.javascript.rhino.Node var37 = var19.parse(var32);
    var17.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var19);
    com.google.javascript.jscomp.CompilerInput var39 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var17);
    var1.add(var17);
    java.lang.String var41 = var17.toString();
    int var42 = var17.getNumLines();
    com.google.javascript.jscomp.JSModule var44 = new com.google.javascript.jscomp.JSModule("(function (): ?|null)");
    java.io.PrintStream var45 = null;
    com.google.javascript.jscomp.Compiler var46 = new com.google.javascript.jscomp.Compiler(var45);
    var46.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var49 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var50 = var49.getOriginalPath();
    com.google.javascript.rhino.Node var51 = var46.parse(var49);
    var44.add(var49);
    java.util.List var53 = var44.getRequires();
    java.io.PrintStream var54 = null;
    com.google.javascript.jscomp.Compiler var55 = new com.google.javascript.jscomp.Compiler(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var57 = var56.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var58 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var55, var57, var58);
    var44.sortInputsByDeps(var55);
    boolean var62 = var44.removeByName("");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var17.setModule(var44);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + ""+ "'", var24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test385() {}
//   public void test385() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test385"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var1 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var4 = var2.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var5 = var1.getDirectedPredNodes(var4);
//     com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var0, var5, var6);
//     com.google.javascript.jscomp.JSModuleGraph var8 = new com.google.javascript.jscomp.JSModuleGraph(var5);
//     com.google.javascript.jscomp.JSModule var10 = new com.google.javascript.jscomp.JSModule("(function (): ?|null)");
//     java.io.PrintStream var11 = null;
//     com.google.javascript.jscomp.Compiler var12 = new com.google.javascript.jscomp.Compiler(var11);
//     var12.reportCodeChange();
//     com.google.javascript.jscomp.SourceFile var15 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
//     java.lang.String var16 = var15.getOriginalPath();
//     com.google.javascript.rhino.Node var17 = var12.parse(var15);
//     var10.add(var15);
//     java.util.Set var19 = var10.getAllDependencies();
//     com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("(function (): ?|null)");
//     var21.clearAsts();
//     com.google.javascript.jscomp.JSModule var23 = var8.getDeepestCommonDependencyInclusive(var10, var21);
//     com.google.javascript.jscomp.JSModule var25 = new com.google.javascript.jscomp.JSModule("(function (): ?|null)");
//     java.io.PrintStream var26 = null;
//     com.google.javascript.jscomp.Compiler var27 = new com.google.javascript.jscomp.Compiler(var26);
//     var27.reportCodeChange();
//     com.google.javascript.jscomp.SourceFile var30 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
//     java.lang.String var31 = var30.getOriginalPath();
//     com.google.javascript.rhino.Node var32 = var27.parse(var30);
//     var25.add(var30);
//     java.util.List var34 = var25.getRequires();
//     java.io.PrintStream var35 = null;
//     com.google.javascript.jscomp.Compiler var36 = new com.google.javascript.jscomp.Compiler(var35);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var37 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var38 = var37.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var39 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var36, var38, var39);
//     var25.sortInputsByDeps(var36);
//     var10.sortInputsByDeps(var36);
//     com.google.javascript.jscomp.JSSourceFile var43 = null;
//     com.google.javascript.jscomp.JSModule var45 = new com.google.javascript.jscomp.JSModule("(function (): ?|null)");
//     java.io.PrintStream var46 = null;
//     com.google.javascript.jscomp.Compiler var47 = new com.google.javascript.jscomp.Compiler(var46);
//     var47.reportCodeChange();
//     com.google.javascript.jscomp.SourceFile var50 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
//     java.lang.String var51 = var50.getOriginalPath();
//     com.google.javascript.rhino.Node var52 = var47.parse(var50);
//     var45.add(var50);
//     com.google.javascript.jscomp.JSModule[] var54 = new com.google.javascript.jscomp.JSModule[] { var45};
//     com.google.javascript.jscomp.CompilerOptions var55 = new com.google.javascript.jscomp.CompilerOptions();
//     var55.setNameReferenceReportPath("");
//     var55.setSyntheticBlockEndMarker("hi!");
//     var55.setTightenTypes(true);
//     java.util.Set var62 = null;
//     var55.setCssRenamingWhitelist(var62);
//     var55.setOptimizeArgumentsArray(true);
//     var55.setInferTypes(true);
//     var55.setRewriteFunctionExpressions(false);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var70 = var55.getTweakProcessing();
//     com.google.javascript.jscomp.Result var71 = var36.compile(var43, var54, var55);
// 
//   }

  public void test386() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test386"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var1 = var0.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var2 = new com.google.javascript.jscomp.ComposeWarningsGuard(var1);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.script(var1);
    com.google.javascript.rhino.Node[] var4 = new com.google.javascript.rhino.Node[] { var3};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.script(var4);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test387() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test387"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
    com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var6 = var5.getDirectives();
    var5.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.exprResult(var5);
    com.google.javascript.jscomp.CodingConvention.Bind var11 = var1.describeFunctionBind(var5);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var13 = var12.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var14 = new com.google.javascript.jscomp.ComposeWarningsGuard(var13);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.script(var13);
    boolean var16 = var1.isPrototypeAlias(var15);
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.Node var23 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var24 = var23.getDirectives();
    boolean var25 = var23.isThrow();
    boolean var27 = var23.getBooleanProp(1);
    boolean var28 = var23.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var29 = var18.createFunctionType(var19, var23);
    java.lang.Iterable var31 = var18.getTypesWithProperty("ERROR");
    java.lang.Iterable var33 = var18.getEachReferenceTypeWithProperty("ERROR");
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.jscomp.AbstractCompiler var37 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var38 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var39 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var41 = var39.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var42 = var38.getDirectedPredNodes(var41);
    com.google.javascript.jscomp.NodeTraversal.Callback var43 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var37, var42, var43);
    com.google.javascript.rhino.jstype.FunctionType var45 = var35.createFunctionType(var36, var42);
    java.lang.Iterable var46 = var45.getImplementedInterfaces();
    boolean var47 = var45.isStruct();
    java.lang.String var48 = var45.getDisplayName();
    com.google.javascript.jscomp.AbstractCompiler var49 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var53 = var51.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var54 = var50.getDirectedPredNodes(var53);
    com.google.javascript.jscomp.NodeTraversal.Callback var55 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var49, var54, var55);
    java.util.Map var57 = null;
    var1.defineDelegateProxyPrototypeProperties(var18, (com.google.javascript.rhino.jstype.StaticScope)var45, var54, var57);
    com.google.javascript.rhino.jstype.ObjectType var59 = var45.toObjectType();
    java.lang.Iterable var60 = var45.getExtendedInterfaces();
    boolean var61 = var45.hasImplementedInterfaces();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.ObjectType var62 = var45.getInstanceType();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test388() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test388"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var2 = var1.getOriginalPath();
    int var4 = var1.getColumnOfOffset(10);
    com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var1, false);
    java.io.PrintStream var7 = null;
    com.google.javascript.jscomp.Compiler var8 = new com.google.javascript.jscomp.Compiler(var7);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var9 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var10 = var9.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var11 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var8, var10, var11);
    java.lang.String var13 = var8.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var14 = null;
    com.google.javascript.jscomp.DefaultPassConfig var15 = new com.google.javascript.jscomp.DefaultPassConfig(var14);
    var8.setPassConfig((com.google.javascript.jscomp.PassConfig)var15);
    java.io.PrintStream var17 = null;
    com.google.javascript.jscomp.Compiler var18 = new com.google.javascript.jscomp.Compiler(var17);
    var18.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var21 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var22 = var21.getOriginalPath();
    com.google.javascript.rhino.Node var23 = var18.parse(var21);
    var21.setOriginalPath("{ }");
    com.google.javascript.rhino.Node var26 = var8.parse(var21);
    var6.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var8);
    com.google.javascript.jscomp.ErrorManager var28 = var8.getErrorManager();
    com.google.javascript.jscomp.LightweightMessageFormatter var29 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var8);
    com.google.javascript.jscomp.Result var30 = var8.getResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ""+ "'", var13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test389() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test389"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    var0.pushEdgeAnnotations();
    java.util.List var2 = var0.getGraphvizEdges();
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.AbstractCompiler var6 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var7 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var10 = var8.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var11 = var7.getDirectedPredNodes(var10);
    com.google.javascript.jscomp.NodeTraversal.Callback var12 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var6, var11, var12);
    com.google.javascript.rhino.jstype.FunctionType var14 = var4.createFunctionType(var5, var11);
    java.lang.Iterable var15 = var14.getImplementedInterfaces();
    com.google.javascript.rhino.ErrorReporter var16 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.jscomp.AbstractCompiler var19 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var23 = var21.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var24 = var20.getDirectedPredNodes(var23);
    com.google.javascript.jscomp.NodeTraversal.Callback var25 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var19, var24, var25);
    com.google.javascript.rhino.jstype.FunctionType var27 = var17.createFunctionType(var18, var24);
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.jscomp.AbstractCompiler var32 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var36 = var34.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var37 = var33.getDirectedPredNodes(var36);
    com.google.javascript.jscomp.NodeTraversal.Callback var38 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var32, var37, var38);
    com.google.javascript.rhino.jstype.FunctionType var40 = var30.createFunctionType(var31, var37);
    com.google.javascript.rhino.Node var41 = null;
    boolean var42 = var27.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var40, var41);
    boolean var43 = var14.isInvariant((com.google.javascript.rhino.jstype.JSType)var27);
    boolean var44 = var27.isGlobalThisType();
    boolean var45 = var27.isNumberValueType();
    var27.clearResolved();
    com.google.javascript.jscomp.CompilerOptions var47 = new com.google.javascript.jscomp.CompilerOptions();
    var47.setNameReferenceReportPath("");
    var47.setSyntheticBlockEndMarker("hi!");
    var47.setTightenTypes(true);
    java.util.Set var54 = null;
    var47.setCssRenamingWhitelist(var54);
    var47.setInlineVariables(false);
    com.google.javascript.jscomp.CheckLevel var58 = null;
    var47.setCheckUnreachableCode(var58);
    var47.setDeadAssignmentElimination(true);
    var47.disableRuntimeTypeCheck();
    java.lang.Object var63 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.connectIfNotFound((java.lang.Object)var27, (java.lang.Object)var47, var63);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test390() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test390"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    var1.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var4 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var5 = var4.getOriginalPath();
    com.google.javascript.rhino.Node var6 = var1.parse(var4);
    var4.setOriginalPath("{ }");
    java.lang.String var9 = var4.getName();
    int var11 = var4.getLineOffset(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);

  }

  public void test391() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test391"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.jscomp.AbstractCompiler var3 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var5.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var8 = var4.getDirectedPredNodes(var7);
    com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var3, var8, var9);
    com.google.javascript.rhino.jstype.FunctionType var11 = var1.createFunctionType(var2, var8);
    java.lang.Iterable var12 = var11.getImplementedInterfaces();
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.AbstractCompiler var16 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var20 = var18.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var21 = var17.getDirectedPredNodes(var20);
    com.google.javascript.jscomp.NodeTraversal.Callback var22 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var16, var21, var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var14.createFunctionType(var15, var21);
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.jscomp.AbstractCompiler var29 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var31 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var33 = var31.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var34 = var30.getDirectedPredNodes(var33);
    com.google.javascript.jscomp.NodeTraversal.Callback var35 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var29, var34, var35);
    com.google.javascript.rhino.jstype.FunctionType var37 = var27.createFunctionType(var28, var34);
    com.google.javascript.rhino.Node var38 = null;
    boolean var39 = var24.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var37, var38);
    boolean var40 = var11.isInvariant((com.google.javascript.rhino.jstype.JSType)var24);
    boolean var41 = var24.isFunctionType();
    java.lang.String var42 = var24.getNormalizedReferenceName();
    com.google.javascript.rhino.ErrorReporter var44 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    com.google.javascript.jscomp.AbstractCompiler var47 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var48 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var49 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var51 = var49.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var52 = var48.getDirectedPredNodes(var51);
    com.google.javascript.jscomp.NodeTraversal.Callback var53 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var47, var52, var53);
    com.google.javascript.rhino.jstype.FunctionType var55 = var45.createFunctionType(var46, var52);
    com.google.javascript.rhino.ErrorReporter var57 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var57);
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.jscomp.AbstractCompiler var60 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var61 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var62 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var64 = var62.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var65 = var61.getDirectedPredNodes(var64);
    com.google.javascript.jscomp.NodeTraversal.Callback var66 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var60, var65, var66);
    com.google.javascript.rhino.jstype.FunctionType var68 = var58.createFunctionType(var59, var65);
    com.google.javascript.rhino.Node var69 = null;
    boolean var70 = var55.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var68, var69);
    com.google.javascript.rhino.jstype.FunctionType var71 = var68.toMaybeFunctionType();
    com.google.javascript.rhino.jstype.JSType var73 = var68.getPropertyType("(function (): ?|null)");
    com.google.javascript.rhino.Node var77 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var78 = var77.getDirectives();
    boolean var79 = var77.isThrow();
    boolean var81 = var77.getBooleanProp(1);
    boolean var82 = var77.isLabelName();
    com.google.javascript.rhino.JSDocInfo var83 = null;
    com.google.javascript.rhino.Node var84 = var77.setJSDocInfo(var83);
    boolean var85 = var24.defineSynthesizedProperty("ERROR", var73, var84);
    var24.setStruct();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);

  }

  public void test392() {}
//   public void test392() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test392"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
//     com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
//     com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
//     com.google.javascript.rhino.Node var6 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var7 = var6.getDirectives();
//     boolean var8 = var6.isReturn();
//     boolean var9 = var2.isPrototypeAlias(var6);
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.Node.newString("hi!", 10, 0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var14 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var15 = var14.getEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var16 = new com.google.javascript.jscomp.ComposeWarningsGuard(var15);
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.script(var15);
//     com.google.javascript.rhino.Node var18 = var13.copyInformationFromForTree(var17);
//     boolean var19 = var18.isOnlyModifiesThisCall();
//     com.google.javascript.rhino.Node var24 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.jscomp.DiagnosticType var27 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "ERROR");
//     java.lang.String[] var29 = new java.lang.String[] { "(function (): ?|null)"};
//     com.google.javascript.jscomp.JSError var30 = com.google.javascript.jscomp.JSError.make("ERROR", var24, var27, var29);
//     java.lang.String var31 = var2.extractClassNameIfProvide(var18, var24);
//     com.google.javascript.rhino.Node var35 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var36 = var35.getDirectives();
//     var35.putIntProp((-1), 0);
//     var35.setSourceEncodedPosition(10);
//     boolean var42 = var35.isThis();
//     com.google.javascript.rhino.Node.AncestorIterable var43 = var35.getAncestors();
//     java.lang.String var44 = var2.getSingletonGetterClassName(var35);
// 
//   }

  public void test393() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test393"); }


    com.google.javascript.jscomp.AstValidator var0 = new com.google.javascript.jscomp.AstValidator();
    com.google.javascript.rhino.Node var4 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var5 = var4.getDirectives();
    var4.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.exprResult(var4);
    java.lang.Iterable var10 = var9.siblings();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.Node.newString("hi!", 1, (-1));
    var9.addChildToBack(var14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.validateCodeRoot(var9);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test394() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test394"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var2 = var1.getOriginalPath();
    int var4 = var1.getColumnOfOffset(10);
    com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var1, false);
    java.io.PrintStream var7 = null;
    com.google.javascript.jscomp.Compiler var8 = new com.google.javascript.jscomp.Compiler(var7);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var9 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var10 = var9.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var11 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var8, var10, var11);
    java.lang.String var13 = var8.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var14 = null;
    com.google.javascript.jscomp.DefaultPassConfig var15 = new com.google.javascript.jscomp.DefaultPassConfig(var14);
    var8.setPassConfig((com.google.javascript.jscomp.PassConfig)var15);
    java.io.PrintStream var17 = null;
    com.google.javascript.jscomp.Compiler var18 = new com.google.javascript.jscomp.Compiler(var17);
    var18.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var21 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var22 = var21.getOriginalPath();
    com.google.javascript.rhino.Node var23 = var18.parse(var21);
    var21.setOriginalPath("{ }");
    com.google.javascript.rhino.Node var26 = var8.parse(var21);
    var6.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var8);
    java.lang.String var28 = var8.getAstDotGraph();
    com.google.javascript.jscomp.SourceFile var30 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.io.PrintStream var31 = null;
    com.google.javascript.jscomp.Compiler var32 = new com.google.javascript.jscomp.Compiler(var31);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var34 = var33.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var35 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var32, var34, var35);
    java.lang.String var37 = var32.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var38 = null;
    com.google.javascript.jscomp.DefaultPassConfig var39 = new com.google.javascript.jscomp.DefaultPassConfig(var38);
    var32.setPassConfig((com.google.javascript.jscomp.PassConfig)var39);
    java.io.PrintStream var41 = null;
    com.google.javascript.jscomp.Compiler var42 = new com.google.javascript.jscomp.Compiler(var41);
    var42.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var45 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var46 = var45.getOriginalPath();
    com.google.javascript.rhino.Node var47 = var42.parse(var45);
    var45.setOriginalPath("{ }");
    com.google.javascript.rhino.Node var50 = var32.parse(var45);
    boolean var51 = var45.isExtern();
    com.google.javascript.jscomp.CompilerOptions var52 = new com.google.javascript.jscomp.CompilerOptions();
    var52.setPropertyAffinity(false);
    com.google.javascript.jscomp.CheckLevel var55 = null;
    var52.setBrokenClosureRequiresLevel(var55);
    var52.setOptimizeParameters(false);
    var52.setInlineFunctions(true);
    boolean var61 = var52.assumeStrictThis();
    var52.setExtractPrototypeMemberDeclarations(true);
    com.google.javascript.jscomp.Result var64 = var8.compile(var30, var45, var52);
    com.google.javascript.jscomp.Compiler.CodeBuilder var65 = null;
    com.google.javascript.rhino.Node var70 = new com.google.javascript.rhino.Node(100, 1, 10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var8.toSource(var65, 7, var70);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ""+ "'", var13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + ""+ "'", var28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + ""+ "'", var37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "hi!"+ "'", var46.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test395() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test395"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
    com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.Node var9 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var10 = var9.getDirectives();
    boolean var11 = var9.isThrow();
    boolean var13 = var9.getBooleanProp(1);
    boolean var14 = var9.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var15 = var4.createFunctionType(var5, var9);
    com.google.javascript.rhino.ErrorReporter var16 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.jscomp.AbstractCompiler var19 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var23 = var21.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var24 = var20.getDirectedPredNodes(var23);
    com.google.javascript.jscomp.NodeTraversal.Callback var25 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var19, var24, var25);
    com.google.javascript.rhino.jstype.FunctionType var27 = var17.createFunctionType(var18, var24);
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.jscomp.AbstractCompiler var32 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var36 = var34.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var37 = var33.getDirectedPredNodes(var36);
    com.google.javascript.jscomp.NodeTraversal.Callback var38 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var32, var37, var38);
    com.google.javascript.rhino.jstype.FunctionType var40 = var30.createFunctionType(var31, var37);
    com.google.javascript.rhino.Node var41 = null;
    boolean var42 = var27.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var40, var41);
    com.google.javascript.rhino.jstype.FunctionType var43 = var40.toMaybeFunctionType();
    boolean var44 = var40.hasCachedValues();
    com.google.javascript.rhino.ErrorReporter var45 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.jscomp.AbstractCompiler var50 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var52 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var54 = var52.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var55 = var51.getDirectedPredNodes(var54);
    com.google.javascript.jscomp.NodeTraversal.Callback var56 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var50, var55, var56);
    com.google.javascript.rhino.jstype.FunctionType var58 = var48.createFunctionType(var49, var55);
    com.google.javascript.rhino.jstype.JSType var59 = var46.createNullableType((com.google.javascript.rhino.jstype.JSType)var58);
    boolean var60 = var40.canCastTo(var59);
    com.google.javascript.jscomp.CodingConvention.SubclassType var61 = null;
    var2.applySubclassRelationship(var15, var40, var61);
    boolean var64 = var2.isSuperClassReference("Node tree inequality:\nTree1:\nNOT\n    BITXOR 10\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NOT\n    BITXOR 10\n\n\nSubtree2: PARAM_LIST\n");
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.trueNode();
    com.google.javascript.rhino.Node var69 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var70 = var69.getDirectives();
    int var71 = var69.getChangeTime();
    boolean var72 = var69.isAssignAdd();
    java.lang.String var73 = var69.getSourceFileName();
    boolean var74 = var69.isContinue();
    boolean var75 = var69.isGetterDef();
    java.lang.String var76 = var2.extractClassNameIfRequire(var65, var69);
    com.google.javascript.rhino.Node var80 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var81 = var80.getDirectives();
    var80.putIntProp((-1), 0);
    var80.setVarArgs(false);
    com.google.javascript.rhino.jstype.StaticSourceFile var87 = var80.getStaticSourceFile();
    boolean var88 = var80.isLocalResultCall();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var89 = var2.isPropertyTestFunction(var80);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test396() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test396"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setNameReferenceReportPath("");
    var0.setSyntheticBlockEndMarker("hi!");
    var0.setLooseTypes(false);
    var0.setUnaliasableGlobals("LABEL_NAME hi!\n");
    com.google.javascript.jscomp.CheckLevel var9 = null;
    var0.setCheckGlobalNamesLevel(var9);
    com.google.javascript.jscomp.CheckLevel var11 = null;
    var0.setCheckProvides(var11);
    com.google.javascript.jscomp.CodingConvention var13 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var14 = new com.google.javascript.jscomp.GoogleCodingConvention(var13);
    com.google.javascript.jscomp.ClosureCodingConvention var15 = new com.google.javascript.jscomp.ClosureCodingConvention(var13);
    com.google.javascript.rhino.ErrorReporter var16 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.Node var22 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var23 = var22.getDirectives();
    boolean var24 = var22.isThrow();
    boolean var26 = var22.getBooleanProp(1);
    boolean var27 = var22.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var28 = var17.createFunctionType(var18, var22);
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.jscomp.AbstractCompiler var32 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var36 = var34.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var37 = var33.getDirectedPredNodes(var36);
    com.google.javascript.jscomp.NodeTraversal.Callback var38 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var32, var37, var38);
    com.google.javascript.rhino.jstype.FunctionType var40 = var30.createFunctionType(var31, var37);
    com.google.javascript.rhino.ErrorReporter var42 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var42);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    com.google.javascript.jscomp.AbstractCompiler var45 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var46 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var47 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var49 = var47.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var50 = var46.getDirectedPredNodes(var49);
    com.google.javascript.jscomp.NodeTraversal.Callback var51 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var45, var50, var51);
    com.google.javascript.rhino.jstype.FunctionType var53 = var43.createFunctionType(var44, var50);
    com.google.javascript.rhino.Node var54 = null;
    boolean var55 = var40.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var53, var54);
    com.google.javascript.rhino.jstype.FunctionType var56 = var53.toMaybeFunctionType();
    boolean var57 = var53.hasCachedValues();
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.ErrorReporter var60 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var60);
    com.google.javascript.rhino.jstype.JSType var62 = null;
    com.google.javascript.jscomp.AbstractCompiler var63 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var64 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var65 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var67 = var65.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var68 = var64.getDirectedPredNodes(var67);
    com.google.javascript.jscomp.NodeTraversal.Callback var69 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var63, var68, var69);
    com.google.javascript.rhino.jstype.FunctionType var71 = var61.createFunctionType(var62, var68);
    com.google.javascript.rhino.jstype.JSType var72 = var59.createNullableType((com.google.javascript.rhino.jstype.JSType)var71);
    boolean var73 = var53.canCastTo(var72);
    com.google.javascript.jscomp.CodingConvention.SubclassType var74 = null;
    var15.applySubclassRelationship(var28, var53, var74);
    boolean var77 = var15.isValidEnumKey("ERROR");
    boolean var79 = var15.isConstantKey("");
    com.google.javascript.rhino.Node var83 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var84 = var83.getDirectives();
    boolean var85 = var83.isThrow();
    boolean var87 = var83.getBooleanProp(1);
    com.google.javascript.rhino.Node var91 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var92 = var91.getDirectives();
    boolean var93 = var91.isThrow();
    boolean var95 = var91.getBooleanProp(1);
    boolean var96 = var91.isQualifiedName();
    boolean var97 = var91.isStringKey();
    java.lang.String var98 = var15.extractClassNameIfRequire(var83, var91);
    var0.setCodingConvention((com.google.javascript.jscomp.CodingConvention)var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var98);

  }

  public void test397() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test397"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setPropertyAffinity(false);
    com.google.javascript.jscomp.CheckLevel var3 = null;
    var0.setBrokenClosureRequiresLevel(var3);
    var0.setOptimizeParameters(false);
    var0.setInlineFunctions(true);
    var0.setOptimizeReturns(false);
    var0.setShadowVariables(true);

  }

  public void test398() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test398"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var1 = com.google.javascript.rhino.SimpleErrorReporter.getMessage0("goog.exportSymbol");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test399() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test399"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
    com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
    com.google.javascript.rhino.Node var6 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var7 = var6.getDirectives();
    boolean var8 = var6.isReturn();
    boolean var9 = var2.isPrototypeAlias(var6);
    com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var14 = var13.getDirectives();
    boolean var15 = var13.isThrow();
    boolean var17 = var13.getBooleanProp(1);
    boolean var18 = var13.isQualifiedName();
    boolean var19 = var2.isVarArgsParameter(var13);
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    com.google.javascript.jscomp.AbstractCompiler var23 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var24 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var25 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var27 = var25.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var28 = var24.getDirectedPredNodes(var27);
    com.google.javascript.jscomp.NodeTraversal.Callback var29 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var23, var28, var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var21.createFunctionType(var22, var28);
    java.util.Set var32 = var31.getOwnPropertyNames();
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33);
    com.google.javascript.rhino.jstype.JSType var35 = null;
    com.google.javascript.rhino.Node var39 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var40 = var39.getDirectives();
    boolean var41 = var39.isThrow();
    boolean var43 = var39.getBooleanProp(1);
    boolean var44 = var39.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var45 = var34.createFunctionType(var35, var39);
    java.lang.Iterable var47 = var34.getTypesWithProperty("ERROR");
    com.google.javascript.rhino.ErrorReporter var48 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var48);
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.jscomp.AbstractCompiler var51 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var52 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var53 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var55 = var53.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var56 = var52.getDirectedPredNodes(var55);
    com.google.javascript.jscomp.NodeTraversal.Callback var57 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var51, var56, var57);
    com.google.javascript.rhino.jstype.FunctionType var59 = var49.createFunctionType(var50, var56);
    com.google.javascript.rhino.ErrorReporter var61 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    com.google.javascript.jscomp.AbstractCompiler var64 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var65 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var66 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var68 = var66.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var69 = var65.getDirectedPredNodes(var68);
    com.google.javascript.jscomp.NodeTraversal.Callback var70 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var64, var69, var70);
    com.google.javascript.rhino.jstype.FunctionType var72 = var62.createFunctionType(var63, var69);
    com.google.javascript.rhino.Node var73 = null;
    boolean var74 = var59.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var72, var73);
    com.google.javascript.rhino.jstype.FunctionType var75 = var72.toMaybeFunctionType();
    boolean var76 = var72.hasCachedValues();
    com.google.javascript.rhino.ErrorReporter var77 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var78 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var77);
    com.google.javascript.rhino.ErrorReporter var79 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var80 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var79);
    com.google.javascript.rhino.jstype.JSType var81 = null;
    com.google.javascript.jscomp.AbstractCompiler var82 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var83 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var84 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var86 = var84.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var87 = var83.getDirectedPredNodes(var86);
    com.google.javascript.jscomp.NodeTraversal.Callback var88 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var82, var87, var88);
    com.google.javascript.rhino.jstype.FunctionType var90 = var80.createFunctionType(var81, var87);
    com.google.javascript.rhino.jstype.JSType var91 = var78.createNullableType((com.google.javascript.rhino.jstype.JSType)var90);
    boolean var92 = var72.canCastTo(var91);
    com.google.javascript.rhino.jstype.JSType var94 = var34.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType)var72, "ERROR");
    com.google.javascript.jscomp.CodingConvention.SubclassType var95 = null;
    var2.applySubclassRelationship(var31, var72, var95);
    com.google.javascript.rhino.Node var98 = var72.getPropertyNode("window");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var98);

  }

  public void test400() {}
//   public void test400() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test400"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.TemplateTypeMap var1 = null;
//     com.google.javascript.rhino.jstype.TemplateTypeMapReplacer var2 = new com.google.javascript.rhino.jstype.TemplateTypeMapReplacer(var0, var1);
//     com.google.javascript.rhino.jstype.EnumElementType var3 = null;
//     com.google.javascript.rhino.jstype.JSType var4 = var2.caseEnumElementType(var3);
//     com.google.javascript.jscomp.CodingConvention var5 = com.google.javascript.jscomp.CodingConventions.getDefault();
//     com.google.javascript.jscomp.GoogleCodingConvention var6 = new com.google.javascript.jscomp.GoogleCodingConvention(var5);
//     com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var11 = var10.getDirectives();
//     var10.putIntProp((-1), 0);
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.exprResult(var10);
//     com.google.javascript.jscomp.CodingConvention.Bind var16 = var6.describeFunctionBind(var10);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var18 = var17.getEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var19 = new com.google.javascript.jscomp.ComposeWarningsGuard(var18);
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.script(var18);
//     boolean var21 = var6.isPrototypeAlias(var20);
//     com.google.javascript.rhino.ErrorReporter var22 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
//     com.google.javascript.rhino.jstype.JSType var24 = null;
//     com.google.javascript.rhino.Node var28 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var29 = var28.getDirectives();
//     boolean var30 = var28.isThrow();
//     boolean var32 = var28.getBooleanProp(1);
//     boolean var33 = var28.isQualifiedName();
//     com.google.javascript.rhino.jstype.FunctionType var34 = var23.createFunctionType(var24, var28);
//     java.lang.Iterable var36 = var23.getTypesWithProperty("ERROR");
//     java.lang.Iterable var38 = var23.getEachReferenceTypeWithProperty("ERROR");
//     com.google.javascript.rhino.ErrorReporter var39 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var39);
//     com.google.javascript.rhino.jstype.JSType var41 = null;
//     com.google.javascript.jscomp.AbstractCompiler var42 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var43 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var44 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var46 = var44.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var47 = var43.getDirectedPredNodes(var46);
//     com.google.javascript.jscomp.NodeTraversal.Callback var48 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var42, var47, var48);
//     com.google.javascript.rhino.jstype.FunctionType var50 = var40.createFunctionType(var41, var47);
//     java.lang.Iterable var51 = var50.getImplementedInterfaces();
//     boolean var52 = var50.isStruct();
//     java.lang.String var53 = var50.getDisplayName();
//     com.google.javascript.jscomp.AbstractCompiler var54 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var55 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var58 = var56.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var59 = var55.getDirectedPredNodes(var58);
//     com.google.javascript.jscomp.NodeTraversal.Callback var60 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var54, var59, var60);
//     java.util.Map var62 = null;
//     var6.defineDelegateProxyPrototypeProperties(var23, (com.google.javascript.rhino.jstype.StaticScope)var50, var59, var62);
//     com.google.javascript.rhino.jstype.ObjectType var64 = var50.toObjectType();
//     com.google.javascript.rhino.JSDocInfo var65 = var50.getJSDocInfo();
//     com.google.javascript.rhino.jstype.JSType var66 = var2.caseObjectType((com.google.javascript.rhino.jstype.ObjectType)var50);
//     com.google.javascript.rhino.jstype.JSType var67 = var2.caseBooleanType();
// 
//   }

  public void test401() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test401"); }


    java.lang.String var1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("window");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(window)"+ "'", var1.equals("(window)"));

  }

  public void test402() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test402"); }


    com.google.javascript.rhino.jstype.JSType var0 = null;
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    com.google.javascript.jscomp.AbstractCompiler var4 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var6 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var8 = var6.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var9 = var5.getDirectedPredNodes(var8);
    com.google.javascript.jscomp.NodeTraversal.Callback var10 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var4, var9, var10);
    com.google.javascript.rhino.jstype.FunctionType var12 = var2.createFunctionType(var3, var9);
    com.google.javascript.rhino.jstype.TemplateType var13 = var2.getObjectElementKey();
    com.google.javascript.jscomp.CodingConvention var14 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var15 = new com.google.javascript.jscomp.GoogleCodingConvention(var14);
    com.google.javascript.rhino.Node var19 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var20 = var19.getDirectives();
    var19.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.exprResult(var19);
    com.google.javascript.jscomp.CodingConvention.Bind var25 = var15.describeFunctionBind(var19);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var26 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var27 = var26.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var28 = new com.google.javascript.jscomp.ComposeWarningsGuard(var27);
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.script(var27);
    boolean var30 = var15.isPrototypeAlias(var29);
    com.google.javascript.rhino.ErrorReporter var31 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var31);
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.Node var37 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var38 = var37.getDirectives();
    boolean var39 = var37.isThrow();
    boolean var41 = var37.getBooleanProp(1);
    boolean var42 = var37.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var43 = var32.createFunctionType(var33, var37);
    java.lang.Iterable var45 = var32.getTypesWithProperty("ERROR");
    java.lang.Iterable var47 = var32.getEachReferenceTypeWithProperty("ERROR");
    com.google.javascript.rhino.ErrorReporter var48 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var48);
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.jscomp.AbstractCompiler var51 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var52 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var53 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var55 = var53.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var56 = var52.getDirectedPredNodes(var55);
    com.google.javascript.jscomp.NodeTraversal.Callback var57 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var51, var56, var57);
    com.google.javascript.rhino.jstype.FunctionType var59 = var49.createFunctionType(var50, var56);
    java.lang.Iterable var60 = var59.getImplementedInterfaces();
    boolean var61 = var59.isStruct();
    java.lang.String var62 = var59.getDisplayName();
    com.google.javascript.jscomp.AbstractCompiler var63 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var64 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var65 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var67 = var65.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var68 = var64.getDirectedPredNodes(var67);
    com.google.javascript.jscomp.NodeTraversal.Callback var69 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var63, var68, var69);
    java.util.Map var71 = null;
    var15.defineDelegateProxyPrototypeProperties(var32, (com.google.javascript.rhino.jstype.StaticScope)var59, var68, var71);
    com.google.javascript.rhino.jstype.ObjectType var73 = var2.createObjectType((com.google.javascript.rhino.jstype.ObjectType)var59);
    boolean var74 = com.google.javascript.rhino.jstype.JSType.isEquivalent(var0, (com.google.javascript.rhino.jstype.JSType)var59);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.ObjectType var75 = var59.getInstanceType();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);

  }

  public void test403() {}
//   public void test403() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test403"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = null;
//     com.google.javascript.jscomp.AbstractCompiler var3 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var5.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var8 = var4.getDirectedPredNodes(var7);
//     com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var3, var8, var9);
//     com.google.javascript.rhino.jstype.FunctionType var11 = var1.createFunctionType(var2, var8);
//     com.google.javascript.rhino.jstype.TemplateType var12 = var1.getObjectElementKey();
//     com.google.javascript.jscomp.CodingConvention var13 = com.google.javascript.jscomp.CodingConventions.getDefault();
//     com.google.javascript.jscomp.GoogleCodingConvention var14 = new com.google.javascript.jscomp.GoogleCodingConvention(var13);
//     com.google.javascript.rhino.Node var18 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var19 = var18.getDirectives();
//     var18.putIntProp((-1), 0);
//     com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.exprResult(var18);
//     com.google.javascript.jscomp.CodingConvention.Bind var24 = var14.describeFunctionBind(var18);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var25 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var26 = var25.getEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var27 = new com.google.javascript.jscomp.ComposeWarningsGuard(var26);
//     com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.script(var26);
//     boolean var29 = var14.isPrototypeAlias(var28);
//     com.google.javascript.rhino.ErrorReporter var30 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
//     com.google.javascript.rhino.jstype.JSType var32 = null;
//     com.google.javascript.rhino.Node var36 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var37 = var36.getDirectives();
//     boolean var38 = var36.isThrow();
//     boolean var40 = var36.getBooleanProp(1);
//     boolean var41 = var36.isQualifiedName();
//     com.google.javascript.rhino.jstype.FunctionType var42 = var31.createFunctionType(var32, var36);
//     java.lang.Iterable var44 = var31.getTypesWithProperty("ERROR");
//     java.lang.Iterable var46 = var31.getEachReferenceTypeWithProperty("ERROR");
//     com.google.javascript.rhino.ErrorReporter var47 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
//     com.google.javascript.rhino.jstype.JSType var49 = null;
//     com.google.javascript.jscomp.AbstractCompiler var50 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var52 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var54 = var52.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var55 = var51.getDirectedPredNodes(var54);
//     com.google.javascript.jscomp.NodeTraversal.Callback var56 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var50, var55, var56);
//     com.google.javascript.rhino.jstype.FunctionType var58 = var48.createFunctionType(var49, var55);
//     java.lang.Iterable var59 = var58.getImplementedInterfaces();
//     boolean var60 = var58.isStruct();
//     java.lang.String var61 = var58.getDisplayName();
//     com.google.javascript.jscomp.AbstractCompiler var62 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var63 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var64 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var66 = var64.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var67 = var63.getDirectedPredNodes(var66);
//     com.google.javascript.jscomp.NodeTraversal.Callback var68 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var62, var67, var68);
//     java.util.Map var70 = null;
//     var14.defineDelegateProxyPrototypeProperties(var31, (com.google.javascript.rhino.jstype.StaticScope)var58, var67, var70);
//     com.google.javascript.rhino.jstype.ObjectType var72 = var1.createObjectType((com.google.javascript.rhino.jstype.ObjectType)var58);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var73 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
//     com.google.javascript.rhino.jstype.JSType var74 = null;
//     boolean var75 = var73.addVarArgs(var74);
// 
//   }

  public void test404() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test404"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setNameReferenceReportPath("");
    var0.setSyntheticBlockEndMarker("hi!");
    var0.setTightenTypes(true);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var7 = null;
    var0.setLanguageOut(var7);
    boolean var9 = var0.getInstrumentMemoryAllocations();
    var0.setPrettyPrint(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test405() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test405"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.jscomp.AbstractCompiler var3 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var5.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var8 = var4.getDirectedPredNodes(var7);
    com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var3, var8, var9);
    com.google.javascript.rhino.jstype.FunctionType var11 = var1.createFunctionType(var2, var8);
    java.util.Set var12 = var11.getOwnPropertyNames();
    boolean var13 = var11.isAllType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test406() {}
//   public void test406() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test406"); }
// 
// 
//     com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var4 = var3.getDirectives();
//     boolean var5 = var3.isReturn();
//     com.google.javascript.rhino.Node var6 = null;
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.number((-1.0d));
//     var3.addChildAfter(var6, var8);
// 
//   }

  public void test407() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test407"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
    com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var6 = var5.getDirectives();
    var5.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.exprResult(var5);
    com.google.javascript.jscomp.CodingConvention.Bind var11 = var1.describeFunctionBind(var5);
    boolean var13 = var1.isConstantKey("(function (): ?|null)");
    com.google.javascript.jscomp.CodingConvention var14 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var15 = new com.google.javascript.jscomp.GoogleCodingConvention(var14);
    com.google.javascript.rhino.Node var19 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var23 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.comma(var19, var23);
    boolean var25 = var23.isUnscopedQualifiedName();
    com.google.javascript.rhino.Node var29 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var30 = var29.getDirectives();
    int var31 = var29.getChangeTime();
    boolean var32 = var29.isAssignAdd();
    com.google.javascript.rhino.Node var33 = var23.clonePropsFrom(var29);
    com.google.javascript.jscomp.CodingConvention.DelegateRelationship var34 = var15.getDelegateRelationship(var23);
    boolean var36 = var15.isConstantKey("hi!: ERROR");
    com.google.javascript.rhino.Node var40 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var41 = var40.getDirectives();
    boolean var42 = var40.isThrow();
    boolean var44 = var40.getBooleanProp(1);
    boolean var45 = var40.isQualifiedName();
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var46 = var15.getClassesDefinedByCall(var40);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var47 = var1.isVarArgsParameter(var40);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);

  }

  public void test408() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test408"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var6 = var5.getDirectives();
    var5.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.not(var5);
    com.google.javascript.rhino.jstype.StaticSourceFile var11 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var10);
    com.google.javascript.rhino.JSDocInfo var12 = null;
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNodeDeclaration(var0, "ERROR", var10, var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.voidNode(var10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test409() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test409"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var3 = var2.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
    java.lang.String var6 = var1.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var7 = null;
    com.google.javascript.jscomp.DefaultPassConfig var8 = new com.google.javascript.jscomp.DefaultPassConfig(var7);
    var1.setPassConfig((com.google.javascript.jscomp.PassConfig)var8);
    java.io.PrintStream var10 = null;
    com.google.javascript.jscomp.Compiler var11 = new com.google.javascript.jscomp.Compiler(var10);
    var11.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var14 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var15 = var14.getOriginalPath();
    com.google.javascript.rhino.Node var16 = var11.parse(var14);
    var14.setOriginalPath("{ }");
    com.google.javascript.rhino.Node var19 = var1.parse(var14);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var22 = var20.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var23 = var20.getGraphvizEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var24 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var23, var24);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var26 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var27 = var26.getEdges();
    com.google.javascript.jscomp.deps.SortedDependencies var28 = new com.google.javascript.jscomp.deps.SortedDependencies(var27);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var29 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var30 = var29.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var31 = new com.google.javascript.jscomp.ComposeWarningsGuard(var30);
    com.google.javascript.jscomp.JSModuleGraph var32 = new com.google.javascript.jscomp.JSModuleGraph(var30);
    java.util.List var33 = var28.getSortedDependenciesOf(var30);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var35 = var34.getEdges();
    com.google.javascript.jscomp.CompilerOptions var36 = new com.google.javascript.jscomp.CompilerOptions();
    var36.setNameReferenceReportPath("");
    var36.setSyntheticBlockEndMarker("hi!");
    var36.setTightenTypes(true);
    java.util.Set var43 = null;
    var36.setCssRenamingWhitelist(var43);
    var36.setOptimizeArgumentsArray(true);
    com.google.javascript.jscomp.Result var47 = var1.<com.google.javascript.jscomp.SourceFile>compileModules(var30, var35, var36);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.normalize();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test410() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test410"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
    com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var6 = var5.getDirectives();
    var5.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.exprResult(var5);
    com.google.javascript.jscomp.CodingConvention.Bind var11 = var1.describeFunctionBind(var5);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var13 = var12.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var14 = new com.google.javascript.jscomp.ComposeWarningsGuard(var13);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.script(var13);
    boolean var16 = var1.isPrototypeAlias(var15);
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.Node var23 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var24 = var23.getDirectives();
    boolean var25 = var23.isThrow();
    boolean var27 = var23.getBooleanProp(1);
    boolean var28 = var23.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var29 = var18.createFunctionType(var19, var23);
    java.lang.Iterable var31 = var18.getTypesWithProperty("ERROR");
    java.lang.Iterable var33 = var18.getEachReferenceTypeWithProperty("ERROR");
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.jscomp.AbstractCompiler var37 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var38 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var39 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var41 = var39.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var42 = var38.getDirectedPredNodes(var41);
    com.google.javascript.jscomp.NodeTraversal.Callback var43 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var37, var42, var43);
    com.google.javascript.rhino.jstype.FunctionType var45 = var35.createFunctionType(var36, var42);
    java.lang.Iterable var46 = var45.getImplementedInterfaces();
    boolean var47 = var45.isStruct();
    java.lang.String var48 = var45.getDisplayName();
    com.google.javascript.jscomp.AbstractCompiler var49 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var53 = var51.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var54 = var50.getDirectedPredNodes(var53);
    com.google.javascript.jscomp.NodeTraversal.Callback var55 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var49, var54, var55);
    java.util.Map var57 = null;
    var1.defineDelegateProxyPrototypeProperties(var18, (com.google.javascript.rhino.jstype.StaticScope)var45, var54, var57);
    com.google.javascript.rhino.jstype.ObjectType var59 = var45.toObjectType();
    java.lang.Iterable var60 = var45.getExtendedInterfaces();
    boolean var61 = var45.hasImplementedInterfaces();
    boolean var62 = var45.isUnionType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test411() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test411"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.trueNode();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setDouble(0.0d);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test412() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test412"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var1 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var2 = var1.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var3 = new com.google.javascript.jscomp.ComposeWarningsGuard(var2);
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.script(var2);
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var7 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var8 = var7.getEdges();
    com.google.javascript.jscomp.deps.SortedDependencies var9 = new com.google.javascript.jscomp.deps.SortedDependencies(var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var11 = var10.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var12 = new com.google.javascript.jscomp.ComposeWarningsGuard(var11);
    com.google.javascript.jscomp.JSModuleGraph var13 = new com.google.javascript.jscomp.JSModuleGraph(var11);
    java.util.List var14 = var9.getSortedDependenciesOf(var11);
    com.google.javascript.rhino.Node var15 = var6.createParametersWithVarArgs(var14);
    com.google.javascript.rhino.Node var20 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var21 = var20.getDirectives();
    int var22 = var20.getChangeTime();
    boolean var23 = var20.isAssignAdd();
    java.lang.String var24 = var20.getSourceFileName();
    boolean var25 = var20.isCast();
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.Node var32 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var33 = var32.getDirectives();
    boolean var34 = var32.isThrow();
    boolean var36 = var32.getBooleanProp(1);
    boolean var37 = var32.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var38 = var27.createFunctionType(var28, var32);
    boolean var39 = var38.matchesNumberContext();
    com.google.javascript.rhino.jstype.ObjectType var40 = var6.createObjectType("LABEL_NAME hi!\n", var20, (com.google.javascript.rhino.jstype.ObjectType)var38);
    com.google.javascript.rhino.Node var44 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var45 = var44.getDirectives();
    var44.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.not(var44);
    com.google.javascript.rhino.jstype.StaticSourceFile var50 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var49);
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var53 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var54 = var53.getEdges();
    com.google.javascript.jscomp.deps.SortedDependencies var55 = new com.google.javascript.jscomp.deps.SortedDependencies(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var57 = var56.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var58 = new com.google.javascript.jscomp.ComposeWarningsGuard(var57);
    com.google.javascript.jscomp.JSModuleGraph var59 = new com.google.javascript.jscomp.JSModuleGraph(var57);
    java.util.List var60 = var55.getSortedDependenciesOf(var57);
    com.google.javascript.rhino.Node var61 = var52.createParametersWithVarArgs(var60);
    java.lang.String var62 = var49.checkTreeEquals(var61);
    com.google.javascript.rhino.Node var65 = new com.google.javascript.rhino.Node(100, var4, var20, var61, 10, 10);
    com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.Node.newString("hi!", 10, 0);
    java.lang.Object var71 = var69.getProp(1);
    boolean var72 = var69.isOnlyModifiesThisCall();
    com.google.javascript.rhino.jstype.JSType var73 = var69.getJSType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var74 = com.google.javascript.rhino.IR.doNode(var20, var69);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "Node tree inequality:\nTree1:\nNOT\n    BITXOR 10\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NOT\n    BITXOR 10\n\n\nSubtree2: PARAM_LIST\n"+ "'", var62.equals("Node tree inequality:\nTree1:\nNOT\n    BITXOR 10\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NOT\n    BITXOR 10\n\n\nSubtree2: PARAM_LIST\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);

  }

  public void test413() {}
//   public void test413() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test413"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = null;
//     com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
//     var2.setNameReferenceReportPath("");
//     var2.setSyntheticBlockEndMarker("hi!");
//     var2.setTightenTypes(true);
//     java.util.Set var9 = null;
//     var2.setCssRenamingWhitelist(var9);
//     com.google.javascript.jscomp.VariableMap var11 = null;
//     var2.setInputAnonymousFunctionNamingMap(var11);
//     com.google.javascript.jscomp.CheckLevel var14 = null;
//     com.google.javascript.jscomp.DiagnosticType var16 = com.google.javascript.jscomp.DiagnosticType.make("", var14, "");
//     com.google.javascript.jscomp.DiagnosticGroup var17 = com.google.javascript.jscomp.DiagnosticGroup.forType(var16);
//     com.google.javascript.jscomp.CompilerOptions var18 = new com.google.javascript.jscomp.CompilerOptions();
//     var18.setPropertyAffinity(false);
//     com.google.javascript.jscomp.CheckLevel var21 = null;
//     var18.setBrokenClosureRequiresLevel(var21);
//     var18.setOptimizeParameters(false);
//     var18.setInlineFunctions(true);
//     boolean var27 = var18.assumeStrictThis();
//     var18.setTransformAMDToCJSModules(true);
//     var18.setRewriteNewDateGoogNow(true);
//     var18.setAmbiguateProperties(true);
//     com.google.javascript.jscomp.DiagnosticType var39 = com.google.javascript.jscomp.DiagnosticType.disabled("LABEL_NAME hi!\n", "LABEL_NAME hi!\n");
//     java.lang.String[] var41 = new java.lang.String[] { "Node tree inequality:\nTree1:\nNOT\n    BITXOR 10\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NOT\n    BITXOR 10\n\n\nSubtree2: PARAM_LIST\n"};
//     com.google.javascript.jscomp.JSError var42 = com.google.javascript.jscomp.JSError.make("", 0, 0, var39, var41);
//     com.google.javascript.jscomp.CheckLevel var43 = var42.getDefaultLevel();
//     var18.setCheckRequires(var43);
//     var2.setWarningLevel(var17, var43);
//     com.google.javascript.jscomp.CheckLevel var47 = null;
//     com.google.javascript.jscomp.DiagnosticType var49 = com.google.javascript.jscomp.DiagnosticType.make("", var47, "window");
//     com.google.javascript.jscomp.DiagnosticType var55 = com.google.javascript.jscomp.DiagnosticType.disabled("LABEL_NAME hi!\n", "LABEL_NAME hi!\n");
//     java.lang.String[] var57 = new java.lang.String[] { "Node tree inequality:\nTree1:\nNOT\n    BITXOR 10\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NOT\n    BITXOR 10\n\n\nSubtree2: PARAM_LIST\n"};
//     com.google.javascript.jscomp.JSError var58 = com.google.javascript.jscomp.JSError.make("", 0, 0, var55, var57);
//     com.google.javascript.jscomp.JSError var59 = com.google.javascript.jscomp.JSError.make("LABEL_NAME hi!\n", var1, var43, var49, var57);
// 
//   }

  public void test414() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test414"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("2014/12/24 01:19");
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.returnNode(var1);
    boolean var3 = var1.isBreak();
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var8 = var7.getDirectives();
    int var9 = var7.getChangeTime();
    boolean var10 = var7.isAssignAdd();
    java.lang.String var11 = var7.getSourceFileName();
    boolean var12 = var7.isContinue();
    int var13 = var7.getLineno();
    com.google.javascript.rhino.Node var17 = new com.google.javascript.rhino.Node(100, 1, 10);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.returnNode(var17);
    boolean var19 = var7.isEquivalentToShallow(var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.eq(var1, var18);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test415() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test415"); }


    com.google.javascript.jscomp.AstValidator var0 = new com.google.javascript.jscomp.AstValidator();
    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.continueNode();
    boolean var2 = var1.isSwitch();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.validateCodeRoot(var1);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test416() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test416"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setPropertyAffinity(false);
    com.google.javascript.jscomp.CheckLevel var3 = null;
    var0.setBrokenClosureRequiresLevel(var3);
    var0.setOptimizeParameters(false);
    var0.setInlineFunctions(true);
    var0.setOptimizeReturns(false);
    var0.setAliasStringsBlacklist("goog.abstractMethod");

  }

  public void test417() {}
//   public void test417() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test417"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.TemplateTypeMap var1 = null;
//     com.google.javascript.rhino.jstype.TemplateTypeMapReplacer var2 = new com.google.javascript.rhino.jstype.TemplateTypeMapReplacer(var0, var1);
//     com.google.javascript.rhino.jstype.EnumElementType var3 = null;
//     com.google.javascript.rhino.jstype.JSType var4 = var2.caseEnumElementType(var3);
//     com.google.javascript.rhino.ErrorReporter var5 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.jscomp.AbstractCompiler var8 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var9 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var12 = var10.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var13 = var9.getDirectedPredNodes(var12);
//     com.google.javascript.jscomp.NodeTraversal.Callback var14 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var8, var13, var14);
//     com.google.javascript.rhino.jstype.FunctionType var16 = var6.createFunctionType(var7, var13);
//     com.google.javascript.rhino.ErrorReporter var17 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var19 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var20 = var19.getEdges();
//     com.google.javascript.jscomp.deps.SortedDependencies var21 = new com.google.javascript.jscomp.deps.SortedDependencies(var20);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var22 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var23 = var22.getEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var24 = new com.google.javascript.jscomp.ComposeWarningsGuard(var23);
//     com.google.javascript.jscomp.JSModuleGraph var25 = new com.google.javascript.jscomp.JSModuleGraph(var23);
//     java.util.List var26 = var21.getSortedDependenciesOf(var23);
//     com.google.javascript.rhino.Node var27 = var18.createParametersWithVarArgs(var26);
//     com.google.common.collect.ImmutableList var28 = null;
//     com.google.common.collect.ImmutableList var29 = null;
//     com.google.javascript.rhino.jstype.TemplateTypeMap var30 = var18.createTemplateTypeMap(var28, var29);
//     java.lang.String var31 = var30.toString();
//     com.google.javascript.rhino.jstype.TemplateTypeMapReplacer var32 = new com.google.javascript.rhino.jstype.TemplateTypeMapReplacer(var6, var30);
//     com.google.javascript.rhino.ErrorReporter var33 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33);
//     com.google.javascript.rhino.ErrorReporter var35 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var35);
//     com.google.javascript.rhino.jstype.JSType var37 = null;
//     com.google.javascript.jscomp.AbstractCompiler var38 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var39 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var42 = var40.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var43 = var39.getDirectedPredNodes(var42);
//     com.google.javascript.jscomp.NodeTraversal.Callback var44 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var38, var43, var44);
//     com.google.javascript.rhino.jstype.FunctionType var46 = var36.createFunctionType(var37, var43);
//     com.google.javascript.rhino.jstype.JSType var47 = var34.createNullableType((com.google.javascript.rhino.jstype.JSType)var46);
//     com.google.javascript.rhino.ErrorReporter var48 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var48);
//     com.google.javascript.rhino.jstype.JSType var50 = null;
//     com.google.javascript.rhino.Node var54 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var55 = var54.getDirectives();
//     boolean var56 = var54.isThrow();
//     boolean var58 = var54.getBooleanProp(1);
//     boolean var59 = var54.isQualifiedName();
//     com.google.javascript.rhino.jstype.FunctionType var60 = var49.createFunctionType(var50, var54);
//     com.google.javascript.rhino.jstype.JSType[] var61 = new com.google.javascript.rhino.jstype.JSType[] { var50};
//     com.google.javascript.rhino.Node var62 = var34.createParameters(var61);
//     com.google.javascript.rhino.jstype.TemplateType var64 = var34.createTemplateType("");
//     com.google.javascript.rhino.jstype.JSType var69 = var6.getType((com.google.javascript.rhino.jstype.StaticScope)var64, "EXPR_RESULT", "{ }", 0, 10);
//     com.google.javascript.rhino.jstype.JSType var70 = var2.caseTemplateType(var64);
// 
//   }

  public void test418() {}
//   public void test418() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test418"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
//     java.lang.String var6 = var1.getAstDotGraph();
//     com.google.javascript.jscomp.CompilerOptions var7 = null;
//     com.google.javascript.jscomp.DefaultPassConfig var8 = new com.google.javascript.jscomp.DefaultPassConfig(var7);
//     var1.setPassConfig((com.google.javascript.jscomp.PassConfig)var8);
//     com.google.javascript.jscomp.Region var12 = var1.getSourceRegion("EXPR_RESULT", 7);
// 
//   }

  public void test419() {}
//   public void test419() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test419"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
//     java.lang.String var6 = var1.getAstDotGraph();
//     com.google.javascript.jscomp.CompilerOptions var7 = null;
//     com.google.javascript.jscomp.DefaultPassConfig var8 = new com.google.javascript.jscomp.DefaultPassConfig(var7);
//     var1.setPassConfig((com.google.javascript.jscomp.PassConfig)var8);
//     java.io.PrintStream var10 = null;
//     com.google.javascript.jscomp.Compiler var11 = new com.google.javascript.jscomp.Compiler(var10);
//     var11.reportCodeChange();
//     com.google.javascript.jscomp.SourceFile var14 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
//     java.lang.String var15 = var14.getOriginalPath();
//     com.google.javascript.rhino.Node var16 = var11.parse(var14);
//     var14.setOriginalPath("{ }");
//     com.google.javascript.rhino.Node var19 = var1.parse(var14);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var22 = var20.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var23 = var20.getGraphvizEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var24 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var23, var24);
//     com.google.javascript.jscomp.MessageFormatter var26 = null;
//     java.util.logging.Logger var27 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var28 = new com.google.javascript.jscomp.LoggerErrorManager(var26, var27);
//     int var29 = var28.getWarningCount();
//     com.google.javascript.jscomp.JSError[] var30 = var28.getWarnings();
//     var1.setErrorManager((com.google.javascript.jscomp.ErrorManager)var28);
//     com.google.javascript.jscomp.CompilerOptions var32 = new com.google.javascript.jscomp.CompilerOptions();
//     var32.setNameReferenceReportPath("");
//     var32.setSyntheticBlockEndMarker("hi!");
//     var32.setTightenTypes(true);
//     java.util.Set var39 = null;
//     var32.setCssRenamingWhitelist(var39);
//     var32.setInlineVariables(false);
//     var32.setCollapseVariableDeclarations(true);
//     com.google.javascript.jscomp.CheckLevel var45 = null;
//     var32.setCheckGlobalThisLevel(var45);
//     var32.setInlineVariables(false);
//     boolean var49 = var32.assumeStrictThis();
//     var32.setFoldConstants(false);
//     var32.setExportLocalPropertyDefinitions(false);
//     var32.setInferTypes(true);
//     var1.initOptions(var32);
// 
//   }

  public void test420() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test420"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
    com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.Node var9 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var10 = var9.getDirectives();
    boolean var11 = var9.isThrow();
    boolean var13 = var9.getBooleanProp(1);
    boolean var14 = var9.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var15 = var4.createFunctionType(var5, var9);
    com.google.javascript.rhino.ErrorReporter var16 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.jscomp.AbstractCompiler var19 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var23 = var21.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var24 = var20.getDirectedPredNodes(var23);
    com.google.javascript.jscomp.NodeTraversal.Callback var25 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var19, var24, var25);
    com.google.javascript.rhino.jstype.FunctionType var27 = var17.createFunctionType(var18, var24);
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.jscomp.AbstractCompiler var32 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var36 = var34.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var37 = var33.getDirectedPredNodes(var36);
    com.google.javascript.jscomp.NodeTraversal.Callback var38 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var32, var37, var38);
    com.google.javascript.rhino.jstype.FunctionType var40 = var30.createFunctionType(var31, var37);
    com.google.javascript.rhino.Node var41 = null;
    boolean var42 = var27.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var40, var41);
    com.google.javascript.rhino.jstype.FunctionType var43 = var40.toMaybeFunctionType();
    boolean var44 = var40.hasCachedValues();
    com.google.javascript.rhino.ErrorReporter var45 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.jscomp.AbstractCompiler var50 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var52 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var54 = var52.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var55 = var51.getDirectedPredNodes(var54);
    com.google.javascript.jscomp.NodeTraversal.Callback var56 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var50, var55, var56);
    com.google.javascript.rhino.jstype.FunctionType var58 = var48.createFunctionType(var49, var55);
    com.google.javascript.rhino.jstype.JSType var59 = var46.createNullableType((com.google.javascript.rhino.jstype.JSType)var58);
    boolean var60 = var40.canCastTo(var59);
    com.google.javascript.jscomp.CodingConvention.SubclassType var61 = null;
    var2.applySubclassRelationship(var15, var40, var61);
    int var63 = var15.getMaxArguments();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.FunctionType var64 = var15.cloneWithoutArrowType();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);

  }

  public void test421() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test421"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.rhino.Node var6 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var7 = var6.getDirectives();
    boolean var8 = var6.isThrow();
    boolean var10 = var6.getBooleanProp(1);
    boolean var11 = var6.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var12 = var1.createFunctionType(var2, var6);
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.AbstractCompiler var16 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var20 = var18.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var21 = var17.getDirectedPredNodes(var20);
    com.google.javascript.jscomp.NodeTraversal.Callback var22 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var16, var21, var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var14.createFunctionType(var15, var21);
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.jscomp.AbstractCompiler var29 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var31 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var33 = var31.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var34 = var30.getDirectedPredNodes(var33);
    com.google.javascript.jscomp.NodeTraversal.Callback var35 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var29, var34, var35);
    com.google.javascript.rhino.jstype.FunctionType var37 = var27.createFunctionType(var28, var34);
    com.google.javascript.rhino.Node var38 = null;
    boolean var39 = var24.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var37, var38);
    com.google.javascript.rhino.jstype.FunctionType var40 = var37.toMaybeFunctionType();
    com.google.javascript.rhino.jstype.JSType var42 = var37.getPropertyType("(function (): ?|null)");
    com.google.javascript.rhino.jstype.EnumElementType var43 = var37.toMaybeEnumElementType();
    boolean var44 = var37.makesDicts();
    boolean var45 = var37.isOrdinaryFunction();
    com.google.javascript.jscomp.CompilerOptions var46 = new com.google.javascript.jscomp.CompilerOptions();
    var46.setNameReferenceReportPath("");
    var46.setSyntheticBlockEndMarker("hi!");
    var46.setTightenTypes(true);
    java.util.Set var53 = null;
    var46.setCssRenamingWhitelist(var53);
    var46.setInlineVariables(false);
    com.google.javascript.jscomp.CheckLevel var57 = null;
    var46.setCheckUnreachableCode(var57);
    var46.setDeadAssignmentElimination(true);
    byte[] var61 = new byte[] { };
    var46.setInputVariableMapSerialized(var61);
    var46.setPrintInputDelimiter(true);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var65 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var66 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var68 = var66.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var69 = var65.getDirectedPredNodes(var68);
    var46.setSourceMapLocationMappings(var69);
    com.google.javascript.rhino.jstype.FunctionType var71 = var1.createFunctionTypeWithVarArgs((com.google.javascript.rhino.jstype.JSType)var37, var69);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.FunctionType var72 = var37.getSuperClassConstructor();
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test422() {}
//   public void test422() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test422"); }
// 
// 
//     java.io.InputStream var2 = null;
//     com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromInputStream("LABEL_NAME hi!\n", "2014/12/24 01:19", var2);
// 
//   }

  public void test423() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test423"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInstrumentMemoryAllocations(false);
    var0.setRemoveUnusedLocalVars(true);
    var0.setInstrumentForCoverage(true);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var7 = var0.getLanguageIn();
    var0.setCollapseVariableDeclarations(false);
    com.google.javascript.jscomp.VariableRenamingPolicy var10 = null;
    com.google.javascript.jscomp.PropertyRenamingPolicy var11 = null;
    var0.setRenamingPolicy(var10, var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test424() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test424"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var2 = var1.getOriginalPath();
    int var4 = var1.getColumnOfOffset(10);
    com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var1, false);
    java.io.PrintStream var7 = null;
    com.google.javascript.jscomp.Compiler var8 = new com.google.javascript.jscomp.Compiler(var7);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var9 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var10 = var9.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var11 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var8, var10, var11);
    java.lang.String var13 = var8.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var14 = null;
    com.google.javascript.jscomp.DefaultPassConfig var15 = new com.google.javascript.jscomp.DefaultPassConfig(var14);
    var8.setPassConfig((com.google.javascript.jscomp.PassConfig)var15);
    java.io.PrintStream var17 = null;
    com.google.javascript.jscomp.Compiler var18 = new com.google.javascript.jscomp.Compiler(var17);
    var18.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var21 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var22 = var21.getOriginalPath();
    com.google.javascript.rhino.Node var23 = var18.parse(var21);
    var21.setOriginalPath("{ }");
    com.google.javascript.rhino.Node var26 = var8.parse(var21);
    var6.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var8);
    com.google.javascript.jscomp.CompilerInput var28 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var6);
    com.google.javascript.rhino.InputId var29 = var28.getInputId();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var30 = var28.getPathRelativeToClosureBase();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ""+ "'", var13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test425() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test425"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.disabled("Object#Element", "Node tree inequality:\nTree1:\nNOT\n    BITXOR 10\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NOT\n    BITXOR 10\n\n\nSubtree2: PARAM_LIST\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test426() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test426"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    var0.pushEdgeAnnotations();
    java.util.List var2 = var0.getGraphvizEdges();
    var0.clearNodeAnnotations();
    java.util.List var4 = var0.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
    var5.setNameReferenceReportPath("");
    var5.setSyntheticBlockEndMarker("hi!");
    var5.setTightenTypes(true);
    var5.setSyntheticBlockStartMarker("(function (): ?|null)");
    var5.setSpecializeInitialModule(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var16 = var0.getDirectedSuccNodes((java.lang.Object)var5);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test427() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test427"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var3 = var2.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
    java.lang.String var6 = var1.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var7 = null;
    com.google.javascript.jscomp.DefaultPassConfig var8 = new com.google.javascript.jscomp.DefaultPassConfig(var7);
    var1.setPassConfig((com.google.javascript.jscomp.PassConfig)var8);
    java.io.PrintStream var10 = null;
    com.google.javascript.jscomp.Compiler var11 = new com.google.javascript.jscomp.Compiler(var10);
    var11.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var14 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var15 = var14.getOriginalPath();
    com.google.javascript.rhino.Node var16 = var11.parse(var14);
    var14.setOriginalPath("{ }");
    com.google.javascript.rhino.Node var19 = var1.parse(var14);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var22 = var20.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var23 = var20.getGraphvizEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var24 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var23, var24);
    com.google.javascript.jscomp.MessageFormatter var26 = null;
    java.util.logging.Logger var27 = null;
    com.google.javascript.jscomp.LoggerErrorManager var28 = new com.google.javascript.jscomp.LoggerErrorManager(var26, var27);
    int var29 = var28.getWarningCount();
    com.google.javascript.jscomp.JSError[] var30 = var28.getWarnings();
    var1.setErrorManager((com.google.javascript.jscomp.ErrorManager)var28);
    var28.generateReport();
    int var33 = var28.getErrorCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);

  }

  public void test428() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test428"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
    com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.Node var9 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var10 = var9.getDirectives();
    boolean var11 = var9.isThrow();
    boolean var13 = var9.getBooleanProp(1);
    boolean var14 = var9.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var15 = var4.createFunctionType(var5, var9);
    com.google.javascript.rhino.ErrorReporter var16 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.jscomp.AbstractCompiler var19 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var23 = var21.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var24 = var20.getDirectedPredNodes(var23);
    com.google.javascript.jscomp.NodeTraversal.Callback var25 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var19, var24, var25);
    com.google.javascript.rhino.jstype.FunctionType var27 = var17.createFunctionType(var18, var24);
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.jscomp.AbstractCompiler var32 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var36 = var34.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var37 = var33.getDirectedPredNodes(var36);
    com.google.javascript.jscomp.NodeTraversal.Callback var38 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var32, var37, var38);
    com.google.javascript.rhino.jstype.FunctionType var40 = var30.createFunctionType(var31, var37);
    com.google.javascript.rhino.Node var41 = null;
    boolean var42 = var27.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var40, var41);
    com.google.javascript.rhino.jstype.FunctionType var43 = var40.toMaybeFunctionType();
    boolean var44 = var40.hasCachedValues();
    com.google.javascript.rhino.ErrorReporter var45 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.jscomp.AbstractCompiler var50 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var52 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var54 = var52.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var55 = var51.getDirectedPredNodes(var54);
    com.google.javascript.jscomp.NodeTraversal.Callback var56 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var50, var55, var56);
    com.google.javascript.rhino.jstype.FunctionType var58 = var48.createFunctionType(var49, var55);
    com.google.javascript.rhino.jstype.JSType var59 = var46.createNullableType((com.google.javascript.rhino.jstype.JSType)var58);
    boolean var60 = var40.canCastTo(var59);
    com.google.javascript.jscomp.CodingConvention.SubclassType var61 = null;
    var2.applySubclassRelationship(var15, var40, var61);
    boolean var64 = var2.isSuperClassReference("Node tree inequality:\nTree1:\nNOT\n    BITXOR 10\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NOT\n    BITXOR 10\n\n\nSubtree2: PARAM_LIST\n");
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.trueNode();
    com.google.javascript.rhino.Node var69 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var70 = var69.getDirectives();
    int var71 = var69.getChangeTime();
    boolean var72 = var69.isAssignAdd();
    java.lang.String var73 = var69.getSourceFileName();
    boolean var74 = var69.isContinue();
    boolean var75 = var69.isGetterDef();
    java.lang.String var76 = var2.extractClassNameIfRequire(var65, var69);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var77 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var78 = var77.getEdges();
    com.google.javascript.jscomp.deps.SortedDependencies var79 = new com.google.javascript.jscomp.deps.SortedDependencies(var78);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var80 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var81 = var80.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var82 = new com.google.javascript.jscomp.ComposeWarningsGuard(var81);
    com.google.javascript.jscomp.JSModuleGraph var83 = new com.google.javascript.jscomp.JSModuleGraph(var81);
    java.util.List var84 = var79.getSortedDependenciesOf(var81);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var85 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var86 = var85.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var87 = new com.google.javascript.jscomp.ComposeWarningsGuard(var86);
    java.util.List var88 = var79.getSortedDependenciesOf(var86);
    com.google.javascript.rhino.Node var89 = com.google.javascript.rhino.IR.block(var86);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var90 = com.google.javascript.rhino.IR.catchNode(var65, var89);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test429() {}
//   public void test429() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test429"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticType var6 = com.google.javascript.jscomp.DiagnosticType.disabled("LABEL_NAME hi!\n", "LABEL_NAME hi!\n");
//     java.lang.String[] var8 = new java.lang.String[] { "Node tree inequality:\nTree1:\nNOT\n    BITXOR 10\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NOT\n    BITXOR 10\n\n\nSubtree2: PARAM_LIST\n"};
//     com.google.javascript.jscomp.JSError var9 = com.google.javascript.jscomp.JSError.make("", 0, 0, var6, var8);
//     com.google.javascript.jscomp.CheckLevel var10 = var9.getDefaultLevel();
//     com.google.javascript.jscomp.DiagnosticType var12 = com.google.javascript.jscomp.DiagnosticType.make("LABEL_NAME hi!\n", var10, "null(null)");
//     com.google.javascript.jscomp.DiagnosticType[] var13 = new com.google.javascript.jscomp.DiagnosticType[] { var12};
//     com.google.javascript.jscomp.DiagnosticGroup var14 = new com.google.javascript.jscomp.DiagnosticGroup(var13);
//     com.google.javascript.jscomp.JSError var15 = null;
//     boolean var16 = var14.matches(var15);
// 
//   }

  public void test430() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test430"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("(function (): ?|null)");
    java.io.PrintStream var2 = null;
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler(var2);
    var3.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var6 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var7 = var6.getOriginalPath();
    com.google.javascript.rhino.Node var8 = var3.parse(var6);
    var1.add(var6);
    java.util.List var10 = var1.getRequires();
    com.google.javascript.jscomp.SourceFile var12 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var13 = var12.getOriginalPath();
    int var15 = var12.getColumnOfOffset(10);
    com.google.javascript.jscomp.CompilerInput var17 = new com.google.javascript.jscomp.CompilerInput(var12, false);
    java.io.PrintStream var18 = null;
    com.google.javascript.jscomp.Compiler var19 = new com.google.javascript.jscomp.Compiler(var18);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var21 = var20.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var22 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var19, var21, var22);
    java.lang.String var24 = var19.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var25 = null;
    com.google.javascript.jscomp.DefaultPassConfig var26 = new com.google.javascript.jscomp.DefaultPassConfig(var25);
    var19.setPassConfig((com.google.javascript.jscomp.PassConfig)var26);
    java.io.PrintStream var28 = null;
    com.google.javascript.jscomp.Compiler var29 = new com.google.javascript.jscomp.Compiler(var28);
    var29.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var32 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var33 = var32.getOriginalPath();
    com.google.javascript.rhino.Node var34 = var29.parse(var32);
    var32.setOriginalPath("{ }");
    com.google.javascript.rhino.Node var37 = var19.parse(var32);
    var17.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var19);
    com.google.javascript.jscomp.CompilerInput var39 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var17);
    var1.add(var17);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var42 = var17.getLineOffset(100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + ""+ "'", var24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test431() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test431"); }


    com.google.javascript.rhino.Node var4 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.comma(var4, var8);
    boolean var10 = var8.isUnscopedQualifiedName();
    boolean var11 = var8.isVar();
    boolean var12 = var8.hasOneChild();
    int var13 = var8.getLength();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.Node.newString("hi!", 1, (-1));
    boolean var18 = var17.isInstanceOf();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(7, var8, var17, 1, 1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test432() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test432"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setRecordFunctionInformation(true);
    boolean var3 = var0.isRemoveUnusedClassProperties();
    com.google.javascript.jscomp.CssRenamingMap var4 = null;
    var0.setCssRenamingMap(var4);
    var0.setCheckSymbols(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test433() {}
//   public void test433() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test433"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = null;
//     com.google.javascript.rhino.Node var6 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var7 = var6.getDirectives();
//     boolean var8 = var6.isThrow();
//     boolean var10 = var6.getBooleanProp(1);
//     boolean var11 = var6.isQualifiedName();
//     com.google.javascript.rhino.jstype.FunctionType var12 = var1.createFunctionType(var2, var6);
//     java.lang.Iterable var14 = var1.getTypesWithProperty("ERROR");
//     java.lang.Iterable var16 = var1.getEachReferenceTypeWithProperty("ERROR");
//     com.google.javascript.rhino.ErrorReporter var17 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
//     com.google.javascript.rhino.jstype.JSType var19 = null;
//     com.google.javascript.jscomp.AbstractCompiler var20 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var22 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var24 = var22.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var25 = var21.getDirectedPredNodes(var24);
//     com.google.javascript.jscomp.NodeTraversal.Callback var26 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var20, var25, var26);
//     com.google.javascript.rhino.jstype.FunctionType var28 = var18.createFunctionType(var19, var25);
//     com.google.javascript.rhino.ErrorReporter var30 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
//     com.google.javascript.rhino.jstype.JSType var32 = null;
//     com.google.javascript.jscomp.AbstractCompiler var33 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var37 = var35.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var38 = var34.getDirectedPredNodes(var37);
//     com.google.javascript.jscomp.NodeTraversal.Callback var39 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var33, var38, var39);
//     com.google.javascript.rhino.jstype.FunctionType var41 = var31.createFunctionType(var32, var38);
//     com.google.javascript.rhino.Node var42 = null;
//     boolean var43 = var28.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var41, var42);
//     boolean var44 = var28.isReturnTypeInferred();
//     boolean var45 = var28.isUnknownType();
//     com.google.javascript.rhino.ErrorReporter var46 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
//     com.google.javascript.rhino.jstype.JSType var48 = null;
//     com.google.javascript.jscomp.AbstractCompiler var49 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var53 = var51.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var54 = var50.getDirectedPredNodes(var53);
//     com.google.javascript.jscomp.NodeTraversal.Callback var55 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var49, var54, var55);
//     com.google.javascript.rhino.jstype.FunctionType var57 = var47.createFunctionType(var48, var54);
//     com.google.javascript.rhino.ErrorReporter var59 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var59);
//     com.google.javascript.rhino.jstype.JSType var61 = null;
//     com.google.javascript.jscomp.AbstractCompiler var62 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var63 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var64 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var66 = var64.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var67 = var63.getDirectedPredNodes(var66);
//     com.google.javascript.jscomp.NodeTraversal.Callback var68 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var62, var67, var68);
//     com.google.javascript.rhino.jstype.FunctionType var70 = var60.createFunctionType(var61, var67);
//     com.google.javascript.rhino.Node var71 = null;
//     boolean var72 = var57.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var70, var71);
//     com.google.javascript.rhino.jstype.FunctionType var73 = var70.toMaybeFunctionType();
//     boolean var74 = var70.hasCachedValues();
//     com.google.javascript.rhino.jstype.JSType var75 = var28.getGreatestSubtype((com.google.javascript.rhino.jstype.JSType)var70);
//     com.google.javascript.rhino.jstype.JSType var77 = var1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType)var28, "BITXOR 10");
//     com.google.javascript.rhino.Node var78 = null;
//     com.google.javascript.rhino.ErrorReporter var80 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var81 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var80);
//     com.google.javascript.rhino.jstype.JSType var82 = null;
//     com.google.javascript.jscomp.AbstractCompiler var83 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var84 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var85 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var87 = var85.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var88 = var84.getDirectedPredNodes(var87);
//     com.google.javascript.jscomp.NodeTraversal.Callback var89 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var83, var88, var89);
//     com.google.javascript.rhino.jstype.FunctionType var91 = var81.createFunctionType(var82, var88);
//     boolean var93 = var81.isForwardDeclaredType("ERROR");
//     com.google.javascript.rhino.JSDocInfo var94 = null;
//     com.google.javascript.rhino.jstype.ObjectType var95 = var81.createAnonymousObjectType(var94);
//     boolean var96 = var95.isInterface();
//     boolean var98 = var95.hasProperty("hi!: ERROR");
//     com.google.javascript.rhino.jstype.JSType var99 = var1.createFromTypeNodes(var78, "", (com.google.javascript.rhino.jstype.StaticScope)var95);
// 
//   }

  public void test434() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test434"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var3 = var2.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
    java.lang.String var6 = var1.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var7 = null;
    com.google.javascript.jscomp.DefaultPassConfig var8 = new com.google.javascript.jscomp.DefaultPassConfig(var7);
    var1.setPassConfig((com.google.javascript.jscomp.PassConfig)var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var11 = var10.getEdges();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var13 = var12.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var14 = new com.google.javascript.jscomp.ComposeWarningsGuard(var13);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.script(var13);
    com.google.javascript.jscomp.CompilerOptions var16 = new com.google.javascript.jscomp.CompilerOptions();
    var16.setPropertyAffinity(false);
    com.google.javascript.jscomp.CheckLevel var19 = null;
    var16.setBrokenClosureRequiresLevel(var19);
    var1.<com.google.javascript.jscomp.SourceFile>initModules(var11, var13, var16);
    com.google.javascript.jscomp.CompilerOptions var22 = new com.google.javascript.jscomp.CompilerOptions();
    var22.setNameReferenceReportPath("");
    var22.setSyntheticBlockEndMarker("hi!");
    var22.setTightenTypes(true);
    java.util.Set var29 = null;
    var22.setCssRenamingWhitelist(var29);
    var22.setAmbiguateProperties(false);
    com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var33 = var22.getAliasTransformationHandler();
    com.google.javascript.jscomp.DefaultPassConfig var34 = new com.google.javascript.jscomp.DefaultPassConfig(var22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setPassConfig((com.google.javascript.jscomp.PassConfig)var34);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test435() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test435"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    var3.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.not(var3);
    com.google.javascript.rhino.jstype.StaticSourceFile var9 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var8);
    com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var14 = var13.getDirectives();
    int var15 = var13.getChangeTime();
    boolean var16 = var13.isWith();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.add(var8, var13);
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var22 = var21.getDirectives();
    var21.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.exprResult(var21);
    java.lang.Iterable var27 = var26.siblings();
    com.google.javascript.rhino.Node var28 = var13.useSourceInfoIfMissingFrom(var26);
    var28.setLength(100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var32 = var28.getAncestor((-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test436() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test436"); }


    com.google.javascript.rhino.Node var4 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.comma(var4, var8);
    boolean var10 = var4.isContinue();
    com.google.javascript.rhino.Node var14 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var18 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.comma(var14, var18);
    boolean var20 = var18.isUnscopedQualifiedName();
    boolean var21 = var18.isVar();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var22 = new com.google.javascript.rhino.Node((-1), var4, var18);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test437() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test437"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    boolean var5 = var3.isThrow();
    var3.removeProp(1);
    boolean var8 = var3.isDebugger();
    com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var17 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.comma(var13, var17);
    boolean var19 = var18.isNoSideEffectsCall();
    com.google.javascript.jscomp.DiagnosticType var22 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "ERROR");
    java.lang.String[] var24 = new java.lang.String[] { "hi!"};
    com.google.javascript.jscomp.JSError var25 = com.google.javascript.jscomp.JSError.make("", var18, var22, var24);
    com.google.javascript.rhino.Node var30 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.jscomp.DiagnosticType var33 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "ERROR");
    java.lang.String[] var35 = new java.lang.String[] { "(function (): ?|null)"};
    com.google.javascript.jscomp.JSError var36 = com.google.javascript.jscomp.JSError.make("ERROR", var30, var33, var35);
    com.google.javascript.jscomp.JSError var37 = com.google.javascript.jscomp.JSError.make(var3, var22, var35);
    com.google.javascript.jscomp.CodingConvention var38 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var39 = new com.google.javascript.jscomp.GoogleCodingConvention(var38);
    com.google.javascript.rhino.Node var43 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var44 = var43.getDirectives();
    var43.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.exprResult(var43);
    com.google.javascript.jscomp.CodingConvention.Bind var49 = var39.describeFunctionBind(var43);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var51 = var50.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var52 = new com.google.javascript.jscomp.ComposeWarningsGuard(var51);
    com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.IR.script(var51);
    boolean var54 = var39.isPrototypeAlias(var53);
    com.google.javascript.rhino.Node var58 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var62 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.comma(var58, var62);
    boolean var64 = var58.isContinue();
    com.google.javascript.jscomp.CodingConvention.DelegateRelationship var65 = var39.getDelegateRelationship(var58);
    var58.setType(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var68 = var3.checkTreeEquals(var58);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);

  }

  public void test438() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test438"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    var3.putIntProp((-1), 0);
    var3.setVarArgs(false);
    com.google.javascript.rhino.jstype.StaticSourceFile var10 = var3.getStaticSourceFile();
    boolean var11 = var3.isLocalResultCall();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.exprResult(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.exprResult(var3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test439() {}
//   public void test439() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test439"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
//     double var6 = var1.getProgress();
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var7 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var8 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1, var7);
//     var8.setColorize(false);
//     com.google.javascript.jscomp.MessageFormatter var11 = null;
//     java.util.logging.Logger var12 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var13 = new com.google.javascript.jscomp.LoggerErrorManager(var11, var12);
//     com.google.javascript.jscomp.CheckLevel var14 = null;
//     com.google.javascript.rhino.Node var19 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.jscomp.DiagnosticType var22 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "ERROR");
//     java.lang.String[] var24 = new java.lang.String[] { "(function (): ?|null)"};
//     com.google.javascript.jscomp.JSError var25 = com.google.javascript.jscomp.JSError.make("ERROR", var19, var22, var24);
//     var13.report(var14, var25);
//     java.lang.String var27 = var8.formatError(var25);
// 
//   }

  public void test440() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test440"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.comma(var3, var7);
    boolean var9 = var7.isDebugger();
    var7.setVarArgs(true);
    com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var16 = var15.getDirectives();
    int var17 = var15.getChangeTime();
    boolean var18 = var15.isAssignAdd();
    java.lang.String var19 = var15.getSourceFileName();
    int var20 = var15.getSourceOffset();
    com.google.javascript.rhino.Node var21 = var7.srcrefTree(var15);
    boolean var22 = var7.isLocalResultCall();
    boolean var23 = var7.isDebugger();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.setQuotedString();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test441() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test441"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var3 = var2.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
    java.lang.String var6 = var1.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var7 = null;
    com.google.javascript.jscomp.DefaultPassConfig var8 = new com.google.javascript.jscomp.DefaultPassConfig(var7);
    var1.setPassConfig((com.google.javascript.jscomp.PassConfig)var8);
    java.io.PrintStream var10 = null;
    com.google.javascript.jscomp.Compiler var11 = new com.google.javascript.jscomp.Compiler(var10);
    var11.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var14 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var15 = var14.getOriginalPath();
    com.google.javascript.rhino.Node var16 = var11.parse(var14);
    var14.setOriginalPath("{ }");
    com.google.javascript.rhino.Node var19 = var1.parse(var14);
    boolean var20 = var19.wasEmptyNode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test442() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test442"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
    com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var6 = var5.getDirectives();
    var5.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.exprResult(var5);
    com.google.javascript.jscomp.CodingConvention.Bind var11 = var1.describeFunctionBind(var5);
    com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var16 = var15.getDirectives();
    int var17 = var15.getChangeTime();
    com.google.javascript.rhino.Node var18 = var15.removeFirstChild();
    boolean var19 = var15.isFromExterns();
    boolean var20 = var15.isParamList();
    boolean var21 = var15.isVarArgs();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var22 = var5.removeChildAfter(var15);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test443() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test443"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var3 = var2.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
    java.lang.String var6 = var1.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var7 = null;
    com.google.javascript.jscomp.DefaultPassConfig var8 = new com.google.javascript.jscomp.DefaultPassConfig(var7);
    var1.setPassConfig((com.google.javascript.jscomp.PassConfig)var8);
    java.io.PrintStream var10 = null;
    com.google.javascript.jscomp.Compiler var11 = new com.google.javascript.jscomp.Compiler(var10);
    var11.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var14 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var15 = var14.getOriginalPath();
    com.google.javascript.rhino.Node var16 = var11.parse(var14);
    var14.setOriginalPath("{ }");
    com.google.javascript.rhino.Node var19 = var1.parse(var14);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var22 = var20.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var23 = var20.getGraphvizEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var24 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var23, var24);
    com.google.javascript.jscomp.MessageFormatter var26 = null;
    java.util.logging.Logger var27 = null;
    com.google.javascript.jscomp.LoggerErrorManager var28 = new com.google.javascript.jscomp.LoggerErrorManager(var26, var27);
    int var29 = var28.getWarningCount();
    com.google.javascript.jscomp.JSError[] var30 = var28.getWarnings();
    var1.setErrorManager((com.google.javascript.jscomp.ErrorManager)var28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.CompilerInput var33 = var1.newExternInput("");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test444() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test444"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.jscomp.AbstractCompiler var5 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var6 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var7 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var9 = var7.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var10 = var6.getDirectedPredNodes(var9);
    com.google.javascript.jscomp.NodeTraversal.Callback var11 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var5, var10, var11);
    com.google.javascript.rhino.jstype.FunctionType var13 = var3.createFunctionType(var4, var10);
    com.google.javascript.rhino.jstype.JSType var14 = var1.createNullableType((com.google.javascript.rhino.jstype.JSType)var13);
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var22 = var21.getDirectives();
    boolean var23 = var21.isThrow();
    boolean var25 = var21.getBooleanProp(1);
    boolean var26 = var21.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var27 = var16.createFunctionType(var17, var21);
    com.google.javascript.rhino.jstype.JSType[] var28 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.Node var29 = var1.createParameters(var28);
    boolean var30 = var29.isSyntheticBlock();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.neg(var29);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test445() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test445"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInstrumentMemoryAllocations(false);
    var0.setRemoveUnusedLocalVars(false);
    var0.setGroupVariableDeclarations(true);

  }

  public void test446() {}
//   public void test446() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test446"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
//     java.lang.String var6 = var1.getAstDotGraph();
//     com.google.javascript.jscomp.CompilerOptions var7 = null;
//     com.google.javascript.jscomp.DefaultPassConfig var8 = new com.google.javascript.jscomp.DefaultPassConfig(var7);
//     var1.setPassConfig((com.google.javascript.jscomp.PassConfig)var8);
//     com.google.javascript.rhino.Node var17 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.comma(var17, var21);
//     boolean var23 = var22.isNoSideEffectsCall();
//     com.google.javascript.jscomp.DiagnosticType var26 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "ERROR");
//     java.lang.String[] var28 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("", var22, var26, var28);
//     com.google.javascript.jscomp.DiagnosticGroup var30 = com.google.javascript.jscomp.DiagnosticGroup.forType(var26);
//     java.lang.String var31 = var26.toString();
//     com.google.javascript.rhino.Node var35 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var36 = var35.getDirectives();
//     boolean var37 = var35.isThrow();
//     var35.removeProp(1);
//     boolean var40 = var35.isDebugger();
//     com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var49 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.comma(var45, var49);
//     boolean var51 = var50.isNoSideEffectsCall();
//     com.google.javascript.jscomp.DiagnosticType var54 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "ERROR");
//     java.lang.String[] var56 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var57 = com.google.javascript.jscomp.JSError.make("", var50, var54, var56);
//     com.google.javascript.rhino.Node var62 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.jscomp.DiagnosticType var65 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "ERROR");
//     java.lang.String[] var67 = new java.lang.String[] { "(function (): ?|null)"};
//     com.google.javascript.jscomp.JSError var68 = com.google.javascript.jscomp.JSError.make("ERROR", var62, var65, var67);
//     com.google.javascript.jscomp.JSError var69 = com.google.javascript.jscomp.JSError.make(var35, var54, var67);
//     com.google.javascript.jscomp.JSError var70 = com.google.javascript.jscomp.JSError.make("{ }", 0, 100, var26, var67);
//     var1.report(var70);
// 
//   }

  public void test447() {}
//   public void test447() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test447"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator var0 = new com.google.javascript.jscomp.AstValidator();
//     com.google.javascript.rhino.Node var1 = null;
//     var0.validateScript(var1);
// 
//   }

  public void test448() {}
//   public void test448() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test448"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticGroup var0 = null;
//     com.google.javascript.jscomp.CheckLevel var1 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var2 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var0, var1);
//     com.google.javascript.jscomp.DiagnosticType var5 = com.google.javascript.jscomp.DiagnosticType.disabled("LABEL_NAME hi!\n", "LABEL_NAME hi!\n");
//     com.google.javascript.jscomp.DiagnosticType[] var6 = new com.google.javascript.jscomp.DiagnosticType[] { var5};
//     com.google.javascript.jscomp.DiagnosticGroup var7 = new com.google.javascript.jscomp.DiagnosticGroup(var6);
//     com.google.javascript.jscomp.CheckLevel var8 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var9 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var7, var8);
//     boolean var10 = var2.disables(var7);
// 
//   }

  public void test449() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test449"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node((-1), 1, 100);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var6 = var5.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var7 = new com.google.javascript.jscomp.ComposeWarningsGuard(var6);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.script(var6);
    com.google.javascript.rhino.ErrorReporter var9 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var12 = var11.getEdges();
    com.google.javascript.jscomp.deps.SortedDependencies var13 = new com.google.javascript.jscomp.deps.SortedDependencies(var12);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var14 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var15 = var14.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var16 = new com.google.javascript.jscomp.ComposeWarningsGuard(var15);
    com.google.javascript.jscomp.JSModuleGraph var17 = new com.google.javascript.jscomp.JSModuleGraph(var15);
    java.util.List var18 = var13.getSortedDependenciesOf(var15);
    com.google.javascript.rhino.Node var19 = var10.createParametersWithVarArgs(var18);
    com.google.javascript.rhino.Node var24 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var25 = var24.getDirectives();
    int var26 = var24.getChangeTime();
    boolean var27 = var24.isAssignAdd();
    java.lang.String var28 = var24.getSourceFileName();
    boolean var29 = var24.isCast();
    com.google.javascript.rhino.ErrorReporter var30 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.rhino.Node var36 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var37 = var36.getDirectives();
    boolean var38 = var36.isThrow();
    boolean var40 = var36.getBooleanProp(1);
    boolean var41 = var36.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var42 = var31.createFunctionType(var32, var36);
    boolean var43 = var42.matchesNumberContext();
    com.google.javascript.rhino.jstype.ObjectType var44 = var10.createObjectType("LABEL_NAME hi!\n", var24, (com.google.javascript.rhino.jstype.ObjectType)var42);
    com.google.javascript.rhino.Node var48 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var49 = var48.getDirectives();
    var48.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.IR.not(var48);
    com.google.javascript.rhino.jstype.StaticSourceFile var54 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var53);
    com.google.javascript.rhino.ErrorReporter var55 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var55);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var57 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var58 = var57.getEdges();
    com.google.javascript.jscomp.deps.SortedDependencies var59 = new com.google.javascript.jscomp.deps.SortedDependencies(var58);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var60 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var61 = var60.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var62 = new com.google.javascript.jscomp.ComposeWarningsGuard(var61);
    com.google.javascript.jscomp.JSModuleGraph var63 = new com.google.javascript.jscomp.JSModuleGraph(var61);
    java.util.List var64 = var59.getSortedDependenciesOf(var61);
    com.google.javascript.rhino.Node var65 = var56.createParametersWithVarArgs(var64);
    java.lang.String var66 = var53.checkTreeEquals(var65);
    com.google.javascript.rhino.Node var69 = new com.google.javascript.rhino.Node(100, var8, var24, var65, 10, 10);
    int var70 = var3.getIndexOfChild(var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.voidNode(var24);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "Node tree inequality:\nTree1:\nNOT\n    BITXOR 10\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NOT\n    BITXOR 10\n\n\nSubtree2: PARAM_LIST\n"+ "'", var66.equals("Node tree inequality:\nTree1:\nNOT\n    BITXOR 10\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NOT\n    BITXOR 10\n\n\nSubtree2: PARAM_LIST\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == (-1));

  }

  public void test450() {}
//   public void test450() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test450"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var2 = var0.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var3 = var0.getGraphvizEdges();
//     java.util.List var4 = var0.getGraphvizNodes();
//     var0.popNodeAnnotations();
// 
//   }

  public void test451() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test451"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.jscomp.AbstractCompiler var3 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var5.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var8 = var4.getDirectedPredNodes(var7);
    com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var3, var8, var9);
    com.google.javascript.rhino.jstype.FunctionType var11 = var1.createFunctionType(var2, var8);
    boolean var13 = var1.isForwardDeclaredType("ERROR");
    com.google.javascript.rhino.JSDocInfo var14 = null;
    com.google.javascript.rhino.jstype.ObjectType var15 = var1.createAnonymousObjectType(var14);
    com.google.javascript.jscomp.CodingConvention var17 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var18 = new com.google.javascript.jscomp.GoogleCodingConvention(var17);
    com.google.javascript.rhino.Node var22 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var23 = var22.getDirectives();
    var22.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.exprResult(var22);
    com.google.javascript.jscomp.CodingConvention.Bind var28 = var18.describeFunctionBind(var22);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var29 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var30 = var29.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var31 = new com.google.javascript.jscomp.ComposeWarningsGuard(var30);
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.script(var30);
    boolean var33 = var18.isPrototypeAlias(var32);
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.jscomp.AbstractCompiler var37 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var38 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var39 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var41 = var39.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var42 = var38.getDirectedPredNodes(var41);
    com.google.javascript.jscomp.NodeTraversal.Callback var43 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var37, var42, var43);
    com.google.javascript.rhino.jstype.FunctionType var45 = var35.createFunctionType(var36, var42);
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.jscomp.AbstractCompiler var50 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var52 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var54 = var52.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var55 = var51.getDirectedPredNodes(var54);
    com.google.javascript.jscomp.NodeTraversal.Callback var56 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var50, var55, var56);
    com.google.javascript.rhino.jstype.FunctionType var58 = var48.createFunctionType(var49, var55);
    com.google.javascript.rhino.Node var59 = null;
    boolean var60 = var45.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var58, var59);
    boolean var61 = var45.isReturnTypeInferred();
    com.google.javascript.rhino.jstype.ObjectType var62 = var1.createObjectType("(function (): ?|null)", var32, (com.google.javascript.rhino.jstype.ObjectType)var45);
    boolean var63 = var45.isInterface();
    com.google.javascript.rhino.jstype.FunctionType var64 = var45.getOwnerFunction();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);

  }

  public void test452() {}
//   public void test452() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test452"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = null;
//     com.google.javascript.jscomp.AbstractCompiler var3 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var5.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var8 = var4.getDirectedPredNodes(var7);
//     com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var3, var8, var9);
//     com.google.javascript.rhino.jstype.FunctionType var11 = var1.createFunctionType(var2, var8);
//     com.google.javascript.rhino.jstype.TemplateType var12 = var1.getObjectElementKey();
//     com.google.javascript.rhino.ErrorReporter var14 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
//     com.google.javascript.rhino.ErrorReporter var16 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
//     com.google.javascript.rhino.jstype.JSType var18 = null;
//     com.google.javascript.jscomp.AbstractCompiler var19 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var23 = var21.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var24 = var20.getDirectedPredNodes(var23);
//     com.google.javascript.jscomp.NodeTraversal.Callback var25 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var19, var24, var25);
//     com.google.javascript.rhino.jstype.FunctionType var27 = var17.createFunctionType(var18, var24);
//     com.google.javascript.rhino.jstype.JSType var28 = var15.createNullableType((com.google.javascript.rhino.jstype.JSType)var27);
//     com.google.javascript.rhino.ErrorReporter var29 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     com.google.javascript.jscomp.AbstractCompiler var32 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var36 = var34.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var37 = var33.getDirectedPredNodes(var36);
//     com.google.javascript.jscomp.NodeTraversal.Callback var38 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var32, var37, var38);
//     com.google.javascript.rhino.jstype.FunctionType var40 = var30.createFunctionType(var31, var37);
//     java.lang.Iterable var41 = var40.getImplementedInterfaces();
//     boolean var42 = var40.isStruct();
//     boolean var44 = var40.hasProperty("LABEL_NAME hi!\n");
//     com.google.javascript.rhino.jstype.JSType.TypePair var45 = var27.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType)var40);
//     boolean var46 = var1.declareType("{ }", (com.google.javascript.rhino.jstype.JSType)var40);
//     boolean var48 = var1.isForwardDeclaredType("");
//     com.google.javascript.rhino.ErrorReporter var49 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var49);
//     com.google.javascript.rhino.ErrorReporter var51 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
//     com.google.javascript.rhino.jstype.JSType var53 = null;
//     com.google.javascript.jscomp.AbstractCompiler var54 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var55 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var58 = var56.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var59 = var55.getDirectedPredNodes(var58);
//     com.google.javascript.jscomp.NodeTraversal.Callback var60 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var54, var59, var60);
//     com.google.javascript.rhino.jstype.FunctionType var62 = var52.createFunctionType(var53, var59);
//     com.google.javascript.rhino.jstype.JSType var63 = var50.createNullableType((com.google.javascript.rhino.jstype.JSType)var62);
//     com.google.javascript.rhino.ErrorReporter var64 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var64);
//     com.google.javascript.rhino.jstype.JSType var66 = null;
//     com.google.javascript.rhino.Node var70 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var71 = var70.getDirectives();
//     boolean var72 = var70.isThrow();
//     boolean var74 = var70.getBooleanProp(1);
//     boolean var75 = var70.isQualifiedName();
//     com.google.javascript.rhino.jstype.FunctionType var76 = var65.createFunctionType(var66, var70);
//     com.google.javascript.rhino.jstype.JSType[] var77 = new com.google.javascript.rhino.jstype.JSType[] { var66};
//     com.google.javascript.rhino.Node var78 = var50.createParameters(var77);
//     com.google.javascript.rhino.jstype.JSType var79 = var1.createUnionType(var77);
// 
//   }

  public void test453() {}
//   public void test453() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test453"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
//     java.lang.String var6 = var1.getAstDotGraph();
//     com.google.javascript.jscomp.CompilerOptions var7 = null;
//     com.google.javascript.jscomp.DefaultPassConfig var8 = new com.google.javascript.jscomp.DefaultPassConfig(var7);
//     var1.setPassConfig((com.google.javascript.jscomp.PassConfig)var8);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var11 = var10.getEdges();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var13 = var12.getEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var14 = new com.google.javascript.jscomp.ComposeWarningsGuard(var13);
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.script(var13);
//     com.google.javascript.jscomp.CompilerOptions var16 = new com.google.javascript.jscomp.CompilerOptions();
//     var16.setPropertyAffinity(false);
//     com.google.javascript.jscomp.CheckLevel var19 = null;
//     var16.setBrokenClosureRequiresLevel(var19);
//     var1.<com.google.javascript.jscomp.SourceFile>initModules(var11, var13, var16);
//     boolean var22 = var1.isTypeCheckingEnabled();
//     com.google.javascript.jscomp.CompilerInput var24 = var1.newExternInput("hi!");
// 
//   }

  public void test454() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test454"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.comma(var3, var7);
    boolean var9 = var3.isContinue();
    boolean var10 = var3.isNot();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.var(var3);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test455() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test455"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setPropertyAffinity(false);
    com.google.javascript.jscomp.CheckLevel var3 = null;
    var0.setBrokenClosureRequiresLevel(var3);
    var0.setGroupVariableDeclarations(false);
    var0.setAppNameStr("null(null)");

  }

  public void test456() {}
//   public void test456() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test456"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
//     var0.popNodeAnnotations();
// 
//   }

  public void test457() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test457"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.TemplateTypeMap var1 = null;
    com.google.javascript.rhino.jstype.TemplateTypeMapReplacer var2 = new com.google.javascript.rhino.jstype.TemplateTypeMapReplacer(var0, var1);
    com.google.javascript.rhino.jstype.EnumElementType var3 = null;
    com.google.javascript.rhino.jstype.JSType var4 = var2.caseEnumElementType(var3);
    com.google.javascript.jscomp.CodingConvention var5 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var6 = new com.google.javascript.jscomp.GoogleCodingConvention(var5);
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var11 = var10.getDirectives();
    var10.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.exprResult(var10);
    com.google.javascript.jscomp.CodingConvention.Bind var16 = var6.describeFunctionBind(var10);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var18 = var17.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var19 = new com.google.javascript.jscomp.ComposeWarningsGuard(var18);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.script(var18);
    boolean var21 = var6.isPrototypeAlias(var20);
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    com.google.javascript.rhino.Node var28 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var29 = var28.getDirectives();
    boolean var30 = var28.isThrow();
    boolean var32 = var28.getBooleanProp(1);
    boolean var33 = var28.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var34 = var23.createFunctionType(var24, var28);
    java.lang.Iterable var36 = var23.getTypesWithProperty("ERROR");
    java.lang.Iterable var38 = var23.getEachReferenceTypeWithProperty("ERROR");
    com.google.javascript.rhino.ErrorReporter var39 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var39);
    com.google.javascript.rhino.jstype.JSType var41 = null;
    com.google.javascript.jscomp.AbstractCompiler var42 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var43 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var44 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var46 = var44.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var47 = var43.getDirectedPredNodes(var46);
    com.google.javascript.jscomp.NodeTraversal.Callback var48 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var42, var47, var48);
    com.google.javascript.rhino.jstype.FunctionType var50 = var40.createFunctionType(var41, var47);
    java.lang.Iterable var51 = var50.getImplementedInterfaces();
    boolean var52 = var50.isStruct();
    java.lang.String var53 = var50.getDisplayName();
    com.google.javascript.jscomp.AbstractCompiler var54 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var55 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var58 = var56.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var59 = var55.getDirectedPredNodes(var58);
    com.google.javascript.jscomp.NodeTraversal.Callback var60 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var54, var59, var60);
    java.util.Map var62 = null;
    var6.defineDelegateProxyPrototypeProperties(var23, (com.google.javascript.rhino.jstype.StaticScope)var50, var59, var62);
    com.google.javascript.rhino.jstype.ObjectType var64 = var50.toObjectType();
    com.google.javascript.rhino.JSDocInfo var65 = var50.getJSDocInfo();
    com.google.javascript.rhino.jstype.JSType var66 = var2.caseObjectType((com.google.javascript.rhino.jstype.ObjectType)var50);
    com.google.javascript.rhino.jstype.ObjectType var67 = var50.dereference();
    com.google.javascript.rhino.jstype.ObjectType var68 = var67.dereference();
    boolean var69 = var67.isNoType();
    boolean var70 = var67.isDict();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test458() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test458"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    int var5 = var3.getChangeTime();
    boolean var6 = var3.isAssignAdd();
    java.lang.String var7 = var3.getSourceFileName();
    java.lang.Iterable var8 = var3.children();
    boolean var9 = var3.isSyntheticBlock();
    boolean var10 = var3.isDefaultCase();
    var3.setType(100);
    boolean var13 = var3.isNew();
    com.google.javascript.rhino.Node var17 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.comma(var17, var21);
    boolean var23 = var21.isUnscopedQualifiedName();
    com.google.javascript.rhino.Node var27 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var28 = var27.getDirectives();
    int var29 = var27.getChangeTime();
    boolean var30 = var27.isAssignAdd();
    com.google.javascript.rhino.Node var31 = var21.clonePropsFrom(var27);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.tryCatch(var3, var27);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test459() {}
//   public void test459() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test459"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setPropertyAffinity(false);
//     com.google.javascript.jscomp.CheckLevel var3 = null;
//     var0.setBrokenClosureRequiresLevel(var3);
//     var0.setOptimizeParameters(false);
//     var0.setInlineFunctions(true);
//     boolean var9 = var0.assumeStrictThis();
//     var0.setExtractPrototypeMemberDeclarations(true);
//     var0.setSmartNameRemoval(false);
//     com.google.javascript.jscomp.CompilerOptions.Reach var14 = null;
//     var0.setInlineFunctions(var14);
// 
//   }

  public void test460() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test460"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.jscomp.AbstractCompiler var5 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var6 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var7 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var9 = var7.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var10 = var6.getDirectedPredNodes(var9);
    com.google.javascript.jscomp.NodeTraversal.Callback var11 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var5, var10, var11);
    com.google.javascript.rhino.jstype.FunctionType var13 = var3.createFunctionType(var4, var10);
    com.google.javascript.rhino.jstype.JSType var14 = var1.createNullableType((com.google.javascript.rhino.jstype.JSType)var13);
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.jscomp.AbstractCompiler var18 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var19 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var22 = var20.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var23 = var19.getDirectedPredNodes(var22);
    com.google.javascript.jscomp.NodeTraversal.Callback var24 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var18, var23, var24);
    com.google.javascript.rhino.jstype.FunctionType var26 = var16.createFunctionType(var17, var23);
    java.lang.Iterable var27 = var26.getImplementedInterfaces();
    com.google.javascript.rhino.ErrorReporter var28 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.jscomp.AbstractCompiler var31 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var32 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var35 = var33.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var36 = var32.getDirectedPredNodes(var35);
    com.google.javascript.jscomp.NodeTraversal.Callback var37 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var31, var36, var37);
    com.google.javascript.rhino.jstype.FunctionType var39 = var29.createFunctionType(var30, var36);
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.jscomp.AbstractCompiler var44 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var45 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var46 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var48 = var46.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var49 = var45.getDirectedPredNodes(var48);
    com.google.javascript.jscomp.NodeTraversal.Callback var50 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var44, var49, var50);
    com.google.javascript.rhino.jstype.FunctionType var52 = var42.createFunctionType(var43, var49);
    com.google.javascript.rhino.Node var53 = null;
    boolean var54 = var39.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var52, var53);
    boolean var55 = var26.isInvariant((com.google.javascript.rhino.jstype.JSType)var39);
    boolean var56 = var39.isGlobalThisType();
    boolean var57 = var39.isNumberValueType();
    var39.clearCachedValues();
    com.google.javascript.rhino.jstype.JSType.TypePair var59 = var14.getTypesUnderEquality((com.google.javascript.rhino.jstype.JSType)var39);
    boolean var61 = var39.equals((java.lang.Object)10L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.FunctionType var62 = var39.getSuperClassConstructor();
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test461() {}
//   public void test461() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test461"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setNameReferenceReportPath("");
//     var0.setSyntheticBlockEndMarker("hi!");
//     var0.setProtectHiddenSideEffects(false);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var7 = var0.getTweakProcessing();
//     var0.setInferTypes(false);
//     java.lang.Iterable var10 = null;
//     var0.setExtraAnnotationNames(var10);
// 
//   }

  public void test462() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test462"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.jscomp.AbstractCompiler var3 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var5.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var8 = var4.getDirectedPredNodes(var7);
    com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var3, var8, var9);
    com.google.javascript.rhino.jstype.FunctionType var11 = var1.createFunctionType(var2, var8);
    boolean var13 = var1.isForwardDeclaredType("ERROR");
    var1.resetForTypeCheck();
    com.google.javascript.rhino.jstype.FunctionBuilder var15 = new com.google.javascript.rhino.jstype.FunctionBuilder(var1);
    com.google.javascript.rhino.jstype.FunctionBuilder var17 = var15.withName("hi!: ERROR");
    com.google.javascript.rhino.ErrorReporter var18 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18);
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    com.google.javascript.jscomp.AbstractCompiler var23 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var24 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var25 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var27 = var25.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var28 = var24.getDirectedPredNodes(var27);
    com.google.javascript.jscomp.NodeTraversal.Callback var29 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var23, var28, var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var21.createFunctionType(var22, var28);
    com.google.javascript.rhino.jstype.JSType var32 = var19.createNullableType((com.google.javascript.rhino.jstype.JSType)var31);
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33);
    com.google.javascript.rhino.jstype.JSType var35 = null;
    com.google.javascript.jscomp.AbstractCompiler var36 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var37 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var38 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var40 = var38.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var41 = var37.getDirectedPredNodes(var40);
    com.google.javascript.jscomp.NodeTraversal.Callback var42 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var36, var41, var42);
    com.google.javascript.rhino.jstype.FunctionType var44 = var34.createFunctionType(var35, var41);
    java.lang.Iterable var45 = var44.getImplementedInterfaces();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    com.google.javascript.rhino.jstype.JSType var48 = null;
    com.google.javascript.jscomp.AbstractCompiler var49 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var53 = var51.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var54 = var50.getDirectedPredNodes(var53);
    com.google.javascript.jscomp.NodeTraversal.Callback var55 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var49, var54, var55);
    com.google.javascript.rhino.jstype.FunctionType var57 = var47.createFunctionType(var48, var54);
    com.google.javascript.rhino.ErrorReporter var59 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var59);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    com.google.javascript.jscomp.AbstractCompiler var62 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var63 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var64 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var66 = var64.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var67 = var63.getDirectedPredNodes(var66);
    com.google.javascript.jscomp.NodeTraversal.Callback var68 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var62, var67, var68);
    com.google.javascript.rhino.jstype.FunctionType var70 = var60.createFunctionType(var61, var67);
    com.google.javascript.rhino.Node var71 = null;
    boolean var72 = var57.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var70, var71);
    boolean var73 = var44.isInvariant((com.google.javascript.rhino.jstype.JSType)var57);
    boolean var74 = var57.isGlobalThisType();
    boolean var75 = var57.isNumberValueType();
    var57.clearCachedValues();
    com.google.javascript.rhino.jstype.JSType.TypePair var77 = var32.getTypesUnderEquality((com.google.javascript.rhino.jstype.JSType)var57);
    com.google.javascript.rhino.jstype.FunctionBuilder var78 = var15.withInferredReturnType((com.google.javascript.rhino.jstype.JSType)var57);
    int var79 = var57.getMinArguments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);

  }

  public void test463() {}
//   public void test463() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test463"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = null;
//     com.google.javascript.jscomp.AbstractCompiler var3 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var5.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var8 = var4.getDirectedPredNodes(var7);
//     com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var3, var8, var9);
//     com.google.javascript.rhino.jstype.FunctionType var11 = var1.createFunctionType(var2, var8);
//     com.google.javascript.rhino.ErrorReporter var13 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     com.google.javascript.jscomp.AbstractCompiler var16 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var20 = var18.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var21 = var17.getDirectedPredNodes(var20);
//     com.google.javascript.jscomp.NodeTraversal.Callback var22 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var16, var21, var22);
//     com.google.javascript.rhino.jstype.FunctionType var24 = var14.createFunctionType(var15, var21);
//     com.google.javascript.rhino.Node var25 = null;
//     boolean var26 = var11.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var24, var25);
//     com.google.javascript.rhino.jstype.FunctionType var27 = var24.toMaybeFunctionType();
//     boolean var28 = var24.hasCachedValues();
//     com.google.javascript.rhino.jstype.JSType var29 = var24.restrictByNotNullOrUndefined();
//     com.google.common.base.Predicate var30 = null;
//     boolean var31 = var24.setValidator(var30);
// 
//   }

  public void test464() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test464"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
    com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
    com.google.javascript.rhino.Node var6 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var7 = var6.getDirectives();
    boolean var8 = var6.isReturn();
    boolean var9 = var2.isPrototypeAlias(var6);
    com.google.javascript.rhino.Node var14 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "ERROR");
    java.lang.String[] var19 = new java.lang.String[] { "(function (): ?|null)"};
    com.google.javascript.jscomp.JSError var20 = com.google.javascript.jscomp.JSError.make("ERROR", var14, var17, var19);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var23 = var22.isGetElem();
    com.google.javascript.rhino.Node var24 = var14.srcrefTree(var22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var25 = var6.removeChildAfter(var24);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test465() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test465"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    int var5 = var3.getChangeTime();
    com.google.javascript.rhino.Node var9 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var10 = var9.getDirectives();
    boolean var11 = var9.isThrow();
    var9.removeProp(1);
    boolean var14 = var3.isEquivalentToTyped(var9);
    boolean var15 = var3.isNumber();
    com.google.javascript.rhino.Node var19 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var20 = var19.getDirectives();
    var19.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.not(var19);
    com.google.javascript.rhino.jstype.StaticSourceFile var25 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var24);
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var29 = var28.getEdges();
    com.google.javascript.jscomp.deps.SortedDependencies var30 = new com.google.javascript.jscomp.deps.SortedDependencies(var29);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var31 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var32 = var31.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var33 = new com.google.javascript.jscomp.ComposeWarningsGuard(var32);
    com.google.javascript.jscomp.JSModuleGraph var34 = new com.google.javascript.jscomp.JSModuleGraph(var32);
    java.util.List var35 = var30.getSortedDependenciesOf(var32);
    com.google.javascript.rhino.Node var36 = var27.createParametersWithVarArgs(var35);
    java.lang.String var37 = var24.checkTreeEquals(var36);
    int var38 = var24.getLineno();
    com.google.javascript.rhino.Node var39 = var24.removeChildren();
    com.google.javascript.rhino.Node var44 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var48 = new com.google.javascript.rhino.Node(100, 1, 10);
    com.google.javascript.rhino.Node var49 = var48.getLastSibling();
    boolean var50 = var48.isGetElem();
    var48.setWasEmptyNode(false);
    com.google.javascript.rhino.Node var53 = var44.useSourceInfoFromForTree(var48);
    com.google.javascript.rhino.Node var57 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var58 = var57.getDirectives();
    int var59 = var57.getChangeTime();
    boolean var60 = var57.isAssignAdd();
    java.lang.String var61 = var57.getSourceFileName();
    java.lang.Iterable var62 = var57.children();
    com.google.javascript.jscomp.CodingConvention var63 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var64 = new com.google.javascript.jscomp.GoogleCodingConvention(var63);
    com.google.javascript.rhino.Node var68 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var69 = var68.getDirectives();
    var68.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var73 = com.google.javascript.rhino.IR.exprResult(var68);
    com.google.javascript.jscomp.CodingConvention.Bind var74 = var64.describeFunctionBind(var68);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var75 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var76 = var75.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var77 = new com.google.javascript.jscomp.ComposeWarningsGuard(var76);
    com.google.javascript.rhino.Node var78 = com.google.javascript.rhino.IR.script(var76);
    boolean var79 = var64.isPrototypeAlias(var78);
    com.google.javascript.rhino.Node var80 = new com.google.javascript.rhino.Node((-1), var44, var57, var78);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var81 = com.google.javascript.rhino.IR.ifNode(var3, var39, var78);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Node tree inequality:\nTree1:\nNOT\n    BITXOR 10\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NOT\n    BITXOR 10\n\n\nSubtree2: PARAM_LIST\n"+ "'", var37.equals("Node tree inequality:\nTree1:\nNOT\n    BITXOR 10\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NOT\n    BITXOR 10\n\n\nSubtree2: PARAM_LIST\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);

  }

  public void test466() {}
//   public void test466() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test466"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var3 = var2.getEdges();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
//     java.lang.String var6 = var1.getAstDotGraph();
//     com.google.javascript.jscomp.NodeTraversal.Callback var7 = null;
//     com.google.javascript.jscomp.NodeTraversal var8 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var1, var7);
//     com.google.javascript.jscomp.Scope var9 = var1.getTopScope();
//     var1.optimize();
// 
//   }

  public void test467() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test467"); }


    com.google.javascript.rhino.Node var4 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.comma(var4, var8);
    boolean var10 = var8.isDebugger();
    var8.setVarArgs(true);
    com.google.javascript.rhino.Node var16 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var17 = var16.getDirectives();
    int var18 = var16.getChangeTime();
    boolean var19 = var16.isAssignAdd();
    java.lang.String var20 = var16.getSourceFileName();
    int var21 = var16.getSourceOffset();
    com.google.javascript.rhino.Node var22 = var8.srcrefTree(var16);
    com.google.javascript.rhino.Node var26 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var27 = var26.getDirectives();
    var26.putIntProp((-1), 0);
    var26.setVarArgs(false);
    com.google.javascript.rhino.jstype.StaticSourceFile var33 = var26.getStaticSourceFile();
    boolean var34 = var26.isLocalResultCall();
    boolean var35 = var26.isCall();
    com.google.javascript.rhino.Node var39 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var40 = var39.getDirectives();
    var39.putIntProp((-1), 0);
    var39.setSourceEncodedPosition(10);
    com.google.javascript.rhino.Node var46 = var26.useSourceInfoIfMissingFromForTree(var39);
    com.google.javascript.rhino.Node var50 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var51 = var50.getDirectives();
    var50.putIntProp((-1), 0);
    var50.setVarArgs(false);
    com.google.javascript.rhino.jstype.StaticSourceFile var57 = var50.getStaticSourceFile();
    boolean var58 = var50.isLocalResultCall();
    boolean var59 = var50.isCall();
    com.google.javascript.rhino.Node var63 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var64 = var63.getDirectives();
    var63.putIntProp((-1), 0);
    var63.setSourceEncodedPosition(10);
    com.google.javascript.rhino.Node var70 = var50.useSourceInfoIfMissingFromForTree(var63);
    com.google.javascript.rhino.Node var74 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var78 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var79 = com.google.javascript.rhino.IR.comma(var74, var78);
    boolean var80 = var78.isUnscopedQualifiedName();
    com.google.javascript.rhino.Node var84 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var85 = var84.getDirectives();
    int var86 = var84.getChangeTime();
    boolean var87 = var84.isAssignAdd();
    com.google.javascript.rhino.Node var88 = var78.clonePropsFrom(var84);
    boolean var89 = var78.isCast();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var90 = new com.google.javascript.rhino.Node(10, var22, var26, var70, var78);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);

  }

  public void test468() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test468"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.comma(var3, var7);
    boolean var9 = var7.isDebugger();
    var7.setVarArgs(true);
    com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var16 = var15.getDirectives();
    int var17 = var15.getChangeTime();
    boolean var18 = var15.isAssignAdd();
    java.lang.String var19 = var15.getSourceFileName();
    int var20 = var15.getSourceOffset();
    com.google.javascript.rhino.Node var21 = var7.srcrefTree(var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var21.setSideEffectFlags(0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test469() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test469"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    int var5 = var3.getChangeTime();
    boolean var6 = var3.isAssignAdd();
    java.lang.String var7 = var3.getSourceFileName();
    boolean var8 = var3.isCast();
    boolean var9 = var3.isNull();
    int var11 = var3.getIntProp(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);

  }

  public void test470() {}
//   public void test470() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test470"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
//     java.lang.String var3 = var2.getSourceName();
//     com.google.javascript.rhino.Node var4 = var2.getCurrentNode();
//     com.google.javascript.rhino.Node var5 = var2.getEnclosingFunction();
//     java.lang.String var6 = var2.getSourceName();
//     com.google.javascript.jscomp.CompilerInput var7 = var2.getInput();
// 
//   }

  public void test471() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test471"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.jscomp.AbstractCompiler var3 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var5.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var8 = var4.getDirectedPredNodes(var7);
    com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var3, var8, var9);
    com.google.javascript.rhino.jstype.FunctionType var11 = var1.createFunctionType(var2, var8);
    boolean var13 = var1.isForwardDeclaredType("ERROR");
    var1.resetForTypeCheck();
    com.google.javascript.rhino.jstype.FunctionBuilder var15 = new com.google.javascript.rhino.jstype.FunctionBuilder(var1);
    com.google.javascript.rhino.jstype.FunctionBuilder var17 = var15.withName("hi!: ERROR");
    com.google.javascript.rhino.ErrorReporter var18 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.jscomp.AbstractCompiler var21 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var22 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var23 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var25 = var23.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var26 = var22.getDirectedPredNodes(var25);
    com.google.javascript.jscomp.NodeTraversal.Callback var27 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var21, var26, var27);
    com.google.javascript.rhino.jstype.FunctionType var29 = var19.createFunctionType(var20, var26);
    boolean var31 = var19.isForwardDeclaredType("ERROR");
    com.google.javascript.rhino.JSDocInfo var32 = null;
    com.google.javascript.rhino.jstype.ObjectType var33 = var19.createAnonymousObjectType(var32);
    com.google.javascript.jscomp.CodingConvention var35 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var36 = new com.google.javascript.jscomp.GoogleCodingConvention(var35);
    com.google.javascript.rhino.Node var40 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var41 = var40.getDirectives();
    var40.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.exprResult(var40);
    com.google.javascript.jscomp.CodingConvention.Bind var46 = var36.describeFunctionBind(var40);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var47 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var48 = var47.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var49 = new com.google.javascript.jscomp.ComposeWarningsGuard(var48);
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.script(var48);
    boolean var51 = var36.isPrototypeAlias(var50);
    com.google.javascript.rhino.ErrorReporter var52 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var52);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    com.google.javascript.jscomp.AbstractCompiler var55 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var57 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var59 = var57.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var60 = var56.getDirectedPredNodes(var59);
    com.google.javascript.jscomp.NodeTraversal.Callback var61 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var55, var60, var61);
    com.google.javascript.rhino.jstype.FunctionType var63 = var53.createFunctionType(var54, var60);
    com.google.javascript.rhino.ErrorReporter var65 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var65);
    com.google.javascript.rhino.jstype.JSType var67 = null;
    com.google.javascript.jscomp.AbstractCompiler var68 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var69 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var70 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var72 = var70.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var73 = var69.getDirectedPredNodes(var72);
    com.google.javascript.jscomp.NodeTraversal.Callback var74 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var68, var73, var74);
    com.google.javascript.rhino.jstype.FunctionType var76 = var66.createFunctionType(var67, var73);
    com.google.javascript.rhino.Node var77 = null;
    boolean var78 = var63.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var76, var77);
    boolean var79 = var63.isReturnTypeInferred();
    com.google.javascript.rhino.jstype.ObjectType var80 = var19.createObjectType("(function (): ?|null)", var50, (com.google.javascript.rhino.jstype.ObjectType)var63);
    com.google.javascript.rhino.jstype.FunctionBuilder var82 = var17.withReturnType((com.google.javascript.rhino.jstype.JSType)var63, true);
    com.google.javascript.rhino.jstype.FunctionBuilder var83 = var82.forConstructor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test472() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test472"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    var0.pushEdgeAnnotations();
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    var2.setNameReferenceReportPath("");
    var2.setSyntheticBlockEndMarker("hi!");
    var2.setTightenTypes(true);
    var2.setDefineToBooleanLiteral("", false);
    com.google.javascript.jscomp.CheckLevel var12 = null;
    var2.setAggressiveVarCheck(var12);
    com.google.javascript.jscomp.CompilerOptions.TracerMode var14 = var2.getTracerMode();
    com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
    var15.setPropertyAffinity(false);
    com.google.javascript.jscomp.CheckLevel var18 = null;
    var15.setBrokenClosureRequiresLevel(var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.graph.Graph.GraphEdge var20 = var0.getFirstEdge((java.lang.Object)var14, (java.lang.Object)var15);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test473() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test473"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test474() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test474"); }


    com.google.javascript.jscomp.AstValidator var0 = new com.google.javascript.jscomp.AstValidator();
    com.google.javascript.rhino.Node var4 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.comma(var4, var8);
    boolean var10 = var8.isUnscopedQualifiedName();
    com.google.javascript.rhino.Node var14 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var15 = var14.getDirectives();
    int var16 = var14.getChangeTime();
    boolean var17 = var14.isAssignAdd();
    com.google.javascript.rhino.Node var18 = var8.clonePropsFrom(var14);
    boolean var19 = var18.isObjectLit();
    boolean var20 = var18.isFalse();
    com.google.javascript.rhino.Node var24 = new com.google.javascript.rhino.Node((-1), 1, 100);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var26 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var27 = var26.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var28 = new com.google.javascript.jscomp.ComposeWarningsGuard(var27);
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.script(var27);
    com.google.javascript.rhino.ErrorReporter var30 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var32 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var33 = var32.getEdges();
    com.google.javascript.jscomp.deps.SortedDependencies var34 = new com.google.javascript.jscomp.deps.SortedDependencies(var33);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var36 = var35.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var37 = new com.google.javascript.jscomp.ComposeWarningsGuard(var36);
    com.google.javascript.jscomp.JSModuleGraph var38 = new com.google.javascript.jscomp.JSModuleGraph(var36);
    java.util.List var39 = var34.getSortedDependenciesOf(var36);
    com.google.javascript.rhino.Node var40 = var31.createParametersWithVarArgs(var39);
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var46 = var45.getDirectives();
    int var47 = var45.getChangeTime();
    boolean var48 = var45.isAssignAdd();
    java.lang.String var49 = var45.getSourceFileName();
    boolean var50 = var45.isCast();
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    com.google.javascript.rhino.jstype.JSType var53 = null;
    com.google.javascript.rhino.Node var57 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var58 = var57.getDirectives();
    boolean var59 = var57.isThrow();
    boolean var61 = var57.getBooleanProp(1);
    boolean var62 = var57.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var63 = var52.createFunctionType(var53, var57);
    boolean var64 = var63.matchesNumberContext();
    com.google.javascript.rhino.jstype.ObjectType var65 = var31.createObjectType("LABEL_NAME hi!\n", var45, (com.google.javascript.rhino.jstype.ObjectType)var63);
    com.google.javascript.rhino.Node var69 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var70 = var69.getDirectives();
    var69.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var74 = com.google.javascript.rhino.IR.not(var69);
    com.google.javascript.rhino.jstype.StaticSourceFile var75 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var74);
    com.google.javascript.rhino.ErrorReporter var76 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var76);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var78 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var79 = var78.getEdges();
    com.google.javascript.jscomp.deps.SortedDependencies var80 = new com.google.javascript.jscomp.deps.SortedDependencies(var79);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var81 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var82 = var81.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var83 = new com.google.javascript.jscomp.ComposeWarningsGuard(var82);
    com.google.javascript.jscomp.JSModuleGraph var84 = new com.google.javascript.jscomp.JSModuleGraph(var82);
    java.util.List var85 = var80.getSortedDependenciesOf(var82);
    com.google.javascript.rhino.Node var86 = var77.createParametersWithVarArgs(var85);
    java.lang.String var87 = var74.checkTreeEquals(var86);
    com.google.javascript.rhino.Node var90 = new com.google.javascript.rhino.Node(100, var29, var45, var86, 10, 10);
    int var91 = var24.getIndexOfChild(var45);
    int var92 = var18.getIndexOfChild(var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.validateRoot(var24);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "Node tree inequality:\nTree1:\nNOT\n    BITXOR 10\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NOT\n    BITXOR 10\n\n\nSubtree2: PARAM_LIST\n"+ "'", var87.equals("Node tree inequality:\nTree1:\nNOT\n    BITXOR 10\n\n\nTree2:\nPARAM_LIST\n\n\nSubtree1: NOT\n    BITXOR 10\n\n\nSubtree2: PARAM_LIST\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == (-1));

  }

  public void test475() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test475"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setNameReferenceReportPath("");
    var0.setSyntheticBlockEndMarker("hi!");
    var0.setTightenTypes(true);
    java.util.Set var7 = null;
    var0.setCssRenamingWhitelist(var7);
    var0.setInlineVariables(false);
    var0.setCollapseVariableDeclarations(true);
    var0.setDeadAssignmentElimination(false);
    var0.setAliasStringsBlacklist("BITXOR 10");
    com.google.javascript.jscomp.DefaultPassConfig var17 = new com.google.javascript.jscomp.DefaultPassConfig(var0);
    var0.setRemoveUnusedVars(false);

  }

  public void test476() {}
//   public void test476() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test476"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.jscomp.CodingConvention var1 = com.google.javascript.jscomp.CodingConventions.getDefault();
//     com.google.javascript.jscomp.GoogleCodingConvention var2 = new com.google.javascript.jscomp.GoogleCodingConvention(var1);
//     com.google.javascript.rhino.Node var6 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var7 = var6.getDirectives();
//     var6.putIntProp((-1), 0);
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.exprResult(var6);
//     com.google.javascript.jscomp.CodingConvention.Bind var12 = var2.describeFunctionBind(var6);
//     com.google.javascript.rhino.ErrorReporter var13 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     com.google.javascript.jscomp.AbstractCompiler var16 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var20 = var18.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var21 = var17.getDirectedPredNodes(var20);
//     com.google.javascript.jscomp.NodeTraversal.Callback var22 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var16, var21, var22);
//     com.google.javascript.rhino.jstype.FunctionType var24 = var14.createFunctionType(var15, var21);
//     com.google.javascript.rhino.ErrorReporter var26 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
//     com.google.javascript.rhino.jstype.JSType var28 = null;
//     com.google.javascript.jscomp.AbstractCompiler var29 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var31 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var33 = var31.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var34 = var30.getDirectedPredNodes(var33);
//     com.google.javascript.jscomp.NodeTraversal.Callback var35 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var29, var34, var35);
//     com.google.javascript.rhino.jstype.FunctionType var37 = var27.createFunctionType(var28, var34);
//     com.google.javascript.rhino.Node var38 = null;
//     boolean var39 = var24.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var37, var38);
//     com.google.javascript.rhino.Node var40 = var24.getParametersNode();
//     boolean var41 = var40.isThrow();
//     boolean var42 = var2.isPrototypeAlias(var40);
//     com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.add(var0, var40);
// 
//   }

  public void test477() {}
//   public void test477() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test477"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var1 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var4 = var2.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var5 = var1.getDirectedPredNodes(var4);
//     com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var0, var5, var6);
//     com.google.javascript.jscomp.JSModuleGraph var8 = new com.google.javascript.jscomp.JSModuleGraph(var5);
//     com.google.javascript.jscomp.JSModule var10 = new com.google.javascript.jscomp.JSModule("(function (): ?|null)");
//     java.io.PrintStream var11 = null;
//     com.google.javascript.jscomp.Compiler var12 = new com.google.javascript.jscomp.Compiler(var11);
//     var12.reportCodeChange();
//     com.google.javascript.jscomp.SourceFile var15 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
//     java.lang.String var16 = var15.getOriginalPath();
//     com.google.javascript.rhino.Node var17 = var12.parse(var15);
//     var10.add(var15);
//     java.util.Set var19 = var10.getAllDependencies();
//     com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("(function (): ?|null)");
//     var21.clearAsts();
//     com.google.javascript.jscomp.JSModule var23 = var8.getDeepestCommonDependencyInclusive(var10, var21);
//     java.util.Set var24 = var21.getThisAndAllDependencies();
//     com.google.javascript.jscomp.JSModule var25 = null;
//     var21.addDependency(var25);
// 
//   }

  public void test478() {}
//   public void test478() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test478"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var1 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var2 = var1.getEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var3 = new com.google.javascript.jscomp.ComposeWarningsGuard(var2);
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.script(var2);
//     com.google.javascript.rhino.ErrorReporter var5 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var7 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var8 = var7.getEdges();
//     com.google.javascript.jscomp.deps.SortedDependencies var9 = new com.google.javascript.jscomp.deps.SortedDependencies(var8);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var11 = var10.getEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var12 = new com.google.javascript.jscomp.ComposeWarningsGuard(var11);
//     com.google.javascript.jscomp.JSModuleGraph var13 = new com.google.javascript.jscomp.JSModuleGraph(var11);
//     java.util.List var14 = var9.getSortedDependenciesOf(var11);
//     com.google.javascript.rhino.Node var15 = var6.createParametersWithVarArgs(var14);
//     com.google.javascript.rhino.Node var20 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var21 = var20.getDirectives();
//     int var22 = var20.getChangeTime();
//     boolean var23 = var20.isAssignAdd();
//     java.lang.String var24 = var20.getSourceFileName();
//     boolean var25 = var20.isCast();
//     com.google.javascript.rhino.ErrorReporter var26 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
//     com.google.javascript.rhino.jstype.JSType var28 = null;
//     com.google.javascript.rhino.Node var32 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var33 = var32.getDirectives();
//     boolean var34 = var32.isThrow();
//     boolean var36 = var32.getBooleanProp(1);
//     boolean var37 = var32.isQualifiedName();
//     com.google.javascript.rhino.jstype.FunctionType var38 = var27.createFunctionType(var28, var32);
//     boolean var39 = var38.matchesNumberContext();
//     com.google.javascript.rhino.jstype.ObjectType var40 = var6.createObjectType("LABEL_NAME hi!\n", var20, (com.google.javascript.rhino.jstype.ObjectType)var38);
//     com.google.javascript.rhino.Node var44 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var45 = var44.getDirectives();
//     var44.putIntProp((-1), 0);
//     com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.not(var44);
//     com.google.javascript.rhino.jstype.StaticSourceFile var50 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var49);
//     com.google.javascript.rhino.ErrorReporter var51 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var53 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var54 = var53.getEdges();
//     com.google.javascript.jscomp.deps.SortedDependencies var55 = new com.google.javascript.jscomp.deps.SortedDependencies(var54);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var57 = var56.getEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var58 = new com.google.javascript.jscomp.ComposeWarningsGuard(var57);
//     com.google.javascript.jscomp.JSModuleGraph var59 = new com.google.javascript.jscomp.JSModuleGraph(var57);
//     java.util.List var60 = var55.getSortedDependenciesOf(var57);
//     com.google.javascript.rhino.Node var61 = var52.createParametersWithVarArgs(var60);
//     java.lang.String var62 = var49.checkTreeEquals(var61);
//     com.google.javascript.rhino.Node var65 = new com.google.javascript.rhino.Node(100, var4, var20, var61, 10, 10);
//     java.lang.Appendable var66 = null;
//     var4.appendStringTree(var66);
// 
//   }

  public void test479() {}
//   public void test479() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test479"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.paramList(var0);
// 
//   }

  public void test480() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test480"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.rhino.Node var6 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var7 = var6.getDirectives();
    boolean var8 = var6.isThrow();
    boolean var10 = var6.getBooleanProp(1);
    boolean var11 = var6.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var12 = var1.createFunctionType(var2, var6);
    java.lang.Iterable var14 = var1.getTypesWithProperty("ERROR");
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.jscomp.AbstractCompiler var18 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var19 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var22 = var20.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var23 = var19.getDirectedPredNodes(var22);
    com.google.javascript.jscomp.NodeTraversal.Callback var24 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var18, var23, var24);
    com.google.javascript.rhino.jstype.FunctionType var26 = var16.createFunctionType(var17, var23);
    com.google.javascript.rhino.ErrorReporter var28 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.jscomp.AbstractCompiler var31 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var32 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var35 = var33.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var36 = var32.getDirectedPredNodes(var35);
    com.google.javascript.jscomp.NodeTraversal.Callback var37 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var31, var36, var37);
    com.google.javascript.rhino.jstype.FunctionType var39 = var29.createFunctionType(var30, var36);
    com.google.javascript.rhino.Node var40 = null;
    boolean var41 = var26.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var39, var40);
    com.google.javascript.rhino.jstype.FunctionType var42 = var39.toMaybeFunctionType();
    boolean var43 = var39.hasCachedValues();
    com.google.javascript.rhino.ErrorReporter var44 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var44);
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    com.google.javascript.rhino.jstype.JSType var48 = null;
    com.google.javascript.jscomp.AbstractCompiler var49 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var53 = var51.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var54 = var50.getDirectedPredNodes(var53);
    com.google.javascript.jscomp.NodeTraversal.Callback var55 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var49, var54, var55);
    com.google.javascript.rhino.jstype.FunctionType var57 = var47.createFunctionType(var48, var54);
    com.google.javascript.rhino.jstype.JSType var58 = var45.createNullableType((com.google.javascript.rhino.jstype.JSType)var57);
    boolean var59 = var39.canCastTo(var58);
    com.google.javascript.rhino.jstype.JSType var61 = var1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType)var39, "ERROR");
    boolean var62 = var39.isBooleanValueType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test481() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test481"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    int var5 = var3.getChangeTime();
    com.google.javascript.rhino.Node var6 = var3.removeFirstChild();
    boolean var7 = var3.isWhile();
    com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.comma(var11, var15);
    boolean var17 = var16.isNoSideEffectsCall();
    com.google.javascript.rhino.InputId var18 = com.google.javascript.jscomp.NodeUtil.getInputId(var16);
    boolean var19 = var16.isOr();
    com.google.javascript.rhino.Node var23 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var24 = var23.getDirectives();
    com.google.javascript.rhino.Node var28 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var32 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.comma(var28, var32);
    boolean var34 = var28.isContinue();
    boolean var35 = var28.isInc();
    boolean var36 = var28.isVoid();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.forNode(var3, var16, var23, var28);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test482() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test482"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var3 = var2.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
    java.lang.String var6 = var1.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var7 = null;
    com.google.javascript.jscomp.DefaultPassConfig var8 = new com.google.javascript.jscomp.DefaultPassConfig(var7);
    var1.setPassConfig((com.google.javascript.jscomp.PassConfig)var8);
    java.io.PrintStream var10 = null;
    com.google.javascript.jscomp.Compiler var11 = new com.google.javascript.jscomp.Compiler(var10);
    var11.reportCodeChange();
    com.google.javascript.jscomp.SourceFile var14 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var15 = var14.getOriginalPath();
    com.google.javascript.rhino.Node var16 = var11.parse(var14);
    var14.setOriginalPath("{ }");
    com.google.javascript.rhino.Node var19 = var1.parse(var14);
    java.io.PrintStream var20 = null;
    com.google.javascript.jscomp.Compiler var21 = new com.google.javascript.jscomp.Compiler(var20);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var22 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var23 = var22.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var24 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var21, var23, var24);
    java.lang.String var26 = var21.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var27 = null;
    com.google.javascript.jscomp.DefaultPassConfig var28 = new com.google.javascript.jscomp.DefaultPassConfig(var27);
    var21.setPassConfig((com.google.javascript.jscomp.PassConfig)var28);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var31 = var30.getEdges();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var32 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var33 = var32.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var34 = new com.google.javascript.jscomp.ComposeWarningsGuard(var33);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.script(var33);
    com.google.javascript.jscomp.CompilerOptions var36 = new com.google.javascript.jscomp.CompilerOptions();
    var36.setPropertyAffinity(false);
    com.google.javascript.jscomp.CheckLevel var39 = null;
    var36.setBrokenClosureRequiresLevel(var39);
    var21.<com.google.javascript.jscomp.SourceFile>initModules(var31, var33, var36);
    com.google.javascript.jscomp.Compiler.IntermediateState var42 = var21.getState();
    var1.setState(var42);
    var1.rebuildInputsFromModules();
    java.io.PrintStream var45 = null;
    com.google.javascript.jscomp.Compiler var46 = new com.google.javascript.jscomp.Compiler(var45);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var47 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var48 = var47.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var49 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var46, var48, var49);
    java.lang.String var51 = var46.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var52 = null;
    com.google.javascript.jscomp.DefaultPassConfig var53 = new com.google.javascript.jscomp.DefaultPassConfig(var52);
    var46.setPassConfig((com.google.javascript.jscomp.PassConfig)var53);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var55 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var56 = var55.getEdges();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var57 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var58 = var57.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var59 = new com.google.javascript.jscomp.ComposeWarningsGuard(var58);
    com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.script(var58);
    com.google.javascript.jscomp.CompilerOptions var61 = new com.google.javascript.jscomp.CompilerOptions();
    var61.setPropertyAffinity(false);
    com.google.javascript.jscomp.CheckLevel var64 = null;
    var61.setBrokenClosureRequiresLevel(var64);
    var46.<com.google.javascript.jscomp.SourceFile>initModules(var56, var58, var61);
    com.google.javascript.jscomp.Compiler.IntermediateState var67 = var46.getState();
    var1.setState(var67);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.optimize();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!"+ "'", var15.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + ""+ "'", var26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + ""+ "'", var51.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test483() {}
//   public void test483() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test483"); }
// 
// 
//     java.io.InputStream var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromInputStream("function (): {370336078}", var1);
// 
//   }

  public void test484() {}
//   public void test484() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test484"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.comma(var0, var2);
// 
//   }

  public void test485() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test485"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    var3.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.exprResult(var3);
    java.lang.Iterable var9 = var8.siblings();
    com.google.javascript.jscomp.CodingConvention var10 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.jscomp.GoogleCodingConvention var11 = new com.google.javascript.jscomp.GoogleCodingConvention(var10);
    com.google.javascript.jscomp.ClosureCodingConvention var12 = new com.google.javascript.jscomp.ClosureCodingConvention(var10);
    com.google.javascript.rhino.Node var16 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var17 = var16.getDirectives();
    boolean var18 = var16.isReturn();
    boolean var19 = var12.isPrototypeAlias(var16);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.Node.newString("hi!", 10, 0);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var24 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var25 = var24.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var26 = new com.google.javascript.jscomp.ComposeWarningsGuard(var25);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.script(var25);
    com.google.javascript.rhino.Node var28 = var23.copyInformationFromForTree(var27);
    boolean var29 = var28.isOnlyModifiesThisCall();
    com.google.javascript.rhino.Node var34 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.jscomp.DiagnosticType var37 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "ERROR");
    java.lang.String[] var39 = new java.lang.String[] { "(function (): ?|null)"};
    com.google.javascript.jscomp.JSError var40 = com.google.javascript.jscomp.JSError.make("ERROR", var34, var37, var39);
    java.lang.String var41 = var12.extractClassNameIfProvide(var28, var34);
    boolean var42 = var34.mayMutateGlobalStateOrThrow();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.getprop(var8, var34);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);

  }

  public void test486() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test486"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.jscomp.AbstractCompiler var3 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var5.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var8 = var4.getDirectedPredNodes(var7);
    com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var3, var8, var9);
    com.google.javascript.rhino.jstype.FunctionType var11 = var1.createFunctionType(var2, var8);
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.AbstractCompiler var16 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var20 = var18.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var21 = var17.getDirectedPredNodes(var20);
    com.google.javascript.jscomp.NodeTraversal.Callback var22 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var16, var21, var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var14.createFunctionType(var15, var21);
    com.google.javascript.rhino.Node var25 = null;
    boolean var26 = var11.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var24, var25);
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    com.google.javascript.rhino.jstype.JSType var29 = null;
    com.google.javascript.jscomp.AbstractCompiler var30 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var31 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var32 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var34 = var32.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var35 = var31.getDirectedPredNodes(var34);
    com.google.javascript.jscomp.NodeTraversal.Callback var36 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var30, var35, var36);
    com.google.javascript.rhino.jstype.FunctionType var38 = var28.createFunctionType(var29, var35);
    java.lang.Iterable var39 = var38.getImplementedInterfaces();
    com.google.javascript.rhino.ErrorReporter var40 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.jscomp.AbstractCompiler var43 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var44 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var45 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var47 = var45.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var48 = var44.getDirectedPredNodes(var47);
    com.google.javascript.jscomp.NodeTraversal.Callback var49 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var43, var48, var49);
    com.google.javascript.rhino.jstype.FunctionType var51 = var41.createFunctionType(var42, var48);
    com.google.javascript.rhino.ErrorReporter var53 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var53);
    com.google.javascript.rhino.jstype.JSType var55 = null;
    com.google.javascript.jscomp.AbstractCompiler var56 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var57 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var58 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var60 = var58.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var61 = var57.getDirectedPredNodes(var60);
    com.google.javascript.jscomp.NodeTraversal.Callback var62 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var56, var61, var62);
    com.google.javascript.rhino.jstype.FunctionType var64 = var54.createFunctionType(var55, var61);
    com.google.javascript.rhino.Node var65 = null;
    boolean var66 = var51.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var64, var65);
    boolean var67 = var38.isInvariant((com.google.javascript.rhino.jstype.JSType)var51);
    boolean var68 = var11.isEquivalentTo((com.google.javascript.rhino.jstype.JSType)var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.FunctionType var69 = var11.cloneWithoutArrowType();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);

  }

  public void test487() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test487"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInstrumentMemoryAllocations(false);
    var0.setRemoveUnusedLocalVars(true);
    var0.setInstrumentForCoverage(true);
    var0.setRecordFunctionInformation(false);
    var0.setShadowVariables(false);

  }

  public void test488() {}
//   public void test488() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test488"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
//     com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
//     com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
//     com.google.javascript.rhino.Node var6 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var7 = var6.getDirectives();
//     boolean var8 = var6.isThrow();
//     boolean var10 = var6.getBooleanProp(1);
//     boolean var11 = var6.isLabelName();
//     java.util.Map var12 = null;
//     var2.checkForCallingConventionDefiningCalls(var6, var12);
//     com.google.javascript.rhino.Node var17 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.comma(var17, var21);
//     boolean var23 = var21.isUnscopedQualifiedName();
//     boolean var24 = var21.isDo();
//     java.util.List var25 = var2.identifyTypeDeclarationCall(var21);
// 
//   }

  public void test489() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test489"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setRecordFunctionInformation(true);
    boolean var3 = var0.isRemoveUnusedClassProperties();
    com.google.javascript.jscomp.CssRenamingMap var4 = null;
    var0.setCssRenamingMap(var4);
    var0.setOptimizeReturns(false);
    var0.setLooseTypes(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test490() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test490"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("hi!");
    java.lang.String var2 = var1.getOriginalPath();
    int var4 = var1.getColumnOfOffset(10);
    com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var1, false);
    com.google.javascript.jscomp.CompilerInput var9 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var6, "", true);
    com.google.javascript.jscomp.SourceFile var10 = var6.getSourceFile();
    java.io.PrintStream var11 = null;
    com.google.javascript.jscomp.Compiler var12 = new com.google.javascript.jscomp.Compiler(var11);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var13 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var14 = var13.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var15 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var12, var14, var15);
    java.lang.String var17 = var12.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var18 = null;
    com.google.javascript.jscomp.DefaultPassConfig var19 = new com.google.javascript.jscomp.DefaultPassConfig(var18);
    var12.setPassConfig((com.google.javascript.jscomp.PassConfig)var19);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var22 = var21.getEdges();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var23 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var24 = var23.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var25 = new com.google.javascript.jscomp.ComposeWarningsGuard(var24);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.script(var24);
    com.google.javascript.jscomp.CompilerOptions var27 = new com.google.javascript.jscomp.CompilerOptions();
    var27.setPropertyAffinity(false);
    com.google.javascript.jscomp.CheckLevel var30 = null;
    var27.setBrokenClosureRequiresLevel(var30);
    var12.<com.google.javascript.jscomp.SourceFile>initModules(var22, var24, var27);
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var36 = var35.getEdges();
    com.google.javascript.jscomp.deps.SortedDependencies var37 = new com.google.javascript.jscomp.deps.SortedDependencies(var36);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var38 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var39 = var38.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var40 = new com.google.javascript.jscomp.ComposeWarningsGuard(var39);
    com.google.javascript.jscomp.JSModuleGraph var41 = new com.google.javascript.jscomp.JSModuleGraph(var39);
    java.util.List var42 = var37.getSortedDependenciesOf(var39);
    com.google.javascript.rhino.Node var43 = var34.createParametersWithVarArgs(var42);
    com.google.javascript.jscomp.NodeTraversal.Callback var44 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var12, var42, var44);
    var6.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var12);
    com.google.javascript.jscomp.Compiler.CodeBuilder var47 = null;
    com.google.javascript.rhino.Node var54 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.jscomp.DiagnosticType var57 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "ERROR");
    java.lang.String[] var59 = new java.lang.String[] { "(function (): ?|null)"};
    com.google.javascript.jscomp.JSError var60 = com.google.javascript.jscomp.JSError.make("ERROR", var54, var57, var59);
    com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var63 = var62.isGetElem();
    com.google.javascript.rhino.Node var64 = var54.srcrefTree(var62);
    com.google.javascript.rhino.Node var68 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var69 = var68.getDirectives();
    int var70 = var68.getChangeTime();
    boolean var71 = var68.isAssignAdd();
    com.google.javascript.rhino.Node var74 = new com.google.javascript.rhino.Node(100, var54, var68, 0, 0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var12.toSource(var47, 100, var74);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + ""+ "'", var17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test491() {}
//   public void test491() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test491"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = null;
//     com.google.javascript.jscomp.AbstractCompiler var3 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var5.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var8 = var4.getDirectedPredNodes(var7);
//     com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var3, var8, var9);
//     com.google.javascript.rhino.jstype.FunctionType var11 = var1.createFunctionType(var2, var8);
//     com.google.javascript.rhino.jstype.TemplateType var12 = var1.getObjectElementKey();
//     com.google.javascript.jscomp.CodingConvention var13 = com.google.javascript.jscomp.CodingConventions.getDefault();
//     com.google.javascript.jscomp.GoogleCodingConvention var14 = new com.google.javascript.jscomp.GoogleCodingConvention(var13);
//     com.google.javascript.rhino.Node var18 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var19 = var18.getDirectives();
//     var18.putIntProp((-1), 0);
//     com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.exprResult(var18);
//     com.google.javascript.jscomp.CodingConvention.Bind var24 = var14.describeFunctionBind(var18);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var25 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.List var26 = var25.getEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var27 = new com.google.javascript.jscomp.ComposeWarningsGuard(var26);
//     com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.script(var26);
//     boolean var29 = var14.isPrototypeAlias(var28);
//     com.google.javascript.rhino.ErrorReporter var30 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
//     com.google.javascript.rhino.jstype.JSType var32 = null;
//     com.google.javascript.rhino.Node var36 = new com.google.javascript.rhino.Node(10, 10, 0);
//     java.util.Set var37 = var36.getDirectives();
//     boolean var38 = var36.isThrow();
//     boolean var40 = var36.getBooleanProp(1);
//     boolean var41 = var36.isQualifiedName();
//     com.google.javascript.rhino.jstype.FunctionType var42 = var31.createFunctionType(var32, var36);
//     java.lang.Iterable var44 = var31.getTypesWithProperty("ERROR");
//     java.lang.Iterable var46 = var31.getEachReferenceTypeWithProperty("ERROR");
//     com.google.javascript.rhino.ErrorReporter var47 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
//     com.google.javascript.rhino.jstype.JSType var49 = null;
//     com.google.javascript.jscomp.AbstractCompiler var50 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var52 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var54 = var52.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var55 = var51.getDirectedPredNodes(var54);
//     com.google.javascript.jscomp.NodeTraversal.Callback var56 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var50, var55, var56);
//     com.google.javascript.rhino.jstype.FunctionType var58 = var48.createFunctionType(var49, var55);
//     java.lang.Iterable var59 = var58.getImplementedInterfaces();
//     boolean var60 = var58.isStruct();
//     java.lang.String var61 = var58.getDisplayName();
//     com.google.javascript.jscomp.AbstractCompiler var62 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var63 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var64 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var66 = var64.createDirectedGraphNode((java.lang.Object)(-1));
//     java.util.List var67 = var63.getDirectedPredNodes(var66);
//     com.google.javascript.jscomp.NodeTraversal.Callback var68 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var62, var67, var68);
//     java.util.Map var70 = null;
//     var14.defineDelegateProxyPrototypeProperties(var31, (com.google.javascript.rhino.jstype.StaticScope)var58, var67, var70);
//     com.google.javascript.rhino.jstype.ObjectType var72 = var1.createObjectType((com.google.javascript.rhino.jstype.ObjectType)var58);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var73 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
//     com.google.javascript.rhino.Node var74 = null;
//     com.google.javascript.rhino.Node var75 = var73.newOptionalParameterFromNode(var74);
// 
//   }

  public void test492() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test492"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    int var5 = var3.getChangeTime();
    boolean var6 = var3.isAssignAdd();
    java.lang.String var7 = var3.getSourceFileName();
    java.lang.Iterable var8 = var3.children();
    boolean var9 = var3.isSyntheticBlock();
    boolean var10 = var3.isDefaultCase();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.regexp(var3);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test493() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test493"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    var0.pushEdgeAnnotations();
    java.util.List var2 = var0.getGraphvizEdges();
    var0.clearNodeAnnotations();
    java.util.List var4 = var0.getGraphvizNodes();
    com.google.javascript.jscomp.AbstractCompiler var5 = null;
    com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
    com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal(var5, var6);
    java.lang.String var8 = var7.getSourceName();
    com.google.javascript.rhino.Node var9 = var7.getCurrentNode();
    com.google.javascript.jscomp.AbstractCompiler var10 = var7.getCompiler();
    com.google.javascript.jscomp.CompilerOptions var11 = new com.google.javascript.jscomp.CompilerOptions();
    var11.setPropertyAffinity(false);
    com.google.javascript.jscomp.CheckLevel var14 = null;
    var11.setBrokenClosureRequiresLevel(var14);
    var11.setGenerateExports(false);
    var11.setAliasAllStrings(true);
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var22 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var23 = var22.getEdges();
    com.google.javascript.jscomp.deps.SortedDependencies var24 = new com.google.javascript.jscomp.deps.SortedDependencies(var23);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var25 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var26 = var25.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var27 = new com.google.javascript.jscomp.ComposeWarningsGuard(var26);
    com.google.javascript.jscomp.JSModuleGraph var28 = new com.google.javascript.jscomp.JSModuleGraph(var26);
    java.util.List var29 = var24.getSortedDependenciesOf(var26);
    com.google.javascript.rhino.Node var30 = var21.createParametersWithVarArgs(var29);
    com.google.javascript.rhino.Node var35 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var36 = var35.getDirectives();
    int var37 = var35.getChangeTime();
    boolean var38 = var35.isAssignAdd();
    java.lang.String var39 = var35.getSourceFileName();
    boolean var40 = var35.isCast();
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.rhino.Node var47 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var48 = var47.getDirectives();
    boolean var49 = var47.isThrow();
    boolean var51 = var47.getBooleanProp(1);
    boolean var52 = var47.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var53 = var42.createFunctionType(var43, var47);
    boolean var54 = var53.matchesNumberContext();
    com.google.javascript.rhino.jstype.ObjectType var55 = var21.createObjectType("LABEL_NAME hi!\n", var35, (com.google.javascript.rhino.jstype.ObjectType)var53);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var56 = var0.isConnectedInDirection((java.lang.Object)var7, (java.lang.Object)true, (java.lang.Object)"LABEL_NAME hi!\n");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test494() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test494"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.jscomp.AbstractCompiler var3 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var5.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var8 = var4.getDirectedPredNodes(var7);
    com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var3, var8, var9);
    com.google.javascript.rhino.jstype.FunctionType var11 = var1.createFunctionType(var2, var8);
    boolean var13 = var1.isForwardDeclaredType("ERROR");
    var1.resetForTypeCheck();
    com.google.javascript.rhino.jstype.FunctionBuilder var15 = new com.google.javascript.rhino.jstype.FunctionBuilder(var1);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.Node.newString(10, "Object#Element", 100, (-1));
    com.google.javascript.rhino.jstype.FunctionBuilder var21 = var15.withParamsNode(var20);
    com.google.javascript.jscomp.CodingConvention var22 = com.google.javascript.jscomp.CodingConventions.getDefault();
    com.google.javascript.rhino.Node var27 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var28 = var27.getDirectives();
    var27.putIntProp((-1), 0);
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.not(var27);
    com.google.javascript.rhino.jstype.StaticSourceFile var33 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var32);
    com.google.javascript.rhino.JSDocInfo var34 = null;
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNodeDeclaration(var22, "ERROR", var32, var34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.ifNode(var20, var35);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test495() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test495"); }


    com.google.javascript.jscomp.AstValidator var0 = new com.google.javascript.jscomp.AstValidator();
    com.google.javascript.rhino.Node var4 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(10, 10, 0);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.comma(var4, var8);
    boolean var10 = var4.isContinue();
    boolean var11 = var4.isInc();
    boolean var12 = var4.isAssign();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.validateCodeRoot(var4);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test496() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test496"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var4 = var3.getDirectives();
    var3.putIntProp((-1), 0);
    var3.setVarArgs(false);
    com.google.javascript.rhino.jstype.StaticSourceFile var10 = var3.getStaticSourceFile();
    var3.setCharno(10);
    boolean var13 = var3.isReturn();
    com.google.javascript.rhino.Node var17 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var18 = var17.getDirectives();
    int var19 = var17.getChangeTime();
    com.google.javascript.rhino.jstype.StaticSourceFile var20 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var17);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.ifNode(var3, var17);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test497() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test497"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var3 = var2.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var4);
    java.lang.String var6 = var1.getAstDotGraph();
    com.google.javascript.jscomp.NodeTraversal.Callback var7 = null;
    com.google.javascript.jscomp.NodeTraversal var8 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var1, var7);
    java.io.PrintStream var9 = null;
    com.google.javascript.jscomp.Compiler var10 = new com.google.javascript.jscomp.Compiler(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var12 = var11.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var13 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var10, var12, var13);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var15 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var16 = var15.getEdges();
    com.google.javascript.jscomp.deps.SortedDependencies var17 = new com.google.javascript.jscomp.deps.SortedDependencies(var16);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var19 = var18.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var20 = new com.google.javascript.jscomp.ComposeWarningsGuard(var19);
    com.google.javascript.jscomp.JSModuleGraph var21 = new com.google.javascript.jscomp.JSModuleGraph(var19);
    java.util.List var22 = var17.getSortedDependenciesOf(var19);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var23 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var24 = var23.getEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var25 = new com.google.javascript.jscomp.ComposeWarningsGuard(var24);
    java.util.List var26 = var17.getSortedDependenciesOf(var24);
    java.io.PrintStream var27 = null;
    com.google.javascript.jscomp.Compiler var28 = new com.google.javascript.jscomp.Compiler(var27);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var29 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var30 = var29.getEdges();
    com.google.javascript.jscomp.NodeTraversal.Callback var31 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var28, var30, var31);
    java.util.List var34 = var17.getDependenciesOf(var30, false);
    com.google.javascript.jscomp.CompilerOptions var35 = new com.google.javascript.jscomp.CompilerOptions();
    var35.setNameReferenceReportPath("");
    var35.setSyntheticBlockEndMarker("hi!");
    var35.setTightenTypes(true);
    com.google.javascript.jscomp.Result var42 = var1.<com.google.javascript.jscomp.SourceFile>compileModules(var12, var34, var35);
    java.lang.String var45 = var1.getSourceLine("BITXOR 10", 0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.normalize();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);

  }

  public void test498() {}
//   public void test498() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test498"); }
// 
// 
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newNumber(1.0d, 100, 1);
//     com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.comma(var7, var11);
//     boolean var13 = var7.isContinue();
//     boolean var14 = var7.isInc();
//     boolean var15 = var7.isWith();
//     boolean var16 = var7.isGetProp();
//     var3.removeChild(var7);
// 
//   }

  public void test499() {}
//   public void test499() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test499"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var5 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var9 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.comma(var5, var9);
//     boolean var11 = var10.isNoSideEffectsCall();
//     com.google.javascript.jscomp.DiagnosticType var14 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "ERROR");
//     java.lang.String[] var16 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var17 = com.google.javascript.jscomp.JSError.make("", var10, var14, var16);
//     com.google.javascript.jscomp.DiagnosticGroup var18 = com.google.javascript.jscomp.DiagnosticGroup.forType(var14);
//     com.google.javascript.rhino.Node var23 = new com.google.javascript.rhino.Node(10, 10, 0);
//     com.google.javascript.jscomp.DiagnosticType var26 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "ERROR");
//     java.lang.String[] var28 = new java.lang.String[] { "(function (): ?|null)"};
//     com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("ERROR", var23, var26, var28);
//     com.google.javascript.jscomp.JSError var30 = com.google.javascript.jscomp.JSError.make(var0, var14, var28);
// 
//   }

  public void test500() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test500"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    var0.pushEdgeAnnotations();
    java.util.List var2 = var0.getGraphvizEdges();
    java.util.Collection var3 = var0.getNodes();
    boolean var4 = var0.isDirected();
    java.util.List var5 = var0.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.jscomp.AbstractCompiler var11 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var13 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var15 = var13.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var16 = var12.getDirectedPredNodes(var15);
    com.google.javascript.jscomp.NodeTraversal.Callback var17 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var11, var16, var17);
    com.google.javascript.rhino.jstype.FunctionType var19 = var9.createFunctionType(var10, var16);
    com.google.javascript.rhino.jstype.JSType var20 = var7.createNullableType((com.google.javascript.rhino.jstype.JSType)var19);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    com.google.javascript.jscomp.AbstractCompiler var26 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var27 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var30 = var28.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var31 = var27.getDirectedPredNodes(var30);
    com.google.javascript.jscomp.NodeTraversal.Callback var32 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var26, var31, var32);
    com.google.javascript.rhino.jstype.FunctionType var34 = var24.createFunctionType(var25, var31);
    com.google.javascript.rhino.jstype.JSType var35 = var22.createNullableType((com.google.javascript.rhino.jstype.JSType)var34);
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    com.google.javascript.rhino.ErrorReporter var38 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.jscomp.AbstractCompiler var41 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var42 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var43 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var45 = var43.createDirectedGraphNode((java.lang.Object)(-1));
    java.util.List var46 = var42.getDirectedPredNodes(var45);
    com.google.javascript.jscomp.NodeTraversal.Callback var47 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots(var41, var46, var47);
    com.google.javascript.rhino.jstype.FunctionType var49 = var39.createFunctionType(var40, var46);
    com.google.javascript.rhino.jstype.JSType var50 = var37.createNullableType((com.google.javascript.rhino.jstype.JSType)var49);
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    com.google.javascript.rhino.jstype.JSType var53 = null;
    com.google.javascript.rhino.Node var57 = new com.google.javascript.rhino.Node(10, 10, 0);
    java.util.Set var58 = var57.getDirectives();
    boolean var59 = var57.isThrow();
    boolean var61 = var57.getBooleanProp(1);
    boolean var62 = var57.isQualifiedName();
    com.google.javascript.rhino.jstype.FunctionType var63 = var52.createFunctionType(var53, var57);
    com.google.javascript.rhino.jstype.JSType[] var64 = new com.google.javascript.rhino.jstype.JSType[] { var53};
    com.google.javascript.rhino.Node var65 = var37.createParameters(var64);
    com.google.javascript.rhino.jstype.FunctionType var66 = var7.createConstructorType(var35, var64);
    var7.forwardDeclareType("(function (): ?|null)");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var69 = var0.getWeight((java.lang.Object)var7);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

}
