
import junit.framework.*;

public class RandoopTest1 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test1"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    boolean var13 = var12.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    var15.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
    com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
    com.google.javascript.rhino.jstype.JSType var24 = var22.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var25 = var22.getTypeOfThis();
    boolean var26 = var12.canCastTo((com.google.javascript.rhino.jstype.JSType)var22);
    boolean var27 = var22.isDateType();
    boolean var28 = var22.isConstructor();
    boolean var30 = var1.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType)var22, "goog.exportProperty");
    var1.setLastGeneration(false);
    var1.clearTemplateTypeNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test2() {}
//   public void test2() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test2"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
//     com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var6);
//     double var8 = var5.getProgress();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var5);
//     com.google.javascript.jscomp.CompilerOptions var10 = null;
//     com.google.javascript.jscomp.DefaultPassConfig var11 = new com.google.javascript.jscomp.DefaultPassConfig(var10);
//     var5.setPassConfig((com.google.javascript.jscomp.PassConfig)var11);
//     com.google.javascript.jscomp.CompilerInput var14 = var5.newExternInput("FALSE");
// 
//   }

  public void test3() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test3"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    com.google.javascript.rhino.Node var3 = var1.cloneNode();
    java.nio.charset.Charset var5 = null;
    com.google.javascript.jscomp.SourceFile var6 = com.google.javascript.jscomp.SourceFile.fromFile("goog.global", var5);
    var6.clearCachedSource();
    var1.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var6);
    com.google.javascript.jscomp.JsAst var9 = new com.google.javascript.jscomp.JsAst(var6);
    com.google.javascript.jscomp.SourceAst var10 = null;
    com.google.javascript.jscomp.CompilerInput var13 = new com.google.javascript.jscomp.CompilerInput(var10, "hi!", false);
    com.google.javascript.jscomp.SourceAst var14 = var13.getSourceAst();
    com.google.javascript.rhino.InputId var15 = var13.getInputId();
    com.google.javascript.jscomp.CompilerInput var17 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var9, var15, false);
    com.google.javascript.jscomp.SourceFile var21 = com.google.javascript.jscomp.SourceFile.fromCode("LinkedGraph", "STRING hi!", "FALSE");
    java.lang.String var22 = var21.getCode();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var9.setSourceFile(var21);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "FALSE"+ "'", var22.equals("FALSE"));

  }

  public void test4() {}
//   public void test4() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test4"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
//     com.google.javascript.rhino.Node var3 = var2.getCurrentNode();
//     com.google.javascript.jscomp.Scope var4 = var2.getScope();
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.Node.newString("hi!: ");
//     boolean var7 = var6.isSetterDef();
//     com.google.javascript.rhino.Node var8 = var6.getLastSibling();
//     boolean var9 = var6.isLabel();
//     boolean var10 = var6.isDo();
//     var2.traverse(var6);
// 
//   }

  public void test5() {}
//   public void test5() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test5"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var1);
//     com.google.javascript.jscomp.Scope var3 = var2.getScope();
//     com.google.javascript.rhino.Node var4 = null;
//     com.google.javascript.jscomp.CheckLevel var5 = null;
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var9 = var8.isNE();
//     int var10 = var8.getSideEffectFlags();
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var13 = var12.isNE();
//     boolean var14 = var12.isWith();
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.getprop(var8, var12);
//     java.util.Set var16 = null;
//     var8.setDirectives(var16);
//     com.google.javascript.jscomp.CheckLevel var18 = null;
//     com.google.javascript.jscomp.CheckLevel var20 = null;
//     com.google.javascript.jscomp.DiagnosticType var22 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var20, "");
//     java.lang.String[] var23 = null;
//     com.google.javascript.jscomp.JSError var24 = com.google.javascript.jscomp.JSError.make("hi!", var8, var18, var22, var23);
//     com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var29 = var28.isNE();
//     int var30 = var28.getSideEffectFlags();
//     com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var33 = var32.isNE();
//     boolean var34 = var32.isWith();
//     com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.getprop(var28, var32);
//     java.util.Set var36 = null;
//     var28.setDirectives(var36);
//     com.google.javascript.jscomp.CheckLevel var38 = null;
//     com.google.javascript.jscomp.CheckLevel var40 = null;
//     com.google.javascript.jscomp.DiagnosticType var42 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var40, "");
//     java.lang.String[] var43 = null;
//     com.google.javascript.jscomp.JSError var44 = com.google.javascript.jscomp.JSError.make("hi!", var28, var38, var42, var43);
//     com.google.javascript.jscomp.CheckLevel var49 = null;
//     com.google.javascript.jscomp.DiagnosticType var51 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var49, "");
//     java.lang.String[] var53 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var54 = com.google.javascript.jscomp.JSError.make("", 100, 0, var51, var53);
//     java.lang.String[] var56 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var57 = com.google.javascript.jscomp.JSError.make("hi!", var28, var51, var56);
//     com.google.javascript.jscomp.JSError var58 = com.google.javascript.jscomp.JSError.make(var22, var56);
//     com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var63 = var62.isNE();
//     int var64 = var62.getSideEffectFlags();
//     com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var67 = var66.isNE();
//     boolean var68 = var66.isWith();
//     com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.IR.getprop(var62, var66);
//     java.util.Set var70 = null;
//     var62.setDirectives(var70);
//     com.google.javascript.jscomp.CheckLevel var72 = null;
//     com.google.javascript.jscomp.CheckLevel var74 = null;
//     com.google.javascript.jscomp.DiagnosticType var76 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var74, "");
//     java.lang.String[] var77 = null;
//     com.google.javascript.jscomp.JSError var78 = com.google.javascript.jscomp.JSError.make("hi!", var62, var72, var76, var77);
//     com.google.javascript.jscomp.CheckLevel var83 = null;
//     com.google.javascript.jscomp.DiagnosticType var85 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var83, "");
//     java.lang.String[] var87 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var88 = com.google.javascript.jscomp.JSError.make("", 100, 0, var85, var87);
//     java.lang.String[] var90 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var91 = com.google.javascript.jscomp.JSError.make("hi!", var62, var85, var90);
//     com.google.javascript.jscomp.JSError var92 = var2.makeError(var4, var5, var22, var90);
// 
//   }

  public void test6() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test6"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("goog.exportProperty");
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var1, false);
    com.google.javascript.jscomp.JSModule var4 = var3.getModule();
    com.google.javascript.jscomp.JSModule var5 = var3.getModule();
    java.lang.String var7 = var3.getLine(10);
    com.google.javascript.jscomp.SourceAst var8 = var3.getAst();
    java.lang.String var10 = var3.getLine(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var12 = var3.getLineOffset(40);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test7() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test7"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    java.lang.String var2 = var1.getExportPropertyFunction();
    boolean var4 = var1.isValidEnumKey("");
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    int var8 = var6.getSideEffectFlags();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    boolean var11 = var10.isNE();
    boolean var12 = var10.isWith();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.getprop(var6, var10);
    var10.removeProp(0);
    java.lang.String var16 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var10);
    java.util.Set var17 = null;
    var10.setDirectives(var17);
    java.lang.Iterable var19 = var10.siblings();
    boolean var20 = var1.isVarArgsParameter(var10);
    boolean var23 = var1.isExported("STRING hi!", true);
    boolean var25 = var1.isConstantKey("Node tree inequality:\nTree1:\nSTRING LinkedGraph\n\n\nTree2:\nSTRING hi!\n\n\nSubtree1: STRING LinkedGraph\n\n\nSubtree2: STRING hi!\n");
    boolean var27 = var1.isExported("false");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "goog.exportProperty"+ "'", var2.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test8() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test8"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    int var12 = var10.getChangeTime();
    boolean var13 = var10.isGetterDef();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.block();
    int var15 = var14.getSourceOffset();
    com.google.javascript.rhino.Node[] var16 = new com.google.javascript.rhino.Node[] { var14};
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.script(var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.newNode(var10, var16);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test9() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test9"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
    int var15 = var12.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
    boolean var18 = var17.isVarArgs();
    boolean var19 = var17.isWhile();
    boolean var20 = var17.isContinue();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var21 = var17.getString();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test10() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test10"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
    boolean var11 = var10.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    var13.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType[] var19 = new com.google.javascript.rhino.jstype.JSType[] { var18};
    com.google.javascript.rhino.jstype.FunctionType var20 = var13.createConstructorType(var16, false, var19);
    com.google.javascript.rhino.jstype.JSType var22 = var20.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var23 = var20.getTypeOfThis();
    boolean var24 = var10.canCastTo((com.google.javascript.rhino.jstype.JSType)var20);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    var26.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var29 = null;
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.jstype.FunctionType var33 = var26.createConstructorType(var29, false, var32);
    boolean var34 = var33.isInterface();
    com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var33};
    com.google.javascript.rhino.jstype.FunctionType var36 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var10, var35);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var37 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var38 = var37.getGraphvizNodes();
    var1.setTemplateTypeNames(var38);
    com.google.javascript.jscomp.deps.SortedDependencies var40 = new com.google.javascript.jscomp.deps.SortedDependencies(var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.deps.DependencyInfo var42 = var40.getInputProviding("Object#Key");
      fail("Expected exception of type com.google.javascript.jscomp.deps.SortedDependencies.MissingProvideException");
    } catch (com.google.javascript.jscomp.deps.SortedDependencies.MissingProvideException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test11() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test11"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.DependencyOptions var1 = new com.google.javascript.jscomp.DependencyOptions();
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    java.lang.Iterable var5 = var3.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    var7.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType var12 = null;
    com.google.javascript.rhino.jstype.JSType[] var13 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.jstype.FunctionType var14 = var7.createConstructorType(var10, false, var13);
    boolean var15 = var14.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var16 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
    var17.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.rhino.jstype.JSType var22 = null;
    com.google.javascript.rhino.jstype.JSType[] var23 = new com.google.javascript.rhino.jstype.JSType[] { var22};
    com.google.javascript.rhino.jstype.FunctionType var24 = var17.createConstructorType(var20, false, var23);
    com.google.javascript.rhino.jstype.FunctionType var25 = var3.createConstructorType((com.google.javascript.rhino.jstype.JSType)var14, var23);
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
    java.lang.Iterable var29 = var27.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var30 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
    var31.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var34 = null;
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var36};
    com.google.javascript.rhino.jstype.FunctionType var38 = var31.createConstructorType(var34, false, var37);
    boolean var39 = var38.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var40 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40);
    var41.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var44 = null;
    com.google.javascript.rhino.jstype.JSType var46 = null;
    com.google.javascript.rhino.jstype.JSType[] var47 = new com.google.javascript.rhino.jstype.JSType[] { var46};
    com.google.javascript.rhino.jstype.FunctionType var48 = var41.createConstructorType(var44, false, var47);
    com.google.javascript.rhino.jstype.FunctionType var49 = var27.createConstructorType((com.google.javascript.rhino.jstype.JSType)var38, var47);
    boolean var50 = var38.isReturnTypeInferred();
    boolean var51 = var38.isTemplatizedType();
    com.google.javascript.rhino.ErrorReporter var52 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var52);
    com.google.javascript.rhino.ErrorReporter var54 = var53.getErrorReporter();
    com.google.javascript.rhino.jstype.TemplateType var55 = var53.getObjectElementKey();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var57 = var56.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    var59.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var62 = null;
    com.google.javascript.rhino.jstype.JSType var64 = null;
    com.google.javascript.rhino.jstype.JSType[] var65 = new com.google.javascript.rhino.jstype.JSType[] { var64};
    com.google.javascript.rhino.jstype.FunctionType var66 = var59.createConstructorType(var62, false, var65);
    com.google.javascript.rhino.jstype.JSType var68 = var66.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var69 = var66.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var70 = var56.getNode((java.lang.Object)var69);
    java.util.List var71 = var56.getEdges();
    com.google.javascript.rhino.jstype.JSType var72 = var3.createFunctionType((com.google.javascript.rhino.jstype.ObjectType)var38, (com.google.javascript.rhino.jstype.JSType)var55, var71);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var73 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var74 = var73.getGraphvizNodes();
    var38.setImplementedInterfaces(var74);
    com.google.javascript.jscomp.DependencyOptions var76 = var1.setEntryPoints((java.util.Collection)var74);
    com.google.javascript.jscomp.NodeTraversal.Callback var77 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var0, var74, var77);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var79 = var0.toSource();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test12() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test12"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
    int var11 = var8.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var13 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var8, "");
    java.util.List var14 = var8.getSubTypes();
    java.lang.Iterable var15 = var8.getExtendedInterfaces();
    boolean var17 = var8.isPropertyInExterns("2014/12/24 01:41");
    com.google.javascript.rhino.jstype.FunctionType var18 = var8.getSuperClassConstructor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test13() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test13"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("goog.exportProperty");
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var1, false);
    com.google.javascript.jscomp.JSModule var4 = var3.getModule();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var5 = var3.getCode();
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test14() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test14"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.JSTypeNative var1 = com.google.javascript.rhino.jstype.JSTypeNative.valueOf("Object#Element");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test15() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test15"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var2 = var1.cloneNode();
    boolean var3 = var1.isDelProp();
    int var4 = var1.getSideEffectFlags();
    var1.setQuotedString();
    boolean var7 = var1.getBooleanProp((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test16() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test16"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
    int var11 = var8.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var13 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var8, "");
    java.util.List var14 = var8.getSubTypes();
    java.lang.Iterable var15 = var8.getExtendedInterfaces();
    boolean var17 = var8.isPropertyInExterns("2014/12/24 01:41");
    com.google.javascript.rhino.jstype.Property var19 = var8.getSlot("InputId: hi!");
    java.lang.Iterable var20 = var8.getImplementedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test17() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test17"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
    com.google.javascript.rhino.jstype.TemplateType var3 = var1.getObjectElementKey();
    com.google.javascript.rhino.jstype.TemplateType var4 = var3.toMaybeTemplateType();
    java.lang.String var5 = var4.getReferenceName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Object#Element"+ "'", var5.equals("Object#Element"));

  }

  public void test18() {}
//   public void test18() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test18"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var4);
//     java.util.logging.Logger var6 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var7 = new com.google.javascript.jscomp.LoggerErrorManager((com.google.javascript.jscomp.MessageFormatter)var5, var6);
//     com.google.javascript.jscomp.CheckLevel var12 = null;
//     com.google.javascript.jscomp.DiagnosticType var14 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var12, "");
//     java.lang.String[] var16 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var17 = com.google.javascript.jscomp.JSError.make("", 100, 0, var14, var16);
//     java.lang.String var18 = var5.formatError(var17);
// 
//   }

  public void test19() {}
//   public void test19() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test19"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setInlineProperties(true);
//     var0.setMoveFunctionDeclarations(true);
//     com.google.javascript.jscomp.CompilerOptions.Reach var5 = null;
//     var0.setInlineFunctions(var5);
// 
//   }

  public void test20() {}
//   public void test20() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test20"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
//     java.lang.String var3 = var2.getSourceName();
//     boolean var4 = var2.hasScope();
//     com.google.javascript.jscomp.CompilerInput var5 = var2.getInput();
// 
//   }

  public void test21() {}
//   public void test21() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test21"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var1);
//     com.google.javascript.jscomp.JSSourceFile var3 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var4 = new com.google.javascript.jscomp.JSSourceFile[] { var3};
//     com.google.javascript.jscomp.JSSourceFile[] var5 = null;
//     com.google.javascript.jscomp.CompilerOptions var6 = new com.google.javascript.jscomp.CompilerOptions();
//     var6.setInlineProperties(true);
//     var6.setConvertToDottedProperties(false);
//     var6.setChainCalls(false);
//     var6.setNameReferenceReportPath("NUMBER 0.0");
//     com.google.javascript.jscomp.Result var15 = var0.compile(var4, var5, var6);
// 
//   }

  public void test22() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test22"); }


    com.google.javascript.jscomp.SourceFile.Builder var0 = com.google.javascript.jscomp.SourceFile.builder();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test23() {}
//   public void test23() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test23"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
//     com.google.javascript.rhino.Node var3 = var2.getCurrentNode();
//     java.lang.String var4 = var2.getSourceName();
//     com.google.javascript.rhino.Node var5 = var2.getEnclosingFunction();
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.trueNode();
//     var6.setLineno(10);
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var13 = var12.isNE();
//     int var14 = var12.getSideEffectFlags();
//     com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var17 = var16.isNE();
//     boolean var18 = var16.isWith();
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.getprop(var12, var16);
//     java.util.Set var20 = null;
//     var12.setDirectives(var20);
//     com.google.javascript.jscomp.CheckLevel var22 = null;
//     com.google.javascript.jscomp.CheckLevel var24 = null;
//     com.google.javascript.jscomp.DiagnosticType var26 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var24, "");
//     java.lang.String[] var27 = null;
//     com.google.javascript.jscomp.JSError var28 = com.google.javascript.jscomp.JSError.make("hi!", var12, var22, var26, var27);
//     com.google.javascript.jscomp.CheckLevel var33 = null;
//     com.google.javascript.jscomp.DiagnosticType var35 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var33, "");
//     java.lang.String[] var37 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var38 = com.google.javascript.jscomp.JSError.make("", 100, 0, var35, var37);
//     java.lang.String[] var40 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var41 = com.google.javascript.jscomp.JSError.make("hi!", var12, var35, var40);
//     com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var45 = var44.isNE();
//     int var46 = var44.getSideEffectFlags();
//     com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var49 = var48.isNE();
//     boolean var50 = var48.isWith();
//     com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.getprop(var44, var48);
//     java.util.Set var52 = null;
//     var44.setDirectives(var52);
//     com.google.javascript.jscomp.CheckLevel var54 = null;
//     com.google.javascript.jscomp.CheckLevel var56 = null;
//     com.google.javascript.jscomp.DiagnosticType var58 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var56, "");
//     java.lang.String[] var59 = null;
//     com.google.javascript.jscomp.JSError var60 = com.google.javascript.jscomp.JSError.make("hi!", var44, var54, var58, var59);
//     com.google.javascript.rhino.Node var64 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var65 = var64.isNE();
//     int var66 = var64.getSideEffectFlags();
//     com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var69 = var68.isNE();
//     boolean var70 = var68.isWith();
//     com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.getprop(var64, var68);
//     java.util.Set var72 = null;
//     var64.setDirectives(var72);
//     com.google.javascript.jscomp.CheckLevel var74 = null;
//     com.google.javascript.jscomp.CheckLevel var76 = null;
//     com.google.javascript.jscomp.DiagnosticType var78 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var76, "");
//     java.lang.String[] var79 = null;
//     com.google.javascript.jscomp.JSError var80 = com.google.javascript.jscomp.JSError.make("hi!", var64, var74, var78, var79);
//     com.google.javascript.jscomp.CheckLevel var85 = null;
//     com.google.javascript.jscomp.DiagnosticType var87 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var85, "");
//     java.lang.String[] var89 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var90 = com.google.javascript.jscomp.JSError.make("", 100, 0, var87, var89);
//     java.lang.String[] var92 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var93 = com.google.javascript.jscomp.JSError.make("hi!", var64, var87, var92);
//     com.google.javascript.jscomp.JSError var94 = com.google.javascript.jscomp.JSError.make(var58, var92);
//     com.google.javascript.jscomp.JSError var95 = var2.makeError(var6, var35, var92);
//     com.google.javascript.rhino.Node var96 = var2.getScopeRoot();
// 
//   }

  public void test24() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test24"); }


    com.google.javascript.jscomp.AnonymousFunctionNamingPolicy[] var0 = com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.values();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test25() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test25"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.util.Set var9 = null;
    var1.setDirectives(var9);
    int var11 = var1.getChildCount();
    java.lang.Iterable var12 = var1.siblings();
    java.lang.Object var14 = var1.getProp(1);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.string("hi!");
    boolean var17 = var16.isNE();
    int var18 = var16.getSideEffectFlags();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.string("hi!");
    boolean var21 = var20.isNE();
    boolean var22 = var20.isWith();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.getprop(var16, var20);
    java.lang.Iterable var24 = var23.siblings();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.string("hi!");
    boolean var27 = var26.isNE();
    int var28 = var26.getSideEffectFlags();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.string("hi!");
    boolean var31 = var30.isNE();
    boolean var32 = var30.isWith();
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.getprop(var26, var30);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.string("hi!");
    var30.addChildToBack(var35);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var37 = var35.getJsDocBuilderForNode();
    int var38 = var35.getCharno();
    java.lang.Object var40 = var35.getProp(10);
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.string("hi!");
    boolean var43 = var42.isNE();
    int var44 = var42.getSideEffectFlags();
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.string("hi!");
    boolean var47 = var46.isNE();
    boolean var48 = var46.isWith();
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.getprop(var42, var46);
    com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.string("hi!");
    var46.addChildToBack(var51);
    com.google.javascript.rhino.Node var53 = var35.srcrefTree(var51);
    com.google.javascript.rhino.Node var54 = var23.useSourceInfoFromForTree(var53);
    boolean var55 = var1.hasChild(var54);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.JSDocInfo var56 = com.google.javascript.jscomp.NodeUtil.getFunctionJSDocInfo(var1);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test26() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test26"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    var2.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
    com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
    boolean var10 = var9.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    var12.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
    com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
    boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    var37.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
    boolean var45 = var44.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    var47.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
    com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
    boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
    var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var62 = var61.cloneNode();
    boolean var63 = var61.isDelProp();
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var66 = var65.cloneNode();
    boolean var67 = var65.isDelProp();
    com.google.javascript.rhino.Node var68 = var61.clonePropsFrom(var65);
    com.google.javascript.rhino.JSDocInfo var69 = var65.getJSDocInfo();
    com.google.javascript.jscomp.CodingConvention.Bind var71 = var0.describeFunctionBind(var65, true);
    boolean var72 = var65.isThrow();
    com.google.javascript.rhino.Node var73 = com.google.javascript.rhino.IR.block();
    int var74 = var73.getSourceOffset();
    com.google.javascript.rhino.Node[] var75 = new com.google.javascript.rhino.Node[] { var73};
    com.google.javascript.rhino.Node var76 = com.google.javascript.rhino.IR.script(var75);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.call(var65, var75);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test27() {}
//   public void test27() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test27"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
//     com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var6);
//     double var8 = var5.getProgress();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var5);
//     com.google.javascript.jscomp.CompilerOptions var10 = null;
//     com.google.javascript.jscomp.DefaultPassConfig var11 = new com.google.javascript.jscomp.DefaultPassConfig(var10);
//     var5.setPassConfig((com.google.javascript.jscomp.PassConfig)var11);
//     java.nio.charset.Charset var14 = null;
//     com.google.javascript.jscomp.SourceFile var15 = com.google.javascript.jscomp.SourceFile.fromFile("TRUE", var14);
//     java.lang.String var16 = var15.getOriginalPath();
//     com.google.javascript.jscomp.JsAst var17 = new com.google.javascript.jscomp.JsAst(var15);
//     var5.addNewScript(var17);
// 
//   }

  public void test28() {}
//   public void test28() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test28"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var4);
//     java.lang.String var8 = var0.getSourceLine("hi!: ", (-1));
//     com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
//     com.google.javascript.rhino.Node[] var10 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var0, var9, var10);
// 
//   }

  public void test29() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test29"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var4 = var3.cloneNode();
    boolean var5 = var3.isDelProp();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var8 = var7.cloneNode();
    boolean var9 = var7.isDelProp();
    com.google.javascript.rhino.Node var10 = var3.clonePropsFrom(var7);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
    com.google.javascript.rhino.Node var16 = var15.getLastChild();
    com.google.javascript.rhino.Node var17 = var7.srcrefTree(var15);
    com.google.javascript.rhino.Node[] var18 = new com.google.javascript.rhino.Node[] { var15};
    com.google.javascript.rhino.Node var19 = new com.google.javascript.rhino.Node((-3), var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var22 = new com.google.javascript.rhino.Node((-1), var18, (-3), 0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test30() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test30"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var6 = var5.cloneNode();
    boolean var7 = var5.isDelProp();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var10 = var9.cloneNode();
    boolean var11 = var9.isDelProp();
    com.google.javascript.rhino.Node var12 = var5.clonePropsFrom(var9);
    com.google.javascript.rhino.JSDocInfo var13 = var9.getJSDocInfo();
    int var14 = var9.getLineno();
    java.util.Set var15 = var9.getDirectives();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.Node.newString("hi!: ");
    java.lang.String var18 = var17.getString();
    com.google.javascript.rhino.Node var19 = var9.useSourceInfoIfMissingFrom(var17);
    boolean var20 = var9.isInc();
    com.google.common.collect.ImmutableList var21 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.FunctionType var22 = var1.createInterfaceType("", var9, var21);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!: "+ "'", var18.equals("hi!: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test31() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test31"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
    var4.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType var9 = null;
    com.google.javascript.rhino.jstype.JSType[] var10 = new com.google.javascript.rhino.jstype.JSType[] { var9};
    com.google.javascript.rhino.jstype.FunctionType var11 = var4.createConstructorType(var7, false, var10);
    boolean var12 = var11.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    var14.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.jstype.JSType[] var20 = new com.google.javascript.rhino.jstype.JSType[] { var19};
    com.google.javascript.rhino.jstype.FunctionType var21 = var14.createConstructorType(var17, false, var20);
    com.google.javascript.rhino.jstype.JSType var23 = var21.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var24 = var21.getTypeOfThis();
    boolean var25 = var11.canCastTo((com.google.javascript.rhino.jstype.JSType)var21);
    boolean var26 = var21.isDateType();
    com.google.javascript.rhino.jstype.JSType[] var27 = new com.google.javascript.rhino.jstype.JSType[] { var21};
    com.google.javascript.rhino.Node var28 = var1.createParametersWithVarArgs(var27);
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    var30.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33);
    var34.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var37 = null;
    com.google.javascript.rhino.jstype.JSType var39 = null;
    com.google.javascript.rhino.jstype.JSType[] var40 = new com.google.javascript.rhino.jstype.JSType[] { var39};
    com.google.javascript.rhino.jstype.FunctionType var41 = var34.createConstructorType(var37, false, var40);
    boolean var42 = var41.canBeCalled();
    boolean var43 = var41.isTemplatizedType();
    com.google.javascript.rhino.ErrorReporter var45 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
    var46.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var49 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var49);
    var50.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var53 = null;
    com.google.javascript.rhino.jstype.JSType var55 = null;
    com.google.javascript.rhino.jstype.JSType[] var56 = new com.google.javascript.rhino.jstype.JSType[] { var55};
    com.google.javascript.rhino.jstype.FunctionType var57 = var50.createConstructorType(var53, false, var56);
    com.google.javascript.rhino.jstype.JSType var59 = var57.findPropertyType("hi!");
    int var60 = var57.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var61 = new com.google.javascript.rhino.jstype.JSType[] { var57};
    com.google.javascript.rhino.Node var62 = var46.createParametersWithVarArgs(var61);
    com.google.javascript.rhino.jstype.FunctionType var63 = var30.createFunctionType((com.google.javascript.rhino.jstype.JSType)var41, false, var61);
    com.google.javascript.rhino.ErrorReporter var65 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var65);
    com.google.javascript.rhino.ErrorReporter var67 = var66.getErrorReporter();
    com.google.javascript.rhino.ErrorReporter var68 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var69 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var68);
    var69.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var72 = null;
    com.google.javascript.rhino.jstype.JSType var74 = null;
    com.google.javascript.rhino.jstype.JSType[] var75 = new com.google.javascript.rhino.jstype.JSType[] { var74};
    com.google.javascript.rhino.jstype.FunctionType var76 = var69.createConstructorType(var72, false, var75);
    boolean var77 = var76.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var78 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var79 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var78);
    var79.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var82 = null;
    com.google.javascript.rhino.jstype.JSType var84 = null;
    com.google.javascript.rhino.jstype.JSType[] var85 = new com.google.javascript.rhino.jstype.JSType[] { var84};
    com.google.javascript.rhino.jstype.FunctionType var86 = var79.createConstructorType(var82, false, var85);
    com.google.javascript.rhino.jstype.JSType var88 = var86.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var89 = var86.getTypeOfThis();
    boolean var90 = var76.canCastTo((com.google.javascript.rhino.jstype.JSType)var86);
    boolean var91 = var86.isDateType();
    com.google.javascript.rhino.jstype.JSType[] var92 = new com.google.javascript.rhino.jstype.JSType[] { var86};
    com.google.javascript.rhino.Node var93 = var66.createParametersWithVarArgs(var92);
    com.google.javascript.rhino.jstype.FunctionType var94 = var1.createFunctionType((com.google.javascript.rhino.jstype.JSType)var41, false, var92);
    boolean var95 = var94.isBooleanValueType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);

  }

  public void test32() {}
//   public void test32() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test32"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
//     int var15 = var12.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
//     com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
//     com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var19 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
//     com.google.javascript.rhino.jstype.JSTypeNative var20 = null;
//     com.google.javascript.rhino.jstype.ObjectType var21 = var1.getNativeObjectType(var20);
// 
//   }

  public void test33() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test33"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    java.util.Set var10 = null;
    var2.setDirectives(var10);
    com.google.javascript.jscomp.CheckLevel var12 = null;
    com.google.javascript.jscomp.CheckLevel var14 = null;
    com.google.javascript.jscomp.DiagnosticType var16 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var14, "");
    java.lang.String[] var17 = null;
    com.google.javascript.jscomp.JSError var18 = com.google.javascript.jscomp.JSError.make("hi!", var2, var12, var16, var17);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.string("hi!");
    boolean var22 = var21.isNE();
    int var23 = var21.getSideEffectFlags();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.string("hi!");
    boolean var26 = var25.isNE();
    boolean var27 = var25.isWith();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.getprop(var21, var25);
    java.util.Set var29 = null;
    var21.setDirectives(var29);
    com.google.javascript.jscomp.CheckLevel var31 = null;
    com.google.javascript.jscomp.CheckLevel var33 = null;
    com.google.javascript.jscomp.DiagnosticType var35 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var33, "");
    java.lang.String[] var36 = null;
    com.google.javascript.jscomp.JSError var37 = com.google.javascript.jscomp.JSError.make("hi!", var21, var31, var35, var36);
    var21.addSuppression("");
    com.google.javascript.rhino.Node var40 = var2.useSourceInfoFromForTree(var21);
    boolean var41 = var21.isGetElem();
    com.google.javascript.rhino.Node var43 = var21.getChildAtIndex((-1));
    boolean var44 = var21.isTrue();
    com.google.javascript.rhino.jstype.JSTypeRegistry var45 = null;
    com.google.javascript.rhino.jstype.FunctionParamBuilder var46 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var45);
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    var48.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.rhino.jstype.JSType var53 = null;
    com.google.javascript.rhino.jstype.JSType[] var54 = new com.google.javascript.rhino.jstype.JSType[] { var53};
    com.google.javascript.rhino.jstype.FunctionType var55 = var48.createConstructorType(var51, false, var54);
    boolean var56 = var46.addRequiredParams(var54);
    com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var59 = var58.cloneNode();
    boolean var60 = var58.isDelProp();
    int var61 = var58.getSideEffectFlags();
    com.google.javascript.rhino.Node var62 = var46.newOptionalParameterFromNode(var58);
    var21.addChildToBack(var58);
    com.google.javascript.jscomp.AstValidator.ViolationHandler var64 = null;
    com.google.javascript.jscomp.AstValidator var65 = new com.google.javascript.jscomp.AstValidator(var64);
    com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.string("hi!");
    boolean var68 = var67.isNE();
    int var69 = var67.getSideEffectFlags();
    com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.string("hi!");
    boolean var72 = var71.isNE();
    boolean var73 = var71.isWith();
    com.google.javascript.rhino.Node var74 = com.google.javascript.rhino.IR.getprop(var67, var71);
    var74.setLineno(10);
    var65.validateExpression(var74);
    com.google.javascript.rhino.Node var79 = com.google.javascript.rhino.IR.string("hi!");
    boolean var80 = var79.isNE();
    int var81 = var79.getSideEffectFlags();
    boolean var82 = var79.isReturn();
    var74.addChildrenToBack(var79);
    boolean var84 = var74.isHook();
    com.google.javascript.rhino.Node var86 = com.google.javascript.rhino.Node.newString("LinkedGraph");
    boolean var87 = var86.isDefaultCase();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var58.addChildBefore(var74, var86);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test34() {}
//   public void test34() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test34"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var1);
//     double var3 = var0.getProgress();
//     var0.reportCodeChange();
//     var0.rebuildInputsFromModules();
// 
//   }

  public void test35() {}
//   public void test35() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test35"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
//     int var15 = var12.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
//     com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
//     com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
//     com.google.javascript.rhino.ErrorReporter var19 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
//     var20.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var23 = null;
//     com.google.javascript.rhino.jstype.JSType var25 = null;
//     com.google.javascript.rhino.jstype.JSType[] var26 = new com.google.javascript.rhino.jstype.JSType[] { var25};
//     com.google.javascript.rhino.jstype.FunctionType var27 = var20.createConstructorType(var23, false, var26);
//     com.google.javascript.rhino.jstype.JSType var29 = var27.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var30 = var27.toMaybeFunctionType();
//     boolean var32 = var30.isPropertyTypeDeclared("goog.exportProperty");
//     com.google.javascript.rhino.jstype.JSType var33 = var1.createNullableType((com.google.javascript.rhino.jstype.JSType)var30);
//     com.google.javascript.rhino.jstype.JSType var34 = null;
//     com.google.javascript.rhino.jstype.JSType var35 = var33.getGreatestSubtype(var34);
// 
//   }

  public void test36() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test36"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("goog.exportProperty");
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var1, false);
    com.google.javascript.jscomp.JSModule var4 = var3.getModule();
    com.google.javascript.jscomp.JSModule var5 = var3.getModule();
    java.lang.String var7 = var3.getLine(10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var8 = var3.getCode();
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test37() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test37"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var11 = var8.getTypeOfThis();
    com.google.javascript.rhino.jstype.JSType var12 = var11.unboxesTo();
    com.google.javascript.rhino.jstype.JSType var14 = var11.getRestrictedTypeGivenToBooleanOutcome(false);
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
    var16.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.jstype.JSType var21 = null;
    com.google.javascript.rhino.jstype.JSType[] var22 = new com.google.javascript.rhino.jstype.JSType[] { var21};
    com.google.javascript.rhino.jstype.FunctionType var23 = var16.createConstructorType(var19, false, var22);
    com.google.javascript.rhino.jstype.JSType var25 = var23.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var26 = var23.toMaybeFunctionType();
    boolean var27 = var23.isUnionType();
    boolean var28 = com.google.javascript.rhino.jstype.JSType.isEquivalent(var14, (com.google.javascript.rhino.jstype.JSType)var23);
    com.google.javascript.rhino.SimpleErrorReporter var29 = new com.google.javascript.rhino.SimpleErrorReporter();
    com.google.javascript.rhino.ErrorReporter var30 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
    var31.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var34 = null;
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var36};
    com.google.javascript.rhino.jstype.FunctionType var38 = var31.createConstructorType(var34, false, var37);
    boolean var39 = var38.canBeCalled();
    boolean var40 = var38.isTemplatizedType();
    com.google.javascript.rhino.jstype.ObjectType var42 = var38.getTopMostDefiningType("hi!");
    com.google.javascript.rhino.jstype.JSType var43 = var14.resolve((com.google.javascript.rhino.ErrorReporter)var29, (com.google.javascript.rhino.jstype.StaticScope)var38);
    boolean var44 = var14.isNullType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test38() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test38"); }


    java.nio.charset.Charset var1 = null;
    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromFile("TRUE", var1);
    java.lang.String var3 = var2.getOriginalPath();
    com.google.javascript.jscomp.JsAst var4 = new com.google.javascript.jscomp.JsAst(var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var6 = var2.getColumnOfOffset((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "TRUE"+ "'", var3.equals("TRUE"));

  }

  public void test39() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test39"); }


    java.nio.charset.Charset var1 = null;
    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromFile("goog.global", var1);
    com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var2, false);
    com.google.javascript.jscomp.JSModule var5 = null;
    var4.setModule(var5);
    com.google.javascript.jscomp.JSModule var7 = var4.getModule();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test40() {}
//   public void test40() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test40"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     com.google.javascript.jscomp.JSSourceFile var4 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var5 = new com.google.javascript.jscomp.JSSourceFile[] { var4};
//     com.google.javascript.jscomp.JSSourceFile var6 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var7 = new com.google.javascript.jscomp.JSSourceFile[] { var6};
//     com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
//     var8.setInlineProperties(true);
//     var8.setRuntimeTypeCheckLogFunction("Object#Element");
//     var8.setNameAnonymousFunctionsOnly(true);
//     com.google.javascript.jscomp.Result var15 = var0.compile(var5, var7, var8);
// 
//   }

  public void test41() {}
//   public void test41() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test41"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     double var1 = var0.getProgress();
//     double var2 = var0.getProgress();
//     boolean var3 = var0.isIdeMode();
// 
//   }

  public void test42() {}
//   public void test42() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test42"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var4);
//     java.util.logging.Logger var6 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var7 = new com.google.javascript.jscomp.LoggerErrorManager((com.google.javascript.jscomp.MessageFormatter)var5, var6);
//     java.util.logging.Logger var8 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var9 = new com.google.javascript.jscomp.LoggerErrorManager((com.google.javascript.jscomp.MessageFormatter)var5, var8);
//     java.util.logging.Logger var10 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var11 = new com.google.javascript.jscomp.LoggerErrorManager((com.google.javascript.jscomp.MessageFormatter)var5, var10);
//     var5.setColorize(false);
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var18 = var17.isNE();
//     int var19 = var17.getSideEffectFlags();
//     com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var22 = var21.isNE();
//     boolean var23 = var21.isWith();
//     com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.getprop(var17, var21);
//     java.util.Set var25 = null;
//     var17.setDirectives(var25);
//     com.google.javascript.jscomp.CheckLevel var27 = null;
//     com.google.javascript.jscomp.CheckLevel var29 = null;
//     com.google.javascript.jscomp.DiagnosticType var31 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var29, "");
//     java.lang.String[] var32 = null;
//     com.google.javascript.jscomp.JSError var33 = com.google.javascript.jscomp.JSError.make("hi!", var17, var27, var31, var32);
//     com.google.javascript.jscomp.CheckLevel var38 = null;
//     com.google.javascript.jscomp.DiagnosticType var40 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var38, "");
//     java.lang.String[] var42 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var43 = com.google.javascript.jscomp.JSError.make("", 100, 0, var40, var42);
//     java.lang.String[] var45 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var46 = com.google.javascript.jscomp.JSError.make("hi!", var17, var40, var45);
//     com.google.javascript.jscomp.DiagnosticType var47 = var46.getType();
//     int var48 = var46.getNodeSourceOffset();
//     java.lang.String var49 = var5.formatError(var46);
// 
//   }

  public void test43() {}
//   public void test43() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test43"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var1 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
//     var3.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
//     com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
//     boolean var11 = var1.addRequiredParams(var9);
//     com.google.javascript.rhino.ErrorReporter var12 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
//     com.google.javascript.rhino.ErrorReporter var14 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
//     var15.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var18 = null;
//     com.google.javascript.rhino.jstype.JSType var20 = null;
//     com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
//     com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
//     boolean var23 = var22.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var24 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
//     var25.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var28 = null;
//     com.google.javascript.rhino.jstype.JSType var30 = null;
//     com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
//     com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
//     com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var35 = var32.getTypeOfThis();
//     boolean var36 = var22.canCastTo((com.google.javascript.rhino.jstype.JSType)var32);
//     com.google.javascript.rhino.ErrorReporter var37 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
//     var38.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var41 = null;
//     com.google.javascript.rhino.jstype.JSType var43 = null;
//     com.google.javascript.rhino.jstype.JSType[] var44 = new com.google.javascript.rhino.jstype.JSType[] { var43};
//     com.google.javascript.rhino.jstype.FunctionType var45 = var38.createConstructorType(var41, false, var44);
//     boolean var46 = var45.isInterface();
//     com.google.javascript.rhino.jstype.JSType[] var47 = new com.google.javascript.rhino.jstype.JSType[] { var45};
//     com.google.javascript.rhino.jstype.FunctionType var48 = var13.createConstructorType((com.google.javascript.rhino.jstype.JSType)var22, var47);
//     boolean var49 = var1.addOptionalParams(var47);
// 
//   }

  public void test44() {}
//   public void test44() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test44"); }
// 
// 
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var3 = var2.isNE();
//     int var4 = var2.getSideEffectFlags();
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var7 = var6.isNE();
//     boolean var8 = var6.isWith();
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
//     java.util.Set var10 = null;
//     var2.setDirectives(var10);
//     com.google.javascript.jscomp.CheckLevel var12 = null;
//     com.google.javascript.jscomp.CheckLevel var14 = null;
//     com.google.javascript.jscomp.DiagnosticType var16 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var14, "");
//     java.lang.String[] var17 = null;
//     com.google.javascript.jscomp.JSError var18 = com.google.javascript.jscomp.JSError.make("hi!", var2, var12, var16, var17);
//     com.google.javascript.jscomp.DiagnosticGroup var19 = com.google.javascript.jscomp.DiagnosticGroup.forType(var16);
//     com.google.javascript.jscomp.DiagnosticGroup[] var20 = new com.google.javascript.jscomp.DiagnosticGroup[] { var19};
//     com.google.javascript.jscomp.DiagnosticGroup var21 = new com.google.javascript.jscomp.DiagnosticGroup(var20);
//     com.google.javascript.jscomp.CheckLevel var26 = null;
//     com.google.javascript.jscomp.DiagnosticType var28 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var26, "");
//     java.lang.String[] var30 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var31 = com.google.javascript.jscomp.JSError.make("", 100, 0, var28, var30);
//     boolean var32 = var21.matches(var28);
//     com.google.javascript.jscomp.CheckLevel var33 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var34 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var21, var33);
//     com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var39 = var38.isNE();
//     int var40 = var38.getSideEffectFlags();
//     com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var43 = var42.isNE();
//     boolean var44 = var42.isWith();
//     com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.getprop(var38, var42);
//     java.util.Set var46 = null;
//     var38.setDirectives(var46);
//     com.google.javascript.jscomp.CheckLevel var48 = null;
//     com.google.javascript.jscomp.CheckLevel var50 = null;
//     com.google.javascript.jscomp.DiagnosticType var52 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var50, "");
//     java.lang.String[] var53 = null;
//     com.google.javascript.jscomp.JSError var54 = com.google.javascript.jscomp.JSError.make("hi!", var38, var48, var52, var53);
//     com.google.javascript.jscomp.DiagnosticGroup var55 = com.google.javascript.jscomp.DiagnosticGroup.forType(var52);
//     com.google.javascript.jscomp.DiagnosticGroup[] var56 = new com.google.javascript.jscomp.DiagnosticGroup[] { var55};
//     com.google.javascript.jscomp.DiagnosticGroup var57 = new com.google.javascript.jscomp.DiagnosticGroup(var56);
//     com.google.javascript.jscomp.DiagnosticGroup var58 = new com.google.javascript.jscomp.DiagnosticGroup("Node tree inequality:\nTree1:\nSTRING LinkedGraph\n\n\nTree2:\nSTRING hi!\n\n\nSubtree1: STRING LinkedGraph\n\n\nSubtree2: STRING hi!\n", var56);
//     com.google.javascript.jscomp.DiagnosticGroup var59 = new com.google.javascript.jscomp.DiagnosticGroup(var56);
//     boolean var60 = var34.enables(var59);
// 
//   }

  public void test45() {}
//   public void test45() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test45"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
//     com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var6);
//     double var8 = var5.getProgress();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var5);
//     com.google.javascript.jscomp.Scope var10 = var5.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var11 = null;
//     com.google.javascript.jscomp.NodeTraversal var12 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var11);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.Node.newString("hi!: ");
//     boolean var15 = var14.isSetterDef();
//     com.google.javascript.rhino.Node var16 = var14.getLastSibling();
//     com.google.javascript.rhino.InputId var18 = new com.google.javascript.rhino.InputId("hi!: ");
//     var14.setInputId(var18);
//     java.lang.String var20 = var18.toString();
//     com.google.javascript.jscomp.CompilerInput var21 = var5.getInput(var18);
// 
//   }

  public void test46() {}
//   public void test46() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test46"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
//     int var15 = var12.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
//     com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
//     com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
//     var1.clearTemplateTypeNames();
//     com.google.javascript.rhino.jstype.TemplateType var20 = var1.getObjectElementKey();
//     boolean var21 = var20.isNullType();
//     com.google.javascript.rhino.ErrorReporter var22 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
//     var23.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var26 = null;
//     com.google.javascript.rhino.jstype.JSType var28 = null;
//     com.google.javascript.rhino.jstype.JSType[] var29 = new com.google.javascript.rhino.jstype.JSType[] { var28};
//     com.google.javascript.rhino.jstype.FunctionType var30 = var23.createConstructorType(var26, false, var29);
//     boolean var31 = var30.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var32 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var32);
//     var33.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var36 = null;
//     com.google.javascript.rhino.jstype.JSType var38 = null;
//     com.google.javascript.rhino.jstype.JSType[] var39 = new com.google.javascript.rhino.jstype.JSType[] { var38};
//     com.google.javascript.rhino.jstype.FunctionType var40 = var33.createConstructorType(var36, false, var39);
//     com.google.javascript.rhino.jstype.JSType var42 = var40.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var43 = var40.getTypeOfThis();
//     boolean var44 = var30.canCastTo((com.google.javascript.rhino.jstype.JSType)var40);
//     var40.clearCachedValues();
//     boolean var46 = var20.canTestForEqualityWith((com.google.javascript.rhino.jstype.JSType)var40);
// 
//   }

  public void test47() {}
//   public void test47() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test47"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
//     com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var6);
//     double var8 = var5.getProgress();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var5);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var10 = var5.getTypeRegistry();
// 
//   }

  public void test48() {}
//   public void test48() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test48"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var3 = var2.isNE();
//     int var4 = var2.getSideEffectFlags();
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var7 = var6.isNE();
//     boolean var8 = var6.isWith();
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
//     java.util.Set var10 = null;
//     var2.setDirectives(var10);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var15 = var14.isNE();
//     int var16 = var14.getSideEffectFlags();
//     com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var19 = var18.isNE();
//     boolean var20 = var18.isWith();
//     com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.getprop(var14, var18);
//     java.util.Set var22 = null;
//     var14.setDirectives(var22);
//     com.google.javascript.jscomp.CheckLevel var24 = null;
//     com.google.javascript.jscomp.CheckLevel var26 = null;
//     com.google.javascript.jscomp.DiagnosticType var28 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var26, "");
//     java.lang.String[] var29 = null;
//     com.google.javascript.jscomp.JSError var30 = com.google.javascript.jscomp.JSError.make("hi!", var14, var24, var28, var29);
//     com.google.javascript.rhino.Node var31 = var2.useSourceInfoIfMissingFrom(var14);
//     boolean var32 = var2.isFor();
//     com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.assign(var0, var2);
// 
//   }

  public void test49() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test49"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionParamBuilder var1 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
    boolean var11 = var1.addRequiredParams(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    int var15 = var13.getSideEffectFlags();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    boolean var19 = var17.isWith();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.string("hi!");
    var17.addChildToBack(var22);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var24 = var22.getJsDocBuilderForNode();
    int var25 = var22.getCharno();
    java.lang.Object var27 = var22.getProp(10);
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.string("hi!");
    boolean var30 = var29.isNE();
    int var31 = var29.getSideEffectFlags();
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.string("hi!");
    boolean var34 = var33.isNE();
    boolean var35 = var33.isWith();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.getprop(var29, var33);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.string("hi!");
    var33.addChildToBack(var38);
    com.google.javascript.rhino.Node var40 = var22.srcrefTree(var38);
    com.google.javascript.rhino.Node var41 = var1.newParameterFromNode(var22);
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.string("hi!");
    boolean var44 = var43.isNE();
    int var45 = var43.getSideEffectFlags();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.string("hi!");
    boolean var48 = var47.isNE();
    boolean var49 = var47.isWith();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.getprop(var43, var47);
    var47.removeProp(0);
    java.lang.String var53 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var47);
    java.util.Set var54 = null;
    var47.setDirectives(var54);
    java.lang.Iterable var56 = var47.siblings();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.IR.tryCatch(var22, var47);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test50() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test50"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var2 = var1.cloneNode();
    boolean var3 = var1.isDelProp();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var6 = var5.cloneNode();
    boolean var7 = var5.isDelProp();
    com.google.javascript.rhino.Node var8 = var1.clonePropsFrom(var5);
    com.google.javascript.rhino.JSDocInfo var9 = var5.getJSDocInfo();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.breakNode(var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.paramList(var10);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test51() {}
//   public void test51() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test51"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     java.lang.Iterable var3 = var1.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     boolean var13 = var12.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var14 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
//     var15.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var18 = null;
//     com.google.javascript.rhino.jstype.JSType var20 = null;
//     com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
//     com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
//     com.google.javascript.rhino.jstype.FunctionType var23 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var12, var21);
//     com.google.javascript.rhino.ErrorReporter var24 = var1.getErrorReporter();
//     java.util.List var25 = null;
//     com.google.javascript.rhino.Node var26 = var1.createParameters(var25);
// 
//   }

  public void test52() {}
//   public void test52() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test52"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
//     var3.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
//     com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
//     boolean var11 = var10.canBeCalled();
//     com.google.javascript.rhino.jstype.FunctionBuilder var13 = var1.withReturnType((com.google.javascript.rhino.jstype.JSType)var10, true);
//     com.google.javascript.jscomp.ClosureCodingConvention var14 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.ErrorReporter var15 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
//     var16.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var19 = null;
//     com.google.javascript.rhino.jstype.JSType var21 = null;
//     com.google.javascript.rhino.jstype.JSType[] var22 = new com.google.javascript.rhino.jstype.JSType[] { var21};
//     com.google.javascript.rhino.jstype.FunctionType var23 = var16.createConstructorType(var19, false, var22);
//     boolean var24 = var23.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var25 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
//     var26.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var29 = null;
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
//     com.google.javascript.rhino.jstype.FunctionType var33 = var26.createConstructorType(var29, false, var32);
//     com.google.javascript.rhino.jstype.JSType var35 = var33.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var36 = var33.getTypeOfThis();
//     boolean var37 = var23.canCastTo((com.google.javascript.rhino.jstype.JSType)var33);
//     com.google.javascript.rhino.ErrorReporter var38 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
//     var39.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     com.google.javascript.rhino.jstype.JSType var44 = null;
//     com.google.javascript.rhino.jstype.JSType[] var45 = new com.google.javascript.rhino.jstype.JSType[] { var44};
//     com.google.javascript.rhino.jstype.FunctionType var46 = var39.createConstructorType(var42, false, var45);
//     com.google.javascript.rhino.jstype.JSType var48 = var46.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var49 = var46.toMaybeFunctionType();
//     com.google.javascript.rhino.ErrorReporter var50 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var50);
//     var51.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var54 = null;
//     com.google.javascript.rhino.jstype.JSType var56 = null;
//     com.google.javascript.rhino.jstype.JSType[] var57 = new com.google.javascript.rhino.jstype.JSType[] { var56};
//     com.google.javascript.rhino.jstype.FunctionType var58 = var51.createConstructorType(var54, false, var57);
//     boolean var59 = var58.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var60 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var60);
//     var61.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var64 = null;
//     com.google.javascript.rhino.jstype.JSType var66 = null;
//     com.google.javascript.rhino.jstype.JSType[] var67 = new com.google.javascript.rhino.jstype.JSType[] { var66};
//     com.google.javascript.rhino.jstype.FunctionType var68 = var61.createConstructorType(var64, false, var67);
//     com.google.javascript.rhino.jstype.JSType var70 = var68.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var71 = var68.getTypeOfThis();
//     boolean var72 = var58.canCastTo((com.google.javascript.rhino.jstype.JSType)var68);
//     var14.applySingletonGetter(var23, var46, (com.google.javascript.rhino.jstype.ObjectType)var68);
//     com.google.javascript.rhino.jstype.FunctionBuilder var74 = var1.withInferredReturnType((com.google.javascript.rhino.jstype.JSType)var68);
//     com.google.javascript.rhino.jstype.JSType var75 = null;
//     boolean var76 = var68.canTestForShallowEqualityWith(var75);
// 
//   }

  public void test53() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test53"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(1, 10, 1);
    java.lang.String var4 = var3.getSourceFileName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test54() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test54"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    java.lang.Iterable var3 = var1.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    boolean var13 = var12.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    var15.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
    com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
    com.google.javascript.rhino.jstype.FunctionType var23 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var12, var21);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    int var35 = var32.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var37 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var32, "");
    boolean var38 = var32.makesStructs();
    boolean var39 = var23.isSubtype((com.google.javascript.rhino.jstype.JSType)var32);
    com.google.javascript.rhino.jstype.TemplateType var40 = com.google.javascript.rhino.jstype.JSType.toMaybeTemplateType((com.google.javascript.rhino.jstype.JSType)var32);
    com.google.javascript.rhino.jstype.FunctionType var42 = var32.getBindReturnType((-1));
    boolean var43 = var42.hasDisplayName();
    boolean var44 = var42.isDict();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test55() {}
//   public void test55() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test55"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
//     com.google.javascript.rhino.Node var3 = var2.getCurrentNode();
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.block();
//     int var5 = var4.getSourceOffset();
//     com.google.javascript.rhino.JSDocInfo var6 = null;
//     com.google.javascript.rhino.Node var7 = var4.setJSDocInfo(var6);
//     com.google.javascript.jscomp.DiagnosticType var8 = null;
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var12 = var11.isNE();
//     int var13 = var11.getSideEffectFlags();
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var16 = var15.isNE();
//     boolean var17 = var15.isWith();
//     com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.getprop(var11, var15);
//     java.util.Set var19 = null;
//     var11.setDirectives(var19);
//     com.google.javascript.jscomp.CheckLevel var21 = null;
//     com.google.javascript.jscomp.CheckLevel var23 = null;
//     com.google.javascript.jscomp.DiagnosticType var25 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var23, "");
//     java.lang.String[] var26 = null;
//     com.google.javascript.jscomp.JSError var27 = com.google.javascript.jscomp.JSError.make("hi!", var11, var21, var25, var26);
//     com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var32 = var31.isNE();
//     int var33 = var31.getSideEffectFlags();
//     com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var36 = var35.isNE();
//     boolean var37 = var35.isWith();
//     com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.getprop(var31, var35);
//     java.util.Set var39 = null;
//     var31.setDirectives(var39);
//     com.google.javascript.jscomp.CheckLevel var41 = null;
//     com.google.javascript.jscomp.CheckLevel var43 = null;
//     com.google.javascript.jscomp.DiagnosticType var45 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var43, "");
//     java.lang.String[] var46 = null;
//     com.google.javascript.jscomp.JSError var47 = com.google.javascript.jscomp.JSError.make("hi!", var31, var41, var45, var46);
//     com.google.javascript.jscomp.CheckLevel var52 = null;
//     com.google.javascript.jscomp.DiagnosticType var54 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var52, "");
//     java.lang.String[] var56 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var57 = com.google.javascript.jscomp.JSError.make("", 100, 0, var54, var56);
//     java.lang.String[] var59 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var60 = com.google.javascript.jscomp.JSError.make("hi!", var31, var54, var59);
//     com.google.javascript.jscomp.JSError var61 = com.google.javascript.jscomp.JSError.make(var25, var59);
//     var2.report(var7, var8, var59);
// 
//   }

  public void test56() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test56"); }


    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
    var4.setChangeTime(100);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.string("hi!");
    boolean var9 = var8.isNE();
    int var10 = var8.getSideEffectFlags();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.string("hi!");
    boolean var13 = var12.isNE();
    boolean var14 = var12.isWith();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.getprop(var8, var12);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    var12.addChildToBack(var17);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var19 = var17.getJsDocBuilderForNode();
    int var20 = var17.getCharno();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.doNode(var4, var17);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));

  }

  public void test57() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test57"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    boolean var9 = var8.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    var11.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var14 = null;
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType[] var17 = new com.google.javascript.rhino.jstype.JSType[] { var16};
    com.google.javascript.rhino.jstype.FunctionType var18 = var11.createConstructorType(var14, false, var17);
    com.google.javascript.rhino.jstype.JSType var20 = var18.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var21 = var18.getTypeOfThis();
    boolean var22 = var8.canCastTo((com.google.javascript.rhino.jstype.JSType)var18);
    boolean var23 = var18.isUnionType();
    java.util.List var24 = var18.getSubTypes();
    boolean var25 = var18.isConstructor();
    com.google.javascript.rhino.jstype.JSType var27 = var18.findPropertyType("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test58() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test58"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var1 = var0.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
    com.google.javascript.rhino.jstype.JSType var12 = var10.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var13 = var10.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var14 = var0.getNode((java.lang.Object)var13);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var17 = var16.cloneNode();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.continueNode(var17);
    com.google.javascript.jscomp.AstValidator.ViolationHandler var19 = null;
    com.google.javascript.jscomp.AstValidator var20 = new com.google.javascript.jscomp.AstValidator(var19);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.string("hi!");
    boolean var23 = var22.isNE();
    int var24 = var22.getSideEffectFlags();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.string("hi!");
    boolean var27 = var26.isNE();
    boolean var28 = var26.isWith();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.getprop(var22, var26);
    var20.validateExpression(var22);
    com.google.javascript.rhino.jstype.StaticSourceFile var31 = var22.getStaticSourceFile();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.disconnect((java.lang.Object)var18, (java.lang.Object)var22);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test59() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test59"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineProperties(true);
    com.google.javascript.jscomp.CheckLevel var3 = null;
    var0.setCheckMissingReturn(var3);
    var0.setRemoveUnusedLocalVars(true);
    var0.setAliasAllStrings(true);
    var0.setRewriteNewDateGoogNow(false);

  }

  public void test60() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test60"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    boolean var9 = var8.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    var11.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var14 = null;
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType[] var17 = new com.google.javascript.rhino.jstype.JSType[] { var16};
    com.google.javascript.rhino.jstype.FunctionType var18 = var11.createConstructorType(var14, false, var17);
    com.google.javascript.rhino.jstype.JSType var20 = var18.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var21 = var18.getTypeOfThis();
    boolean var22 = var8.canCastTo((com.google.javascript.rhino.jstype.JSType)var18);
    com.google.javascript.jscomp.ClosureCodingConvention var23 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    boolean var33 = var32.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    var35.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var38 = null;
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType[] var41 = new com.google.javascript.rhino.jstype.JSType[] { var40};
    com.google.javascript.rhino.jstype.FunctionType var42 = var35.createConstructorType(var38, false, var41);
    com.google.javascript.rhino.jstype.JSType var44 = var42.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var45 = var42.getTypeOfThis();
    boolean var46 = var32.canCastTo((com.google.javascript.rhino.jstype.JSType)var42);
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    var48.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.rhino.jstype.JSType var53 = null;
    com.google.javascript.rhino.jstype.JSType[] var54 = new com.google.javascript.rhino.jstype.JSType[] { var53};
    com.google.javascript.rhino.jstype.FunctionType var55 = var48.createConstructorType(var51, false, var54);
    com.google.javascript.rhino.jstype.JSType var57 = var55.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var58 = var55.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var59 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var59);
    var60.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var63 = null;
    com.google.javascript.rhino.jstype.JSType var65 = null;
    com.google.javascript.rhino.jstype.JSType[] var66 = new com.google.javascript.rhino.jstype.JSType[] { var65};
    com.google.javascript.rhino.jstype.FunctionType var67 = var60.createConstructorType(var63, false, var66);
    boolean var68 = var67.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var69 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var69);
    var70.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var73 = null;
    com.google.javascript.rhino.jstype.JSType var75 = null;
    com.google.javascript.rhino.jstype.JSType[] var76 = new com.google.javascript.rhino.jstype.JSType[] { var75};
    com.google.javascript.rhino.jstype.FunctionType var77 = var70.createConstructorType(var73, false, var76);
    com.google.javascript.rhino.jstype.JSType var79 = var77.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var80 = var77.getTypeOfThis();
    boolean var81 = var67.canCastTo((com.google.javascript.rhino.jstype.JSType)var77);
    var23.applySingletonGetter(var32, var55, (com.google.javascript.rhino.jstype.ObjectType)var77);
    com.google.javascript.rhino.jstype.TemplateType var83 = var77.toMaybeTemplateType();
    boolean var84 = var18.hasEqualCallType(var77);
    boolean var85 = var77.isReturnTypeInferred();
    java.util.Set var86 = var77.getOwnPropertyNames();
    boolean var87 = var77.matchesInt32Context();
    boolean var88 = var77.isNominalType();
    boolean var89 = var77.isOrdinaryFunction();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);

  }

  public void test61() {}
//   public void test61() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test61"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setRecordFunctionInformation(false);
//     com.google.javascript.jscomp.parsing.Config.LanguageMode var4 = null;
//     com.google.javascript.rhino.ErrorReporter var6 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
//     var7.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType var12 = null;
//     com.google.javascript.rhino.jstype.JSType[] var13 = new com.google.javascript.rhino.jstype.JSType[] { var12};
//     com.google.javascript.rhino.jstype.FunctionType var14 = var7.createConstructorType(var10, false, var13);
//     com.google.javascript.rhino.jstype.JSType var16 = var14.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var17 = var14.toMaybeFunctionType();
//     com.google.javascript.rhino.ErrorReporter var18 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18);
//     var19.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var22 = null;
//     com.google.javascript.rhino.jstype.JSType var24 = null;
//     com.google.javascript.rhino.jstype.JSType[] var25 = new com.google.javascript.rhino.jstype.JSType[] { var24};
//     com.google.javascript.rhino.jstype.FunctionType var26 = var19.createConstructorType(var22, false, var25);
//     boolean var27 = var26.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var28 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
//     var29.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var32 = null;
//     com.google.javascript.rhino.jstype.JSType var34 = null;
//     com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var34};
//     com.google.javascript.rhino.jstype.FunctionType var36 = var29.createConstructorType(var32, false, var35);
//     com.google.javascript.rhino.jstype.JSType var38 = var36.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var39 = var36.getTypeOfThis();
//     boolean var40 = var26.canCastTo((com.google.javascript.rhino.jstype.JSType)var36);
//     boolean var41 = var14.hasEqualCallType(var36);
//     java.lang.Iterable var42 = var36.getAllExtendedInterfaces();
//     java.util.Set var43 = var36.getOwnPropertyNames();
//     com.google.javascript.jscomp.parsing.Config var44 = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(false, var4, false, var43);
//     var0.setExtraAnnotationNames((java.lang.Iterable)var43);
//     var0.setInstrumentMemoryAllocations(true);
//     com.google.javascript.jscomp.CompilerOptions.Reach var48 = null;
//     var0.setRemoveUnusedVariables(var48);
// 
//   }

  public void test62() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test62"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    var5.removeProp(0);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.continueNode();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.sub(var5, var11);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test63() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test63"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    boolean var12 = var5.isVar();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.string("hi!");
    boolean var15 = var14.isNE();
    int var16 = var14.getSideEffectFlags();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.string("hi!");
    boolean var19 = var18.isNE();
    boolean var20 = var18.isWith();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.getprop(var14, var18);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.string("hi!");
    var18.addChildToBack(var23);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var25 = var23.getJsDocBuilderForNode();
    int var26 = var23.getCharno();
    boolean var27 = var5.isEquivalentTo(var23);
    boolean var28 = var5.isOnlyModifiesThisCall();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test64() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test64"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var11 = var8.getTypeOfThis();
    boolean var12 = var8.isNativeObjectType();
    java.lang.Iterable var13 = var8.getCtorImplementedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test65() {}
//   public void test65() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test65"); }
// 
// 
//     java.util.Map var0 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.jscomp.GoogleCodingConvention var2 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var1);
//     java.lang.String var3 = var2.getExportPropertyFunction();
//     boolean var5 = var2.isValidEnumKey("");
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var8 = var7.isNE();
//     int var9 = var7.getSideEffectFlags();
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var12 = var11.isNE();
//     boolean var13 = var11.isWith();
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.getprop(var7, var11);
//     var11.removeProp(0);
//     java.lang.String var17 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var11);
//     java.util.Set var18 = null;
//     var11.setDirectives(var18);
//     java.lang.Iterable var20 = var11.siblings();
//     boolean var21 = var2.isVarArgsParameter(var11);
//     com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var25 = var24.isNE();
//     int var26 = var24.getSideEffectFlags();
//     com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var29 = var28.isNE();
//     boolean var30 = var28.isWith();
//     com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.getprop(var24, var28);
//     java.util.Set var32 = null;
//     var24.setDirectives(var32);
//     com.google.javascript.jscomp.CheckLevel var34 = null;
//     com.google.javascript.jscomp.CheckLevel var36 = null;
//     com.google.javascript.jscomp.DiagnosticType var38 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var36, "");
//     java.lang.String[] var39 = null;
//     com.google.javascript.jscomp.JSError var40 = com.google.javascript.jscomp.JSError.make("hi!", var24, var34, var38, var39);
//     com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var44 = var43.isNE();
//     int var45 = var43.getSideEffectFlags();
//     com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var48 = var47.isNE();
//     boolean var49 = var47.isWith();
//     com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.getprop(var43, var47);
//     java.util.Set var51 = null;
//     var43.setDirectives(var51);
//     com.google.javascript.jscomp.CheckLevel var53 = null;
//     com.google.javascript.jscomp.CheckLevel var55 = null;
//     com.google.javascript.jscomp.DiagnosticType var57 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var55, "");
//     java.lang.String[] var58 = null;
//     com.google.javascript.jscomp.JSError var59 = com.google.javascript.jscomp.JSError.make("hi!", var43, var53, var57, var58);
//     var43.addSuppression("");
//     com.google.javascript.rhino.Node var62 = var24.useSourceInfoFromForTree(var43);
//     boolean var63 = var43.isGetElem();
//     com.google.javascript.rhino.InputId var64 = var43.getInputId();
//     com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var67 = var66.cloneNode();
//     java.lang.String var68 = var2.extractClassNameIfProvide(var43, var67);
//     com.google.javascript.jscomp.NodeUtil.verifyScopeChanges(var0, var67, true);
// 
//   }

  public void test66() {}
//   public void test66() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test66"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     var0.normalize();
// 
//   }

  public void test67() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test67"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    boolean var12 = var10.isObjectLit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test68() {}
//   public void test68() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test68"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var4 = null;
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
//     com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
//     com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
//     int var11 = var8.getPropertiesCount();
//     com.google.javascript.rhino.jstype.ObjectType var13 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var8, "");
//     boolean var14 = var8.makesStructs();
//     com.google.javascript.rhino.jstype.TemplateType var15 = com.google.javascript.rhino.jstype.JSType.toMaybeTemplateType((com.google.javascript.rhino.jstype.JSType)var8);
//     boolean var16 = var8.isNullType();
//     java.lang.String var17 = var8.toString();
// 
//   }

  public void test69() {}
//   public void test69() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test69"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var1);
//     com.google.javascript.jscomp.Scope var3 = var2.getScope();
//     com.google.javascript.rhino.Node var4 = null;
//     com.google.javascript.jscomp.CheckLevel var5 = null;
//     com.google.javascript.jscomp.DiagnosticType var6 = null;
//     com.google.javascript.jscomp.CheckLevel var11 = null;
//     com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var11, "");
//     java.lang.String[] var15 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", 100, 0, var13, var15);
//     com.google.javascript.jscomp.JSError var17 = var2.makeError(var4, var5, var6, var15);
// 
//   }

  public void test70() {}
//   public void test70() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test70"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     boolean var13 = var12.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var14 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
//     var15.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var18 = null;
//     com.google.javascript.rhino.jstype.JSType var20 = null;
//     com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
//     com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
//     com.google.javascript.rhino.jstype.JSType var24 = var22.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var25 = var22.getTypeOfThis();
//     boolean var26 = var12.canCastTo((com.google.javascript.rhino.jstype.JSType)var22);
//     com.google.javascript.rhino.ErrorReporter var27 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
//     var28.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     com.google.javascript.rhino.jstype.JSType var33 = null;
//     com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
//     com.google.javascript.rhino.jstype.FunctionType var35 = var28.createConstructorType(var31, false, var34);
//     boolean var36 = var35.isInterface();
//     com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var35};
//     com.google.javascript.rhino.jstype.FunctionType var38 = var3.createConstructorType((com.google.javascript.rhino.jstype.JSType)var12, var37);
//     com.google.javascript.rhino.Node var39 = var1.createOptionalParameters(var37);
//     com.google.javascript.rhino.ErrorReporter var41 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
//     java.lang.Iterable var44 = var42.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var45 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
//     var46.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var49 = null;
//     com.google.javascript.rhino.jstype.JSType var51 = null;
//     com.google.javascript.rhino.jstype.JSType[] var52 = new com.google.javascript.rhino.jstype.JSType[] { var51};
//     com.google.javascript.rhino.jstype.FunctionType var53 = var46.createConstructorType(var49, false, var52);
//     boolean var54 = var53.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var55 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var55);
//     var56.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var59 = null;
//     com.google.javascript.rhino.jstype.JSType var61 = null;
//     com.google.javascript.rhino.jstype.JSType[] var62 = new com.google.javascript.rhino.jstype.JSType[] { var61};
//     com.google.javascript.rhino.jstype.FunctionType var63 = var56.createConstructorType(var59, false, var62);
//     com.google.javascript.rhino.jstype.FunctionType var64 = var42.createConstructorType((com.google.javascript.rhino.jstype.JSType)var53, var62);
//     com.google.javascript.rhino.jstype.TemplateType var65 = var42.getObjectIndexKey();
//     var1.unregisterPropertyOnType("hi!: ", (com.google.javascript.rhino.jstype.JSType)var65);
//     java.lang.Iterable var68 = var1.getTypesWithProperty("");
//     com.google.javascript.rhino.jstype.JSType var69 = null;
//     com.google.javascript.jscomp.AbstractCompiler var70 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var71 = null;
//     com.google.javascript.jscomp.NodeTraversal var72 = new com.google.javascript.jscomp.NodeTraversal(var70, var71);
//     java.lang.String var73 = var72.getSourceName();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var74 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var75 = var74.getGraphvizNodes();
//     com.google.javascript.rhino.ErrorReporter var76 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var76);
//     var77.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var80 = null;
//     com.google.javascript.rhino.jstype.JSType var82 = null;
//     com.google.javascript.rhino.jstype.JSType[] var83 = new com.google.javascript.rhino.jstype.JSType[] { var82};
//     com.google.javascript.rhino.jstype.FunctionType var84 = var77.createConstructorType(var80, false, var83);
//     com.google.javascript.rhino.jstype.JSType var86 = var84.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var87 = var84.getTypeOfThis();
//     com.google.javascript.jscomp.graph.GraphNode var88 = var74.getNode((java.lang.Object)var87);
//     java.util.List var89 = var74.getEdges();
//     var72.traverseRoots(var89);
//     com.google.javascript.rhino.jstype.FunctionType var91 = var1.createFunctionType(var69, var89);
//     com.google.javascript.jscomp.JSModule[] var92 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection)var89);
//     com.google.javascript.jscomp.JSModuleGraph var93 = new com.google.javascript.jscomp.JSModuleGraph(var92);
//     com.google.javascript.jscomp.JSModule var94 = null;
//     com.google.javascript.jscomp.JSModule var95 = null;
//     boolean var96 = var93.dependsOn(var94, var95);
// 
//   }

  public void test71() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test71"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.util.Set var9 = null;
    var1.setDirectives(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    int var15 = var13.getSideEffectFlags();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    boolean var19 = var17.isWith();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
    java.util.Set var21 = null;
    var13.setDirectives(var21);
    com.google.javascript.jscomp.CheckLevel var23 = null;
    com.google.javascript.jscomp.CheckLevel var25 = null;
    com.google.javascript.jscomp.DiagnosticType var27 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var25, "");
    java.lang.String[] var28 = null;
    com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("hi!", var13, var23, var27, var28);
    com.google.javascript.rhino.Node var30 = var1.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.JSDocInfo var31 = null;
    com.google.javascript.rhino.Node var32 = var30.setJSDocInfo(var31);
    com.google.javascript.rhino.Node[] var33 = new com.google.javascript.rhino.Node[] { var32};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.objectlit(var33);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test72() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test72"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
    com.google.javascript.rhino.jstype.TemplateType var3 = var1.getObjectElementKey();
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var15 = var12.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var16 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
    var17.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.rhino.jstype.JSType var22 = null;
    com.google.javascript.rhino.jstype.JSType[] var23 = new com.google.javascript.rhino.jstype.JSType[] { var22};
    com.google.javascript.rhino.jstype.FunctionType var24 = var17.createConstructorType(var20, false, var23);
    boolean var25 = var24.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
    var27.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.rhino.jstype.JSType[] var33 = new com.google.javascript.rhino.jstype.JSType[] { var32};
    com.google.javascript.rhino.jstype.FunctionType var34 = var27.createConstructorType(var30, false, var33);
    com.google.javascript.rhino.jstype.JSType var36 = var34.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var37 = var34.getTypeOfThis();
    boolean var38 = var24.canCastTo((com.google.javascript.rhino.jstype.JSType)var34);
    boolean var39 = var12.hasEqualCallType(var34);
    boolean var40 = var12.matchesUint32Context();
    com.google.javascript.rhino.jstype.JSType var42 = var1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType)var12, "goog.global");
    com.google.javascript.rhino.ErrorReporter var43 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var43);
    com.google.javascript.rhino.ErrorReporter var45 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
    var46.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.rhino.jstype.JSType[] var52 = new com.google.javascript.rhino.jstype.JSType[] { var51};
    com.google.javascript.rhino.jstype.FunctionType var53 = var46.createConstructorType(var49, false, var52);
    boolean var54 = var53.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var55 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var55);
    var56.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.rhino.jstype.JSType var61 = null;
    com.google.javascript.rhino.jstype.JSType[] var62 = new com.google.javascript.rhino.jstype.JSType[] { var61};
    com.google.javascript.rhino.jstype.FunctionType var63 = var56.createConstructorType(var59, false, var62);
    com.google.javascript.rhino.jstype.JSType var65 = var63.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var66 = var63.getTypeOfThis();
    boolean var67 = var53.canCastTo((com.google.javascript.rhino.jstype.JSType)var63);
    com.google.javascript.rhino.ErrorReporter var68 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var69 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var68);
    var69.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var72 = null;
    com.google.javascript.rhino.jstype.JSType var74 = null;
    com.google.javascript.rhino.jstype.JSType[] var75 = new com.google.javascript.rhino.jstype.JSType[] { var74};
    com.google.javascript.rhino.jstype.FunctionType var76 = var69.createConstructorType(var72, false, var75);
    boolean var77 = var76.isInterface();
    com.google.javascript.rhino.jstype.JSType[] var78 = new com.google.javascript.rhino.jstype.JSType[] { var76};
    com.google.javascript.rhino.jstype.FunctionType var79 = var44.createConstructorType((com.google.javascript.rhino.jstype.JSType)var53, var78);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var80 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var81 = var80.getGraphvizNodes();
    var44.setTemplateTypeNames(var81);
    com.google.javascript.jscomp.deps.SortedDependencies var83 = new com.google.javascript.jscomp.deps.SortedDependencies(var81);
    boolean var84 = var42.equals((java.lang.Object)var83);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.deps.DependencyInfo var86 = var83.getInputProviding("goog.abstractMethod");
      fail("Expected exception of type com.google.javascript.jscomp.deps.SortedDependencies.MissingProvideException");
    } catch (com.google.javascript.jscomp.deps.SortedDependencies.MissingProvideException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);

  }

  public void test73() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test73"); }


    com.google.javascript.jscomp.VariableRenamingPolicy[] var0 = com.google.javascript.jscomp.VariableRenamingPolicy.values();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test74() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test74"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("goog.exportProperty");
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var1, false);
    com.google.javascript.jscomp.JSModule var4 = var3.getModule();
    com.google.javascript.jscomp.SourceFile var5 = var3.getSourceFile();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var6 = var3.getCode();
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test75() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test75"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
    com.google.javascript.rhino.ErrorReporter var5 = var4.getErrorReporter();
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    var7.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    var11.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var14 = null;
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType[] var17 = new com.google.javascript.rhino.jstype.JSType[] { var16};
    com.google.javascript.rhino.jstype.FunctionType var18 = var11.createConstructorType(var14, false, var17);
    boolean var19 = var18.canBeCalled();
    boolean var20 = var18.isTemplatizedType();
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    var23.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
    var27.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.rhino.jstype.JSType[] var33 = new com.google.javascript.rhino.jstype.JSType[] { var32};
    com.google.javascript.rhino.jstype.FunctionType var34 = var27.createConstructorType(var30, false, var33);
    com.google.javascript.rhino.jstype.JSType var36 = var34.findPropertyType("hi!");
    int var37 = var34.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var38 = new com.google.javascript.rhino.jstype.JSType[] { var34};
    com.google.javascript.rhino.Node var39 = var23.createParametersWithVarArgs(var38);
    com.google.javascript.rhino.jstype.FunctionType var40 = var7.createFunctionType((com.google.javascript.rhino.jstype.JSType)var18, false, var38);
    com.google.javascript.rhino.Node var41 = var4.createParametersWithVarArgs(var38);
    var4.clearTemplateTypeNames();
    com.google.javascript.rhino.ErrorReporter var43 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var43);
    var44.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var47 = null;
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.jstype.FunctionType var51 = var44.createConstructorType(var47, false, var50);
    boolean var52 = var51.isInterface();
    boolean var53 = var51.isUnionType();
    boolean var54 = var51.isInterface();
    com.google.javascript.rhino.jstype.EnumElementType var55 = var51.toMaybeEnumElementType();
    com.google.javascript.rhino.jstype.JSType var56 = var4.createOptionalType((com.google.javascript.rhino.jstype.JSType)var51);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.overwriteDeclaredType("", var56);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test76() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test76"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var2 = var1.cloneNode();
    boolean var3 = var1.isDelProp();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var6 = var5.cloneNode();
    boolean var7 = var5.isDelProp();
    com.google.javascript.rhino.Node var8 = var1.clonePropsFrom(var5);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
    com.google.javascript.rhino.Node var14 = var13.getLastChild();
    com.google.javascript.rhino.Node var15 = var5.srcrefTree(var13);
    int var16 = var13.getSideEffectFlags();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);

  }

  public void test77() {}
//   public void test77() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test77"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var1);
//     int var3 = var2.getErrorCount();
//     com.google.javascript.jscomp.JSError[] var4 = var2.getErrors();
//     java.util.List var5 = var0.getNeighborNodes((java.lang.Object)var4);
// 
//   }

  public void test78() {}
//   public void test78() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test78"); }
// 
// 
//     com.google.javascript.jscomp.DependencyOptions var0 = new com.google.javascript.jscomp.DependencyOptions();
//     com.google.javascript.rhino.ErrorReporter var1 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
//     java.lang.Iterable var4 = var2.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var5 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
//     var6.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var9 = null;
//     com.google.javascript.rhino.jstype.JSType var11 = null;
//     com.google.javascript.rhino.jstype.JSType[] var12 = new com.google.javascript.rhino.jstype.JSType[] { var11};
//     com.google.javascript.rhino.jstype.FunctionType var13 = var6.createConstructorType(var9, false, var12);
//     boolean var14 = var13.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var15 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
//     var16.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var19 = null;
//     com.google.javascript.rhino.jstype.JSType var21 = null;
//     com.google.javascript.rhino.jstype.JSType[] var22 = new com.google.javascript.rhino.jstype.JSType[] { var21};
//     com.google.javascript.rhino.jstype.FunctionType var23 = var16.createConstructorType(var19, false, var22);
//     com.google.javascript.rhino.jstype.FunctionType var24 = var2.createConstructorType((com.google.javascript.rhino.jstype.JSType)var13, var22);
//     com.google.javascript.rhino.ErrorReporter var25 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
//     java.lang.Iterable var28 = var26.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var29 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
//     var30.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var33 = null;
//     com.google.javascript.rhino.jstype.JSType var35 = null;
//     com.google.javascript.rhino.jstype.JSType[] var36 = new com.google.javascript.rhino.jstype.JSType[] { var35};
//     com.google.javascript.rhino.jstype.FunctionType var37 = var30.createConstructorType(var33, false, var36);
//     boolean var38 = var37.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var39 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var39);
//     var40.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var43 = null;
//     com.google.javascript.rhino.jstype.JSType var45 = null;
//     com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
//     com.google.javascript.rhino.jstype.FunctionType var47 = var40.createConstructorType(var43, false, var46);
//     com.google.javascript.rhino.jstype.FunctionType var48 = var26.createConstructorType((com.google.javascript.rhino.jstype.JSType)var37, var46);
//     boolean var49 = var37.isReturnTypeInferred();
//     boolean var50 = var37.isTemplatizedType();
//     com.google.javascript.rhino.ErrorReporter var51 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
//     com.google.javascript.rhino.ErrorReporter var53 = var52.getErrorReporter();
//     com.google.javascript.rhino.jstype.TemplateType var54 = var52.getObjectElementKey();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var55 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var56 = var55.getGraphvizNodes();
//     com.google.javascript.rhino.ErrorReporter var57 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var57);
//     var58.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var61 = null;
//     com.google.javascript.rhino.jstype.JSType var63 = null;
//     com.google.javascript.rhino.jstype.JSType[] var64 = new com.google.javascript.rhino.jstype.JSType[] { var63};
//     com.google.javascript.rhino.jstype.FunctionType var65 = var58.createConstructorType(var61, false, var64);
//     com.google.javascript.rhino.jstype.JSType var67 = var65.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var68 = var65.getTypeOfThis();
//     com.google.javascript.jscomp.graph.GraphNode var69 = var55.getNode((java.lang.Object)var68);
//     java.util.List var70 = var55.getEdges();
//     com.google.javascript.rhino.jstype.JSType var71 = var2.createFunctionType((com.google.javascript.rhino.jstype.ObjectType)var37, (com.google.javascript.rhino.jstype.JSType)var54, var70);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var72 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var73 = var72.getGraphvizNodes();
//     var37.setImplementedInterfaces(var73);
//     com.google.javascript.jscomp.DependencyOptions var75 = var0.setEntryPoints((java.util.Collection)var73);
//     com.google.javascript.jscomp.JSModuleGraph var76 = new com.google.javascript.jscomp.JSModuleGraph(var73);
//     var76.coalesceDuplicateFiles();
//     com.google.javascript.jscomp.JSModule var78 = null;
//     com.google.javascript.jscomp.JSModule var79 = null;
//     boolean var80 = var76.dependsOn(var78, var79);
// 
//   }

  public void test79() {}
//   public void test79() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test79"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
//     var3.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
//     com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
//     boolean var11 = var10.canBeCalled();
//     com.google.javascript.rhino.jstype.FunctionBuilder var13 = var1.withReturnType((com.google.javascript.rhino.jstype.JSType)var10, true);
//     com.google.javascript.rhino.ErrorReporter var14 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
//     com.google.javascript.rhino.ErrorReporter var16 = var15.getErrorReporter();
//     com.google.javascript.rhino.jstype.TemplateType var17 = var15.getObjectElementKey();
//     com.google.javascript.rhino.jstype.TemplateType var18 = var17.toMaybeTemplateType();
//     boolean var19 = var18.hasAnyTemplateTypesInternal();
//     var10.matchConstraint((com.google.javascript.rhino.jstype.JSType)var18);
// 
//   }

  public void test80() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test80"); }


    java.nio.charset.Charset var1 = null;
    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromFile("TRUE", var1);
    java.lang.String var3 = var2.getOriginalPath();
    com.google.javascript.jscomp.JsAst var4 = new com.google.javascript.jscomp.JsAst(var2);
    com.google.javascript.jscomp.SourceFile var7 = com.google.javascript.jscomp.SourceFile.fromCode("Node tree inequality:\nTree1:\nSTRING LinkedGraph\n\n\nTree2:\nSTRING hi!\n\n\nSubtree1: STRING LinkedGraph\n\n\nSubtree2: STRING hi!\n", "goog.exportSymbol");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var4.setSourceFile(var7);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "TRUE"+ "'", var3.equals("TRUE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test81() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test81"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var11 = var8.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    var13.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType[] var19 = new com.google.javascript.rhino.jstype.JSType[] { var18};
    com.google.javascript.rhino.jstype.FunctionType var20 = var13.createConstructorType(var16, false, var19);
    boolean var21 = var20.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    var23.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType[] var29 = new com.google.javascript.rhino.jstype.JSType[] { var28};
    com.google.javascript.rhino.jstype.FunctionType var30 = var23.createConstructorType(var26, false, var29);
    com.google.javascript.rhino.jstype.JSType var32 = var30.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var33 = var30.getTypeOfThis();
    boolean var34 = var20.canCastTo((com.google.javascript.rhino.jstype.JSType)var30);
    boolean var35 = var8.hasEqualCallType(var30);
    java.lang.Iterable var36 = var30.getAllExtendedInterfaces();
    java.util.Set var37 = var30.getOwnPropertyNames();
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var39 = new com.google.javascript.rhino.jstype.FunctionBuilder(var38);
    com.google.javascript.rhino.ErrorReporter var40 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40);
    var41.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var44 = null;
    com.google.javascript.rhino.jstype.JSType var46 = null;
    com.google.javascript.rhino.jstype.JSType[] var47 = new com.google.javascript.rhino.jstype.JSType[] { var46};
    com.google.javascript.rhino.jstype.FunctionType var48 = var41.createConstructorType(var44, false, var47);
    boolean var49 = var48.canBeCalled();
    com.google.javascript.rhino.jstype.FunctionBuilder var51 = var39.withReturnType((com.google.javascript.rhino.jstype.JSType)var48, true);
    boolean var52 = var48.isArrayType();
    com.google.javascript.rhino.jstype.JSType var54 = var48.getPropertyType("LABEL_NAME hi!");
    var48.clearCachedValues();
    com.google.javascript.rhino.jstype.JSType.TypePair var56 = var30.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType)var48);
    com.google.javascript.rhino.jstype.JSType var58 = var48.findPropertyType("Unversioned directory");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);

  }

  public void test82() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test82"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.warning("STRING hi!", "Node tree inequality:\nTree1:\nSTRING LinkedGraph\n\n\nTree2:\nSTRING hi!\n\n\nSubtree1: STRING LinkedGraph\n\n\nSubtree2: STRING hi!\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test83() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test83"); }


    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
    int var5 = var4.getChangeTime();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.neg(var4);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test84() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test84"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("goog.exportProperty");
    int var3 = var1.getLineOfOffset(100);
    com.google.javascript.jscomp.CompilerInput var5 = new com.google.javascript.jscomp.CompilerInput(var1, true);
    int var7 = var1.getLineOfOffset(0);
    var1.clearCachedSource();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.io.Reader var9 = var1.getCodeReader();
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);

  }

  public void test85() {}
//   public void test85() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test85"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setRecordFunctionInformation(false);
//     com.google.javascript.jscomp.parsing.Config.LanguageMode var4 = null;
//     com.google.javascript.rhino.ErrorReporter var6 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
//     var7.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType var12 = null;
//     com.google.javascript.rhino.jstype.JSType[] var13 = new com.google.javascript.rhino.jstype.JSType[] { var12};
//     com.google.javascript.rhino.jstype.FunctionType var14 = var7.createConstructorType(var10, false, var13);
//     com.google.javascript.rhino.jstype.JSType var16 = var14.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var17 = var14.toMaybeFunctionType();
//     com.google.javascript.rhino.ErrorReporter var18 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18);
//     var19.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var22 = null;
//     com.google.javascript.rhino.jstype.JSType var24 = null;
//     com.google.javascript.rhino.jstype.JSType[] var25 = new com.google.javascript.rhino.jstype.JSType[] { var24};
//     com.google.javascript.rhino.jstype.FunctionType var26 = var19.createConstructorType(var22, false, var25);
//     boolean var27 = var26.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var28 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
//     var29.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var32 = null;
//     com.google.javascript.rhino.jstype.JSType var34 = null;
//     com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var34};
//     com.google.javascript.rhino.jstype.FunctionType var36 = var29.createConstructorType(var32, false, var35);
//     com.google.javascript.rhino.jstype.JSType var38 = var36.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var39 = var36.getTypeOfThis();
//     boolean var40 = var26.canCastTo((com.google.javascript.rhino.jstype.JSType)var36);
//     boolean var41 = var14.hasEqualCallType(var36);
//     java.lang.Iterable var42 = var36.getAllExtendedInterfaces();
//     java.util.Set var43 = var36.getOwnPropertyNames();
//     com.google.javascript.jscomp.parsing.Config var44 = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(false, var4, false, var43);
//     var0.setExtraAnnotationNames((java.lang.Iterable)var43);
//     boolean var46 = var0.assumeStrictThis();
//     com.google.javascript.jscomp.VariableRenamingPolicy var47 = null;
//     var0.setVariableRenaming(var47);
//     java.util.Map var49 = var0.getTweakReplacements();
//     com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.script();
//     com.google.javascript.jscomp.NodeUtil.verifyScopeChanges(var49, var50, false);
// 
//   }

  public void test86() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test86"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var2 = var1.cloneNode();
    boolean var3 = var1.isDelProp();
    int var4 = var1.getSideEffectFlags();
    boolean var5 = var1.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.neg(var1);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test87() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test87"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    java.lang.Iterable var3 = var1.getTypesWithProperty("hi!");
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    var6.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var9 = null;
    com.google.javascript.rhino.jstype.JSType var11 = null;
    com.google.javascript.rhino.jstype.JSType[] var12 = new com.google.javascript.rhino.jstype.JSType[] { var11};
    com.google.javascript.rhino.jstype.FunctionType var13 = var6.createConstructorType(var9, false, var12);
    boolean var14 = var13.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
    var16.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.jstype.JSType var21 = null;
    com.google.javascript.rhino.jstype.JSType[] var22 = new com.google.javascript.rhino.jstype.JSType[] { var21};
    com.google.javascript.rhino.jstype.FunctionType var23 = var16.createConstructorType(var19, false, var22);
    com.google.javascript.rhino.jstype.JSType var25 = var23.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var26 = var23.getTypeOfThis();
    boolean var27 = var13.canCastTo((com.google.javascript.rhino.jstype.JSType)var23);
    com.google.javascript.rhino.jstype.JSType var28 = var1.createNullableType((com.google.javascript.rhino.jstype.JSType)var13);
    com.google.javascript.rhino.jstype.TemplatizedType var29 = com.google.javascript.rhino.jstype.JSType.toMaybeTemplatizedType(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test88() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test88"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    java.lang.String var2 = var0.getExportPropertyFunction();
    boolean var4 = var0.isConstant("goog.exportSymbol");
    boolean var6 = var0.isConstant("false");
    java.lang.String var7 = var0.getExportSymbolFunction();
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    var9.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    var13.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType[] var19 = new com.google.javascript.rhino.jstype.JSType[] { var18};
    com.google.javascript.rhino.jstype.FunctionType var20 = var13.createConstructorType(var16, false, var19);
    com.google.javascript.rhino.jstype.JSType var22 = var20.findPropertyType("hi!");
    int var23 = var20.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var24 = new com.google.javascript.rhino.jstype.JSType[] { var20};
    com.google.javascript.rhino.Node var25 = var9.createParametersWithVarArgs(var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var26 = var0.isPropertyTestFunction(var25);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "goog.exportProperty"+ "'", var2.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "goog.exportSymbol"+ "'", var7.equals("goog.exportSymbol"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test89() {}
//   public void test89() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test89"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     var0.popNodeAnnotations();
// 
//   }

  public void test90() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test90"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    com.google.javascript.rhino.Node var12 = var10.getLastSibling();
    com.google.javascript.rhino.JSDocInfo var13 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var16 = var15.cloneNode();
    boolean var17 = var15.isDelProp();
    boolean var18 = var15.isDefaultCase();
    boolean var19 = var15.isVar();
    com.google.javascript.rhino.Node var20 = var12.useSourceInfoFrom(var15);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.string("hi!");
    boolean var23 = var22.isNE();
    int var24 = var22.getSideEffectFlags();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.string("hi!");
    boolean var27 = var26.isNE();
    boolean var28 = var26.isWith();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.getprop(var22, var26);
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.string("hi!");
    var26.addChildToBack(var31);
    com.google.javascript.rhino.Node var33 = var31.getLastSibling();
    boolean var34 = var33.isArrayLit();
    com.google.javascript.rhino.Node var35 = var33.getParent();
    boolean var36 = var35.isInc();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.regexp(var15, var35);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test91() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test91"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var1 = var0.getGraphvizEdges();
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    var2.setInlineProperties(true);
    var2.setRuntimeTypeCheckLogFunction("Object#Element");
    var2.setInlineVariables(true);
    var2.setSyntheticBlockStartMarker("hi!");
    com.google.javascript.jscomp.CheckLevel var11 = null;
    var2.setCheckProvides(var11);
    com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
    var13.setInlineProperties(true);
    var13.setRuntimeTypeCheckLogFunction("Object#Element");
    var13.setInlineVariables(true);
    var13.setSyntheticBlockStartMarker("hi!");
    com.google.javascript.jscomp.CheckLevel var22 = null;
    var13.setCheckProvides(var22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var24 = var0.isConnected((java.lang.Object)var11, (java.lang.Object)var13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test92() {}
//   public void test92() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test92"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setInlineProperties(true);
//     var0.setConvertToDottedProperties(false);
//     com.google.javascript.jscomp.AbstractCompiler var5 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
//     com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal(var5, var6);
//     java.lang.String var8 = var7.getSourceName();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var9 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var10 = var9.getGraphvizNodes();
//     com.google.javascript.rhino.ErrorReporter var11 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
//     var12.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
//     com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
//     com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
//     com.google.javascript.jscomp.graph.GraphNode var23 = var9.getNode((java.lang.Object)var22);
//     java.util.List var24 = var9.getEdges();
//     var7.traverseRoots(var24);
//     com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.block(var24);
//     var0.setManageClosureDependencies(var24);
//     var0.setAngularPass(false);
//     com.google.javascript.jscomp.CompilerOptions.Reach var30 = null;
//     var0.setRemoveUnusedVariable(var30);
// 
//   }

  public void test93() {}
//   public void test93() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test93"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     com.google.javascript.jscomp.JSModule var4 = var3.getModule();
//     com.google.javascript.jscomp.JSModule var5 = null;
//     var3.setModule(var5);
//     java.util.Collection var7 = var3.getProvides();
// 
//   }

  public void test94() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test94"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("goog.exportProperty");
    int var3 = var1.getLineOfOffset(100);
    com.google.javascript.jscomp.CompilerInput var5 = new com.google.javascript.jscomp.CompilerInput(var1, true);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.script();
    com.google.javascript.rhino.InputId var8 = new com.google.javascript.rhino.InputId("goog.global");
    var6.setInputId(var8);
    com.google.javascript.jscomp.CompilerInput var11 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var5, var8, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var12 = var5.getPathRelativeToClosureBase();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test95() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test95"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    java.lang.String var2 = var0.getExportPropertyFunction();
    boolean var4 = var0.isConstant("goog.exportSymbol");
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    var6.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var9 = null;
    com.google.javascript.rhino.jstype.JSType var11 = null;
    com.google.javascript.rhino.jstype.JSType[] var12 = new com.google.javascript.rhino.jstype.JSType[] { var11};
    com.google.javascript.rhino.jstype.FunctionType var13 = var6.createConstructorType(var9, false, var12);
    com.google.javascript.rhino.jstype.ObjectType var14 = var13.toObjectType();
    var13.clearCachedValues();
    com.google.javascript.rhino.ErrorReporter var16 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
    java.lang.Iterable var19 = var17.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
    var21.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var24 = null;
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.rhino.jstype.JSType[] var27 = new com.google.javascript.rhino.jstype.JSType[] { var26};
    com.google.javascript.rhino.jstype.FunctionType var28 = var21.createConstructorType(var24, false, var27);
    boolean var29 = var28.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var30 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
    var31.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var34 = null;
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var36};
    com.google.javascript.rhino.jstype.FunctionType var38 = var31.createConstructorType(var34, false, var37);
    com.google.javascript.rhino.jstype.FunctionType var39 = var17.createConstructorType((com.google.javascript.rhino.jstype.JSType)var28, var37);
    com.google.javascript.jscomp.CodingConvention.SubclassType var40 = null;
    var0.applySubclassRelationship(var13, var39, var40);
    java.lang.String var42 = var0.getAbstractMethodName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "goog.exportProperty"+ "'", var2.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "goog.abstractMethod"+ "'", var42.equals("goog.abstractMethod"));

  }

  public void test96() {}
//   public void test96() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test96"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.lang.Object var1 = null;
//     com.google.javascript.jscomp.graph.GraphNode var2 = var0.createNode(var1);
//     var0.popNodeAnnotations();
// 
//   }

  public void test97() {}
//   public void test97() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test97"); }
// 
// 
//     java.io.Reader var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromReader("STRING hi!", var1);
// 
//   }

  public void test98() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test98"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
    int var11 = var8.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var13 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var8, "");
    boolean var14 = var8.isFunctionPrototypeType();
    boolean var15 = var8.isEmptyType();
    var8.clearCachedValues();
    com.google.javascript.rhino.jstype.FunctionType var17 = var8.toMaybeFunctionType();
    com.google.javascript.rhino.jstype.TemplatizedType var18 = com.google.javascript.rhino.jstype.JSType.toMaybeTemplatizedType((com.google.javascript.rhino.jstype.JSType)var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test99() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test99"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
    com.google.javascript.rhino.jstype.TemplateType var3 = var1.getObjectElementKey();
    com.google.javascript.rhino.ErrorReporter var4 = var1.getErrorReporter();
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    var6.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var9 = null;
    com.google.javascript.rhino.jstype.JSType var11 = null;
    com.google.javascript.rhino.jstype.JSType[] var12 = new com.google.javascript.rhino.jstype.JSType[] { var11};
    com.google.javascript.rhino.jstype.FunctionType var13 = var6.createConstructorType(var9, false, var12);
    boolean var14 = var13.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
    var16.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.jstype.JSType var21 = null;
    com.google.javascript.rhino.jstype.JSType[] var22 = new com.google.javascript.rhino.jstype.JSType[] { var21};
    com.google.javascript.rhino.jstype.FunctionType var23 = var16.createConstructorType(var19, false, var22);
    com.google.javascript.rhino.jstype.JSType var25 = var23.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var26 = var23.getTypeOfThis();
    boolean var27 = var13.canCastTo((com.google.javascript.rhino.jstype.JSType)var23);
    boolean var28 = var23.isDateType();
    boolean var29 = var23.isConstructor();
    com.google.javascript.rhino.Node var30 = var23.getRootNode();
    com.google.javascript.rhino.ErrorReporter var31 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var31);
    var32.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var35 = null;
    com.google.javascript.rhino.jstype.JSType var37 = null;
    com.google.javascript.rhino.jstype.JSType[] var38 = new com.google.javascript.rhino.jstype.JSType[] { var37};
    com.google.javascript.rhino.jstype.FunctionType var39 = var32.createConstructorType(var35, false, var38);
    boolean var40 = var39.isInterface();
    com.google.javascript.rhino.jstype.JSType var41 = var23.getLeastSupertype((com.google.javascript.rhino.jstype.JSType)var39);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var42 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var43 = var42.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var44 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var44);
    var45.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var48 = null;
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType[] var51 = new com.google.javascript.rhino.jstype.JSType[] { var50};
    com.google.javascript.rhino.jstype.FunctionType var52 = var45.createConstructorType(var48, false, var51);
    com.google.javascript.rhino.jstype.JSType var54 = var52.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var55 = var52.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var56 = var42.getNode((java.lang.Object)var55);
    java.util.List var57 = var42.getEdges();
    com.google.javascript.rhino.jstype.FunctionType var58 = var1.createFunctionTypeWithVarArgs((com.google.javascript.rhino.jstype.JSType)var39, var57);
    boolean var59 = var58.isTemplatizedType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);

  }

  public void test100() {}
//   public void test100() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test100"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     double var1 = var0.getProgress();
//     double var2 = var0.getProgress();
//     boolean var3 = var0.hasErrors();
// 
//   }

  public void test101() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test101"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.JSTypeNative var1 = com.google.javascript.rhino.jstype.JSTypeNative.valueOf("goog.global");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test102() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test102"); }


    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromCode("2014/12/24 01:41", "goog.abstractMethod");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test103() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test103"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.util.Set var9 = null;
    var1.setDirectives(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    int var15 = var13.getSideEffectFlags();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    boolean var19 = var17.isWith();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
    java.util.Set var21 = null;
    var13.setDirectives(var21);
    com.google.javascript.jscomp.CheckLevel var23 = null;
    com.google.javascript.jscomp.CheckLevel var25 = null;
    com.google.javascript.jscomp.DiagnosticType var27 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var25, "");
    java.lang.String[] var28 = null;
    com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("hi!", var13, var23, var27, var28);
    com.google.javascript.rhino.Node var30 = var1.useSourceInfoIfMissingFrom(var13);
    int var31 = var13.getSideEffectFlags();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.paramList(var13);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);

  }

  public void test104() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test104"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    boolean var9 = var8.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    var11.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var14 = null;
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType[] var17 = new com.google.javascript.rhino.jstype.JSType[] { var16};
    com.google.javascript.rhino.jstype.FunctionType var18 = var11.createConstructorType(var14, false, var17);
    com.google.javascript.rhino.jstype.JSType var20 = var18.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var21 = var18.getTypeOfThis();
    boolean var22 = var8.canCastTo((com.google.javascript.rhino.jstype.JSType)var18);
    boolean var23 = var18.isDateType();
    boolean var24 = var18.isNullType();
    boolean var25 = var18.hasCachedValues();
    boolean var26 = var18.isNullable();
    boolean var27 = var18.isOrdinaryFunction();
    boolean var28 = var18.isVoidType();
    com.google.javascript.rhino.jstype.JSType var30 = var18.findPropertyType("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);

  }

  public void test105() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test105"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineProperties(true);
    var0.setMoveFunctionDeclarations(true);
    com.google.common.collect.Multimap var5 = null;
    var0.setCustomPasses(var5);
    var0.setUnaliasableGlobals("");

  }

  public void test106() {}
//   public void test106() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test106"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.ErrorReporter var2 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
//     var3.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
//     com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
//     boolean var11 = var10.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var12 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
//     var13.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     com.google.javascript.rhino.jstype.JSType var18 = null;
//     com.google.javascript.rhino.jstype.JSType[] var19 = new com.google.javascript.rhino.jstype.JSType[] { var18};
//     com.google.javascript.rhino.jstype.FunctionType var20 = var13.createConstructorType(var16, false, var19);
//     com.google.javascript.rhino.jstype.JSType var22 = var20.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var23 = var20.getTypeOfThis();
//     boolean var24 = var10.canCastTo((com.google.javascript.rhino.jstype.JSType)var20);
//     com.google.javascript.rhino.ErrorReporter var25 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
//     var26.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var29 = null;
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
//     com.google.javascript.rhino.jstype.FunctionType var33 = var26.createConstructorType(var29, false, var32);
//     com.google.javascript.rhino.jstype.JSType var35 = var33.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var36 = var33.toMaybeFunctionType();
//     com.google.javascript.rhino.ErrorReporter var37 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
//     var38.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var41 = null;
//     com.google.javascript.rhino.jstype.JSType var43 = null;
//     com.google.javascript.rhino.jstype.JSType[] var44 = new com.google.javascript.rhino.jstype.JSType[] { var43};
//     com.google.javascript.rhino.jstype.FunctionType var45 = var38.createConstructorType(var41, false, var44);
//     boolean var46 = var45.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var47 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
//     var48.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var51 = null;
//     com.google.javascript.rhino.jstype.JSType var53 = null;
//     com.google.javascript.rhino.jstype.JSType[] var54 = new com.google.javascript.rhino.jstype.JSType[] { var53};
//     com.google.javascript.rhino.jstype.FunctionType var55 = var48.createConstructorType(var51, false, var54);
//     com.google.javascript.rhino.jstype.JSType var57 = var55.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var58 = var55.getTypeOfThis();
//     boolean var59 = var45.canCastTo((com.google.javascript.rhino.jstype.JSType)var55);
//     var1.applySingletonGetter(var10, var33, (com.google.javascript.rhino.jstype.ObjectType)var55);
//     java.lang.String var61 = var1.getExportPropertyFunction();
//     java.lang.String var62 = var1.getGlobalObject();
//     boolean var63 = var0.hasNode((java.lang.Object)var1);
//     var0.pushNodeAnnotations();
//     com.google.javascript.jscomp.CheckLevel var69 = null;
//     com.google.javascript.jscomp.DiagnosticType var71 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var69, "");
//     java.lang.String[] var73 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var74 = com.google.javascript.jscomp.JSError.make("", 100, 0, var71, var73);
//     int var75 = var74.getNodeSourceOffset();
//     com.google.javascript.jscomp.CheckLevel var76 = var74.getDefaultLevel();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var77 = var0.createDirectedGraphNode((java.lang.Object)var74);
// 
//   }

  public void test107() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test107"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.lang.String var9 = com.google.javascript.jscomp.NodeUtil.getSourceName(var1);
    boolean var10 = var1.isCase();
    boolean var11 = var1.isRegExp();
    com.google.javascript.rhino.Node var12 = var1.detachFromParent();
    boolean var13 = var12.isDo();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var17 = var16.cloneNode();
    boolean var18 = var16.isDelProp();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var21 = var20.cloneNode();
    boolean var22 = var20.isDelProp();
    com.google.javascript.rhino.Node var23 = var16.clonePropsFrom(var20);
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
    com.google.javascript.rhino.Node var29 = var28.getLastChild();
    com.google.javascript.rhino.Node var30 = var20.srcrefTree(var28);
    com.google.javascript.rhino.Node[] var31 = new com.google.javascript.rhino.Node[] { var28};
    com.google.javascript.rhino.Node var32 = new com.google.javascript.rhino.Node((-3), var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.call(var12, var31);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test108() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test108"); }


    com.google.javascript.jscomp.AstValidator.ViolationHandler var1 = null;
    com.google.javascript.jscomp.AstValidator var2 = new com.google.javascript.jscomp.AstValidator(var1);
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.string("hi!");
    boolean var5 = var4.isNE();
    int var6 = var4.getSideEffectFlags();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.string("hi!");
    boolean var9 = var8.isNE();
    boolean var10 = var8.isWith();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.getprop(var4, var8);
    var2.validateExpression(var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node((-1), var4, (-1), (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test109() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test109"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    var2.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
    com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
    boolean var10 = var9.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    var12.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
    com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
    boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    var37.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
    boolean var45 = var44.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    var47.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
    com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
    boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
    var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
    java.lang.String var60 = var0.getExportPropertyFunction();
    java.lang.String var61 = var0.getGlobalObject();
    boolean var63 = var0.isConstant("");
    com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.string("hi!");
    boolean var67 = var66.isNE();
    int var68 = var66.getSideEffectFlags();
    com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.IR.string("hi!");
    boolean var71 = var70.isNE();
    boolean var72 = var70.isWith();
    com.google.javascript.rhino.Node var73 = com.google.javascript.rhino.IR.getprop(var66, var70);
    com.google.javascript.rhino.Node var75 = com.google.javascript.rhino.IR.string("hi!");
    var70.addChildToBack(var75);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var77 = var75.getJsDocBuilderForNode();
    int var78 = var75.getCharno();
    java.lang.Object var80 = var75.getProp(10);
    com.google.javascript.rhino.Node var82 = com.google.javascript.rhino.IR.string("hi!");
    boolean var83 = var82.isNE();
    int var84 = var82.getSideEffectFlags();
    com.google.javascript.rhino.Node var86 = com.google.javascript.rhino.IR.string("hi!");
    boolean var87 = var86.isNE();
    boolean var88 = var86.isWith();
    com.google.javascript.rhino.Node var89 = com.google.javascript.rhino.IR.getprop(var82, var86);
    com.google.javascript.rhino.Node var91 = com.google.javascript.rhino.IR.string("hi!");
    var86.addChildToBack(var91);
    com.google.javascript.rhino.Node var93 = var75.srcrefTree(var91);
    boolean var94 = var91.isCase();
    com.google.javascript.rhino.JSDocInfo var95 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var96 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNodeDeclaration((com.google.javascript.jscomp.CodingConvention)var0, "NUMBER 0.0", var91, var95);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "goog.exportProperty"+ "'", var60.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "goog.global"+ "'", var61.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test110() {}
//   public void test110() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test110"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
//     com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var6);
//     double var8 = var5.getProgress();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var5);
//     com.google.javascript.jscomp.Scope var10 = var5.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var11 = null;
//     com.google.javascript.jscomp.NodeTraversal var12 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var11);
//     com.google.javascript.jscomp.JSError[] var13 = var5.getErrors();
// 
//   }

  public void test111() {}
//   public void test111() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test111"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
//     java.lang.String var3 = var2.getSourceName();
//     com.google.javascript.jscomp.CompilerInput var4 = var2.getInput();
// 
//   }

  public void test112() {}
//   public void test112() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test112"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     com.google.javascript.jscomp.Scope var4 = var0.getTopScope();
//     java.util.List var5 = null;
//     java.util.List var6 = null;
//     com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
//     var7.setRecordFunctionInformation(false);
//     com.google.javascript.jscomp.parsing.Config.LanguageMode var11 = null;
//     com.google.javascript.rhino.ErrorReporter var13 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
//     var14.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     com.google.javascript.rhino.jstype.JSType var19 = null;
//     com.google.javascript.rhino.jstype.JSType[] var20 = new com.google.javascript.rhino.jstype.JSType[] { var19};
//     com.google.javascript.rhino.jstype.FunctionType var21 = var14.createConstructorType(var17, false, var20);
//     com.google.javascript.rhino.jstype.JSType var23 = var21.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var24 = var21.toMaybeFunctionType();
//     com.google.javascript.rhino.ErrorReporter var25 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
//     var26.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var29 = null;
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
//     com.google.javascript.rhino.jstype.FunctionType var33 = var26.createConstructorType(var29, false, var32);
//     boolean var34 = var33.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var35 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var35);
//     var36.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var39 = null;
//     com.google.javascript.rhino.jstype.JSType var41 = null;
//     com.google.javascript.rhino.jstype.JSType[] var42 = new com.google.javascript.rhino.jstype.JSType[] { var41};
//     com.google.javascript.rhino.jstype.FunctionType var43 = var36.createConstructorType(var39, false, var42);
//     com.google.javascript.rhino.jstype.JSType var45 = var43.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var46 = var43.getTypeOfThis();
//     boolean var47 = var33.canCastTo((com.google.javascript.rhino.jstype.JSType)var43);
//     boolean var48 = var21.hasEqualCallType(var43);
//     java.lang.Iterable var49 = var43.getAllExtendedInterfaces();
//     java.util.Set var50 = var43.getOwnPropertyNames();
//     com.google.javascript.jscomp.parsing.Config var51 = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(false, var11, false, var50);
//     var7.setExtraAnnotationNames((java.lang.Iterable)var50);
//     var7.setInstrumentMemoryAllocations(true);
//     com.google.javascript.jscomp.Result var55 = var0.<com.google.javascript.jscomp.SourceFile,com.google.javascript.jscomp.SourceFile>compile(var5, var6, var7);
// 
//   }

  public void test113() {}
//   public void test113() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test113"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
//     com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var4 = var3.isNE();
//     int var5 = var3.getSideEffectFlags();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var8 = var7.isNE();
//     boolean var9 = var7.isWith();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
//     var1.validateExpression(var3);
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("FALSE");
//     boolean var14 = var13.isScript();
//     boolean var15 = var13.isInstanceOf();
//     com.google.javascript.rhino.Node var16 = null;
//     var1.process(var13, var16);
// 
//   }

  public void test114() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test114"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
    int var15 = var12.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
    com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    var22.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var25 = null;
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.rhino.jstype.JSType[] var28 = new com.google.javascript.rhino.jstype.JSType[] { var27};
    com.google.javascript.rhino.jstype.FunctionType var29 = var22.createConstructorType(var25, false, var28);
    boolean var30 = var29.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var31 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var31);
    var32.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var35 = null;
    com.google.javascript.rhino.jstype.JSType var37 = null;
    com.google.javascript.rhino.jstype.JSType[] var38 = new com.google.javascript.rhino.jstype.JSType[] { var37};
    com.google.javascript.rhino.jstype.FunctionType var39 = var32.createConstructorType(var35, false, var38);
    com.google.javascript.rhino.jstype.JSType var41 = var39.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var42 = var39.getTypeOfThis();
    boolean var43 = var29.canCastTo((com.google.javascript.rhino.jstype.JSType)var39);
    com.google.javascript.rhino.ErrorReporter var44 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var44);
    var45.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var48 = null;
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType[] var51 = new com.google.javascript.rhino.jstype.JSType[] { var50};
    com.google.javascript.rhino.jstype.FunctionType var52 = var45.createConstructorType(var48, false, var51);
    boolean var53 = var52.isInterface();
    com.google.javascript.rhino.jstype.JSType[] var54 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var55 = var20.createConstructorType((com.google.javascript.rhino.jstype.JSType)var29, var54);
    var55.setDict();
    boolean var57 = var55.hasReferenceName();
    com.google.javascript.rhino.jstype.JSType var58 = var1.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType)var55);
    com.google.javascript.rhino.ErrorReporter var59 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var59);
    var60.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var63 = null;
    com.google.javascript.rhino.jstype.JSType var65 = null;
    com.google.javascript.rhino.jstype.JSType[] var66 = new com.google.javascript.rhino.jstype.JSType[] { var65};
    com.google.javascript.rhino.jstype.FunctionType var67 = var60.createConstructorType(var63, false, var66);
    com.google.javascript.rhino.jstype.ObjectType var68 = var67.toObjectType();
    var67.clearCachedValues();
    com.google.javascript.rhino.ErrorReporter var70 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var70);
    var71.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var74 = null;
    com.google.javascript.rhino.jstype.JSType var76 = null;
    com.google.javascript.rhino.jstype.JSType[] var77 = new com.google.javascript.rhino.jstype.JSType[] { var76};
    com.google.javascript.rhino.jstype.FunctionType var78 = var71.createConstructorType(var74, false, var77);
    com.google.javascript.rhino.jstype.JSType var80 = var78.findPropertyType("hi!");
    int var81 = var78.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var83 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var78, "");
    boolean var84 = var78.makesStructs();
    com.google.javascript.rhino.jstype.TemplateType var85 = com.google.javascript.rhino.jstype.JSType.toMaybeTemplateType((com.google.javascript.rhino.jstype.JSType)var78);
    com.google.javascript.rhino.jstype.FunctionType var86 = var1.createFunctionTypeWithNewThisType(var67, (com.google.javascript.rhino.jstype.ObjectType)var78);
    com.google.javascript.rhino.jstype.JSType var88 = var78.findPropertyType("");
    boolean var89 = var78.isNominalConstructor();
    int var90 = var78.getExtendedInterfacesCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);

  }

  public void test115() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test115"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineProperties(true);
    var0.setConvertToDottedProperties(false);
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    com.google.javascript.rhino.ErrorReporter var7 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7);
    var8.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var11 = null;
    com.google.javascript.rhino.jstype.JSType var13 = null;
    com.google.javascript.rhino.jstype.JSType[] var14 = new com.google.javascript.rhino.jstype.JSType[] { var13};
    com.google.javascript.rhino.jstype.FunctionType var15 = var8.createConstructorType(var11, false, var14);
    boolean var16 = var15.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    var18.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var21 = null;
    com.google.javascript.rhino.jstype.JSType var23 = null;
    com.google.javascript.rhino.jstype.JSType[] var24 = new com.google.javascript.rhino.jstype.JSType[] { var23};
    com.google.javascript.rhino.jstype.FunctionType var25 = var18.createConstructorType(var21, false, var24);
    com.google.javascript.rhino.jstype.JSType var27 = var25.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var28 = var25.getTypeOfThis();
    boolean var29 = var15.canCastTo((com.google.javascript.rhino.jstype.JSType)var25);
    com.google.javascript.rhino.ErrorReporter var30 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
    var31.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var34 = null;
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var36};
    com.google.javascript.rhino.jstype.FunctionType var38 = var31.createConstructorType(var34, false, var37);
    boolean var39 = var38.isInterface();
    com.google.javascript.rhino.jstype.JSType[] var40 = new com.google.javascript.rhino.jstype.JSType[] { var38};
    com.google.javascript.rhino.jstype.FunctionType var41 = var6.createConstructorType((com.google.javascript.rhino.jstype.JSType)var15, var40);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var42 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var43 = var42.getGraphvizNodes();
    var6.setTemplateTypeNames(var43);
    com.google.javascript.jscomp.deps.SortedDependencies var45 = new com.google.javascript.jscomp.deps.SortedDependencies(var43);
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.script(var43);
    com.google.javascript.jscomp.ComposeWarningsGuard var47 = new com.google.javascript.jscomp.ComposeWarningsGuard(var43);
    java.lang.String var48 = var47.toString();
    com.google.javascript.jscomp.WarningsGuard[] var49 = new com.google.javascript.jscomp.WarningsGuard[] { var47};
    com.google.javascript.jscomp.ComposeWarningsGuard var50 = new com.google.javascript.jscomp.ComposeWarningsGuard(var49);
    var0.setWarningsGuard(var50);
    com.google.javascript.jscomp.VariableRenamingPolicy var52 = null;
    com.google.javascript.jscomp.PropertyRenamingPolicy var53 = null;
    var0.setRenamingPolicy(var52, var53);
    com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var55 = var0.getAliasTransformationHandler();
    var0.setInlineVariables(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + ""+ "'", var48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test116() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test116"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var1 = var0.getGraphvizEdges();
    java.lang.String var2 = var0.getName();
    var0.pushNodeAnnotations();
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    com.google.javascript.rhino.ErrorReporter var6 = var5.getErrorReporter();
    com.google.javascript.rhino.jstype.TemplateType var7 = var5.getObjectElementKey();
    java.lang.Iterable var8 = var7.getCtorExtendedInterfaces();
    com.google.javascript.jscomp.ClosureCodingConvention var9 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    var11.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var14 = null;
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType[] var17 = new com.google.javascript.rhino.jstype.JSType[] { var16};
    com.google.javascript.rhino.jstype.FunctionType var18 = var11.createConstructorType(var14, false, var17);
    boolean var19 = var18.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
    var21.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var24 = null;
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.rhino.jstype.JSType[] var27 = new com.google.javascript.rhino.jstype.JSType[] { var26};
    com.google.javascript.rhino.jstype.FunctionType var28 = var21.createConstructorType(var24, false, var27);
    com.google.javascript.rhino.jstype.JSType var30 = var28.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var31 = var28.getTypeOfThis();
    boolean var32 = var18.canCastTo((com.google.javascript.rhino.jstype.JSType)var28);
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33);
    var34.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var37 = null;
    com.google.javascript.rhino.jstype.JSType var39 = null;
    com.google.javascript.rhino.jstype.JSType[] var40 = new com.google.javascript.rhino.jstype.JSType[] { var39};
    com.google.javascript.rhino.jstype.FunctionType var41 = var34.createConstructorType(var37, false, var40);
    com.google.javascript.rhino.jstype.JSType var43 = var41.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var44 = var41.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var45 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
    var46.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.rhino.jstype.JSType[] var52 = new com.google.javascript.rhino.jstype.JSType[] { var51};
    com.google.javascript.rhino.jstype.FunctionType var53 = var46.createConstructorType(var49, false, var52);
    boolean var54 = var53.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var55 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var55);
    var56.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.rhino.jstype.JSType var61 = null;
    com.google.javascript.rhino.jstype.JSType[] var62 = new com.google.javascript.rhino.jstype.JSType[] { var61};
    com.google.javascript.rhino.jstype.FunctionType var63 = var56.createConstructorType(var59, false, var62);
    com.google.javascript.rhino.jstype.JSType var65 = var63.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var66 = var63.getTypeOfThis();
    boolean var67 = var53.canCastTo((com.google.javascript.rhino.jstype.JSType)var63);
    var9.applySingletonGetter(var18, var41, (com.google.javascript.rhino.jstype.ObjectType)var63);
    com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.IR.string("hi!");
    boolean var71 = var70.isNE();
    int var72 = var70.getSideEffectFlags();
    com.google.javascript.rhino.Node var74 = com.google.javascript.rhino.IR.string("hi!");
    boolean var75 = var74.isNE();
    boolean var76 = var74.isWith();
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.getprop(var70, var74);
    com.google.javascript.rhino.Node var79 = com.google.javascript.rhino.IR.string("hi!");
    var74.addChildToBack(var79);
    com.google.javascript.rhino.Node var81 = var79.getLastSibling();
    boolean var82 = var81.isLocalResultCall();
    java.util.Map var83 = null;
    var9.checkForCallingConventionDefiningCalls(var81, var83);
    java.util.Collection var85 = var9.getAssertionFunctions();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.disconnectInDirection((java.lang.Object)var7, (java.lang.Object)var85);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "LinkedGraph"+ "'", var2.equals("LinkedGraph"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test117() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test117"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.PropertyRenamingPolicy var1 = com.google.javascript.jscomp.PropertyRenamingPolicy.valueOf("hi!: ");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test118() {}
//   public void test118() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test118"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.ErrorReporter var1 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
//     var2.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
//     com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
//     boolean var10 = var9.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var11 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
//     var12.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
//     com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
//     com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
//     boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
//     com.google.javascript.rhino.ErrorReporter var24 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
//     var25.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var28 = null;
//     com.google.javascript.rhino.jstype.JSType var30 = null;
//     com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
//     com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
//     com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
//     com.google.javascript.rhino.ErrorReporter var36 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
//     var37.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var40 = null;
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
//     com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
//     boolean var45 = var44.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var46 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
//     var47.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var50 = null;
//     com.google.javascript.rhino.jstype.JSType var52 = null;
//     com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
//     com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
//     com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
//     boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
//     var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
//     com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var62 = var61.cloneNode();
//     boolean var63 = var61.isDelProp();
//     com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var66 = var65.cloneNode();
//     boolean var67 = var65.isDelProp();
//     com.google.javascript.rhino.Node var68 = var61.clonePropsFrom(var65);
//     com.google.javascript.rhino.JSDocInfo var69 = var65.getJSDocInfo();
//     com.google.javascript.jscomp.CodingConvention.Bind var71 = var0.describeFunctionBind(var65, true);
//     boolean var73 = var0.isExported("Node tree inequality:\nTree1:\nSTRING LinkedGraph\n\n\nTree2:\nSTRING hi!\n\n\nSubtree1: STRING LinkedGraph\n\n\nSubtree2: STRING hi!\n");
//     com.google.javascript.rhino.Node var74 = null;
//     java.util.List var75 = var0.identifyTypeDeclarationCall(var74);
// 
//   }

  public void test119() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test119"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    var2.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
    com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
    boolean var10 = var9.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    var12.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
    com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
    boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    var37.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
    boolean var45 = var44.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    var47.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
    com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
    boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
    var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
    java.lang.String var60 = var0.getExportPropertyFunction();
    com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var63 = var62.cloneNode();
    boolean var64 = var62.isDelProp();
    com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var67 = var66.cloneNode();
    boolean var68 = var66.isDelProp();
    com.google.javascript.rhino.Node var69 = var62.clonePropsFrom(var66);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast var70 = var0.getObjectLiteralCast(var69);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "goog.exportProperty"+ "'", var60.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test120() {}
//   public void test120() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test120"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
//     com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var6);
//     double var8 = var5.getProgress();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var5);
//     int var10 = var5.getErrorCount();
// 
//   }

  public void test121() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test121"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var2 = var1.cloneNode();
    boolean var3 = var1.isDelProp();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var6 = var5.cloneNode();
    boolean var7 = var5.isDelProp();
    com.google.javascript.rhino.Node var8 = var1.clonePropsFrom(var5);
    com.google.javascript.rhino.JSDocInfo var9 = var5.getJSDocInfo();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.returnNode(var5);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test122() {}
//   public void test122() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test122"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
//     com.google.javascript.rhino.jstype.FunctionBuilder var2 = var1.forConstructor();
//     com.google.javascript.rhino.jstype.FunctionBuilder var4 = var1.setIsConstructor(false);
//     com.google.javascript.rhino.jstype.FunctionType var5 = var4.build();
// 
//   }

  public void test123() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test123"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.Node.newString("hi!: ");
    boolean var2 = var1.isSetterDef();
    com.google.javascript.rhino.Node var3 = var1.getLastSibling();
    boolean var4 = var1.isLabel();
    com.google.javascript.rhino.Node var5 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.tryFinally(var1, var5);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test124() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test124"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
    boolean var11 = var10.canBeCalled();
    com.google.javascript.rhino.jstype.FunctionBuilder var13 = var1.withReturnType((com.google.javascript.rhino.jstype.JSType)var10, true);
    com.google.javascript.jscomp.ClosureCodingConvention var14 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
    var16.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.jstype.JSType var21 = null;
    com.google.javascript.rhino.jstype.JSType[] var22 = new com.google.javascript.rhino.jstype.JSType[] { var21};
    com.google.javascript.rhino.jstype.FunctionType var23 = var16.createConstructorType(var19, false, var22);
    boolean var24 = var23.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    var26.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var29 = null;
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.jstype.FunctionType var33 = var26.createConstructorType(var29, false, var32);
    com.google.javascript.rhino.jstype.JSType var35 = var33.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var36 = var33.getTypeOfThis();
    boolean var37 = var23.canCastTo((com.google.javascript.rhino.jstype.JSType)var33);
    com.google.javascript.rhino.ErrorReporter var38 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
    var39.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType var44 = null;
    com.google.javascript.rhino.jstype.JSType[] var45 = new com.google.javascript.rhino.jstype.JSType[] { var44};
    com.google.javascript.rhino.jstype.FunctionType var46 = var39.createConstructorType(var42, false, var45);
    com.google.javascript.rhino.jstype.JSType var48 = var46.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var49 = var46.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var50 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var50);
    var51.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var54 = null;
    com.google.javascript.rhino.jstype.JSType var56 = null;
    com.google.javascript.rhino.jstype.JSType[] var57 = new com.google.javascript.rhino.jstype.JSType[] { var56};
    com.google.javascript.rhino.jstype.FunctionType var58 = var51.createConstructorType(var54, false, var57);
    boolean var59 = var58.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var60 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var60);
    var61.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var64 = null;
    com.google.javascript.rhino.jstype.JSType var66 = null;
    com.google.javascript.rhino.jstype.JSType[] var67 = new com.google.javascript.rhino.jstype.JSType[] { var66};
    com.google.javascript.rhino.jstype.FunctionType var68 = var61.createConstructorType(var64, false, var67);
    com.google.javascript.rhino.jstype.JSType var70 = var68.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var71 = var68.getTypeOfThis();
    boolean var72 = var58.canCastTo((com.google.javascript.rhino.jstype.JSType)var68);
    var14.applySingletonGetter(var23, var46, (com.google.javascript.rhino.jstype.ObjectType)var68);
    com.google.javascript.rhino.jstype.FunctionBuilder var74 = var1.withInferredReturnType((com.google.javascript.rhino.jstype.JSType)var68);
    com.google.javascript.rhino.Node var76 = com.google.javascript.rhino.IR.string("hi!");
    boolean var77 = var76.isNE();
    int var78 = var76.getSideEffectFlags();
    com.google.javascript.rhino.Node var80 = com.google.javascript.rhino.IR.string("hi!");
    boolean var81 = var80.isNE();
    boolean var82 = var80.isWith();
    com.google.javascript.rhino.Node var83 = com.google.javascript.rhino.IR.getprop(var76, var80);
    com.google.javascript.rhino.Node var85 = com.google.javascript.rhino.IR.string("hi!");
    var80.addChildToBack(var85);
    com.google.javascript.rhino.jstype.FunctionBuilder var87 = var74.withParamsNode(var80);
    com.google.javascript.rhino.jstype.FunctionBuilder var89 = var74.setIsConstructor(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test125() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test125"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    double var1 = var0.getProgress();
    double var2 = var0.getProgress();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var3 = var0.toSource();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0.0d);

  }

  public void test126() {}
//   public void test126() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test126"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
//     java.lang.String var3 = var2.getSourceName();
//     boolean var4 = var2.hasScope();
//     com.google.javascript.jscomp.JSModule var5 = var2.getModule();
// 
//   }

  public void test127() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test127"); }


    com.google.javascript.jscomp.SourceAst var0 = null;
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
    com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
    com.google.javascript.rhino.InputId var5 = var3.getInputId();
    java.lang.String var6 = var5.getIdName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));

  }

  public void test128() {}
//   public void test128() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test128"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setInlineProperties(true);
//     com.google.javascript.jscomp.CheckLevel var3 = null;
//     var0.setCheckMissingReturn(var3);
//     com.google.javascript.jscomp.CompilerOptions.Reach var5 = null;
//     var0.setRemoveUnusedVariable(var5);
// 
//   }

  public void test129() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test129"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
    int var15 = var12.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
    com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    var22.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var25 = null;
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.rhino.jstype.JSType[] var28 = new com.google.javascript.rhino.jstype.JSType[] { var27};
    com.google.javascript.rhino.jstype.FunctionType var29 = var22.createConstructorType(var25, false, var28);
    boolean var30 = var29.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var31 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var31);
    var32.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var35 = null;
    com.google.javascript.rhino.jstype.JSType var37 = null;
    com.google.javascript.rhino.jstype.JSType[] var38 = new com.google.javascript.rhino.jstype.JSType[] { var37};
    com.google.javascript.rhino.jstype.FunctionType var39 = var32.createConstructorType(var35, false, var38);
    com.google.javascript.rhino.jstype.JSType var41 = var39.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var42 = var39.getTypeOfThis();
    boolean var43 = var29.canCastTo((com.google.javascript.rhino.jstype.JSType)var39);
    com.google.javascript.rhino.ErrorReporter var44 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var44);
    var45.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var48 = null;
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType[] var51 = new com.google.javascript.rhino.jstype.JSType[] { var50};
    com.google.javascript.rhino.jstype.FunctionType var52 = var45.createConstructorType(var48, false, var51);
    boolean var53 = var52.isInterface();
    com.google.javascript.rhino.jstype.JSType[] var54 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var55 = var20.createConstructorType((com.google.javascript.rhino.jstype.JSType)var29, var54);
    var55.setDict();
    boolean var57 = var55.hasReferenceName();
    com.google.javascript.rhino.jstype.JSType var58 = var1.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType)var55);
    com.google.javascript.rhino.ErrorReporter var59 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var59);
    var60.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var63 = null;
    com.google.javascript.rhino.jstype.JSType var65 = null;
    com.google.javascript.rhino.jstype.JSType[] var66 = new com.google.javascript.rhino.jstype.JSType[] { var65};
    com.google.javascript.rhino.jstype.FunctionType var67 = var60.createConstructorType(var63, false, var66);
    com.google.javascript.rhino.jstype.ObjectType var68 = var67.toObjectType();
    var67.clearCachedValues();
    com.google.javascript.rhino.ErrorReporter var70 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var70);
    var71.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var74 = null;
    com.google.javascript.rhino.jstype.JSType var76 = null;
    com.google.javascript.rhino.jstype.JSType[] var77 = new com.google.javascript.rhino.jstype.JSType[] { var76};
    com.google.javascript.rhino.jstype.FunctionType var78 = var71.createConstructorType(var74, false, var77);
    com.google.javascript.rhino.jstype.JSType var80 = var78.findPropertyType("hi!");
    int var81 = var78.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var83 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var78, "");
    boolean var84 = var78.makesStructs();
    com.google.javascript.rhino.jstype.TemplateType var85 = com.google.javascript.rhino.jstype.JSType.toMaybeTemplateType((com.google.javascript.rhino.jstype.JSType)var78);
    com.google.javascript.rhino.jstype.FunctionType var86 = var1.createFunctionTypeWithNewThisType(var67, (com.google.javascript.rhino.jstype.ObjectType)var78);
    boolean var87 = var86.isNullable();
    boolean var88 = var86.isNominalType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test130() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test130"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var1 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
    boolean var4 = var3.isNE();
    int var5 = var3.getSideEffectFlags();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
    boolean var8 = var7.isNE();
    boolean var9 = var7.isWith();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
    var10.setLineno(10);
    boolean var13 = var1.hasNode((java.lang.Object)var10);
    com.google.javascript.rhino.JSDocInfo var14 = null;
    com.google.javascript.rhino.Node var15 = var10.setJSDocInfo(var14);
    var10.addSuppression("goog.global");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var18 = com.google.javascript.rhino.SimpleErrorReporter.getMessage1("LABEL_NAME hi! 10", (java.lang.Object)var10);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test131() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test131"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineProperties(true);
    java.util.Set var3 = null;
    var0.setAliasableStrings(var3);
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    var6.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var9 = null;
    com.google.javascript.rhino.jstype.JSType var11 = null;
    com.google.javascript.rhino.jstype.JSType[] var12 = new com.google.javascript.rhino.jstype.JSType[] { var11};
    com.google.javascript.rhino.jstype.FunctionType var13 = var6.createConstructorType(var9, false, var12);
    com.google.javascript.rhino.jstype.JSType var15 = var13.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var16 = var13.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    var18.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var21 = null;
    com.google.javascript.rhino.jstype.JSType var23 = null;
    com.google.javascript.rhino.jstype.JSType[] var24 = new com.google.javascript.rhino.jstype.JSType[] { var23};
    com.google.javascript.rhino.jstype.FunctionType var25 = var18.createConstructorType(var21, false, var24);
    boolean var26 = var25.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    var28.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
    com.google.javascript.rhino.jstype.FunctionType var35 = var28.createConstructorType(var31, false, var34);
    com.google.javascript.rhino.jstype.JSType var37 = var35.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var38 = var35.getTypeOfThis();
    boolean var39 = var25.canCastTo((com.google.javascript.rhino.jstype.JSType)var35);
    boolean var40 = var13.hasEqualCallType(var35);
    java.lang.Iterable var41 = var35.getAllExtendedInterfaces();
    java.util.Set var42 = var35.getOwnPropertyNames();
    var0.setReplaceStringsReservedStrings(var42);
    com.google.common.collect.Multimap var44 = null;
    var0.setCustomPasses(var44);
    var0.setExternExports(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test132() {}
//   public void test132() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test132"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var4);
//     java.util.logging.Logger var6 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var7 = new com.google.javascript.jscomp.LoggerErrorManager((com.google.javascript.jscomp.MessageFormatter)var5, var6);
//     java.util.logging.Logger var8 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var9 = new com.google.javascript.jscomp.LoggerErrorManager((com.google.javascript.jscomp.MessageFormatter)var5, var8);
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var14 = var13.isNE();
//     int var15 = var13.getSideEffectFlags();
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var18 = var17.isNE();
//     boolean var19 = var17.isWith();
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
//     java.util.Set var21 = null;
//     var13.setDirectives(var21);
//     com.google.javascript.jscomp.CheckLevel var23 = null;
//     com.google.javascript.jscomp.CheckLevel var25 = null;
//     com.google.javascript.jscomp.DiagnosticType var27 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var25, "");
//     java.lang.String[] var28 = null;
//     com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("hi!", var13, var23, var27, var28);
//     com.google.javascript.jscomp.DiagnosticGroup var30 = com.google.javascript.jscomp.DiagnosticGroup.forType(var27);
//     com.google.javascript.jscomp.DiagnosticGroup[] var31 = new com.google.javascript.jscomp.DiagnosticGroup[] { var30};
//     com.google.javascript.jscomp.DiagnosticGroup var32 = new com.google.javascript.jscomp.DiagnosticGroup(var31);
//     com.google.javascript.jscomp.DiagnosticGroup var33 = new com.google.javascript.jscomp.DiagnosticGroup("Node tree inequality:\nTree1:\nSTRING LinkedGraph\n\n\nTree2:\nSTRING hi!\n\n\nSubtree1: STRING LinkedGraph\n\n\nSubtree2: STRING hi!\n", var31);
//     java.util.logging.Logger var34 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var35 = new com.google.javascript.jscomp.LoggerErrorManager(var34);
//     int var36 = var35.getErrorCount();
//     com.google.javascript.jscomp.CheckLevel var37 = null;
//     com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var41 = var40.isNE();
//     int var42 = var40.getSideEffectFlags();
//     com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var45 = var44.isNE();
//     boolean var46 = var44.isWith();
//     com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.getprop(var40, var44);
//     java.util.Set var48 = null;
//     var40.setDirectives(var48);
//     com.google.javascript.jscomp.CheckLevel var50 = null;
//     com.google.javascript.jscomp.CheckLevel var52 = null;
//     com.google.javascript.jscomp.DiagnosticType var54 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var52, "");
//     java.lang.String[] var55 = null;
//     com.google.javascript.jscomp.JSError var56 = com.google.javascript.jscomp.JSError.make("hi!", var40, var50, var54, var55);
//     com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var61 = var60.isNE();
//     int var62 = var60.getSideEffectFlags();
//     com.google.javascript.rhino.Node var64 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var65 = var64.isNE();
//     boolean var66 = var64.isWith();
//     com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.getprop(var60, var64);
//     java.util.Set var68 = null;
//     var60.setDirectives(var68);
//     com.google.javascript.jscomp.CheckLevel var70 = null;
//     com.google.javascript.jscomp.CheckLevel var72 = null;
//     com.google.javascript.jscomp.DiagnosticType var74 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var72, "");
//     java.lang.String[] var75 = null;
//     com.google.javascript.jscomp.JSError var76 = com.google.javascript.jscomp.JSError.make("hi!", var60, var70, var74, var75);
//     com.google.javascript.jscomp.CheckLevel var81 = null;
//     com.google.javascript.jscomp.DiagnosticType var83 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var81, "");
//     java.lang.String[] var85 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var86 = com.google.javascript.jscomp.JSError.make("", 100, 0, var83, var85);
//     java.lang.String[] var88 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var89 = com.google.javascript.jscomp.JSError.make("hi!", var60, var83, var88);
//     com.google.javascript.jscomp.JSError var90 = com.google.javascript.jscomp.JSError.make(var54, var88);
//     var35.report(var37, var90);
//     com.google.javascript.jscomp.CheckLevel var92 = var90.getDefaultLevel();
//     boolean var93 = var33.matches(var90);
//     java.lang.String var94 = var5.formatWarning(var90);
// 
//   }

  public void test133() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test133"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("goog.exportProperty");
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var1, false);
    boolean var4 = var3.isExtern();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var6 = var3.getLineOffset(0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test134() {}
//   public void test134() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test134"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
//     com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var6);
//     com.google.javascript.rhino.head.ast.AstRoot var9 = null;
//     var5.setOldParseTree("", var9);
//     var5.reportCodeChange();
//     com.google.javascript.rhino.Node var12 = var3.getAstRoot((com.google.javascript.jscomp.AbstractCompiler)var5);
// 
//   }

  public void test135() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test135"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    com.google.javascript.rhino.Node var12 = var10.getLastSibling();
    com.google.javascript.rhino.Node var13 = var10.removeFirstChild();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
    boolean var19 = var18.isQualifiedName();
    var18.setType(1);
    com.google.javascript.rhino.Node var22 = var10.clonePropsFrom(var18);
    com.google.javascript.rhino.Node var23 = var22.cloneTree();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.string("hi!");
    boolean var26 = var25.isNE();
    int var27 = var25.getSideEffectFlags();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.string("hi!");
    boolean var30 = var29.isNE();
    boolean var31 = var29.isWith();
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.getprop(var25, var29);
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.string("hi!");
    var29.addChildToBack(var34);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var36 = var34.getJsDocBuilderForNode();
    int var37 = var34.getCharno();
    java.lang.Object var39 = var34.getProp(10);
    boolean var40 = var34.isAnd();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.getelem(var22, var34);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test136() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test136"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
    int var15 = var12.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
    com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
    boolean var19 = var18.hasAnyTemplateTypesInternal();
    com.google.javascript.rhino.jstype.BooleanLiteralSet var20 = var18.getPossibleToBooleanOutcomes();
    java.lang.Class var21 = var20.getDeclaringClass();
    java.lang.Enum var23 = java.lang.Enum.<java.lang.Enum>valueOf(var21, "TRUE");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var25 = java.lang.Enum.<java.lang.Enum>valueOf(var21, "LinkedGraph");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test137() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test137"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
    int var15 = var12.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
    com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
    boolean var19 = var18.hasAnyTemplateTypesInternal();
    com.google.javascript.rhino.jstype.BooleanLiteralSet var20 = var18.getPossibleToBooleanOutcomes();
    java.lang.Class var21 = var20.getDeclaringClass();
    java.lang.String var22 = var20.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "TRUE"+ "'", var22.equals("TRUE"));

  }

  public void test138() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test138"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.lang.Iterable var9 = var8.siblings();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.string("hi!");
    boolean var12 = var11.isNE();
    int var13 = var11.getSideEffectFlags();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.string("hi!");
    boolean var16 = var15.isNE();
    boolean var17 = var15.isWith();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.getprop(var11, var15);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.string("hi!");
    var15.addChildToBack(var20);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var22 = var20.getJsDocBuilderForNode();
    int var23 = var20.getCharno();
    java.lang.Object var25 = var20.getProp(10);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.string("hi!");
    boolean var28 = var27.isNE();
    int var29 = var27.getSideEffectFlags();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.string("hi!");
    boolean var32 = var31.isNE();
    boolean var33 = var31.isWith();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.getprop(var27, var31);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.string("hi!");
    var31.addChildToBack(var36);
    com.google.javascript.rhino.Node var38 = var20.srcrefTree(var36);
    com.google.javascript.rhino.Node var39 = var8.useSourceInfoFromForTree(var38);
    boolean var40 = var38.isBreak();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var41 = com.google.javascript.jscomp.NodeUtil.isLValue(var38);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test139() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test139"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    java.lang.Iterable var3 = var1.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    boolean var13 = var12.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    var15.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
    com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
    com.google.javascript.rhino.jstype.FunctionType var23 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var12, var21);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    java.lang.Iterable var27 = var25.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var28 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
    var29.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.rhino.jstype.JSType var34 = null;
    com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var34};
    com.google.javascript.rhino.jstype.FunctionType var36 = var29.createConstructorType(var32, false, var35);
    boolean var37 = var36.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var38 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
    var39.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType var44 = null;
    com.google.javascript.rhino.jstype.JSType[] var45 = new com.google.javascript.rhino.jstype.JSType[] { var44};
    com.google.javascript.rhino.jstype.FunctionType var46 = var39.createConstructorType(var42, false, var45);
    com.google.javascript.rhino.jstype.FunctionType var47 = var25.createConstructorType((com.google.javascript.rhino.jstype.JSType)var36, var45);
    boolean var48 = var36.isReturnTypeInferred();
    boolean var49 = var36.isTemplatizedType();
    com.google.javascript.rhino.ErrorReporter var50 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var50);
    com.google.javascript.rhino.ErrorReporter var52 = var51.getErrorReporter();
    com.google.javascript.rhino.jstype.TemplateType var53 = var51.getObjectElementKey();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var54 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var55 = var54.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var56 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var56);
    var57.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var60 = null;
    com.google.javascript.rhino.jstype.JSType var62 = null;
    com.google.javascript.rhino.jstype.JSType[] var63 = new com.google.javascript.rhino.jstype.JSType[] { var62};
    com.google.javascript.rhino.jstype.FunctionType var64 = var57.createConstructorType(var60, false, var63);
    com.google.javascript.rhino.jstype.JSType var66 = var64.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var67 = var64.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var68 = var54.getNode((java.lang.Object)var67);
    java.util.List var69 = var54.getEdges();
    com.google.javascript.rhino.jstype.JSType var70 = var1.createFunctionType((com.google.javascript.rhino.jstype.ObjectType)var36, (com.google.javascript.rhino.jstype.JSType)var53, var69);
    boolean var71 = var36.isInterface();
    com.google.javascript.rhino.jstype.JSType var72 = var36.unboxesTo();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);

  }

  public void test140() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test140"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    var9.setLineno(10);
    boolean var12 = var0.hasNode((java.lang.Object)var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var13 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.DependencyOptions var14 = new com.google.javascript.jscomp.DependencyOptions();
    com.google.javascript.jscomp.DependencyOptions var16 = var14.setDependencySorting(false);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var17 = var13.createDirectedGraphNode((java.lang.Object)var16);
    java.util.List var18 = var0.getNeighborNodes(var17);
    com.google.javascript.jscomp.CompilerOptions var19 = new com.google.javascript.jscomp.CompilerOptions();
    var19.setInlineProperties(true);
    var19.setConvertToDottedProperties(false);
    com.google.javascript.jscomp.AbstractCompiler var24 = null;
    com.google.javascript.jscomp.NodeTraversal.Callback var25 = null;
    com.google.javascript.jscomp.NodeTraversal var26 = new com.google.javascript.jscomp.NodeTraversal(var24, var25);
    java.lang.String var27 = var26.getSourceName();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var29 = var28.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var30 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
    var31.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var34 = null;
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var36};
    com.google.javascript.rhino.jstype.FunctionType var38 = var31.createConstructorType(var34, false, var37);
    com.google.javascript.rhino.jstype.JSType var40 = var38.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var41 = var38.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var42 = var28.getNode((java.lang.Object)var41);
    java.util.List var43 = var28.getEdges();
    var26.traverseRoots(var43);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.block(var43);
    var19.setManageClosureDependencies(var43);
    var19.setAngularPass(false);
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.empty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.graph.Graph.GraphEdge var50 = var0.getFirstEdge((java.lang.Object)var19, (java.lang.Object)var49);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + ""+ "'", var27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test141() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test141"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.returnNode();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.var(var0);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test142() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test142"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var2 = var1.cloneNode();
    boolean var3 = var1.isDelProp();
    int var4 = var1.getSideEffectFlags();
    var1.setQuotedString();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.block();
    com.google.javascript.rhino.Node var7 = var1.useSourceInfoFrom(var6);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.block();
    int var9 = var8.getSourceOffset();
    com.google.javascript.rhino.Node[] var10 = new com.google.javascript.rhino.Node[] { var8};
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.script(var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.switchNode(var1, var10);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test143() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test143"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
    int var15 = var12.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
    com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    var20.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var23 = null;
    com.google.javascript.rhino.jstype.JSType var25 = null;
    com.google.javascript.rhino.jstype.JSType[] var26 = new com.google.javascript.rhino.jstype.JSType[] { var25};
    com.google.javascript.rhino.jstype.FunctionType var27 = var20.createConstructorType(var23, false, var26);
    com.google.javascript.rhino.jstype.JSType var29 = var27.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var30 = var27.toMaybeFunctionType();
    boolean var32 = var30.isPropertyTypeDeclared("goog.exportProperty");
    com.google.javascript.rhino.jstype.JSType var33 = var1.createNullableType((com.google.javascript.rhino.jstype.JSType)var30);
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    com.google.javascript.rhino.ErrorReporter var36 = var35.getErrorReporter();
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    var38.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var41 = null;
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.rhino.jstype.JSType[] var44 = new com.google.javascript.rhino.jstype.JSType[] { var43};
    com.google.javascript.rhino.jstype.FunctionType var45 = var38.createConstructorType(var41, false, var44);
    boolean var46 = var45.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    var48.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.rhino.jstype.JSType var53 = null;
    com.google.javascript.rhino.jstype.JSType[] var54 = new com.google.javascript.rhino.jstype.JSType[] { var53};
    com.google.javascript.rhino.jstype.FunctionType var55 = var48.createConstructorType(var51, false, var54);
    com.google.javascript.rhino.jstype.JSType var57 = var55.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var58 = var55.getTypeOfThis();
    boolean var59 = var45.canCastTo((com.google.javascript.rhino.jstype.JSType)var55);
    boolean var60 = var55.isDateType();
    com.google.javascript.rhino.jstype.JSType[] var61 = new com.google.javascript.rhino.jstype.JSType[] { var55};
    com.google.javascript.rhino.Node var62 = var35.createParametersWithVarArgs(var61);
    com.google.javascript.rhino.jstype.JSType var63 = var1.createUnionType(var61);
    com.google.javascript.rhino.jstype.TemplateType var64 = var1.getObjectElementKey();
    com.google.javascript.rhino.JSDocInfo var65 = null;
    com.google.javascript.rhino.jstype.ObjectType var66 = var1.createAnonymousObjectType(var65);
    com.google.javascript.rhino.jstype.JSType var71 = var1.createNamedType("2014/12/24 01:41", "NUMBER 0.0", 0, 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test144() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test144"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
    com.google.javascript.rhino.jstype.FunctionBuilder var2 = var1.forConstructor();
    com.google.javascript.jscomp.AstValidator.ViolationHandler var3 = null;
    com.google.javascript.jscomp.AstValidator var4 = new com.google.javascript.jscomp.AstValidator(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    int var8 = var6.getSideEffectFlags();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    boolean var11 = var10.isNE();
    boolean var12 = var10.isWith();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.getprop(var6, var10);
    var4.validateExpression(var6);
    var6.removeProp((-1));
    java.lang.Iterable var17 = var6.siblings();
    com.google.javascript.rhino.ErrorReporter var18 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18);
    var19.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var22 = null;
    com.google.javascript.rhino.jstype.JSType var24 = null;
    com.google.javascript.rhino.jstype.JSType[] var25 = new com.google.javascript.rhino.jstype.JSType[] { var24};
    com.google.javascript.rhino.jstype.FunctionType var26 = var19.createConstructorType(var22, false, var25);
    com.google.javascript.rhino.jstype.JSType var28 = var26.findPropertyType("hi!");
    int var29 = var26.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var31 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var26, "");
    boolean var32 = var26.isFunctionPrototypeType();
    var6.setJSType((com.google.javascript.rhino.jstype.JSType)var26);
    com.google.javascript.rhino.jstype.FunctionBuilder var34 = var2.withInferredReturnType((com.google.javascript.rhino.jstype.JSType)var26);
    com.google.javascript.rhino.ErrorReporter var35 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var35);
    java.lang.Iterable var38 = var36.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var39 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var39);
    var40.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.jstype.FunctionType var47 = var40.createConstructorType(var43, false, var46);
    boolean var48 = var47.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var49 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var49);
    var50.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var53 = null;
    com.google.javascript.rhino.jstype.JSType var55 = null;
    com.google.javascript.rhino.jstype.JSType[] var56 = new com.google.javascript.rhino.jstype.JSType[] { var55};
    com.google.javascript.rhino.jstype.FunctionType var57 = var50.createConstructorType(var53, false, var56);
    com.google.javascript.rhino.jstype.FunctionType var58 = var36.createConstructorType((com.google.javascript.rhino.jstype.JSType)var47, var56);
    boolean var59 = var58.isNumber();
    com.google.javascript.rhino.jstype.FunctionType var61 = var58.getBindReturnType(0);
    com.google.javascript.rhino.jstype.FunctionBuilder var62 = var34.withInferredReturnType((com.google.javascript.rhino.jstype.JSType)var61);
    com.google.javascript.rhino.jstype.FunctionBuilder var63 = var34.forConstructor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test145() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test145"); }


    com.google.javascript.rhino.jstype.TernaryValue var1 = com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(100);
    int var2 = var1.ordinal();
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "false"+ "'", var3.equals("false"));

  }

  public void test146() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test146"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineProperties(true);
    var0.setIdGeneratorsMap("LABEL_NAME hi!");
    var0.setRemoveClosureAsserts(false);
    var0.setRemoveUnusedPrototypePropertiesInExterns(true);
    com.google.javascript.jscomp.CheckLevel var9 = null;
    var0.setCheckMissingReturn(var9);
    var0.setAliasKeywords(true);

  }

  public void test147() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test147"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var1 = var0.getGraphvizEdges();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.string("hi!");
    boolean var5 = var4.isNE();
    int var6 = var4.getSideEffectFlags();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.string("hi!");
    boolean var9 = var8.isNE();
    boolean var10 = var8.isWith();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.getprop(var4, var8);
    var11.setLineno(10);
    boolean var14 = var2.hasNode((java.lang.Object)var11);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var15 = var0.createDirectedGraphNode((java.lang.Object)var2);
    var0.pushEdgeAnnotations();
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    var18.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    var22.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var25 = null;
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.rhino.jstype.JSType[] var28 = new com.google.javascript.rhino.jstype.JSType[] { var27};
    com.google.javascript.rhino.jstype.FunctionType var29 = var22.createConstructorType(var25, false, var28);
    com.google.javascript.rhino.jstype.JSType var31 = var29.findPropertyType("hi!");
    int var32 = var29.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var33 = new com.google.javascript.rhino.jstype.JSType[] { var29};
    com.google.javascript.rhino.Node var34 = var18.createParametersWithVarArgs(var33);
    com.google.javascript.rhino.jstype.TemplateType var35 = var18.getObjectIndexKey();
    var18.clearTemplateTypeNames();
    com.google.javascript.rhino.jstype.FunctionParamBuilder var37 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var18);
    var18.forwardDeclareType("goog.exportSymbol");
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    var42.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType var47 = null;
    com.google.javascript.rhino.jstype.JSType[] var48 = new com.google.javascript.rhino.jstype.JSType[] { var47};
    com.google.javascript.rhino.jstype.FunctionType var49 = var42.createConstructorType(var45, false, var48);
    var18.unregisterPropertyOnType("", var45);
    com.google.javascript.rhino.jstype.FunctionBuilder var51 = new com.google.javascript.rhino.jstype.FunctionBuilder(var18);
    com.google.javascript.rhino.jstype.FunctionBuilder var52 = new com.google.javascript.rhino.jstype.FunctionBuilder(var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var53 = var0.getDirectedSuccNodes((java.lang.Object)var18);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test148() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test148"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    java.lang.Iterable var3 = var1.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    boolean var13 = var12.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    var15.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
    com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
    com.google.javascript.rhino.jstype.FunctionType var23 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var12, var21);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    int var35 = var32.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var37 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var32, "");
    boolean var38 = var32.makesStructs();
    boolean var39 = var23.isSubtype((com.google.javascript.rhino.jstype.JSType)var32);
    com.google.javascript.rhino.jstype.TemplateType var40 = com.google.javascript.rhino.jstype.JSType.toMaybeTemplateType((com.google.javascript.rhino.jstype.JSType)var32);
    com.google.javascript.rhino.jstype.FunctionType var42 = var32.getBindReturnType((-1));
    boolean var43 = var42.hasDisplayName();
    com.google.javascript.rhino.jstype.Property var45 = var42.getSlot("LABEL_NAME hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);

  }

  public void test149() {}
//   public void test149() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test149"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var1 = var0.getGraphvizNodes();
//     var0.popEdgeAnnotations();
// 
//   }

  public void test150() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test150"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var3 = var0.getSourceLine("", (-1));
    com.google.javascript.jscomp.Scope var4 = var0.getTopScope();
    com.google.javascript.jscomp.JSModule var5 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var6 = var0.toSource(var5);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test151() {}
//   public void test151() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test151"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var4);
//     java.util.logging.Logger var6 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var7 = new com.google.javascript.jscomp.LoggerErrorManager((com.google.javascript.jscomp.MessageFormatter)var5, var6);
//     java.util.logging.Logger var8 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var9 = new com.google.javascript.jscomp.LoggerErrorManager((com.google.javascript.jscomp.MessageFormatter)var5, var8);
//     java.util.logging.Logger var10 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var11 = new com.google.javascript.jscomp.LoggerErrorManager((com.google.javascript.jscomp.MessageFormatter)var5, var10);
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var16 = var15.isNE();
//     int var17 = var15.getSideEffectFlags();
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var20 = var19.isNE();
//     boolean var21 = var19.isWith();
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.getprop(var15, var19);
//     java.util.Set var23 = null;
//     var15.setDirectives(var23);
//     com.google.javascript.jscomp.CheckLevel var25 = null;
//     com.google.javascript.jscomp.CheckLevel var27 = null;
//     com.google.javascript.jscomp.DiagnosticType var29 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var27, "");
//     java.lang.String[] var30 = null;
//     com.google.javascript.jscomp.JSError var31 = com.google.javascript.jscomp.JSError.make("hi!", var15, var25, var29, var30);
//     com.google.javascript.jscomp.DiagnosticGroup var32 = com.google.javascript.jscomp.DiagnosticGroup.forType(var29);
//     com.google.javascript.jscomp.DiagnosticGroup[] var33 = new com.google.javascript.jscomp.DiagnosticGroup[] { var32};
//     com.google.javascript.jscomp.DiagnosticGroup var34 = new com.google.javascript.jscomp.DiagnosticGroup(var33);
//     com.google.javascript.jscomp.DiagnosticGroup var35 = new com.google.javascript.jscomp.DiagnosticGroup("Node tree inequality:\nTree1:\nSTRING LinkedGraph\n\n\nTree2:\nSTRING hi!\n\n\nSubtree1: STRING LinkedGraph\n\n\nSubtree2: STRING hi!\n", var33);
//     java.util.logging.Logger var36 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var37 = new com.google.javascript.jscomp.LoggerErrorManager(var36);
//     int var38 = var37.getErrorCount();
//     com.google.javascript.jscomp.CheckLevel var39 = null;
//     com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var43 = var42.isNE();
//     int var44 = var42.getSideEffectFlags();
//     com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var47 = var46.isNE();
//     boolean var48 = var46.isWith();
//     com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.getprop(var42, var46);
//     java.util.Set var50 = null;
//     var42.setDirectives(var50);
//     com.google.javascript.jscomp.CheckLevel var52 = null;
//     com.google.javascript.jscomp.CheckLevel var54 = null;
//     com.google.javascript.jscomp.DiagnosticType var56 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var54, "");
//     java.lang.String[] var57 = null;
//     com.google.javascript.jscomp.JSError var58 = com.google.javascript.jscomp.JSError.make("hi!", var42, var52, var56, var57);
//     com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var63 = var62.isNE();
//     int var64 = var62.getSideEffectFlags();
//     com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var67 = var66.isNE();
//     boolean var68 = var66.isWith();
//     com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.IR.getprop(var62, var66);
//     java.util.Set var70 = null;
//     var62.setDirectives(var70);
//     com.google.javascript.jscomp.CheckLevel var72 = null;
//     com.google.javascript.jscomp.CheckLevel var74 = null;
//     com.google.javascript.jscomp.DiagnosticType var76 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var74, "");
//     java.lang.String[] var77 = null;
//     com.google.javascript.jscomp.JSError var78 = com.google.javascript.jscomp.JSError.make("hi!", var62, var72, var76, var77);
//     com.google.javascript.jscomp.CheckLevel var83 = null;
//     com.google.javascript.jscomp.DiagnosticType var85 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var83, "");
//     java.lang.String[] var87 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var88 = com.google.javascript.jscomp.JSError.make("", 100, 0, var85, var87);
//     java.lang.String[] var90 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var91 = com.google.javascript.jscomp.JSError.make("hi!", var62, var85, var90);
//     com.google.javascript.jscomp.JSError var92 = com.google.javascript.jscomp.JSError.make(var56, var90);
//     var37.report(var39, var92);
//     com.google.javascript.jscomp.CheckLevel var94 = var92.getDefaultLevel();
//     boolean var95 = var35.matches(var92);
//     int var96 = var92.getNodeSourceOffset();
//     java.lang.Object var97 = null;
//     boolean var98 = var92.equals(var97);
//     java.lang.String var99 = var5.formatError(var92);
// 
//   }

  public void test152() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test152"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    java.lang.String var2 = var1.getExportPropertyFunction();
    boolean var4 = var1.isValidEnumKey("");
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    int var8 = var6.getSideEffectFlags();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    boolean var11 = var10.isNE();
    boolean var12 = var10.isWith();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.getprop(var6, var10);
    var10.removeProp(0);
    java.lang.String var16 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var10);
    java.util.Set var17 = null;
    var10.setDirectives(var17);
    java.lang.Iterable var19 = var10.siblings();
    boolean var20 = var1.isVarArgsParameter(var10);
    boolean var23 = var1.isExported("STRING hi!", true);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.string("hi!");
    boolean var26 = var25.isNE();
    int var27 = var25.getSideEffectFlags();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.string("hi!");
    boolean var30 = var29.isNE();
    boolean var31 = var29.isWith();
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.getprop(var25, var29);
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.string("hi!");
    var29.addChildToBack(var34);
    boolean var36 = var29.isVar();
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.string("hi!");
    boolean var39 = var38.isNE();
    int var40 = var38.getSideEffectFlags();
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.string("hi!");
    boolean var43 = var42.isNE();
    boolean var44 = var42.isWith();
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.getprop(var38, var42);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.string("hi!");
    var42.addChildToBack(var47);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var49 = var47.getJsDocBuilderForNode();
    int var50 = var47.getCharno();
    boolean var51 = var29.isEquivalentTo(var47);
    com.google.javascript.jscomp.CodingConvention.DelegateRelationship var52 = var1.getDelegateRelationship(var29);
    boolean var53 = var29.isNot();
    boolean var54 = var29.isVoid();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "goog.exportProperty"+ "'", var2.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test153() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test153"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    java.lang.String var10 = com.google.javascript.jscomp.NodeUtil.getSourceName(var2);
    var2.setVarArgs(true);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.string("hi!");
    boolean var15 = var14.isNE();
    int var16 = var14.getSideEffectFlags();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.string("hi!");
    boolean var19 = var18.isNE();
    boolean var20 = var18.isWith();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.getprop(var14, var18);
    java.util.Set var22 = null;
    var14.setDirectives(var22);
    int var24 = var14.getChildCount();
    java.lang.Iterable var25 = var14.siblings();
    java.lang.Object var27 = var14.getProp(1);
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.string("hi!");
    boolean var30 = var29.isNE();
    int var31 = var29.getSideEffectFlags();
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.string("hi!");
    boolean var34 = var33.isNE();
    boolean var35 = var33.isWith();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.getprop(var29, var33);
    java.lang.Iterable var37 = var36.siblings();
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.string("hi!");
    boolean var40 = var39.isNE();
    int var41 = var39.getSideEffectFlags();
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.string("hi!");
    boolean var44 = var43.isNE();
    boolean var45 = var43.isWith();
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.getprop(var39, var43);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.string("hi!");
    var43.addChildToBack(var48);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var50 = var48.getJsDocBuilderForNode();
    int var51 = var48.getCharno();
    java.lang.Object var53 = var48.getProp(10);
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.string("hi!");
    boolean var56 = var55.isNE();
    int var57 = var55.getSideEffectFlags();
    com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.IR.string("hi!");
    boolean var60 = var59.isNE();
    boolean var61 = var59.isWith();
    com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.getprop(var55, var59);
    com.google.javascript.rhino.Node var64 = com.google.javascript.rhino.IR.string("hi!");
    var59.addChildToBack(var64);
    com.google.javascript.rhino.Node var66 = var48.srcrefTree(var64);
    com.google.javascript.rhino.Node var67 = var36.useSourceInfoFromForTree(var66);
    boolean var68 = var14.hasChild(var67);
    com.google.javascript.jscomp.AstValidator.ViolationHandler var69 = null;
    com.google.javascript.jscomp.AstValidator var70 = new com.google.javascript.jscomp.AstValidator(var69);
    com.google.javascript.rhino.Node var72 = com.google.javascript.rhino.IR.string("hi!");
    boolean var73 = var72.isNE();
    int var74 = var72.getSideEffectFlags();
    com.google.javascript.rhino.Node var76 = com.google.javascript.rhino.IR.string("hi!");
    boolean var77 = var76.isNE();
    boolean var78 = var76.isWith();
    com.google.javascript.rhino.Node var79 = com.google.javascript.rhino.IR.getprop(var72, var76);
    var70.validateExpression(var72);
    com.google.javascript.rhino.Node var82 = com.google.javascript.rhino.IR.string("hi!");
    boolean var83 = var82.isNE();
    boolean var84 = var82.isWith();
    java.util.Set var85 = null;
    var82.setDirectives(var85);
    boolean var87 = var82.isUnscopedQualifiedName();
    var82.setCharno(0);
    boolean var90 = var82.isParamList();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var91 = new com.google.javascript.rhino.Node(0, var2, var67, var72, var82);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);

  }

  public void test154() {}
//   public void test154() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test154"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     com.google.javascript.jscomp.SymbolTable var2 = var0.buildKnownSymbolTable();
// 
//   }

  public void test155() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test155"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.util.Set var9 = null;
    var1.setDirectives(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    int var15 = var13.getSideEffectFlags();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    boolean var19 = var17.isWith();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
    java.util.Set var21 = null;
    var13.setDirectives(var21);
    com.google.javascript.jscomp.CheckLevel var23 = null;
    com.google.javascript.jscomp.CheckLevel var25 = null;
    com.google.javascript.jscomp.DiagnosticType var27 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var25, "");
    java.lang.String[] var28 = null;
    com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("hi!", var13, var23, var27, var28);
    com.google.javascript.rhino.Node var30 = var1.useSourceInfoIfMissingFrom(var13);
    var13.setType(0);
    boolean var33 = var13.isCase();
    boolean var34 = var13.isScript();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.string("hi!");
    boolean var37 = var36.isNE();
    int var38 = var36.getSideEffectFlags();
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.string("hi!");
    boolean var41 = var40.isNE();
    boolean var42 = var40.isWith();
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.getprop(var36, var40);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.string("hi!");
    var40.addChildToBack(var45);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var47 = var45.getJsDocBuilderForNode();
    int var48 = var45.getCharno();
    java.lang.Object var50 = var45.getProp(10);
    boolean var51 = var45.isAnd();
    boolean var52 = var45.isBlock();
    com.google.javascript.rhino.Node var53 = var45.cloneNode();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.ifNode(var13, var45);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test156() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test156"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.CheckLevel var1 = com.google.javascript.jscomp.CheckLevel.valueOf("hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test157() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test157"); }


    com.google.javascript.jscomp.AbstractCompiler var0 = null;
    com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
    com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
    java.lang.String var3 = var2.getSourceName();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var5 = var4.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    var7.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType var12 = null;
    com.google.javascript.rhino.jstype.JSType[] var13 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.jstype.FunctionType var14 = var7.createConstructorType(var10, false, var13);
    com.google.javascript.rhino.jstype.JSType var16 = var14.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var17 = var14.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var18 = var4.getNode((java.lang.Object)var17);
    java.util.List var19 = var4.getEdges();
    var2.traverseRoots(var19);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.block(var19);
    java.lang.Object var23 = var21.getProp((-1));
    boolean var24 = var21.isGetProp();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.exprResult(var21);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test158() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test158"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var11 = var8.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    var13.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType[] var19 = new com.google.javascript.rhino.jstype.JSType[] { var18};
    com.google.javascript.rhino.jstype.FunctionType var20 = var13.createConstructorType(var16, false, var19);
    boolean var21 = var20.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    var23.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType[] var29 = new com.google.javascript.rhino.jstype.JSType[] { var28};
    com.google.javascript.rhino.jstype.FunctionType var30 = var23.createConstructorType(var26, false, var29);
    com.google.javascript.rhino.jstype.JSType var32 = var30.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var33 = var30.getTypeOfThis();
    boolean var34 = var20.canCastTo((com.google.javascript.rhino.jstype.JSType)var30);
    boolean var35 = var8.hasEqualCallType(var30);
    boolean var36 = var30.isNumber();
    boolean var37 = var30.matchesInt32Context();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test159() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test159"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
    int var11 = var8.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var13 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var8, "");
    java.util.List var14 = var8.getSubTypes();
    java.lang.Iterable var15 = var8.getExtendedInterfaces();
    boolean var17 = var8.isPropertyInExterns("2014/12/24 01:41");
    com.google.javascript.rhino.jstype.Property var19 = var8.getSlot("InputId: hi!");
    boolean var21 = var8.isPropertyTypeDeclared("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test160() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test160"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
    java.lang.Iterable var6 = var4.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var7 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7);
    var8.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var11 = null;
    com.google.javascript.rhino.jstype.JSType var13 = null;
    com.google.javascript.rhino.jstype.JSType[] var14 = new com.google.javascript.rhino.jstype.JSType[] { var13};
    com.google.javascript.rhino.jstype.FunctionType var15 = var8.createConstructorType(var11, false, var14);
    boolean var16 = var15.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    var18.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var21 = null;
    com.google.javascript.rhino.jstype.JSType var23 = null;
    com.google.javascript.rhino.jstype.JSType[] var24 = new com.google.javascript.rhino.jstype.JSType[] { var23};
    com.google.javascript.rhino.jstype.FunctionType var25 = var18.createConstructorType(var21, false, var24);
    com.google.javascript.rhino.jstype.FunctionType var26 = var4.createConstructorType((com.google.javascript.rhino.jstype.JSType)var15, var24);
    boolean var27 = var15.isReturnTypeInferred();
    boolean var28 = var15.isTemplatizedType();
    com.google.javascript.rhino.jstype.FunctionType var30 = var15.getBindReturnType((-3));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.overwriteDeclaredType("hi!", (com.google.javascript.rhino.jstype.JSType)var30);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test161() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test161"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.stringKey("hi!: ");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.voidNode(var1);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test162() {}
//   public void test162() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test162"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
//     com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
//     com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.jscomp.GoogleCodingConvention var3 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var2);
//     java.lang.String var4 = var3.getExportPropertyFunction();
//     boolean var6 = var3.isValidEnumKey("");
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var9 = var8.isNE();
//     int var10 = var8.getSideEffectFlags();
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var13 = var12.isNE();
//     boolean var14 = var12.isWith();
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.getprop(var8, var12);
//     var12.removeProp(0);
//     java.lang.String var18 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var12);
//     java.util.Set var19 = null;
//     var12.setDirectives(var19);
//     java.lang.Iterable var21 = var12.siblings();
//     boolean var22 = var3.isVarArgsParameter(var12);
//     com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var26 = var25.isNE();
//     int var27 = var25.getSideEffectFlags();
//     com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var30 = var29.isNE();
//     boolean var31 = var29.isWith();
//     com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.getprop(var25, var29);
//     java.util.Set var33 = null;
//     var25.setDirectives(var33);
//     com.google.javascript.jscomp.CheckLevel var35 = null;
//     com.google.javascript.jscomp.CheckLevel var37 = null;
//     com.google.javascript.jscomp.DiagnosticType var39 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var37, "");
//     java.lang.String[] var40 = null;
//     com.google.javascript.jscomp.JSError var41 = com.google.javascript.jscomp.JSError.make("hi!", var25, var35, var39, var40);
//     com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var45 = var44.isNE();
//     int var46 = var44.getSideEffectFlags();
//     com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var49 = var48.isNE();
//     boolean var50 = var48.isWith();
//     com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.getprop(var44, var48);
//     java.util.Set var52 = null;
//     var44.setDirectives(var52);
//     com.google.javascript.jscomp.CheckLevel var54 = null;
//     com.google.javascript.jscomp.CheckLevel var56 = null;
//     com.google.javascript.jscomp.DiagnosticType var58 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var56, "");
//     java.lang.String[] var59 = null;
//     com.google.javascript.jscomp.JSError var60 = com.google.javascript.jscomp.JSError.make("hi!", var44, var54, var58, var59);
//     var44.addSuppression("");
//     com.google.javascript.rhino.Node var63 = var25.useSourceInfoFromForTree(var44);
//     boolean var64 = var44.isGetElem();
//     com.google.javascript.rhino.InputId var65 = var44.getInputId();
//     com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var68 = var67.cloneNode();
//     java.lang.String var69 = var3.extractClassNameIfProvide(var44, var68);
//     var1.validateExpression(var44);
//     com.google.javascript.rhino.Node var76 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
//     int var77 = var76.getChangeTime();
//     boolean var78 = var76.isCatch();
//     int var79 = var76.getType();
//     com.google.javascript.rhino.Node var81 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var82 = var81.cloneNode();
//     boolean var83 = var81.isDelProp();
//     boolean var84 = var81.isDefaultCase();
//     boolean var85 = var81.isNE();
//     var81.setLength(100);
//     com.google.javascript.rhino.Node var90 = new com.google.javascript.rhino.Node(1, var76, var81, 1, (-1));
//     var1.validateStatement(var81);
// 
//   }

  public void test163() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test163"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    boolean var3 = var1.isFunction();
    java.lang.String var4 = var1.toString();
    int var5 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.cast(var1);
    boolean var7 = var6.isStringKey();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "STRING hi!"+ "'", var4.equals("STRING hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test164() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test164"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.util.Set var9 = null;
    var1.setDirectives(var9);
    int var11 = var1.getChildCount();
    java.lang.Iterable var12 = var1.siblings();
    java.lang.Object var14 = var1.getProp(1);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.string("hi!");
    boolean var17 = var16.isNE();
    int var18 = var16.getSideEffectFlags();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.string("hi!");
    boolean var21 = var20.isNE();
    boolean var22 = var20.isWith();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.getprop(var16, var20);
    java.lang.Iterable var24 = var23.siblings();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.string("hi!");
    boolean var27 = var26.isNE();
    int var28 = var26.getSideEffectFlags();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.string("hi!");
    boolean var31 = var30.isNE();
    boolean var32 = var30.isWith();
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.getprop(var26, var30);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.string("hi!");
    var30.addChildToBack(var35);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var37 = var35.getJsDocBuilderForNode();
    int var38 = var35.getCharno();
    java.lang.Object var40 = var35.getProp(10);
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.string("hi!");
    boolean var43 = var42.isNE();
    int var44 = var42.getSideEffectFlags();
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.string("hi!");
    boolean var47 = var46.isNE();
    boolean var48 = var46.isWith();
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.getprop(var42, var46);
    com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.string("hi!");
    var46.addChildToBack(var51);
    com.google.javascript.rhino.Node var53 = var35.srcrefTree(var51);
    com.google.javascript.rhino.Node var54 = var23.useSourceInfoFromForTree(var53);
    boolean var55 = var1.hasChild(var54);
    boolean var56 = var1.isThrow();
    boolean var57 = var1.isIf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test165() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test165"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.JSTypeNative var1 = com.google.javascript.rhino.jstype.JSTypeNative.valueOf("hi!.  at (unknown source) line (unknown line) : (unknown column)");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test166() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test166"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.PropertyRenamingPolicy var1 = com.google.javascript.jscomp.PropertyRenamingPolicy.valueOf("LinkedGraph");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test167() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test167"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.util.Set var9 = null;
    var1.setDirectives(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    int var15 = var13.getSideEffectFlags();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    boolean var19 = var17.isWith();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
    java.util.Set var21 = null;
    var13.setDirectives(var21);
    com.google.javascript.jscomp.CheckLevel var23 = null;
    com.google.javascript.jscomp.CheckLevel var25 = null;
    com.google.javascript.jscomp.DiagnosticType var27 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var25, "");
    java.lang.String[] var28 = null;
    com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("hi!", var13, var23, var27, var28);
    com.google.javascript.rhino.Node var30 = var1.useSourceInfoIfMissingFrom(var13);
    boolean var31 = var1.isFor();
    boolean var32 = var1.isTry();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.block(var1);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test168() {}
//   public void test168() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test168"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     boolean var13 = var12.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var14 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
//     var15.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var18 = null;
//     com.google.javascript.rhino.jstype.JSType var20 = null;
//     com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
//     com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
//     com.google.javascript.rhino.jstype.JSType var24 = var22.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var25 = var22.getTypeOfThis();
//     boolean var26 = var12.canCastTo((com.google.javascript.rhino.jstype.JSType)var22);
//     com.google.javascript.rhino.ErrorReporter var27 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
//     var28.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     com.google.javascript.rhino.jstype.JSType var33 = null;
//     com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
//     com.google.javascript.rhino.jstype.FunctionType var35 = var28.createConstructorType(var31, false, var34);
//     boolean var36 = var35.isInterface();
//     com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var35};
//     com.google.javascript.rhino.jstype.FunctionType var38 = var3.createConstructorType((com.google.javascript.rhino.jstype.JSType)var12, var37);
//     com.google.javascript.rhino.Node var39 = var1.createOptionalParameters(var37);
//     com.google.javascript.rhino.ErrorReporter var41 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
//     java.lang.Iterable var44 = var42.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var45 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
//     var46.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var49 = null;
//     com.google.javascript.rhino.jstype.JSType var51 = null;
//     com.google.javascript.rhino.jstype.JSType[] var52 = new com.google.javascript.rhino.jstype.JSType[] { var51};
//     com.google.javascript.rhino.jstype.FunctionType var53 = var46.createConstructorType(var49, false, var52);
//     boolean var54 = var53.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var55 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var55);
//     var56.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var59 = null;
//     com.google.javascript.rhino.jstype.JSType var61 = null;
//     com.google.javascript.rhino.jstype.JSType[] var62 = new com.google.javascript.rhino.jstype.JSType[] { var61};
//     com.google.javascript.rhino.jstype.FunctionType var63 = var56.createConstructorType(var59, false, var62);
//     com.google.javascript.rhino.jstype.FunctionType var64 = var42.createConstructorType((com.google.javascript.rhino.jstype.JSType)var53, var62);
//     com.google.javascript.rhino.jstype.TemplateType var65 = var42.getObjectIndexKey();
//     var1.unregisterPropertyOnType("hi!: ", (com.google.javascript.rhino.jstype.JSType)var65);
//     java.lang.Iterable var68 = var1.getTypesWithProperty("");
//     com.google.javascript.rhino.jstype.TemplateType var70 = var1.createTemplateType("false");
//     com.google.javascript.rhino.jstype.JSTypeNative var71 = null;
//     com.google.javascript.rhino.jstype.JSType var72 = var1.getNativeType(var71);
// 
//   }

  public void test169() {}
//   public void test169() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test169"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var2 = var1.isNE();
//     com.google.javascript.rhino.Node var3 = var1.cloneNode();
//     java.nio.charset.Charset var5 = null;
//     com.google.javascript.jscomp.SourceFile var6 = com.google.javascript.jscomp.SourceFile.fromFile("goog.global", var5);
//     var6.clearCachedSource();
//     var1.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var6);
//     com.google.javascript.jscomp.JsAst var9 = new com.google.javascript.jscomp.JsAst(var6);
//     com.google.javascript.jscomp.Compiler var10 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.rhino.Node var11 = var9.getAstRoot((com.google.javascript.jscomp.AbstractCompiler)var10);
// 
//   }

  public void test170() {}
//   public void test170() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test170"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = null;
//     com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(var0, "LABEL_NAME hi!");
// 
//   }

  public void test171() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test171"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
    com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var1);
    double var3 = var0.getProgress();
    var0.reportCodeChange();
    com.google.javascript.rhino.head.ast.AstRoot var6 = var0.getOldParseTreeByName("LinkedGraph");
    com.google.javascript.jscomp.NodeTraversal.Callback var7 = null;
    com.google.javascript.jscomp.NodeTraversal var8 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var7);
    com.google.javascript.jscomp.ErrorManager var9 = var0.getErrorManager();
    com.google.javascript.jscomp.NodeTraversal.Callback var10 = null;
    com.google.javascript.jscomp.AbstractCompiler var11 = null;
    com.google.javascript.jscomp.NodeTraversal.Callback var12 = null;
    com.google.javascript.jscomp.NodeTraversal var13 = new com.google.javascript.jscomp.NodeTraversal(var11, var12);
    java.lang.String var14 = var13.getSourceName();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var15 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var16 = var15.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    var18.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var21 = null;
    com.google.javascript.rhino.jstype.JSType var23 = null;
    com.google.javascript.rhino.jstype.JSType[] var24 = new com.google.javascript.rhino.jstype.JSType[] { var23};
    com.google.javascript.rhino.jstype.FunctionType var25 = var18.createConstructorType(var21, false, var24);
    com.google.javascript.rhino.jstype.JSType var27 = var25.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var28 = var25.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var29 = var15.getNode((java.lang.Object)var28);
    java.util.List var30 = var15.getEdges();
    var13.traverseRoots(var30);
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.block(var30);
    java.lang.Object var34 = var32.getProp((-1));
    boolean var35 = var32.isGetProp();
    com.google.javascript.rhino.Node[] var36 = new com.google.javascript.rhino.Node[] { var32};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var0, var10, var36);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test172() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test172"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    java.lang.String var2 = var0.getExportPropertyFunction();
    boolean var4 = var0.isValidEnumKey("()");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "goog.exportProperty"+ "'", var2.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test173() {}
//   public void test173() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test173"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var1 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
//     var3.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
//     com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
//     boolean var11 = var1.addRequiredParams(var9);
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var14 = var13.cloneNode();
//     boolean var15 = var13.isDelProp();
//     int var16 = var13.getSideEffectFlags();
//     com.google.javascript.rhino.Node var17 = var1.newOptionalParameterFromNode(var13);
//     com.google.javascript.rhino.SimpleErrorReporter var18 = new com.google.javascript.rhino.SimpleErrorReporter();
//     com.google.javascript.rhino.jstype.JSTypeRegistry var19 = new com.google.javascript.rhino.jstype.JSTypeRegistry((com.google.javascript.rhino.ErrorReporter)var18);
//     com.google.javascript.rhino.ErrorReporter var20 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
//     var21.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var24 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
//     var25.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var28 = null;
//     com.google.javascript.rhino.jstype.JSType var30 = null;
//     com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
//     com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
//     com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
//     int var35 = var32.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var36 = new com.google.javascript.rhino.jstype.JSType[] { var32};
//     com.google.javascript.rhino.Node var37 = var21.createParametersWithVarArgs(var36);
//     com.google.javascript.rhino.jstype.TemplateType var38 = var21.getObjectIndexKey();
//     boolean var39 = var21.shouldTolerateUndefinedValues();
//     com.google.javascript.rhino.ErrorReporter var40 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40);
//     var41.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var44 = null;
//     com.google.javascript.rhino.jstype.JSType var46 = null;
//     com.google.javascript.rhino.jstype.JSType[] var47 = new com.google.javascript.rhino.jstype.JSType[] { var46};
//     com.google.javascript.rhino.jstype.FunctionType var48 = var41.createConstructorType(var44, false, var47);
//     boolean var49 = var48.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var50 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var50);
//     var51.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var54 = null;
//     com.google.javascript.rhino.jstype.JSType var56 = null;
//     com.google.javascript.rhino.jstype.JSType[] var57 = new com.google.javascript.rhino.jstype.JSType[] { var56};
//     com.google.javascript.rhino.jstype.FunctionType var58 = var51.createConstructorType(var54, false, var57);
//     com.google.javascript.rhino.jstype.JSType var60 = var58.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var61 = var58.toMaybeFunctionType();
//     boolean var63 = var61.isPropertyTypeDeclared("goog.exportProperty");
//     com.google.javascript.rhino.jstype.JSType[] var64 = new com.google.javascript.rhino.jstype.JSType[] { var61};
//     com.google.javascript.rhino.jstype.FunctionType var65 = var21.createFunctionType((com.google.javascript.rhino.jstype.JSType)var48, var64);
//     com.google.javascript.rhino.Node var66 = var19.createParametersWithVarArgs(var64);
//     boolean var67 = var1.addOptionalParams(var64);
// 
//   }

  public void test174() {}
//   public void test174() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test174"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var4);
//     java.lang.String var8 = var0.getSourceLine("hi!: ", (-1));
//     com.google.javascript.rhino.head.ast.AstRoot var10 = null;
//     var0.setOldParseTree("()", var10);
//     boolean var12 = var0.acceptConstKeyword();
// 
//   }

  public void test175() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test175"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
    int var15 = var12.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
    com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    var22.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var25 = null;
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.rhino.jstype.JSType[] var28 = new com.google.javascript.rhino.jstype.JSType[] { var27};
    com.google.javascript.rhino.jstype.FunctionType var29 = var22.createConstructorType(var25, false, var28);
    boolean var30 = var29.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var31 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var31);
    var32.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var35 = null;
    com.google.javascript.rhino.jstype.JSType var37 = null;
    com.google.javascript.rhino.jstype.JSType[] var38 = new com.google.javascript.rhino.jstype.JSType[] { var37};
    com.google.javascript.rhino.jstype.FunctionType var39 = var32.createConstructorType(var35, false, var38);
    com.google.javascript.rhino.jstype.JSType var41 = var39.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var42 = var39.getTypeOfThis();
    boolean var43 = var29.canCastTo((com.google.javascript.rhino.jstype.JSType)var39);
    com.google.javascript.rhino.ErrorReporter var44 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var44);
    var45.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var48 = null;
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType[] var51 = new com.google.javascript.rhino.jstype.JSType[] { var50};
    com.google.javascript.rhino.jstype.FunctionType var52 = var45.createConstructorType(var48, false, var51);
    boolean var53 = var52.isInterface();
    com.google.javascript.rhino.jstype.JSType[] var54 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var55 = var20.createConstructorType((com.google.javascript.rhino.jstype.JSType)var29, var54);
    var55.setDict();
    boolean var57 = var55.hasReferenceName();
    com.google.javascript.rhino.jstype.JSType var58 = var1.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType)var55);
    com.google.javascript.rhino.ErrorReporter var59 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var59);
    var60.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var63 = null;
    com.google.javascript.rhino.jstype.JSType var65 = null;
    com.google.javascript.rhino.jstype.JSType[] var66 = new com.google.javascript.rhino.jstype.JSType[] { var65};
    com.google.javascript.rhino.jstype.FunctionType var67 = var60.createConstructorType(var63, false, var66);
    com.google.javascript.rhino.jstype.ObjectType var68 = var67.toObjectType();
    var67.clearCachedValues();
    com.google.javascript.rhino.ErrorReporter var70 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var70);
    var71.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var74 = null;
    com.google.javascript.rhino.jstype.JSType var76 = null;
    com.google.javascript.rhino.jstype.JSType[] var77 = new com.google.javascript.rhino.jstype.JSType[] { var76};
    com.google.javascript.rhino.jstype.FunctionType var78 = var71.createConstructorType(var74, false, var77);
    com.google.javascript.rhino.jstype.JSType var80 = var78.findPropertyType("hi!");
    int var81 = var78.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var83 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var78, "");
    boolean var84 = var78.makesStructs();
    com.google.javascript.rhino.jstype.TemplateType var85 = com.google.javascript.rhino.jstype.JSType.toMaybeTemplateType((com.google.javascript.rhino.jstype.JSType)var78);
    com.google.javascript.rhino.jstype.FunctionType var86 = var1.createFunctionTypeWithNewThisType(var67, (com.google.javascript.rhino.jstype.ObjectType)var78);
    boolean var87 = var86.isNullable();
    boolean var88 = var86.isStringValueType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test176() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test176"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
    boolean var4 = var3.isNE();
    int var5 = var3.getSideEffectFlags();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
    boolean var8 = var7.isNE();
    boolean var9 = var7.isWith();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
    java.util.Set var11 = null;
    var3.setDirectives(var11);
    com.google.javascript.jscomp.CheckLevel var13 = null;
    com.google.javascript.jscomp.CheckLevel var15 = null;
    com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var15, "");
    java.lang.String[] var18 = null;
    com.google.javascript.jscomp.JSError var19 = com.google.javascript.jscomp.JSError.make("hi!", var3, var13, var17, var18);
    com.google.javascript.jscomp.CheckLevel var24 = null;
    com.google.javascript.jscomp.DiagnosticType var26 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var24, "");
    java.lang.String[] var28 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("", 100, 0, var26, var28);
    java.lang.String[] var31 = new java.lang.String[] { "hi!"};
    com.google.javascript.jscomp.JSError var32 = com.google.javascript.jscomp.JSError.make("hi!", var3, var26, var31);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var34 = var33.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var35 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var35);
    var36.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var39 = null;
    com.google.javascript.rhino.jstype.JSType var41 = null;
    com.google.javascript.rhino.jstype.JSType[] var42 = new com.google.javascript.rhino.jstype.JSType[] { var41};
    com.google.javascript.rhino.jstype.FunctionType var43 = var36.createConstructorType(var39, false, var42);
    com.google.javascript.rhino.jstype.JSType var45 = var43.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var46 = var43.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var47 = var33.getNode((java.lang.Object)var46);
    java.util.List var48 = var33.getEdges();
    boolean var49 = var32.equals((java.lang.Object)var48);
    com.google.javascript.jscomp.AbstractCompiler var50 = null;
    com.google.javascript.jscomp.NodeTraversal.Callback var51 = null;
    com.google.javascript.jscomp.NodeTraversal var52 = new com.google.javascript.jscomp.NodeTraversal(var50, var51);
    java.lang.String var53 = var52.getSourceName();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var54 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var55 = var54.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var56 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var56);
    var57.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var60 = null;
    com.google.javascript.rhino.jstype.JSType var62 = null;
    com.google.javascript.rhino.jstype.JSType[] var63 = new com.google.javascript.rhino.jstype.JSType[] { var62};
    com.google.javascript.rhino.jstype.FunctionType var64 = var57.createConstructorType(var60, false, var63);
    com.google.javascript.rhino.jstype.JSType var66 = var64.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var67 = var64.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var68 = var54.getNode((java.lang.Object)var67);
    java.util.List var69 = var54.getEdges();
    var52.traverseRoots(var69);
    com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.block(var69);
    boolean var72 = var32.equals((java.lang.Object)var71);
    com.google.javascript.jscomp.DiagnosticType var73 = var32.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + ""+ "'", var53.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test177() {}
//   public void test177() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test177"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
//     com.google.javascript.rhino.Node var3 = var2.getCurrentNode();
//     java.lang.String var4 = var2.getSourceName();
//     com.google.javascript.rhino.Node var5 = var2.getEnclosingFunction();
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.trueNode();
//     var6.setLineno(10);
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var13 = var12.isNE();
//     int var14 = var12.getSideEffectFlags();
//     com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var17 = var16.isNE();
//     boolean var18 = var16.isWith();
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.getprop(var12, var16);
//     java.util.Set var20 = null;
//     var12.setDirectives(var20);
//     com.google.javascript.jscomp.CheckLevel var22 = null;
//     com.google.javascript.jscomp.CheckLevel var24 = null;
//     com.google.javascript.jscomp.DiagnosticType var26 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var24, "");
//     java.lang.String[] var27 = null;
//     com.google.javascript.jscomp.JSError var28 = com.google.javascript.jscomp.JSError.make("hi!", var12, var22, var26, var27);
//     com.google.javascript.jscomp.CheckLevel var33 = null;
//     com.google.javascript.jscomp.DiagnosticType var35 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var33, "");
//     java.lang.String[] var37 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var38 = com.google.javascript.jscomp.JSError.make("", 100, 0, var35, var37);
//     java.lang.String[] var40 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var41 = com.google.javascript.jscomp.JSError.make("hi!", var12, var35, var40);
//     com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var45 = var44.isNE();
//     int var46 = var44.getSideEffectFlags();
//     com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var49 = var48.isNE();
//     boolean var50 = var48.isWith();
//     com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.getprop(var44, var48);
//     java.util.Set var52 = null;
//     var44.setDirectives(var52);
//     com.google.javascript.jscomp.CheckLevel var54 = null;
//     com.google.javascript.jscomp.CheckLevel var56 = null;
//     com.google.javascript.jscomp.DiagnosticType var58 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var56, "");
//     java.lang.String[] var59 = null;
//     com.google.javascript.jscomp.JSError var60 = com.google.javascript.jscomp.JSError.make("hi!", var44, var54, var58, var59);
//     com.google.javascript.rhino.Node var64 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var65 = var64.isNE();
//     int var66 = var64.getSideEffectFlags();
//     com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var69 = var68.isNE();
//     boolean var70 = var68.isWith();
//     com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.getprop(var64, var68);
//     java.util.Set var72 = null;
//     var64.setDirectives(var72);
//     com.google.javascript.jscomp.CheckLevel var74 = null;
//     com.google.javascript.jscomp.CheckLevel var76 = null;
//     com.google.javascript.jscomp.DiagnosticType var78 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var76, "");
//     java.lang.String[] var79 = null;
//     com.google.javascript.jscomp.JSError var80 = com.google.javascript.jscomp.JSError.make("hi!", var64, var74, var78, var79);
//     com.google.javascript.jscomp.CheckLevel var85 = null;
//     com.google.javascript.jscomp.DiagnosticType var87 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var85, "");
//     java.lang.String[] var89 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var90 = com.google.javascript.jscomp.JSError.make("", 100, 0, var87, var89);
//     java.lang.String[] var92 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var93 = com.google.javascript.jscomp.JSError.make("hi!", var64, var87, var92);
//     com.google.javascript.jscomp.JSError var94 = com.google.javascript.jscomp.JSError.make(var58, var92);
//     com.google.javascript.jscomp.JSError var95 = var2.makeError(var6, var35, var92);
//     com.google.javascript.jscomp.JSModule var96 = var2.getModule();
// 
//   }

  public void test178() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test178"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var3 = var2.cloneNode();
    boolean var4 = var2.isDelProp();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var7 = var6.cloneNode();
    boolean var8 = var6.isDelProp();
    com.google.javascript.rhino.Node var9 = var2.clonePropsFrom(var6);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
    com.google.javascript.rhino.Node var15 = var14.getLastChild();
    com.google.javascript.rhino.Node var16 = var6.srcrefTree(var14);
    com.google.javascript.rhino.Node[] var17 = new com.google.javascript.rhino.Node[] { var14};
    com.google.javascript.rhino.Node var18 = new com.google.javascript.rhino.Node((-3), var17);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.script(var17);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test179() {}
//   public void test179() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test179"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var1);
//     double var3 = var0.getProgress();
//     var0.reportCodeChange();
//     com.google.javascript.rhino.head.ast.AstRoot var6 = var0.getOldParseTreeByName("LinkedGraph");
//     com.google.javascript.jscomp.NodeTraversal.Callback var7 = null;
//     com.google.javascript.jscomp.NodeTraversal var8 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var7);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var9 = var0.getTypeRegistry();
// 
//   }

  public void test180() {}
//   public void test180() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test180"); }
// 
// 
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var3 = var2.isNE();
//     int var4 = var2.getSideEffectFlags();
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var7 = var6.isNE();
//     boolean var8 = var6.isWith();
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.string("hi!");
//     var6.addChildToBack(var11);
//     com.google.javascript.rhino.Node var13 = var11.getLastSibling();
//     com.google.javascript.rhino.Node var14 = var11.removeFirstChild();
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
//     boolean var20 = var19.isQualifiedName();
//     var19.setType(1);
//     com.google.javascript.rhino.Node var23 = var11.clonePropsFrom(var19);
//     com.google.javascript.rhino.Node var24 = var23.cloneTree();
//     com.google.javascript.jscomp.CheckLevel var25 = null;
//     com.google.javascript.jscomp.DiagnosticType var26 = null;
//     java.lang.String[] var28 = new java.lang.String[] { "LABEL_NAME hi!"};
//     com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("STRING hi!\n", var23, var25, var26, var28);
// 
//   }

  public void test181() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test181"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    java.util.Set var10 = null;
    var2.setDirectives(var10);
    com.google.javascript.jscomp.CheckLevel var12 = null;
    com.google.javascript.jscomp.CheckLevel var14 = null;
    com.google.javascript.jscomp.DiagnosticType var16 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var14, "");
    java.lang.String[] var17 = null;
    com.google.javascript.jscomp.JSError var18 = com.google.javascript.jscomp.JSError.make("hi!", var2, var12, var16, var17);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.string("hi!");
    boolean var22 = var21.isNE();
    int var23 = var21.getSideEffectFlags();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.string("hi!");
    boolean var26 = var25.isNE();
    boolean var27 = var25.isWith();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.getprop(var21, var25);
    java.util.Set var29 = null;
    var21.setDirectives(var29);
    com.google.javascript.jscomp.CheckLevel var31 = null;
    com.google.javascript.jscomp.CheckLevel var33 = null;
    com.google.javascript.jscomp.DiagnosticType var35 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var33, "");
    java.lang.String[] var36 = null;
    com.google.javascript.jscomp.JSError var37 = com.google.javascript.jscomp.JSError.make("hi!", var21, var31, var35, var36);
    var21.addSuppression("");
    com.google.javascript.rhino.Node var40 = var2.useSourceInfoFromForTree(var21);
    boolean var41 = var21.isGetElem();
    boolean var42 = var21.isBreak();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.defaultCase(var21);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test182() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test182"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    boolean var12 = var5.isVar();
    com.google.javascript.rhino.InputId var13 = var5.getInputId();
    com.google.javascript.jscomp.ClosureCodingConvention var14 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
    var16.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.jstype.JSType var21 = null;
    com.google.javascript.rhino.jstype.JSType[] var22 = new com.google.javascript.rhino.jstype.JSType[] { var21};
    com.google.javascript.rhino.jstype.FunctionType var23 = var16.createConstructorType(var19, false, var22);
    boolean var24 = var23.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    var26.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var29 = null;
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.jstype.FunctionType var33 = var26.createConstructorType(var29, false, var32);
    com.google.javascript.rhino.jstype.JSType var35 = var33.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var36 = var33.getTypeOfThis();
    boolean var37 = var23.canCastTo((com.google.javascript.rhino.jstype.JSType)var33);
    com.google.javascript.rhino.ErrorReporter var38 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
    var39.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType var44 = null;
    com.google.javascript.rhino.jstype.JSType[] var45 = new com.google.javascript.rhino.jstype.JSType[] { var44};
    com.google.javascript.rhino.jstype.FunctionType var46 = var39.createConstructorType(var42, false, var45);
    com.google.javascript.rhino.jstype.JSType var48 = var46.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var49 = var46.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var50 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var50);
    var51.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var54 = null;
    com.google.javascript.rhino.jstype.JSType var56 = null;
    com.google.javascript.rhino.jstype.JSType[] var57 = new com.google.javascript.rhino.jstype.JSType[] { var56};
    com.google.javascript.rhino.jstype.FunctionType var58 = var51.createConstructorType(var54, false, var57);
    boolean var59 = var58.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var60 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var60);
    var61.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var64 = null;
    com.google.javascript.rhino.jstype.JSType var66 = null;
    com.google.javascript.rhino.jstype.JSType[] var67 = new com.google.javascript.rhino.jstype.JSType[] { var66};
    com.google.javascript.rhino.jstype.FunctionType var68 = var61.createConstructorType(var64, false, var67);
    com.google.javascript.rhino.jstype.JSType var70 = var68.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var71 = var68.getTypeOfThis();
    boolean var72 = var58.canCastTo((com.google.javascript.rhino.jstype.JSType)var68);
    var14.applySingletonGetter(var23, var46, (com.google.javascript.rhino.jstype.ObjectType)var68);
    com.google.javascript.rhino.Node var75 = com.google.javascript.rhino.IR.string("hi!");
    boolean var76 = var75.isNE();
    boolean var77 = var75.isWith();
    com.google.javascript.rhino.Node var78 = var75.getLastChild();
    boolean var79 = var14.isVarArgsParameter(var75);
    com.google.javascript.jscomp.ClosureCodingConvention var80 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var14);
    com.google.javascript.rhino.Node var82 = com.google.javascript.rhino.IR.number(0.0d);
    java.lang.String var86 = var82.toString(true, false, false);
    com.google.javascript.jscomp.CodingConvention.Bind var88 = var80.describeFunctionBind(var82, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var89 = com.google.javascript.rhino.IR.assign(var5, var82);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "NUMBER 0.0"+ "'", var86.equals("NUMBER 0.0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);

  }

  public void test183() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test183"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineProperties(true);
    var0.setRuntimeTypeCheckLogFunction("Object#Element");
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var6 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var7 = var6.getGraphvizEdges();
    java.lang.String var8 = var6.getName();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var9 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var10 = var9.getGraphvizNodes();
    com.google.javascript.jscomp.deps.SortedDependencies var11 = new com.google.javascript.jscomp.deps.SortedDependencies(var10);
    com.google.javascript.jscomp.graph.GraphNode var12 = var6.createNode((java.lang.Object)var10);
    var0.setReplaceStringsConfiguration("FALSE", var10);
    var0.setOptimizeArgumentsArray(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "LinkedGraph"+ "'", var8.equals("LinkedGraph"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test184() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test184"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineProperties(true);
    var0.setRuntimeTypeCheckLogFunction("Object#Element");
    var0.setAliasStringsBlacklist("LinkedGraph");
    var0.setTransformAMDToCJSModules(true);
    com.google.javascript.rhino.ErrorReporter var9 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var9);
    var10.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var13 = null;
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var15};
    com.google.javascript.rhino.jstype.FunctionType var17 = var10.createConstructorType(var13, false, var16);
    com.google.javascript.rhino.jstype.JSType var19 = var17.findPropertyType("hi!");
    com.google.javascript.rhino.JSDocInfo var20 = var17.getJSDocInfo();
    com.google.javascript.rhino.jstype.ObjectType var21 = var17.toObjectType();
    boolean var22 = var17.isArrayType();
    java.util.Set var23 = var17.getPropertyNames();
    var0.setReplaceStringsReservedStrings(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test185() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test185"); }


    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
    var4.setQuotedString();
    boolean var6 = var4.isLabelName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var8 = var4.getExistingIntProp(40);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test186() {}
//   public void test186() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test186"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var4 = null;
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
//     com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
//     com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
//     int var11 = var8.getPropertiesCount();
//     com.google.javascript.rhino.jstype.ObjectType var13 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var8, "");
//     java.util.List var14 = var8.getSubTypes();
//     com.google.javascript.rhino.jstype.FunctionType var15 = var8.cloneWithoutArrowType();
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     boolean var17 = var8.canTestForEqualityWith(var16);
// 
//   }

  public void test187() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test187"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineProperties(true);
    var0.setMarkNoSideEffectCalls(false);
    var0.setSaveDataStructures(false);
    var0.resetWarningsGuard();
    java.util.logging.Logger var8 = null;
    com.google.javascript.jscomp.LoggerErrorManager var9 = new com.google.javascript.jscomp.LoggerErrorManager(var8);
    int var10 = var9.getErrorCount();
    int var11 = var9.getErrorCount();
    com.google.javascript.jscomp.Compiler var12 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var9);
    var0.setErrorHandler((com.google.javascript.jscomp.ErrorHandler)var9);
    int var14 = var9.getErrorCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);

  }

  public void test188() {}
//   public void test188() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test188"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
//     com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var6);
//     double var8 = var5.getProgress();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var5);
//     com.google.javascript.jscomp.Scope var10 = var5.getTopScope();
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var11 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var12 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5, var11);
//     com.google.javascript.jscomp.CheckLevel var17 = null;
//     com.google.javascript.jscomp.DiagnosticType var19 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var17, "");
//     java.lang.String[] var21 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var22 = com.google.javascript.jscomp.JSError.make("", 100, 0, var19, var21);
//     int var23 = var22.getNodeSourceOffset();
//     java.lang.String var24 = var12.formatError(var22);
// 
//   }

  public void test189() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test189"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    var2.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
    com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
    boolean var10 = var9.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    var12.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
    com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
    boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    var37.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
    boolean var45 = var44.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    var47.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
    com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
    boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
    var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
    com.google.javascript.rhino.jstype.EnumType var60 = var32.toMaybeEnumType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);

  }

  public void test190() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test190"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
    var4.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var7 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7);
    var8.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var11 = null;
    com.google.javascript.rhino.jstype.JSType var13 = null;
    com.google.javascript.rhino.jstype.JSType[] var14 = new com.google.javascript.rhino.jstype.JSType[] { var13};
    com.google.javascript.rhino.jstype.FunctionType var15 = var8.createConstructorType(var11, false, var14);
    boolean var16 = var15.canBeCalled();
    boolean var17 = var15.isTemplatizedType();
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    var20.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    var24.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.rhino.jstype.JSType var29 = null;
    com.google.javascript.rhino.jstype.JSType[] var30 = new com.google.javascript.rhino.jstype.JSType[] { var29};
    com.google.javascript.rhino.jstype.FunctionType var31 = var24.createConstructorType(var27, false, var30);
    com.google.javascript.rhino.jstype.JSType var33 = var31.findPropertyType("hi!");
    int var34 = var31.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var36 = var20.createParametersWithVarArgs(var35);
    com.google.javascript.rhino.jstype.FunctionType var37 = var4.createFunctionType((com.google.javascript.rhino.jstype.JSType)var15, false, var35);
    com.google.javascript.rhino.Node var38 = var1.createParametersWithVarArgs(var35);
    boolean var39 = var38.isNot();
    boolean var40 = var38.isOnlyModifiesThisCall();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test191() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test191"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineProperties(true);
    var0.setIdGeneratorsMap("LABEL_NAME hi!");
    var0.setRemoveClosureAsserts(false);
    var0.setCollapseProperties(true);
    var0.setProcessCommonJSModules(true);
    byte[] var13 = new byte[] { (byte)(-1), (byte)100};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setInputVariableMapSerialized(var13);
      fail("Expected exception of type java.text.ParseException");
    } catch (java.text.ParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test192() {}
//   public void test192() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test192"); }
// 
// 
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var3 = var2.isNE();
//     int var4 = var2.getSideEffectFlags();
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var7 = var6.isNE();
//     boolean var8 = var6.isWith();
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
//     java.util.Set var10 = null;
//     var2.setDirectives(var10);
//     com.google.javascript.jscomp.CheckLevel var12 = null;
//     com.google.javascript.jscomp.CheckLevel var14 = null;
//     com.google.javascript.jscomp.DiagnosticType var16 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var14, "");
//     java.lang.String[] var17 = null;
//     com.google.javascript.jscomp.JSError var18 = com.google.javascript.jscomp.JSError.make("hi!", var2, var12, var16, var17);
//     com.google.javascript.jscomp.DiagnosticGroup var19 = com.google.javascript.jscomp.DiagnosticGroup.forType(var16);
//     com.google.javascript.jscomp.DiagnosticGroup[] var20 = new com.google.javascript.jscomp.DiagnosticGroup[] { var19};
//     com.google.javascript.jscomp.DiagnosticGroup var21 = new com.google.javascript.jscomp.DiagnosticGroup(var20);
//     com.google.javascript.jscomp.CheckLevel var26 = null;
//     com.google.javascript.jscomp.DiagnosticType var28 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var26, "");
//     java.lang.String[] var30 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var31 = com.google.javascript.jscomp.JSError.make("", 100, 0, var28, var30);
//     boolean var32 = var21.matches(var28);
//     com.google.javascript.jscomp.CheckLevel var33 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var34 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var21, var33);
//     com.google.javascript.jscomp.DiagnosticType var37 = com.google.javascript.jscomp.DiagnosticType.error("goog.exportSymbol", "goog.exportProperty");
//     com.google.javascript.jscomp.DiagnosticGroup var38 = com.google.javascript.jscomp.DiagnosticGroup.forType(var37);
//     com.google.javascript.jscomp.CheckLevel var43 = null;
//     com.google.javascript.jscomp.DiagnosticType var45 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var43, "");
//     java.lang.String[] var47 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var48 = com.google.javascript.jscomp.JSError.make("", 100, 0, var45, var47);
//     int var49 = var48.getNodeSourceOffset();
//     int var50 = var48.getCharno();
//     int var51 = var48.getLineNumber();
//     boolean var52 = var38.matches(var48);
//     boolean var53 = var34.disables(var38);
// 
//   }

  public void test193() {}
//   public void test193() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test193"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
//     com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var6);
//     double var8 = var5.getProgress();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var5);
//     com.google.javascript.jscomp.CompilerOptions var10 = null;
//     com.google.javascript.jscomp.DefaultPassConfig var11 = new com.google.javascript.jscomp.DefaultPassConfig(var10);
//     var5.setPassConfig((com.google.javascript.jscomp.PassConfig)var11);
//     boolean var13 = var5.isIdeMode();
// 
//   }

  public void test194() {}
//   public void test194() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test194"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var4);
//     java.util.logging.Logger var6 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var7 = new com.google.javascript.jscomp.LoggerErrorManager((com.google.javascript.jscomp.MessageFormatter)var5, var6);
//     java.util.logging.Logger var8 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var9 = new com.google.javascript.jscomp.LoggerErrorManager((com.google.javascript.jscomp.MessageFormatter)var5, var8);
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var14 = var13.isNE();
//     int var15 = var13.getSideEffectFlags();
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var18 = var17.isNE();
//     boolean var19 = var17.isWith();
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
//     java.util.Set var21 = null;
//     var13.setDirectives(var21);
//     com.google.javascript.jscomp.CheckLevel var23 = null;
//     com.google.javascript.jscomp.CheckLevel var25 = null;
//     com.google.javascript.jscomp.DiagnosticType var27 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var25, "");
//     java.lang.String[] var28 = null;
//     com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("hi!", var13, var23, var27, var28);
//     com.google.javascript.jscomp.CheckLevel var34 = null;
//     com.google.javascript.jscomp.DiagnosticType var36 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var34, "");
//     java.lang.String[] var38 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var39 = com.google.javascript.jscomp.JSError.make("", 100, 0, var36, var38);
//     java.lang.String[] var41 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var42 = com.google.javascript.jscomp.JSError.make("hi!", var13, var36, var41);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var43 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var44 = var43.getGraphvizNodes();
//     com.google.javascript.rhino.ErrorReporter var45 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
//     var46.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var49 = null;
//     com.google.javascript.rhino.jstype.JSType var51 = null;
//     com.google.javascript.rhino.jstype.JSType[] var52 = new com.google.javascript.rhino.jstype.JSType[] { var51};
//     com.google.javascript.rhino.jstype.FunctionType var53 = var46.createConstructorType(var49, false, var52);
//     com.google.javascript.rhino.jstype.JSType var55 = var53.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var56 = var53.getTypeOfThis();
//     com.google.javascript.jscomp.graph.GraphNode var57 = var43.getNode((java.lang.Object)var56);
//     java.util.List var58 = var43.getEdges();
//     boolean var59 = var42.equals((java.lang.Object)var58);
//     int var60 = var42.getCharno();
//     java.lang.String var61 = var5.formatError(var42);
// 
//   }

  public void test195() {}
//   public void test195() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test195"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.ErrorReporter var2 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
//     var3.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
//     com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
//     boolean var11 = var10.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var12 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
//     var13.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     com.google.javascript.rhino.jstype.JSType var18 = null;
//     com.google.javascript.rhino.jstype.JSType[] var19 = new com.google.javascript.rhino.jstype.JSType[] { var18};
//     com.google.javascript.rhino.jstype.FunctionType var20 = var13.createConstructorType(var16, false, var19);
//     com.google.javascript.rhino.jstype.JSType var22 = var20.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var23 = var20.getTypeOfThis();
//     boolean var24 = var10.canCastTo((com.google.javascript.rhino.jstype.JSType)var20);
//     com.google.javascript.rhino.ErrorReporter var25 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
//     var26.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var29 = null;
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
//     com.google.javascript.rhino.jstype.FunctionType var33 = var26.createConstructorType(var29, false, var32);
//     com.google.javascript.rhino.jstype.JSType var35 = var33.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var36 = var33.toMaybeFunctionType();
//     com.google.javascript.rhino.ErrorReporter var37 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
//     var38.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var41 = null;
//     com.google.javascript.rhino.jstype.JSType var43 = null;
//     com.google.javascript.rhino.jstype.JSType[] var44 = new com.google.javascript.rhino.jstype.JSType[] { var43};
//     com.google.javascript.rhino.jstype.FunctionType var45 = var38.createConstructorType(var41, false, var44);
//     boolean var46 = var45.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var47 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
//     var48.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var51 = null;
//     com.google.javascript.rhino.jstype.JSType var53 = null;
//     com.google.javascript.rhino.jstype.JSType[] var54 = new com.google.javascript.rhino.jstype.JSType[] { var53};
//     com.google.javascript.rhino.jstype.FunctionType var55 = var48.createConstructorType(var51, false, var54);
//     com.google.javascript.rhino.jstype.JSType var57 = var55.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var58 = var55.getTypeOfThis();
//     boolean var59 = var45.canCastTo((com.google.javascript.rhino.jstype.JSType)var55);
//     var1.applySingletonGetter(var10, var33, (com.google.javascript.rhino.jstype.ObjectType)var55);
//     com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var63 = var62.cloneNode();
//     boolean var64 = var62.isDelProp();
//     com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var67 = var66.cloneNode();
//     boolean var68 = var66.isDelProp();
//     com.google.javascript.rhino.Node var69 = var62.clonePropsFrom(var66);
//     com.google.javascript.rhino.JSDocInfo var70 = var66.getJSDocInfo();
//     com.google.javascript.jscomp.CodingConvention.Bind var72 = var1.describeFunctionBind(var66, true);
//     com.google.javascript.rhino.Node var74 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var75 = var74.isNE();
//     int var76 = var74.getSideEffectFlags();
//     com.google.javascript.rhino.Node var78 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var79 = var78.isNE();
//     boolean var80 = var78.isWith();
//     com.google.javascript.rhino.Node var81 = com.google.javascript.rhino.IR.getprop(var74, var78);
//     com.google.javascript.rhino.Node var83 = com.google.javascript.rhino.IR.string("hi!");
//     var78.addChildToBack(var83);
//     com.google.javascript.jscomp.CodingConvention.DelegateRelationship var85 = var1.getDelegateRelationship(var78);
//     java.util.Collection var86 = var1.getIndirectlyDeclaredProperties();
//     java.util.Iterator var87 = var0.getNeighborNodesIterator((java.lang.Object)var86);
// 
//   }

  public void test196() {}
//   public void test196() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test196"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var4 = null;
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
//     com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
//     com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
//     int var11 = var8.getPropertiesCount();
//     com.google.javascript.rhino.jstype.ObjectType var13 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var8, "");
//     boolean var14 = var8.isFunctionPrototypeType();
//     com.google.common.collect.ImmutableList var15 = var8.getTemplateTypes();
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     var8.matchConstraint(var16);
// 
//   }

  public void test197() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test197"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    java.lang.Iterable var3 = var1.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    boolean var13 = var12.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    var15.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
    com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
    com.google.javascript.rhino.jstype.FunctionType var23 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var12, var21);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    int var35 = var32.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var37 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var32, "");
    boolean var38 = var32.makesStructs();
    boolean var39 = var23.isSubtype((com.google.javascript.rhino.jstype.JSType)var32);
    com.google.javascript.rhino.jstype.TemplateType var40 = com.google.javascript.rhino.jstype.JSType.toMaybeTemplateType((com.google.javascript.rhino.jstype.JSType)var32);
    com.google.javascript.rhino.JSDocInfo var42 = null;
    var32.setPropertyJSDocInfo("Object#Element", var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);

  }

  public void test198() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test198"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
    int var15 = var12.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
    com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
    boolean var19 = var1.shouldTolerateUndefinedValues();
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    java.lang.Iterable var24 = var22.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    var26.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var29 = null;
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.jstype.FunctionType var33 = var26.createConstructorType(var29, false, var32);
    boolean var34 = var33.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var35 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var35);
    var36.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var39 = null;
    com.google.javascript.rhino.jstype.JSType var41 = null;
    com.google.javascript.rhino.jstype.JSType[] var42 = new com.google.javascript.rhino.jstype.JSType[] { var41};
    com.google.javascript.rhino.jstype.FunctionType var43 = var36.createConstructorType(var39, false, var42);
    com.google.javascript.rhino.jstype.FunctionType var44 = var22.createConstructorType((com.google.javascript.rhino.jstype.JSType)var33, var42);
    com.google.javascript.rhino.jstype.ObjectType var45 = var33.getPrototype();
    var1.unregisterPropertyOnType("LinkedGraph", (com.google.javascript.rhino.jstype.JSType)var33);
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    java.lang.Iterable var50 = var48.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    var52.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var55 = null;
    com.google.javascript.rhino.jstype.JSType var57 = null;
    com.google.javascript.rhino.jstype.JSType[] var58 = new com.google.javascript.rhino.jstype.JSType[] { var57};
    com.google.javascript.rhino.jstype.FunctionType var59 = var52.createConstructorType(var55, false, var58);
    boolean var60 = var59.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var61 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var61);
    var62.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var65 = null;
    com.google.javascript.rhino.jstype.JSType var67 = null;
    com.google.javascript.rhino.jstype.JSType[] var68 = new com.google.javascript.rhino.jstype.JSType[] { var67};
    com.google.javascript.rhino.jstype.FunctionType var69 = var62.createConstructorType(var65, false, var68);
    com.google.javascript.rhino.jstype.FunctionType var70 = var48.createConstructorType((com.google.javascript.rhino.jstype.JSType)var59, var68);
    boolean var71 = var59.isReturnTypeInferred();
    boolean var72 = var59.isNativeObjectType();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var73 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var74 = var73.getGraphvizNodes();
    com.google.javascript.rhino.jstype.FunctionType var75 = var1.createFunctionType((com.google.javascript.rhino.jstype.JSType)var59, var74);
    boolean var77 = var75.isPropertyTypeInferred("TRUE");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);

  }

  public void test199() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test199"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
    int var15 = var12.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
    com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
    var1.clearTemplateTypeNames();
    com.google.javascript.rhino.jstype.TemplateType var20 = var1.getObjectElementKey();
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var23 = new com.google.javascript.rhino.jstype.FunctionBuilder(var22);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    boolean var33 = var32.canBeCalled();
    com.google.javascript.rhino.jstype.FunctionBuilder var35 = var23.withReturnType((com.google.javascript.rhino.jstype.JSType)var32, true);
    boolean var36 = var32.isArrayType();
    com.google.javascript.rhino.jstype.JSType var38 = var32.getPropertyType("LABEL_NAME hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.overwriteDeclaredType("STRING hi!", var38);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test200() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test200"); }


    com.google.javascript.jscomp.SourceAst var0 = null;
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
    com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
    com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
    com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var6);
    double var8 = var5.getProgress();
    var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var5);
    com.google.javascript.jscomp.CompilerOptions var10 = null;
    com.google.javascript.jscomp.DefaultPassConfig var11 = new com.google.javascript.jscomp.DefaultPassConfig(var10);
    var5.setPassConfig((com.google.javascript.jscomp.PassConfig)var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.CompilerInput var14 = var5.newExternInput("");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);

  }

  public void test201() {}
//   public void test201() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test201"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setInlineProperties(true);
//     var0.setConvertToDottedProperties(false);
//     com.google.javascript.rhino.ErrorReporter var5 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
//     com.google.javascript.rhino.ErrorReporter var7 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7);
//     var8.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var11 = null;
//     com.google.javascript.rhino.jstype.JSType var13 = null;
//     com.google.javascript.rhino.jstype.JSType[] var14 = new com.google.javascript.rhino.jstype.JSType[] { var13};
//     com.google.javascript.rhino.jstype.FunctionType var15 = var8.createConstructorType(var11, false, var14);
//     boolean var16 = var15.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var17 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
//     var18.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var21 = null;
//     com.google.javascript.rhino.jstype.JSType var23 = null;
//     com.google.javascript.rhino.jstype.JSType[] var24 = new com.google.javascript.rhino.jstype.JSType[] { var23};
//     com.google.javascript.rhino.jstype.FunctionType var25 = var18.createConstructorType(var21, false, var24);
//     com.google.javascript.rhino.jstype.JSType var27 = var25.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var28 = var25.getTypeOfThis();
//     boolean var29 = var15.canCastTo((com.google.javascript.rhino.jstype.JSType)var25);
//     com.google.javascript.rhino.ErrorReporter var30 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
//     var31.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var34 = null;
//     com.google.javascript.rhino.jstype.JSType var36 = null;
//     com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var36};
//     com.google.javascript.rhino.jstype.FunctionType var38 = var31.createConstructorType(var34, false, var37);
//     boolean var39 = var38.isInterface();
//     com.google.javascript.rhino.jstype.JSType[] var40 = new com.google.javascript.rhino.jstype.JSType[] { var38};
//     com.google.javascript.rhino.jstype.FunctionType var41 = var6.createConstructorType((com.google.javascript.rhino.jstype.JSType)var15, var40);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var42 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var43 = var42.getGraphvizNodes();
//     var6.setTemplateTypeNames(var43);
//     com.google.javascript.jscomp.deps.SortedDependencies var45 = new com.google.javascript.jscomp.deps.SortedDependencies(var43);
//     com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.script(var43);
//     com.google.javascript.jscomp.ComposeWarningsGuard var47 = new com.google.javascript.jscomp.ComposeWarningsGuard(var43);
//     java.lang.String var48 = var47.toString();
//     com.google.javascript.jscomp.WarningsGuard[] var49 = new com.google.javascript.jscomp.WarningsGuard[] { var47};
//     com.google.javascript.jscomp.ComposeWarningsGuard var50 = new com.google.javascript.jscomp.ComposeWarningsGuard(var49);
//     var0.setWarningsGuard(var50);
//     com.google.javascript.jscomp.VariableRenamingPolicy var52 = null;
//     com.google.javascript.jscomp.PropertyRenamingPolicy var53 = null;
//     var0.setRenamingPolicy(var52, var53);
//     com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var55 = var0.getAliasTransformationHandler();
//     var0.setAssumeStrictThis(true);
//     var0.setTweakToNumberLiteral("", (-1));
//     var0.setInferTypes(true);
//     com.google.javascript.jscomp.CompilerOptions.Reach var63 = null;
//     var0.setRemoveUnusedVariables(var63);
// 
//   }

  public void test202() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test202"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    java.lang.Iterable var3 = var1.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    boolean var13 = var12.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    var15.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
    com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
    com.google.javascript.rhino.jstype.FunctionType var23 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var12, var21);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    var26.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    var30.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.jstype.JSType var35 = null;
    com.google.javascript.rhino.jstype.JSType[] var36 = new com.google.javascript.rhino.jstype.JSType[] { var35};
    com.google.javascript.rhino.jstype.FunctionType var37 = var30.createConstructorType(var33, false, var36);
    com.google.javascript.rhino.jstype.JSType var39 = var37.findPropertyType("hi!");
    int var40 = var37.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var41 = new com.google.javascript.rhino.jstype.JSType[] { var37};
    com.google.javascript.rhino.Node var42 = var26.createParametersWithVarArgs(var41);
    com.google.javascript.rhino.jstype.TemplateType var43 = var26.getObjectIndexKey();
    com.google.javascript.rhino.ErrorReporter var44 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var44);
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    var47.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
    boolean var55 = var54.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var56 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var56);
    var57.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var60 = null;
    com.google.javascript.rhino.jstype.JSType var62 = null;
    com.google.javascript.rhino.jstype.JSType[] var63 = new com.google.javascript.rhino.jstype.JSType[] { var62};
    com.google.javascript.rhino.jstype.FunctionType var64 = var57.createConstructorType(var60, false, var63);
    com.google.javascript.rhino.jstype.JSType var66 = var64.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var67 = var64.getTypeOfThis();
    boolean var68 = var54.canCastTo((com.google.javascript.rhino.jstype.JSType)var64);
    com.google.javascript.rhino.ErrorReporter var69 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var69);
    var70.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var73 = null;
    com.google.javascript.rhino.jstype.JSType var75 = null;
    com.google.javascript.rhino.jstype.JSType[] var76 = new com.google.javascript.rhino.jstype.JSType[] { var75};
    com.google.javascript.rhino.jstype.FunctionType var77 = var70.createConstructorType(var73, false, var76);
    boolean var78 = var77.isInterface();
    com.google.javascript.rhino.jstype.JSType[] var79 = new com.google.javascript.rhino.jstype.JSType[] { var77};
    com.google.javascript.rhino.jstype.FunctionType var80 = var45.createConstructorType((com.google.javascript.rhino.jstype.JSType)var54, var79);
    var80.setDict();
    boolean var82 = var80.hasReferenceName();
    com.google.javascript.rhino.jstype.JSType var83 = var26.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType)var80);
    boolean var85 = var80.hasProperty("LABEL_NAME hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.overwriteDeclaredType("hi!: ", (com.google.javascript.rhino.jstype.JSType)var80);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);

  }

  public void test203() {}
//   public void test203() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test203"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
//     int var15 = var12.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
//     com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
//     com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
//     var1.clearTemplateTypeNames();
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var20 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
//     var1.forwardDeclareType("goog.exportSymbol");
//     com.google.javascript.rhino.ErrorReporter var23 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
//     com.google.javascript.rhino.ErrorReporter var25 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
//     var26.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var29 = null;
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
//     com.google.javascript.rhino.jstype.FunctionType var33 = var26.createConstructorType(var29, false, var32);
//     boolean var34 = var33.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var35 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var35);
//     var36.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var39 = null;
//     com.google.javascript.rhino.jstype.JSType var41 = null;
//     com.google.javascript.rhino.jstype.JSType[] var42 = new com.google.javascript.rhino.jstype.JSType[] { var41};
//     com.google.javascript.rhino.jstype.FunctionType var43 = var36.createConstructorType(var39, false, var42);
//     com.google.javascript.rhino.jstype.JSType var45 = var43.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var46 = var43.getTypeOfThis();
//     boolean var47 = var33.canCastTo((com.google.javascript.rhino.jstype.JSType)var43);
//     com.google.javascript.rhino.ErrorReporter var48 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var48);
//     var49.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var52 = null;
//     com.google.javascript.rhino.jstype.JSType var54 = null;
//     com.google.javascript.rhino.jstype.JSType[] var55 = new com.google.javascript.rhino.jstype.JSType[] { var54};
//     com.google.javascript.rhino.jstype.FunctionType var56 = var49.createConstructorType(var52, false, var55);
//     boolean var57 = var56.isInterface();
//     com.google.javascript.rhino.jstype.JSType[] var58 = new com.google.javascript.rhino.jstype.JSType[] { var56};
//     com.google.javascript.rhino.jstype.FunctionType var59 = var24.createConstructorType((com.google.javascript.rhino.jstype.JSType)var33, var58);
//     var59.setDict();
//     com.google.javascript.rhino.jstype.JSType var61 = var1.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType)var59);
//     com.google.javascript.rhino.ErrorReporter var62 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var62);
//     com.google.javascript.rhino.ErrorReporter var64 = var63.getErrorReporter();
//     com.google.javascript.rhino.jstype.TemplateType var65 = var63.getObjectElementKey();
//     com.google.javascript.rhino.jstype.TemplateType var66 = var65.toMaybeTemplateType();
//     boolean var67 = var66.hasAnyTemplateTypesInternal();
//     boolean var69 = var66.isPropertyTypeDeclared("LABEL_NAME hi!");
//     var59.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var66);
// 
//   }

  public void test204() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test204"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var2 = var1.cloneNode();
    boolean var3 = var1.isDelProp();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var6 = var5.cloneNode();
    boolean var7 = var5.isDelProp();
    com.google.javascript.rhino.Node var8 = var1.clonePropsFrom(var5);
    boolean var9 = var1.isHook();
    boolean var10 = var1.isContinue();
    boolean var11 = var1.isAssignAdd();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.cast(var1);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test205() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test205"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.Node.newString("hi!: ");
    boolean var2 = var1.isSetterDef();
    com.google.javascript.rhino.Node var3 = var1.getLastSibling();
    com.google.javascript.rhino.Node var4 = var1.cloneNode();
    com.google.javascript.jscomp.AstValidator.ViolationHandler var5 = null;
    com.google.javascript.jscomp.AstValidator var6 = new com.google.javascript.jscomp.AstValidator(var5);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.string("hi!");
    boolean var9 = var8.isNE();
    int var10 = var8.getSideEffectFlags();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.string("hi!");
    boolean var13 = var12.isNE();
    boolean var14 = var12.isWith();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.getprop(var8, var12);
    var6.validateExpression(var8);
    var8.removeProp((-1));
    var8.setSourceEncodedPositionForTree(1);
    int var21 = var8.getType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.eq(var1, var8);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 40);

  }

  public void test206() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test206"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    java.lang.String var2 = var1.getExportPropertyFunction();
    boolean var4 = var1.isValidEnumKey("");
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    int var8 = var6.getSideEffectFlags();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    boolean var11 = var10.isNE();
    boolean var12 = var10.isWith();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.getprop(var6, var10);
    var10.removeProp(0);
    java.lang.String var16 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var10);
    java.util.Set var17 = null;
    var10.setDirectives(var17);
    java.lang.Iterable var19 = var10.siblings();
    boolean var20 = var1.isVarArgsParameter(var10);
    boolean var23 = var1.isExported("STRING hi!", true);
    boolean var25 = var1.isConstantKey("Node tree inequality:\nTree1:\nSTRING LinkedGraph\n\n\nTree2:\nSTRING hi!\n\n\nSubtree1: STRING LinkedGraph\n\n\nSubtree2: STRING hi!\n");
    boolean var27 = var1.isConstantKey("goog.exportProperty");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "goog.exportProperty"+ "'", var2.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test207() {}
//   public void test207() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test207"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var1);
//     double var3 = var0.getProgress();
//     var0.reportCodeChange();
//     com.google.javascript.rhino.head.ast.AstRoot var6 = var0.getOldParseTreeByName("LinkedGraph");
//     com.google.javascript.jscomp.NodeTraversal.Callback var7 = null;
//     com.google.javascript.jscomp.NodeTraversal var8 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var7);
//     com.google.javascript.jscomp.JSSourceFile var9 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var10 = new com.google.javascript.jscomp.JSSourceFile[] { var9};
//     com.google.javascript.jscomp.JSSourceFile var11 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var12 = new com.google.javascript.jscomp.JSSourceFile[] { var11};
//     com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
//     var13.setInlineProperties(true);
//     var13.setConvertToDottedProperties(false);
//     var13.setChainCalls(false);
//     var13.setCommonJSModulePathPrefix("2014/12/24 01:41");
//     var13.setCheckSuspiciousCode(true);
//     var13.setDefineToDoubleLiteral("TRUE", (-1.0d));
//     var0.init(var10, var12, var13);
// 
//   }

  public void test208() {}
//   public void test208() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test208"); }
// 
// 
//     java.io.InputStream var2 = null;
//     com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromInputStream("LABEL_NAME hi!", "TRUE", var2);
// 
//   }

  public void test209() {}
//   public void test209() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test209"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
//     com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var4 = var3.isNE();
//     int var5 = var3.getSideEffectFlags();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var8 = var7.isNE();
//     boolean var9 = var7.isWith();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
//     var10.setLineno(10);
//     var1.validateExpression(var10);
//     com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var17 = var16.isNE();
//     int var18 = var16.getSideEffectFlags();
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var21 = var20.isNE();
//     boolean var22 = var20.isWith();
//     com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.getprop(var16, var20);
//     java.util.Set var24 = null;
//     var16.setDirectives(var24);
//     com.google.javascript.jscomp.CheckLevel var26 = null;
//     com.google.javascript.jscomp.CheckLevel var28 = null;
//     com.google.javascript.jscomp.DiagnosticType var30 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var28, "");
//     java.lang.String[] var31 = null;
//     com.google.javascript.jscomp.JSError var32 = com.google.javascript.jscomp.JSError.make("hi!", var16, var26, var30, var31);
//     var16.addSuppression("");
//     com.google.javascript.rhino.jstype.JSType var35 = var16.getJSType();
//     com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var39 = var38.isNE();
//     int var40 = var38.getSideEffectFlags();
//     com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var43 = var42.isNE();
//     boolean var44 = var42.isWith();
//     com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.getprop(var38, var42);
//     java.util.Set var46 = null;
//     var38.setDirectives(var46);
//     com.google.javascript.jscomp.CheckLevel var48 = null;
//     com.google.javascript.jscomp.CheckLevel var50 = null;
//     com.google.javascript.jscomp.DiagnosticType var52 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var50, "");
//     java.lang.String[] var53 = null;
//     com.google.javascript.jscomp.JSError var54 = com.google.javascript.jscomp.JSError.make("hi!", var38, var48, var52, var53);
//     com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var58 = var57.isNE();
//     int var59 = var57.getSideEffectFlags();
//     com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var62 = var61.isNE();
//     boolean var63 = var61.isWith();
//     com.google.javascript.rhino.Node var64 = com.google.javascript.rhino.IR.getprop(var57, var61);
//     java.util.Set var65 = null;
//     var57.setDirectives(var65);
//     com.google.javascript.jscomp.CheckLevel var67 = null;
//     com.google.javascript.jscomp.CheckLevel var69 = null;
//     com.google.javascript.jscomp.DiagnosticType var71 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var69, "");
//     java.lang.String[] var72 = null;
//     com.google.javascript.jscomp.JSError var73 = com.google.javascript.jscomp.JSError.make("hi!", var57, var67, var71, var72);
//     var57.addSuppression("");
//     com.google.javascript.rhino.Node var76 = var38.useSourceInfoFromForTree(var57);
//     boolean var77 = var38.isStringKey();
//     int var78 = var38.getChildCount();
//     var1.process(var16, var38);
// 
//   }

  public void test210() {}
//   public void test210() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test210"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     java.util.Map var4 = var0.getInputsById();
// 
//   }

  public void test211() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test211"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineProperties(true);
    var0.setIdGeneratorsMap("LABEL_NAME hi!");
    var0.setNameReferenceGraphPath("goog.exportProperty");
    var0.setRecordFunctionInformation(true);

  }

  public void test212() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test212"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var2 = var1.cloneNode();
    boolean var3 = var1.isDelProp();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var6 = var5.cloneNode();
    boolean var7 = var5.isDelProp();
    com.google.javascript.rhino.Node var8 = var1.clonePropsFrom(var5);
    boolean var9 = var1.isHook();
    com.google.javascript.jscomp.ClosureCodingConvention var10 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    var12.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
    boolean var20 = var19.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    var22.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var25 = null;
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.rhino.jstype.JSType[] var28 = new com.google.javascript.rhino.jstype.JSType[] { var27};
    com.google.javascript.rhino.jstype.FunctionType var29 = var22.createConstructorType(var25, false, var28);
    com.google.javascript.rhino.jstype.JSType var31 = var29.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var32 = var29.getTypeOfThis();
    boolean var33 = var19.canCastTo((com.google.javascript.rhino.jstype.JSType)var29);
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    var35.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var38 = null;
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType[] var41 = new com.google.javascript.rhino.jstype.JSType[] { var40};
    com.google.javascript.rhino.jstype.FunctionType var42 = var35.createConstructorType(var38, false, var41);
    com.google.javascript.rhino.jstype.JSType var44 = var42.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var45 = var42.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    var47.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
    boolean var55 = var54.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var56 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var56);
    var57.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var60 = null;
    com.google.javascript.rhino.jstype.JSType var62 = null;
    com.google.javascript.rhino.jstype.JSType[] var63 = new com.google.javascript.rhino.jstype.JSType[] { var62};
    com.google.javascript.rhino.jstype.FunctionType var64 = var57.createConstructorType(var60, false, var63);
    com.google.javascript.rhino.jstype.JSType var66 = var64.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var67 = var64.getTypeOfThis();
    boolean var68 = var54.canCastTo((com.google.javascript.rhino.jstype.JSType)var64);
    var10.applySingletonGetter(var19, var42, (com.google.javascript.rhino.jstype.ObjectType)var64);
    java.lang.String var70 = var10.getExportPropertyFunction();
    com.google.javascript.rhino.Node var71 = null;
    boolean var72 = var10.isVarArgsParameter(var71);
    java.util.Collection var73 = var10.getIndirectlyDeclaredProperties();
    com.google.javascript.rhino.Node var75 = com.google.javascript.rhino.IR.string("hi!");
    boolean var76 = var75.isNE();
    int var77 = var75.getSideEffectFlags();
    com.google.javascript.rhino.Node var79 = com.google.javascript.rhino.IR.string("hi!");
    boolean var80 = var79.isNE();
    boolean var81 = var79.isWith();
    com.google.javascript.rhino.Node var82 = com.google.javascript.rhino.IR.getprop(var75, var79);
    var79.removeProp(0);
    java.lang.String var85 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var79);
    java.util.Set var86 = null;
    var79.setDirectives(var86);
    java.lang.Iterable var88 = var79.siblings();
    boolean var89 = var10.isPrototypeAlias(var79);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Map var90 = com.google.javascript.jscomp.NodeUtil.mapMainToClone(var1, var79);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "goog.exportProperty"+ "'", var70.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);

  }

  public void test213() {}
//   public void test213() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test213"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticType var3 = null;
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var7 = var6.cloneNode();
//     boolean var8 = var6.isDelProp();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var11 = var10.cloneNode();
//     boolean var12 = var10.isDelProp();
//     com.google.javascript.rhino.Node var13 = var6.clonePropsFrom(var10);
//     com.google.javascript.rhino.JSDocInfo var14 = var10.getJSDocInfo();
//     int var15 = var10.getLineno();
//     java.util.Set var16 = var10.getDirectives();
//     com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.Node.newString("hi!: ");
//     java.lang.String var19 = var18.getString();
//     com.google.javascript.rhino.Node var20 = var10.useSourceInfoIfMissingFrom(var18);
//     com.google.javascript.jscomp.CheckLevel var21 = null;
//     com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var26 = var25.isNE();
//     int var27 = var25.getSideEffectFlags();
//     com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var30 = var29.isNE();
//     boolean var31 = var29.isWith();
//     com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.getprop(var25, var29);
//     java.util.Set var33 = null;
//     var25.setDirectives(var33);
//     com.google.javascript.jscomp.CheckLevel var35 = null;
//     com.google.javascript.jscomp.CheckLevel var37 = null;
//     com.google.javascript.jscomp.DiagnosticType var39 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var37, "");
//     java.lang.String[] var40 = null;
//     com.google.javascript.jscomp.JSError var41 = com.google.javascript.jscomp.JSError.make("hi!", var25, var35, var39, var40);
//     com.google.javascript.jscomp.CheckLevel var46 = null;
//     com.google.javascript.jscomp.DiagnosticType var48 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var46, "");
//     java.lang.String[] var50 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var51 = com.google.javascript.jscomp.JSError.make("", 100, 0, var48, var50);
//     java.lang.String[] var53 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var54 = com.google.javascript.jscomp.JSError.make("hi!", var25, var48, var53);
//     java.lang.String var55 = var48.toString();
//     java.lang.String[] var57 = new java.lang.String[] { "TRUE"};
//     com.google.javascript.jscomp.JSError var58 = com.google.javascript.jscomp.JSError.make("InputId: hi!", var20, var21, var48, var57);
//     com.google.javascript.jscomp.JSError var59 = com.google.javascript.jscomp.JSError.make("LABEL_NAME hi! 10", 10, 10, var3, var57);
// 
//   }

  public void test214() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test214"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.Node.newString("hi!: ");
    java.lang.String var2 = var1.getString();
    com.google.javascript.jscomp.ClosureCodingConvention var3 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    boolean var13 = var12.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    var15.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
    com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
    com.google.javascript.rhino.jstype.JSType var24 = var22.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var25 = var22.getTypeOfThis();
    boolean var26 = var12.canCastTo((com.google.javascript.rhino.jstype.JSType)var22);
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    var28.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
    com.google.javascript.rhino.jstype.FunctionType var35 = var28.createConstructorType(var31, false, var34);
    com.google.javascript.rhino.jstype.JSType var37 = var35.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var38 = var35.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var39 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var39);
    var40.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.jstype.FunctionType var47 = var40.createConstructorType(var43, false, var46);
    boolean var48 = var47.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var49 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var49);
    var50.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var53 = null;
    com.google.javascript.rhino.jstype.JSType var55 = null;
    com.google.javascript.rhino.jstype.JSType[] var56 = new com.google.javascript.rhino.jstype.JSType[] { var55};
    com.google.javascript.rhino.jstype.FunctionType var57 = var50.createConstructorType(var53, false, var56);
    com.google.javascript.rhino.jstype.JSType var59 = var57.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var60 = var57.getTypeOfThis();
    boolean var61 = var47.canCastTo((com.google.javascript.rhino.jstype.JSType)var57);
    var3.applySingletonGetter(var12, var35, (com.google.javascript.rhino.jstype.ObjectType)var57);
    com.google.javascript.rhino.Node var64 = com.google.javascript.rhino.IR.string("hi!");
    boolean var65 = var64.isNE();
    int var66 = var64.getSideEffectFlags();
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.string("hi!");
    boolean var69 = var68.isNE();
    boolean var70 = var68.isWith();
    com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.getprop(var64, var68);
    com.google.javascript.rhino.Node var73 = com.google.javascript.rhino.IR.string("hi!");
    var68.addChildToBack(var73);
    com.google.javascript.rhino.Node var75 = var73.getLastSibling();
    boolean var76 = var75.isLocalResultCall();
    java.util.Map var77 = null;
    var3.checkForCallingConventionDefiningCalls(var75, var77);
    var75.setSourceFileForTesting("TRUE");
    var75.putIntProp(0, 0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var84 = com.google.javascript.rhino.IR.getprop(var1, var75);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!: "+ "'", var2.equals("hi!: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test215() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test215"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineProperties(true);
    var0.setConvertToDottedProperties(false);
    var0.setRuntimeTypeCheck(false);
    boolean var7 = var0.shouldColorizeErrorOutput();
    boolean var8 = var0.isRemoveUnusedClassProperties();
    var0.setInferTypes(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test216() {}
//   public void test216() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test216"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var4 = null;
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
//     com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
//     boolean var9 = var8.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var10 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
//     var11.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var14 = null;
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     com.google.javascript.rhino.jstype.JSType[] var17 = new com.google.javascript.rhino.jstype.JSType[] { var16};
//     com.google.javascript.rhino.jstype.FunctionType var18 = var11.createConstructorType(var14, false, var17);
//     com.google.javascript.rhino.jstype.JSType var20 = var18.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var21 = var18.getTypeOfThis();
//     boolean var22 = var8.canCastTo((com.google.javascript.rhino.jstype.JSType)var18);
//     boolean var23 = var18.isDateType();
//     boolean var24 = var18.isNullType();
//     boolean var25 = var18.hasCachedValues();
//     boolean var26 = var18.isOrdinaryFunction();
//     java.lang.String var27 = var18.toString();
// 
//   }

  public void test217() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test217"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    com.google.javascript.rhino.Node var12 = var10.getLastSibling();
    boolean var13 = var12.isArrayLit();
    com.google.javascript.rhino.Node var14 = var12.getParent();
    java.lang.String var15 = var12.toStringTree();
    com.google.javascript.rhino.JSDocInfo var16 = var12.getJSDocInfo();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "STRING hi!\n"+ "'", var15.equals("STRING hi!\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test218() {}
//   public void test218() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test218"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var1);
//     double var3 = var0.getProgress();
//     var0.reportCodeChange();
//     com.google.javascript.rhino.head.ast.AstRoot var6 = var0.getOldParseTreeByName("LinkedGraph");
//     com.google.javascript.jscomp.NodeTraversal.Callback var7 = null;
//     com.google.javascript.jscomp.NodeTraversal var8 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var7);
//     com.google.javascript.jscomp.JSError[] var9 = var0.getMessages();
// 
//   }

  public void test219() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test219"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionParamBuilder var1 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
    boolean var11 = var1.addRequiredParams(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    int var15 = var13.getSideEffectFlags();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    boolean var19 = var17.isWith();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.string("hi!");
    var17.addChildToBack(var22);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var24 = var22.getJsDocBuilderForNode();
    int var25 = var22.getCharno();
    java.lang.Object var27 = var22.getProp(10);
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.string("hi!");
    boolean var30 = var29.isNE();
    int var31 = var29.getSideEffectFlags();
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.string("hi!");
    boolean var34 = var33.isNE();
    boolean var35 = var33.isWith();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.getprop(var29, var33);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.string("hi!");
    var33.addChildToBack(var38);
    com.google.javascript.rhino.Node var40 = var22.srcrefTree(var38);
    com.google.javascript.rhino.Node var41 = var1.newParameterFromNode(var22);
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.string("hi!");
    boolean var44 = var43.isNE();
    int var45 = var43.getSideEffectFlags();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.string("hi!");
    boolean var48 = var47.isNE();
    boolean var49 = var47.isWith();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.getprop(var43, var47);
    var47.removeProp(0);
    java.lang.String var53 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var47);
    java.util.Set var54 = null;
    var47.setDirectives(var54);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var56 = var47.getJsDocBuilderForNode();
    com.google.javascript.rhino.Node var57 = var1.newOptionalParameterFromNode(var47);
    var57.setOptionalArg(false);
    com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.paramList();
    var60.setType(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.catchNode(var57, var60);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test220() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test220"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var1 = var0.getGraphvizEdges();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.string("hi!");
    boolean var5 = var4.isNE();
    int var6 = var4.getSideEffectFlags();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.string("hi!");
    boolean var9 = var8.isNE();
    boolean var10 = var8.isWith();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.getprop(var4, var8);
    var11.setLineno(10);
    boolean var14 = var2.hasNode((java.lang.Object)var11);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var15 = var0.createDirectedGraphNode((java.lang.Object)var2);
    var0.pushEdgeAnnotations();
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    var22.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var25 = null;
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.rhino.jstype.JSType[] var28 = new com.google.javascript.rhino.jstype.JSType[] { var27};
    com.google.javascript.rhino.jstype.FunctionType var29 = var22.createConstructorType(var25, false, var28);
    boolean var30 = var29.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var31 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var31);
    var32.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var35 = null;
    com.google.javascript.rhino.jstype.JSType var37 = null;
    com.google.javascript.rhino.jstype.JSType[] var38 = new com.google.javascript.rhino.jstype.JSType[] { var37};
    com.google.javascript.rhino.jstype.FunctionType var39 = var32.createConstructorType(var35, false, var38);
    com.google.javascript.rhino.jstype.JSType var41 = var39.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var42 = var39.getTypeOfThis();
    boolean var43 = var29.canCastTo((com.google.javascript.rhino.jstype.JSType)var39);
    com.google.javascript.rhino.ErrorReporter var44 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var44);
    var45.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var48 = null;
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType[] var51 = new com.google.javascript.rhino.jstype.JSType[] { var50};
    com.google.javascript.rhino.jstype.FunctionType var52 = var45.createConstructorType(var48, false, var51);
    boolean var53 = var52.isInterface();
    com.google.javascript.rhino.jstype.JSType[] var54 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var55 = var20.createConstructorType((com.google.javascript.rhino.jstype.JSType)var29, var54);
    com.google.javascript.rhino.Node var56 = var18.createOptionalParameters(var54);
    var56.setSourceEncodedPosition(100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var59 = var0.getInEdges((java.lang.Object)var56);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test221() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test221"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var2 = var1.cloneNode();
    boolean var3 = var1.isDelProp();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var6 = var5.cloneNode();
    boolean var7 = var5.isDelProp();
    com.google.javascript.rhino.Node var8 = var1.clonePropsFrom(var5);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
    com.google.javascript.rhino.Node var14 = var13.getLastChild();
    com.google.javascript.rhino.Node var15 = var5.srcrefTree(var13);
    boolean var16 = var13.isUnscopedQualifiedName();
    boolean var17 = var13.isContinue();
    boolean var18 = var13.isScript();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test222() {}
//   public void test222() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test222"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     double var2 = var1.getProgress();
//     boolean var3 = var1.isTypeCheckingEnabled();
// 
//   }

  public void test223() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test223"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    java.lang.Iterable var3 = var1.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    boolean var13 = var12.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    var15.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
    com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
    com.google.javascript.rhino.jstype.FunctionType var23 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var12, var21);
    boolean var24 = var12.isNominalType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test224() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test224"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.util.Set var9 = null;
    var1.setDirectives(var9);
    boolean var11 = var1.isNoSideEffectsCall();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.string("hi!");
    boolean var15 = var14.isNE();
    int var16 = var14.getSideEffectFlags();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.string("hi!");
    boolean var19 = var18.isNE();
    boolean var20 = var18.isWith();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.getprop(var14, var18);
    java.util.Set var22 = null;
    var14.setDirectives(var22);
    com.google.javascript.jscomp.CheckLevel var24 = null;
    com.google.javascript.jscomp.CheckLevel var26 = null;
    com.google.javascript.jscomp.DiagnosticType var28 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var26, "");
    java.lang.String[] var29 = null;
    com.google.javascript.jscomp.JSError var30 = com.google.javascript.jscomp.JSError.make("hi!", var14, var24, var28, var29);
    var14.addSuppression("");
    boolean var33 = var1.isEquivalentToTyped(var14);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.string("hi!");
    boolean var36 = var35.isNE();
    int var37 = var35.getSideEffectFlags();
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.string("hi!");
    boolean var40 = var39.isNE();
    boolean var41 = var39.isWith();
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.getprop(var35, var39);
    var39.removeProp(0);
    java.lang.String var45 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var39);
    boolean var46 = var39.isDec();
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.string("hi!");
    boolean var49 = var48.isNE();
    int var50 = var48.getSideEffectFlags();
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.string("hi!");
    boolean var53 = var52.isNE();
    boolean var54 = var52.isWith();
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.getprop(var48, var52);
    com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.IR.string("hi!");
    var52.addChildToBack(var57);
    boolean var59 = var52.isVar();
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.string("hi!");
    boolean var62 = var61.isNE();
    int var63 = var61.getSideEffectFlags();
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.string("hi!");
    boolean var66 = var65.isNE();
    boolean var67 = var65.isWith();
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.getprop(var61, var65);
    com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.IR.string("hi!");
    var65.addChildToBack(var70);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var72 = var70.getJsDocBuilderForNode();
    int var73 = var70.getCharno();
    boolean var74 = var52.isEquivalentTo(var70);
    com.google.javascript.rhino.jstype.JSType var75 = var52.getJSType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var76 = com.google.javascript.rhino.IR.function(var14, var39, var52);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);

  }

  public void test225() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test225"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionParamBuilder var1 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
    boolean var11 = var1.addRequiredParams(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    int var15 = var13.getSideEffectFlags();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    boolean var19 = var17.isWith();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.string("hi!");
    var17.addChildToBack(var22);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var24 = var22.getJsDocBuilderForNode();
    int var25 = var22.getCharno();
    java.lang.Object var27 = var22.getProp(10);
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.string("hi!");
    boolean var30 = var29.isNE();
    int var31 = var29.getSideEffectFlags();
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.string("hi!");
    boolean var34 = var33.isNE();
    boolean var35 = var33.isWith();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.getprop(var29, var33);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.string("hi!");
    var33.addChildToBack(var38);
    com.google.javascript.rhino.Node var40 = var22.srcrefTree(var38);
    com.google.javascript.rhino.Node var41 = var1.newParameterFromNode(var22);
    com.google.javascript.rhino.Node var42 = var1.build();
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.number((-1.0d));
    var42.addChildrenToBack(var44);
    boolean var46 = var44.isAssignAdd();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.neg(var44);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test226() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test226"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    var2.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
    com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
    boolean var10 = var9.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    var12.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
    com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
    boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    var37.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
    boolean var45 = var44.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    var47.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
    com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
    boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
    var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
    java.lang.String var60 = var0.getExportPropertyFunction();
    com.google.javascript.jscomp.GoogleCodingConvention var61 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    java.lang.String var62 = var61.getExportSymbolFunction();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "goog.exportProperty"+ "'", var60.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "goog.exportSymbol"+ "'", var62.equals("goog.exportSymbol"));

  }

  public void test227() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test227"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineProperties(true);
    var0.setIdGeneratorsMap("LABEL_NAME hi!");
    var0.setRemoveClosureAsserts(false);
    var0.setProcessObjectPropertyString(true);
    var0.setReserveRawExports(false);
    var0.setCrossModuleMethodMotion(true);

  }

  public void test228() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test228"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    com.google.javascript.rhino.Node var3 = var1.cloneNode();
    java.nio.charset.Charset var5 = null;
    com.google.javascript.jscomp.SourceFile var6 = com.google.javascript.jscomp.SourceFile.fromFile("goog.global", var5);
    var6.clearCachedSource();
    var1.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var6);
    com.google.javascript.jscomp.JsAst var9 = new com.google.javascript.jscomp.JsAst(var6);
    java.nio.charset.Charset var11 = null;
    com.google.javascript.jscomp.SourceFile var12 = com.google.javascript.jscomp.SourceFile.fromFile("LABEL_NAME hi! 10", var11);
    java.lang.String var13 = var12.getName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var9.setSourceFile(var12);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "LABEL_NAME hi! 10"+ "'", var13.equals("LABEL_NAME hi! 10"));

  }

  public void test229() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test229"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var1 = var0.getGraphvizEdges();
    java.lang.String var2 = var0.getName();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var4 = var3.getGraphvizNodes();
    var3.pushEdgeAnnotations();
    var3.clearNodeAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var7 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.string("hi!");
    boolean var10 = var9.isNE();
    int var11 = var9.getSideEffectFlags();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    boolean var15 = var13.isWith();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.getprop(var9, var13);
    var16.setLineno(10);
    boolean var19 = var7.hasNode((java.lang.Object)var16);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.DependencyOptions var21 = new com.google.javascript.jscomp.DependencyOptions();
    com.google.javascript.jscomp.DependencyOptions var23 = var21.setDependencySorting(false);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var24 = var20.createDirectedGraphNode((java.lang.Object)var23);
    java.util.List var25 = var7.getNeighborNodes(var24);
    java.util.List var26 = var3.getDirectedPredNodes(var24);
    java.util.List var27 = var0.getDirectedSuccNodes(var24);
    java.lang.Object var28 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var29 = var0.getDirectedPredNodes(var28);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "LinkedGraph"+ "'", var2.equals("LinkedGraph"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test230() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test230"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    java.lang.String var2 = var1.getExportPropertyFunction();
    boolean var4 = var1.isValidEnumKey("");
    com.google.javascript.jscomp.AstValidator.ViolationHandler var5 = null;
    com.google.javascript.jscomp.AstValidator var6 = new com.google.javascript.jscomp.AstValidator(var5);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.string("hi!");
    boolean var9 = var8.isNE();
    int var10 = var8.getSideEffectFlags();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.string("hi!");
    boolean var13 = var12.isNE();
    boolean var14 = var12.isWith();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.getprop(var8, var12);
    var6.validateExpression(var8);
    var8.removeProp((-1));
    java.lang.Iterable var19 = var8.siblings();
    boolean var20 = var8.isName();
    boolean var21 = var1.isVarArgsParameter(var8);
    com.google.javascript.rhino.Node var25 = new com.google.javascript.rhino.Node(1, 10, 1);
    com.google.javascript.rhino.Node var26 = var8.useSourceInfoIfMissingFrom(var25);
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.string("hi!");
    boolean var29 = var28.isNE();
    int var30 = var28.getSideEffectFlags();
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.string("hi!");
    boolean var33 = var32.isNE();
    boolean var34 = var32.isWith();
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.getprop(var28, var32);
    java.util.Set var36 = null;
    var28.setDirectives(var36);
    int var38 = var28.getChildCount();
    com.google.javascript.rhino.Node var39 = var28.cloneTree();
    boolean var40 = var28.isDebugger();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var25.addChildToBack(var28);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "goog.exportProperty"+ "'", var2.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test231() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test231"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var2 = var1.cloneNode();
    boolean var3 = var1.isDelProp();
    int var4 = var1.getSideEffectFlags();
    var1.setQuotedString();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.block();
    com.google.javascript.rhino.Node var7 = var1.useSourceInfoFrom(var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var8 = var6.getDouble();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test232() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test232"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    var2.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
    com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
    boolean var10 = var9.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    var12.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
    com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
    boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    var37.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
    boolean var45 = var44.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    var47.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
    com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
    boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
    var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var62 = var61.cloneNode();
    boolean var63 = var61.isDelProp();
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var66 = var65.cloneNode();
    boolean var67 = var65.isDelProp();
    com.google.javascript.rhino.Node var68 = var61.clonePropsFrom(var65);
    com.google.javascript.rhino.JSDocInfo var69 = var65.getJSDocInfo();
    com.google.javascript.jscomp.CodingConvention.Bind var71 = var0.describeFunctionBind(var65, true);
    com.google.javascript.rhino.ErrorReporter var72 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var73 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var72);
    var73.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var76 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var76);
    var77.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var80 = null;
    com.google.javascript.rhino.jstype.JSType var82 = null;
    com.google.javascript.rhino.jstype.JSType[] var83 = new com.google.javascript.rhino.jstype.JSType[] { var82};
    com.google.javascript.rhino.jstype.FunctionType var84 = var77.createConstructorType(var80, false, var83);
    com.google.javascript.rhino.jstype.JSType var86 = var84.findPropertyType("hi!");
    int var87 = var84.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var88 = new com.google.javascript.rhino.jstype.JSType[] { var84};
    com.google.javascript.rhino.Node var89 = var73.createParametersWithVarArgs(var88);
    com.google.javascript.rhino.Node var90 = var65.useSourceInfoFrom(var89);
    com.google.javascript.rhino.Node var92 = com.google.javascript.rhino.IR.number(0.0d);
    java.lang.String var96 = var92.toString(true, false, false);
    int var97 = var89.getIndexOfChild(var92);
    var92.setIsSyntheticBlock(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "NUMBER 0.0"+ "'", var96.equals("NUMBER 0.0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == (-1));

  }

  public void test233() {}
//   public void test233() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test233"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     double var2 = var1.getProgress();
//     var1.rebuildInputsFromModules();
// 
//   }

  public void test234() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test234"); }


    com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
    com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
    boolean var4 = var3.isNE();
    int var5 = var3.getSideEffectFlags();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
    boolean var8 = var7.isNE();
    boolean var9 = var7.isWith();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
    var1.validateExpression(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.block(var3);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test235() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test235"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineProperties(true);
    java.util.Set var3 = null;
    var0.setAliasableStrings(var3);
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    var6.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var9 = null;
    com.google.javascript.rhino.jstype.JSType var11 = null;
    com.google.javascript.rhino.jstype.JSType[] var12 = new com.google.javascript.rhino.jstype.JSType[] { var11};
    com.google.javascript.rhino.jstype.FunctionType var13 = var6.createConstructorType(var9, false, var12);
    com.google.javascript.rhino.jstype.JSType var15 = var13.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var16 = var13.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    var18.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var21 = null;
    com.google.javascript.rhino.jstype.JSType var23 = null;
    com.google.javascript.rhino.jstype.JSType[] var24 = new com.google.javascript.rhino.jstype.JSType[] { var23};
    com.google.javascript.rhino.jstype.FunctionType var25 = var18.createConstructorType(var21, false, var24);
    boolean var26 = var25.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    var28.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
    com.google.javascript.rhino.jstype.FunctionType var35 = var28.createConstructorType(var31, false, var34);
    com.google.javascript.rhino.jstype.JSType var37 = var35.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var38 = var35.getTypeOfThis();
    boolean var39 = var25.canCastTo((com.google.javascript.rhino.jstype.JSType)var35);
    boolean var40 = var13.hasEqualCallType(var35);
    java.lang.Iterable var41 = var35.getAllExtendedInterfaces();
    java.util.Set var42 = var35.getOwnPropertyNames();
    var0.setReplaceStringsReservedStrings(var42);
    com.google.common.collect.Multimap var44 = null;
    var0.setCustomPasses(var44);
    byte[] var49 = new byte[] { (byte)10, (byte)1, (byte)10};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setInputVariableMapSerialized(var49);
      fail("Expected exception of type java.text.ParseException");
    } catch (java.text.ParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test236() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test236"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var12 = var10.getJsDocBuilderForNode();
    int var13 = var10.getCharno();
    java.lang.Object var15 = var10.getProp(10);
    com.google.javascript.rhino.Node var16 = var10.getFirstChild();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var19 = var18.cloneNode();
    boolean var20 = var18.isDelProp();
    boolean var21 = var18.isDefaultCase();
    boolean var22 = var18.isNE();
    boolean var23 = var18.isString();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.string("hi!");
    boolean var26 = var25.isNE();
    int var27 = var25.getSideEffectFlags();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.string("hi!");
    boolean var30 = var29.isNE();
    boolean var31 = var29.isWith();
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.getprop(var25, var29);
    var29.removeProp(0);
    java.lang.String var35 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var29);
    java.util.Set var36 = null;
    var29.setDirectives(var36);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var38 = var29.getJsDocBuilderForNode();
    boolean var39 = var29.isWith();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var10.addChildrenAfter(var18, var29);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test237() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test237"); }


    java.nio.charset.Charset var1 = null;
    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromFile("TRUE", var1);
    java.lang.String var3 = var2.getOriginalPath();
    com.google.javascript.jscomp.JsAst var4 = new com.google.javascript.jscomp.JsAst(var2);
    com.google.javascript.jscomp.SourceFile var6 = com.google.javascript.jscomp.SourceFile.fromFile("goog.exportProperty");
    com.google.javascript.jscomp.CompilerInput var8 = new com.google.javascript.jscomp.CompilerInput(var6, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var4.setSourceFile(var6);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "TRUE"+ "'", var3.equals("TRUE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test238() {}
//   public void test238() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test238"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setInlineProperties(true);
//     var0.setCommonJSModulePathPrefix("TRUE");
//     var0.setSaveDataStructures(false);
//     var0.setAliasAllStrings(true);
//     com.google.javascript.jscomp.CompilerOptions.Reach var9 = null;
//     var0.setRemoveUnusedVariables(var9);
// 
//   }

  public void test239() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test239"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("goog.exportProperty");
    java.lang.String var2 = var1.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var3 = var1.getCode();
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "goog.exportProperty"+ "'", var2.equals("goog.exportProperty"));

  }

  public void test240() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test240"); }


    com.google.javascript.jscomp.AstValidator var0 = new com.google.javascript.jscomp.AstValidator();
    com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.jscomp.GoogleCodingConvention var2 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var1);
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    int var7 = var5.getSideEffectFlags();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.string("hi!");
    boolean var10 = var9.isNE();
    boolean var11 = var9.isWith();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.getprop(var5, var9);
    java.util.Set var13 = null;
    var5.setDirectives(var13);
    int var15 = var5.getChildCount();
    com.google.javascript.rhino.Node var16 = var5.cloneTree();
    com.google.javascript.rhino.JSDocInfo var17 = null;
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNodeDeclaration((com.google.javascript.jscomp.CodingConvention)var2, "hi!: ", var16, var17);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.string("hi!");
    boolean var21 = var20.isNE();
    int var22 = var20.getSideEffectFlags();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.string("hi!");
    boolean var25 = var24.isNE();
    boolean var26 = var24.isWith();
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.getprop(var20, var24);
    var24.removeProp(0);
    boolean var30 = var24.isVoid();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.process(var16, var24);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test241() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test241"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
    boolean var11 = var10.canBeCalled();
    com.google.javascript.rhino.jstype.FunctionBuilder var13 = var1.withReturnType((com.google.javascript.rhino.jstype.JSType)var10, true);
    com.google.javascript.jscomp.ClosureCodingConvention var14 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.jscomp.GoogleCodingConvention var15 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var14);
    java.lang.String var16 = var15.getExportPropertyFunction();
    boolean var18 = var15.isValidEnumKey("");
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.string("hi!");
    boolean var21 = var20.isNE();
    int var22 = var20.getSideEffectFlags();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.string("hi!");
    boolean var25 = var24.isNE();
    boolean var26 = var24.isWith();
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.getprop(var20, var24);
    var24.removeProp(0);
    java.lang.String var30 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var24);
    java.util.Set var31 = null;
    var24.setDirectives(var31);
    java.lang.Iterable var33 = var24.siblings();
    boolean var34 = var15.isVarArgsParameter(var24);
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.string("hi!");
    boolean var38 = var37.isNE();
    int var39 = var37.getSideEffectFlags();
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.string("hi!");
    boolean var42 = var41.isNE();
    boolean var43 = var41.isWith();
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.getprop(var37, var41);
    java.util.Set var45 = null;
    var37.setDirectives(var45);
    com.google.javascript.jscomp.CheckLevel var47 = null;
    com.google.javascript.jscomp.CheckLevel var49 = null;
    com.google.javascript.jscomp.DiagnosticType var51 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var49, "");
    java.lang.String[] var52 = null;
    com.google.javascript.jscomp.JSError var53 = com.google.javascript.jscomp.JSError.make("hi!", var37, var47, var51, var52);
    com.google.javascript.rhino.Node var56 = com.google.javascript.rhino.IR.string("hi!");
    boolean var57 = var56.isNE();
    int var58 = var56.getSideEffectFlags();
    com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.string("hi!");
    boolean var61 = var60.isNE();
    boolean var62 = var60.isWith();
    com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.getprop(var56, var60);
    java.util.Set var64 = null;
    var56.setDirectives(var64);
    com.google.javascript.jscomp.CheckLevel var66 = null;
    com.google.javascript.jscomp.CheckLevel var68 = null;
    com.google.javascript.jscomp.DiagnosticType var70 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var68, "");
    java.lang.String[] var71 = null;
    com.google.javascript.jscomp.JSError var72 = com.google.javascript.jscomp.JSError.make("hi!", var56, var66, var70, var71);
    var56.addSuppression("");
    com.google.javascript.rhino.Node var75 = var37.useSourceInfoFromForTree(var56);
    boolean var76 = var56.isGetElem();
    com.google.javascript.rhino.InputId var77 = var56.getInputId();
    com.google.javascript.rhino.Node var79 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var80 = var79.cloneNode();
    java.lang.String var81 = var15.extractClassNameIfProvide(var56, var80);
    com.google.javascript.rhino.Node var83 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var84 = var83.cloneNode();
    boolean var85 = var83.isDelProp();
    com.google.javascript.rhino.Node var87 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var88 = var87.cloneNode();
    boolean var89 = var87.isDelProp();
    com.google.javascript.rhino.Node var90 = var83.clonePropsFrom(var87);
    com.google.javascript.rhino.Node var95 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
    com.google.javascript.rhino.Node var96 = var95.getLastChild();
    com.google.javascript.rhino.Node var97 = var87.srcrefTree(var95);
    com.google.javascript.rhino.Node var98 = var80.useSourceInfoIfMissingFrom(var87);
    com.google.javascript.rhino.jstype.FunctionBuilder var99 = var13.withParamsNode(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "goog.exportProperty"+ "'", var16.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test242() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test242"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineProperties(true);
    var0.setConvertToDottedProperties(false);
    var0.setChainCalls(false);
    var0.setCommonJSModulePathPrefix("2014/12/24 01:41");
    var0.setCheckSuspiciousCode(true);
    var0.setDebugFunctionSideEffectsPath("hi!: ");
    var0.setGatherCssNames(true);
    var0.setCheckSymbols(false);

  }

  public void test243() {}
//   public void test243() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test243"); }
// 
// 
//     com.google.javascript.jscomp.DependencyOptions var0 = new com.google.javascript.jscomp.DependencyOptions();
//     com.google.javascript.rhino.ErrorReporter var1 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
//     java.lang.Iterable var4 = var2.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var5 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
//     var6.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var9 = null;
//     com.google.javascript.rhino.jstype.JSType var11 = null;
//     com.google.javascript.rhino.jstype.JSType[] var12 = new com.google.javascript.rhino.jstype.JSType[] { var11};
//     com.google.javascript.rhino.jstype.FunctionType var13 = var6.createConstructorType(var9, false, var12);
//     boolean var14 = var13.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var15 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
//     var16.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var19 = null;
//     com.google.javascript.rhino.jstype.JSType var21 = null;
//     com.google.javascript.rhino.jstype.JSType[] var22 = new com.google.javascript.rhino.jstype.JSType[] { var21};
//     com.google.javascript.rhino.jstype.FunctionType var23 = var16.createConstructorType(var19, false, var22);
//     com.google.javascript.rhino.jstype.FunctionType var24 = var2.createConstructorType((com.google.javascript.rhino.jstype.JSType)var13, var22);
//     com.google.javascript.rhino.ErrorReporter var25 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
//     java.lang.Iterable var28 = var26.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var29 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
//     var30.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var33 = null;
//     com.google.javascript.rhino.jstype.JSType var35 = null;
//     com.google.javascript.rhino.jstype.JSType[] var36 = new com.google.javascript.rhino.jstype.JSType[] { var35};
//     com.google.javascript.rhino.jstype.FunctionType var37 = var30.createConstructorType(var33, false, var36);
//     boolean var38 = var37.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var39 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var39);
//     var40.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var43 = null;
//     com.google.javascript.rhino.jstype.JSType var45 = null;
//     com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
//     com.google.javascript.rhino.jstype.FunctionType var47 = var40.createConstructorType(var43, false, var46);
//     com.google.javascript.rhino.jstype.FunctionType var48 = var26.createConstructorType((com.google.javascript.rhino.jstype.JSType)var37, var46);
//     boolean var49 = var37.isReturnTypeInferred();
//     boolean var50 = var37.isTemplatizedType();
//     com.google.javascript.rhino.ErrorReporter var51 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
//     com.google.javascript.rhino.ErrorReporter var53 = var52.getErrorReporter();
//     com.google.javascript.rhino.jstype.TemplateType var54 = var52.getObjectElementKey();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var55 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var56 = var55.getGraphvizNodes();
//     com.google.javascript.rhino.ErrorReporter var57 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var57);
//     var58.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var61 = null;
//     com.google.javascript.rhino.jstype.JSType var63 = null;
//     com.google.javascript.rhino.jstype.JSType[] var64 = new com.google.javascript.rhino.jstype.JSType[] { var63};
//     com.google.javascript.rhino.jstype.FunctionType var65 = var58.createConstructorType(var61, false, var64);
//     com.google.javascript.rhino.jstype.JSType var67 = var65.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var68 = var65.getTypeOfThis();
//     com.google.javascript.jscomp.graph.GraphNode var69 = var55.getNode((java.lang.Object)var68);
//     java.util.List var70 = var55.getEdges();
//     com.google.javascript.rhino.jstype.JSType var71 = var2.createFunctionType((com.google.javascript.rhino.jstype.ObjectType)var37, (com.google.javascript.rhino.jstype.JSType)var54, var70);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var72 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var73 = var72.getGraphvizNodes();
//     var37.setImplementedInterfaces(var73);
//     com.google.javascript.jscomp.DependencyOptions var75 = var0.setEntryPoints((java.util.Collection)var73);
//     com.google.javascript.jscomp.JSModuleGraph var76 = new com.google.javascript.jscomp.JSModuleGraph(var73);
//     com.google.javascript.jscomp.JSModule var77 = null;
//     com.google.javascript.jscomp.JSModule var78 = null;
//     boolean var79 = var76.dependsOn(var77, var78);
// 
//   }

  public void test244() {}
//   public void test244() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test244"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
//     com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var6);
//     double var8 = var5.getProgress();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var5);
//     com.google.javascript.jscomp.Scope var10 = var5.getTopScope();
//     com.google.javascript.rhino.Node var11 = var5.getRoot();
//     int var12 = var5.getWarningCount();
// 
//   }

  public void test245() {}
//   public void test245() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test245"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     com.google.javascript.jscomp.NodeTraversal.FunctionCallback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseChangedFunctions((com.google.javascript.jscomp.AbstractCompiler)var0, var4);
// 
//   }

  public void test246() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test246"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var1 = var0.getGraphvizEdges();
    java.lang.String var2 = var0.getName();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var4 = var3.getGraphvizNodes();
    var3.pushEdgeAnnotations();
    var3.clearNodeAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var7 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.string("hi!");
    boolean var10 = var9.isNE();
    int var11 = var9.getSideEffectFlags();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    boolean var15 = var13.isWith();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.getprop(var9, var13);
    var16.setLineno(10);
    boolean var19 = var7.hasNode((java.lang.Object)var16);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.DependencyOptions var21 = new com.google.javascript.jscomp.DependencyOptions();
    com.google.javascript.jscomp.DependencyOptions var23 = var21.setDependencySorting(false);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var24 = var20.createDirectedGraphNode((java.lang.Object)var23);
    java.util.List var25 = var7.getNeighborNodes(var24);
    java.util.List var26 = var3.getDirectedPredNodes(var24);
    java.util.List var27 = var0.getDirectedSuccNodes(var24);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    var30.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.jstype.JSType var35 = null;
    com.google.javascript.rhino.jstype.JSType[] var36 = new com.google.javascript.rhino.jstype.JSType[] { var35};
    com.google.javascript.rhino.jstype.FunctionType var37 = var30.createConstructorType(var33, false, var36);
    com.google.javascript.rhino.jstype.JSType var39 = var37.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var40 = var37.getTypeOfThis();
    com.google.javascript.rhino.jstype.JSType var41 = var40.unboxesTo();
    com.google.javascript.rhino.jstype.JSType var43 = var40.getRestrictedTypeGivenToBooleanOutcome(false);
    boolean var44 = var40.isNoObjectType();
    boolean var45 = var28.hasNode((java.lang.Object)var44);
    java.util.List var46 = var28.getGraphvizEdges();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var47 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    com.google.javascript.rhino.ErrorReporter var48 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var48);
    var49.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType var54 = null;
    com.google.javascript.rhino.jstype.JSType[] var55 = new com.google.javascript.rhino.jstype.JSType[] { var54};
    com.google.javascript.rhino.jstype.FunctionType var56 = var49.createConstructorType(var52, false, var55);
    com.google.javascript.rhino.jstype.JSType var58 = var56.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var59 = var56.getTypeOfThis();
    com.google.javascript.rhino.jstype.JSType var60 = var59.unboxesTo();
    com.google.javascript.rhino.jstype.JSType var62 = var59.getRestrictedTypeGivenToBooleanOutcome(false);
    boolean var63 = var59.isNoObjectType();
    boolean var64 = var47.hasNode((java.lang.Object)var63);
    java.util.List var65 = var47.getGraphvizEdges();
    var47.pushNodeAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var67 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var68 = var67.getGraphvizEdges();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var69 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.string("hi!");
    boolean var72 = var71.isNE();
    int var73 = var71.getSideEffectFlags();
    com.google.javascript.rhino.Node var75 = com.google.javascript.rhino.IR.string("hi!");
    boolean var76 = var75.isNE();
    boolean var77 = var75.isWith();
    com.google.javascript.rhino.Node var78 = com.google.javascript.rhino.IR.getprop(var71, var75);
    var78.setLineno(10);
    boolean var81 = var69.hasNode((java.lang.Object)var78);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var82 = var67.createDirectedGraphNode((java.lang.Object)var69);
    java.util.List var83 = var47.getNeighborNodes(var82);
    java.util.List var84 = var28.getNeighborNodes(var82);
    java.util.List var85 = var0.getDirectedSuccNodes(var82);
    java.util.Collection var86 = var0.getNodes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "LinkedGraph"+ "'", var2.equals("LinkedGraph"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test247() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test247"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
    boolean var11 = var10.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    var13.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType[] var19 = new com.google.javascript.rhino.jstype.JSType[] { var18};
    com.google.javascript.rhino.jstype.FunctionType var20 = var13.createConstructorType(var16, false, var19);
    com.google.javascript.rhino.jstype.JSType var22 = var20.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var23 = var20.getTypeOfThis();
    boolean var24 = var10.canCastTo((com.google.javascript.rhino.jstype.JSType)var20);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    var26.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var29 = null;
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.jstype.FunctionType var33 = var26.createConstructorType(var29, false, var32);
    boolean var34 = var33.isInterface();
    com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var33};
    com.google.javascript.rhino.jstype.FunctionType var36 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var10, var35);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var37 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var38 = var37.getGraphvizNodes();
    var1.setTemplateTypeNames(var38);
    com.google.javascript.jscomp.deps.SortedDependencies var40 = new com.google.javascript.jscomp.deps.SortedDependencies(var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.deps.DependencyInfo var42 = var40.getInputProviding("LinkedGraph");
      fail("Expected exception of type com.google.javascript.jscomp.deps.SortedDependencies.MissingProvideException");
    } catch (com.google.javascript.jscomp.deps.SortedDependencies.MissingProvideException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test248() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test248"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    java.util.Set var10 = null;
    var2.setDirectives(var10);
    com.google.javascript.jscomp.CheckLevel var12 = null;
    com.google.javascript.jscomp.CheckLevel var14 = null;
    com.google.javascript.jscomp.DiagnosticType var16 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var14, "");
    java.lang.String[] var17 = null;
    com.google.javascript.jscomp.JSError var18 = com.google.javascript.jscomp.JSError.make("hi!", var2, var12, var16, var17);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.string("hi!");
    boolean var22 = var21.isNE();
    int var23 = var21.getSideEffectFlags();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.string("hi!");
    boolean var26 = var25.isNE();
    boolean var27 = var25.isWith();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.getprop(var21, var25);
    java.util.Set var29 = null;
    var21.setDirectives(var29);
    com.google.javascript.jscomp.CheckLevel var31 = null;
    com.google.javascript.jscomp.CheckLevel var33 = null;
    com.google.javascript.jscomp.DiagnosticType var35 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var33, "");
    java.lang.String[] var36 = null;
    com.google.javascript.jscomp.JSError var37 = com.google.javascript.jscomp.JSError.make("hi!", var21, var31, var35, var36);
    var21.addSuppression("");
    com.google.javascript.rhino.Node var40 = var2.useSourceInfoFromForTree(var21);
    boolean var41 = var21.isGetElem();
    boolean var42 = var21.isBreak();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.not(var21);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test249() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test249"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    java.util.Set var10 = null;
    var2.setDirectives(var10);
    int var12 = var2.getChildCount();
    boolean var13 = var0.isOptionalParameter(var2);
    java.lang.String var14 = com.google.javascript.jscomp.NodeUtil.getSourceName(var2);
    boolean var15 = var2.isBlock();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    int var19 = var17.getSideEffectFlags();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.string("hi!");
    boolean var22 = var21.isNE();
    boolean var23 = var21.isWith();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.getprop(var17, var21);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.string("hi!");
    var21.addChildToBack(var26);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var28 = var26.getJsDocBuilderForNode();
    int var29 = var26.getCharno();
    java.lang.Object var31 = var26.getProp(10);
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.string("hi!");
    boolean var34 = var33.isNE();
    int var35 = var33.getSideEffectFlags();
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.string("hi!");
    boolean var38 = var37.isNE();
    boolean var39 = var37.isWith();
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.getprop(var33, var37);
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.string("hi!");
    var37.addChildToBack(var42);
    com.google.javascript.rhino.Node var44 = var26.srcrefTree(var42);
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.string("hi!");
    boolean var47 = var46.isNE();
    int var48 = var46.getSideEffectFlags();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.string("hi!");
    boolean var51 = var50.isNE();
    boolean var52 = var50.isWith();
    com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.IR.getprop(var46, var50);
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.string("hi!");
    var50.addChildToBack(var55);
    boolean var57 = var50.isVar();
    com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.IR.string("hi!");
    boolean var60 = var59.isNE();
    int var61 = var59.getSideEffectFlags();
    com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.string("hi!");
    boolean var64 = var63.isNE();
    boolean var65 = var63.isWith();
    com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.getprop(var59, var63);
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.string("hi!");
    var63.addChildToBack(var68);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var70 = var68.getJsDocBuilderForNode();
    int var71 = var68.getCharno();
    boolean var72 = var50.isEquivalentTo(var68);
    com.google.javascript.rhino.Node var73 = var44.useSourceInfoFrom(var68);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var74 = com.google.javascript.rhino.IR.doNode(var2, var68);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test250() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test250"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    var9.setLineno(10);
    boolean var12 = var0.hasNode((java.lang.Object)var9);
    com.google.javascript.rhino.JSDocInfo var13 = null;
    com.google.javascript.rhino.Node var14 = var9.setJSDocInfo(var13);
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    var20.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var23 = null;
    com.google.javascript.rhino.jstype.JSType var25 = null;
    com.google.javascript.rhino.jstype.JSType[] var26 = new com.google.javascript.rhino.jstype.JSType[] { var25};
    com.google.javascript.rhino.jstype.FunctionType var27 = var20.createConstructorType(var23, false, var26);
    boolean var28 = var27.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    var30.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.jstype.JSType var35 = null;
    com.google.javascript.rhino.jstype.JSType[] var36 = new com.google.javascript.rhino.jstype.JSType[] { var35};
    com.google.javascript.rhino.jstype.FunctionType var37 = var30.createConstructorType(var33, false, var36);
    com.google.javascript.rhino.jstype.JSType var39 = var37.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var40 = var37.getTypeOfThis();
    boolean var41 = var27.canCastTo((com.google.javascript.rhino.jstype.JSType)var37);
    com.google.javascript.rhino.ErrorReporter var42 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var42);
    var43.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var46 = null;
    com.google.javascript.rhino.jstype.JSType var48 = null;
    com.google.javascript.rhino.jstype.JSType[] var49 = new com.google.javascript.rhino.jstype.JSType[] { var48};
    com.google.javascript.rhino.jstype.FunctionType var50 = var43.createConstructorType(var46, false, var49);
    boolean var51 = var50.isInterface();
    com.google.javascript.rhino.jstype.JSType[] var52 = new com.google.javascript.rhino.jstype.JSType[] { var50};
    com.google.javascript.rhino.jstype.FunctionType var53 = var18.createConstructorType((com.google.javascript.rhino.jstype.JSType)var27, var52);
    com.google.javascript.rhino.Node var54 = var16.createOptionalParameters(var52);
    var54.setSourceEncodedPosition(100);
    boolean var57 = var54.isFalse();
    com.google.javascript.rhino.Node var58 = var54.getLastSibling();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.IR.assign(var14, var58);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test251() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test251"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    java.lang.Iterable var5 = var3.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    var7.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType var12 = null;
    com.google.javascript.rhino.jstype.JSType[] var13 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.jstype.FunctionType var14 = var7.createConstructorType(var10, false, var13);
    boolean var15 = var14.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var16 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
    var17.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.rhino.jstype.JSType var22 = null;
    com.google.javascript.rhino.jstype.JSType[] var23 = new com.google.javascript.rhino.jstype.JSType[] { var22};
    com.google.javascript.rhino.jstype.FunctionType var24 = var17.createConstructorType(var20, false, var23);
    com.google.javascript.rhino.jstype.FunctionType var25 = var3.createConstructorType((com.google.javascript.rhino.jstype.JSType)var14, var23);
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
    var27.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.rhino.jstype.JSType[] var33 = new com.google.javascript.rhino.jstype.JSType[] { var32};
    com.google.javascript.rhino.jstype.FunctionType var34 = var27.createConstructorType(var30, false, var33);
    com.google.javascript.rhino.jstype.JSType var36 = var34.findPropertyType("hi!");
    int var37 = var34.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var39 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var34, "");
    boolean var40 = var34.makesStructs();
    boolean var41 = var25.isSubtype((com.google.javascript.rhino.jstype.JSType)var34);
    boolean var42 = var25.isNumber();
    var1.setJSType((com.google.javascript.rhino.jstype.JSType)var25);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.string("hi!");
    boolean var46 = var45.isNE();
    int var47 = var45.getSideEffectFlags();
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.string("hi!");
    boolean var50 = var49.isNE();
    boolean var51 = var49.isWith();
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.getprop(var45, var49);
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.string("hi!");
    var49.addChildToBack(var54);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var56 = var54.getJsDocBuilderForNode();
    int var57 = var54.getCharno();
    java.lang.Object var59 = var54.getProp(10);
    boolean var60 = var54.isAnd();
    boolean var61 = var54.isBlock();
    com.google.javascript.rhino.Node var62 = var54.cloneNode();
    com.google.javascript.rhino.Node var63 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.replaceChildAfter(var54, var63);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test252() {}
//   public void test252() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test252"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var1);
//     com.google.javascript.rhino.head.ast.AstRoot var4 = null;
//     var0.setOldParseTree("", var4);
//     com.google.javascript.jscomp.SourceFile var7 = new com.google.javascript.jscomp.SourceFile("FALSE");
//     java.nio.charset.Charset var9 = null;
//     com.google.javascript.jscomp.SourceFile var10 = com.google.javascript.jscomp.SourceFile.fromFile("goog.global", var9);
//     com.google.javascript.jscomp.CompilerOptions var11 = new com.google.javascript.jscomp.CompilerOptions();
//     var11.setInlineProperties(true);
//     com.google.javascript.jscomp.CheckLevel var14 = null;
//     var11.setCheckMissingReturn(var14);
//     var11.setRemoveUnusedLocalVars(true);
//     var11.setRecordFunctionInformation(false);
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var23 = var22.isNE();
//     int var24 = var22.getSideEffectFlags();
//     com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var27 = var26.isNE();
//     boolean var28 = var26.isWith();
//     com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.getprop(var22, var26);
//     java.util.Set var30 = null;
//     var22.setDirectives(var30);
//     com.google.javascript.jscomp.CheckLevel var32 = null;
//     com.google.javascript.jscomp.CheckLevel var34 = null;
//     com.google.javascript.jscomp.DiagnosticType var36 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var34, "");
//     java.lang.String[] var37 = null;
//     com.google.javascript.jscomp.JSError var38 = com.google.javascript.jscomp.JSError.make("hi!", var22, var32, var36, var37);
//     com.google.javascript.jscomp.DiagnosticGroup var39 = com.google.javascript.jscomp.DiagnosticGroup.forType(var36);
//     com.google.javascript.jscomp.DiagnosticGroup[] var40 = new com.google.javascript.jscomp.DiagnosticGroup[] { var39};
//     com.google.javascript.jscomp.DiagnosticGroup var41 = new com.google.javascript.jscomp.DiagnosticGroup(var40);
//     com.google.javascript.jscomp.CheckLevel var46 = null;
//     com.google.javascript.jscomp.DiagnosticType var48 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var46, "");
//     java.lang.String[] var50 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var51 = com.google.javascript.jscomp.JSError.make("", 100, 0, var48, var50);
//     boolean var52 = var41.matches(var48);
//     com.google.javascript.jscomp.CheckLevel var53 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var54 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var41, var53);
//     com.google.javascript.jscomp.CheckLevel var55 = null;
//     var11.setWarningLevel(var41, var55);
//     com.google.javascript.jscomp.AbstractCompiler var58 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var59 = null;
//     com.google.javascript.jscomp.NodeTraversal var60 = new com.google.javascript.jscomp.NodeTraversal(var58, var59);
//     java.lang.String var61 = var60.getSourceName();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var62 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var63 = var62.getGraphvizNodes();
//     com.google.javascript.rhino.ErrorReporter var64 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var64);
//     var65.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var68 = null;
//     com.google.javascript.rhino.jstype.JSType var70 = null;
//     com.google.javascript.rhino.jstype.JSType[] var71 = new com.google.javascript.rhino.jstype.JSType[] { var70};
//     com.google.javascript.rhino.jstype.FunctionType var72 = var65.createConstructorType(var68, false, var71);
//     com.google.javascript.rhino.jstype.JSType var74 = var72.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var75 = var72.getTypeOfThis();
//     com.google.javascript.jscomp.graph.GraphNode var76 = var62.getNode((java.lang.Object)var75);
//     java.util.List var77 = var62.getEdges();
//     var60.traverseRoots(var77);
//     com.google.javascript.rhino.Node var79 = com.google.javascript.rhino.IR.block(var77);
//     var11.setReplaceStringsConfiguration("goog.exportSymbol", var77);
//     com.google.javascript.jscomp.Result var81 = var0.compile(var7, var10, var11);
// 
//   }

  public void test253() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test253"); }


    com.google.javascript.jscomp.PropertyRenamingPolicy[] var0 = com.google.javascript.jscomp.PropertyRenamingPolicy.values();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test254() {}
//   public void test254() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test254"); }
// 
// 
//     com.google.javascript.rhino.Node[] var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.paramList(var0);
// 
//   }

  public void test255() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test255"); }


    com.google.javascript.jscomp.CheckLevel var1 = null;
    com.google.javascript.jscomp.DiagnosticType var3 = com.google.javascript.jscomp.DiagnosticType.make("", var1, "hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test256() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test256"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    var2.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
    com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
    boolean var10 = var9.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    var12.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
    com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
    boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    var37.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
    boolean var45 = var44.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    var47.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
    com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
    boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
    var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.string("hi!");
    boolean var62 = var61.isNE();
    boolean var63 = var61.isWith();
    com.google.javascript.rhino.Node var64 = var61.getLastChild();
    boolean var65 = var0.isVarArgsParameter(var61);
    com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var68 = var67.cloneNode();
    boolean var69 = var67.isDelProp();
    com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var72 = var71.cloneNode();
    boolean var73 = var71.isDelProp();
    com.google.javascript.rhino.Node var74 = var67.clonePropsFrom(var71);
    com.google.javascript.rhino.JSDocInfo var75 = var71.getJSDocInfo();
    com.google.javascript.rhino.Node var76 = com.google.javascript.rhino.IR.breakNode(var71);
    com.google.javascript.jscomp.CodingConvention.Bind var78 = var0.describeFunctionBind(var76, true);
    com.google.javascript.rhino.JSDocInfo var79 = var76.getJSDocInfo();
    int var80 = var76.getLineno();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == (-1));

  }

  public void test257() {}
//   public void test257() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test257"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     com.google.javascript.jscomp.Scope var4 = var0.getTopScope();
//     com.google.javascript.jscomp.JSSourceFile var5 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var6 = new com.google.javascript.jscomp.JSSourceFile[] { var5};
//     com.google.javascript.jscomp.JSSourceFile[] var7 = null;
//     com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
//     var8.setInlineProperties(true);
//     var8.setCommonJSModulePathPrefix("TRUE");
//     var8.setMoveFunctionDeclarations(false);
//     com.google.javascript.jscomp.Result var15 = var0.compile(var6, var7, var8);
// 
//   }

  public void test258() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test258"); }


    com.google.javascript.jscomp.parsing.Config var1 = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test259() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test259"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    java.util.Set var10 = null;
    var2.setDirectives(var10);
    com.google.javascript.jscomp.CheckLevel var12 = null;
    com.google.javascript.jscomp.CheckLevel var14 = null;
    com.google.javascript.jscomp.DiagnosticType var16 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var14, "");
    java.lang.String[] var17 = null;
    com.google.javascript.jscomp.JSError var18 = com.google.javascript.jscomp.JSError.make("hi!", var2, var12, var16, var17);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.string("hi!");
    boolean var22 = var21.isNE();
    int var23 = var21.getSideEffectFlags();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.string("hi!");
    boolean var26 = var25.isNE();
    boolean var27 = var25.isWith();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.getprop(var21, var25);
    java.util.Set var29 = null;
    var21.setDirectives(var29);
    com.google.javascript.jscomp.CheckLevel var31 = null;
    com.google.javascript.jscomp.CheckLevel var33 = null;
    com.google.javascript.jscomp.DiagnosticType var35 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var33, "");
    java.lang.String[] var36 = null;
    com.google.javascript.jscomp.JSError var37 = com.google.javascript.jscomp.JSError.make("hi!", var21, var31, var35, var36);
    var21.addSuppression("");
    com.google.javascript.rhino.Node var40 = var2.useSourceInfoFromForTree(var21);
    boolean var41 = var2.isLabel();
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.block();
    int var43 = var42.getSourceOffset();
    com.google.javascript.rhino.Node[] var44 = new com.google.javascript.rhino.Node[] { var42};
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.script(var44);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.newNode(var2, var44);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test260() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test260"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
    int var15 = var12.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
    com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
    boolean var19 = var18.hasAnyTemplateTypesInternal();
    com.google.javascript.rhino.jstype.BooleanLiteralSet var20 = var18.getPossibleToBooleanOutcomes();
    java.lang.String var21 = var20.toString();
    java.lang.Class var22 = var20.getDeclaringClass();
    java.lang.String var23 = var20.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "TRUE"+ "'", var21.equals("TRUE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "TRUE"+ "'", var23.equals("TRUE"));

  }

  public void test261() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test261"); }


    com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
    com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
    boolean var4 = var3.isNE();
    int var5 = var3.getSideEffectFlags();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
    boolean var8 = var7.isNE();
    boolean var9 = var7.isWith();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
    var1.validateExpression(var3);
    var3.removeProp((-1));
    var3.setSourceEncodedPositionForTree(1);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var18 = var17.cloneNode();
    boolean var19 = var17.isDelProp();
    int var20 = var17.getSideEffectFlags();
    boolean var21 = var17.isQuotedString();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.string("hi!");
    boolean var25 = var24.isNE();
    int var26 = var24.getSideEffectFlags();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.string("hi!");
    boolean var29 = var28.isNE();
    boolean var30 = var28.isWith();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.getprop(var24, var28);
    java.util.Set var32 = null;
    var24.setDirectives(var32);
    com.google.javascript.jscomp.CheckLevel var34 = null;
    com.google.javascript.jscomp.CheckLevel var36 = null;
    com.google.javascript.jscomp.DiagnosticType var38 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var36, "");
    java.lang.String[] var39 = null;
    com.google.javascript.jscomp.JSError var40 = com.google.javascript.jscomp.JSError.make("hi!", var24, var34, var38, var39);
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.string("hi!");
    boolean var44 = var43.isNE();
    int var45 = var43.getSideEffectFlags();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.string("hi!");
    boolean var48 = var47.isNE();
    boolean var49 = var47.isWith();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.getprop(var43, var47);
    java.util.Set var51 = null;
    var43.setDirectives(var51);
    com.google.javascript.jscomp.CheckLevel var53 = null;
    com.google.javascript.jscomp.CheckLevel var55 = null;
    com.google.javascript.jscomp.DiagnosticType var57 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var55, "");
    java.lang.String[] var58 = null;
    com.google.javascript.jscomp.JSError var59 = com.google.javascript.jscomp.JSError.make("hi!", var43, var53, var57, var58);
    var43.addSuppression("");
    com.google.javascript.rhino.Node var62 = var24.useSourceInfoFromForTree(var43);
    boolean var63 = var24.isLabel();
    com.google.javascript.rhino.Node var64 = var17.useSourceInfoFromForTree(var24);
    com.google.javascript.jscomp.ClosureCodingConvention var65 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.jscomp.GoogleCodingConvention var66 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var65);
    com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.IR.string("hi!");
    boolean var70 = var69.isNE();
    int var71 = var69.getSideEffectFlags();
    com.google.javascript.rhino.Node var73 = com.google.javascript.rhino.IR.string("hi!");
    boolean var74 = var73.isNE();
    boolean var75 = var73.isWith();
    com.google.javascript.rhino.Node var76 = com.google.javascript.rhino.IR.getprop(var69, var73);
    java.util.Set var77 = null;
    var69.setDirectives(var77);
    int var79 = var69.getChildCount();
    com.google.javascript.rhino.Node var80 = var69.cloneTree();
    com.google.javascript.rhino.JSDocInfo var81 = null;
    com.google.javascript.rhino.Node var82 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNodeDeclaration((com.google.javascript.jscomp.CodingConvention)var66, "hi!: ", var80, var81);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var83 = com.google.javascript.rhino.IR.ifNode(var3, var24, var82);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test262() {}
//   public void test262() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test262"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     boolean var13 = var12.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var14 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
//     var15.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var18 = null;
//     com.google.javascript.rhino.jstype.JSType var20 = null;
//     com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
//     com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
//     com.google.javascript.rhino.jstype.JSType var24 = var22.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var25 = var22.getTypeOfThis();
//     boolean var26 = var12.canCastTo((com.google.javascript.rhino.jstype.JSType)var22);
//     com.google.javascript.rhino.ErrorReporter var27 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
//     var28.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     com.google.javascript.rhino.jstype.JSType var33 = null;
//     com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
//     com.google.javascript.rhino.jstype.FunctionType var35 = var28.createConstructorType(var31, false, var34);
//     boolean var36 = var35.isInterface();
//     com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var35};
//     com.google.javascript.rhino.jstype.FunctionType var38 = var3.createConstructorType((com.google.javascript.rhino.jstype.JSType)var12, var37);
//     com.google.javascript.rhino.Node var39 = var1.createOptionalParameters(var37);
//     com.google.javascript.rhino.ErrorReporter var41 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
//     java.lang.Iterable var44 = var42.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var45 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
//     var46.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var49 = null;
//     com.google.javascript.rhino.jstype.JSType var51 = null;
//     com.google.javascript.rhino.jstype.JSType[] var52 = new com.google.javascript.rhino.jstype.JSType[] { var51};
//     com.google.javascript.rhino.jstype.FunctionType var53 = var46.createConstructorType(var49, false, var52);
//     boolean var54 = var53.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var55 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var55);
//     var56.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var59 = null;
//     com.google.javascript.rhino.jstype.JSType var61 = null;
//     com.google.javascript.rhino.jstype.JSType[] var62 = new com.google.javascript.rhino.jstype.JSType[] { var61};
//     com.google.javascript.rhino.jstype.FunctionType var63 = var56.createConstructorType(var59, false, var62);
//     com.google.javascript.rhino.jstype.FunctionType var64 = var42.createConstructorType((com.google.javascript.rhino.jstype.JSType)var53, var62);
//     com.google.javascript.rhino.jstype.TemplateType var65 = var42.getObjectIndexKey();
//     var1.unregisterPropertyOnType("hi!: ", (com.google.javascript.rhino.jstype.JSType)var65);
//     java.lang.Iterable var68 = var1.getTypesWithProperty("");
//     com.google.javascript.rhino.jstype.JSTypeNative var69 = null;
//     com.google.javascript.rhino.jstype.FunctionType var70 = var1.getNativeFunctionType(var69);
// 
//   }

  public void test263() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test263"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
    com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var1);
    com.google.javascript.rhino.head.ast.AstRoot var4 = null;
    var0.setOldParseTree("", var4);
    com.google.javascript.jscomp.JSModule var6 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String[] var7 = var0.toSourceArray(var6);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test264() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test264"); }


    com.google.javascript.jscomp.AbstractCompiler var0 = null;
    com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
    com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
    java.lang.String var3 = var2.getSourceName();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var5 = var4.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    var7.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType var12 = null;
    com.google.javascript.rhino.jstype.JSType[] var13 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.jstype.FunctionType var14 = var7.createConstructorType(var10, false, var13);
    com.google.javascript.rhino.jstype.JSType var16 = var14.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var17 = var14.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var18 = var4.getNode((java.lang.Object)var17);
    java.util.List var19 = var4.getEdges();
    var2.traverseRoots(var19);
    java.lang.String var21 = var2.getSourceName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));

  }

  public void test265() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test265"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var2 = var1.cloneNode();
    boolean var3 = var1.isDelProp();
    boolean var4 = var1.isDefaultCase();
    boolean var5 = var1.isNE();
    var1.setLength(100);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    boolean var11 = var10.isNE();
    int var12 = var10.getSideEffectFlags();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.string("hi!");
    boolean var15 = var14.isNE();
    boolean var16 = var14.isWith();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.getprop(var10, var14);
    java.util.Set var18 = null;
    var10.setDirectives(var18);
    com.google.javascript.jscomp.CheckLevel var20 = null;
    com.google.javascript.jscomp.CheckLevel var22 = null;
    com.google.javascript.jscomp.DiagnosticType var24 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var22, "");
    java.lang.String[] var25 = null;
    com.google.javascript.jscomp.JSError var26 = com.google.javascript.jscomp.JSError.make("hi!", var10, var20, var24, var25);
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.string("hi!");
    boolean var30 = var29.isNE();
    int var31 = var29.getSideEffectFlags();
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.string("hi!");
    boolean var34 = var33.isNE();
    boolean var35 = var33.isWith();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.getprop(var29, var33);
    java.util.Set var37 = null;
    var29.setDirectives(var37);
    com.google.javascript.jscomp.CheckLevel var39 = null;
    com.google.javascript.jscomp.CheckLevel var41 = null;
    com.google.javascript.jscomp.DiagnosticType var43 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var41, "");
    java.lang.String[] var44 = null;
    com.google.javascript.jscomp.JSError var45 = com.google.javascript.jscomp.JSError.make("hi!", var29, var39, var43, var44);
    var29.addSuppression("");
    com.google.javascript.rhino.Node var48 = var10.useSourceInfoFromForTree(var29);
    boolean var49 = var10.isLabel();
    boolean var50 = var10.isUnscopedQualifiedName();
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.string("hi!");
    com.google.javascript.rhino.Node var53 = var10.useSourceInfoFrom(var52);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.or(var1, var10);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test266() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test266"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    com.google.javascript.rhino.Node var12 = var10.getLastSibling();
    boolean var13 = var12.isArrayLit();
    com.google.javascript.rhino.Node var14 = var12.getParent();
    boolean var15 = var14.isInc();
    com.google.javascript.rhino.Node.AncestorIterable var16 = var14.getAncestors();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.string("hi!");
    boolean var19 = var18.isNE();
    int var20 = var18.getSideEffectFlags();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.string("hi!");
    boolean var23 = var22.isNE();
    boolean var24 = var22.isWith();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.getprop(var18, var22);
    java.util.Set var26 = null;
    var18.setDirectives(var26);
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.string("hi!");
    boolean var31 = var30.isNE();
    int var32 = var30.getSideEffectFlags();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.string("hi!");
    boolean var35 = var34.isNE();
    boolean var36 = var34.isWith();
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.getprop(var30, var34);
    java.util.Set var38 = null;
    var30.setDirectives(var38);
    com.google.javascript.jscomp.CheckLevel var40 = null;
    com.google.javascript.jscomp.CheckLevel var42 = null;
    com.google.javascript.jscomp.DiagnosticType var44 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var42, "");
    java.lang.String[] var45 = null;
    com.google.javascript.jscomp.JSError var46 = com.google.javascript.jscomp.JSError.make("hi!", var30, var40, var44, var45);
    com.google.javascript.rhino.Node var47 = var18.useSourceInfoIfMissingFrom(var30);
    com.google.javascript.rhino.Node var49 = var30.getAncestor(0);
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var53 = var52.cloneNode();
    boolean var54 = var52.isDelProp();
    com.google.javascript.rhino.Node var56 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var57 = var56.cloneNode();
    boolean var58 = var56.isDelProp();
    com.google.javascript.rhino.Node var59 = var52.clonePropsFrom(var56);
    boolean var60 = var56.isBlock();
    var30.putProp((-1), (java.lang.Object)var56);
    int var62 = var30.getSourcePosition();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.add(var14, var30);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1));

  }

  public void test267() {}
//   public void test267() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test267"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var4);
//     java.lang.String var8 = var0.getSourceLine("hi!: ", (-1));
//     com.google.javascript.jscomp.JsAst var9 = null;
//     var0.replaceScript(var9);
// 
//   }

  public void test268() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test268"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    var2.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
    com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
    boolean var10 = var9.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    var12.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
    com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
    boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    var37.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
    boolean var45 = var44.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    var47.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
    com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
    boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
    var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
    java.util.List var60 = var9.getSubTypes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);

  }

  public void test269() {}
//   public void test269() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test269"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var1);
//     com.google.javascript.rhino.head.ast.AstRoot var4 = null;
//     var0.setOldParseTree("", var4);
//     var0.normalize();
// 
//   }

  public void test270() {}
//   public void test270() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test270"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
//     int var15 = var12.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
//     com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
//     com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
//     boolean var19 = var1.shouldTolerateUndefinedValues();
//     com.google.javascript.jscomp.ClosureCodingConvention var20 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.jscomp.GoogleCodingConvention var21 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var20);
//     java.lang.String var22 = var20.getExportPropertyFunction();
//     boolean var24 = var20.isConstant("goog.exportSymbol");
//     boolean var26 = var20.isConstant("false");
//     com.google.javascript.rhino.ErrorReporter var27 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
//     com.google.javascript.rhino.ErrorReporter var29 = var28.getErrorReporter();
//     com.google.javascript.rhino.ErrorReporter var30 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
//     var31.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var34 = null;
//     com.google.javascript.rhino.jstype.JSType var36 = null;
//     com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var36};
//     com.google.javascript.rhino.jstype.FunctionType var38 = var31.createConstructorType(var34, false, var37);
//     boolean var39 = var38.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var40 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40);
//     var41.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var44 = null;
//     com.google.javascript.rhino.jstype.JSType var46 = null;
//     com.google.javascript.rhino.jstype.JSType[] var47 = new com.google.javascript.rhino.jstype.JSType[] { var46};
//     com.google.javascript.rhino.jstype.FunctionType var48 = var41.createConstructorType(var44, false, var47);
//     com.google.javascript.rhino.jstype.JSType var50 = var48.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var51 = var48.getTypeOfThis();
//     boolean var52 = var38.canCastTo((com.google.javascript.rhino.jstype.JSType)var48);
//     boolean var53 = var48.isUnionType();
//     java.util.List var54 = var48.getSubTypes();
//     boolean var55 = var48.isConstructor();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var57 = var56.getGraphvizNodes();
//     com.google.javascript.jscomp.deps.SortedDependencies var58 = new com.google.javascript.jscomp.deps.SortedDependencies(var57);
//     java.util.Map var59 = null;
//     var20.defineDelegateProxyPrototypeProperties(var28, (com.google.javascript.rhino.jstype.StaticScope)var48, var57, var59);
//     com.google.javascript.rhino.Node var61 = var1.createParameters(var57);
//     com.google.javascript.jscomp.deps.SortedDependencies var62 = new com.google.javascript.jscomp.deps.SortedDependencies(var57);
//     java.util.List var63 = null;
//     java.util.List var65 = var62.getDependenciesOf(var63, false);
// 
//   }

  public void test271() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test271"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
    int var15 = var12.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
    com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    var22.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var25 = null;
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.rhino.jstype.JSType[] var28 = new com.google.javascript.rhino.jstype.JSType[] { var27};
    com.google.javascript.rhino.jstype.FunctionType var29 = var22.createConstructorType(var25, false, var28);
    boolean var30 = var29.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var31 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var31);
    var32.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var35 = null;
    com.google.javascript.rhino.jstype.JSType var37 = null;
    com.google.javascript.rhino.jstype.JSType[] var38 = new com.google.javascript.rhino.jstype.JSType[] { var37};
    com.google.javascript.rhino.jstype.FunctionType var39 = var32.createConstructorType(var35, false, var38);
    com.google.javascript.rhino.jstype.JSType var41 = var39.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var42 = var39.getTypeOfThis();
    boolean var43 = var29.canCastTo((com.google.javascript.rhino.jstype.JSType)var39);
    com.google.javascript.rhino.ErrorReporter var44 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var44);
    var45.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var48 = null;
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType[] var51 = new com.google.javascript.rhino.jstype.JSType[] { var50};
    com.google.javascript.rhino.jstype.FunctionType var52 = var45.createConstructorType(var48, false, var51);
    boolean var53 = var52.isInterface();
    com.google.javascript.rhino.jstype.JSType[] var54 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var55 = var20.createConstructorType((com.google.javascript.rhino.jstype.JSType)var29, var54);
    var55.setDict();
    boolean var57 = var55.hasReferenceName();
    com.google.javascript.rhino.jstype.JSType var58 = var1.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType)var55);
    int var59 = var55.getExtendedInterfacesCount();
    com.google.javascript.rhino.jstype.JSType var60 = var55.getTypeOfThis();
    var55.setDict();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test272() {}
//   public void test272() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test272"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var3 = var2.isNE();
//     int var4 = var2.getSideEffectFlags();
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var7 = var6.isNE();
//     boolean var8 = var6.isWith();
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
//     var9.setLineno(10);
//     boolean var12 = var0.hasNode((java.lang.Object)var9);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var13 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.DependencyOptions var14 = new com.google.javascript.jscomp.DependencyOptions();
//     com.google.javascript.jscomp.DependencyOptions var16 = var14.setDependencySorting(false);
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var17 = var13.createDirectedGraphNode((java.lang.Object)var16);
//     java.util.List var18 = var0.getNeighborNodes(var17);
//     com.google.javascript.rhino.ErrorReporter var19 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
//     java.lang.Iterable var22 = var20.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var23 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
//     var24.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var27 = null;
//     com.google.javascript.rhino.jstype.JSType var29 = null;
//     com.google.javascript.rhino.jstype.JSType[] var30 = new com.google.javascript.rhino.jstype.JSType[] { var29};
//     com.google.javascript.rhino.jstype.FunctionType var31 = var24.createConstructorType(var27, false, var30);
//     boolean var32 = var31.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var33 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33);
//     var34.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var37 = null;
//     com.google.javascript.rhino.jstype.JSType var39 = null;
//     com.google.javascript.rhino.jstype.JSType[] var40 = new com.google.javascript.rhino.jstype.JSType[] { var39};
//     com.google.javascript.rhino.jstype.FunctionType var41 = var34.createConstructorType(var37, false, var40);
//     com.google.javascript.rhino.jstype.FunctionType var42 = var20.createConstructorType((com.google.javascript.rhino.jstype.JSType)var31, var40);
//     boolean var43 = var31.isReturnTypeInferred();
//     boolean var44 = var31.isTemplatizedType();
//     com.google.javascript.rhino.jstype.JSType var45 = var31.getTypeOfThis();
//     com.google.javascript.rhino.ErrorReporter var46 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
//     var47.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var50 = null;
//     com.google.javascript.rhino.jstype.JSType var52 = null;
//     com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
//     com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
//     com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
//     int var57 = var54.getPropertiesCount();
//     com.google.javascript.rhino.jstype.ObjectType var59 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var54, "");
//     boolean var60 = var54.isFunctionPrototypeType();
//     boolean var61 = var54.isEmptyType();
//     var54.clearCachedValues();
//     boolean var63 = com.google.javascript.rhino.jstype.JSType.isEquivalent((com.google.javascript.rhino.jstype.JSType)var31, (com.google.javascript.rhino.jstype.JSType)var54);
//     boolean var64 = var54.isConstructor();
//     com.google.javascript.rhino.Node var66 = var54.getPropertyNode("LABEL_NAME hi!");
//     java.util.List var67 = var0.getNeighborNodes((java.lang.Object)var54);
// 
//   }

  public void test273() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test273"); }


    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
    com.google.javascript.rhino.Node var5 = var4.getLastChild();
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = null;
    com.google.javascript.rhino.jstype.FunctionParamBuilder var7 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var6);
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    var9.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var12 = null;
    com.google.javascript.rhino.jstype.JSType var14 = null;
    com.google.javascript.rhino.jstype.JSType[] var15 = new com.google.javascript.rhino.jstype.JSType[] { var14};
    com.google.javascript.rhino.jstype.FunctionType var16 = var9.createConstructorType(var12, false, var15);
    boolean var17 = var7.addRequiredParams(var15);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.string("hi!");
    boolean var20 = var19.isNE();
    int var21 = var19.getSideEffectFlags();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.string("hi!");
    boolean var24 = var23.isNE();
    boolean var25 = var23.isWith();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.getprop(var19, var23);
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.string("hi!");
    var23.addChildToBack(var28);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var30 = var28.getJsDocBuilderForNode();
    int var31 = var28.getCharno();
    java.lang.Object var33 = var28.getProp(10);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.string("hi!");
    boolean var36 = var35.isNE();
    int var37 = var35.getSideEffectFlags();
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.string("hi!");
    boolean var40 = var39.isNE();
    boolean var41 = var39.isWith();
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.getprop(var35, var39);
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.string("hi!");
    var39.addChildToBack(var44);
    com.google.javascript.rhino.Node var46 = var28.srcrefTree(var44);
    com.google.javascript.rhino.Node var47 = var7.newParameterFromNode(var28);
    com.google.javascript.rhino.Node var48 = var7.build();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.number((-1.0d));
    var48.addChildrenToBack(var50);
    boolean var52 = var4.hasChild(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);

  }

  public void test274() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test274"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
    boolean var11 = var10.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    var13.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType[] var19 = new com.google.javascript.rhino.jstype.JSType[] { var18};
    com.google.javascript.rhino.jstype.FunctionType var20 = var13.createConstructorType(var16, false, var19);
    com.google.javascript.rhino.jstype.JSType var22 = var20.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var23 = var20.getTypeOfThis();
    boolean var24 = var10.canCastTo((com.google.javascript.rhino.jstype.JSType)var20);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    var26.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var29 = null;
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.jstype.FunctionType var33 = var26.createConstructorType(var29, false, var32);
    com.google.javascript.rhino.jstype.JSType var35 = var33.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var36 = var33.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    var38.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var41 = null;
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.rhino.jstype.JSType[] var44 = new com.google.javascript.rhino.jstype.JSType[] { var43};
    com.google.javascript.rhino.jstype.FunctionType var45 = var38.createConstructorType(var41, false, var44);
    boolean var46 = var45.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    var48.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.rhino.jstype.JSType var53 = null;
    com.google.javascript.rhino.jstype.JSType[] var54 = new com.google.javascript.rhino.jstype.JSType[] { var53};
    com.google.javascript.rhino.jstype.FunctionType var55 = var48.createConstructorType(var51, false, var54);
    com.google.javascript.rhino.jstype.JSType var57 = var55.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var58 = var55.getTypeOfThis();
    boolean var59 = var45.canCastTo((com.google.javascript.rhino.jstype.JSType)var55);
    var1.applySingletonGetter(var10, var33, (com.google.javascript.rhino.jstype.ObjectType)var55);
    java.lang.String var61 = var1.getExportPropertyFunction();
    java.lang.String var62 = var1.getGlobalObject();
    boolean var63 = var0.hasNode((java.lang.Object)var1);
    boolean var65 = var1.isConstant("hi!: ");
    java.util.Collection var66 = var1.getIndirectlyDeclaredProperties();
    java.util.Collection var67 = var1.getAssertionFunctions();
    java.util.Collection var68 = var1.getAssertionFunctions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "goog.exportProperty"+ "'", var61.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "goog.global"+ "'", var62.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test275() {}
//   public void test275() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test275"); }
// 
// 
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var3 = var2.isNE();
//     int var4 = var2.getSideEffectFlags();
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var7 = var6.isNE();
//     boolean var8 = var6.isWith();
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
//     java.util.Set var10 = null;
//     var2.setDirectives(var10);
//     com.google.javascript.jscomp.CheckLevel var12 = null;
//     com.google.javascript.jscomp.CheckLevel var14 = null;
//     com.google.javascript.jscomp.DiagnosticType var16 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var14, "");
//     java.lang.String[] var17 = null;
//     com.google.javascript.jscomp.JSError var18 = com.google.javascript.jscomp.JSError.make("hi!", var2, var12, var16, var17);
//     com.google.javascript.jscomp.DiagnosticGroup var19 = com.google.javascript.jscomp.DiagnosticGroup.forType(var16);
//     com.google.javascript.jscomp.DiagnosticGroup[] var20 = new com.google.javascript.jscomp.DiagnosticGroup[] { var19};
//     com.google.javascript.jscomp.DiagnosticGroup var21 = new com.google.javascript.jscomp.DiagnosticGroup(var20);
//     com.google.javascript.jscomp.CheckLevel var26 = null;
//     com.google.javascript.jscomp.DiagnosticType var28 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var26, "");
//     java.lang.String[] var30 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var31 = com.google.javascript.jscomp.JSError.make("", 100, 0, var28, var30);
//     boolean var32 = var21.matches(var28);
//     com.google.javascript.jscomp.CheckLevel var33 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var34 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var21, var33);
//     com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var39 = var38.isNE();
//     int var40 = var38.getSideEffectFlags();
//     com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var43 = var42.isNE();
//     boolean var44 = var42.isWith();
//     com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.getprop(var38, var42);
//     java.util.Set var46 = null;
//     var38.setDirectives(var46);
//     com.google.javascript.jscomp.CheckLevel var48 = null;
//     com.google.javascript.jscomp.CheckLevel var50 = null;
//     com.google.javascript.jscomp.DiagnosticType var52 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var50, "");
//     java.lang.String[] var53 = null;
//     com.google.javascript.jscomp.JSError var54 = com.google.javascript.jscomp.JSError.make("hi!", var38, var48, var52, var53);
//     com.google.javascript.jscomp.DiagnosticGroup var55 = com.google.javascript.jscomp.DiagnosticGroup.forType(var52);
//     com.google.javascript.jscomp.DiagnosticGroup[] var56 = new com.google.javascript.jscomp.DiagnosticGroup[] { var55};
//     com.google.javascript.jscomp.DiagnosticGroup var57 = new com.google.javascript.jscomp.DiagnosticGroup(var56);
//     com.google.javascript.jscomp.DiagnosticGroup var58 = new com.google.javascript.jscomp.DiagnosticGroup("Node tree inequality:\nTree1:\nSTRING LinkedGraph\n\n\nTree2:\nSTRING hi!\n\n\nSubtree1: STRING LinkedGraph\n\n\nSubtree2: STRING hi!\n", var56);
//     com.google.javascript.jscomp.DiagnosticGroup var59 = new com.google.javascript.jscomp.DiagnosticGroup(var56);
//     com.google.javascript.jscomp.DiagnosticGroup var60 = new com.google.javascript.jscomp.DiagnosticGroup(var56);
//     boolean var61 = var34.enables(var60);
// 
//   }

  public void test276() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test276"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    com.google.javascript.rhino.Node var12 = var10.getLastSibling();
    boolean var13 = var12.isArrayLit();
    com.google.javascript.rhino.Node var14 = var12.getParent();
    boolean var15 = var14.isInc();
    boolean var16 = var14.isOr();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.defaultCase(var14);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test277() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test277"); }


    com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
    com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
    boolean var4 = var3.isNE();
    int var5 = var3.getSideEffectFlags();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
    boolean var8 = var7.isNE();
    boolean var9 = var7.isWith();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
    var10.setLineno(10);
    var1.validateExpression(var10);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.string("hi!");
    boolean var16 = var15.isNE();
    int var17 = var15.getSideEffectFlags();
    boolean var18 = var15.isReturn();
    var10.addChildrenToBack(var15);
    var15.setLength(100);
    boolean var22 = var15.isVoid();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.voidNode(var15);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test278() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test278"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    var2.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
    com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
    boolean var10 = var9.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    var12.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
    com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
    boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    var37.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
    boolean var45 = var44.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    var47.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
    com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
    boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
    var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
    java.lang.String var60 = var0.getExportPropertyFunction();
    java.lang.String var61 = var0.getGlobalObject();
    boolean var63 = var0.isConstant("");
    com.google.javascript.rhino.ErrorReporter var64 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var64);
    var65.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var68 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var69 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var68);
    var69.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var72 = null;
    com.google.javascript.rhino.jstype.JSType var74 = null;
    com.google.javascript.rhino.jstype.JSType[] var75 = new com.google.javascript.rhino.jstype.JSType[] { var74};
    com.google.javascript.rhino.jstype.FunctionType var76 = var69.createConstructorType(var72, false, var75);
    com.google.javascript.rhino.jstype.JSType var78 = var76.findPropertyType("hi!");
    int var79 = var76.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var80 = new com.google.javascript.rhino.jstype.JSType[] { var76};
    com.google.javascript.rhino.Node var81 = var65.createParametersWithVarArgs(var80);
    com.google.javascript.rhino.jstype.TemplateType var82 = var65.getObjectIndexKey();
    var65.clearTemplateTypeNames();
    var65.resetForTypeCheck();
    com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var85 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var0, var65);
    java.lang.String var86 = var0.getExportPropertyFunction();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "goog.exportProperty"+ "'", var60.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "goog.global"+ "'", var61.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "goog.exportProperty"+ "'", var86.equals("goog.exportProperty"));

  }

  public void test279() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test279"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    boolean var3 = var1.isFunction();
    java.lang.String var4 = var1.toString();
    int var5 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.cast(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.neg(var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "STRING hi!"+ "'", var4.equals("STRING hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test280() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test280"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    boolean var13 = var12.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    var15.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
    com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
    com.google.javascript.rhino.jstype.JSType var24 = var22.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var25 = var22.getTypeOfThis();
    boolean var26 = var12.canCastTo((com.google.javascript.rhino.jstype.JSType)var22);
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    var28.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
    com.google.javascript.rhino.jstype.FunctionType var35 = var28.createConstructorType(var31, false, var34);
    boolean var36 = var35.isInterface();
    com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var35};
    com.google.javascript.rhino.jstype.FunctionType var38 = var3.createConstructorType((com.google.javascript.rhino.jstype.JSType)var12, var37);
    com.google.javascript.rhino.Node var39 = var1.createOptionalParameters(var37);
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    java.lang.Iterable var44 = var42.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var45 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
    var46.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.rhino.jstype.JSType[] var52 = new com.google.javascript.rhino.jstype.JSType[] { var51};
    com.google.javascript.rhino.jstype.FunctionType var53 = var46.createConstructorType(var49, false, var52);
    boolean var54 = var53.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var55 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var55);
    var56.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.rhino.jstype.JSType var61 = null;
    com.google.javascript.rhino.jstype.JSType[] var62 = new com.google.javascript.rhino.jstype.JSType[] { var61};
    com.google.javascript.rhino.jstype.FunctionType var63 = var56.createConstructorType(var59, false, var62);
    com.google.javascript.rhino.jstype.FunctionType var64 = var42.createConstructorType((com.google.javascript.rhino.jstype.JSType)var53, var62);
    com.google.javascript.rhino.jstype.TemplateType var65 = var42.getObjectIndexKey();
    var1.unregisterPropertyOnType("hi!: ", (com.google.javascript.rhino.jstype.JSType)var65);
    java.lang.Iterable var68 = var1.getTypesWithProperty("");
    com.google.javascript.rhino.jstype.JSType var69 = null;
    com.google.javascript.jscomp.AbstractCompiler var70 = null;
    com.google.javascript.jscomp.NodeTraversal.Callback var71 = null;
    com.google.javascript.jscomp.NodeTraversal var72 = new com.google.javascript.jscomp.NodeTraversal(var70, var71);
    java.lang.String var73 = var72.getSourceName();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var74 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var75 = var74.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var76 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var76);
    var77.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var80 = null;
    com.google.javascript.rhino.jstype.JSType var82 = null;
    com.google.javascript.rhino.jstype.JSType[] var83 = new com.google.javascript.rhino.jstype.JSType[] { var82};
    com.google.javascript.rhino.jstype.FunctionType var84 = var77.createConstructorType(var80, false, var83);
    com.google.javascript.rhino.jstype.JSType var86 = var84.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var87 = var84.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var88 = var74.getNode((java.lang.Object)var87);
    java.util.List var89 = var74.getEdges();
    var72.traverseRoots(var89);
    com.google.javascript.rhino.jstype.FunctionType var91 = var1.createFunctionType(var69, var89);
    com.google.javascript.jscomp.JSModule[] var92 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection)var89);
    com.google.javascript.jscomp.JSModuleGraph var93 = new com.google.javascript.jscomp.JSModuleGraph(var92);
    com.google.javascript.jscomp.JSModule var94 = null;
    com.google.javascript.jscomp.JSModule var95 = null;
    com.google.javascript.jscomp.JSModule var96 = var93.getDeepestCommonDependencyInclusive(var94, var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + ""+ "'", var73.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);

  }

  public void test281() {}
//   public void test281() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test281"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var1);
//     double var3 = var0.getProgress();
//     var0.reportCodeChange();
//     var0.check();
// 
//   }

  public void test282() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test282"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    com.google.javascript.rhino.Node var12 = var10.getLastSibling();
    boolean var13 = var12.isArrayLit();
    com.google.javascript.rhino.Node var14 = var12.getParent();
    java.lang.String var15 = var12.toStringTree();
    var12.setSourceEncodedPosition(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.voidNode(var12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "STRING hi!\n"+ "'", var15.equals("STRING hi!\n"));

  }

  public void test283() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test283"); }


    com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromCode("hi!: ", "FALSE", "InputId: hi!: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test284() {}
//   public void test284() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test284"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
//     int var15 = var12.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
//     com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
//     com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
//     boolean var19 = var1.shouldTolerateUndefinedValues();
//     com.google.javascript.rhino.ErrorReporter var21 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
//     java.lang.Iterable var24 = var22.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var25 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
//     var26.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var29 = null;
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
//     com.google.javascript.rhino.jstype.FunctionType var33 = var26.createConstructorType(var29, false, var32);
//     boolean var34 = var33.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var35 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var35);
//     var36.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var39 = null;
//     com.google.javascript.rhino.jstype.JSType var41 = null;
//     com.google.javascript.rhino.jstype.JSType[] var42 = new com.google.javascript.rhino.jstype.JSType[] { var41};
//     com.google.javascript.rhino.jstype.FunctionType var43 = var36.createConstructorType(var39, false, var42);
//     com.google.javascript.rhino.jstype.FunctionType var44 = var22.createConstructorType((com.google.javascript.rhino.jstype.JSType)var33, var42);
//     com.google.javascript.rhino.jstype.ObjectType var45 = var33.getPrototype();
//     var1.unregisterPropertyOnType("LinkedGraph", (com.google.javascript.rhino.jstype.JSType)var33);
//     com.google.javascript.rhino.ErrorReporter var47 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
//     java.lang.Iterable var50 = var48.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var51 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
//     var52.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var55 = null;
//     com.google.javascript.rhino.jstype.JSType var57 = null;
//     com.google.javascript.rhino.jstype.JSType[] var58 = new com.google.javascript.rhino.jstype.JSType[] { var57};
//     com.google.javascript.rhino.jstype.FunctionType var59 = var52.createConstructorType(var55, false, var58);
//     boolean var60 = var59.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var61 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var61);
//     var62.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var65 = null;
//     com.google.javascript.rhino.jstype.JSType var67 = null;
//     com.google.javascript.rhino.jstype.JSType[] var68 = new com.google.javascript.rhino.jstype.JSType[] { var67};
//     com.google.javascript.rhino.jstype.FunctionType var69 = var62.createConstructorType(var65, false, var68);
//     com.google.javascript.rhino.jstype.FunctionType var70 = var48.createConstructorType((com.google.javascript.rhino.jstype.JSType)var59, var68);
//     boolean var71 = var59.isReturnTypeInferred();
//     boolean var72 = var59.isNativeObjectType();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var73 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var74 = var73.getGraphvizNodes();
//     com.google.javascript.rhino.jstype.FunctionType var75 = var1.createFunctionType((com.google.javascript.rhino.jstype.JSType)var59, var74);
//     com.google.javascript.rhino.ErrorReporter var76 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var76);
//     com.google.javascript.rhino.ErrorReporter var78 = var77.getErrorReporter();
//     com.google.javascript.rhino.jstype.TemplateType var79 = var77.getObjectElementKey();
//     var79.clearCachedValues();
//     boolean var81 = var79.hasAnyTemplateTypesInternal();
//     boolean var82 = var75.canTestForEqualityWith((com.google.javascript.rhino.jstype.JSType)var79);
// 
//   }

  public void test285() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test285"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    java.util.Set var10 = null;
    var2.setDirectives(var10);
    com.google.javascript.jscomp.CheckLevel var12 = null;
    com.google.javascript.jscomp.CheckLevel var14 = null;
    com.google.javascript.jscomp.DiagnosticType var16 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var14, "");
    java.lang.String[] var17 = null;
    com.google.javascript.jscomp.JSError var18 = com.google.javascript.jscomp.JSError.make("hi!", var2, var12, var16, var17);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.string("hi!");
    boolean var22 = var21.isNE();
    int var23 = var21.getSideEffectFlags();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.string("hi!");
    boolean var26 = var25.isNE();
    boolean var27 = var25.isWith();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.getprop(var21, var25);
    java.util.Set var29 = null;
    var21.setDirectives(var29);
    com.google.javascript.jscomp.CheckLevel var31 = null;
    com.google.javascript.jscomp.CheckLevel var33 = null;
    com.google.javascript.jscomp.DiagnosticType var35 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var33, "");
    java.lang.String[] var36 = null;
    com.google.javascript.jscomp.JSError var37 = com.google.javascript.jscomp.JSError.make("hi!", var21, var31, var35, var36);
    var21.addSuppression("");
    com.google.javascript.rhino.Node var40 = var2.useSourceInfoFromForTree(var21);
    boolean var41 = var2.isStringKey();
    boolean var42 = var2.isQuotedString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test286() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test286"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var1 = com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.valueOf("()");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test287() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test287"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    boolean var9 = var8.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    var11.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var14 = null;
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType[] var17 = new com.google.javascript.rhino.jstype.JSType[] { var16};
    com.google.javascript.rhino.jstype.FunctionType var18 = var11.createConstructorType(var14, false, var17);
    com.google.javascript.rhino.jstype.JSType var20 = var18.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var21 = var18.getTypeOfThis();
    boolean var22 = var8.canCastTo((com.google.javascript.rhino.jstype.JSType)var18);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var35 = var32.getTypeOfThis();
    boolean var36 = var35.isAllType();
    com.google.javascript.rhino.Node var37 = null;
    boolean var38 = var18.defineInferredProperty("", var35, var37);
    com.google.javascript.rhino.jstype.JSType var39 = var35.restrictByNotNullOrUndefined();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test288() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test288"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    double var1 = var0.getProgress();
    com.google.javascript.jscomp.NodeTraversal.Callback var2 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.block();
    int var4 = var3.getSourceOffset();
    com.google.javascript.rhino.Node[] var5 = new com.google.javascript.rhino.Node[] { var3};
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.script(var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var0, var2, var5);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test289() {}
//   public void test289() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test289"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var1);
//     double var3 = var0.getProgress();
//     var0.reportCodeChange();
//     com.google.javascript.rhino.head.ast.AstRoot var6 = var0.getOldParseTreeByName("LinkedGraph");
//     com.google.javascript.jscomp.NodeTraversal.Callback var7 = null;
//     com.google.javascript.jscomp.NodeTraversal var8 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var7);
//     com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
//     com.google.javascript.jscomp.NodeTraversal var10 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var9);
//     com.google.javascript.jscomp.type.ReverseAbstractInterpreter var11 = var0.getReverseAbstractInterpreter();
// 
//   }

  public void test290() {}
//   public void test290() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test290"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
//     com.google.javascript.rhino.ErrorReporter var3 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
//     var4.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.jstype.JSType var9 = null;
//     com.google.javascript.rhino.jstype.JSType[] var10 = new com.google.javascript.rhino.jstype.JSType[] { var9};
//     com.google.javascript.rhino.jstype.FunctionType var11 = var4.createConstructorType(var7, false, var10);
//     boolean var12 = var11.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var13 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
//     var14.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     com.google.javascript.rhino.jstype.JSType var19 = null;
//     com.google.javascript.rhino.jstype.JSType[] var20 = new com.google.javascript.rhino.jstype.JSType[] { var19};
//     com.google.javascript.rhino.jstype.FunctionType var21 = var14.createConstructorType(var17, false, var20);
//     com.google.javascript.rhino.jstype.JSType var23 = var21.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var24 = var21.getTypeOfThis();
//     boolean var25 = var11.canCastTo((com.google.javascript.rhino.jstype.JSType)var21);
//     boolean var26 = var21.isDateType();
//     com.google.javascript.rhino.jstype.JSType[] var27 = new com.google.javascript.rhino.jstype.JSType[] { var21};
//     com.google.javascript.rhino.Node var28 = var1.createParametersWithVarArgs(var27);
//     java.lang.Iterable var30 = var1.getEachReferenceTypeWithProperty("()");
//     com.google.javascript.rhino.jstype.TemplateType var31 = var1.getObjectIndexKey();
//     boolean var32 = var31.isTemplatizedType();
// 
//   }

  public void test291() {}
//   public void test291() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test291"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setInlineProperties(true);
//     var0.setConvertToDottedProperties(false);
//     com.google.javascript.jscomp.AbstractCompiler var5 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
//     com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal(var5, var6);
//     java.lang.String var8 = var7.getSourceName();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var9 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var10 = var9.getGraphvizNodes();
//     com.google.javascript.rhino.ErrorReporter var11 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
//     var12.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
//     com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
//     com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
//     com.google.javascript.jscomp.graph.GraphNode var23 = var9.getNode((java.lang.Object)var22);
//     java.util.List var24 = var9.getEdges();
//     var7.traverseRoots(var24);
//     com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.block(var24);
//     var0.setManageClosureDependencies(var24);
//     var0.setAngularPass(false);
//     var0.setMarkAsCompiled(true);
//     java.util.Map var32 = var0.getDefineReplacements();
//     com.google.javascript.rhino.jstype.JSTypeRegistry var33 = null;
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var34 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var33);
//     com.google.javascript.rhino.ErrorReporter var35 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var35);
//     var36.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var39 = null;
//     com.google.javascript.rhino.jstype.JSType var41 = null;
//     com.google.javascript.rhino.jstype.JSType[] var42 = new com.google.javascript.rhino.jstype.JSType[] { var41};
//     com.google.javascript.rhino.jstype.FunctionType var43 = var36.createConstructorType(var39, false, var42);
//     boolean var44 = var34.addRequiredParams(var42);
//     com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var47 = var46.isNE();
//     int var48 = var46.getSideEffectFlags();
//     com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var51 = var50.isNE();
//     boolean var52 = var50.isWith();
//     com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.IR.getprop(var46, var50);
//     com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.string("hi!");
//     var50.addChildToBack(var55);
//     com.google.javascript.rhino.Node.FileLevelJsDocBuilder var57 = var55.getJsDocBuilderForNode();
//     int var58 = var55.getCharno();
//     java.lang.Object var60 = var55.getProp(10);
//     com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var63 = var62.isNE();
//     int var64 = var62.getSideEffectFlags();
//     com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var67 = var66.isNE();
//     boolean var68 = var66.isWith();
//     com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.IR.getprop(var62, var66);
//     com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.string("hi!");
//     var66.addChildToBack(var71);
//     com.google.javascript.rhino.Node var73 = var55.srcrefTree(var71);
//     com.google.javascript.rhino.Node var74 = var34.newParameterFromNode(var55);
//     com.google.javascript.rhino.Node var75 = var34.build();
//     com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.number((-1.0d));
//     var75.addChildrenToBack(var77);
//     boolean var79 = var75.isCall();
//     com.google.javascript.jscomp.NodeUtil.verifyScopeChanges(var32, var75, true);
// 
//   }

  public void test292() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test292"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
    com.google.javascript.rhino.jstype.TemplateType var3 = var1.getObjectElementKey();
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var15 = var12.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var16 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
    var17.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.rhino.jstype.JSType var22 = null;
    com.google.javascript.rhino.jstype.JSType[] var23 = new com.google.javascript.rhino.jstype.JSType[] { var22};
    com.google.javascript.rhino.jstype.FunctionType var24 = var17.createConstructorType(var20, false, var23);
    boolean var25 = var24.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
    var27.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.rhino.jstype.JSType[] var33 = new com.google.javascript.rhino.jstype.JSType[] { var32};
    com.google.javascript.rhino.jstype.FunctionType var34 = var27.createConstructorType(var30, false, var33);
    com.google.javascript.rhino.jstype.JSType var36 = var34.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var37 = var34.getTypeOfThis();
    boolean var38 = var24.canCastTo((com.google.javascript.rhino.jstype.JSType)var34);
    boolean var39 = var12.hasEqualCallType(var34);
    boolean var40 = var12.matchesUint32Context();
    com.google.javascript.rhino.jstype.JSType var42 = var1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType)var12, "goog.global");
    com.google.javascript.rhino.ErrorReporter var43 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var43);
    com.google.javascript.rhino.ErrorReporter var45 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
    var46.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.rhino.jstype.JSType[] var52 = new com.google.javascript.rhino.jstype.JSType[] { var51};
    com.google.javascript.rhino.jstype.FunctionType var53 = var46.createConstructorType(var49, false, var52);
    boolean var54 = var53.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var55 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var55);
    var56.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.rhino.jstype.JSType var61 = null;
    com.google.javascript.rhino.jstype.JSType[] var62 = new com.google.javascript.rhino.jstype.JSType[] { var61};
    com.google.javascript.rhino.jstype.FunctionType var63 = var56.createConstructorType(var59, false, var62);
    com.google.javascript.rhino.jstype.JSType var65 = var63.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var66 = var63.getTypeOfThis();
    boolean var67 = var53.canCastTo((com.google.javascript.rhino.jstype.JSType)var63);
    com.google.javascript.rhino.ErrorReporter var68 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var69 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var68);
    var69.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var72 = null;
    com.google.javascript.rhino.jstype.JSType var74 = null;
    com.google.javascript.rhino.jstype.JSType[] var75 = new com.google.javascript.rhino.jstype.JSType[] { var74};
    com.google.javascript.rhino.jstype.FunctionType var76 = var69.createConstructorType(var72, false, var75);
    boolean var77 = var76.isInterface();
    com.google.javascript.rhino.jstype.JSType[] var78 = new com.google.javascript.rhino.jstype.JSType[] { var76};
    com.google.javascript.rhino.jstype.FunctionType var79 = var44.createConstructorType((com.google.javascript.rhino.jstype.JSType)var53, var78);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var80 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var81 = var80.getGraphvizNodes();
    var44.setTemplateTypeNames(var81);
    com.google.javascript.jscomp.deps.SortedDependencies var83 = new com.google.javascript.jscomp.deps.SortedDependencies(var81);
    boolean var84 = var42.equals((java.lang.Object)var83);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.deps.DependencyInfo var86 = var83.getInputProviding("Object#Key");
      fail("Expected exception of type com.google.javascript.jscomp.deps.SortedDependencies.MissingProvideException");
    } catch (com.google.javascript.jscomp.deps.SortedDependencies.MissingProvideException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);

  }

  public void test293() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test293"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var1 = var0.getGraphvizEdges();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.string("hi!");
    boolean var5 = var4.isNE();
    int var6 = var4.getSideEffectFlags();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.string("hi!");
    boolean var9 = var8.isNE();
    boolean var10 = var8.isWith();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.getprop(var4, var8);
    var11.setLineno(10);
    boolean var14 = var2.hasNode((java.lang.Object)var11);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var15 = var0.createDirectedGraphNode((java.lang.Object)var2);
    com.google.javascript.jscomp.CompilerOptions var16 = new com.google.javascript.jscomp.CompilerOptions();
    var16.setInlineProperties(true);
    var16.setMoveFunctionDeclarations(true);
    var16.setMoveFunctionDeclarations(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var23 = var2.getDirectedSuccNodes((java.lang.Object)false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test294() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test294"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
    boolean var4 = var3.isNE();
    int var5 = var3.getSideEffectFlags();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
    boolean var8 = var7.isNE();
    boolean var9 = var7.isWith();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
    java.util.Set var11 = null;
    var3.setDirectives(var11);
    com.google.javascript.jscomp.CheckLevel var13 = null;
    com.google.javascript.jscomp.CheckLevel var15 = null;
    com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var15, "");
    java.lang.String[] var18 = null;
    com.google.javascript.jscomp.JSError var19 = com.google.javascript.jscomp.JSError.make("hi!", var3, var13, var17, var18);
    com.google.javascript.jscomp.DiagnosticGroup var20 = com.google.javascript.jscomp.DiagnosticGroup.forType(var17);
    com.google.javascript.jscomp.DiagnosticGroup[] var21 = new com.google.javascript.jscomp.DiagnosticGroup[] { var20};
    com.google.javascript.jscomp.DiagnosticGroup var22 = new com.google.javascript.jscomp.DiagnosticGroup(var21);
    com.google.javascript.jscomp.DiagnosticGroup var23 = new com.google.javascript.jscomp.DiagnosticGroup("Node tree inequality:\nTree1:\nSTRING LinkedGraph\n\n\nTree2:\nSTRING hi!\n\n\nSubtree1: STRING LinkedGraph\n\n\nSubtree2: STRING hi!\n", var21);
    java.util.logging.Logger var24 = null;
    com.google.javascript.jscomp.LoggerErrorManager var25 = new com.google.javascript.jscomp.LoggerErrorManager(var24);
    int var26 = var25.getErrorCount();
    com.google.javascript.jscomp.CheckLevel var27 = null;
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.string("hi!");
    boolean var31 = var30.isNE();
    int var32 = var30.getSideEffectFlags();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.string("hi!");
    boolean var35 = var34.isNE();
    boolean var36 = var34.isWith();
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.getprop(var30, var34);
    java.util.Set var38 = null;
    var30.setDirectives(var38);
    com.google.javascript.jscomp.CheckLevel var40 = null;
    com.google.javascript.jscomp.CheckLevel var42 = null;
    com.google.javascript.jscomp.DiagnosticType var44 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var42, "");
    java.lang.String[] var45 = null;
    com.google.javascript.jscomp.JSError var46 = com.google.javascript.jscomp.JSError.make("hi!", var30, var40, var44, var45);
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.string("hi!");
    boolean var51 = var50.isNE();
    int var52 = var50.getSideEffectFlags();
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.string("hi!");
    boolean var55 = var54.isNE();
    boolean var56 = var54.isWith();
    com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.IR.getprop(var50, var54);
    java.util.Set var58 = null;
    var50.setDirectives(var58);
    com.google.javascript.jscomp.CheckLevel var60 = null;
    com.google.javascript.jscomp.CheckLevel var62 = null;
    com.google.javascript.jscomp.DiagnosticType var64 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var62, "");
    java.lang.String[] var65 = null;
    com.google.javascript.jscomp.JSError var66 = com.google.javascript.jscomp.JSError.make("hi!", var50, var60, var64, var65);
    com.google.javascript.jscomp.CheckLevel var71 = null;
    com.google.javascript.jscomp.DiagnosticType var73 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var71, "");
    java.lang.String[] var75 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var76 = com.google.javascript.jscomp.JSError.make("", 100, 0, var73, var75);
    java.lang.String[] var78 = new java.lang.String[] { "hi!"};
    com.google.javascript.jscomp.JSError var79 = com.google.javascript.jscomp.JSError.make("hi!", var50, var73, var78);
    com.google.javascript.jscomp.JSError var80 = com.google.javascript.jscomp.JSError.make(var44, var78);
    var25.report(var27, var80);
    com.google.javascript.jscomp.CheckLevel var82 = var80.getDefaultLevel();
    boolean var83 = var23.matches(var80);
    int var84 = var80.getNodeLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);

  }

  public void test295() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test295"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.stringKey("STRING hi!\n");
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
    boolean var4 = var3.isNE();
    int var5 = var3.getSideEffectFlags();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
    boolean var8 = var7.isNE();
    boolean var9 = var7.isWith();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
    java.lang.String var11 = com.google.javascript.jscomp.NodeUtil.getSourceName(var3);
    boolean var12 = var3.isCase();
    boolean var13 = var3.isRegExp();
    com.google.javascript.rhino.Node var14 = var3.detachFromParent();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.string("hi!");
    boolean var17 = var16.isNE();
    int var18 = var16.getSideEffectFlags();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.string("hi!");
    boolean var21 = var20.isNE();
    boolean var22 = var20.isWith();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.getprop(var16, var20);
    var20.removeProp(0);
    java.lang.String var26 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var20);
    java.util.Set var27 = null;
    var20.setDirectives(var27);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.forIn(var1, var14, var20);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test296() {}
//   public void test296() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test296"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
//     int var15 = var12.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
//     com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
//     com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
//     boolean var19 = var18.hasAnyTemplateTypesInternal();
//     com.google.javascript.rhino.jstype.BooleanLiteralSet var20 = var18.getPossibleToBooleanOutcomes();
//     boolean var21 = var18.isStringValueType();
//     boolean var23 = var18.hasProperty("TRUE 10\n");
// 
//   }

  public void test297() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test297"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    var2.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
    com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
    boolean var10 = var9.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    var12.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
    com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
    boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    var37.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
    boolean var45 = var44.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    var47.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
    com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
    boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
    var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.string("hi!");
    boolean var62 = var61.isNE();
    int var63 = var61.getSideEffectFlags();
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.string("hi!");
    boolean var66 = var65.isNE();
    boolean var67 = var65.isWith();
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.getprop(var61, var65);
    com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.IR.string("hi!");
    var65.addChildToBack(var70);
    com.google.javascript.rhino.Node var72 = var70.getLastSibling();
    boolean var73 = var72.isLocalResultCall();
    java.util.Map var74 = null;
    var0.checkForCallingConventionDefiningCalls(var72, var74);
    var72.setSourceFileForTesting("TRUE");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var72.setDouble(100.0d);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test298() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test298"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    var2.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
    com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
    boolean var10 = var9.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    var12.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
    com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
    boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    var37.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
    boolean var45 = var44.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    var47.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
    com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
    boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
    var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var62 = var61.cloneNode();
    boolean var63 = var61.isDelProp();
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var66 = var65.cloneNode();
    boolean var67 = var65.isDelProp();
    com.google.javascript.rhino.Node var68 = var61.clonePropsFrom(var65);
    com.google.javascript.rhino.JSDocInfo var69 = var65.getJSDocInfo();
    com.google.javascript.jscomp.CodingConvention.Bind var71 = var0.describeFunctionBind(var65, true);
    com.google.javascript.rhino.ErrorReporter var72 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var73 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var72);
    var73.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var76 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var76);
    var77.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var80 = null;
    com.google.javascript.rhino.jstype.JSType var82 = null;
    com.google.javascript.rhino.jstype.JSType[] var83 = new com.google.javascript.rhino.jstype.JSType[] { var82};
    com.google.javascript.rhino.jstype.FunctionType var84 = var77.createConstructorType(var80, false, var83);
    com.google.javascript.rhino.jstype.JSType var86 = var84.findPropertyType("hi!");
    int var87 = var84.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var88 = new com.google.javascript.rhino.jstype.JSType[] { var84};
    com.google.javascript.rhino.Node var89 = var73.createParametersWithVarArgs(var88);
    com.google.javascript.rhino.Node var90 = var65.useSourceInfoFrom(var89);
    com.google.javascript.rhino.Node var92 = com.google.javascript.rhino.IR.number(0.0d);
    java.lang.String var96 = var92.toString(true, false, false);
    int var97 = var89.getIndexOfChild(var92);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var98 = com.google.javascript.jscomp.NodeUtil.isLValue(var89);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "NUMBER 0.0"+ "'", var96.equals("NUMBER 0.0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == (-1));

  }

  public void test299() {}
//   public void test299() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test299"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.ErrorReporter var1 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
//     var2.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
//     com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
//     boolean var10 = var9.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var11 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
//     var12.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
//     com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
//     com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
//     boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
//     com.google.javascript.rhino.ErrorReporter var24 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
//     var25.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var28 = null;
//     com.google.javascript.rhino.jstype.JSType var30 = null;
//     com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
//     com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
//     com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
//     com.google.javascript.rhino.ErrorReporter var36 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
//     var37.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var40 = null;
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
//     com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
//     boolean var45 = var44.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var46 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
//     var47.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var50 = null;
//     com.google.javascript.rhino.jstype.JSType var52 = null;
//     com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
//     com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
//     com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
//     boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
//     var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
//     java.lang.String var60 = var0.getExportPropertyFunction();
//     com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.empty();
//     java.util.List var62 = var0.identifyTypeDeclarationCall(var61);
// 
//   }

  public void test300() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test300"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineProperties(true);
    var0.setConvertToDottedProperties(false);
    com.google.javascript.jscomp.AbstractCompiler var5 = null;
    com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
    com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal(var5, var6);
    java.lang.String var8 = var7.getSourceName();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var9 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var10 = var9.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    var12.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
    com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var23 = var9.getNode((java.lang.Object)var22);
    java.util.List var24 = var9.getEdges();
    var7.traverseRoots(var24);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.block(var24);
    var0.setManageClosureDependencies(var24);
    var0.setAngularPass(false);
    var0.setMarkAsCompiled(true);
    var0.setLooseTypes(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test301() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test301"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    var9.setLineno(10);
    boolean var12 = var0.hasNode((java.lang.Object)var9);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.string("hi!");
    boolean var16 = var15.isNE();
    int var17 = var15.getSideEffectFlags();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.string("hi!");
    boolean var20 = var19.isNE();
    boolean var21 = var19.isWith();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.getprop(var15, var19);
    java.util.Set var23 = null;
    var15.setDirectives(var23);
    com.google.javascript.jscomp.CheckLevel var25 = null;
    com.google.javascript.jscomp.CheckLevel var27 = null;
    com.google.javascript.jscomp.DiagnosticType var29 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var27, "");
    java.lang.String[] var30 = null;
    com.google.javascript.jscomp.JSError var31 = com.google.javascript.jscomp.JSError.make("hi!", var15, var25, var29, var30);
    var15.addSuppression("");
    com.google.javascript.rhino.jstype.JSType var34 = var15.getJSType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var35 = var0.getDirectedPredNodes((java.lang.Object)var15);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);

  }

  public void test302() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test302"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
    com.google.javascript.rhino.jstype.TemplateType var3 = var1.getObjectElementKey();
    com.google.javascript.rhino.ErrorReporter var4 = var1.getErrorReporter();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var8 = var7.cloneNode();
    boolean var9 = var7.isDelProp();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var12 = var11.cloneNode();
    boolean var13 = var11.isDelProp();
    com.google.javascript.rhino.Node var14 = var7.clonePropsFrom(var11);
    com.google.javascript.rhino.JSDocInfo var15 = var11.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.breakNode(var11);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.string("hi!");
    boolean var19 = var18.isNE();
    int var20 = var18.getSideEffectFlags();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.string("hi!");
    boolean var23 = var22.isNE();
    boolean var24 = var22.isWith();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.getprop(var18, var22);
    java.lang.Iterable var26 = var25.siblings();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.string("hi!");
    boolean var29 = var28.isNE();
    int var30 = var28.getSideEffectFlags();
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.string("hi!");
    boolean var33 = var32.isNE();
    boolean var34 = var32.isWith();
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.getprop(var28, var32);
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.string("hi!");
    var32.addChildToBack(var37);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var39 = var37.getJsDocBuilderForNode();
    int var40 = var37.getCharno();
    java.lang.Object var42 = var37.getProp(10);
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.string("hi!");
    boolean var45 = var44.isNE();
    int var46 = var44.getSideEffectFlags();
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.string("hi!");
    boolean var49 = var48.isNE();
    boolean var50 = var48.isWith();
    com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.getprop(var44, var48);
    com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.IR.string("hi!");
    var48.addChildToBack(var53);
    com.google.javascript.rhino.Node var55 = var37.srcrefTree(var53);
    com.google.javascript.rhino.Node var56 = var25.useSourceInfoFromForTree(var55);
    com.google.javascript.rhino.Node var57 = var55.cloneTree();
    com.google.javascript.rhino.Node var58 = var16.useSourceInfoIfMissingFrom(var57);
    com.google.common.collect.ImmutableList var59 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.FunctionType var60 = var1.createInterfaceType("hi!: ", var58, var59);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test303() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test303"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
    boolean var11 = var10.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    var13.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType[] var19 = new com.google.javascript.rhino.jstype.JSType[] { var18};
    com.google.javascript.rhino.jstype.FunctionType var20 = var13.createConstructorType(var16, false, var19);
    com.google.javascript.rhino.jstype.JSType var22 = var20.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var23 = var20.getTypeOfThis();
    boolean var24 = var10.canCastTo((com.google.javascript.rhino.jstype.JSType)var20);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    var26.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var29 = null;
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.jstype.FunctionType var33 = var26.createConstructorType(var29, false, var32);
    com.google.javascript.rhino.jstype.JSType var35 = var33.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var36 = var33.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    var38.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var41 = null;
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.rhino.jstype.JSType[] var44 = new com.google.javascript.rhino.jstype.JSType[] { var43};
    com.google.javascript.rhino.jstype.FunctionType var45 = var38.createConstructorType(var41, false, var44);
    boolean var46 = var45.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    var48.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.rhino.jstype.JSType var53 = null;
    com.google.javascript.rhino.jstype.JSType[] var54 = new com.google.javascript.rhino.jstype.JSType[] { var53};
    com.google.javascript.rhino.jstype.FunctionType var55 = var48.createConstructorType(var51, false, var54);
    com.google.javascript.rhino.jstype.JSType var57 = var55.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var58 = var55.getTypeOfThis();
    boolean var59 = var45.canCastTo((com.google.javascript.rhino.jstype.JSType)var55);
    var1.applySingletonGetter(var10, var33, (com.google.javascript.rhino.jstype.ObjectType)var55);
    java.lang.String var61 = var1.getExportPropertyFunction();
    java.lang.String var62 = var1.getGlobalObject();
    boolean var63 = var0.hasNode((java.lang.Object)var1);
    boolean var65 = var1.isConstant("hi!: ");
    java.util.Collection var66 = var1.getIndirectlyDeclaredProperties();
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.string("FALSE");
    boolean var69 = var68.isScript();
    boolean var70 = var1.isVarArgsParameter(var68);
    boolean var72 = var1.isSuperClassReference("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "goog.exportProperty"+ "'", var61.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "goog.global"+ "'", var62.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test304() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test304"); }


    com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.jscomp.GoogleCodingConvention var2 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var1);
    java.lang.String var3 = var2.getExportPropertyFunction();
    boolean var5 = var2.isValidEnumKey("");
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
    boolean var8 = var7.isNE();
    int var9 = var7.getSideEffectFlags();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.string("hi!");
    boolean var12 = var11.isNE();
    boolean var13 = var11.isWith();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.getprop(var7, var11);
    var11.removeProp(0);
    java.lang.String var17 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var11);
    java.util.Set var18 = null;
    var11.setDirectives(var18);
    java.lang.Iterable var20 = var11.siblings();
    boolean var21 = var2.isVarArgsParameter(var11);
    boolean var24 = var2.isExported("STRING hi!", true);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.Node.newString("LinkedGraph");
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.string("hi!");
    boolean var29 = var28.isNE();
    int var30 = var28.getSideEffectFlags();
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.string("hi!");
    boolean var33 = var32.isNE();
    boolean var34 = var32.isWith();
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.getprop(var28, var32);
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.string("hi!");
    var32.addChildToBack(var37);
    boolean var39 = var32.isVar();
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.string("hi!");
    boolean var42 = var41.isNE();
    int var43 = var41.getSideEffectFlags();
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.string("hi!");
    boolean var46 = var45.isNE();
    boolean var47 = var45.isWith();
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.getprop(var41, var45);
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.string("hi!");
    var45.addChildToBack(var50);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var52 = var50.getJsDocBuilderForNode();
    int var53 = var50.getCharno();
    boolean var54 = var32.isEquivalentTo(var50);
    java.lang.String var55 = var26.checkTreeEquals(var50);
    boolean var56 = var2.isVarArgsParameter(var50);
    boolean var57 = var50.isGetterDef();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var60 = new com.google.javascript.rhino.Node(10, var50, 40, 40);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "goog.exportProperty"+ "'", var3.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "Node tree inequality:\nTree1:\nSTRING LinkedGraph\n\n\nTree2:\nSTRING hi!\n\n\nSubtree1: STRING LinkedGraph\n\n\nSubtree2: STRING hi!\n"+ "'", var55.equals("Node tree inequality:\nTree1:\nSTRING LinkedGraph\n\n\nTree2:\nSTRING hi!\n\n\nSubtree1: STRING LinkedGraph\n\n\nSubtree2: STRING hi!\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test305() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test305"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.empty();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.number(0.0d);
    java.lang.String var6 = var2.toString(true, false, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var0, var2);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "NUMBER 0.0"+ "'", var6.equals("NUMBER 0.0"));

  }

  public void test306() {}
//   public void test306() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test306"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.propdef(var0, var2);
// 
//   }

  public void test307() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test307"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var12 = var10.getJsDocBuilderForNode();
    int var13 = var10.getCharno();
    java.lang.Object var15 = var10.getProp(10);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    int var19 = var17.getSideEffectFlags();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.string("hi!");
    boolean var22 = var21.isNE();
    boolean var23 = var21.isWith();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.getprop(var17, var21);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.string("hi!");
    var21.addChildToBack(var26);
    com.google.javascript.rhino.Node var28 = var10.srcrefTree(var26);
    boolean var29 = var26.isFor();
    com.google.javascript.rhino.Node var30 = var26.getLastSibling();
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.string("hi!");
    boolean var33 = var32.isNE();
    int var34 = var32.getSideEffectFlags();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.string("hi!");
    boolean var37 = var36.isNE();
    boolean var38 = var36.isWith();
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.getprop(var32, var36);
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.string("hi!");
    var36.addChildToBack(var41);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var43 = var41.getJsDocBuilderForNode();
    int var44 = var41.getCharno();
    java.lang.Object var46 = var41.getProp(10);
    com.google.javascript.rhino.Node var47 = var41.getFirstChild();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.propdef(var30, var41);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);

  }

  public void test308() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test308"); }


    com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.jscomp.GoogleCodingConvention var2 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var1);
    java.lang.String var3 = var2.getExportPropertyFunction();
    boolean var5 = var2.isValidEnumKey("");
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
    boolean var8 = var7.isNE();
    int var9 = var7.getSideEffectFlags();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.string("hi!");
    boolean var12 = var11.isNE();
    boolean var13 = var11.isWith();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.getprop(var7, var11);
    var11.removeProp(0);
    java.lang.String var17 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var11);
    java.util.Set var18 = null;
    var11.setDirectives(var18);
    java.lang.Iterable var20 = var11.siblings();
    boolean var21 = var2.isVarArgsParameter(var11);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.string("hi!");
    boolean var25 = var24.isNE();
    int var26 = var24.getSideEffectFlags();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.string("hi!");
    boolean var29 = var28.isNE();
    boolean var30 = var28.isWith();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.getprop(var24, var28);
    java.util.Set var32 = null;
    var24.setDirectives(var32);
    com.google.javascript.jscomp.CheckLevel var34 = null;
    com.google.javascript.jscomp.CheckLevel var36 = null;
    com.google.javascript.jscomp.DiagnosticType var38 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var36, "");
    java.lang.String[] var39 = null;
    com.google.javascript.jscomp.JSError var40 = com.google.javascript.jscomp.JSError.make("hi!", var24, var34, var38, var39);
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.string("hi!");
    boolean var44 = var43.isNE();
    int var45 = var43.getSideEffectFlags();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.string("hi!");
    boolean var48 = var47.isNE();
    boolean var49 = var47.isWith();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.getprop(var43, var47);
    java.util.Set var51 = null;
    var43.setDirectives(var51);
    com.google.javascript.jscomp.CheckLevel var53 = null;
    com.google.javascript.jscomp.CheckLevel var55 = null;
    com.google.javascript.jscomp.DiagnosticType var57 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var55, "");
    java.lang.String[] var58 = null;
    com.google.javascript.jscomp.JSError var59 = com.google.javascript.jscomp.JSError.make("hi!", var43, var53, var57, var58);
    var43.addSuppression("");
    com.google.javascript.rhino.Node var62 = var24.useSourceInfoFromForTree(var43);
    boolean var63 = var43.isGetElem();
    com.google.javascript.rhino.InputId var64 = var43.getInputId();
    com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var67 = var66.cloneNode();
    java.lang.String var68 = var2.extractClassNameIfProvide(var43, var67);
    com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.IR.string("hi!");
    boolean var71 = var70.isNE();
    int var72 = var70.getSideEffectFlags();
    com.google.javascript.rhino.Node var74 = com.google.javascript.rhino.IR.string("hi!");
    boolean var75 = var74.isNE();
    boolean var76 = var74.isWith();
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.getprop(var70, var74);
    com.google.javascript.rhino.Node var79 = com.google.javascript.rhino.IR.string("hi!");
    var74.addChildToBack(var79);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var81 = var79.getJsDocBuilderForNode();
    int var82 = var79.getCharno();
    java.lang.Object var84 = var79.getProp(10);
    boolean var85 = var79.isThis();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var86 = new com.google.javascript.rhino.Node((-3), var67, var79);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "goog.exportProperty"+ "'", var3.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);

  }

  public void test309() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test309"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.error("goog.exportSymbol", "goog.exportProperty");
    com.google.javascript.jscomp.DiagnosticGroup var3 = com.google.javascript.jscomp.DiagnosticGroup.forType(var2);
    java.lang.Object var4 = null;
    boolean var5 = var2.equals(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test310() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test310"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode(var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.exprResult(var8);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test311() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test311"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
    int var15 = var12.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
    com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
    boolean var19 = var18.hasAnyTemplateTypesInternal();
    com.google.javascript.rhino.jstype.BooleanLiteralSet var20 = var18.getPossibleToBooleanOutcomes();
    java.lang.Class var21 = var20.getDeclaringClass();
    java.lang.Enum var23 = java.lang.Enum.<java.lang.Enum>valueOf(var21, "TRUE");
    int var24 = var23.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);

  }

  public void test312() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test312"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    boolean var9 = var8.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    var11.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var14 = null;
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType[] var17 = new com.google.javascript.rhino.jstype.JSType[] { var16};
    com.google.javascript.rhino.jstype.FunctionType var18 = var11.createConstructorType(var14, false, var17);
    com.google.javascript.rhino.jstype.JSType var20 = var18.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var21 = var18.getTypeOfThis();
    boolean var22 = var8.canCastTo((com.google.javascript.rhino.jstype.JSType)var18);
    boolean var23 = var18.isRegexpType();
    boolean var24 = var18.matchesUint32Context();
    com.google.javascript.rhino.JSDocInfo var26 = null;
    var18.setPropertyJSDocInfo("2014/12/24 01:41", var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test313() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test313"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    var6.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var9 = null;
    com.google.javascript.rhino.jstype.JSType var11 = null;
    com.google.javascript.rhino.jstype.JSType[] var12 = new com.google.javascript.rhino.jstype.JSType[] { var11};
    com.google.javascript.rhino.jstype.FunctionType var13 = var6.createConstructorType(var9, false, var12);
    com.google.javascript.rhino.jstype.JSType var15 = var13.findPropertyType("hi!");
    int var16 = var13.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var18 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var13, "");
    boolean var19 = var1.declareType("goog.exportProperty", (com.google.javascript.rhino.jstype.JSType)var13);
    boolean var20 = var13.isFunctionType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);

  }

  public void test314() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test314"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineProperties(true);
    var0.setIdGeneratorsMap("LABEL_NAME hi!");
    var0.setRemoveClosureAsserts(false);
    var0.setProcessObjectPropertyString(true);
    com.google.javascript.jscomp.CssRenamingMap var9 = null;
    var0.setCssRenamingMap(var9);
    var0.setRemoveUnusedClassProperties(true);

  }

  public void test315() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test315"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineProperties(true);
    var0.setIdGeneratorsMap("LABEL_NAME hi!");
    var0.setRemoveClosureAsserts(false);
    var0.setProcessObjectPropertyString(true);
    var0.setCollapseObjectLiterals(true);
    com.google.javascript.jscomp.CheckLevel var11 = null;
    var0.setCheckGlobalThisLevel(var11);
    var0.setProtectHiddenSideEffects(true);
    var0.setShadowVariables(false);
    java.lang.Object var17 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test316() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test316"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    double var1 = var0.getProgress();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String[] var2 = var0.toSourceArray();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.0d);

  }

  public void test317() {}
//   public void test317() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test317"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = null;
//     java.util.Map var2 = com.google.javascript.jscomp.NodeUtil.mapMainToClone(var0, var1);
// 
//   }

  public void test318() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test318"); }


    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
    int var5 = var4.getChangeTime();
    boolean var6 = var4.isCatch();
    boolean var7 = var4.isNE();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var10 = var9.cloneNode();
    boolean var11 = var9.isDelProp();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var14 = var13.cloneNode();
    boolean var15 = var13.isDelProp();
    com.google.javascript.rhino.Node var16 = var9.clonePropsFrom(var13);
    com.google.javascript.rhino.JSDocInfo var17 = var13.getJSDocInfo();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.breakNode(var13);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.string("hi!");
    boolean var21 = var20.isNE();
    int var22 = var20.getSideEffectFlags();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.string("hi!");
    boolean var25 = var24.isNE();
    boolean var26 = var24.isWith();
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.getprop(var20, var24);
    java.lang.Iterable var28 = var27.siblings();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.string("hi!");
    boolean var31 = var30.isNE();
    int var32 = var30.getSideEffectFlags();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.string("hi!");
    boolean var35 = var34.isNE();
    boolean var36 = var34.isWith();
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.getprop(var30, var34);
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.string("hi!");
    var34.addChildToBack(var39);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var41 = var39.getJsDocBuilderForNode();
    int var42 = var39.getCharno();
    java.lang.Object var44 = var39.getProp(10);
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.string("hi!");
    boolean var47 = var46.isNE();
    int var48 = var46.getSideEffectFlags();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.string("hi!");
    boolean var51 = var50.isNE();
    boolean var52 = var50.isWith();
    com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.IR.getprop(var46, var50);
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.string("hi!");
    var50.addChildToBack(var55);
    com.google.javascript.rhino.Node var57 = var39.srcrefTree(var55);
    com.google.javascript.rhino.Node var58 = var27.useSourceInfoFromForTree(var57);
    com.google.javascript.rhino.Node var59 = var57.cloneTree();
    com.google.javascript.rhino.Node var60 = var18.useSourceInfoIfMissingFrom(var59);
    var59.setCharno((-1));
    com.google.javascript.rhino.Node var63 = var4.useSourceInfoFromForTree(var59);
    boolean var64 = var4.isGetElem();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test319() {}
//   public void test319() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test319"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setInlineProperties(true);
//     var0.setRuntimeTypeCheckLogFunction("Object#Element");
//     var0.setAliasStringsBlacklist("LinkedGraph");
//     var0.setTrustedStrings(false);
//     var0.setUnaliasableGlobals("InputId: hi!: ");
//     boolean var11 = var0.assumeStrictThis();
//     var0.setSummaryDetailLevel(0);
//     com.google.javascript.jscomp.CheckLevel var14 = null;
//     var0.setCheckMissingReturn(var14);
//     com.google.javascript.jscomp.CompilerOptions.Reach var16 = null;
//     var0.setRemoveUnusedVariable(var16);
// 
//   }

  public void test320() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test320"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineProperties(true);
    var0.setMarkNoSideEffectCalls(false);
    var0.setSaveDataStructures(false);
    var0.resetWarningsGuard();
    var0.setDefineToDoubleLiteral("", 0.0d);

  }

  public void test321() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test321"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineProperties(true);
    var0.setConvertToDottedProperties(false);
    var0.setIdGeneratorsMap("Node tree inequality:\nTree1:\nLABEL_NAME hi!\n\n\nTree2:\nSTRING hi!\n\n\nSubtree1: LABEL_NAME hi!\n\n\nSubtree2: STRING hi!\n");

  }

  public void test322() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test322"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    var9.setLineno(10);
    boolean var12 = var0.hasNode((java.lang.Object)var9);
    com.google.javascript.rhino.JSDocInfo var13 = null;
    com.google.javascript.rhino.Node var14 = var9.setJSDocInfo(var13);
    boolean var15 = var9.isNE();
    boolean var16 = var9.isComma();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test323() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test323"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
    int var15 = var12.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
    com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
    boolean var19 = var1.shouldTolerateUndefinedValues();
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
    var21.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var24 = null;
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.rhino.jstype.JSType[] var27 = new com.google.javascript.rhino.jstype.JSType[] { var26};
    com.google.javascript.rhino.jstype.FunctionType var28 = var21.createConstructorType(var24, false, var27);
    boolean var29 = var28.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var30 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
    var31.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var34 = null;
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var36};
    com.google.javascript.rhino.jstype.FunctionType var38 = var31.createConstructorType(var34, false, var37);
    com.google.javascript.rhino.jstype.JSType var40 = var38.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var41 = var38.toMaybeFunctionType();
    boolean var43 = var41.isPropertyTypeDeclared("goog.exportProperty");
    com.google.javascript.rhino.jstype.JSType[] var44 = new com.google.javascript.rhino.jstype.JSType[] { var41};
    com.google.javascript.rhino.jstype.FunctionType var45 = var1.createFunctionType((com.google.javascript.rhino.jstype.JSType)var28, var44);
    com.google.javascript.rhino.jstype.TemplateTypeMap var46 = var45.getTemplateTypeMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test324() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test324"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
    com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var1);
    double var3 = var0.getProgress();
    var0.reportCodeChange();
    com.google.javascript.rhino.head.ast.AstRoot var6 = var0.getOldParseTreeByName("LinkedGraph");
    com.google.javascript.jscomp.NodeTraversal.Callback var7 = null;
    com.google.javascript.jscomp.NodeTraversal var8 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var7);
    com.google.javascript.jscomp.ErrorManager var9 = var0.getErrorManager();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.processDefines();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test325() {}
//   public void test325() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test325"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     var0.clearEdgeAnnotations();
//     com.google.javascript.rhino.ErrorReporter var2 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
//     var3.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
//     com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
//     var3.clearNamedTypes();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var13 = var12.getGraphvizNodes();
//     com.google.javascript.rhino.ErrorReporter var14 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
//     var15.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var18 = null;
//     com.google.javascript.rhino.jstype.JSType var20 = null;
//     com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
//     com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
//     com.google.javascript.rhino.jstype.JSType var24 = var22.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var25 = var22.getTypeOfThis();
//     com.google.javascript.jscomp.graph.GraphNode var26 = var12.getNode((java.lang.Object)var25);
//     com.google.javascript.rhino.ErrorReporter var28 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
//     com.google.javascript.rhino.ErrorReporter var30 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
//     var31.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var34 = null;
//     com.google.javascript.rhino.jstype.JSType var36 = null;
//     com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var36};
//     com.google.javascript.rhino.jstype.FunctionType var38 = var31.createConstructorType(var34, false, var37);
//     boolean var39 = var38.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var40 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40);
//     var41.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var44 = null;
//     com.google.javascript.rhino.jstype.JSType var46 = null;
//     com.google.javascript.rhino.jstype.JSType[] var47 = new com.google.javascript.rhino.jstype.JSType[] { var46};
//     com.google.javascript.rhino.jstype.FunctionType var48 = var41.createConstructorType(var44, false, var47);
//     com.google.javascript.rhino.jstype.JSType var50 = var48.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var51 = var48.getTypeOfThis();
//     boolean var52 = var38.canCastTo((com.google.javascript.rhino.jstype.JSType)var48);
//     com.google.javascript.rhino.ErrorReporter var53 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var53);
//     var54.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var57 = null;
//     com.google.javascript.rhino.jstype.JSType var59 = null;
//     com.google.javascript.rhino.jstype.JSType[] var60 = new com.google.javascript.rhino.jstype.JSType[] { var59};
//     com.google.javascript.rhino.jstype.FunctionType var61 = var54.createConstructorType(var57, false, var60);
//     boolean var62 = var61.isInterface();
//     com.google.javascript.rhino.jstype.JSType[] var63 = new com.google.javascript.rhino.jstype.JSType[] { var61};
//     com.google.javascript.rhino.jstype.FunctionType var64 = var29.createConstructorType((com.google.javascript.rhino.jstype.JSType)var38, var63);
//     com.google.javascript.rhino.jstype.FunctionType var65 = var3.createConstructorType(var25, false, var63);
//     com.google.javascript.rhino.ErrorReporter var66 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var66);
//     var67.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var70 = null;
//     com.google.javascript.rhino.jstype.JSType var72 = null;
//     com.google.javascript.rhino.jstype.JSType[] var73 = new com.google.javascript.rhino.jstype.JSType[] { var72};
//     com.google.javascript.rhino.jstype.FunctionType var74 = var67.createConstructorType(var70, false, var73);
//     boolean var75 = var74.isInterface();
//     boolean var76 = var25.isInvariant((com.google.javascript.rhino.jstype.JSType)var74);
//     com.google.javascript.rhino.jstype.FunctionType var77 = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType((com.google.javascript.rhino.jstype.JSType)var74);
//     boolean var78 = var77.isInterface();
//     java.util.List var79 = var0.getOutEdges((java.lang.Object)var77);
// 
//   }

  public void test326() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test326"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var11 = var8.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    var13.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType[] var19 = new com.google.javascript.rhino.jstype.JSType[] { var18};
    com.google.javascript.rhino.jstype.FunctionType var20 = var13.createConstructorType(var16, false, var19);
    boolean var21 = var20.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    var23.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType[] var29 = new com.google.javascript.rhino.jstype.JSType[] { var28};
    com.google.javascript.rhino.jstype.FunctionType var30 = var23.createConstructorType(var26, false, var29);
    com.google.javascript.rhino.jstype.JSType var32 = var30.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var33 = var30.getTypeOfThis();
    boolean var34 = var20.canCastTo((com.google.javascript.rhino.jstype.JSType)var30);
    boolean var35 = var8.hasEqualCallType(var30);
    boolean var36 = var30.isNumber();
    java.lang.Iterable var37 = var30.getImplementedInterfaces();
    com.google.javascript.rhino.ErrorReporter var39 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var39);
    var40.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.jstype.FunctionType var47 = var40.createConstructorType(var43, false, var46);
    com.google.javascript.rhino.jstype.JSType var49 = var47.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var50 = var47.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    var52.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var55 = null;
    com.google.javascript.rhino.jstype.JSType var57 = null;
    com.google.javascript.rhino.jstype.JSType[] var58 = new com.google.javascript.rhino.jstype.JSType[] { var57};
    com.google.javascript.rhino.jstype.FunctionType var59 = var52.createConstructorType(var55, false, var58);
    boolean var60 = var59.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var61 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var61);
    var62.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var65 = null;
    com.google.javascript.rhino.jstype.JSType var67 = null;
    com.google.javascript.rhino.jstype.JSType[] var68 = new com.google.javascript.rhino.jstype.JSType[] { var67};
    com.google.javascript.rhino.jstype.FunctionType var69 = var62.createConstructorType(var65, false, var68);
    com.google.javascript.rhino.jstype.JSType var71 = var69.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var72 = var69.getTypeOfThis();
    boolean var73 = var59.canCastTo((com.google.javascript.rhino.jstype.JSType)var69);
    boolean var74 = var47.hasEqualCallType(var69);
    boolean var75 = var47.matchesUint32Context();
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var78 = var77.cloneNode();
    boolean var79 = var77.isDelProp();
    com.google.javascript.rhino.Node var81 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var82 = var81.cloneNode();
    boolean var83 = var81.isDelProp();
    com.google.javascript.rhino.Node var84 = var77.clonePropsFrom(var81);
    com.google.javascript.rhino.JSDocInfo var85 = var81.getJSDocInfo();
    int var86 = var81.getLineno();
    boolean var87 = var81.isFalse();
    boolean var88 = var81.isWith();
    boolean var89 = var30.defineSynthesizedProperty("hi!.  at (unknown source) line (unknown line) : (unknown column)", (com.google.javascript.rhino.jstype.JSType)var47, var81);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var90 = var81.getDouble();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);

  }

  public void test327() {}
//   public void test327() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test327"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     java.lang.Iterable var3 = var1.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     boolean var13 = var12.isInterface();
//     boolean var15 = var1.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType)var12, "");
//     com.google.javascript.rhino.jstype.TemplateType var16 = var1.getObjectElementKey();
//     com.google.javascript.rhino.jstype.JSType[] var17 = null;
//     com.google.javascript.rhino.Node var18 = var1.createParameters(var17);
// 
//   }

  public void test328() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test328"); }


    com.google.javascript.jscomp.SourceAst var1 = null;
    com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var1, "hi!", false);
    com.google.javascript.jscomp.SourceAst var5 = var4.getSourceAst();
    com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.NodeTraversal.Callback var7 = null;
    com.google.javascript.jscomp.NodeTraversal var8 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var6, var7);
    double var9 = var6.getProgress();
    var4.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.string("hi!");
    boolean var13 = var12.isNE();
    com.google.javascript.rhino.Node var14 = var12.cloneNode();
    java.nio.charset.Charset var16 = null;
    com.google.javascript.jscomp.SourceFile var17 = com.google.javascript.jscomp.SourceFile.fromFile("goog.global", var16);
    var17.clearCachedSource();
    var12.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var17);
    com.google.javascript.rhino.Node var20 = var6.parse(var17);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var21 = com.google.javascript.rhino.SimpleErrorReporter.getMessage1("", (java.lang.Object)var20);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test329() {}
//   public void test329() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test329"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     double var1 = var0.getProgress();
//     double var2 = var0.getProgress();
//     com.google.javascript.jscomp.CodingConvention var3 = var0.getCodingConvention();
// 
//   }

  public void test330() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test330"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var11 = var8.getTypeOfThis();
    com.google.javascript.rhino.jstype.JSType var12 = var11.unboxesTo();
    com.google.javascript.rhino.jstype.JSType var14 = var11.getRestrictedTypeGivenToBooleanOutcome(false);
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
    var16.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.jstype.JSType var21 = null;
    com.google.javascript.rhino.jstype.JSType[] var22 = new com.google.javascript.rhino.jstype.JSType[] { var21};
    com.google.javascript.rhino.jstype.FunctionType var23 = var16.createConstructorType(var19, false, var22);
    com.google.javascript.rhino.jstype.JSType var25 = var23.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var26 = var23.toMaybeFunctionType();
    boolean var27 = var23.isUnionType();
    boolean var28 = com.google.javascript.rhino.jstype.JSType.isEquivalent(var14, (com.google.javascript.rhino.jstype.JSType)var23);
    com.google.javascript.rhino.SimpleErrorReporter var29 = new com.google.javascript.rhino.SimpleErrorReporter();
    com.google.javascript.rhino.ErrorReporter var30 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
    var31.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var34 = null;
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var36};
    com.google.javascript.rhino.jstype.FunctionType var38 = var31.createConstructorType(var34, false, var37);
    boolean var39 = var38.canBeCalled();
    boolean var40 = var38.isTemplatizedType();
    com.google.javascript.rhino.jstype.ObjectType var42 = var38.getTopMostDefiningType("hi!");
    com.google.javascript.rhino.jstype.JSType var43 = var14.resolve((com.google.javascript.rhino.ErrorReporter)var29, (com.google.javascript.rhino.jstype.StaticScope)var38);
    com.google.javascript.rhino.jstype.TemplateTypeMap var44 = var38.getTemplateTypeMap();
    com.google.javascript.rhino.ErrorReporter var45 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    var48.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.rhino.jstype.JSType var53 = null;
    com.google.javascript.rhino.jstype.JSType[] var54 = new com.google.javascript.rhino.jstype.JSType[] { var53};
    com.google.javascript.rhino.jstype.FunctionType var55 = var48.createConstructorType(var51, false, var54);
    com.google.javascript.rhino.jstype.JSType var57 = var55.findPropertyType("hi!");
    int var58 = var55.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var60 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var55, "");
    boolean var61 = var55.isFunctionPrototypeType();
    boolean var62 = var55.isTemplateType();
    boolean var63 = var55.isBooleanObjectType();
    com.google.javascript.rhino.ErrorReporter var64 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var64);
    var65.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var68 = null;
    com.google.javascript.rhino.jstype.JSType var70 = null;
    com.google.javascript.rhino.jstype.JSType[] var71 = new com.google.javascript.rhino.jstype.JSType[] { var70};
    com.google.javascript.rhino.jstype.FunctionType var72 = var65.createConstructorType(var68, false, var71);
    boolean var73 = var72.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var74 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var75 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var74);
    var75.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var78 = null;
    com.google.javascript.rhino.jstype.JSType var80 = null;
    com.google.javascript.rhino.jstype.JSType[] var81 = new com.google.javascript.rhino.jstype.JSType[] { var80};
    com.google.javascript.rhino.jstype.FunctionType var82 = var75.createConstructorType(var78, false, var81);
    com.google.javascript.rhino.jstype.JSType var84 = var82.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var85 = var82.getTypeOfThis();
    boolean var86 = var72.canCastTo((com.google.javascript.rhino.jstype.JSType)var82);
    boolean var87 = var82.isDateType();
    boolean var88 = var82.isNullType();
    boolean var89 = var82.hasCachedValues();
    boolean var90 = var82.isNullable();
    boolean var91 = var82.isConstructor();
    boolean var92 = var82.hasImplementedInterfaces();
    com.google.javascript.rhino.jstype.FunctionType var93 = var46.createFunctionTypeWithNewReturnType(var55, (com.google.javascript.rhino.jstype.JSType)var82);
    com.google.javascript.rhino.jstype.TemplateType var95 = var46.createTemplateType("goog.abstractMethod");
    boolean var96 = var44.hasTemplateType(var95);
    com.google.common.collect.ImmutableList var97 = var44.getTemplateKeys();
    boolean var98 = var44.isEmpty();
    com.google.common.collect.ImmutableList var99 = var44.getTemplateKeys();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test331() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test331"); }


    com.google.javascript.rhino.jstype.TernaryValue var1 = com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test332() {}
//   public void test332() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test332"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setInlineProperties(true);
//     var0.setMarkNoSideEffectCalls(false);
//     var0.setSaveDataStructures(false);
//     var0.resetWarningsGuard();
//     com.google.javascript.jscomp.CompilerOptions.Reach var8 = null;
//     var0.setRemoveUnusedVariables(var8);
// 
//   }

  public void test333() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test333"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.util.Set var9 = null;
    var1.setDirectives(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    int var15 = var13.getSideEffectFlags();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    boolean var19 = var17.isWith();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
    java.util.Set var21 = null;
    var13.setDirectives(var21);
    com.google.javascript.jscomp.CheckLevel var23 = null;
    com.google.javascript.jscomp.CheckLevel var25 = null;
    com.google.javascript.jscomp.DiagnosticType var27 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var25, "");
    java.lang.String[] var28 = null;
    com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("hi!", var13, var23, var27, var28);
    com.google.javascript.rhino.Node var30 = var1.useSourceInfoIfMissingFrom(var13);
    int var31 = var13.getSideEffectFlags();
    boolean var32 = var13.isVar();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var13.setDouble(10.0d);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test334() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test334"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionParamBuilder var1 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
    boolean var11 = var1.addRequiredParams(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    int var15 = var13.getSideEffectFlags();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    boolean var19 = var17.isWith();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.string("hi!");
    var17.addChildToBack(var22);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var24 = var22.getJsDocBuilderForNode();
    int var25 = var22.getCharno();
    java.lang.Object var27 = var22.getProp(10);
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.string("hi!");
    boolean var30 = var29.isNE();
    int var31 = var29.getSideEffectFlags();
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.string("hi!");
    boolean var34 = var33.isNE();
    boolean var35 = var33.isWith();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.getprop(var29, var33);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.string("hi!");
    var33.addChildToBack(var38);
    com.google.javascript.rhino.Node var40 = var22.srcrefTree(var38);
    com.google.javascript.rhino.Node var41 = var1.newParameterFromNode(var22);
    com.google.javascript.rhino.Node var42 = var1.build();
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.number((-1.0d));
    var42.addChildrenToBack(var44);
    boolean var46 = var44.isAssignAdd();
    boolean var47 = var44.isDebugger();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var51 = var50.cloneNode();
    boolean var52 = var50.isDelProp();
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var55 = var54.cloneNode();
    boolean var56 = var54.isDelProp();
    com.google.javascript.rhino.Node var57 = var50.clonePropsFrom(var54);
    com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
    com.google.javascript.rhino.Node var63 = var62.getLastChild();
    com.google.javascript.rhino.Node var64 = var54.srcrefTree(var62);
    com.google.javascript.rhino.Node[] var65 = new com.google.javascript.rhino.Node[] { var62};
    com.google.javascript.rhino.Node var66 = new com.google.javascript.rhino.Node((-3), var65);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.call(var44, var65);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test335() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test335"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setRecordFunctionInformation(false);
    var0.enableExternExports(false);
    var0.setAngularPass(true);
    com.google.javascript.jscomp.CompilerOptions.TracerMode var7 = var0.getTracerMode();
    var0.setManageClosureDependencies(false);
    var0.setCommonJSModulePathPrefix("LinkedGraph");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test336() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test336"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var11 = var8.getTypeOfThis();
    com.google.javascript.rhino.jstype.JSType var12 = var11.unboxesTo();
    com.google.javascript.rhino.jstype.JSType var14 = var11.getRestrictedTypeGivenToBooleanOutcome(false);
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
    var16.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.jstype.JSType var21 = null;
    com.google.javascript.rhino.jstype.JSType[] var22 = new com.google.javascript.rhino.jstype.JSType[] { var21};
    com.google.javascript.rhino.jstype.FunctionType var23 = var16.createConstructorType(var19, false, var22);
    com.google.javascript.rhino.jstype.JSType var25 = var23.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var26 = var23.toMaybeFunctionType();
    boolean var27 = var23.isUnionType();
    boolean var28 = com.google.javascript.rhino.jstype.JSType.isEquivalent(var14, (com.google.javascript.rhino.jstype.JSType)var23);
    com.google.javascript.rhino.SimpleErrorReporter var29 = new com.google.javascript.rhino.SimpleErrorReporter();
    com.google.javascript.rhino.ErrorReporter var30 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
    var31.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var34 = null;
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var36};
    com.google.javascript.rhino.jstype.FunctionType var38 = var31.createConstructorType(var34, false, var37);
    boolean var39 = var38.canBeCalled();
    boolean var40 = var38.isTemplatizedType();
    com.google.javascript.rhino.jstype.ObjectType var42 = var38.getTopMostDefiningType("hi!");
    com.google.javascript.rhino.jstype.JSType var43 = var14.resolve((com.google.javascript.rhino.ErrorReporter)var29, (com.google.javascript.rhino.jstype.StaticScope)var38);
    java.util.List var44 = var29.warnings();
    java.util.List var45 = var29.errors();
    com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry((com.google.javascript.rhino.ErrorReporter)var29);
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    var48.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.rhino.jstype.JSType var53 = null;
    com.google.javascript.rhino.jstype.JSType[] var54 = new com.google.javascript.rhino.jstype.JSType[] { var53};
    com.google.javascript.rhino.jstype.FunctionType var55 = var48.createConstructorType(var51, false, var54);
    com.google.javascript.rhino.jstype.JSType var57 = var55.findPropertyType("hi!");
    int var58 = var55.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var60 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var55, "");
    java.util.List var61 = var55.getSubTypes();
    com.google.javascript.rhino.ErrorReporter var62 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var62);
    var63.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var66 = null;
    com.google.javascript.rhino.jstype.JSType var68 = null;
    com.google.javascript.rhino.jstype.JSType[] var69 = new com.google.javascript.rhino.jstype.JSType[] { var68};
    com.google.javascript.rhino.jstype.FunctionType var70 = var63.createConstructorType(var66, false, var69);
    boolean var71 = var70.isInterface();
    boolean var72 = var70.isInstanceType();
    com.google.javascript.rhino.Node var73 = var70.getRootNode();
    boolean var74 = var70.isBooleanObjectType();
    boolean var75 = var55.isInvariant((com.google.javascript.rhino.jstype.JSType)var70);
    com.google.javascript.rhino.jstype.ObjectType var76 = var70.getParentScope();
    java.util.Collection var77 = var46.getDirectImplementors((com.google.javascript.rhino.jstype.ObjectType)var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test337() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test337"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var2 = var1.cloneNode();
    boolean var3 = var1.isDelProp();
    int var4 = var1.getSideEffectFlags();
    boolean var5 = var1.isEmpty();
    java.lang.String var6 = var1.getString();
    boolean var7 = var1.isIf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test338() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test338"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    var2.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
    com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
    boolean var10 = var9.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    var12.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
    com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
    boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    var37.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
    boolean var45 = var44.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    var47.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
    com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
    boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
    var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var62 = var61.cloneNode();
    boolean var63 = var61.isDelProp();
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var66 = var65.cloneNode();
    boolean var67 = var65.isDelProp();
    com.google.javascript.rhino.Node var68 = var61.clonePropsFrom(var65);
    com.google.javascript.rhino.JSDocInfo var69 = var65.getJSDocInfo();
    com.google.javascript.jscomp.CodingConvention.Bind var71 = var0.describeFunctionBind(var65, true);
    com.google.javascript.rhino.Node var73 = com.google.javascript.rhino.IR.string("hi!");
    boolean var74 = var73.isNE();
    int var75 = var73.getSideEffectFlags();
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.string("hi!");
    boolean var78 = var77.isNE();
    boolean var79 = var77.isWith();
    com.google.javascript.rhino.Node var80 = com.google.javascript.rhino.IR.getprop(var73, var77);
    com.google.javascript.rhino.Node var82 = com.google.javascript.rhino.IR.string("hi!");
    var77.addChildToBack(var82);
    com.google.javascript.jscomp.CodingConvention.DelegateRelationship var84 = var0.getDelegateRelationship(var77);
    java.util.Collection var85 = var0.getIndirectlyDeclaredProperties();
    com.google.javascript.rhino.Node var87 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode((com.google.javascript.jscomp.CodingConvention)var0, "Node tree inequality:\nTree1:\nSTRING LinkedGraph\n\n\nTree2:\nSTRING hi!\n\n\nSubtree1: STRING LinkedGraph\n\n\nSubtree2: STRING hi!\n");
    boolean var88 = var87.isQualifiedName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);

  }

  public void test339() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test339"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineProperties(true);
    com.google.javascript.jscomp.CheckLevel var3 = null;
    var0.setCheckMissingReturn(var3);
    var0.setRemoveUnusedLocalVars(true);
    var0.setAliasAllStrings(true);
    var0.setIgnoreCajaProperties(false);
    var0.skipAllCompilerPasses();

  }

  public void test340() {}
//   public void test340() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test340"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var4);
//     com.google.javascript.jscomp.Compiler.IntermediateState var6 = null;
//     var0.setState(var6);
// 
//   }

  public void test341() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test341"); }


    com.google.javascript.jscomp.SourceAst var0 = null;
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
    com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
    com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
    com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var6);
    double var8 = var5.getProgress();
    var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var5);
    com.google.javascript.jscomp.Scope var10 = var5.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var11 = null;
    com.google.javascript.jscomp.NodeTraversal var12 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var11);
    com.google.javascript.rhino.Node var13 = var12.getEnclosingFunction();
    com.google.javascript.rhino.Node var14 = var12.getCurrentNode();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.block();
    int var16 = var15.getSourceOffset();
    com.google.javascript.rhino.Node[] var17 = new com.google.javascript.rhino.Node[] { var15};
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.script(var17);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var12.traverseRoots(var17);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test342() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test342"); }


    com.google.javascript.rhino.jstype.TernaryValue var1 = com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(10);
    java.lang.Class var2 = var1.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test343() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test343"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineProperties(true);
    var0.setIdGeneratorsMap("LABEL_NAME hi!");
    var0.setRemoveClosureAsserts(false);
    var0.setProcessObjectPropertyString(true);
    var0.setReserveRawExports(false);
    com.google.javascript.jscomp.SourceMap.DetailLevel var11 = null;
    var0.setSourceMapDetailLevel(var11);

  }

  public void test344() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test344"); }


    com.google.javascript.jscomp.SourceFile var1 = new com.google.javascript.jscomp.SourceFile("goog.exportProperty");
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var1, true);
    java.lang.String var4 = var1.getOriginalPath();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "goog.exportProperty"+ "'", var4.equals("goog.exportProperty"));

  }

  public void test345() {}
//   public void test345() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test345"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.pos(var0);
// 
//   }

  public void test346() {}
//   public void test346() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test346"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var1);
//     double var3 = var0.getProgress();
//     var0.reportCodeChange();
//     com.google.javascript.rhino.head.ast.AstRoot var6 = var0.getOldParseTreeByName("LinkedGraph");
//     com.google.javascript.jscomp.NodeTraversal.Callback var7 = null;
//     com.google.javascript.jscomp.NodeTraversal var8 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var7);
//     boolean var9 = var0.acceptEcmaScript5();
// 
//   }

  public void test347() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test347"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var11 = var8.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    var13.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType[] var19 = new com.google.javascript.rhino.jstype.JSType[] { var18};
    com.google.javascript.rhino.jstype.FunctionType var20 = var13.createConstructorType(var16, false, var19);
    boolean var21 = var20.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    var23.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType[] var29 = new com.google.javascript.rhino.jstype.JSType[] { var28};
    com.google.javascript.rhino.jstype.FunctionType var30 = var23.createConstructorType(var26, false, var29);
    com.google.javascript.rhino.jstype.JSType var32 = var30.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var33 = var30.getTypeOfThis();
    boolean var34 = var20.canCastTo((com.google.javascript.rhino.jstype.JSType)var30);
    boolean var35 = var8.hasEqualCallType(var30);
    boolean var36 = var30.isNumber();
    java.lang.Iterable var37 = var30.getImplementedInterfaces();
    boolean var38 = var30.hasImplementedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test348() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test348"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
    com.google.javascript.rhino.jstype.TemplateType var3 = var1.getObjectElementKey();
    com.google.javascript.rhino.ErrorReporter var4 = var1.getErrorReporter();
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    var6.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var9 = null;
    com.google.javascript.rhino.jstype.JSType var11 = null;
    com.google.javascript.rhino.jstype.JSType[] var12 = new com.google.javascript.rhino.jstype.JSType[] { var11};
    com.google.javascript.rhino.jstype.FunctionType var13 = var6.createConstructorType(var9, false, var12);
    boolean var14 = var13.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
    var16.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.jstype.JSType var21 = null;
    com.google.javascript.rhino.jstype.JSType[] var22 = new com.google.javascript.rhino.jstype.JSType[] { var21};
    com.google.javascript.rhino.jstype.FunctionType var23 = var16.createConstructorType(var19, false, var22);
    com.google.javascript.rhino.jstype.JSType var25 = var23.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var26 = var23.getTypeOfThis();
    boolean var27 = var13.canCastTo((com.google.javascript.rhino.jstype.JSType)var23);
    boolean var28 = var23.isDateType();
    boolean var29 = var23.isConstructor();
    com.google.javascript.rhino.Node var30 = var23.getRootNode();
    com.google.javascript.rhino.ErrorReporter var31 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var31);
    var32.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var35 = null;
    com.google.javascript.rhino.jstype.JSType var37 = null;
    com.google.javascript.rhino.jstype.JSType[] var38 = new com.google.javascript.rhino.jstype.JSType[] { var37};
    com.google.javascript.rhino.jstype.FunctionType var39 = var32.createConstructorType(var35, false, var38);
    boolean var40 = var39.isInterface();
    com.google.javascript.rhino.jstype.JSType var41 = var23.getLeastSupertype((com.google.javascript.rhino.jstype.JSType)var39);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var42 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var43 = var42.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var44 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var44);
    var45.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var48 = null;
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType[] var51 = new com.google.javascript.rhino.jstype.JSType[] { var50};
    com.google.javascript.rhino.jstype.FunctionType var52 = var45.createConstructorType(var48, false, var51);
    com.google.javascript.rhino.jstype.JSType var54 = var52.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var55 = var52.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var56 = var42.getNode((java.lang.Object)var55);
    java.util.List var57 = var42.getEdges();
    com.google.javascript.rhino.jstype.FunctionType var58 = var1.createFunctionTypeWithVarArgs((com.google.javascript.rhino.jstype.JSType)var39, var57);
    com.google.javascript.rhino.ErrorReporter var59 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var59);
    var60.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var63 = null;
    com.google.javascript.rhino.jstype.JSType var65 = null;
    com.google.javascript.rhino.jstype.JSType[] var66 = new com.google.javascript.rhino.jstype.JSType[] { var65};
    com.google.javascript.rhino.jstype.FunctionType var67 = var60.createConstructorType(var63, false, var66);
    boolean var68 = var67.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var69 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var69);
    var70.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var73 = null;
    com.google.javascript.rhino.jstype.JSType var75 = null;
    com.google.javascript.rhino.jstype.JSType[] var76 = new com.google.javascript.rhino.jstype.JSType[] { var75};
    com.google.javascript.rhino.jstype.FunctionType var77 = var70.createConstructorType(var73, false, var76);
    com.google.javascript.rhino.jstype.JSType var79 = var77.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var80 = var77.getTypeOfThis();
    boolean var81 = var67.canCastTo((com.google.javascript.rhino.jstype.JSType)var77);
    boolean var82 = var77.isUnionType();
    boolean var84 = var77.isPropertyTypeInferred("hi!: ");
    var77.setStruct();
    boolean var86 = var58.equals((java.lang.Object)var77);
    com.google.javascript.rhino.Node var88 = var58.getPropertyNode("goog.abstractMethod");
    java.lang.Iterable var89 = var58.getExtendedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test349() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test349"); }


    java.nio.charset.Charset var1 = null;
    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromFile("goog.global", var1);
    com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var2, false);
    com.google.javascript.jscomp.JSModule var5 = null;
    var4.setModule(var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var7 = var4.getPathRelativeToClosureBase();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test350() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test350"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var1 = com.google.javascript.rhino.SimpleErrorReporter.getMessage0("hi!: ");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test351() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test351"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    var2.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
    com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
    boolean var10 = var9.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    var12.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
    com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
    boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    var37.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
    boolean var45 = var44.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    var47.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
    com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
    boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
    var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
    boolean var61 = var0.isSuperClassReference("");
    boolean var63 = var0.isPrivate("hi!.  at (unknown source) line (unknown line) : (unknown column)");
    java.util.Collection var64 = var0.getAssertionFunctions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test352() {}
//   public void test352() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test352"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var4);
//     java.lang.String var8 = var0.getSourceLine("hi!: ", (-1));
//     var0.rebuildInputsFromModules();
// 
//   }

  public void test353() {}
//   public void test353() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test353"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
//     com.google.javascript.rhino.jstype.TemplateType var3 = var1.getObjectElementKey();
//     java.lang.Iterable var4 = var3.getCtorExtendedInterfaces();
//     boolean var5 = var3.isFunctionPrototypeType();
//     com.google.javascript.rhino.jstype.EnumType var6 = var3.toMaybeEnumType();
// 
//   }

  public void test354() {}
//   public void test354() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test354"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     double var2 = var1.getProgress();
//     double var3 = var1.getProgress();
//     boolean var4 = var1.isTypeCheckingEnabled();
// 
//   }

  public void test355() {}
//   public void test355() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test355"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     com.google.javascript.jscomp.Region var4 = var0.getSourceRegion("goog.exportSymbol", 1);
// 
//   }

  public void test356() {}
//   public void test356() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test356"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.ErrorReporter var1 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
//     var2.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
//     com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
//     boolean var10 = var9.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var11 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
//     var12.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
//     com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
//     com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
//     boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
//     com.google.javascript.rhino.ErrorReporter var24 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
//     var25.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var28 = null;
//     com.google.javascript.rhino.jstype.JSType var30 = null;
//     com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
//     com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
//     com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
//     com.google.javascript.rhino.ErrorReporter var36 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
//     var37.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var40 = null;
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
//     com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
//     boolean var45 = var44.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var46 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
//     var47.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var50 = null;
//     com.google.javascript.rhino.jstype.JSType var52 = null;
//     com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
//     com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
//     com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
//     boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
//     var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
//     java.lang.String var60 = var0.getExportPropertyFunction();
//     java.lang.String var61 = var0.getGlobalObject();
//     boolean var63 = var0.isConstant("");
//     com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var66 = var65.isNE();
//     int var67 = var65.getSideEffectFlags();
//     com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var70 = var69.isNE();
//     boolean var71 = var69.isWith();
//     com.google.javascript.rhino.Node var72 = com.google.javascript.rhino.IR.getprop(var65, var69);
//     com.google.javascript.rhino.Node var74 = com.google.javascript.rhino.IR.string("hi!");
//     var69.addChildToBack(var74);
//     com.google.javascript.rhino.Node.FileLevelJsDocBuilder var76 = var74.getJsDocBuilderForNode();
//     int var77 = var74.getCharno();
//     java.lang.Object var79 = var74.getProp(10);
//     boolean var80 = var74.isThis();
//     com.google.javascript.jscomp.CodingConvention.Bind var81 = var0.describeFunctionBind(var74);
//     com.google.javascript.rhino.Node var83 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var84 = var83.isNE();
//     int var85 = var83.getSideEffectFlags();
//     com.google.javascript.rhino.Node var87 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var88 = var87.isNE();
//     boolean var89 = var87.isWith();
//     com.google.javascript.rhino.Node var90 = com.google.javascript.rhino.IR.getprop(var83, var87);
//     java.lang.String var91 = com.google.javascript.jscomp.NodeUtil.getSourceName(var83);
//     boolean var92 = var83.isParamList();
//     java.util.List var93 = var0.identifyTypeDeclarationCall(var83);
// 
//   }

  public void test357() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test357"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.util.Set var9 = null;
    var1.setDirectives(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    int var15 = var13.getSideEffectFlags();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    boolean var19 = var17.isWith();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
    java.util.Set var21 = null;
    var13.setDirectives(var21);
    com.google.javascript.jscomp.CheckLevel var23 = null;
    com.google.javascript.jscomp.CheckLevel var25 = null;
    com.google.javascript.jscomp.DiagnosticType var27 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var25, "");
    java.lang.String[] var28 = null;
    com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("hi!", var13, var23, var27, var28);
    com.google.javascript.rhino.Node var30 = var1.useSourceInfoIfMissingFrom(var13);
    boolean var31 = var30.isInc();
    com.google.javascript.rhino.Node var32 = null;
    com.google.javascript.rhino.Node var33 = var30.getChildBefore(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }

  public void test358() {}
//   public void test358() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test358"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     double var2 = var1.getProgress();
//     com.google.javascript.jscomp.Result var3 = var1.getResult();
// 
//   }

  public void test359() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test359"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var12 = var10.getJsDocBuilderForNode();
    int var13 = var10.getCharno();
    java.lang.Object var15 = var10.getProp(10);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    int var19 = var17.getSideEffectFlags();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.string("hi!");
    boolean var22 = var21.isNE();
    boolean var23 = var21.isWith();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.getprop(var17, var21);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.string("hi!");
    var21.addChildToBack(var26);
    com.google.javascript.rhino.Node var28 = var10.srcrefTree(var26);
    boolean var29 = var26.isFor();
    com.google.javascript.rhino.Node var30 = var26.getLastSibling();
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.string("hi!");
    boolean var33 = var32.isNE();
    int var34 = var32.getSideEffectFlags();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.string("hi!");
    boolean var37 = var36.isNE();
    boolean var38 = var36.isWith();
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.getprop(var32, var36);
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.string("hi!");
    var36.addChildToBack(var41);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var43 = var41.getJsDocBuilderForNode();
    int var44 = var41.getCharno();
    java.lang.Object var46 = var41.getProp(10);
    boolean var47 = var41.isAnd();
    boolean var48 = var41.isBlock();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var51 = var50.cloneNode();
    boolean var52 = var50.isDelProp();
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var55 = var54.cloneNode();
    boolean var56 = var54.isDelProp();
    com.google.javascript.rhino.Node var57 = var50.clonePropsFrom(var54);
    com.google.javascript.rhino.JSDocInfo var58 = var54.getJSDocInfo();
    int var59 = var54.getLineno();
    java.util.Set var60 = var54.getDirectives();
    com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.Node.newString("hi!: ");
    java.lang.String var63 = var62.getString();
    com.google.javascript.rhino.Node var64 = var54.useSourceInfoIfMissingFrom(var62);
    boolean var65 = var62.isDo();
    com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
    var70.setQuotedString();
    boolean var72 = var70.isLabelName();
    boolean var73 = var70.isDefaultCase();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var74 = com.google.javascript.rhino.IR.forNode(var30, var41, var62, var70);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "hi!: "+ "'", var63.equals("hi!: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test360() {}
//   public void test360() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test360"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.rhino.ErrorReporter var1 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
//     var2.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
//     com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
//     com.google.javascript.rhino.jstype.JSType var11 = var9.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var12 = var9.getTypeOfThis();
//     com.google.javascript.rhino.jstype.TemplatizedType var13 = com.google.javascript.rhino.jstype.JSType.toMaybeTemplatizedType((com.google.javascript.rhino.jstype.JSType)var9);
//     com.google.javascript.rhino.ErrorReporter var14 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
//     java.lang.Iterable var17 = var15.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var18 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18);
//     var19.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var22 = null;
//     com.google.javascript.rhino.jstype.JSType var24 = null;
//     com.google.javascript.rhino.jstype.JSType[] var25 = new com.google.javascript.rhino.jstype.JSType[] { var24};
//     com.google.javascript.rhino.jstype.FunctionType var26 = var19.createConstructorType(var22, false, var25);
//     boolean var27 = var26.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var28 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
//     var29.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var32 = null;
//     com.google.javascript.rhino.jstype.JSType var34 = null;
//     com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var34};
//     com.google.javascript.rhino.jstype.FunctionType var36 = var29.createConstructorType(var32, false, var35);
//     com.google.javascript.rhino.jstype.FunctionType var37 = var15.createConstructorType((com.google.javascript.rhino.jstype.JSType)var26, var35);
//     com.google.javascript.rhino.ErrorReporter var38 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
//     var39.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     com.google.javascript.rhino.jstype.JSType var44 = null;
//     com.google.javascript.rhino.jstype.JSType[] var45 = new com.google.javascript.rhino.jstype.JSType[] { var44};
//     com.google.javascript.rhino.jstype.FunctionType var46 = var39.createConstructorType(var42, false, var45);
//     com.google.javascript.rhino.jstype.JSType var48 = var46.findPropertyType("hi!");
//     int var49 = var46.getPropertiesCount();
//     com.google.javascript.rhino.jstype.ObjectType var51 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var46, "");
//     boolean var52 = var46.makesStructs();
//     boolean var53 = var37.isSubtype((com.google.javascript.rhino.jstype.JSType)var46);
//     com.google.javascript.rhino.jstype.TernaryValue var54 = var9.testForEquality((com.google.javascript.rhino.jstype.JSType)var37);
//     boolean var55 = var9.isBooleanValueType();
//     int var56 = var9.getMaxArguments();
//     com.google.javascript.jscomp.AbstractCompiler var57 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var58 = null;
//     com.google.javascript.jscomp.NodeTraversal var59 = new com.google.javascript.jscomp.NodeTraversal(var57, var58);
//     java.lang.String var60 = var59.getSourceName();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var61 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var62 = var61.getGraphvizNodes();
//     com.google.javascript.rhino.ErrorReporter var63 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var63);
//     var64.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var67 = null;
//     com.google.javascript.rhino.jstype.JSType var69 = null;
//     com.google.javascript.rhino.jstype.JSType[] var70 = new com.google.javascript.rhino.jstype.JSType[] { var69};
//     com.google.javascript.rhino.jstype.FunctionType var71 = var64.createConstructorType(var67, false, var70);
//     com.google.javascript.rhino.jstype.JSType var73 = var71.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var74 = var71.getTypeOfThis();
//     com.google.javascript.jscomp.graph.GraphNode var75 = var61.getNode((java.lang.Object)var74);
//     java.util.List var76 = var61.getEdges();
//     var59.traverseRoots(var76);
//     com.google.javascript.rhino.Node var78 = com.google.javascript.rhino.IR.block(var76);
//     var9.setImplementedInterfaces(var76);
//     com.google.javascript.jscomp.NodeTraversal.Callback var80 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var0, var76, var80);
//     com.google.javascript.jscomp.CompilerOptions.LanguageMode var82 = var0.languageMode();
// 
//   }

  public void test361() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test361"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
    int var15 = var12.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
    com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    var22.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var25 = null;
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.rhino.jstype.JSType[] var28 = new com.google.javascript.rhino.jstype.JSType[] { var27};
    com.google.javascript.rhino.jstype.FunctionType var29 = var22.createConstructorType(var25, false, var28);
    boolean var30 = var29.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var31 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var31);
    var32.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var35 = null;
    com.google.javascript.rhino.jstype.JSType var37 = null;
    com.google.javascript.rhino.jstype.JSType[] var38 = new com.google.javascript.rhino.jstype.JSType[] { var37};
    com.google.javascript.rhino.jstype.FunctionType var39 = var32.createConstructorType(var35, false, var38);
    com.google.javascript.rhino.jstype.JSType var41 = var39.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var42 = var39.getTypeOfThis();
    boolean var43 = var29.canCastTo((com.google.javascript.rhino.jstype.JSType)var39);
    com.google.javascript.rhino.ErrorReporter var44 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var44);
    var45.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var48 = null;
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType[] var51 = new com.google.javascript.rhino.jstype.JSType[] { var50};
    com.google.javascript.rhino.jstype.FunctionType var52 = var45.createConstructorType(var48, false, var51);
    boolean var53 = var52.isInterface();
    com.google.javascript.rhino.jstype.JSType[] var54 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var55 = var20.createConstructorType((com.google.javascript.rhino.jstype.JSType)var29, var54);
    var55.setDict();
    boolean var57 = var55.hasReferenceName();
    com.google.javascript.rhino.jstype.JSType var58 = var1.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType)var55);
    com.google.javascript.rhino.jstype.EnumType var59 = var55.toMaybeEnumType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);

  }

  public void test362() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test362"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    boolean var5 = var2.isReturn();
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = null;
    com.google.javascript.rhino.jstype.FunctionParamBuilder var7 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var6);
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    var9.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var12 = null;
    com.google.javascript.rhino.jstype.JSType var14 = null;
    com.google.javascript.rhino.jstype.JSType[] var15 = new com.google.javascript.rhino.jstype.JSType[] { var14};
    com.google.javascript.rhino.jstype.FunctionType var16 = var9.createConstructorType(var12, false, var15);
    boolean var17 = var7.addRequiredParams(var15);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.string("hi!");
    boolean var20 = var19.isNE();
    int var21 = var19.getSideEffectFlags();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.string("hi!");
    boolean var24 = var23.isNE();
    boolean var25 = var23.isWith();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.getprop(var19, var23);
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.string("hi!");
    var23.addChildToBack(var28);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var30 = var28.getJsDocBuilderForNode();
    int var31 = var28.getCharno();
    java.lang.Object var33 = var28.getProp(10);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.string("hi!");
    boolean var36 = var35.isNE();
    int var37 = var35.getSideEffectFlags();
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.string("hi!");
    boolean var40 = var39.isNE();
    boolean var41 = var39.isWith();
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.getprop(var35, var39);
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.string("hi!");
    var39.addChildToBack(var44);
    com.google.javascript.rhino.Node var46 = var28.srcrefTree(var44);
    com.google.javascript.rhino.Node var47 = var7.newParameterFromNode(var28);
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.string("hi!");
    boolean var50 = var49.isNE();
    int var51 = var49.getSideEffectFlags();
    com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.IR.string("hi!");
    boolean var54 = var53.isNE();
    boolean var55 = var53.isWith();
    com.google.javascript.rhino.Node var56 = com.google.javascript.rhino.IR.getprop(var49, var53);
    var53.removeProp(0);
    java.lang.String var59 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var53);
    java.util.Set var60 = null;
    var53.setDirectives(var60);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var62 = var53.getJsDocBuilderForNode();
    com.google.javascript.rhino.Node var63 = var7.newOptionalParameterFromNode(var53);
    boolean var64 = var53.isCast();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var67 = new com.google.javascript.rhino.Node((-3), var2, var53, (-1), 3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test363() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test363"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    var1.clearNamedTypes();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var11 = var10.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    var13.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType[] var19 = new com.google.javascript.rhino.jstype.JSType[] { var18};
    com.google.javascript.rhino.jstype.FunctionType var20 = var13.createConstructorType(var16, false, var19);
    com.google.javascript.rhino.jstype.JSType var22 = var20.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var23 = var20.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var24 = var10.getNode((java.lang.Object)var23);
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
    com.google.javascript.rhino.ErrorReporter var28 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
    var29.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.rhino.jstype.JSType var34 = null;
    com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var34};
    com.google.javascript.rhino.jstype.FunctionType var36 = var29.createConstructorType(var32, false, var35);
    boolean var37 = var36.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var38 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
    var39.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType var44 = null;
    com.google.javascript.rhino.jstype.JSType[] var45 = new com.google.javascript.rhino.jstype.JSType[] { var44};
    com.google.javascript.rhino.jstype.FunctionType var46 = var39.createConstructorType(var42, false, var45);
    com.google.javascript.rhino.jstype.JSType var48 = var46.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var49 = var46.getTypeOfThis();
    boolean var50 = var36.canCastTo((com.google.javascript.rhino.jstype.JSType)var46);
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    var52.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var55 = null;
    com.google.javascript.rhino.jstype.JSType var57 = null;
    com.google.javascript.rhino.jstype.JSType[] var58 = new com.google.javascript.rhino.jstype.JSType[] { var57};
    com.google.javascript.rhino.jstype.FunctionType var59 = var52.createConstructorType(var55, false, var58);
    boolean var60 = var59.isInterface();
    com.google.javascript.rhino.jstype.JSType[] var61 = new com.google.javascript.rhino.jstype.JSType[] { var59};
    com.google.javascript.rhino.jstype.FunctionType var62 = var27.createConstructorType((com.google.javascript.rhino.jstype.JSType)var36, var61);
    com.google.javascript.rhino.jstype.FunctionType var63 = var1.createConstructorType(var23, false, var61);
    com.google.javascript.rhino.ErrorReporter var64 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var64);
    var65.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var68 = null;
    com.google.javascript.rhino.jstype.JSType var70 = null;
    com.google.javascript.rhino.jstype.JSType[] var71 = new com.google.javascript.rhino.jstype.JSType[] { var70};
    com.google.javascript.rhino.jstype.FunctionType var72 = var65.createConstructorType(var68, false, var71);
    boolean var73 = var72.isInterface();
    boolean var74 = var23.isInvariant((com.google.javascript.rhino.jstype.JSType)var72);
    com.google.javascript.rhino.jstype.BooleanLiteralSet var75 = var72.getPossibleToBooleanOutcomes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test364() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test364"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineProperties(true);
    java.util.logging.Logger var3 = null;
    com.google.javascript.jscomp.LoggerErrorManager var4 = new com.google.javascript.jscomp.LoggerErrorManager(var3);
    int var5 = var4.getErrorCount();
    int var6 = var4.getWarningCount();
    com.google.javascript.jscomp.JSError[] var7 = var4.getErrors();
    com.google.javascript.jscomp.JSError[] var8 = var4.getErrors();
    var0.setErrorHandler((com.google.javascript.jscomp.ErrorHandler)var4);
    var0.setProtectHiddenSideEffects(true);
    var0.setRemoveUnusedPrototypeProperties(true);
    var0.setAngularPass(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test365() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test365"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
    boolean var11 = var10.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    var13.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType[] var19 = new com.google.javascript.rhino.jstype.JSType[] { var18};
    com.google.javascript.rhino.jstype.FunctionType var20 = var13.createConstructorType(var16, false, var19);
    com.google.javascript.rhino.jstype.JSType var22 = var20.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var23 = var20.getTypeOfThis();
    boolean var24 = var10.canCastTo((com.google.javascript.rhino.jstype.JSType)var20);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    var26.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var29 = null;
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.jstype.FunctionType var33 = var26.createConstructorType(var29, false, var32);
    boolean var34 = var33.isInterface();
    com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var33};
    com.google.javascript.rhino.jstype.FunctionType var36 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var10, var35);
    com.google.javascript.rhino.ErrorReporter var37 = var1.getErrorReporter();
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.string("hi!");
    com.google.javascript.rhino.ErrorReporter var40 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40);
    java.lang.Iterable var43 = var41.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var44 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var44);
    var45.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var48 = null;
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType[] var51 = new com.google.javascript.rhino.jstype.JSType[] { var50};
    com.google.javascript.rhino.jstype.FunctionType var52 = var45.createConstructorType(var48, false, var51);
    boolean var53 = var52.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var54 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var54);
    var55.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var58 = null;
    com.google.javascript.rhino.jstype.JSType var60 = null;
    com.google.javascript.rhino.jstype.JSType[] var61 = new com.google.javascript.rhino.jstype.JSType[] { var60};
    com.google.javascript.rhino.jstype.FunctionType var62 = var55.createConstructorType(var58, false, var61);
    com.google.javascript.rhino.jstype.FunctionType var63 = var41.createConstructorType((com.google.javascript.rhino.jstype.JSType)var52, var61);
    com.google.javascript.rhino.ErrorReporter var64 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var64);
    var65.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var68 = null;
    com.google.javascript.rhino.jstype.JSType var70 = null;
    com.google.javascript.rhino.jstype.JSType[] var71 = new com.google.javascript.rhino.jstype.JSType[] { var70};
    com.google.javascript.rhino.jstype.FunctionType var72 = var65.createConstructorType(var68, false, var71);
    com.google.javascript.rhino.jstype.JSType var74 = var72.findPropertyType("hi!");
    int var75 = var72.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var77 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var72, "");
    boolean var78 = var72.makesStructs();
    boolean var79 = var63.isSubtype((com.google.javascript.rhino.jstype.JSType)var72);
    boolean var80 = var63.isNumber();
    var39.setJSType((com.google.javascript.rhino.jstype.JSType)var63);
    var63.setDict();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var83 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var84 = var83.getGraphvizNodes();
    com.google.javascript.jscomp.deps.SortedDependencies var85 = new com.google.javascript.jscomp.deps.SortedDependencies(var84);
    com.google.javascript.jscomp.JSModuleGraph var86 = new com.google.javascript.jscomp.JSModuleGraph(var84);
    com.google.javascript.rhino.jstype.FunctionType var87 = var1.createFunctionType((com.google.javascript.rhino.jstype.JSType)var63, var84);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.ObjectType var89 = var87.getTopMostDefiningType("Object#Element");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test366() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test366"); }


    com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromCode("LinkedGraph", "STRING hi!", "FALSE");
    java.lang.String var4 = var3.getCode();
    int var6 = var3.getColumnOfOffset(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "FALSE"+ "'", var4.equals("FALSE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 100);

  }

  public void test367() {}
//   public void test367() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test367"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.stringKey("2014/12/24 01:41");
//     com.google.javascript.rhino.Node var2 = null;
//     com.google.javascript.rhino.Node var3 = var1.useSourceInfoIfMissingFromForTree(var2);
// 
//   }

  public void test368() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test368"); }


    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
    int var5 = var4.getChangeTime();
    boolean var6 = var4.isCatch();
    boolean var7 = var4.isNE();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var10 = var9.cloneNode();
    boolean var11 = var9.isDelProp();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var14 = var13.cloneNode();
    boolean var15 = var13.isDelProp();
    com.google.javascript.rhino.Node var16 = var9.clonePropsFrom(var13);
    com.google.javascript.rhino.JSDocInfo var17 = var13.getJSDocInfo();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.breakNode(var13);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.string("hi!");
    boolean var21 = var20.isNE();
    int var22 = var20.getSideEffectFlags();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.string("hi!");
    boolean var25 = var24.isNE();
    boolean var26 = var24.isWith();
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.getprop(var20, var24);
    java.lang.Iterable var28 = var27.siblings();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.string("hi!");
    boolean var31 = var30.isNE();
    int var32 = var30.getSideEffectFlags();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.string("hi!");
    boolean var35 = var34.isNE();
    boolean var36 = var34.isWith();
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.getprop(var30, var34);
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.string("hi!");
    var34.addChildToBack(var39);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var41 = var39.getJsDocBuilderForNode();
    int var42 = var39.getCharno();
    java.lang.Object var44 = var39.getProp(10);
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.string("hi!");
    boolean var47 = var46.isNE();
    int var48 = var46.getSideEffectFlags();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.string("hi!");
    boolean var51 = var50.isNE();
    boolean var52 = var50.isWith();
    com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.IR.getprop(var46, var50);
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.string("hi!");
    var50.addChildToBack(var55);
    com.google.javascript.rhino.Node var57 = var39.srcrefTree(var55);
    com.google.javascript.rhino.Node var58 = var27.useSourceInfoFromForTree(var57);
    com.google.javascript.rhino.Node var59 = var57.cloneTree();
    com.google.javascript.rhino.Node var60 = var18.useSourceInfoIfMissingFrom(var59);
    var59.setCharno((-1));
    com.google.javascript.rhino.Node var63 = var4.useSourceInfoFromForTree(var59);
    int var64 = var63.getLineno();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));

  }

  public void test369() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test369"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    boolean var9 = var8.canBeCalled();
    boolean var10 = var8.isEnumElementType();
    boolean var11 = var8.isNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test370() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test370"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("2014/12/24 01:41");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test371() {}
//   public void test371() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test371"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
//     com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var6);
//     double var8 = var5.getProgress();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var5);
//     com.google.javascript.jscomp.Scope var10 = var5.getTopScope();
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var11 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var12 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5, var11);
//     java.lang.String var13 = var5.getAstDotGraph();
//     var5.parse();
// 
//   }

  public void test372() {}
//   public void test372() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test372"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
//     com.google.javascript.rhino.jstype.TemplateType var3 = var1.getObjectElementKey();
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var15 = var12.toMaybeFunctionType();
//     com.google.javascript.rhino.ErrorReporter var16 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
//     var17.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var20 = null;
//     com.google.javascript.rhino.jstype.JSType var22 = null;
//     com.google.javascript.rhino.jstype.JSType[] var23 = new com.google.javascript.rhino.jstype.JSType[] { var22};
//     com.google.javascript.rhino.jstype.FunctionType var24 = var17.createConstructorType(var20, false, var23);
//     boolean var25 = var24.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var26 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
//     var27.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var30 = null;
//     com.google.javascript.rhino.jstype.JSType var32 = null;
//     com.google.javascript.rhino.jstype.JSType[] var33 = new com.google.javascript.rhino.jstype.JSType[] { var32};
//     com.google.javascript.rhino.jstype.FunctionType var34 = var27.createConstructorType(var30, false, var33);
//     com.google.javascript.rhino.jstype.JSType var36 = var34.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var37 = var34.getTypeOfThis();
//     boolean var38 = var24.canCastTo((com.google.javascript.rhino.jstype.JSType)var34);
//     boolean var39 = var12.hasEqualCallType(var34);
//     boolean var40 = var12.matchesUint32Context();
//     com.google.javascript.rhino.jstype.JSType var42 = var1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType)var12, "goog.global");
//     com.google.javascript.rhino.jstype.JSType[] var43 = null;
//     com.google.javascript.rhino.Node var44 = var1.createParametersWithVarArgs(var43);
// 
//   }

  public void test373() {}
//   public void test373() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test373"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var4);
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var8 = var7.isNE();
//     com.google.javascript.rhino.Node var9 = var7.cloneNode();
//     java.nio.charset.Charset var11 = null;
//     com.google.javascript.jscomp.SourceFile var12 = com.google.javascript.jscomp.SourceFile.fromFile("goog.global", var11);
//     var12.clearCachedSource();
//     var7.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var12);
//     com.google.javascript.jscomp.JsAst var15 = new com.google.javascript.jscomp.JsAst(var12);
//     com.google.javascript.jscomp.SourceAst var16 = null;
//     com.google.javascript.jscomp.CompilerInput var19 = new com.google.javascript.jscomp.CompilerInput(var16, "hi!", false);
//     com.google.javascript.jscomp.SourceAst var20 = var19.getSourceAst();
//     com.google.javascript.rhino.InputId var21 = var19.getInputId();
//     com.google.javascript.jscomp.CompilerInput var23 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var15, var21, false);
//     var0.addNewScript(var15);
// 
//   }

  public void test374() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test374"); }


    com.google.javascript.jscomp.AbstractCompiler var0 = null;
    com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
    com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
    com.google.javascript.rhino.Node var3 = var2.getCurrentNode();
    java.lang.String var4 = var2.getSourceName();
    com.google.javascript.rhino.Node var5 = var2.getEnclosingFunction();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.trueNode();
    var6.setLineno(10);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.string("hi!");
    boolean var13 = var12.isNE();
    int var14 = var12.getSideEffectFlags();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.string("hi!");
    boolean var17 = var16.isNE();
    boolean var18 = var16.isWith();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.getprop(var12, var16);
    java.util.Set var20 = null;
    var12.setDirectives(var20);
    com.google.javascript.jscomp.CheckLevel var22 = null;
    com.google.javascript.jscomp.CheckLevel var24 = null;
    com.google.javascript.jscomp.DiagnosticType var26 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var24, "");
    java.lang.String[] var27 = null;
    com.google.javascript.jscomp.JSError var28 = com.google.javascript.jscomp.JSError.make("hi!", var12, var22, var26, var27);
    com.google.javascript.jscomp.CheckLevel var33 = null;
    com.google.javascript.jscomp.DiagnosticType var35 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var33, "");
    java.lang.String[] var37 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var38 = com.google.javascript.jscomp.JSError.make("", 100, 0, var35, var37);
    java.lang.String[] var40 = new java.lang.String[] { "hi!"};
    com.google.javascript.jscomp.JSError var41 = com.google.javascript.jscomp.JSError.make("hi!", var12, var35, var40);
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.string("hi!");
    boolean var45 = var44.isNE();
    int var46 = var44.getSideEffectFlags();
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.string("hi!");
    boolean var49 = var48.isNE();
    boolean var50 = var48.isWith();
    com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.getprop(var44, var48);
    java.util.Set var52 = null;
    var44.setDirectives(var52);
    com.google.javascript.jscomp.CheckLevel var54 = null;
    com.google.javascript.jscomp.CheckLevel var56 = null;
    com.google.javascript.jscomp.DiagnosticType var58 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var56, "");
    java.lang.String[] var59 = null;
    com.google.javascript.jscomp.JSError var60 = com.google.javascript.jscomp.JSError.make("hi!", var44, var54, var58, var59);
    com.google.javascript.rhino.Node var64 = com.google.javascript.rhino.IR.string("hi!");
    boolean var65 = var64.isNE();
    int var66 = var64.getSideEffectFlags();
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.string("hi!");
    boolean var69 = var68.isNE();
    boolean var70 = var68.isWith();
    com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.getprop(var64, var68);
    java.util.Set var72 = null;
    var64.setDirectives(var72);
    com.google.javascript.jscomp.CheckLevel var74 = null;
    com.google.javascript.jscomp.CheckLevel var76 = null;
    com.google.javascript.jscomp.DiagnosticType var78 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var76, "");
    java.lang.String[] var79 = null;
    com.google.javascript.jscomp.JSError var80 = com.google.javascript.jscomp.JSError.make("hi!", var64, var74, var78, var79);
    com.google.javascript.jscomp.CheckLevel var85 = null;
    com.google.javascript.jscomp.DiagnosticType var87 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var85, "");
    java.lang.String[] var89 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var90 = com.google.javascript.jscomp.JSError.make("", 100, 0, var87, var89);
    java.lang.String[] var92 = new java.lang.String[] { "hi!"};
    com.google.javascript.jscomp.JSError var93 = com.google.javascript.jscomp.JSError.make("hi!", var64, var87, var92);
    com.google.javascript.jscomp.JSError var94 = com.google.javascript.jscomp.JSError.make(var58, var92);
    com.google.javascript.jscomp.JSError var95 = var2.makeError(var6, var35, var92);
    java.lang.String var96 = var35.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "hi!: "+ "'", var96.equals("hi!: "));

  }

  public void test375() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test375"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.Node.newString(1, "()");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test376() {}
//   public void test376() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test376"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.ErrorReporter var1 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
//     var2.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
//     com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
//     boolean var10 = var9.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var11 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
//     var12.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
//     com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
//     com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
//     boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
//     com.google.javascript.rhino.ErrorReporter var24 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
//     var25.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var28 = null;
//     com.google.javascript.rhino.jstype.JSType var30 = null;
//     com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
//     com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
//     com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
//     com.google.javascript.rhino.ErrorReporter var36 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
//     var37.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var40 = null;
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
//     com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
//     boolean var45 = var44.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var46 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
//     var47.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var50 = null;
//     com.google.javascript.rhino.jstype.JSType var52 = null;
//     com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
//     com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
//     com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
//     boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
//     var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
//     com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var62 = var61.cloneNode();
//     boolean var63 = var61.isDelProp();
//     com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var66 = var65.cloneNode();
//     boolean var67 = var65.isDelProp();
//     com.google.javascript.rhino.Node var68 = var61.clonePropsFrom(var65);
//     com.google.javascript.rhino.JSDocInfo var69 = var65.getJSDocInfo();
//     com.google.javascript.jscomp.CodingConvention.Bind var71 = var0.describeFunctionBind(var65, true);
//     com.google.javascript.rhino.ErrorReporter var72 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var73 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var72);
//     var73.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var76 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var76);
//     var77.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var80 = null;
//     com.google.javascript.rhino.jstype.JSType var82 = null;
//     com.google.javascript.rhino.jstype.JSType[] var83 = new com.google.javascript.rhino.jstype.JSType[] { var82};
//     com.google.javascript.rhino.jstype.FunctionType var84 = var77.createConstructorType(var80, false, var83);
//     com.google.javascript.rhino.jstype.JSType var86 = var84.findPropertyType("hi!");
//     int var87 = var84.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var88 = new com.google.javascript.rhino.jstype.JSType[] { var84};
//     com.google.javascript.rhino.Node var89 = var73.createParametersWithVarArgs(var88);
//     com.google.javascript.rhino.Node var90 = var65.useSourceInfoFrom(var89);
//     boolean var91 = var65.isLabelName();
//     com.google.javascript.rhino.Node[] var92 = null;
//     com.google.javascript.rhino.Node var93 = com.google.javascript.rhino.IR.newNode(var65, var92);
// 
//   }

  public void test377() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test377"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var2 = var1.cloneNode();
    boolean var3 = var1.isDelProp();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var6 = var5.cloneNode();
    boolean var7 = var5.isDelProp();
    com.google.javascript.rhino.Node var8 = var1.clonePropsFrom(var5);
    com.google.javascript.rhino.JSDocInfo var9 = var5.getJSDocInfo();
    int var10 = var5.getLineno();
    boolean var11 = var5.isFalse();
    boolean var12 = var5.isVar();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test378() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test378"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var11 = var8.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    var13.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType[] var19 = new com.google.javascript.rhino.jstype.JSType[] { var18};
    com.google.javascript.rhino.jstype.FunctionType var20 = var13.createConstructorType(var16, false, var19);
    boolean var21 = var20.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    var23.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType[] var29 = new com.google.javascript.rhino.jstype.JSType[] { var28};
    com.google.javascript.rhino.jstype.FunctionType var30 = var23.createConstructorType(var26, false, var29);
    com.google.javascript.rhino.jstype.JSType var32 = var30.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var33 = var30.getTypeOfThis();
    boolean var34 = var20.canCastTo((com.google.javascript.rhino.jstype.JSType)var30);
    boolean var35 = var8.hasEqualCallType(var30);
    boolean var36 = var8.matchesUint32Context();
    int var37 = var8.getMinArguments();
    int var38 = var8.getMaxArguments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);

  }

  public void test379() {}
//   public void test379() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test379"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(var0);
// 
//   }

  public void test380() {}
//   public void test380() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test380"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile.Generator var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromGenerator("LABEL_NAME hi! 10", var1);
//     com.google.javascript.jscomp.Region var4 = var2.getRegion(0);
// 
//   }

  public void test381() {}
//   public void test381() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test381"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
//     int var15 = var12.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
//     com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
//     com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
//     var1.clearTemplateTypeNames();
//     com.google.javascript.rhino.jstype.JSTypeNative var20 = null;
//     com.google.javascript.rhino.jstype.JSType var21 = var1.getNativeType(var20);
// 
//   }

  public void test382() {}
//   public void test382() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test382"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var1);
//     double var3 = var0.getProgress();
//     var0.reportCodeChange();
//     com.google.javascript.rhino.head.ast.AstRoot var6 = var0.getOldParseTreeByName("LinkedGraph");
//     com.google.javascript.jscomp.NodeTraversal.Callback var7 = null;
//     com.google.javascript.jscomp.NodeTraversal var8 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var7);
//     var0.processDefines();
// 
//   }

  public void test383() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test383"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineProperties(true);
    var0.setRuntimeTypeCheckLogFunction("Object#Element");
    var0.setInlineVariables(true);
    var0.setSyntheticBlockStartMarker("hi!");
    com.google.javascript.jscomp.CheckLevel var9 = null;
    var0.setCheckProvides(var9);
    var0.setCheckSymbols(true);
    var0.setRemoveDeadCode(false);
    var0.setTweakToStringLiteral("false", "STRING hi!\n");

  }

  public void test384() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test384"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node((-1), 1, 0);
    boolean var4 = var3.isLocalResultCall();
    boolean var5 = var3.isArrayLit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test385() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test385"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    java.lang.String var2 = var0.getExportPropertyFunction();
    boolean var4 = var0.isSuperClassReference("hi!: ");
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.Node.newString("hi!: ");
    boolean var7 = var6.isSetterDef();
    com.google.javascript.rhino.Node var8 = var6.getLastSibling();
    boolean var9 = var6.isLabel();
    boolean var10 = var6.isDo();
    boolean var11 = var6.isArrayLit();
    com.google.javascript.jscomp.CodingConvention.Bind var12 = var0.describeFunctionBind(var6);
    java.lang.String var13 = var0.getGlobalObject();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "goog.exportProperty"+ "'", var2.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "goog.global"+ "'", var13.equals("goog.global"));

  }

  public void test386() {}
//   public void test386() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test386"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setInlineProperties(true);
//     var0.setConvertToDottedProperties(false);
//     var0.setChainCalls(false);
//     var0.setNameReferenceReportPath("NUMBER 0.0");
//     var0.setClosurePass(true);
//     var0.setReplaceMessagesWithChromeI18n(false, "Unversioned directory");
//     com.google.javascript.jscomp.CheckLevel var14 = null;
//     var0.setCheckGlobalThisLevel(var14);
//     com.google.javascript.jscomp.CompilerOptions.Reach var16 = null;
//     var0.setInlineFunctions(var16);
// 
//   }

  public void test387() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test387"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
    com.google.javascript.rhino.jstype.JSType var12 = var10.findPropertyType("hi!");
    int var13 = var10.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var15 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var10, "");
    boolean var16 = var10.isFunctionPrototypeType();
    boolean var17 = var10.isTemplateType();
    boolean var18 = var10.isBooleanObjectType();
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    var20.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var23 = null;
    com.google.javascript.rhino.jstype.JSType var25 = null;
    com.google.javascript.rhino.jstype.JSType[] var26 = new com.google.javascript.rhino.jstype.JSType[] { var25};
    com.google.javascript.rhino.jstype.FunctionType var27 = var20.createConstructorType(var23, false, var26);
    boolean var28 = var27.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    var30.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.jstype.JSType var35 = null;
    com.google.javascript.rhino.jstype.JSType[] var36 = new com.google.javascript.rhino.jstype.JSType[] { var35};
    com.google.javascript.rhino.jstype.FunctionType var37 = var30.createConstructorType(var33, false, var36);
    com.google.javascript.rhino.jstype.JSType var39 = var37.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var40 = var37.getTypeOfThis();
    boolean var41 = var27.canCastTo((com.google.javascript.rhino.jstype.JSType)var37);
    boolean var42 = var37.isDateType();
    boolean var43 = var37.isNullType();
    boolean var44 = var37.hasCachedValues();
    boolean var45 = var37.isNullable();
    boolean var46 = var37.isConstructor();
    boolean var47 = var37.hasImplementedInterfaces();
    com.google.javascript.rhino.jstype.FunctionType var48 = var1.createFunctionTypeWithNewReturnType(var10, (com.google.javascript.rhino.jstype.JSType)var37);
    java.util.List var49 = var10.getSubTypes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);

  }

  public void test388() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test388"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
    int var15 = var12.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
    com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
    boolean var19 = var18.hasAnyTemplateTypesInternal();
    com.google.javascript.rhino.jstype.BooleanLiteralSet var20 = var18.getPossibleToBooleanOutcomes();
    java.lang.String var21 = var20.toString();
    java.lang.Class var22 = var20.getDeclaringClass();
    java.lang.Enum var24 = java.lang.Enum.<java.lang.Enum>valueOf(var22, "FALSE");
    int var25 = var24.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "TRUE"+ "'", var21.equals("TRUE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 2);

  }

  public void test389() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test389"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString("hi!", (-3), (-1));
    boolean var5 = var4.isDo();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var8 = var7.cloneNode();
    boolean var9 = var7.isDelProp();
    int var10 = var7.getSideEffectFlags();
    boolean var11 = var7.isEmpty();
    java.lang.String var12 = var7.getString();
    com.google.javascript.jscomp.Compiler var13 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var16 = var13.getSourceLine("", (-1));
    com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var17 = null;
    com.google.javascript.jscomp.LightweightMessageFormatter var18 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var13, var17);
    java.util.logging.Logger var19 = null;
    com.google.javascript.jscomp.LoggerErrorManager var20 = new com.google.javascript.jscomp.LoggerErrorManager((com.google.javascript.jscomp.MessageFormatter)var18, var19);
    java.util.logging.Logger var21 = null;
    com.google.javascript.jscomp.LoggerErrorManager var22 = new com.google.javascript.jscomp.LoggerErrorManager((com.google.javascript.jscomp.MessageFormatter)var18, var21);
    java.util.logging.Logger var23 = null;
    com.google.javascript.jscomp.LoggerErrorManager var24 = new com.google.javascript.jscomp.LoggerErrorManager((com.google.javascript.jscomp.MessageFormatter)var18, var23);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.connect((java.lang.Object)var5, (java.lang.Object)var12, (java.lang.Object)var18);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test390() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test390"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    var2.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
    com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
    boolean var10 = var9.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    var12.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
    com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
    boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    var37.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
    boolean var45 = var44.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    var47.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
    com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
    boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
    var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
    java.lang.String var60 = var0.getExportPropertyFunction();
    java.lang.String var61 = var0.getGlobalObject();
    boolean var63 = var0.isConstant("");
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var66 = var65.cloneNode();
    boolean var67 = var65.isDelProp();
    com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var70 = var69.cloneNode();
    boolean var71 = var69.isDelProp();
    com.google.javascript.rhino.Node var72 = var65.clonePropsFrom(var69);
    boolean var73 = var65.isHook();
    boolean var74 = var65.isContinue();
    boolean var75 = var65.isReturn();
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.Node.newString("hi!: ");
    boolean var78 = var77.isSetterDef();
    com.google.javascript.rhino.Node var79 = var77.getLastSibling();
    java.lang.String var80 = var0.extractClassNameIfProvide(var65, var77);
    com.google.javascript.rhino.jstype.FunctionType var81 = null;
    com.google.javascript.rhino.ErrorReporter var82 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var83 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var82);
    var83.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var86 = null;
    com.google.javascript.rhino.jstype.JSType var88 = null;
    com.google.javascript.rhino.jstype.JSType[] var89 = new com.google.javascript.rhino.jstype.JSType[] { var88};
    com.google.javascript.rhino.jstype.FunctionType var90 = var83.createConstructorType(var86, false, var89);
    com.google.javascript.rhino.jstype.JSType var92 = var90.findPropertyType("hi!");
    int var93 = var90.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var95 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var90, "");
    boolean var96 = var90.isFunctionPrototypeType();
    boolean var97 = var90.isTemplateType();
    com.google.javascript.jscomp.CodingConvention.SubclassType var98 = null;
    var0.applySubclassRelationship(var81, var90, var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "goog.exportProperty"+ "'", var60.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "goog.global"+ "'", var61.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test391() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test391"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.util.Set var9 = null;
    var1.setDirectives(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    int var15 = var13.getSideEffectFlags();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    boolean var19 = var17.isWith();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
    java.util.Set var21 = null;
    var13.setDirectives(var21);
    com.google.javascript.jscomp.CheckLevel var23 = null;
    com.google.javascript.jscomp.CheckLevel var25 = null;
    com.google.javascript.jscomp.DiagnosticType var27 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var25, "");
    java.lang.String[] var28 = null;
    com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("hi!", var13, var23, var27, var28);
    com.google.javascript.rhino.Node var30 = var1.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.Node var32 = var13.getAncestor(0);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var36 = var35.cloneNode();
    boolean var37 = var35.isDelProp();
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var40 = var39.cloneNode();
    boolean var41 = var39.isDelProp();
    com.google.javascript.rhino.Node var42 = var35.clonePropsFrom(var39);
    boolean var43 = var39.isBlock();
    var13.putProp((-1), (java.lang.Object)var39);
    boolean var45 = var13.wasEmptyNode();
    com.google.javascript.rhino.Node var46 = var13.getFirstChild();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);

  }

  public void test392() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test392"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
    boolean var4 = var3.isNE();
    int var5 = var3.getSideEffectFlags();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
    boolean var8 = var7.isNE();
    boolean var9 = var7.isWith();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
    java.util.Set var11 = null;
    var3.setDirectives(var11);
    com.google.javascript.jscomp.CheckLevel var13 = null;
    com.google.javascript.jscomp.CheckLevel var15 = null;
    com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var15, "");
    java.lang.String[] var18 = null;
    com.google.javascript.jscomp.JSError var19 = com.google.javascript.jscomp.JSError.make("hi!", var3, var13, var17, var18);
    com.google.javascript.jscomp.CheckLevel var24 = null;
    com.google.javascript.jscomp.DiagnosticType var26 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var24, "");
    java.lang.String[] var28 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("", 100, 0, var26, var28);
    java.lang.String[] var31 = new java.lang.String[] { "hi!"};
    com.google.javascript.jscomp.JSError var32 = com.google.javascript.jscomp.JSError.make("hi!", var3, var26, var31);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var34 = var33.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var35 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var35);
    var36.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var39 = null;
    com.google.javascript.rhino.jstype.JSType var41 = null;
    com.google.javascript.rhino.jstype.JSType[] var42 = new com.google.javascript.rhino.jstype.JSType[] { var41};
    com.google.javascript.rhino.jstype.FunctionType var43 = var36.createConstructorType(var39, false, var42);
    com.google.javascript.rhino.jstype.JSType var45 = var43.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var46 = var43.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var47 = var33.getNode((java.lang.Object)var46);
    java.util.List var48 = var33.getEdges();
    boolean var49 = var32.equals((java.lang.Object)var48);
    int var50 = var32.getCharno();
    int var51 = var32.getNodeLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);

  }

  public void test393() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test393"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionParamBuilder var1 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
    boolean var11 = var1.addRequiredParams(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    int var15 = var13.getSideEffectFlags();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    boolean var19 = var17.isWith();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.string("hi!");
    var17.addChildToBack(var22);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var24 = var22.getJsDocBuilderForNode();
    int var25 = var22.getCharno();
    java.lang.Object var27 = var22.getProp(10);
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.string("hi!");
    boolean var30 = var29.isNE();
    int var31 = var29.getSideEffectFlags();
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.string("hi!");
    boolean var34 = var33.isNE();
    boolean var35 = var33.isWith();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.getprop(var29, var33);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.string("hi!");
    var33.addChildToBack(var38);
    com.google.javascript.rhino.Node var40 = var22.srcrefTree(var38);
    com.google.javascript.rhino.Node var41 = var1.newParameterFromNode(var22);
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.string("hi!");
    boolean var44 = var43.isNE();
    int var45 = var43.getSideEffectFlags();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.string("hi!");
    boolean var48 = var47.isNE();
    boolean var49 = var47.isWith();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.getprop(var43, var47);
    var47.removeProp(0);
    java.lang.String var53 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var47);
    java.util.Set var54 = null;
    var47.setDirectives(var54);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var56 = var47.getJsDocBuilderForNode();
    com.google.javascript.rhino.Node var57 = var1.newOptionalParameterFromNode(var47);
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.ErrorReporter var60 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var60);
    com.google.javascript.rhino.ErrorReporter var62 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var62);
    var63.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var66 = null;
    com.google.javascript.rhino.jstype.JSType var68 = null;
    com.google.javascript.rhino.jstype.JSType[] var69 = new com.google.javascript.rhino.jstype.JSType[] { var68};
    com.google.javascript.rhino.jstype.FunctionType var70 = var63.createConstructorType(var66, false, var69);
    boolean var71 = var70.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var72 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var73 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var72);
    var73.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var76 = null;
    com.google.javascript.rhino.jstype.JSType var78 = null;
    com.google.javascript.rhino.jstype.JSType[] var79 = new com.google.javascript.rhino.jstype.JSType[] { var78};
    com.google.javascript.rhino.jstype.FunctionType var80 = var73.createConstructorType(var76, false, var79);
    com.google.javascript.rhino.jstype.JSType var82 = var80.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var83 = var80.getTypeOfThis();
    boolean var84 = var70.canCastTo((com.google.javascript.rhino.jstype.JSType)var80);
    com.google.javascript.rhino.ErrorReporter var85 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var86 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var85);
    var86.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var89 = null;
    com.google.javascript.rhino.jstype.JSType var91 = null;
    com.google.javascript.rhino.jstype.JSType[] var92 = new com.google.javascript.rhino.jstype.JSType[] { var91};
    com.google.javascript.rhino.jstype.FunctionType var93 = var86.createConstructorType(var89, false, var92);
    boolean var94 = var93.isInterface();
    com.google.javascript.rhino.jstype.JSType[] var95 = new com.google.javascript.rhino.jstype.JSType[] { var93};
    com.google.javascript.rhino.jstype.FunctionType var96 = var61.createConstructorType((com.google.javascript.rhino.jstype.JSType)var70, var95);
    com.google.javascript.rhino.Node var97 = var59.createOptionalParameters(var95);
    boolean var98 = var1.addRequiredParams(var95);
    com.google.javascript.rhino.Node var99 = var1.build();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test394() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test394"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.Node.newString(40, "hi!.  at (unknown source) line (unknown line) : (unknown column)");
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var6 = var5.cloneNode();
    boolean var7 = var5.isDelProp();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var10 = var9.cloneNode();
    boolean var11 = var9.isDelProp();
    com.google.javascript.rhino.Node var12 = var5.clonePropsFrom(var9);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
    com.google.javascript.rhino.Node var18 = var17.getLastChild();
    com.google.javascript.rhino.Node var19 = var9.srcrefTree(var17);
    com.google.javascript.rhino.Node[] var20 = new com.google.javascript.rhino.Node[] { var17};
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node((-3), var20);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.call(var2, var20);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test395() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test395"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    java.util.Set var10 = null;
    var2.setDirectives(var10);
    com.google.javascript.jscomp.CheckLevel var12 = null;
    com.google.javascript.jscomp.CheckLevel var14 = null;
    com.google.javascript.jscomp.DiagnosticType var16 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var14, "");
    java.lang.String[] var17 = null;
    com.google.javascript.jscomp.JSError var18 = com.google.javascript.jscomp.JSError.make("hi!", var2, var12, var16, var17);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.string("hi!");
    boolean var22 = var21.isNE();
    int var23 = var21.getSideEffectFlags();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.string("hi!");
    boolean var26 = var25.isNE();
    boolean var27 = var25.isWith();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.getprop(var21, var25);
    java.util.Set var29 = null;
    var21.setDirectives(var29);
    com.google.javascript.jscomp.CheckLevel var31 = null;
    com.google.javascript.jscomp.CheckLevel var33 = null;
    com.google.javascript.jscomp.DiagnosticType var35 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var33, "");
    java.lang.String[] var36 = null;
    com.google.javascript.jscomp.JSError var37 = com.google.javascript.jscomp.JSError.make("hi!", var21, var31, var35, var36);
    var21.addSuppression("");
    com.google.javascript.rhino.Node var40 = var2.useSourceInfoFromForTree(var21);
    boolean var41 = var2.isStringKey();
    int var42 = var2.getChildCount();
    var2.removeProp(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);

  }

  public void test396() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test396"); }


    com.google.javascript.jscomp.SourceAst var0 = null;
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
    com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
    com.google.javascript.rhino.InputId var5 = var3.getInputId();
    java.lang.String var6 = var3.getName();
    com.google.javascript.rhino.InputId var7 = var3.getInputId();
    java.lang.String var8 = var7.getIdName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));

  }

  public void test397() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test397"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
    var4.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType var9 = null;
    com.google.javascript.rhino.jstype.JSType[] var10 = new com.google.javascript.rhino.jstype.JSType[] { var9};
    com.google.javascript.rhino.jstype.FunctionType var11 = var4.createConstructorType(var7, false, var10);
    boolean var12 = var11.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    var14.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.jstype.JSType[] var20 = new com.google.javascript.rhino.jstype.JSType[] { var19};
    com.google.javascript.rhino.jstype.FunctionType var21 = var14.createConstructorType(var17, false, var20);
    com.google.javascript.rhino.jstype.JSType var23 = var21.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var24 = var21.getTypeOfThis();
    boolean var25 = var11.canCastTo((com.google.javascript.rhino.jstype.JSType)var21);
    boolean var26 = var21.isDateType();
    com.google.javascript.rhino.jstype.JSType[] var27 = new com.google.javascript.rhino.jstype.JSType[] { var21};
    com.google.javascript.rhino.Node var28 = var1.createParametersWithVarArgs(var27);
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    var30.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33);
    var34.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var37 = null;
    com.google.javascript.rhino.jstype.JSType var39 = null;
    com.google.javascript.rhino.jstype.JSType[] var40 = new com.google.javascript.rhino.jstype.JSType[] { var39};
    com.google.javascript.rhino.jstype.FunctionType var41 = var34.createConstructorType(var37, false, var40);
    boolean var42 = var41.canBeCalled();
    boolean var43 = var41.isTemplatizedType();
    com.google.javascript.rhino.ErrorReporter var45 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
    var46.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var49 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var49);
    var50.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var53 = null;
    com.google.javascript.rhino.jstype.JSType var55 = null;
    com.google.javascript.rhino.jstype.JSType[] var56 = new com.google.javascript.rhino.jstype.JSType[] { var55};
    com.google.javascript.rhino.jstype.FunctionType var57 = var50.createConstructorType(var53, false, var56);
    com.google.javascript.rhino.jstype.JSType var59 = var57.findPropertyType("hi!");
    int var60 = var57.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var61 = new com.google.javascript.rhino.jstype.JSType[] { var57};
    com.google.javascript.rhino.Node var62 = var46.createParametersWithVarArgs(var61);
    com.google.javascript.rhino.jstype.FunctionType var63 = var30.createFunctionType((com.google.javascript.rhino.jstype.JSType)var41, false, var61);
    com.google.javascript.rhino.ErrorReporter var65 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var65);
    com.google.javascript.rhino.ErrorReporter var67 = var66.getErrorReporter();
    com.google.javascript.rhino.ErrorReporter var68 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var69 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var68);
    var69.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var72 = null;
    com.google.javascript.rhino.jstype.JSType var74 = null;
    com.google.javascript.rhino.jstype.JSType[] var75 = new com.google.javascript.rhino.jstype.JSType[] { var74};
    com.google.javascript.rhino.jstype.FunctionType var76 = var69.createConstructorType(var72, false, var75);
    boolean var77 = var76.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var78 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var79 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var78);
    var79.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var82 = null;
    com.google.javascript.rhino.jstype.JSType var84 = null;
    com.google.javascript.rhino.jstype.JSType[] var85 = new com.google.javascript.rhino.jstype.JSType[] { var84};
    com.google.javascript.rhino.jstype.FunctionType var86 = var79.createConstructorType(var82, false, var85);
    com.google.javascript.rhino.jstype.JSType var88 = var86.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var89 = var86.getTypeOfThis();
    boolean var90 = var76.canCastTo((com.google.javascript.rhino.jstype.JSType)var86);
    boolean var91 = var86.isDateType();
    com.google.javascript.rhino.jstype.JSType[] var92 = new com.google.javascript.rhino.jstype.JSType[] { var86};
    com.google.javascript.rhino.Node var93 = var66.createParametersWithVarArgs(var92);
    com.google.javascript.rhino.jstype.FunctionType var94 = var1.createFunctionType((com.google.javascript.rhino.jstype.JSType)var41, false, var92);
    boolean var95 = var41.isNoType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);

  }

  public void test398() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test398"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionParamBuilder var1 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
    boolean var11 = var1.addRequiredParams(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    int var15 = var13.getSideEffectFlags();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    boolean var19 = var17.isWith();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.string("hi!");
    var17.addChildToBack(var22);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var24 = var22.getJsDocBuilderForNode();
    int var25 = var22.getCharno();
    java.lang.Object var27 = var22.getProp(10);
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.string("hi!");
    boolean var30 = var29.isNE();
    int var31 = var29.getSideEffectFlags();
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.string("hi!");
    boolean var34 = var33.isNE();
    boolean var35 = var33.isWith();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.getprop(var29, var33);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.string("hi!");
    var33.addChildToBack(var38);
    com.google.javascript.rhino.Node var40 = var22.srcrefTree(var38);
    com.google.javascript.rhino.Node var41 = var1.newParameterFromNode(var22);
    com.google.javascript.rhino.Node var42 = var1.build();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var43 = com.google.javascript.jscomp.NodeUtil.isLValue(var42);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test399() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test399"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
    com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var1);
    double var3 = var0.getProgress();
    var0.reportCodeChange();
    com.google.javascript.rhino.head.ast.AstRoot var6 = var0.getOldParseTreeByName("LinkedGraph");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var7 = var0.toSource();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test400() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test400"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.VariableRenamingPolicy var1 = com.google.javascript.jscomp.VariableRenamingPolicy.valueOf("LABEL_NAME hi!\n");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test401() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test401"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    boolean var12 = var5.isVar();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.string("hi!");
    boolean var15 = var14.isNE();
    int var16 = var14.getSideEffectFlags();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.string("hi!");
    boolean var19 = var18.isNE();
    boolean var20 = var18.isWith();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.getprop(var14, var18);
    java.lang.Iterable var22 = var21.siblings();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.string("hi!");
    boolean var25 = var24.isNE();
    int var26 = var24.getSideEffectFlags();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.string("hi!");
    boolean var29 = var28.isNE();
    boolean var30 = var28.isWith();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.getprop(var24, var28);
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.string("hi!");
    var28.addChildToBack(var33);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var35 = var33.getJsDocBuilderForNode();
    int var36 = var33.getCharno();
    java.lang.Object var38 = var33.getProp(10);
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.string("hi!");
    boolean var41 = var40.isNE();
    int var42 = var40.getSideEffectFlags();
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.string("hi!");
    boolean var45 = var44.isNE();
    boolean var46 = var44.isWith();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.getprop(var40, var44);
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.string("hi!");
    var44.addChildToBack(var49);
    com.google.javascript.rhino.Node var51 = var33.srcrefTree(var49);
    com.google.javascript.rhino.Node var52 = var21.useSourceInfoFromForTree(var51);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.removeChild(var51);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test402() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test402"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.TemplatizedType var11 = com.google.javascript.rhino.jstype.JSType.toMaybeTemplatizedType((com.google.javascript.rhino.jstype.JSType)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test403() {}
//   public void test403() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test403"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
//     com.google.javascript.rhino.jstype.TemplateType var3 = var1.getObjectElementKey();
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var15 = var12.toMaybeFunctionType();
//     com.google.javascript.rhino.ErrorReporter var16 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
//     var17.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var20 = null;
//     com.google.javascript.rhino.jstype.JSType var22 = null;
//     com.google.javascript.rhino.jstype.JSType[] var23 = new com.google.javascript.rhino.jstype.JSType[] { var22};
//     com.google.javascript.rhino.jstype.FunctionType var24 = var17.createConstructorType(var20, false, var23);
//     boolean var25 = var24.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var26 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
//     var27.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var30 = null;
//     com.google.javascript.rhino.jstype.JSType var32 = null;
//     com.google.javascript.rhino.jstype.JSType[] var33 = new com.google.javascript.rhino.jstype.JSType[] { var32};
//     com.google.javascript.rhino.jstype.FunctionType var34 = var27.createConstructorType(var30, false, var33);
//     com.google.javascript.rhino.jstype.JSType var36 = var34.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var37 = var34.getTypeOfThis();
//     boolean var38 = var24.canCastTo((com.google.javascript.rhino.jstype.JSType)var34);
//     boolean var39 = var12.hasEqualCallType(var34);
//     boolean var40 = var12.matchesUint32Context();
//     com.google.javascript.rhino.jstype.JSType var42 = var1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType)var12, "goog.global");
//     boolean var43 = var42.isUnknownType();
//     com.google.javascript.rhino.jstype.JSType var44 = null;
//     com.google.javascript.rhino.jstype.JSType var45 = var42.getGreatestSubtype(var44);
// 
//   }

  public void test404() {}
//   public void test404() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test404"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
//     com.google.javascript.rhino.ErrorReporter var3 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
//     var4.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.jstype.JSType var9 = null;
//     com.google.javascript.rhino.jstype.JSType[] var10 = new com.google.javascript.rhino.jstype.JSType[] { var9};
//     com.google.javascript.rhino.jstype.FunctionType var11 = var4.createConstructorType(var7, false, var10);
//     boolean var12 = var11.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var13 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
//     var14.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     com.google.javascript.rhino.jstype.JSType var19 = null;
//     com.google.javascript.rhino.jstype.JSType[] var20 = new com.google.javascript.rhino.jstype.JSType[] { var19};
//     com.google.javascript.rhino.jstype.FunctionType var21 = var14.createConstructorType(var17, false, var20);
//     com.google.javascript.rhino.jstype.JSType var23 = var21.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var24 = var21.getTypeOfThis();
//     boolean var25 = var11.canCastTo((com.google.javascript.rhino.jstype.JSType)var21);
//     boolean var26 = var21.isDateType();
//     com.google.javascript.rhino.jstype.JSType[] var27 = new com.google.javascript.rhino.jstype.JSType[] { var21};
//     com.google.javascript.rhino.Node var28 = var1.createParametersWithVarArgs(var27);
//     java.lang.Iterable var30 = var1.getEachReferenceTypeWithProperty("()");
//     com.google.javascript.rhino.jstype.TemplateType var31 = var1.getObjectIndexKey();
//     com.google.javascript.rhino.jstype.FunctionType var32 = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType((com.google.javascript.rhino.jstype.JSType)var31);
// 
//   }

  public void test405() {}
//   public void test405() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test405"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.CompilerOptions.TracerMode var1 = null;
//     var0.setTracerMode(var1);
//     var0.setRuntimeTypeCheck(false);
//     var0.setInlineConstantVars(true);
//     var0.setSaveDataStructures(false);
//     com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var9 = var0.getAliasTransformationHandler();
//     com.google.javascript.jscomp.CompilerOptions.Reach var10 = null;
//     var0.setInlineFunctions(var10);
// 
//   }

  public void test406() {}
//   public void test406() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test406"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
//     int var15 = var12.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
//     com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
//     com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
//     boolean var19 = var18.hasAnyTemplateTypesInternal();
//     com.google.javascript.rhino.jstype.BooleanLiteralSet var20 = var18.getPossibleToBooleanOutcomes();
//     com.google.javascript.rhino.jstype.Visitor var21 = null;
//     java.lang.Object var22 = var18.visit(var21);
// 
//   }

  public void test407() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test407"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("FALSE");
    com.google.javascript.jscomp.JsAst var2 = new com.google.javascript.jscomp.JsAst(var1);
    com.google.javascript.jscomp.SourceFile var3 = var2.getSourceFile();
    com.google.javascript.jscomp.SourceFile var4 = var2.getSourceFile();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var6 = var4.getColumnOfOffset((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test408() {}
//   public void test408() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test408"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var1 = new com.google.javascript.jscomp.SourceFile("goog.exportProperty");
//     java.io.Reader var2 = var1.getCodeReader();
// 
//   }

  public void test409() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test409"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.lang.String var9 = com.google.javascript.jscomp.NodeUtil.getSourceName(var1);
    boolean var10 = var1.isCase();
    boolean var11 = var1.isRegExp();
    com.google.javascript.rhino.Node var12 = var1.detachFromParent();
    boolean var13 = var12.isInstanceOf();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
    boolean var19 = var18.isCast();
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = null;
    com.google.javascript.rhino.jstype.FunctionParamBuilder var21 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var20);
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    var23.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType[] var29 = new com.google.javascript.rhino.jstype.JSType[] { var28};
    com.google.javascript.rhino.jstype.FunctionType var30 = var23.createConstructorType(var26, false, var29);
    boolean var31 = var21.addRequiredParams(var29);
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var34 = var33.cloneNode();
    boolean var35 = var33.isDelProp();
    int var36 = var33.getSideEffectFlags();
    com.google.javascript.rhino.Node var37 = var21.newOptionalParameterFromNode(var33);
    boolean var38 = var37.isDefaultCase();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var12.addChildrenAfter(var18, var37);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test410() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test410"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var2 = var1.cloneNode();
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.continueNode(var2);
    var3.putIntProp(2, 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test411() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test411"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.block();
    com.google.javascript.rhino.InputId var1 = var0.getInputId();
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    var7.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType var12 = null;
    com.google.javascript.rhino.jstype.JSType[] var13 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.jstype.FunctionType var14 = var7.createConstructorType(var10, false, var13);
    com.google.javascript.rhino.jstype.JSType var16 = var14.findPropertyType("hi!");
    int var17 = var14.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var14};
    com.google.javascript.rhino.Node var19 = var3.createParametersWithVarArgs(var18);
    com.google.javascript.rhino.jstype.TemplateType var20 = var3.getObjectIndexKey();
    boolean var21 = var3.shouldTolerateUndefinedValues();
    com.google.javascript.jscomp.ClosureCodingConvention var22 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.jscomp.GoogleCodingConvention var23 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var22);
    java.lang.String var24 = var22.getExportPropertyFunction();
    boolean var26 = var22.isConstant("goog.exportSymbol");
    boolean var28 = var22.isConstant("false");
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    com.google.javascript.rhino.ErrorReporter var31 = var30.getErrorReporter();
    com.google.javascript.rhino.ErrorReporter var32 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var32);
    var33.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.rhino.jstype.JSType var38 = null;
    com.google.javascript.rhino.jstype.JSType[] var39 = new com.google.javascript.rhino.jstype.JSType[] { var38};
    com.google.javascript.rhino.jstype.FunctionType var40 = var33.createConstructorType(var36, false, var39);
    boolean var41 = var40.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var42 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var42);
    var43.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var46 = null;
    com.google.javascript.rhino.jstype.JSType var48 = null;
    com.google.javascript.rhino.jstype.JSType[] var49 = new com.google.javascript.rhino.jstype.JSType[] { var48};
    com.google.javascript.rhino.jstype.FunctionType var50 = var43.createConstructorType(var46, false, var49);
    com.google.javascript.rhino.jstype.JSType var52 = var50.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var53 = var50.getTypeOfThis();
    boolean var54 = var40.canCastTo((com.google.javascript.rhino.jstype.JSType)var50);
    boolean var55 = var50.isUnionType();
    java.util.List var56 = var50.getSubTypes();
    boolean var57 = var50.isConstructor();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var58 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var59 = var58.getGraphvizNodes();
    com.google.javascript.jscomp.deps.SortedDependencies var60 = new com.google.javascript.jscomp.deps.SortedDependencies(var59);
    java.util.Map var61 = null;
    var22.defineDelegateProxyPrototypeProperties(var30, (com.google.javascript.rhino.jstype.StaticScope)var50, var59, var61);
    com.google.javascript.rhino.Node var63 = var3.createParameters(var59);
    boolean var64 = var0.isEquivalentTo(var63);
    boolean var65 = var0.isIn();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "goog.exportProperty"+ "'", var24.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test412() {}
//   public void test412() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test412"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
//     java.lang.String var3 = var2.getSourceName();
//     boolean var4 = var2.hasScope();
//     com.google.javascript.rhino.Node var5 = null;
//     com.google.javascript.jscomp.DiagnosticType var6 = null;
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var11 = var10.isNE();
//     int var12 = var10.getSideEffectFlags();
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var15 = var14.isNE();
//     boolean var16 = var14.isWith();
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.getprop(var10, var14);
//     java.util.Set var18 = null;
//     var10.setDirectives(var18);
//     com.google.javascript.jscomp.CheckLevel var20 = null;
//     com.google.javascript.jscomp.CheckLevel var22 = null;
//     com.google.javascript.jscomp.DiagnosticType var24 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var22, "");
//     java.lang.String[] var25 = null;
//     com.google.javascript.jscomp.JSError var26 = com.google.javascript.jscomp.JSError.make("hi!", var10, var20, var24, var25);
//     com.google.javascript.jscomp.CheckLevel var31 = null;
//     com.google.javascript.jscomp.DiagnosticType var33 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var31, "");
//     java.lang.String[] var35 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var36 = com.google.javascript.jscomp.JSError.make("", 100, 0, var33, var35);
//     java.lang.String[] var38 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var39 = com.google.javascript.jscomp.JSError.make("hi!", var10, var33, var38);
//     var2.report(var5, var6, var38);
// 
//   }

  public void test413() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test413"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
    int var15 = var12.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
    com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
    var1.clearTemplateTypeNames();
    com.google.javascript.rhino.jstype.FunctionParamBuilder var20 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    var1.forwardDeclareType("goog.exportSymbol");
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    var24.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.rhino.jstype.JSType var29 = null;
    com.google.javascript.rhino.jstype.JSType[] var30 = new com.google.javascript.rhino.jstype.JSType[] { var29};
    com.google.javascript.rhino.jstype.FunctionType var31 = var24.createConstructorType(var27, false, var30);
    com.google.javascript.rhino.jstype.JSType var33 = var31.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var34 = var31.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var35 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var35);
    var36.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var39 = null;
    com.google.javascript.rhino.jstype.JSType var41 = null;
    com.google.javascript.rhino.jstype.JSType[] var42 = new com.google.javascript.rhino.jstype.JSType[] { var41};
    com.google.javascript.rhino.jstype.FunctionType var43 = var36.createConstructorType(var39, false, var42);
    boolean var44 = var43.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var45 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
    var46.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.rhino.jstype.JSType[] var52 = new com.google.javascript.rhino.jstype.JSType[] { var51};
    com.google.javascript.rhino.jstype.FunctionType var53 = var46.createConstructorType(var49, false, var52);
    com.google.javascript.rhino.jstype.JSType var55 = var53.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var56 = var53.getTypeOfThis();
    boolean var57 = var43.canCastTo((com.google.javascript.rhino.jstype.JSType)var53);
    boolean var58 = var31.hasEqualCallType(var53);
    boolean var59 = var31.matchesUint32Context();
    com.google.javascript.rhino.ErrorReporter var60 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var60);
    var61.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var64 = null;
    com.google.javascript.rhino.jstype.JSType var66 = null;
    com.google.javascript.rhino.jstype.JSType[] var67 = new com.google.javascript.rhino.jstype.JSType[] { var66};
    com.google.javascript.rhino.jstype.FunctionType var68 = var61.createConstructorType(var64, false, var67);
    com.google.javascript.rhino.jstype.JSType var70 = var68.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var71 = var68.getTypeOfThis();
    com.google.javascript.rhino.jstype.JSType var72 = var71.unboxesTo();
    com.google.javascript.rhino.jstype.JSType var74 = var71.getRestrictedTypeGivenToBooleanOutcome(false);
    com.google.javascript.rhino.ErrorReporter var75 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var76 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var75);
    var76.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var79 = null;
    com.google.javascript.rhino.jstype.JSType var81 = null;
    com.google.javascript.rhino.jstype.JSType[] var82 = new com.google.javascript.rhino.jstype.JSType[] { var81};
    com.google.javascript.rhino.jstype.FunctionType var83 = var76.createConstructorType(var79, false, var82);
    com.google.javascript.rhino.jstype.JSType var85 = var83.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var86 = var83.toMaybeFunctionType();
    boolean var87 = var83.isUnionType();
    boolean var88 = com.google.javascript.rhino.jstype.JSType.isEquivalent(var74, (com.google.javascript.rhino.jstype.JSType)var83);
    boolean var89 = var31.isSubtype(var74);
    com.google.javascript.rhino.jstype.JSType var90 = var1.createOptionalType((com.google.javascript.rhino.jstype.JSType)var31);
    boolean var91 = var31.isFunctionPrototypeType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);

  }

  public void test414() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test414"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("NUMBER 0.0");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.paramList(var1);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test415() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test415"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.paramList();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast var3 = var0.getObjectLiteralCast(var2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test416() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test416"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineProperties(true);
    var0.setIdGeneratorsMap("LABEL_NAME hi!");
    var0.setComputeFunctionSideEffects(false);
    var0.setReplaceIdGenerators(false);
    com.google.javascript.jscomp.CodingConvention var9 = var0.getCodingConvention();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test417() {}
//   public void test417() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test417"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.not(var0);
// 
//   }

  public void test418() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test418"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
    java.lang.Iterable var6 = var4.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var7 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7);
    var8.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var11 = null;
    com.google.javascript.rhino.jstype.JSType var13 = null;
    com.google.javascript.rhino.jstype.JSType[] var14 = new com.google.javascript.rhino.jstype.JSType[] { var13};
    com.google.javascript.rhino.jstype.FunctionType var15 = var8.createConstructorType(var11, false, var14);
    boolean var16 = var15.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    var18.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var21 = null;
    com.google.javascript.rhino.jstype.JSType var23 = null;
    com.google.javascript.rhino.jstype.JSType[] var24 = new com.google.javascript.rhino.jstype.JSType[] { var23};
    com.google.javascript.rhino.jstype.FunctionType var25 = var18.createConstructorType(var21, false, var24);
    com.google.javascript.rhino.jstype.FunctionType var26 = var4.createConstructorType((com.google.javascript.rhino.jstype.JSType)var15, var24);
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    var28.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
    com.google.javascript.rhino.jstype.FunctionType var35 = var28.createConstructorType(var31, false, var34);
    com.google.javascript.rhino.jstype.JSType var37 = var35.findPropertyType("hi!");
    int var38 = var35.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var40 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var35, "");
    boolean var41 = var35.makesStructs();
    boolean var42 = var26.isSubtype((com.google.javascript.rhino.jstype.JSType)var35);
    boolean var43 = var26.isNumber();
    var2.setJSType((com.google.javascript.rhino.jstype.JSType)var26);
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(0, var2);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.string("hi!");
    boolean var48 = var47.isNE();
    int var49 = var47.getSideEffectFlags();
    com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.string("hi!");
    boolean var52 = var51.isNE();
    boolean var53 = var51.isWith();
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.getprop(var47, var51);
    com.google.javascript.rhino.Node var56 = com.google.javascript.rhino.IR.string("hi!");
    var51.addChildToBack(var56);
    boolean var58 = var51.isVar();
    com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.string("hi!");
    boolean var61 = var60.isNE();
    int var62 = var60.getSideEffectFlags();
    com.google.javascript.rhino.Node var64 = com.google.javascript.rhino.IR.string("hi!");
    boolean var65 = var64.isNE();
    boolean var66 = var64.isWith();
    com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.getprop(var60, var64);
    com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.IR.string("hi!");
    var64.addChildToBack(var69);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var71 = var69.getJsDocBuilderForNode();
    int var72 = var69.getCharno();
    boolean var73 = var51.isEquivalentTo(var69);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var74 = com.google.javascript.rhino.IR.assign(var2, var69);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test419() {}
//   public void test419() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test419"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     var0.clearEdgeAnnotations();
//     com.google.javascript.rhino.ErrorReporter var2 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
//     var3.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
//     com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
//     com.google.javascript.rhino.jstype.ObjectType var11 = var10.toObjectType();
//     java.util.Iterator var12 = var0.getNeighborNodesIterator((java.lang.Object)var10);
// 
//   }

  public void test420() {}
//   public void test420() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test420"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
//     com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = null;
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var3 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var2);
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     boolean var13 = var3.addRequiredParams(var11);
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var16 = var15.isNE();
//     int var17 = var15.getSideEffectFlags();
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var20 = var19.isNE();
//     boolean var21 = var19.isWith();
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.getprop(var15, var19);
//     com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.string("hi!");
//     var19.addChildToBack(var24);
//     com.google.javascript.rhino.Node.FileLevelJsDocBuilder var26 = var24.getJsDocBuilderForNode();
//     int var27 = var24.getCharno();
//     java.lang.Object var29 = var24.getProp(10);
//     com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var32 = var31.isNE();
//     int var33 = var31.getSideEffectFlags();
//     com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var36 = var35.isNE();
//     boolean var37 = var35.isWith();
//     com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.getprop(var31, var35);
//     com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.string("hi!");
//     var35.addChildToBack(var40);
//     com.google.javascript.rhino.Node var42 = var24.srcrefTree(var40);
//     com.google.javascript.rhino.Node var43 = var3.newParameterFromNode(var24);
//     com.google.javascript.rhino.Node var44 = var3.build();
//     com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.number((-1.0d));
//     var44.addChildrenToBack(var46);
//     boolean var48 = var46.isAssignAdd();
//     boolean var49 = var46.isDebugger();
//     var1.validateCodeRoot(var46);
// 
//   }

  public void test421() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test421"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineProperties(true);
    var0.setMarkNoSideEffectCalls(false);
    var0.setSaveDataStructures(false);
    var0.setInlineGetters(false);
    var0.setProtectHiddenSideEffects(false);
    com.google.javascript.jscomp.CheckLevel var11 = null;
    var0.setCheckRequires(var11);

  }

  public void test422() {}
//   public void test422() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test422"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var4 = null;
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
//     com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
//     boolean var9 = var8.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var10 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
//     var11.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var14 = null;
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     com.google.javascript.rhino.jstype.JSType[] var17 = new com.google.javascript.rhino.jstype.JSType[] { var16};
//     com.google.javascript.rhino.jstype.FunctionType var18 = var11.createConstructorType(var14, false, var17);
//     com.google.javascript.rhino.jstype.JSType var20 = var18.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var21 = var18.getTypeOfThis();
//     boolean var22 = var8.canCastTo((com.google.javascript.rhino.jstype.JSType)var18);
//     boolean var23 = var18.isDateType();
//     boolean var24 = var18.isNullType();
//     com.google.javascript.rhino.jstype.ObjectType var25 = var18.getInstanceType();
//     com.google.common.base.Predicate var26 = null;
//     boolean var27 = var25.setValidator(var26);
// 
//   }

  public void test423() {}
//   public void test423() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test423"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var4 = null;
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
//     com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
//     boolean var9 = var8.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var10 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
//     var11.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var14 = null;
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     com.google.javascript.rhino.jstype.JSType[] var17 = new com.google.javascript.rhino.jstype.JSType[] { var16};
//     com.google.javascript.rhino.jstype.FunctionType var18 = var11.createConstructorType(var14, false, var17);
//     com.google.javascript.rhino.jstype.JSType var20 = var18.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var21 = var18.getTypeOfThis();
//     boolean var22 = var8.canCastTo((com.google.javascript.rhino.jstype.JSType)var18);
//     boolean var23 = var18.isDateType();
//     boolean var24 = var18.isConstructor();
//     com.google.javascript.rhino.ErrorReporter var25 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
//     var26.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var29 = null;
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
//     com.google.javascript.rhino.jstype.FunctionType var33 = var26.createConstructorType(var29, false, var32);
//     boolean var34 = var33.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var35 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var35);
//     var36.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var39 = null;
//     com.google.javascript.rhino.jstype.JSType var41 = null;
//     com.google.javascript.rhino.jstype.JSType[] var42 = new com.google.javascript.rhino.jstype.JSType[] { var41};
//     com.google.javascript.rhino.jstype.FunctionType var43 = var36.createConstructorType(var39, false, var42);
//     com.google.javascript.rhino.jstype.JSType var45 = var43.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var46 = var43.getTypeOfThis();
//     boolean var47 = var33.canCastTo((com.google.javascript.rhino.jstype.JSType)var43);
//     boolean var48 = var43.isDateType();
//     boolean var49 = var43.isConstructor();
//     com.google.javascript.rhino.Node var50 = var43.getRootNode();
//     com.google.javascript.rhino.ErrorReporter var51 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
//     var52.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var55 = null;
//     com.google.javascript.rhino.jstype.JSType var57 = null;
//     com.google.javascript.rhino.jstype.JSType[] var58 = new com.google.javascript.rhino.jstype.JSType[] { var57};
//     com.google.javascript.rhino.jstype.FunctionType var59 = var52.createConstructorType(var55, false, var58);
//     boolean var60 = var59.isInterface();
//     com.google.javascript.rhino.jstype.JSType var61 = var43.getLeastSupertype((com.google.javascript.rhino.jstype.JSType)var59);
//     boolean var62 = com.google.javascript.rhino.jstype.JSType.isEquivalent((com.google.javascript.rhino.jstype.JSType)var18, (com.google.javascript.rhino.jstype.JSType)var59);
//     boolean var64 = var18.hasOwnProperty("false");
//     boolean var65 = var18.isDict();
//     java.lang.String var66 = var18.toAnnotationString();
// 
//   }

  public void test424() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test424"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    boolean var9 = var8.matchesInt32Context();
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    java.lang.Iterable var13 = var11.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    var15.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
    com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
    boolean var23 = var22.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.FunctionType var33 = var11.createConstructorType((com.google.javascript.rhino.jstype.JSType)var22, var31);
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    java.lang.Iterable var37 = var35.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var38 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
    var39.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType var44 = null;
    com.google.javascript.rhino.jstype.JSType[] var45 = new com.google.javascript.rhino.jstype.JSType[] { var44};
    com.google.javascript.rhino.jstype.FunctionType var46 = var39.createConstructorType(var42, false, var45);
    boolean var47 = var46.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var48 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var48);
    var49.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType var54 = null;
    com.google.javascript.rhino.jstype.JSType[] var55 = new com.google.javascript.rhino.jstype.JSType[] { var54};
    com.google.javascript.rhino.jstype.FunctionType var56 = var49.createConstructorType(var52, false, var55);
    com.google.javascript.rhino.jstype.FunctionType var57 = var35.createConstructorType((com.google.javascript.rhino.jstype.JSType)var46, var55);
    boolean var58 = var46.isReturnTypeInferred();
    boolean var59 = var46.isTemplatizedType();
    com.google.javascript.rhino.ErrorReporter var60 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var60);
    com.google.javascript.rhino.ErrorReporter var62 = var61.getErrorReporter();
    com.google.javascript.rhino.jstype.TemplateType var63 = var61.getObjectElementKey();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var64 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var65 = var64.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var66 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var66);
    var67.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var70 = null;
    com.google.javascript.rhino.jstype.JSType var72 = null;
    com.google.javascript.rhino.jstype.JSType[] var73 = new com.google.javascript.rhino.jstype.JSType[] { var72};
    com.google.javascript.rhino.jstype.FunctionType var74 = var67.createConstructorType(var70, false, var73);
    com.google.javascript.rhino.jstype.JSType var76 = var74.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var77 = var74.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var78 = var64.getNode((java.lang.Object)var77);
    java.util.List var79 = var64.getEdges();
    com.google.javascript.rhino.jstype.JSType var80 = var11.createFunctionType((com.google.javascript.rhino.jstype.ObjectType)var46, (com.google.javascript.rhino.jstype.JSType)var63, var79);
    var46.setStruct();
    boolean var82 = var46.isInterface();
    com.google.javascript.rhino.jstype.JSType var83 = var8.getGreatestSubtype((com.google.javascript.rhino.jstype.JSType)var46);
    boolean var84 = var83.isObject();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);

  }

  public void test425() {}
//   public void test425() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test425"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.cast(var0);
// 
//   }

  public void test426() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test426"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.JSTypeNative var1 = com.google.javascript.rhino.jstype.JSTypeNative.valueOf("InputId: hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test427() {}
//   public void test427() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test427"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     int var2 = var1.getErrorCount();
//     int var3 = var1.getErrorCount();
//     com.google.javascript.jscomp.Compiler var4 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.rhino.ErrorReporter var5 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
//     java.lang.Iterable var8 = var6.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var9 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var9);
//     var10.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var13 = null;
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var15};
//     com.google.javascript.rhino.jstype.FunctionType var17 = var10.createConstructorType(var13, false, var16);
//     boolean var18 = var17.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var19 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
//     var20.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var23 = null;
//     com.google.javascript.rhino.jstype.JSType var25 = null;
//     com.google.javascript.rhino.jstype.JSType[] var26 = new com.google.javascript.rhino.jstype.JSType[] { var25};
//     com.google.javascript.rhino.jstype.FunctionType var27 = var20.createConstructorType(var23, false, var26);
//     com.google.javascript.rhino.jstype.FunctionType var28 = var6.createConstructorType((com.google.javascript.rhino.jstype.JSType)var17, var26);
//     com.google.javascript.rhino.ErrorReporter var29 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
//     java.lang.Iterable var32 = var30.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var33 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33);
//     var34.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var37 = null;
//     com.google.javascript.rhino.jstype.JSType var39 = null;
//     com.google.javascript.rhino.jstype.JSType[] var40 = new com.google.javascript.rhino.jstype.JSType[] { var39};
//     com.google.javascript.rhino.jstype.FunctionType var41 = var34.createConstructorType(var37, false, var40);
//     boolean var42 = var41.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var43 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var43);
//     var44.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var47 = null;
//     com.google.javascript.rhino.jstype.JSType var49 = null;
//     com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
//     com.google.javascript.rhino.jstype.FunctionType var51 = var44.createConstructorType(var47, false, var50);
//     com.google.javascript.rhino.jstype.FunctionType var52 = var30.createConstructorType((com.google.javascript.rhino.jstype.JSType)var41, var50);
//     boolean var53 = var41.isReturnTypeInferred();
//     boolean var54 = var41.isTemplatizedType();
//     com.google.javascript.rhino.ErrorReporter var55 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var55);
//     com.google.javascript.rhino.ErrorReporter var57 = var56.getErrorReporter();
//     com.google.javascript.rhino.jstype.TemplateType var58 = var56.getObjectElementKey();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var59 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var60 = var59.getGraphvizNodes();
//     com.google.javascript.rhino.ErrorReporter var61 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var61);
//     var62.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var65 = null;
//     com.google.javascript.rhino.jstype.JSType var67 = null;
//     com.google.javascript.rhino.jstype.JSType[] var68 = new com.google.javascript.rhino.jstype.JSType[] { var67};
//     com.google.javascript.rhino.jstype.FunctionType var69 = var62.createConstructorType(var65, false, var68);
//     com.google.javascript.rhino.jstype.JSType var71 = var69.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var72 = var69.getTypeOfThis();
//     com.google.javascript.jscomp.graph.GraphNode var73 = var59.getNode((java.lang.Object)var72);
//     java.util.List var74 = var59.getEdges();
//     com.google.javascript.rhino.jstype.JSType var75 = var6.createFunctionType((com.google.javascript.rhino.jstype.ObjectType)var41, (com.google.javascript.rhino.jstype.JSType)var58, var74);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var76 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var77 = var76.getGraphvizNodes();
//     var41.setImplementedInterfaces(var77);
//     java.util.List var79 = null;
//     com.google.javascript.jscomp.CompilerOptions var80 = new com.google.javascript.jscomp.CompilerOptions();
//     var80.setInlineProperties(true);
//     var80.setConvertToDottedProperties(false);
//     var80.setRuntimeTypeCheck(false);
//     var4.<com.google.javascript.jscomp.SourceFile,com.google.javascript.jscomp.SourceFile>init(var77, var79, var80);
// 
//   }

  public void test428() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test428"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("STRING hi!", 0, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test429() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test429"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("goog.exportProperty");
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var1, false);
    boolean var4 = var3.isExtern();
    com.google.javascript.jscomp.JSModule var5 = null;
    var3.setModule(var5);
    com.google.javascript.jscomp.SourceAst var7 = var3.getAst();
    com.google.javascript.jscomp.SourceAst var8 = var3.getSourceAst();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test430() {}
//   public void test430() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test430"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.ErrorReporter var3 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
//     var4.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.jstype.JSType var9 = null;
//     com.google.javascript.rhino.jstype.JSType[] var10 = new com.google.javascript.rhino.jstype.JSType[] { var9};
//     com.google.javascript.rhino.jstype.FunctionType var11 = var4.createConstructorType(var7, false, var10);
//     boolean var12 = var11.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var13 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
//     var14.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     com.google.javascript.rhino.jstype.JSType var19 = null;
//     com.google.javascript.rhino.jstype.JSType[] var20 = new com.google.javascript.rhino.jstype.JSType[] { var19};
//     com.google.javascript.rhino.jstype.FunctionType var21 = var14.createConstructorType(var17, false, var20);
//     com.google.javascript.rhino.jstype.JSType var23 = var21.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var24 = var21.getTypeOfThis();
//     boolean var25 = var11.canCastTo((com.google.javascript.rhino.jstype.JSType)var21);
//     com.google.javascript.rhino.ErrorReporter var26 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
//     var27.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var30 = null;
//     com.google.javascript.rhino.jstype.JSType var32 = null;
//     com.google.javascript.rhino.jstype.JSType[] var33 = new com.google.javascript.rhino.jstype.JSType[] { var32};
//     com.google.javascript.rhino.jstype.FunctionType var34 = var27.createConstructorType(var30, false, var33);
//     com.google.javascript.rhino.jstype.JSType var36 = var34.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var37 = var34.toMaybeFunctionType();
//     com.google.javascript.rhino.ErrorReporter var38 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
//     var39.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     com.google.javascript.rhino.jstype.JSType var44 = null;
//     com.google.javascript.rhino.jstype.JSType[] var45 = new com.google.javascript.rhino.jstype.JSType[] { var44};
//     com.google.javascript.rhino.jstype.FunctionType var46 = var39.createConstructorType(var42, false, var45);
//     boolean var47 = var46.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var48 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var48);
//     var49.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var52 = null;
//     com.google.javascript.rhino.jstype.JSType var54 = null;
//     com.google.javascript.rhino.jstype.JSType[] var55 = new com.google.javascript.rhino.jstype.JSType[] { var54};
//     com.google.javascript.rhino.jstype.FunctionType var56 = var49.createConstructorType(var52, false, var55);
//     com.google.javascript.rhino.jstype.JSType var58 = var56.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var59 = var56.getTypeOfThis();
//     boolean var60 = var46.canCastTo((com.google.javascript.rhino.jstype.JSType)var56);
//     var2.applySingletonGetter(var11, var34, (com.google.javascript.rhino.jstype.ObjectType)var56);
//     com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var64 = var63.cloneNode();
//     boolean var65 = var63.isDelProp();
//     com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var68 = var67.cloneNode();
//     boolean var69 = var67.isDelProp();
//     com.google.javascript.rhino.Node var70 = var63.clonePropsFrom(var67);
//     com.google.javascript.rhino.JSDocInfo var71 = var67.getJSDocInfo();
//     com.google.javascript.jscomp.CodingConvention.Bind var73 = var2.describeFunctionBind(var67, true);
//     com.google.javascript.rhino.ErrorReporter var74 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var75 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var74);
//     var75.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var78 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var79 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var78);
//     var79.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var82 = null;
//     com.google.javascript.rhino.jstype.JSType var84 = null;
//     com.google.javascript.rhino.jstype.JSType[] var85 = new com.google.javascript.rhino.jstype.JSType[] { var84};
//     com.google.javascript.rhino.jstype.FunctionType var86 = var79.createConstructorType(var82, false, var85);
//     com.google.javascript.rhino.jstype.JSType var88 = var86.findPropertyType("hi!");
//     int var89 = var86.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var90 = new com.google.javascript.rhino.jstype.JSType[] { var86};
//     com.google.javascript.rhino.Node var91 = var75.createParametersWithVarArgs(var90);
//     com.google.javascript.rhino.Node var92 = var67.useSourceInfoFrom(var91);
//     com.google.javascript.rhino.Node var95 = new com.google.javascript.rhino.Node(1, var1, var92, 10, 100);
// 
//   }

  public void test431() {}
//   public void test431() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test431"); }
// 
// 
//     java.io.InputStream var2 = null;
//     com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromInputStream("TRUE", "LABEL_NAME hi!", var2);
// 
//   }

  public void test432() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test432"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.lang.Iterable var9 = var8.siblings();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.string("hi!");
    boolean var12 = var11.isNE();
    int var13 = var11.getSideEffectFlags();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.string("hi!");
    boolean var16 = var15.isNE();
    boolean var17 = var15.isWith();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.getprop(var11, var15);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.string("hi!");
    var15.addChildToBack(var20);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var22 = var20.getJsDocBuilderForNode();
    int var23 = var20.getCharno();
    java.lang.Object var25 = var20.getProp(10);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.string("hi!");
    boolean var28 = var27.isNE();
    int var29 = var27.getSideEffectFlags();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.string("hi!");
    boolean var32 = var31.isNE();
    boolean var33 = var31.isWith();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.getprop(var27, var31);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.string("hi!");
    var31.addChildToBack(var36);
    com.google.javascript.rhino.Node var38 = var20.srcrefTree(var36);
    com.google.javascript.rhino.Node var39 = var8.useSourceInfoFromForTree(var38);
    boolean var40 = var38.isBreak();
    boolean var41 = var38.isBlock();
    int var42 = var38.getCharno();
    com.google.javascript.rhino.ErrorReporter var43 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var43);
    com.google.javascript.rhino.ErrorReporter var45 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    var48.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.rhino.jstype.JSType var53 = null;
    com.google.javascript.rhino.jstype.JSType[] var54 = new com.google.javascript.rhino.jstype.JSType[] { var53};
    com.google.javascript.rhino.jstype.FunctionType var55 = var48.createConstructorType(var51, false, var54);
    boolean var56 = var55.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var57 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var57);
    var58.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var61 = null;
    com.google.javascript.rhino.jstype.JSType var63 = null;
    com.google.javascript.rhino.jstype.JSType[] var64 = new com.google.javascript.rhino.jstype.JSType[] { var63};
    com.google.javascript.rhino.jstype.FunctionType var65 = var58.createConstructorType(var61, false, var64);
    com.google.javascript.rhino.jstype.JSType var67 = var65.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var68 = var65.getTypeOfThis();
    boolean var69 = var55.canCastTo((com.google.javascript.rhino.jstype.JSType)var65);
    com.google.javascript.rhino.ErrorReporter var70 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var70);
    var71.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var74 = null;
    com.google.javascript.rhino.jstype.JSType var76 = null;
    com.google.javascript.rhino.jstype.JSType[] var77 = new com.google.javascript.rhino.jstype.JSType[] { var76};
    com.google.javascript.rhino.jstype.FunctionType var78 = var71.createConstructorType(var74, false, var77);
    boolean var79 = var78.isInterface();
    com.google.javascript.rhino.jstype.JSType[] var80 = new com.google.javascript.rhino.jstype.JSType[] { var78};
    com.google.javascript.rhino.jstype.FunctionType var81 = var46.createConstructorType((com.google.javascript.rhino.jstype.JSType)var55, var80);
    com.google.javascript.rhino.Node var82 = var44.createOptionalParameters(var80);
    var82.setSourceEncodedPosition(100);
    boolean var85 = var82.isAnd();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var86 = com.google.javascript.rhino.IR.assign(var38, var82);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);

  }

  public void test433() {}
//   public void test433() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test433"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var1);
//     double var3 = var0.getProgress();
//     var0.reportCodeChange();
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0);
//     com.google.javascript.jscomp.NodeTraversal.FunctionCallback var6 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseChangedFunctions((com.google.javascript.jscomp.AbstractCompiler)var0, var6);
// 
//   }

  public void test434() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test434"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var1 = var0.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
    com.google.javascript.rhino.jstype.JSType var12 = var10.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var13 = var10.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var14 = var0.getNode((java.lang.Object)var13);
    java.util.List var15 = var0.getEdges();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    int var19 = var17.getSideEffectFlags();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.string("hi!");
    boolean var22 = var21.isNE();
    boolean var23 = var21.isWith();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.getprop(var17, var21);
    var21.removeProp(0);
    java.lang.String var27 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var21);
    java.util.Set var28 = null;
    var21.setDirectives(var28);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var30 = var21.getJsDocBuilderForNode();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var31 = var0.getDirectedGraphNode((java.lang.Object)var30);
    com.google.javascript.rhino.ErrorReporter var32 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var32);
    var33.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.rhino.jstype.JSType var38 = null;
    com.google.javascript.rhino.jstype.JSType[] var39 = new com.google.javascript.rhino.jstype.JSType[] { var38};
    com.google.javascript.rhino.jstype.FunctionType var40 = var33.createConstructorType(var36, false, var39);
    boolean var41 = var40.canBeCalled();
    boolean var42 = var40.isTemplatizedType();
    com.google.javascript.rhino.jstype.ObjectType var44 = var40.getTopMostDefiningType("hi!");
    com.google.javascript.rhino.JSDocInfo var46 = var44.getOwnPropertyJSDocInfo("LABEL_NAME hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var47 = var0.getDirectedPredNodes((java.lang.Object)"LABEL_NAME hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);

  }

  public void test435() {}
//   public void test435() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test435"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
//     com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var6);
//     double var8 = var5.getProgress();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var5);
//     com.google.javascript.jscomp.Scope var10 = var5.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var11 = null;
//     com.google.javascript.jscomp.NodeTraversal var12 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var11);
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var13 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var14 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5, var13);
//     com.google.javascript.jscomp.Compiler.IntermediateState var15 = var5.getState();
//     boolean var16 = var5.isIdeMode();
// 
//   }

  public void test436() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test436"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineProperties(true);
    var0.setIdGeneratorsMap("LABEL_NAME hi!");
    var0.setRemoveClosureAsserts(false);
    var0.setProcessObjectPropertyString(true);
    var0.setCollapseObjectLiterals(true);
    com.google.javascript.jscomp.CheckLevel var11 = null;
    var0.setCheckGlobalThisLevel(var11);
    var0.setProtectHiddenSideEffects(true);
    var0.setShadowVariables(false);
    var0.setTweakToNumberLiteral("STRING hi!\n", (-3));
    var0.setDeadAssignmentElimination(false);
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.ErrorReporter var24 = var23.getErrorReporter();
    com.google.javascript.rhino.jstype.TemplateType var25 = var23.getObjectElementKey();
    com.google.javascript.rhino.ErrorReporter var26 = var23.getErrorReporter();
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    var28.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
    com.google.javascript.rhino.jstype.FunctionType var35 = var28.createConstructorType(var31, false, var34);
    boolean var36 = var35.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    var38.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var41 = null;
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.rhino.jstype.JSType[] var44 = new com.google.javascript.rhino.jstype.JSType[] { var43};
    com.google.javascript.rhino.jstype.FunctionType var45 = var38.createConstructorType(var41, false, var44);
    com.google.javascript.rhino.jstype.JSType var47 = var45.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var48 = var45.getTypeOfThis();
    boolean var49 = var35.canCastTo((com.google.javascript.rhino.jstype.JSType)var45);
    boolean var50 = var45.isDateType();
    boolean var51 = var45.isConstructor();
    com.google.javascript.rhino.Node var52 = var45.getRootNode();
    com.google.javascript.rhino.ErrorReporter var53 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var53);
    var54.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var57 = null;
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.rhino.jstype.JSType[] var60 = new com.google.javascript.rhino.jstype.JSType[] { var59};
    com.google.javascript.rhino.jstype.FunctionType var61 = var54.createConstructorType(var57, false, var60);
    boolean var62 = var61.isInterface();
    com.google.javascript.rhino.jstype.JSType var63 = var45.getLeastSupertype((com.google.javascript.rhino.jstype.JSType)var61);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var64 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var65 = var64.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var66 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var66);
    var67.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var70 = null;
    com.google.javascript.rhino.jstype.JSType var72 = null;
    com.google.javascript.rhino.jstype.JSType[] var73 = new com.google.javascript.rhino.jstype.JSType[] { var72};
    com.google.javascript.rhino.jstype.FunctionType var74 = var67.createConstructorType(var70, false, var73);
    com.google.javascript.rhino.jstype.JSType var76 = var74.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var77 = var74.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var78 = var64.getNode((java.lang.Object)var77);
    java.util.List var79 = var64.getEdges();
    com.google.javascript.rhino.jstype.FunctionType var80 = var23.createFunctionTypeWithVarArgs((com.google.javascript.rhino.jstype.JSType)var61, var79);
    var0.setReplaceStringsFunctionDescriptions(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test437() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test437"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.Node.newString("LinkedGraph");
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
    boolean var4 = var3.isNE();
    int var5 = var3.getSideEffectFlags();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
    boolean var8 = var7.isNE();
    boolean var9 = var7.isWith();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.string("hi!");
    var7.addChildToBack(var12);
    boolean var14 = var7.isVar();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.string("hi!");
    boolean var17 = var16.isNE();
    int var18 = var16.getSideEffectFlags();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.string("hi!");
    boolean var21 = var20.isNE();
    boolean var22 = var20.isWith();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.getprop(var16, var20);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.string("hi!");
    var20.addChildToBack(var25);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var27 = var25.getJsDocBuilderForNode();
    int var28 = var25.getCharno();
    boolean var29 = var7.isEquivalentTo(var25);
    java.lang.String var30 = var1.checkTreeEquals(var25);
    com.google.javascript.rhino.jstype.StaticSourceFile var31 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var25);
    boolean var32 = var25.isParamList();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Node tree inequality:\nTree1:\nSTRING LinkedGraph\n\n\nTree2:\nSTRING hi!\n\n\nSubtree1: STRING LinkedGraph\n\n\nSubtree2: STRING hi!\n"+ "'", var30.equals("Node tree inequality:\nTree1:\nSTRING LinkedGraph\n\n\nTree2:\nSTRING hi!\n\n\nSubtree1: STRING LinkedGraph\n\n\nSubtree2: STRING hi!\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test438() {}
//   public void test438() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test438"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
//     com.google.javascript.rhino.ErrorReporter var3 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
//     var4.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.jstype.JSType var9 = null;
//     com.google.javascript.rhino.jstype.JSType[] var10 = new com.google.javascript.rhino.jstype.JSType[] { var9};
//     com.google.javascript.rhino.jstype.FunctionType var11 = var4.createConstructorType(var7, false, var10);
//     boolean var12 = var11.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var13 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
//     var14.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     com.google.javascript.rhino.jstype.JSType var19 = null;
//     com.google.javascript.rhino.jstype.JSType[] var20 = new com.google.javascript.rhino.jstype.JSType[] { var19};
//     com.google.javascript.rhino.jstype.FunctionType var21 = var14.createConstructorType(var17, false, var20);
//     com.google.javascript.rhino.jstype.JSType var23 = var21.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var24 = var21.getTypeOfThis();
//     boolean var25 = var11.canCastTo((com.google.javascript.rhino.jstype.JSType)var21);
//     boolean var26 = var21.isDateType();
//     com.google.javascript.rhino.jstype.JSType[] var27 = new com.google.javascript.rhino.jstype.JSType[] { var21};
//     com.google.javascript.rhino.Node var28 = var1.createParametersWithVarArgs(var27);
//     java.lang.Iterable var30 = var1.getEachReferenceTypeWithProperty("()");
//     com.google.javascript.rhino.ErrorReporter var31 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var31);
//     var32.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var35 = null;
//     com.google.javascript.rhino.jstype.JSType var37 = null;
//     com.google.javascript.rhino.jstype.JSType[] var38 = new com.google.javascript.rhino.jstype.JSType[] { var37};
//     com.google.javascript.rhino.jstype.FunctionType var39 = var32.createConstructorType(var35, false, var38);
//     com.google.javascript.rhino.jstype.JSType var41 = var39.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var42 = var39.toMaybeFunctionType();
//     boolean var44 = var42.isPropertyTypeDeclared("goog.exportProperty");
//     java.lang.String var45 = var42.getDisplayName();
//     boolean var46 = var42.isDateType();
//     com.google.javascript.rhino.jstype.JSType var47 = null;
//     java.util.List var48 = null;
//     com.google.javascript.rhino.jstype.JSType var49 = var1.createFunctionType((com.google.javascript.rhino.jstype.ObjectType)var42, var47, var48);
// 
//   }

  public void test439() {}
//   public void test439() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test439"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     java.lang.Iterable var3 = var1.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     boolean var13 = var12.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var14 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
//     var15.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var18 = null;
//     com.google.javascript.rhino.jstype.JSType var20 = null;
//     com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
//     com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
//     com.google.javascript.rhino.jstype.FunctionType var23 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var12, var21);
//     com.google.javascript.rhino.ErrorReporter var24 = var1.getErrorReporter();
//     com.google.javascript.rhino.jstype.TemplateType var25 = var1.getObjectElementKey();
//     java.lang.String var26 = var25.toString();
//     com.google.javascript.rhino.jstype.JSType var28 = var25.findPropertyType("LABEL_NAME hi!\n");
// 
//   }

  public void test440() {}
//   public void test440() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test440"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var0 = null;
//     com.google.javascript.jscomp.CompilerInput var2 = new com.google.javascript.jscomp.CompilerInput(var0, true);
// 
//   }

  public void test441() {}
//   public void test441() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test441"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var2 = var1.isNE();
//     com.google.javascript.rhino.Node var3 = var1.cloneNode();
//     java.nio.charset.Charset var5 = null;
//     com.google.javascript.jscomp.SourceFile var6 = com.google.javascript.jscomp.SourceFile.fromFile("goog.global", var5);
//     var6.clearCachedSource();
//     var1.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var6);
//     com.google.javascript.jscomp.JsAst var9 = new com.google.javascript.jscomp.JsAst(var6);
//     com.google.javascript.jscomp.SourceAst var10 = null;
//     com.google.javascript.jscomp.CompilerInput var13 = new com.google.javascript.jscomp.CompilerInput(var10, "hi!", false);
//     com.google.javascript.jscomp.SourceAst var14 = var13.getSourceAst();
//     com.google.javascript.rhino.InputId var15 = var13.getInputId();
//     com.google.javascript.jscomp.CompilerInput var17 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var9, var15, false);
//     com.google.javascript.jscomp.Compiler var18 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var19 = null;
//     com.google.javascript.jscomp.NodeTraversal var20 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var18, var19);
//     com.google.javascript.rhino.head.ast.AstRoot var22 = null;
//     var18.setOldParseTree("", var22);
//     var18.reportCodeChange();
//     com.google.javascript.rhino.Node var25 = var18.getRoot();
//     com.google.javascript.rhino.Node var26 = var17.getAstRoot((com.google.javascript.jscomp.AbstractCompiler)var18);
// 
//   }

  public void test442() {}
//   public void test442() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test442"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
//     var3.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
//     com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
//     com.google.javascript.rhino.jstype.JSType var12 = var10.findPropertyType("hi!");
//     int var13 = var10.getPropertiesCount();
//     com.google.javascript.rhino.jstype.ObjectType var15 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var10, "");
//     boolean var16 = var10.isFunctionPrototypeType();
//     boolean var17 = var10.isTemplateType();
//     boolean var18 = var10.isBooleanObjectType();
//     com.google.javascript.rhino.ErrorReporter var19 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
//     var20.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var23 = null;
//     com.google.javascript.rhino.jstype.JSType var25 = null;
//     com.google.javascript.rhino.jstype.JSType[] var26 = new com.google.javascript.rhino.jstype.JSType[] { var25};
//     com.google.javascript.rhino.jstype.FunctionType var27 = var20.createConstructorType(var23, false, var26);
//     boolean var28 = var27.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var29 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
//     var30.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var33 = null;
//     com.google.javascript.rhino.jstype.JSType var35 = null;
//     com.google.javascript.rhino.jstype.JSType[] var36 = new com.google.javascript.rhino.jstype.JSType[] { var35};
//     com.google.javascript.rhino.jstype.FunctionType var37 = var30.createConstructorType(var33, false, var36);
//     com.google.javascript.rhino.jstype.JSType var39 = var37.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var40 = var37.getTypeOfThis();
//     boolean var41 = var27.canCastTo((com.google.javascript.rhino.jstype.JSType)var37);
//     boolean var42 = var37.isDateType();
//     boolean var43 = var37.isNullType();
//     boolean var44 = var37.hasCachedValues();
//     boolean var45 = var37.isNullable();
//     boolean var46 = var37.isConstructor();
//     boolean var47 = var37.hasImplementedInterfaces();
//     com.google.javascript.rhino.jstype.FunctionType var48 = var1.createFunctionTypeWithNewReturnType(var10, (com.google.javascript.rhino.jstype.JSType)var37);
//     com.google.javascript.rhino.ErrorReporter var49 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var49);
//     com.google.javascript.rhino.ErrorReporter var51 = var50.getErrorReporter();
//     com.google.javascript.rhino.jstype.TemplateType var52 = var50.getObjectElementKey();
//     var52.clearCachedValues();
//     int var54 = var52.getPropertiesCount();
//     boolean var56 = var52.isPropertyTypeInferred("Unversioned directory");
//     com.google.javascript.rhino.jstype.JSType.TypePair var57 = var10.getTypesUnderEquality((com.google.javascript.rhino.jstype.JSType)var52);
// 
//   }

  public void test443() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test443"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("goog.exportProperty");
    int var3 = var1.getLineOfOffset(100);
    com.google.javascript.jscomp.CompilerInput var5 = new com.google.javascript.jscomp.CompilerInput(var1, true);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.script();
    com.google.javascript.rhino.InputId var8 = new com.google.javascript.rhino.InputId("goog.global");
    var6.setInputId(var8);
    com.google.javascript.jscomp.CompilerInput var11 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var5, var8, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var12 = var5.getCode();
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test444() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test444"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.Node.newString("hi!: ");
    boolean var2 = var1.isSetterDef();
    com.google.javascript.rhino.Node var3 = var1.getLastSibling();
    boolean var4 = var3.isLocalResultCall();
    boolean var5 = var3.isFalse();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test445() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test445"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    var2.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
    com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
    boolean var10 = var9.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    var12.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
    com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
    boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    var37.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
    boolean var45 = var44.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    var47.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
    com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
    boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
    var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.string("hi!");
    boolean var62 = var61.isNE();
    boolean var63 = var61.isWith();
    com.google.javascript.rhino.Node var64 = var61.getLastChild();
    boolean var65 = var0.isVarArgsParameter(var61);
    com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var68 = var67.cloneNode();
    boolean var69 = var67.isDelProp();
    com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var72 = var71.cloneNode();
    boolean var73 = var71.isDelProp();
    com.google.javascript.rhino.Node var74 = var67.clonePropsFrom(var71);
    com.google.javascript.rhino.JSDocInfo var75 = var71.getJSDocInfo();
    com.google.javascript.rhino.Node var76 = com.google.javascript.rhino.IR.breakNode(var71);
    com.google.javascript.jscomp.CodingConvention.Bind var78 = var0.describeFunctionBind(var76, true);
    com.google.javascript.rhino.Node var80 = com.google.javascript.rhino.IR.nullNode();
    boolean var81 = var80.isGetElem();
    com.google.javascript.rhino.JSDocInfo var82 = null;
    com.google.javascript.rhino.Node var83 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNodeDeclaration((com.google.javascript.jscomp.CodingConvention)var0, "TRUE", var80, var82);
    boolean var85 = var0.isSuperClassReference("Object#Key");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);

  }

  public void test446() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test446"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    var2.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
    com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
    boolean var10 = var9.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    var12.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
    com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
    boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    var37.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
    boolean var45 = var44.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    var47.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
    com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
    boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
    var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var62 = var61.cloneNode();
    boolean var63 = var61.isDelProp();
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var66 = var65.cloneNode();
    boolean var67 = var65.isDelProp();
    com.google.javascript.rhino.Node var68 = var61.clonePropsFrom(var65);
    com.google.javascript.rhino.JSDocInfo var69 = var65.getJSDocInfo();
    com.google.javascript.jscomp.CodingConvention.Bind var71 = var0.describeFunctionBind(var65, true);
    com.google.javascript.rhino.ErrorReporter var72 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var73 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var72);
    var73.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var76 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var76);
    var77.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var80 = null;
    com.google.javascript.rhino.jstype.JSType var82 = null;
    com.google.javascript.rhino.jstype.JSType[] var83 = new com.google.javascript.rhino.jstype.JSType[] { var82};
    com.google.javascript.rhino.jstype.FunctionType var84 = var77.createConstructorType(var80, false, var83);
    com.google.javascript.rhino.jstype.JSType var86 = var84.findPropertyType("hi!");
    int var87 = var84.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var88 = new com.google.javascript.rhino.jstype.JSType[] { var84};
    com.google.javascript.rhino.Node var89 = var73.createParametersWithVarArgs(var88);
    com.google.javascript.rhino.Node var90 = var65.useSourceInfoFrom(var89);
    java.lang.String var91 = var90.toString();
    boolean var92 = var90.isDec();
    var90.setSourceEncodedPositionForTree((-3));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "LABEL_NAME hi!"+ "'", var91.equals("LABEL_NAME hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test447() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test447"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    var6.removeProp(0);
    java.lang.String var12 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var6);
    boolean var13 = var6.isDec();
    com.google.javascript.rhino.Node var14 = null;
    com.google.javascript.rhino.Node var15 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var16 = new com.google.javascript.rhino.Node((-1), var6, var14, var15);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test448() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test448"); }


    com.google.javascript.jscomp.SourceAst var0 = null;
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
    com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
    com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
    com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var6);
    double var8 = var5.getProgress();
    var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var5);
    com.google.javascript.jscomp.CompilerOptions var10 = null;
    com.google.javascript.jscomp.DefaultPassConfig var11 = new com.google.javascript.jscomp.DefaultPassConfig(var10);
    var5.setPassConfig((com.google.javascript.jscomp.PassConfig)var11);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.string("hi!");
    boolean var17 = var16.isNE();
    int var18 = var16.getSideEffectFlags();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.string("hi!");
    boolean var21 = var20.isNE();
    boolean var22 = var20.isWith();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.getprop(var16, var20);
    java.util.Set var24 = null;
    var16.setDirectives(var24);
    com.google.javascript.jscomp.CheckLevel var26 = null;
    com.google.javascript.jscomp.CheckLevel var28 = null;
    com.google.javascript.jscomp.DiagnosticType var30 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var28, "");
    java.lang.String[] var31 = null;
    com.google.javascript.jscomp.JSError var32 = com.google.javascript.jscomp.JSError.make("hi!", var16, var26, var30, var31);
    com.google.javascript.jscomp.CheckLevel var37 = null;
    com.google.javascript.jscomp.DiagnosticType var39 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var37, "");
    java.lang.String[] var41 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var42 = com.google.javascript.jscomp.JSError.make("", 100, 0, var39, var41);
    java.lang.String[] var44 = new java.lang.String[] { "hi!"};
    com.google.javascript.jscomp.JSError var45 = com.google.javascript.jscomp.JSError.make("hi!", var16, var39, var44);
    com.google.javascript.jscomp.NodeTraversal.Callback var46 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.NodeTraversal.traverse((com.google.javascript.jscomp.AbstractCompiler)var5, var16, var46);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test449() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test449"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString(40, "Object#Element");
    boolean var4 = var3.isInc();
    boolean var5 = var3.isNull();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
    int var12 = var11.getChangeTime();
    boolean var13 = var11.isCatch();
    int var14 = var11.getType();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var17 = var16.cloneNode();
    boolean var18 = var16.isDelProp();
    boolean var19 = var16.isDefaultCase();
    boolean var20 = var16.isNE();
    var16.setLength(100);
    com.google.javascript.rhino.Node var25 = new com.google.javascript.rhino.Node(1, var11, var16, 1, (-1));
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var28 = var27.cloneNode();
    boolean var29 = var27.isDelProp();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var32 = var31.cloneNode();
    boolean var33 = var31.isDelProp();
    com.google.javascript.rhino.Node var34 = var27.clonePropsFrom(var31);
    boolean var35 = var31.isBlock();
    boolean var36 = var31.isOnlyModifiesThisCall();
    var31.addSuppression("InputId: hi!");
    com.google.javascript.rhino.Node var39 = new com.google.javascript.rhino.Node(40, var3, var25, var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.cast(var31);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test450() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test450"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineProperties(true);
    com.google.javascript.jscomp.CheckLevel var3 = null;
    var0.setCheckMissingReturn(var3);
    var0.setRemoveUnusedLocalVars(true);
    var0.setInferTypes(false);
    var0.setMoveFunctionDeclarations(false);
    var0.setOptimizeReturns(false);
    var0.setAcceptConstKeyword(true);

  }

  public void test451() {}
//   public void test451() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test451"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var1);
//     double var3 = var0.getProgress();
//     com.google.javascript.jscomp.JSError[] var4 = var0.getMessages();
// 
//   }

  public void test452() {}
//   public void test452() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test452"); }
// 
// 
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var3 = var2.isNE();
//     int var4 = var2.getSideEffectFlags();
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var7 = var6.isNE();
//     boolean var8 = var6.isWith();
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
//     java.util.Set var10 = null;
//     var2.setDirectives(var10);
//     com.google.javascript.jscomp.CheckLevel var12 = null;
//     com.google.javascript.jscomp.CheckLevel var14 = null;
//     com.google.javascript.jscomp.DiagnosticType var16 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var14, "");
//     java.lang.String[] var17 = null;
//     com.google.javascript.jscomp.JSError var18 = com.google.javascript.jscomp.JSError.make("hi!", var2, var12, var16, var17);
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var23 = var22.isNE();
//     int var24 = var22.getSideEffectFlags();
//     com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var27 = var26.isNE();
//     boolean var28 = var26.isWith();
//     com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.getprop(var22, var26);
//     java.util.Set var30 = null;
//     var22.setDirectives(var30);
//     com.google.javascript.jscomp.CheckLevel var32 = null;
//     com.google.javascript.jscomp.CheckLevel var34 = null;
//     com.google.javascript.jscomp.DiagnosticType var36 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var34, "");
//     java.lang.String[] var37 = null;
//     com.google.javascript.jscomp.JSError var38 = com.google.javascript.jscomp.JSError.make("hi!", var22, var32, var36, var37);
//     com.google.javascript.jscomp.CheckLevel var43 = null;
//     com.google.javascript.jscomp.DiagnosticType var45 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var43, "");
//     java.lang.String[] var47 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var48 = com.google.javascript.jscomp.JSError.make("", 100, 0, var45, var47);
//     java.lang.String[] var50 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var51 = com.google.javascript.jscomp.JSError.make("hi!", var22, var45, var50);
//     com.google.javascript.jscomp.JSError var52 = com.google.javascript.jscomp.JSError.make(var16, var50);
//     com.google.javascript.jscomp.CheckLevel var53 = null;
//     com.google.javascript.jscomp.Compiler var54 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var57 = var54.getSourceLine("", (-1));
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var58 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var59 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var54, var58);
//     java.util.logging.Logger var60 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var61 = new com.google.javascript.jscomp.LoggerErrorManager((com.google.javascript.jscomp.MessageFormatter)var59, var60);
//     java.util.logging.Logger var62 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var63 = new com.google.javascript.jscomp.LoggerErrorManager((com.google.javascript.jscomp.MessageFormatter)var59, var62);
//     java.lang.String var64 = var52.format(var53, (com.google.javascript.jscomp.MessageFormatter)var59);
// 
//   }

  public void test453() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test453"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    var2.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
    com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
    boolean var10 = var9.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    var12.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
    com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
    boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    var37.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
    boolean var45 = var44.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    var47.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
    com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
    boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
    var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
    java.lang.String var60 = var0.getExportPropertyFunction();
    java.lang.String var61 = var0.getGlobalObject();
    boolean var63 = var0.isConstant("");
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.string("FALSE");
    boolean var66 = var0.isOptionalParameter(var65);
    com.google.javascript.rhino.JSDocInfo var67 = var65.getJSDocInfo();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "goog.exportProperty"+ "'", var60.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "goog.global"+ "'", var61.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);

  }

  public void test454() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test454"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    boolean var9 = var8.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    var11.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var14 = null;
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType[] var17 = new com.google.javascript.rhino.jstype.JSType[] { var16};
    com.google.javascript.rhino.jstype.FunctionType var18 = var11.createConstructorType(var14, false, var17);
    com.google.javascript.rhino.jstype.JSType var20 = var18.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var21 = var18.getTypeOfThis();
    boolean var22 = var8.canCastTo((com.google.javascript.rhino.jstype.JSType)var18);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block();
    int var24 = var23.getSourceOffset();
    var18.setSource(var23);
    com.google.javascript.rhino.jstype.UnionType var26 = var18.toMaybeUnionType();
    boolean var27 = var18.isDict();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test455() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test455"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineProperties(true);
    var0.setRuntimeTypeCheckLogFunction("Object#Element");
    var0.setAliasStringsBlacklist("LinkedGraph");
    var0.setTrustedStrings(false);
    var0.setUnaliasableGlobals("InputId: hi!: ");
    boolean var11 = var0.assumeStrictThis();
    var0.setSummaryDetailLevel(0);
    com.google.javascript.jscomp.CheckLevel var14 = null;
    var0.setCheckMissingReturn(var14);
    com.google.javascript.jscomp.CheckLevel var16 = null;
    var0.setBrokenClosureRequiresLevel(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test456() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test456"); }


    com.google.javascript.jscomp.DependencyOptions var0 = new com.google.javascript.jscomp.DependencyOptions();
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    java.lang.Iterable var4 = var2.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    var6.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var9 = null;
    com.google.javascript.rhino.jstype.JSType var11 = null;
    com.google.javascript.rhino.jstype.JSType[] var12 = new com.google.javascript.rhino.jstype.JSType[] { var11};
    com.google.javascript.rhino.jstype.FunctionType var13 = var6.createConstructorType(var9, false, var12);
    boolean var14 = var13.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
    var16.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.jstype.JSType var21 = null;
    com.google.javascript.rhino.jstype.JSType[] var22 = new com.google.javascript.rhino.jstype.JSType[] { var21};
    com.google.javascript.rhino.jstype.FunctionType var23 = var16.createConstructorType(var19, false, var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var2.createConstructorType((com.google.javascript.rhino.jstype.JSType)var13, var22);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    java.lang.Iterable var28 = var26.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    var30.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.jstype.JSType var35 = null;
    com.google.javascript.rhino.jstype.JSType[] var36 = new com.google.javascript.rhino.jstype.JSType[] { var35};
    com.google.javascript.rhino.jstype.FunctionType var37 = var30.createConstructorType(var33, false, var36);
    boolean var38 = var37.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var39 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var39);
    var40.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.jstype.FunctionType var47 = var40.createConstructorType(var43, false, var46);
    com.google.javascript.rhino.jstype.FunctionType var48 = var26.createConstructorType((com.google.javascript.rhino.jstype.JSType)var37, var46);
    boolean var49 = var37.isReturnTypeInferred();
    boolean var50 = var37.isTemplatizedType();
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    com.google.javascript.rhino.ErrorReporter var53 = var52.getErrorReporter();
    com.google.javascript.rhino.jstype.TemplateType var54 = var52.getObjectElementKey();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var55 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var56 = var55.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var57 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var57);
    var58.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var61 = null;
    com.google.javascript.rhino.jstype.JSType var63 = null;
    com.google.javascript.rhino.jstype.JSType[] var64 = new com.google.javascript.rhino.jstype.JSType[] { var63};
    com.google.javascript.rhino.jstype.FunctionType var65 = var58.createConstructorType(var61, false, var64);
    com.google.javascript.rhino.jstype.JSType var67 = var65.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var68 = var65.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var69 = var55.getNode((java.lang.Object)var68);
    java.util.List var70 = var55.getEdges();
    com.google.javascript.rhino.jstype.JSType var71 = var2.createFunctionType((com.google.javascript.rhino.jstype.ObjectType)var37, (com.google.javascript.rhino.jstype.JSType)var54, var70);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var72 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var73 = var72.getGraphvizNodes();
    var37.setImplementedInterfaces(var73);
    com.google.javascript.jscomp.DependencyOptions var75 = var0.setEntryPoints((java.util.Collection)var73);
    com.google.javascript.jscomp.JSModuleGraph var76 = new com.google.javascript.jscomp.JSModuleGraph(var73);
    com.google.javascript.jscomp.DependencyOptions var77 = new com.google.javascript.jscomp.DependencyOptions();
    com.google.javascript.jscomp.DependencyOptions var79 = var77.setDependencySorting(false);
    com.google.javascript.jscomp.DependencyOptions var81 = var79.setDependencySorting(true);
    com.google.javascript.jscomp.DependencyOptions var83 = var81.setDependencySorting(true);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var84 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var85 = var84.getEdges();
    java.util.List var86 = var76.manageDependencies(var81, var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test457() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test457"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
    com.google.javascript.rhino.jstype.JSType var12 = var10.findPropertyType("hi!");
    int var13 = var10.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var15 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var10, "");
    boolean var16 = var10.isFunctionPrototypeType();
    boolean var17 = var10.isTemplateType();
    boolean var18 = var10.isBooleanObjectType();
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    var20.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var23 = null;
    com.google.javascript.rhino.jstype.JSType var25 = null;
    com.google.javascript.rhino.jstype.JSType[] var26 = new com.google.javascript.rhino.jstype.JSType[] { var25};
    com.google.javascript.rhino.jstype.FunctionType var27 = var20.createConstructorType(var23, false, var26);
    boolean var28 = var27.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    var30.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.jstype.JSType var35 = null;
    com.google.javascript.rhino.jstype.JSType[] var36 = new com.google.javascript.rhino.jstype.JSType[] { var35};
    com.google.javascript.rhino.jstype.FunctionType var37 = var30.createConstructorType(var33, false, var36);
    com.google.javascript.rhino.jstype.JSType var39 = var37.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var40 = var37.getTypeOfThis();
    boolean var41 = var27.canCastTo((com.google.javascript.rhino.jstype.JSType)var37);
    boolean var42 = var37.isDateType();
    boolean var43 = var37.isNullType();
    boolean var44 = var37.hasCachedValues();
    boolean var45 = var37.isNullable();
    boolean var46 = var37.isConstructor();
    boolean var47 = var37.hasImplementedInterfaces();
    com.google.javascript.rhino.jstype.FunctionType var48 = var1.createFunctionTypeWithNewReturnType(var10, (com.google.javascript.rhino.jstype.JSType)var37);
    com.google.javascript.rhino.jstype.TemplateType var50 = var1.createTemplateType("goog.abstractMethod");
    var1.identifyNonNullableName("TRUE");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test458() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test458"); }


    com.google.javascript.jscomp.SourceAst var0 = null;
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
    com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
    com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
    com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var6);
    double var8 = var5.getProgress();
    var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var5);
    com.google.javascript.jscomp.Scope var10 = var5.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var11 = null;
    com.google.javascript.jscomp.NodeTraversal var12 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var11);
    com.google.javascript.rhino.Node var13 = var12.getEnclosingFunction();
    com.google.javascript.rhino.Node var14 = var12.getCurrentNode();
    boolean var15 = var12.hasScope();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test459() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test459"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.util.Set var9 = null;
    var1.setDirectives(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    int var15 = var13.getSideEffectFlags();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    boolean var19 = var17.isWith();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
    java.util.Set var21 = null;
    var13.setDirectives(var21);
    com.google.javascript.jscomp.CheckLevel var23 = null;
    com.google.javascript.jscomp.CheckLevel var25 = null;
    com.google.javascript.jscomp.DiagnosticType var27 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var25, "");
    java.lang.String[] var28 = null;
    com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("hi!", var13, var23, var27, var28);
    com.google.javascript.rhino.Node var30 = var1.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.Node var32 = var13.getAncestor(0);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var36 = var35.cloneNode();
    boolean var37 = var35.isDelProp();
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var40 = var39.cloneNode();
    boolean var41 = var39.isDelProp();
    com.google.javascript.rhino.Node var42 = var35.clonePropsFrom(var39);
    boolean var43 = var39.isBlock();
    var13.putProp((-1), (java.lang.Object)var39);
    var39.removeProp(10);
    var39.setVarArgs(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var49 = var39.getDouble();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test460() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test460"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    var9.setLineno(10);
    com.google.javascript.jscomp.AstValidator.ViolationHandler var12 = null;
    com.google.javascript.jscomp.AstValidator var13 = new com.google.javascript.jscomp.AstValidator(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.string("hi!");
    boolean var16 = var15.isNE();
    int var17 = var15.getSideEffectFlags();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.string("hi!");
    boolean var20 = var19.isNE();
    boolean var21 = var19.isWith();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.getprop(var15, var19);
    var13.validateExpression(var15);
    var15.removeProp((-1));
    java.lang.Iterable var26 = var15.siblings();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var29 = new com.google.javascript.rhino.Node((-1), var9, var15, (-3), 1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test461() {}
//   public void test461() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test461"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.ErrorReporter var1 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
//     var2.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
//     com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
//     boolean var10 = var9.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var11 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
//     var12.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
//     com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
//     com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
//     boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
//     com.google.javascript.rhino.ErrorReporter var24 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
//     var25.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var28 = null;
//     com.google.javascript.rhino.jstype.JSType var30 = null;
//     com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
//     com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
//     com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
//     com.google.javascript.rhino.ErrorReporter var36 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
//     var37.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var40 = null;
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
//     com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
//     boolean var45 = var44.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var46 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
//     var47.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var50 = null;
//     com.google.javascript.rhino.jstype.JSType var52 = null;
//     com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
//     com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
//     com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
//     boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
//     var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
//     java.lang.String var60 = var0.getExportPropertyFunction();
//     java.lang.String var61 = var0.getGlobalObject();
//     boolean var63 = var0.isConstant("");
//     com.google.javascript.rhino.ErrorReporter var64 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var64);
//     var65.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var68 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var69 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var68);
//     var69.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var72 = null;
//     com.google.javascript.rhino.jstype.JSType var74 = null;
//     com.google.javascript.rhino.jstype.JSType[] var75 = new com.google.javascript.rhino.jstype.JSType[] { var74};
//     com.google.javascript.rhino.jstype.FunctionType var76 = var69.createConstructorType(var72, false, var75);
//     com.google.javascript.rhino.jstype.JSType var78 = var76.findPropertyType("hi!");
//     int var79 = var76.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var80 = new com.google.javascript.rhino.jstype.JSType[] { var76};
//     com.google.javascript.rhino.Node var81 = var65.createParametersWithVarArgs(var80);
//     com.google.javascript.rhino.jstype.TemplateType var82 = var65.getObjectIndexKey();
//     var65.clearTemplateTypeNames();
//     var65.resetForTypeCheck();
//     com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var85 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var0, var65);
//     com.google.javascript.rhino.Node var86 = null;
//     com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast var87 = var0.getObjectLiteralCast(var86);
// 
//   }

  public void test462() {}
//   public void test462() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test462"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
//     com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var4 = var3.isNE();
//     int var5 = var3.getSideEffectFlags();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var8 = var7.isNE();
//     boolean var9 = var7.isWith();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
//     var1.validateExpression(var3);
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var12 = null;
//     com.google.javascript.jscomp.AstValidator var13 = new com.google.javascript.jscomp.AstValidator(var12);
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var16 = var15.isNE();
//     int var17 = var15.getSideEffectFlags();
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var20 = var19.isNE();
//     boolean var21 = var19.isWith();
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.getprop(var15, var19);
//     var22.setLineno(10);
//     var13.validateExpression(var22);
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var28 = var27.isNE();
//     int var29 = var27.getSideEffectFlags();
//     boolean var30 = var27.isReturn();
//     var22.addChildrenToBack(var27);
//     boolean var32 = var22.isHook();
//     var1.validateStatement(var22);
// 
//   }

  public void test463() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test463"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    java.lang.String var2 = var1.getExportPropertyFunction();
    boolean var4 = var1.isValidEnumKey("");
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    int var8 = var6.getSideEffectFlags();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    boolean var11 = var10.isNE();
    boolean var12 = var10.isWith();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.getprop(var6, var10);
    var10.removeProp(0);
    java.lang.String var16 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var10);
    java.util.Set var17 = null;
    var10.setDirectives(var17);
    java.lang.Iterable var19 = var10.siblings();
    boolean var20 = var1.isVarArgsParameter(var10);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.string("hi!");
    boolean var24 = var23.isNE();
    int var25 = var23.getSideEffectFlags();
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.string("hi!");
    boolean var28 = var27.isNE();
    boolean var29 = var27.isWith();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.getprop(var23, var27);
    java.util.Set var31 = null;
    var23.setDirectives(var31);
    com.google.javascript.jscomp.CheckLevel var33 = null;
    com.google.javascript.jscomp.CheckLevel var35 = null;
    com.google.javascript.jscomp.DiagnosticType var37 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var35, "");
    java.lang.String[] var38 = null;
    com.google.javascript.jscomp.JSError var39 = com.google.javascript.jscomp.JSError.make("hi!", var23, var33, var37, var38);
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.string("hi!");
    boolean var43 = var42.isNE();
    int var44 = var42.getSideEffectFlags();
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.string("hi!");
    boolean var47 = var46.isNE();
    boolean var48 = var46.isWith();
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.getprop(var42, var46);
    java.util.Set var50 = null;
    var42.setDirectives(var50);
    com.google.javascript.jscomp.CheckLevel var52 = null;
    com.google.javascript.jscomp.CheckLevel var54 = null;
    com.google.javascript.jscomp.DiagnosticType var56 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var54, "");
    java.lang.String[] var57 = null;
    com.google.javascript.jscomp.JSError var58 = com.google.javascript.jscomp.JSError.make("hi!", var42, var52, var56, var57);
    var42.addSuppression("");
    com.google.javascript.rhino.Node var61 = var23.useSourceInfoFromForTree(var42);
    boolean var62 = var42.isGetElem();
    com.google.javascript.rhino.InputId var63 = var42.getInputId();
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var66 = var65.cloneNode();
    java.lang.String var67 = var1.extractClassNameIfProvide(var42, var66);
    com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var70 = var69.cloneNode();
    boolean var71 = var69.isDelProp();
    com.google.javascript.rhino.Node var73 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var74 = var73.cloneNode();
    boolean var75 = var73.isDelProp();
    com.google.javascript.rhino.Node var76 = var69.clonePropsFrom(var73);
    com.google.javascript.rhino.Node var81 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
    com.google.javascript.rhino.Node var82 = var81.getLastChild();
    com.google.javascript.rhino.Node var83 = var73.srcrefTree(var81);
    com.google.javascript.rhino.Node var84 = var66.useSourceInfoIfMissingFrom(var73);
    boolean var85 = var73.isAnd();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "goog.exportProperty"+ "'", var2.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);

  }

  public void test464() {}
//   public void test464() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test464"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
//     com.google.javascript.rhino.jstype.TemplateType var3 = var1.getObjectElementKey();
//     var3.clearCachedValues();
//     boolean var5 = var3.hasAnyTemplateTypesInternal();
//     com.google.javascript.rhino.jstype.JSType var7 = var3.getPropertyType("Unversioned directory");
// 
//   }

  public void test465() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test465"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.util.Set var9 = null;
    var1.setDirectives(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    int var15 = var13.getSideEffectFlags();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    boolean var19 = var17.isWith();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
    java.util.Set var21 = null;
    var13.setDirectives(var21);
    com.google.javascript.jscomp.CheckLevel var23 = null;
    com.google.javascript.jscomp.CheckLevel var25 = null;
    com.google.javascript.jscomp.DiagnosticType var27 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var25, "");
    java.lang.String[] var28 = null;
    com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("hi!", var13, var23, var27, var28);
    com.google.javascript.rhino.Node var30 = var1.useSourceInfoIfMissingFrom(var13);
    int var31 = var1.getSideEffectFlags();
    boolean var32 = var1.isEmpty();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var35 = var34.cloneNode();
    boolean var36 = var34.isDelProp();
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var39 = var38.cloneNode();
    boolean var40 = var38.isDelProp();
    com.google.javascript.rhino.Node var41 = var34.clonePropsFrom(var38);
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
    com.google.javascript.rhino.Node var47 = var46.getLastChild();
    com.google.javascript.rhino.Node var48 = var38.srcrefTree(var46);
    boolean var49 = var38.isFalse();
    com.google.javascript.rhino.Node var50 = var1.srcrefTree(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test466() {}
//   public void test466() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test466"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     com.google.javascript.jscomp.Scope var4 = var0.getTopScope();
//     com.google.javascript.jscomp.CompilerOptions.LanguageMode var5 = var0.languageMode();
// 
//   }

  public void test467() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test467"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
    boolean var11 = var10.canBeCalled();
    com.google.javascript.rhino.jstype.FunctionBuilder var13 = var1.withReturnType((com.google.javascript.rhino.jstype.JSType)var10, true);
    com.google.javascript.jscomp.ClosureCodingConvention var14 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
    var16.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.jstype.JSType var21 = null;
    com.google.javascript.rhino.jstype.JSType[] var22 = new com.google.javascript.rhino.jstype.JSType[] { var21};
    com.google.javascript.rhino.jstype.FunctionType var23 = var16.createConstructorType(var19, false, var22);
    boolean var24 = var23.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    var26.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var29 = null;
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.jstype.FunctionType var33 = var26.createConstructorType(var29, false, var32);
    com.google.javascript.rhino.jstype.JSType var35 = var33.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var36 = var33.getTypeOfThis();
    boolean var37 = var23.canCastTo((com.google.javascript.rhino.jstype.JSType)var33);
    com.google.javascript.rhino.ErrorReporter var38 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
    var39.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType var44 = null;
    com.google.javascript.rhino.jstype.JSType[] var45 = new com.google.javascript.rhino.jstype.JSType[] { var44};
    com.google.javascript.rhino.jstype.FunctionType var46 = var39.createConstructorType(var42, false, var45);
    com.google.javascript.rhino.jstype.JSType var48 = var46.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var49 = var46.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var50 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var50);
    var51.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var54 = null;
    com.google.javascript.rhino.jstype.JSType var56 = null;
    com.google.javascript.rhino.jstype.JSType[] var57 = new com.google.javascript.rhino.jstype.JSType[] { var56};
    com.google.javascript.rhino.jstype.FunctionType var58 = var51.createConstructorType(var54, false, var57);
    boolean var59 = var58.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var60 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var60);
    var61.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var64 = null;
    com.google.javascript.rhino.jstype.JSType var66 = null;
    com.google.javascript.rhino.jstype.JSType[] var67 = new com.google.javascript.rhino.jstype.JSType[] { var66};
    com.google.javascript.rhino.jstype.FunctionType var68 = var61.createConstructorType(var64, false, var67);
    com.google.javascript.rhino.jstype.JSType var70 = var68.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var71 = var68.getTypeOfThis();
    boolean var72 = var58.canCastTo((com.google.javascript.rhino.jstype.JSType)var68);
    var14.applySingletonGetter(var23, var46, (com.google.javascript.rhino.jstype.ObjectType)var68);
    com.google.javascript.rhino.jstype.FunctionBuilder var74 = var1.withInferredReturnType((com.google.javascript.rhino.jstype.JSType)var68);
    com.google.javascript.rhino.ErrorReporter var75 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var76 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var75);
    var76.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var79 = null;
    com.google.javascript.rhino.jstype.JSType var81 = null;
    com.google.javascript.rhino.jstype.JSType[] var82 = new com.google.javascript.rhino.jstype.JSType[] { var81};
    com.google.javascript.rhino.jstype.FunctionType var83 = var76.createConstructorType(var79, false, var82);
    com.google.javascript.rhino.jstype.JSType var85 = var83.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var86 = var83.getTypeOfThis();
    com.google.javascript.rhino.jstype.JSType var87 = var86.unboxesTo();
    boolean var88 = com.google.javascript.rhino.jstype.JSType.isEquivalent((com.google.javascript.rhino.jstype.JSType)var68, var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test468() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test468"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.util.Set var9 = null;
    var1.setDirectives(var9);
    boolean var11 = var1.isNoSideEffectsCall();
    boolean var12 = var1.isExprResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test469() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test469"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    var7.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType var12 = null;
    com.google.javascript.rhino.jstype.JSType[] var13 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.jstype.FunctionType var14 = var7.createConstructorType(var10, false, var13);
    boolean var15 = var14.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var16 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
    var17.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.rhino.jstype.JSType var22 = null;
    com.google.javascript.rhino.jstype.JSType[] var23 = new com.google.javascript.rhino.jstype.JSType[] { var22};
    com.google.javascript.rhino.jstype.FunctionType var24 = var17.createConstructorType(var20, false, var23);
    com.google.javascript.rhino.jstype.JSType var26 = var24.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var27 = var24.getTypeOfThis();
    boolean var28 = var14.canCastTo((com.google.javascript.rhino.jstype.JSType)var24);
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    var30.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.jstype.JSType var35 = null;
    com.google.javascript.rhino.jstype.JSType[] var36 = new com.google.javascript.rhino.jstype.JSType[] { var35};
    com.google.javascript.rhino.jstype.FunctionType var37 = var30.createConstructorType(var33, false, var36);
    boolean var38 = var37.isInterface();
    com.google.javascript.rhino.jstype.JSType[] var39 = new com.google.javascript.rhino.jstype.JSType[] { var37};
    com.google.javascript.rhino.jstype.FunctionType var40 = var5.createConstructorType((com.google.javascript.rhino.jstype.JSType)var14, var39);
    com.google.javascript.rhino.Node var41 = var3.createOptionalParameters(var39);
    com.google.javascript.rhino.ErrorReporter var43 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var43);
    java.lang.Iterable var46 = var44.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    var48.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.rhino.jstype.JSType var53 = null;
    com.google.javascript.rhino.jstype.JSType[] var54 = new com.google.javascript.rhino.jstype.JSType[] { var53};
    com.google.javascript.rhino.jstype.FunctionType var55 = var48.createConstructorType(var51, false, var54);
    boolean var56 = var55.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var57 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var57);
    var58.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var61 = null;
    com.google.javascript.rhino.jstype.JSType var63 = null;
    com.google.javascript.rhino.jstype.JSType[] var64 = new com.google.javascript.rhino.jstype.JSType[] { var63};
    com.google.javascript.rhino.jstype.FunctionType var65 = var58.createConstructorType(var61, false, var64);
    com.google.javascript.rhino.jstype.FunctionType var66 = var44.createConstructorType((com.google.javascript.rhino.jstype.JSType)var55, var64);
    com.google.javascript.rhino.jstype.TemplateType var67 = var44.getObjectIndexKey();
    var3.unregisterPropertyOnType("hi!: ", (com.google.javascript.rhino.jstype.JSType)var67);
    java.lang.Iterable var70 = var3.getTypesWithProperty("");
    com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var71 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var0, var3);
    com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter var72 = var71.getFirst();
    com.google.javascript.rhino.Node var74 = com.google.javascript.rhino.Node.newString("hi!: ");
    boolean var75 = var74.isSetterDef();
    com.google.javascript.rhino.Node var76 = var74.getLastSibling();
    com.google.javascript.rhino.InputId var78 = new com.google.javascript.rhino.InputId("hi!: ");
    var74.setInputId(var78);
    com.google.javascript.jscomp.type.FlowScope var80 = null;
    com.google.javascript.jscomp.type.FlowScope var82 = var71.getPreciserScopeKnowingConditionOutcome(var74, var80, false);
    boolean var83 = var74.isQualifiedName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test470() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test470"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    boolean var9 = var8.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    var11.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var14 = null;
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType[] var17 = new com.google.javascript.rhino.jstype.JSType[] { var16};
    com.google.javascript.rhino.jstype.FunctionType var18 = var11.createConstructorType(var14, false, var17);
    com.google.javascript.rhino.jstype.JSType var20 = var18.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var21 = var18.getTypeOfThis();
    boolean var22 = var8.canCastTo((com.google.javascript.rhino.jstype.JSType)var18);
    com.google.javascript.jscomp.ClosureCodingConvention var23 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    boolean var33 = var32.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    var35.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var38 = null;
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType[] var41 = new com.google.javascript.rhino.jstype.JSType[] { var40};
    com.google.javascript.rhino.jstype.FunctionType var42 = var35.createConstructorType(var38, false, var41);
    com.google.javascript.rhino.jstype.JSType var44 = var42.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var45 = var42.getTypeOfThis();
    boolean var46 = var32.canCastTo((com.google.javascript.rhino.jstype.JSType)var42);
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    var48.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.rhino.jstype.JSType var53 = null;
    com.google.javascript.rhino.jstype.JSType[] var54 = new com.google.javascript.rhino.jstype.JSType[] { var53};
    com.google.javascript.rhino.jstype.FunctionType var55 = var48.createConstructorType(var51, false, var54);
    com.google.javascript.rhino.jstype.JSType var57 = var55.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var58 = var55.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var59 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var59);
    var60.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var63 = null;
    com.google.javascript.rhino.jstype.JSType var65 = null;
    com.google.javascript.rhino.jstype.JSType[] var66 = new com.google.javascript.rhino.jstype.JSType[] { var65};
    com.google.javascript.rhino.jstype.FunctionType var67 = var60.createConstructorType(var63, false, var66);
    boolean var68 = var67.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var69 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var69);
    var70.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var73 = null;
    com.google.javascript.rhino.jstype.JSType var75 = null;
    com.google.javascript.rhino.jstype.JSType[] var76 = new com.google.javascript.rhino.jstype.JSType[] { var75};
    com.google.javascript.rhino.jstype.FunctionType var77 = var70.createConstructorType(var73, false, var76);
    com.google.javascript.rhino.jstype.JSType var79 = var77.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var80 = var77.getTypeOfThis();
    boolean var81 = var67.canCastTo((com.google.javascript.rhino.jstype.JSType)var77);
    var23.applySingletonGetter(var32, var55, (com.google.javascript.rhino.jstype.ObjectType)var77);
    com.google.javascript.rhino.jstype.TemplateType var83 = var77.toMaybeTemplateType();
    boolean var84 = var18.hasEqualCallType(var77);
    com.google.javascript.rhino.jstype.JSType var85 = var77.getTypeOfThis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test471() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test471"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    var8.setLineno(10);
    boolean var11 = var8.isCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test472() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test472"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("NUMBER 0.0");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test473() {}
//   public void test473() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test473"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var1 = var0.getGraphvizNodes();
//     com.google.javascript.jscomp.deps.SortedDependencies var2 = new com.google.javascript.jscomp.deps.SortedDependencies(var1);
//     com.google.javascript.jscomp.JSModuleGraph var3 = new com.google.javascript.jscomp.JSModuleGraph(var1);
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var15 = var12.getTypeOfThis();
//     com.google.javascript.rhino.jstype.TemplatizedType var16 = com.google.javascript.rhino.jstype.JSType.toMaybeTemplatizedType((com.google.javascript.rhino.jstype.JSType)var12);
//     com.google.javascript.rhino.ErrorReporter var17 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
//     java.lang.Iterable var20 = var18.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var21 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
//     var22.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var25 = null;
//     com.google.javascript.rhino.jstype.JSType var27 = null;
//     com.google.javascript.rhino.jstype.JSType[] var28 = new com.google.javascript.rhino.jstype.JSType[] { var27};
//     com.google.javascript.rhino.jstype.FunctionType var29 = var22.createConstructorType(var25, false, var28);
//     boolean var30 = var29.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var31 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var31);
//     var32.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var35 = null;
//     com.google.javascript.rhino.jstype.JSType var37 = null;
//     com.google.javascript.rhino.jstype.JSType[] var38 = new com.google.javascript.rhino.jstype.JSType[] { var37};
//     com.google.javascript.rhino.jstype.FunctionType var39 = var32.createConstructorType(var35, false, var38);
//     com.google.javascript.rhino.jstype.FunctionType var40 = var18.createConstructorType((com.google.javascript.rhino.jstype.JSType)var29, var38);
//     com.google.javascript.rhino.ErrorReporter var41 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
//     var42.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var45 = null;
//     com.google.javascript.rhino.jstype.JSType var47 = null;
//     com.google.javascript.rhino.jstype.JSType[] var48 = new com.google.javascript.rhino.jstype.JSType[] { var47};
//     com.google.javascript.rhino.jstype.FunctionType var49 = var42.createConstructorType(var45, false, var48);
//     com.google.javascript.rhino.jstype.JSType var51 = var49.findPropertyType("hi!");
//     int var52 = var49.getPropertiesCount();
//     com.google.javascript.rhino.jstype.ObjectType var54 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var49, "");
//     boolean var55 = var49.makesStructs();
//     boolean var56 = var40.isSubtype((com.google.javascript.rhino.jstype.JSType)var49);
//     com.google.javascript.rhino.jstype.TernaryValue var57 = var12.testForEquality((com.google.javascript.rhino.jstype.JSType)var40);
//     boolean var58 = var12.isBooleanValueType();
//     int var59 = var12.getMaxArguments();
//     com.google.javascript.jscomp.AbstractCompiler var60 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var61 = null;
//     com.google.javascript.jscomp.NodeTraversal var62 = new com.google.javascript.jscomp.NodeTraversal(var60, var61);
//     java.lang.String var63 = var62.getSourceName();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var64 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var65 = var64.getGraphvizNodes();
//     com.google.javascript.rhino.ErrorReporter var66 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var66);
//     var67.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var70 = null;
//     com.google.javascript.rhino.jstype.JSType var72 = null;
//     com.google.javascript.rhino.jstype.JSType[] var73 = new com.google.javascript.rhino.jstype.JSType[] { var72};
//     com.google.javascript.rhino.jstype.FunctionType var74 = var67.createConstructorType(var70, false, var73);
//     com.google.javascript.rhino.jstype.JSType var76 = var74.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var77 = var74.getTypeOfThis();
//     com.google.javascript.jscomp.graph.GraphNode var78 = var64.getNode((java.lang.Object)var77);
//     java.util.List var79 = var64.getEdges();
//     var62.traverseRoots(var79);
//     com.google.javascript.rhino.Node var81 = com.google.javascript.rhino.IR.block(var79);
//     var12.setImplementedInterfaces(var79);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var83 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.DependencyOptions var84 = new com.google.javascript.jscomp.DependencyOptions();
//     com.google.javascript.jscomp.DependencyOptions var86 = var84.setDependencySorting(false);
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var87 = var83.createDirectedGraphNode((java.lang.Object)var86);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var88 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.DependencyOptions var89 = new com.google.javascript.jscomp.DependencyOptions();
//     com.google.javascript.jscomp.DependencyOptions var91 = var89.setDependencySorting(false);
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var92 = var88.createDirectedGraphNode((java.lang.Object)var91);
//     java.util.List var93 = var83.getNeighborNodes(var92);
//     java.util.List var94 = var3.manageDependencies(var79, var93);
//     com.google.javascript.jscomp.JSModule var95 = null;
//     com.google.javascript.jscomp.JSModule var96 = null;
//     boolean var97 = var3.dependsOn(var95, var96);
// 
//   }

  public void test474() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test474"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineProperties(true);
    var0.setConvertToDottedProperties(false);
    var0.setRuntimeTypeCheck(false);
    var0.setCheckSuspiciousCode(true);
    var0.setInlineVariables(true);

  }

  public void test475() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test475"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    var2.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
    com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
    boolean var10 = var9.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    var12.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
    com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
    boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    var37.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
    boolean var45 = var44.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    var47.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
    com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
    boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
    var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.string("hi!");
    boolean var62 = var61.isNE();
    boolean var63 = var61.isWith();
    com.google.javascript.rhino.Node var64 = var61.getLastChild();
    boolean var65 = var0.isVarArgsParameter(var61);
    com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var68 = var67.cloneNode();
    boolean var69 = var67.isDelProp();
    com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var72 = var71.cloneNode();
    boolean var73 = var71.isDelProp();
    com.google.javascript.rhino.Node var74 = var67.clonePropsFrom(var71);
    com.google.javascript.rhino.JSDocInfo var75 = var71.getJSDocInfo();
    com.google.javascript.rhino.Node var76 = com.google.javascript.rhino.IR.breakNode(var71);
    com.google.javascript.jscomp.CodingConvention.Bind var78 = var0.describeFunctionBind(var76, true);
    com.google.javascript.rhino.Node var80 = com.google.javascript.rhino.IR.nullNode();
    boolean var81 = var80.isGetElem();
    com.google.javascript.rhino.JSDocInfo var82 = null;
    com.google.javascript.rhino.Node var83 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNodeDeclaration((com.google.javascript.jscomp.CodingConvention)var0, "TRUE", var80, var82);
    com.google.javascript.rhino.Node var84 = var83.removeFirstChild();
    com.google.javascript.rhino.jstype.StaticSourceFile var85 = var83.getStaticSourceFile();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var87 = var83.getExistingIntProp(1);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);

  }

  public void test476() {}
//   public void test476() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test476"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
//     java.lang.String var3 = var2.getSourceName();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var5 = var4.getGraphvizNodes();
//     com.google.javascript.rhino.ErrorReporter var6 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
//     var7.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType var12 = null;
//     com.google.javascript.rhino.jstype.JSType[] var13 = new com.google.javascript.rhino.jstype.JSType[] { var12};
//     com.google.javascript.rhino.jstype.FunctionType var14 = var7.createConstructorType(var10, false, var13);
//     com.google.javascript.rhino.jstype.JSType var16 = var14.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var17 = var14.getTypeOfThis();
//     com.google.javascript.jscomp.graph.GraphNode var18 = var4.getNode((java.lang.Object)var17);
//     java.util.List var19 = var4.getEdges();
//     var2.traverseRoots(var19);
//     com.google.javascript.jscomp.Scope var21 = var2.getScope();
//     com.google.javascript.rhino.Node var22 = var2.getEnclosingFunction();
//     com.google.javascript.rhino.Node var23 = var2.getScopeRoot();
// 
//   }

  public void test477() {}
//   public void test477() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test477"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var4);
//     java.util.logging.Logger var6 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var7 = new com.google.javascript.jscomp.LoggerErrorManager((com.google.javascript.jscomp.MessageFormatter)var5, var6);
//     java.util.logging.Logger var8 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var9 = new com.google.javascript.jscomp.LoggerErrorManager((com.google.javascript.jscomp.MessageFormatter)var5, var8);
//     com.google.javascript.jscomp.CheckLevel var10 = null;
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var15 = var14.isNE();
//     int var16 = var14.getSideEffectFlags();
//     com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var19 = var18.isNE();
//     boolean var20 = var18.isWith();
//     com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.getprop(var14, var18);
//     java.util.Set var22 = null;
//     var14.setDirectives(var22);
//     com.google.javascript.jscomp.CheckLevel var24 = null;
//     com.google.javascript.jscomp.CheckLevel var26 = null;
//     com.google.javascript.jscomp.DiagnosticType var28 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var26, "");
//     java.lang.String[] var29 = null;
//     com.google.javascript.jscomp.JSError var30 = com.google.javascript.jscomp.JSError.make("hi!", var14, var24, var28, var29);
//     com.google.javascript.jscomp.CheckLevel var35 = null;
//     com.google.javascript.jscomp.DiagnosticType var37 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var35, "");
//     java.lang.String[] var39 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var40 = com.google.javascript.jscomp.JSError.make("", 100, 0, var37, var39);
//     java.lang.String[] var42 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var43 = com.google.javascript.jscomp.JSError.make("hi!", var14, var37, var42);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var44 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var45 = var44.getGraphvizNodes();
//     com.google.javascript.rhino.ErrorReporter var46 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
//     var47.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var50 = null;
//     com.google.javascript.rhino.jstype.JSType var52 = null;
//     com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
//     com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
//     com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
//     com.google.javascript.jscomp.graph.GraphNode var58 = var44.getNode((java.lang.Object)var57);
//     java.util.List var59 = var44.getEdges();
//     boolean var60 = var43.equals((java.lang.Object)var59);
//     int var61 = var43.getCharno();
//     java.lang.String var62 = var43.toString();
//     var9.println(var10, var43);
// 
//   }

  public void test478() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test478"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    var2.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
    com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
    boolean var10 = var9.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    var12.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
    com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
    boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    var37.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
    boolean var45 = var44.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    var47.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
    com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
    boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
    var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
    java.lang.String var60 = var0.getExportPropertyFunction();
    java.lang.String var61 = var0.getGlobalObject();
    boolean var63 = var0.isConstant("");
    java.lang.String var64 = var0.getExportSymbolFunction();
    com.google.javascript.rhino.ErrorReporter var65 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var65);
    var66.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var69 = null;
    com.google.javascript.rhino.jstype.JSType var71 = null;
    com.google.javascript.rhino.jstype.JSType[] var72 = new com.google.javascript.rhino.jstype.JSType[] { var71};
    com.google.javascript.rhino.jstype.FunctionType var73 = var66.createConstructorType(var69, false, var72);
    com.google.javascript.rhino.jstype.FunctionType var74 = null;
    com.google.javascript.jscomp.CodingConvention.SubclassType var75 = null;
    var0.applySubclassRelationship(var73, var74, var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "goog.exportProperty"+ "'", var60.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "goog.global"+ "'", var61.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "goog.exportSymbol"+ "'", var64.equals("goog.exportSymbol"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test479() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test479"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
    com.google.javascript.rhino.jstype.TemplateType var3 = var1.getObjectElementKey();
    com.google.javascript.rhino.ErrorReporter var4 = var1.getErrorReporter();
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    var6.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var9 = null;
    com.google.javascript.rhino.jstype.JSType var11 = null;
    com.google.javascript.rhino.jstype.JSType[] var12 = new com.google.javascript.rhino.jstype.JSType[] { var11};
    com.google.javascript.rhino.jstype.FunctionType var13 = var6.createConstructorType(var9, false, var12);
    boolean var14 = var13.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
    var16.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.jstype.JSType var21 = null;
    com.google.javascript.rhino.jstype.JSType[] var22 = new com.google.javascript.rhino.jstype.JSType[] { var21};
    com.google.javascript.rhino.jstype.FunctionType var23 = var16.createConstructorType(var19, false, var22);
    com.google.javascript.rhino.jstype.JSType var25 = var23.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var26 = var23.getTypeOfThis();
    boolean var27 = var13.canCastTo((com.google.javascript.rhino.jstype.JSType)var23);
    boolean var28 = var23.isDateType();
    boolean var29 = var23.isConstructor();
    com.google.javascript.rhino.Node var30 = var23.getRootNode();
    com.google.javascript.rhino.ErrorReporter var31 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var31);
    var32.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var35 = null;
    com.google.javascript.rhino.jstype.JSType var37 = null;
    com.google.javascript.rhino.jstype.JSType[] var38 = new com.google.javascript.rhino.jstype.JSType[] { var37};
    com.google.javascript.rhino.jstype.FunctionType var39 = var32.createConstructorType(var35, false, var38);
    boolean var40 = var39.isInterface();
    com.google.javascript.rhino.jstype.JSType var41 = var23.getLeastSupertype((com.google.javascript.rhino.jstype.JSType)var39);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var42 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var43 = var42.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var44 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var44);
    var45.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var48 = null;
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType[] var51 = new com.google.javascript.rhino.jstype.JSType[] { var50};
    com.google.javascript.rhino.jstype.FunctionType var52 = var45.createConstructorType(var48, false, var51);
    com.google.javascript.rhino.jstype.JSType var54 = var52.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var55 = var52.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var56 = var42.getNode((java.lang.Object)var55);
    java.util.List var57 = var42.getEdges();
    com.google.javascript.rhino.jstype.FunctionType var58 = var1.createFunctionTypeWithVarArgs((com.google.javascript.rhino.jstype.JSType)var39, var57);
    com.google.javascript.rhino.ErrorReporter var59 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var59);
    var60.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var63 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var63);
    var64.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var67 = null;
    com.google.javascript.rhino.jstype.JSType var69 = null;
    com.google.javascript.rhino.jstype.JSType[] var70 = new com.google.javascript.rhino.jstype.JSType[] { var69};
    com.google.javascript.rhino.jstype.FunctionType var71 = var64.createConstructorType(var67, false, var70);
    boolean var72 = var71.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var73 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var74 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var73);
    var74.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var77 = null;
    com.google.javascript.rhino.jstype.JSType var79 = null;
    com.google.javascript.rhino.jstype.JSType[] var80 = new com.google.javascript.rhino.jstype.JSType[] { var79};
    com.google.javascript.rhino.jstype.FunctionType var81 = var74.createConstructorType(var77, false, var80);
    com.google.javascript.rhino.jstype.JSType var83 = var81.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var84 = var81.getTypeOfThis();
    boolean var85 = var71.canCastTo((com.google.javascript.rhino.jstype.JSType)var81);
    boolean var86 = var81.isDateType();
    boolean var87 = var81.isConstructor();
    boolean var89 = var60.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType)var81, "goog.exportProperty");
    java.util.Collection var90 = var1.getDirectImplementors((com.google.javascript.rhino.jstype.ObjectType)var81);
    com.google.javascript.rhino.jstype.TemplateType var91 = var1.getObjectIndexKey();
    var1.setLastGeneration(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test480() {}
//   public void test480() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test480"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.error("goog.exportSymbol", "goog.exportProperty");
//     com.google.javascript.jscomp.DiagnosticGroup var3 = com.google.javascript.jscomp.DiagnosticGroup.forType(var2);
//     com.google.javascript.jscomp.CheckLevel var4 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var5 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var3, var4);
//     com.google.javascript.jscomp.CompilerOptions var6 = new com.google.javascript.jscomp.CompilerOptions();
//     var6.setInlineProperties(true);
//     com.google.javascript.jscomp.CheckLevel var9 = null;
//     var6.setCheckMissingReturn(var9);
//     var6.setRemoveUnusedLocalVars(true);
//     var6.setRecordFunctionInformation(false);
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var18 = var17.isNE();
//     int var19 = var17.getSideEffectFlags();
//     com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var22 = var21.isNE();
//     boolean var23 = var21.isWith();
//     com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.getprop(var17, var21);
//     java.util.Set var25 = null;
//     var17.setDirectives(var25);
//     com.google.javascript.jscomp.CheckLevel var27 = null;
//     com.google.javascript.jscomp.CheckLevel var29 = null;
//     com.google.javascript.jscomp.DiagnosticType var31 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var29, "");
//     java.lang.String[] var32 = null;
//     com.google.javascript.jscomp.JSError var33 = com.google.javascript.jscomp.JSError.make("hi!", var17, var27, var31, var32);
//     com.google.javascript.jscomp.DiagnosticGroup var34 = com.google.javascript.jscomp.DiagnosticGroup.forType(var31);
//     com.google.javascript.jscomp.DiagnosticGroup[] var35 = new com.google.javascript.jscomp.DiagnosticGroup[] { var34};
//     com.google.javascript.jscomp.DiagnosticGroup var36 = new com.google.javascript.jscomp.DiagnosticGroup(var35);
//     com.google.javascript.jscomp.CheckLevel var41 = null;
//     com.google.javascript.jscomp.DiagnosticType var43 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var41, "");
//     java.lang.String[] var45 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var46 = com.google.javascript.jscomp.JSError.make("", 100, 0, var43, var45);
//     boolean var47 = var36.matches(var43);
//     com.google.javascript.jscomp.CheckLevel var48 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var49 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var36, var48);
//     com.google.javascript.jscomp.CheckLevel var50 = null;
//     var6.setWarningLevel(var36, var50);
//     boolean var52 = var5.enables(var36);
// 
//   }

  public void test481() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test481"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
    int var15 = var12.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
    com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
    boolean var19 = var18.hasAnyTemplateTypesInternal();
    com.google.javascript.rhino.jstype.BooleanLiteralSet var20 = var18.getPossibleToBooleanOutcomes();
    java.lang.String var21 = var20.toString();
    java.lang.Class var22 = var20.getDeclaringClass();
    java.lang.Enum var24 = java.lang.Enum.<java.lang.Enum>valueOf(var22, "FALSE");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var26 = java.lang.Enum.<java.lang.Enum>valueOf(var22, "Unversioned directory");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "TRUE"+ "'", var21.equals("TRUE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test482() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test482"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    boolean var9 = var8.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    var11.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var14 = null;
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType[] var17 = new com.google.javascript.rhino.jstype.JSType[] { var16};
    com.google.javascript.rhino.jstype.FunctionType var18 = var11.createConstructorType(var14, false, var17);
    com.google.javascript.rhino.jstype.JSType var20 = var18.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var21 = var18.getTypeOfThis();
    boolean var22 = var8.canCastTo((com.google.javascript.rhino.jstype.JSType)var18);
    var18.clearCachedValues();
    boolean var24 = var18.isNullable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test483() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test483"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineProperties(true);
    var0.setIdGeneratorsMap("LABEL_NAME hi!");
    var0.setRemoveClosureAsserts(false);
    var0.setProcessObjectPropertyString(true);
    com.google.javascript.rhino.ErrorReporter var9 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var9);
    var10.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var13 = null;
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var15};
    com.google.javascript.rhino.jstype.FunctionType var17 = var10.createConstructorType(var13, false, var16);
    java.util.Set var18 = var17.getOwnPropertyNames();
    var0.setAliasableStrings(var18);
    var0.enableRuntimeTypeCheck("LABEL_NAME hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test484() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test484"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    boolean var9 = var8.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    var11.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var14 = null;
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType[] var17 = new com.google.javascript.rhino.jstype.JSType[] { var16};
    com.google.javascript.rhino.jstype.FunctionType var18 = var11.createConstructorType(var14, false, var17);
    com.google.javascript.rhino.jstype.JSType var20 = var18.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var21 = var18.getTypeOfThis();
    boolean var22 = var8.canCastTo((com.google.javascript.rhino.jstype.JSType)var18);
    boolean var23 = var18.isReturnTypeInferred();
    int var24 = var18.getPropertiesCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);

  }

  public void test485() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test485"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
    int var11 = var8.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var13 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var8, "");
    java.util.List var14 = var8.getSubTypes();
    boolean var15 = var8.matchesUint32Context();
    boolean var16 = var8.isNoResolvedType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test486() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test486"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("goog.exportProperty");
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var1, false);
    com.google.javascript.jscomp.JSModule var4 = var3.getModule();
    com.google.javascript.jscomp.JSModule var5 = var3.getModule();
    java.lang.String var7 = var3.getLine(10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var8 = var3.getPathRelativeToClosureBase();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test487() {}
//   public void test487() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test487"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     int var2 = var1.getErrorCount();
//     int var3 = var1.getErrorCount();
//     int var4 = var1.getWarningCount();
//     com.google.javascript.jscomp.CheckLevel var5 = null;
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var10 = var9.isNE();
//     int var11 = var9.getSideEffectFlags();
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var14 = var13.isNE();
//     boolean var15 = var13.isWith();
//     com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.getprop(var9, var13);
//     java.util.Set var17 = null;
//     var9.setDirectives(var17);
//     com.google.javascript.jscomp.CheckLevel var19 = null;
//     com.google.javascript.jscomp.CheckLevel var21 = null;
//     com.google.javascript.jscomp.DiagnosticType var23 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var21, "");
//     java.lang.String[] var24 = null;
//     com.google.javascript.jscomp.JSError var25 = com.google.javascript.jscomp.JSError.make("hi!", var9, var19, var23, var24);
//     com.google.javascript.jscomp.CheckLevel var30 = null;
//     com.google.javascript.jscomp.DiagnosticType var32 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var30, "");
//     java.lang.String[] var34 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var35 = com.google.javascript.jscomp.JSError.make("", 100, 0, var32, var34);
//     java.lang.String[] var37 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var38 = com.google.javascript.jscomp.JSError.make("hi!", var9, var32, var37);
//     com.google.javascript.jscomp.DiagnosticType var39 = var38.getType();
//     com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var44 = var43.isNE();
//     int var45 = var43.getSideEffectFlags();
//     com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var48 = var47.isNE();
//     boolean var49 = var47.isWith();
//     com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.getprop(var43, var47);
//     java.util.Set var51 = null;
//     var43.setDirectives(var51);
//     com.google.javascript.jscomp.CheckLevel var53 = null;
//     com.google.javascript.jscomp.CheckLevel var55 = null;
//     com.google.javascript.jscomp.DiagnosticType var57 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var55, "");
//     java.lang.String[] var58 = null;
//     com.google.javascript.jscomp.JSError var59 = com.google.javascript.jscomp.JSError.make("hi!", var43, var53, var57, var58);
//     com.google.javascript.jscomp.CheckLevel var64 = null;
//     com.google.javascript.jscomp.DiagnosticType var66 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var64, "");
//     java.lang.String[] var68 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var69 = com.google.javascript.jscomp.JSError.make("", 100, 0, var66, var68);
//     java.lang.String[] var71 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var72 = com.google.javascript.jscomp.JSError.make("hi!", var43, var66, var71);
//     com.google.javascript.jscomp.JSError var73 = com.google.javascript.jscomp.JSError.make(var39, var71);
//     java.lang.Object var74 = null;
//     boolean var75 = var73.equals(var74);
//     var1.println(var5, var73);
// 
//   }

  public void test488() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test488"); }


    boolean var1 = com.google.javascript.jscomp.NodeUtil.isValidQualifiedName("hi!: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test489() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test489"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var11 = var8.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    var13.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType[] var19 = new com.google.javascript.rhino.jstype.JSType[] { var18};
    com.google.javascript.rhino.jstype.FunctionType var20 = var13.createConstructorType(var16, false, var19);
    boolean var21 = var20.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    var23.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType[] var29 = new com.google.javascript.rhino.jstype.JSType[] { var28};
    com.google.javascript.rhino.jstype.FunctionType var30 = var23.createConstructorType(var26, false, var29);
    com.google.javascript.rhino.jstype.JSType var32 = var30.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var33 = var30.getTypeOfThis();
    boolean var34 = var20.canCastTo((com.google.javascript.rhino.jstype.JSType)var30);
    boolean var35 = var8.hasEqualCallType(var30);
    java.lang.Iterable var36 = var30.getAllExtendedInterfaces();
    java.util.Set var37 = var30.getOwnPropertyNames();
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var39 = new com.google.javascript.rhino.jstype.FunctionBuilder(var38);
    com.google.javascript.rhino.ErrorReporter var40 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40);
    var41.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var44 = null;
    com.google.javascript.rhino.jstype.JSType var46 = null;
    com.google.javascript.rhino.jstype.JSType[] var47 = new com.google.javascript.rhino.jstype.JSType[] { var46};
    com.google.javascript.rhino.jstype.FunctionType var48 = var41.createConstructorType(var44, false, var47);
    boolean var49 = var48.canBeCalled();
    com.google.javascript.rhino.jstype.FunctionBuilder var51 = var39.withReturnType((com.google.javascript.rhino.jstype.JSType)var48, true);
    boolean var52 = var48.isArrayType();
    com.google.javascript.rhino.jstype.JSType var54 = var48.getPropertyType("LABEL_NAME hi!");
    var48.clearCachedValues();
    com.google.javascript.rhino.jstype.JSType.TypePair var56 = var30.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType)var48);
    java.lang.Iterable var57 = var30.getParameters();
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    var59.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var62 = null;
    com.google.javascript.rhino.jstype.JSType var64 = null;
    com.google.javascript.rhino.jstype.JSType[] var65 = new com.google.javascript.rhino.jstype.JSType[] { var64};
    com.google.javascript.rhino.jstype.FunctionType var66 = var59.createConstructorType(var62, false, var65);
    boolean var67 = var66.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var68 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var69 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var68);
    var69.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var72 = null;
    com.google.javascript.rhino.jstype.JSType var74 = null;
    com.google.javascript.rhino.jstype.JSType[] var75 = new com.google.javascript.rhino.jstype.JSType[] { var74};
    com.google.javascript.rhino.jstype.FunctionType var76 = var69.createConstructorType(var72, false, var75);
    com.google.javascript.rhino.jstype.JSType var78 = var76.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var79 = var76.getTypeOfThis();
    boolean var80 = var66.canCastTo((com.google.javascript.rhino.jstype.JSType)var76);
    boolean var81 = var76.isDateType();
    boolean var82 = var76.isNullType();
    boolean var83 = var76.hasCachedValues();
    com.google.javascript.rhino.JSDocInfo var84 = var76.getJSDocInfo();
    com.google.javascript.rhino.jstype.TernaryValue var85 = var30.testForEquality((com.google.javascript.rhino.jstype.JSType)var76);
    boolean var86 = var76.isEnumElementType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);

  }

  public void test490() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test490"); }


    com.google.javascript.jscomp.DiagnosticGroups var0 = new com.google.javascript.jscomp.DiagnosticGroups();
    com.google.javascript.jscomp.DiagnosticGroup var2 = var0.forName("Unversioned directory");
    com.google.javascript.jscomp.DiagnosticGroup var4 = var0.forName("InputId: hi!");
    com.google.javascript.jscomp.DiagnosticGroup var6 = var0.forName("()");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test491() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test491"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    boolean var9 = var8.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    var11.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var14 = null;
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType[] var17 = new com.google.javascript.rhino.jstype.JSType[] { var16};
    com.google.javascript.rhino.jstype.FunctionType var18 = var11.createConstructorType(var14, false, var17);
    com.google.javascript.rhino.jstype.JSType var20 = var18.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var21 = var18.getTypeOfThis();
    boolean var22 = var8.canCastTo((com.google.javascript.rhino.jstype.JSType)var18);
    com.google.javascript.jscomp.ClosureCodingConvention var23 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    boolean var33 = var32.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    var35.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var38 = null;
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType[] var41 = new com.google.javascript.rhino.jstype.JSType[] { var40};
    com.google.javascript.rhino.jstype.FunctionType var42 = var35.createConstructorType(var38, false, var41);
    com.google.javascript.rhino.jstype.JSType var44 = var42.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var45 = var42.getTypeOfThis();
    boolean var46 = var32.canCastTo((com.google.javascript.rhino.jstype.JSType)var42);
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    var48.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.rhino.jstype.JSType var53 = null;
    com.google.javascript.rhino.jstype.JSType[] var54 = new com.google.javascript.rhino.jstype.JSType[] { var53};
    com.google.javascript.rhino.jstype.FunctionType var55 = var48.createConstructorType(var51, false, var54);
    com.google.javascript.rhino.jstype.JSType var57 = var55.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var58 = var55.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var59 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var59);
    var60.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var63 = null;
    com.google.javascript.rhino.jstype.JSType var65 = null;
    com.google.javascript.rhino.jstype.JSType[] var66 = new com.google.javascript.rhino.jstype.JSType[] { var65};
    com.google.javascript.rhino.jstype.FunctionType var67 = var60.createConstructorType(var63, false, var66);
    boolean var68 = var67.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var69 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var69);
    var70.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var73 = null;
    com.google.javascript.rhino.jstype.JSType var75 = null;
    com.google.javascript.rhino.jstype.JSType[] var76 = new com.google.javascript.rhino.jstype.JSType[] { var75};
    com.google.javascript.rhino.jstype.FunctionType var77 = var70.createConstructorType(var73, false, var76);
    com.google.javascript.rhino.jstype.JSType var79 = var77.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var80 = var77.getTypeOfThis();
    boolean var81 = var67.canCastTo((com.google.javascript.rhino.jstype.JSType)var77);
    var23.applySingletonGetter(var32, var55, (com.google.javascript.rhino.jstype.ObjectType)var77);
    com.google.javascript.rhino.jstype.TemplateType var83 = var77.toMaybeTemplateType();
    boolean var84 = var18.hasEqualCallType(var77);
    boolean var85 = var77.isReturnTypeInferred();
    java.util.Set var86 = var77.getOwnPropertyNames();
    boolean var87 = var77.matchesInt32Context();
    boolean var88 = var77.isNominalType();
    boolean var89 = var77.isNoType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);

  }

  public void test492() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test492"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.util.Set var9 = null;
    var1.setDirectives(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    int var15 = var13.getSideEffectFlags();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    boolean var19 = var17.isWith();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
    java.util.Set var21 = null;
    var13.setDirectives(var21);
    com.google.javascript.jscomp.CheckLevel var23 = null;
    com.google.javascript.jscomp.CheckLevel var25 = null;
    com.google.javascript.jscomp.DiagnosticType var27 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var25, "");
    java.lang.String[] var28 = null;
    com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("hi!", var13, var23, var27, var28);
    com.google.javascript.rhino.Node var30 = var1.useSourceInfoIfMissingFrom(var13);
    int var31 = var1.getType();
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.string("hi!");
    boolean var34 = var33.isNE();
    int var35 = var33.getSideEffectFlags();
    boolean var36 = var33.isReturn();
    com.google.javascript.rhino.Node var37 = var33.cloneNode();
    boolean var38 = var33.hasMoreThanOneChild();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.regexp(var1, var33);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test493() {}
//   public void test493() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test493"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var1);
//     double var3 = var0.getProgress();
//     var0.reportCodeChange();
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0);
//     boolean var6 = var0.acceptConstKeyword();
// 
//   }

  public void test494() {}
//   public void test494() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test494"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var4);
//     java.util.logging.Logger var6 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var7 = new com.google.javascript.jscomp.LoggerErrorManager((com.google.javascript.jscomp.MessageFormatter)var5, var6);
//     java.util.logging.Logger var8 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var9 = new com.google.javascript.jscomp.LoggerErrorManager((com.google.javascript.jscomp.MessageFormatter)var5, var8);
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var14 = var13.isNE();
//     int var15 = var13.getSideEffectFlags();
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var18 = var17.isNE();
//     boolean var19 = var17.isWith();
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
//     java.util.Set var21 = null;
//     var13.setDirectives(var21);
//     com.google.javascript.jscomp.CheckLevel var23 = null;
//     com.google.javascript.jscomp.CheckLevel var25 = null;
//     com.google.javascript.jscomp.DiagnosticType var27 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var25, "");
//     java.lang.String[] var28 = null;
//     com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("hi!", var13, var23, var27, var28);
//     com.google.javascript.jscomp.CheckLevel var34 = null;
//     com.google.javascript.jscomp.DiagnosticType var36 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var34, "");
//     java.lang.String[] var38 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var39 = com.google.javascript.jscomp.JSError.make("", 100, 0, var36, var38);
//     java.lang.String[] var41 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var42 = com.google.javascript.jscomp.JSError.make("hi!", var13, var36, var41);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var43 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var44 = var43.getGraphvizNodes();
//     com.google.javascript.rhino.ErrorReporter var45 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
//     var46.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var49 = null;
//     com.google.javascript.rhino.jstype.JSType var51 = null;
//     com.google.javascript.rhino.jstype.JSType[] var52 = new com.google.javascript.rhino.jstype.JSType[] { var51};
//     com.google.javascript.rhino.jstype.FunctionType var53 = var46.createConstructorType(var49, false, var52);
//     com.google.javascript.rhino.jstype.JSType var55 = var53.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var56 = var53.getTypeOfThis();
//     com.google.javascript.jscomp.graph.GraphNode var57 = var43.getNode((java.lang.Object)var56);
//     java.util.List var58 = var43.getEdges();
//     boolean var59 = var42.equals((java.lang.Object)var58);
//     int var60 = var42.getCharno();
//     java.lang.String var61 = var42.toString();
//     java.lang.String var62 = var5.formatWarning(var42);
// 
//   }

  public void test495() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test495"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString(40, "Object#Element");
    boolean var4 = var3.isInc();
    boolean var5 = var3.isNull();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
    int var12 = var11.getChangeTime();
    boolean var13 = var11.isCatch();
    int var14 = var11.getType();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var17 = var16.cloneNode();
    boolean var18 = var16.isDelProp();
    boolean var19 = var16.isDefaultCase();
    boolean var20 = var16.isNE();
    var16.setLength(100);
    com.google.javascript.rhino.Node var25 = new com.google.javascript.rhino.Node(1, var11, var16, 1, (-1));
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var28 = var27.cloneNode();
    boolean var29 = var27.isDelProp();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var32 = var31.cloneNode();
    boolean var33 = var31.isDelProp();
    com.google.javascript.rhino.Node var34 = var27.clonePropsFrom(var31);
    boolean var35 = var31.isBlock();
    boolean var36 = var31.isOnlyModifiesThisCall();
    var31.addSuppression("InputId: hi!");
    com.google.javascript.rhino.Node var39 = new com.google.javascript.rhino.Node(40, var3, var25, var31);
    boolean var40 = var3.isRegExp();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test496() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test496"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.TemplateType var4 = var1.getObjectElementKey();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    var7.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType var12 = null;
    com.google.javascript.rhino.jstype.JSType[] var13 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.jstype.FunctionType var14 = var7.createConstructorType(var10, false, var13);
    com.google.javascript.rhino.jstype.JSType var16 = var14.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var17 = var14.getTypeOfThis();
    com.google.javascript.rhino.jstype.JSType var18 = var17.unboxesTo();
    com.google.javascript.rhino.jstype.JSType var20 = var17.getRestrictedTypeGivenToBooleanOutcome(false);
    boolean var21 = var17.isNoObjectType();
    boolean var22 = var5.hasNode((java.lang.Object)var21);
    java.util.List var23 = var5.getGraphvizEdges();
    var5.pushNodeAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var25 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var26 = var25.getGraphvizEdges();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var27 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.string("hi!");
    boolean var30 = var29.isNE();
    int var31 = var29.getSideEffectFlags();
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.string("hi!");
    boolean var34 = var33.isNE();
    boolean var35 = var33.isWith();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.getprop(var29, var33);
    var36.setLineno(10);
    boolean var39 = var27.hasNode((java.lang.Object)var36);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var40 = var25.createDirectedGraphNode((java.lang.Object)var27);
    java.util.List var41 = var5.getNeighborNodes(var40);
    com.google.javascript.rhino.Node var42 = var1.createParameters(var41);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.JSDocInfo var43 = com.google.javascript.jscomp.NodeUtil.getFunctionJSDocInfo(var42);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test497() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test497"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    com.google.javascript.rhino.Node var12 = var10.getLastSibling();
    var12.setLineno(100);
    var12.setSourceEncodedPosition(0);
    var12.setQuotedString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test498() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test498"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var1 = var0.getGraphvizNodes();
    var0.clearEdgeAnnotations();
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
    var4.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType var9 = null;
    com.google.javascript.rhino.jstype.JSType[] var10 = new com.google.javascript.rhino.jstype.JSType[] { var9};
    com.google.javascript.rhino.jstype.FunctionType var11 = var4.createConstructorType(var7, false, var10);
    boolean var12 = var11.canBeCalled();
    boolean var13 = var11.isTemplatizedType();
    com.google.javascript.jscomp.graph.GraphNode var14 = var0.getNode((java.lang.Object)var11);
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
    java.lang.Iterable var18 = var16.getTypesWithProperty("hi!");
    com.google.javascript.rhino.jstype.FunctionParamBuilder var19 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var16);
    boolean var20 = var19.hasVarArgs();
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    var22.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var25 = null;
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.rhino.jstype.JSType[] var28 = new com.google.javascript.rhino.jstype.JSType[] { var27};
    com.google.javascript.rhino.jstype.FunctionType var29 = var22.createConstructorType(var25, false, var28);
    com.google.javascript.rhino.jstype.JSType var31 = var29.findPropertyType("hi!");
    int var32 = var29.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var34 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var29, "");
    java.util.List var35 = var29.getSubTypes();
    boolean var36 = var29.isStringValueType();
    boolean var37 = var29.isBooleanValueType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.disconnectInDirection((java.lang.Object)var19, (java.lang.Object)var29);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test499() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test499"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var11 = var8.getTypeOfThis();
    com.google.javascript.rhino.jstype.JSType var12 = var11.unboxesTo();
    com.google.javascript.rhino.jstype.JSType var14 = var11.getRestrictedTypeGivenToBooleanOutcome(false);
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
    var16.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.jstype.JSType var21 = null;
    com.google.javascript.rhino.jstype.JSType[] var22 = new com.google.javascript.rhino.jstype.JSType[] { var21};
    com.google.javascript.rhino.jstype.FunctionType var23 = var16.createConstructorType(var19, false, var22);
    com.google.javascript.rhino.jstype.JSType var25 = var23.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var26 = var23.toMaybeFunctionType();
    boolean var27 = var23.isUnionType();
    boolean var28 = com.google.javascript.rhino.jstype.JSType.isEquivalent(var14, (com.google.javascript.rhino.jstype.JSType)var23);
    com.google.javascript.rhino.SimpleErrorReporter var29 = new com.google.javascript.rhino.SimpleErrorReporter();
    com.google.javascript.rhino.ErrorReporter var30 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
    var31.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var34 = null;
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var36};
    com.google.javascript.rhino.jstype.FunctionType var38 = var31.createConstructorType(var34, false, var37);
    boolean var39 = var38.canBeCalled();
    boolean var40 = var38.isTemplatizedType();
    com.google.javascript.rhino.jstype.ObjectType var42 = var38.getTopMostDefiningType("hi!");
    com.google.javascript.rhino.jstype.JSType var43 = var14.resolve((com.google.javascript.rhino.ErrorReporter)var29, (com.google.javascript.rhino.jstype.StaticScope)var38);
    com.google.javascript.rhino.jstype.TemplateTypeMap var44 = var38.getTemplateTypeMap();
    com.google.javascript.rhino.ErrorReporter var45 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    var48.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.rhino.jstype.JSType var53 = null;
    com.google.javascript.rhino.jstype.JSType[] var54 = new com.google.javascript.rhino.jstype.JSType[] { var53};
    com.google.javascript.rhino.jstype.FunctionType var55 = var48.createConstructorType(var51, false, var54);
    com.google.javascript.rhino.jstype.JSType var57 = var55.findPropertyType("hi!");
    int var58 = var55.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var60 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var55, "");
    boolean var61 = var55.isFunctionPrototypeType();
    boolean var62 = var55.isTemplateType();
    boolean var63 = var55.isBooleanObjectType();
    com.google.javascript.rhino.ErrorReporter var64 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var64);
    var65.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var68 = null;
    com.google.javascript.rhino.jstype.JSType var70 = null;
    com.google.javascript.rhino.jstype.JSType[] var71 = new com.google.javascript.rhino.jstype.JSType[] { var70};
    com.google.javascript.rhino.jstype.FunctionType var72 = var65.createConstructorType(var68, false, var71);
    boolean var73 = var72.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var74 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var75 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var74);
    var75.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var78 = null;
    com.google.javascript.rhino.jstype.JSType var80 = null;
    com.google.javascript.rhino.jstype.JSType[] var81 = new com.google.javascript.rhino.jstype.JSType[] { var80};
    com.google.javascript.rhino.jstype.FunctionType var82 = var75.createConstructorType(var78, false, var81);
    com.google.javascript.rhino.jstype.JSType var84 = var82.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var85 = var82.getTypeOfThis();
    boolean var86 = var72.canCastTo((com.google.javascript.rhino.jstype.JSType)var82);
    boolean var87 = var82.isDateType();
    boolean var88 = var82.isNullType();
    boolean var89 = var82.hasCachedValues();
    boolean var90 = var82.isNullable();
    boolean var91 = var82.isConstructor();
    boolean var92 = var82.hasImplementedInterfaces();
    com.google.javascript.rhino.jstype.FunctionType var93 = var46.createFunctionTypeWithNewReturnType(var55, (com.google.javascript.rhino.jstype.JSType)var82);
    com.google.javascript.rhino.jstype.TemplateType var95 = var46.createTemplateType("goog.abstractMethod");
    boolean var96 = var44.hasTemplateType(var95);
    com.google.javascript.rhino.jstype.TemplateType var97 = null;
    com.google.javascript.rhino.jstype.JSType var98 = var44.getTemplateType(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test500() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test500"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    java.lang.String var2 = var1.getExportPropertyFunction();
    boolean var4 = var1.isValidEnumKey("");
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    int var8 = var6.getSideEffectFlags();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    boolean var11 = var10.isNE();
    boolean var12 = var10.isWith();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.getprop(var6, var10);
    var10.removeProp(0);
    java.lang.String var16 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var10);
    java.util.Set var17 = null;
    var10.setDirectives(var17);
    java.lang.Iterable var19 = var10.siblings();
    boolean var20 = var1.isVarArgsParameter(var10);
    boolean var22 = var10.getBooleanProp(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "goog.exportProperty"+ "'", var2.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

}
