
import junit.framework.*;

public class RandoopTest0 extends TestCase {

  public static boolean debug = false;

  public void test1() {}
//   public void test1() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test1"); }
// 
// 
//     java.util.Map var0 = null;
//     com.google.javascript.rhino.Node var1 = null;
//     com.google.javascript.jscomp.NodeUtil.verifyScopeChanges(var0, var1, false);
// 
//   }

  public void test2() {}
//   public void test2() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test2"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var0 = null;
//     com.google.javascript.jscomp.JSModule[] var1 = new com.google.javascript.jscomp.JSModule[] { var0};
//     com.google.javascript.jscomp.JSModuleGraph var2 = new com.google.javascript.jscomp.JSModuleGraph(var1);
// 
//   }

  public void test3() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test3"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.VariableRenamingPolicy var1 = com.google.javascript.jscomp.VariableRenamingPolicy.valueOf("hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test4() {}
//   public void test4() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test4"); }
// 
// 
//     java.util.List var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.script(var0);
// 
//   }

  public void test5() {}
//   public void test5() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test5"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = null;
//     com.google.javascript.rhino.Node var4 = new com.google.javascript.rhino.Node(1, var1, 0, (-1));
// 
//   }

  public void test6() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test6"); }


    com.google.javascript.rhino.jstype.JSType var0 = null;
    com.google.javascript.rhino.jstype.FunctionType var1 = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test7() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test7"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    boolean var3 = var1.isWith();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.string("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.addChildAfter(var5, var8);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test8() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test8"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setDouble(10.0d);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test9() {}
//   public void test9() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test9"); }
// 
// 
//     com.google.javascript.jscomp.CheckLevel var3 = null;
//     com.google.javascript.jscomp.DiagnosticType var4 = null;
//     java.lang.String[] var6 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var7 = com.google.javascript.jscomp.JSError.make("", 0, 0, var3, var4, var6);
// 
//   }

  public void test10() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test10"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.VariableRenamingPolicy var1 = com.google.javascript.jscomp.VariableRenamingPolicy.valueOf("");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test11() {}
//   public void test11() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test11"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var1 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = null;
//     com.google.javascript.rhino.jstype.JSType[] var3 = new com.google.javascript.rhino.jstype.JSType[] { var2};
//     boolean var4 = var1.addOptionalParams(var3);
// 
//   }

  public void test12() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test12"); }


    boolean var1 = com.google.javascript.jscomp.NodeUtil.isValidQualifiedName("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test13() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test13"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.string("hi!");
    boolean var13 = var12.isNE();
    int var14 = var12.getSideEffectFlags();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.string("hi!");
    boolean var17 = var16.isNE();
    boolean var18 = var16.isWith();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.getprop(var12, var16);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.string("hi!");
    var16.addChildToBack(var21);
    com.google.javascript.rhino.Node var23 = var21.getLastSibling();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.ifNode(var5, var10, var23);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test14() {}
//   public void test14() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test14"); }
// 
// 
//     java.io.InputStream var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromInputStream("", var1);
// 
//   }

  public void test15() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test15"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.util.Set var9 = null;
    var1.setDirectives(var9);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.string("hi!");
    boolean var13 = var12.isNE();
    int var14 = var12.getSideEffectFlags();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.string("hi!");
    boolean var17 = var16.isNE();
    boolean var18 = var16.isWith();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.getprop(var12, var16);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.string("hi!");
    var16.addChildToBack(var21);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.string("hi!");
    boolean var25 = var24.isNE();
    int var26 = var24.getSideEffectFlags();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.string("hi!");
    boolean var29 = var28.isNE();
    boolean var30 = var28.isWith();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.getprop(var24, var28);
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.string("hi!");
    var28.addChildToBack(var33);
    com.google.javascript.rhino.Node var35 = var33.getLastSibling();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.replaceChildAfter(var16, var33);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test16() {}
//   public void test16() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test16"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     java.util.List var1 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var2 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var0, var1, var2);
// 
//   }

  public void test17() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test17"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    com.google.javascript.rhino.Node var12 = var10.getLastSibling();
    boolean var13 = var12.isArrayLit();
    com.google.javascript.rhino.Node var14 = var12.getParent();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.string("hi!");
    boolean var17 = var16.isNE();
    int var18 = var16.getSideEffectFlags();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.string("hi!");
    boolean var21 = var20.isNE();
    boolean var22 = var20.isWith();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.getprop(var16, var20);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.string("hi!");
    var20.addChildToBack(var25);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var27 = var25.getJsDocBuilderForNode();
    int var28 = var25.getCharno();
    java.lang.Object var30 = var25.getProp(10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var14.addChildrenToBack(var25);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);

  }

  public void test18() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test18"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.util.Set var9 = null;
    var1.setDirectives(var9);
    com.google.javascript.rhino.Node var11 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.assign(var1, var11);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test19() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test19"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    int var7 = var5.getSideEffectFlags();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.string("hi!");
    boolean var10 = var9.isNE();
    boolean var11 = var9.isWith();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.getprop(var5, var9);
    java.util.Set var13 = null;
    var5.setDirectives(var13);
    com.google.javascript.jscomp.CheckLevel var15 = null;
    com.google.javascript.jscomp.CheckLevel var17 = null;
    com.google.javascript.jscomp.DiagnosticType var19 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var17, "");
    java.lang.String[] var20 = null;
    com.google.javascript.jscomp.JSError var21 = com.google.javascript.jscomp.JSError.make("hi!", var5, var15, var19, var20);
    var5.addSuppression("");
    com.google.common.collect.ImmutableList var24 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.FunctionType var25 = var1.createInterfaceType("hi!", var5, var24);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test20() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test20"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.not(var5);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test21() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test21"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
    int var15 = var12.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.labelName("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.catchNode(var17, var19);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test22() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test22"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.block();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.string("hi!");
    var6.addChildToBack(var11);
    com.google.javascript.rhino.Node var13 = var11.getLastSibling();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.comma(var0, var13);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test23() {}
//   public void test23() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test23"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var4 = var3.cloneNode();
//     boolean var5 = var3.isDelProp();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var8 = var7.cloneNode();
//     boolean var9 = var7.isDelProp();
//     com.google.javascript.rhino.Node var10 = var3.clonePropsFrom(var7);
//     com.google.javascript.rhino.Node[] var11 = new com.google.javascript.rhino.Node[] { var7};
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var0, var1, var11);
// 
//   }

  public void test24() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test24"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var5 = com.google.javascript.rhino.SimpleErrorReporter.getMessage1("hi!", (java.lang.Object)var4);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test25() {}
//   public void test25() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test25"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var4 = null;
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
//     com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
//     com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
//     com.google.javascript.rhino.JSDocInfo var11 = var8.getJSDocInfo();
//     java.lang.String var12 = var8.toDebugHashCodeString();
// 
//   }

  public void test26() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test26"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
    boolean var4 = var3.isNE();
    int var5 = var3.getSideEffectFlags();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
    boolean var8 = var7.isNE();
    boolean var9 = var7.isWith();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.string("hi!");
    var7.addChildToBack(var12);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var14 = var12.getJsDocBuilderForNode();
    int var15 = var12.getCharno();
    java.lang.Object var17 = var12.getProp(10);
    com.google.javascript.rhino.Node var18 = var12.getFirstChild();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.getelem(var1, var12);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test27() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test27"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    com.google.javascript.rhino.Node var12 = var10.getLastSibling();
    boolean var13 = var12.isArrayLit();
    com.google.javascript.rhino.Node var14 = var12.getParent();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.string("hi!");
    boolean var17 = var16.isNE();
    int var18 = var16.getSideEffectFlags();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.string("hi!");
    boolean var21 = var20.isNE();
    boolean var22 = var20.isWith();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.getprop(var16, var20);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.string("hi!");
    boolean var27 = var26.isNE();
    int var28 = var26.getSideEffectFlags();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.string("hi!");
    boolean var31 = var30.isNE();
    boolean var32 = var30.isWith();
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.getprop(var26, var30);
    java.util.Set var34 = null;
    var26.setDirectives(var34);
    com.google.javascript.jscomp.CheckLevel var36 = null;
    com.google.javascript.jscomp.CheckLevel var38 = null;
    com.google.javascript.jscomp.DiagnosticType var40 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var38, "");
    java.lang.String[] var41 = null;
    com.google.javascript.jscomp.JSError var42 = com.google.javascript.jscomp.JSError.make("hi!", var26, var36, var40, var41);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.ifNode(var14, var20, var26);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test28() {}
//   public void test28() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test28"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
//     com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var4 = var3.isNE();
//     int var5 = var3.getSideEffectFlags();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var8 = var7.isNE();
//     boolean var9 = var7.isWith();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.string("hi!");
//     var7.addChildToBack(var12);
//     com.google.javascript.rhino.Node.FileLevelJsDocBuilder var14 = var12.getJsDocBuilderForNode();
//     int var15 = var12.getCharno();
//     java.lang.Object var17 = var12.getProp(10);
//     var1.validateCodeRoot(var12);
// 
//   }

  public void test29() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test29"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    java.util.Set var10 = null;
    var2.setDirectives(var10);
    com.google.javascript.jscomp.CheckLevel var12 = null;
    com.google.javascript.jscomp.CheckLevel var14 = null;
    com.google.javascript.jscomp.DiagnosticType var16 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var14, "");
    java.lang.String[] var17 = null;
    com.google.javascript.jscomp.JSError var18 = com.google.javascript.jscomp.JSError.make("hi!", var2, var12, var16, var17);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.pos(var2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test30() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test30"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    java.lang.Iterable var3 = var1.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    boolean var13 = var12.isInterface();
    boolean var15 = var1.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType)var12, "");
    com.google.javascript.rhino.jstype.TemplateType var16 = var1.getObjectElementKey();
    com.google.javascript.rhino.ErrorReporter var18 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18);
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
    var21.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var24 = null;
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.rhino.jstype.JSType[] var27 = new com.google.javascript.rhino.jstype.JSType[] { var26};
    com.google.javascript.rhino.jstype.FunctionType var28 = var21.createConstructorType(var24, false, var27);
    boolean var29 = var28.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var30 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
    var31.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var34 = null;
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var36};
    com.google.javascript.rhino.jstype.FunctionType var38 = var31.createConstructorType(var34, false, var37);
    com.google.javascript.rhino.jstype.JSType var40 = var38.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var41 = var38.getTypeOfThis();
    boolean var42 = var28.canCastTo((com.google.javascript.rhino.jstype.JSType)var38);
    com.google.javascript.rhino.ErrorReporter var43 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var43);
    var44.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var47 = null;
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.jstype.FunctionType var51 = var44.createConstructorType(var47, false, var50);
    boolean var52 = var51.isInterface();
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var51};
    com.google.javascript.rhino.jstype.FunctionType var54 = var19.createConstructorType((com.google.javascript.rhino.jstype.JSType)var28, var53);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.overwriteDeclaredType("hi!", (com.google.javascript.rhino.jstype.JSType)var54);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test31() {}
//   public void test31() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test31"); }
// 
// 
//     java.lang.Class var0 = null;
//     java.lang.Enum var2 = java.lang.Enum.<java.lang.Enum>valueOf(var0, "");
// 
//   }

  public void test32() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test32"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var2 = var1.cloneNode();
    boolean var3 = var1.isDelProp();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var6 = var5.cloneNode();
    boolean var7 = var5.isDelProp();
    com.google.javascript.rhino.Node var8 = var1.clonePropsFrom(var5);
    boolean var9 = var1.isHook();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.voidNode(var1);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test33() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test33"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.util.Set var9 = null;
    var1.setDirectives(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    int var15 = var13.getSideEffectFlags();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    boolean var19 = var17.isWith();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
    java.util.Set var21 = null;
    var13.setDirectives(var21);
    com.google.javascript.jscomp.CheckLevel var23 = null;
    com.google.javascript.jscomp.CheckLevel var25 = null;
    com.google.javascript.jscomp.DiagnosticType var27 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var25, "");
    java.lang.String[] var28 = null;
    com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("hi!", var13, var23, var27, var28);
    com.google.javascript.rhino.Node var30 = var1.useSourceInfoIfMissingFrom(var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.var(var30);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test34() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test34"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
    int var15 = var12.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.cast(var17);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test35() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test35"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    com.google.javascript.rhino.Node var12 = var10.getLastSibling();
    boolean var13 = var12.isArrayLit();
    com.google.javascript.rhino.Node var14 = var12.getParent();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var17 = var16.cloneNode();
    boolean var18 = var16.isDelProp();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var21 = var20.cloneNode();
    boolean var22 = var20.isDelProp();
    com.google.javascript.rhino.Node var23 = var16.clonePropsFrom(var20);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.getelem(var14, var20);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test36() {}
//   public void test36() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test36"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
//     com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
//     var3.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var6 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
//     var7.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType var12 = null;
//     com.google.javascript.rhino.jstype.JSType[] var13 = new com.google.javascript.rhino.jstype.JSType[] { var12};
//     com.google.javascript.rhino.jstype.FunctionType var14 = var7.createConstructorType(var10, false, var13);
//     com.google.javascript.rhino.jstype.JSType var16 = var14.findPropertyType("hi!");
//     int var17 = var14.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var14};
//     com.google.javascript.rhino.Node var19 = var3.createParametersWithVarArgs(var18);
//     com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var22 = var21.cloneNode();
//     boolean var23 = var21.isDelProp();
//     com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var26 = var25.cloneNode();
//     boolean var27 = var25.isDelProp();
//     com.google.javascript.rhino.Node var28 = var21.clonePropsFrom(var25);
//     com.google.javascript.rhino.JSDocInfo var29 = var25.getJSDocInfo();
//     com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.breakNode(var25);
//     var1.process(var19, var30);
// 
//   }

  public void test37() {}
//   public void test37() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test37"); }
// 
// 
//     java.util.List var0 = null;
//     com.google.javascript.jscomp.deps.SortedDependencies var1 = new com.google.javascript.jscomp.deps.SortedDependencies(var0);
// 
//   }

  public void test38() {}
//   public void test38() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test38"); }
// 
// 
//     com.google.javascript.jscomp.ErrorManager var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
// 
//   }

  public void test39() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test39"); }


    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    var2.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
    com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
    com.google.javascript.rhino.jstype.JSType var11 = var9.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var12 = var9.getTypeOfThis();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var13 = com.google.javascript.rhino.SimpleErrorReporter.getMessage1("", (java.lang.Object)var12);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test40() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test40"); }


    com.google.javascript.jscomp.CheckLevel[] var0 = com.google.javascript.jscomp.CheckLevel.values();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test41() {}
//   public void test41() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test41"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.ErrorReporter var1 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
//     var2.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
//     com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
//     boolean var10 = var9.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var11 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
//     var12.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
//     com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
//     com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
//     boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
//     com.google.javascript.rhino.ErrorReporter var24 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
//     var25.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var28 = null;
//     com.google.javascript.rhino.jstype.JSType var30 = null;
//     com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
//     com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
//     com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
//     com.google.javascript.rhino.ErrorReporter var36 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
//     var37.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var40 = null;
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
//     com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
//     boolean var45 = var44.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var46 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
//     var47.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var50 = null;
//     com.google.javascript.rhino.jstype.JSType var52 = null;
//     com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
//     com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
//     com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
//     boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
//     var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
//     com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var62 = var61.isNE();
//     int var63 = var61.getSideEffectFlags();
//     com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var66 = var65.isNE();
//     boolean var67 = var65.isWith();
//     com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.getprop(var61, var65);
//     com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.IR.string("hi!");
//     var65.addChildToBack(var70);
//     com.google.javascript.rhino.Node.FileLevelJsDocBuilder var72 = var70.getJsDocBuilderForNode();
//     int var73 = var70.getCharno();
//     java.lang.Object var75 = var70.getProp(10);
//     java.lang.String var76 = var0.getSingletonGetterClassName(var70);
// 
//   }

  public void test42() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test42"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test43() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test43"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.block();
    int var2 = var1.getSourceOffset();
    com.google.javascript.rhino.Node[] var3 = new com.google.javascript.rhino.Node[] { var1};
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.script(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node((-1), var3, 10, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test44() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test44"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
    int var15 = var12.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
    com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
    com.google.javascript.rhino.jstype.JSType var20 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.overwriteDeclaredType("goog.exportProperty", var20);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test45() {}
//   public void test45() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test45"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticGroup var1 = null;
//     com.google.javascript.jscomp.DiagnosticGroup[] var2 = new com.google.javascript.jscomp.DiagnosticGroup[] { var1};
//     com.google.javascript.jscomp.DiagnosticGroup var3 = new com.google.javascript.jscomp.DiagnosticGroup("", var2);
// 
//   }

  public void test46() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test46"); }


    com.google.javascript.jscomp.parsing.Config.LanguageMode var1 = null;
    java.util.Set var3 = null;
    com.google.javascript.jscomp.parsing.Config var4 = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(false, var1, false, var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test47() {}
//   public void test47() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test47"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
//     com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var4 = var3.isNE();
//     boolean var5 = var3.isWith();
//     java.util.Set var6 = null;
//     var3.setDirectives(var6);
//     var1.validateScript(var3);
// 
//   }

  public void test48() {}
//   public void test48() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test48"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.ErrorReporter var1 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
//     var2.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
//     com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
//     boolean var10 = var9.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var11 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
//     var12.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
//     com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
//     com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
//     boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
//     com.google.javascript.rhino.ErrorReporter var24 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
//     var25.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var28 = null;
//     com.google.javascript.rhino.jstype.JSType var30 = null;
//     com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
//     com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
//     com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
//     com.google.javascript.rhino.ErrorReporter var36 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
//     var37.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var40 = null;
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
//     com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
//     boolean var45 = var44.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var46 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
//     var47.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var50 = null;
//     com.google.javascript.rhino.jstype.JSType var52 = null;
//     com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
//     com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
//     com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
//     boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
//     var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
//     java.lang.String var60 = var0.getExportPropertyFunction();
//     com.google.javascript.rhino.Node var61 = null;
//     boolean var62 = var0.isPropertyTestFunction(var61);
// 
//   }

  public void test49() {}
//   public void test49() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test49"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     com.google.javascript.jscomp.SourceFile var4 = null;
//     var3.setSourceFile(var4);
// 
//   }

  public void test50() {}
//   public void test50() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test50"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var3, "hi!", true);
// 
//   }

  public void test51() {}
//   public void test51() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test51"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.block();
//     int var2 = var1.getSourceOffset();
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.getprop(var0, var1);
// 
//   }

  public void test52() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test52"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.SourceFile var1 = new com.google.javascript.jscomp.SourceFile("");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test53() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test53"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var1 = com.google.javascript.rhino.SimpleErrorReporter.getMessage0("");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test54() {}
//   public void test54() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test54"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var1 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var0);
//     com.google.javascript.rhino.Node var2 = null;
//     com.google.javascript.rhino.Node var3 = var1.newOptionalParameterFromNode(var2);
// 
//   }

  public void test55() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test55"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var2 = var1.cloneNode();
    boolean var3 = var1.isDelProp();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var6 = var5.cloneNode();
    boolean var7 = var5.isDelProp();
    com.google.javascript.rhino.Node var8 = var1.clonePropsFrom(var5);
    boolean var9 = var1.isHook();
    boolean var10 = var1.isContinue();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var13 = var12.cloneNode();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.continueNode(var13);
    com.google.javascript.rhino.Node[] var15 = new com.google.javascript.rhino.Node[] { var14};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.newNode(var1, var15);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test56() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test56"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    com.google.javascript.rhino.Node var12 = var10.getLastSibling();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.string("hi!");
    boolean var15 = var14.isNE();
    int var16 = var14.getSideEffectFlags();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.string("hi!");
    boolean var19 = var18.isNE();
    boolean var20 = var18.isWith();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.getprop(var14, var18);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.string("hi!");
    var18.addChildToBack(var23);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var25 = var23.getJsDocBuilderForNode();
    int var26 = var23.getCharno();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.ifNode(var10, var23);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));

  }

  public void test57() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test57"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    boolean var12 = var5.isVar();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.string("hi!");
    boolean var15 = var14.isNE();
    int var16 = var14.getSideEffectFlags();
    boolean var17 = var14.isReturn();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.regexp(var5, var14);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test58() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test58"); }


    java.util.logging.Level var0 = null;
    com.google.javascript.jscomp.Compiler.setLoggingLevel(var0);

  }

  public void test59() {}
//   public void test59() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test59"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
//     int var15 = var12.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
//     com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
//     com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
//     com.google.javascript.rhino.jstype.JSTypeNative var19 = null;
//     com.google.javascript.rhino.jstype.JSType var20 = var1.getNativeType(var19);
// 
//   }

  public void test60() {}
//   public void test60() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test60"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     java.lang.Iterable var3 = var1.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     boolean var13 = var12.isInterface();
//     boolean var15 = var1.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType)var12, "");
//     java.util.List var16 = null;
//     com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
// 
//   }

  public void test61() {}
//   public void test61() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test61"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticGroup var0 = null;
//     com.google.javascript.jscomp.DiagnosticGroup[] var1 = new com.google.javascript.jscomp.DiagnosticGroup[] { var0};
//     com.google.javascript.jscomp.DiagnosticGroup var2 = new com.google.javascript.jscomp.DiagnosticGroup(var1);
// 
//   }

  public void test62() {}
//   public void test62() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test62"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var4 = null;
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
//     com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
//     com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var11 = var8.getTypeOfThis();
//     com.google.javascript.rhino.jstype.JSType var12 = var11.unboxesTo();
//     com.google.javascript.rhino.jstype.JSType var14 = var11.getRestrictedTypeGivenToBooleanOutcome(false);
//     com.google.javascript.rhino.ErrorReporter var15 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
//     var16.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var19 = null;
//     com.google.javascript.rhino.jstype.JSType var21 = null;
//     com.google.javascript.rhino.jstype.JSType[] var22 = new com.google.javascript.rhino.jstype.JSType[] { var21};
//     com.google.javascript.rhino.jstype.FunctionType var23 = var16.createConstructorType(var19, false, var22);
//     com.google.javascript.rhino.jstype.JSType var25 = var23.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var26 = var23.toMaybeFunctionType();
//     boolean var27 = var23.isUnionType();
//     boolean var28 = com.google.javascript.rhino.jstype.JSType.isEquivalent(var14, (com.google.javascript.rhino.jstype.JSType)var23);
//     java.lang.String var29 = var23.toAnnotationString();
// 
//   }

  public void test63() {}
//   public void test63() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test63"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
//     com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.block();
//     var1.validateExpression(var2);
// 
//   }

  public void test64() {}
//   public void test64() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test64"); }
// 
// 
//     com.google.javascript.jscomp.SourceExcerptProvider var0 = null;
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var1 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter(var0, var1);
// 
//   }

  public void test65() {}
//   public void test65() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test65"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSTypeNative var2 = null;
//     com.google.javascript.rhino.jstype.JSTypeNative[] var3 = new com.google.javascript.rhino.jstype.JSTypeNative[] { var2};
//     com.google.javascript.rhino.jstype.JSType var4 = var1.createUnionType(var3);
// 
//   }

  public void test66() {}
//   public void test66() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test66"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.ErrorReporter var1 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
//     var2.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
//     com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
//     boolean var10 = var9.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var11 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
//     var12.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
//     com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
//     com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
//     boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
//     com.google.javascript.rhino.ErrorReporter var24 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
//     var25.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var28 = null;
//     com.google.javascript.rhino.jstype.JSType var30 = null;
//     com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
//     com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
//     com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
//     com.google.javascript.rhino.ErrorReporter var36 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
//     var37.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var40 = null;
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
//     com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
//     boolean var45 = var44.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var46 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
//     var47.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var50 = null;
//     com.google.javascript.rhino.jstype.JSType var52 = null;
//     com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
//     com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
//     com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
//     boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
//     var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
//     java.util.List var60 = null;
//     var9.setImplementedInterfaces(var60);
// 
//   }

  public void test67() {}
//   public void test67() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test67"); }
// 
// 
//     com.google.javascript.jscomp.WarningsGuard var0 = null;
//     com.google.javascript.jscomp.WarningsGuard[] var1 = new com.google.javascript.jscomp.WarningsGuard[] { var0};
//     com.google.javascript.jscomp.ComposeWarningsGuard var2 = new com.google.javascript.jscomp.ComposeWarningsGuard(var1);
// 
//   }

  public void test68() {}
//   public void test68() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test68"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var0);
// 
//   }

  public void test69() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test69"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    var5.removeProp(0);
    java.lang.String var11 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.breakNode(var5);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test70() {}
//   public void test70() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test70"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var1 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
//     java.lang.Iterable var5 = var3.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var6 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
//     var7.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType var12 = null;
//     com.google.javascript.rhino.jstype.JSType[] var13 = new com.google.javascript.rhino.jstype.JSType[] { var12};
//     com.google.javascript.rhino.jstype.FunctionType var14 = var7.createConstructorType(var10, false, var13);
//     boolean var15 = var14.isInterface();
//     boolean var17 = var3.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType)var14, "");
//     com.google.javascript.rhino.jstype.TemplateType var18 = var3.getObjectElementKey();
//     boolean var19 = var1.addVarArgs((com.google.javascript.rhino.jstype.JSType)var18);
// 
//   }

  public void test71() {}
//   public void test71() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test71"); }
// 
// 
//     java.util.List var0 = null;
//     com.google.javascript.jscomp.ComposeWarningsGuard var1 = new com.google.javascript.jscomp.ComposeWarningsGuard(var0);
// 
//   }

  public void test72() {}
//   public void test72() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test72"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var0 = null;
//     com.google.javascript.jscomp.JsAst var1 = new com.google.javascript.jscomp.JsAst(var0);
// 
//   }

  public void test73() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test73"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    com.google.javascript.rhino.Node var12 = var10.getLastSibling();
    boolean var13 = var12.isArrayLit();
    com.google.javascript.rhino.Node var14 = var12.getParent();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(var14);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test74() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test74"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    var2.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
    com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
    boolean var10 = var9.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    var12.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
    com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
    boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    var37.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
    boolean var45 = var44.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    var47.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
    com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
    boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
    var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
    java.lang.String var60 = var0.getExportPropertyFunction();
    java.lang.String var61 = var0.getGlobalObject();
    boolean var63 = var0.isConstant("");
    java.lang.String var64 = var0.getExportSymbolFunction();
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.script();
    com.google.javascript.rhino.InputId var67 = new com.google.javascript.rhino.InputId("goog.global");
    var65.setInputId(var67);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var69 = var0.isPropertyTestFunction(var65);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "goog.exportProperty"+ "'", var60.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "goog.global"+ "'", var61.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "goog.exportSymbol"+ "'", var64.equals("goog.exportSymbol"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test75() {}
//   public void test75() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test75"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var4 = null;
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
//     com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
//     com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var11 = var8.toMaybeFunctionType();
//     boolean var12 = var8.isUnionType();
//     com.google.javascript.rhino.ErrorReporter var13 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
//     java.lang.Iterable var16 = var14.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var17 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
//     var18.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var21 = null;
//     com.google.javascript.rhino.jstype.JSType var23 = null;
//     com.google.javascript.rhino.jstype.JSType[] var24 = new com.google.javascript.rhino.jstype.JSType[] { var23};
//     com.google.javascript.rhino.jstype.FunctionType var25 = var18.createConstructorType(var21, false, var24);
//     boolean var26 = var25.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var27 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
//     var28.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     com.google.javascript.rhino.jstype.JSType var33 = null;
//     com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
//     com.google.javascript.rhino.jstype.FunctionType var35 = var28.createConstructorType(var31, false, var34);
//     com.google.javascript.rhino.jstype.FunctionType var36 = var14.createConstructorType((com.google.javascript.rhino.jstype.JSType)var25, var34);
//     com.google.javascript.rhino.jstype.TemplateType var37 = var14.getObjectIndexKey();
//     boolean var38 = var8.isEquivalentTo((com.google.javascript.rhino.jstype.JSType)var37);
// 
//   }

  public void test76() {}
//   public void test76() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test76"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = null;
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var3 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var2);
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     boolean var13 = var3.addRequiredParams(var11);
//     com.google.javascript.rhino.jstype.JSType var14 = var1.createUnionType(var11);
// 
//   }

  public void test77() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test77"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var1 = com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.valueOf("goog.exportProperty");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test78() {}
//   public void test78() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test78"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     var3.removeRequire("hi!");
// 
//   }

  public void test79() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test79"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var2 = var1.cloneNode();
    boolean var3 = var1.isDelProp();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var6 = var5.cloneNode();
    boolean var7 = var5.isDelProp();
    com.google.javascript.rhino.Node var8 = var1.clonePropsFrom(var5);
    boolean var9 = var1.isAssign();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var12 = var11.cloneNode();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.and(var1, var12);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test80() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test80"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.trueNode();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    boolean var4 = var2.isWith();
    java.util.Set var5 = null;
    var2.setDirectives(var5);
    boolean var7 = var2.isUnscopedQualifiedName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.caseNode(var0, var2);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test81() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test81"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var1 = var0.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    java.lang.Iterable var5 = var3.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    var7.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType var12 = null;
    com.google.javascript.rhino.jstype.JSType[] var13 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.jstype.FunctionType var14 = var7.createConstructorType(var10, false, var13);
    boolean var15 = var14.isInterface();
    boolean var17 = var3.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType)var14, "");
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var20 = var19.cloneNode();
    boolean var21 = var19.isDelProp();
    boolean var22 = var19.isDefaultCase();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var23 = var0.getDirectedGraphEdges((java.lang.Object)var3, (java.lang.Object)var22);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test82() {}
//   public void test82() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test82"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     java.lang.Iterable var3 = var1.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     boolean var13 = var12.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var14 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
//     var15.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var18 = null;
//     com.google.javascript.rhino.jstype.JSType var20 = null;
//     com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
//     com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
//     com.google.javascript.rhino.jstype.FunctionType var23 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var12, var21);
//     com.google.javascript.rhino.jstype.TemplateType var24 = var1.getObjectIndexKey();
//     com.google.javascript.rhino.ErrorReporter var25 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
//     java.lang.Iterable var28 = var26.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var29 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
//     var30.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var33 = null;
//     com.google.javascript.rhino.jstype.JSType var35 = null;
//     com.google.javascript.rhino.jstype.JSType[] var36 = new com.google.javascript.rhino.jstype.JSType[] { var35};
//     com.google.javascript.rhino.jstype.FunctionType var37 = var30.createConstructorType(var33, false, var36);
//     boolean var38 = var37.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var39 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var39);
//     var40.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var43 = null;
//     com.google.javascript.rhino.jstype.JSType var45 = null;
//     com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
//     com.google.javascript.rhino.jstype.FunctionType var47 = var40.createConstructorType(var43, false, var46);
//     com.google.javascript.rhino.jstype.FunctionType var48 = var26.createConstructorType((com.google.javascript.rhino.jstype.JSType)var37, var46);
//     com.google.javascript.rhino.jstype.TemplateType var49 = var26.getObjectIndexKey();
//     com.google.javascript.rhino.jstype.JSType var50 = var1.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType)var49);
// 
//   }

  public void test83() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test83"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    java.util.Collection var1 = var0.getAssertionFunctions();
    boolean var3 = var0.isExported("goog.global");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test84() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test84"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var2 = var1.cloneNode();
    boolean var3 = var1.isDelProp();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var6 = var5.cloneNode();
    boolean var7 = var5.isDelProp();
    com.google.javascript.rhino.Node var8 = var1.clonePropsFrom(var5);
    boolean var9 = var1.isHook();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var10 = var1.getDouble();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test85() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test85"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    java.lang.Object var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var2 = var0.getOutEdges(var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test86() {}
//   public void test86() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test86"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var4 = null;
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
//     com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
//     com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
//     com.google.javascript.rhino.JSDocInfo var11 = var8.getJSDocInfo();
//     boolean var12 = var8.isNumber();
//     java.lang.String var13 = var8.toDebugHashCodeString();
// 
//   }

  public void test87() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test87"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.util.Set var9 = null;
    var1.setDirectives(var9);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.string("hi!");
    boolean var13 = var12.isNE();
    int var14 = var12.getSideEffectFlags();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.string("hi!");
    boolean var17 = var16.isNE();
    boolean var18 = var16.isWith();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.getprop(var12, var16);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.string("hi!");
    var16.addChildToBack(var21);
    com.google.javascript.rhino.Node var23 = var21.getLastSibling();
    boolean var24 = var23.isArrayLit();
    com.google.javascript.rhino.Node var25 = var23.getParent();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.caseNode(var1, var25);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test88() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test88"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var1 = var0.getGraphvizNodes();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var2 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var3 = var0.getDirectedSuccNodes(var2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test89() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test89"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    boolean var3 = var1.isWith();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setSideEffectFlags((-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test90() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test90"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var2 = var1.cloneNode();
    boolean var3 = var1.isDelProp();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var6 = var5.cloneNode();
    boolean var7 = var5.isDelProp();
    com.google.javascript.rhino.Node var8 = var1.clonePropsFrom(var5);
    com.google.javascript.rhino.JSDocInfo var9 = var5.getJSDocInfo();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.voidNode(var5);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test91() {}
//   public void test91() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test91"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     java.lang.Iterable var3 = var1.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     boolean var13 = var12.isInterface();
//     boolean var15 = var1.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType)var12, "");
//     com.google.javascript.rhino.jstype.TemplateType var16 = var1.getObjectElementKey();
//     com.google.javascript.rhino.jstype.JSTypeRegistry var17 = null;
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var18 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var17);
//     com.google.javascript.rhino.ErrorReporter var19 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
//     var20.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var23 = null;
//     com.google.javascript.rhino.jstype.JSType var25 = null;
//     com.google.javascript.rhino.jstype.JSType[] var26 = new com.google.javascript.rhino.jstype.JSType[] { var25};
//     com.google.javascript.rhino.jstype.FunctionType var27 = var20.createConstructorType(var23, false, var26);
//     boolean var28 = var18.addRequiredParams(var26);
//     com.google.javascript.rhino.jstype.JSType var29 = var1.createUnionType(var26);
// 
//   }

  public void test92() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test92"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
    com.google.javascript.rhino.jstype.TemplateType var3 = var1.getObjectElementKey();
    boolean var4 = var3.isNumberValueType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test93() {}
//   public void test93() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test93"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var4 = var3.isNE();
//     int var5 = var3.getSideEffectFlags();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var8 = var7.isNE();
//     boolean var9 = var7.isWith();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
//     java.util.Set var11 = null;
//     var3.setDirectives(var11);
//     com.google.javascript.jscomp.CheckLevel var13 = null;
//     com.google.javascript.jscomp.CheckLevel var15 = null;
//     com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var15, "");
//     java.lang.String[] var18 = null;
//     com.google.javascript.jscomp.JSError var19 = com.google.javascript.jscomp.JSError.make("hi!", var3, var13, var17, var18);
//     com.google.javascript.jscomp.CheckLevel var20 = var0.getErrorLevel(var19);
// 
//   }

  public void test94() {}
//   public void test94() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test94"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
//     java.lang.String var3 = var2.getSourceName();
//     com.google.javascript.rhino.Node var4 = var2.getScopeRoot();
// 
//   }

  public void test95() {}
//   public void test95() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test95"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var4 = var3.isNE();
//     int var5 = var3.getSideEffectFlags();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var8 = var7.isNE();
//     boolean var9 = var7.isWith();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
//     java.util.Set var11 = null;
//     var3.setDirectives(var11);
//     com.google.javascript.jscomp.CheckLevel var13 = null;
//     com.google.javascript.jscomp.CheckLevel var15 = null;
//     com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var15, "");
//     java.lang.String[] var18 = null;
//     com.google.javascript.jscomp.JSError var19 = com.google.javascript.jscomp.JSError.make("hi!", var3, var13, var17, var18);
//     com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var24 = var23.isNE();
//     int var25 = var23.getSideEffectFlags();
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var28 = var27.isNE();
//     boolean var29 = var27.isWith();
//     com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.getprop(var23, var27);
//     java.util.Set var31 = null;
//     var23.setDirectives(var31);
//     com.google.javascript.jscomp.CheckLevel var33 = null;
//     com.google.javascript.jscomp.CheckLevel var35 = null;
//     com.google.javascript.jscomp.DiagnosticType var37 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var35, "");
//     java.lang.String[] var38 = null;
//     com.google.javascript.jscomp.JSError var39 = com.google.javascript.jscomp.JSError.make("hi!", var23, var33, var37, var38);
//     com.google.javascript.jscomp.CheckLevel var44 = null;
//     com.google.javascript.jscomp.DiagnosticType var46 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var44, "");
//     java.lang.String[] var48 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var49 = com.google.javascript.jscomp.JSError.make("", 100, 0, var46, var48);
//     java.lang.String[] var51 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var52 = com.google.javascript.jscomp.JSError.make("hi!", var23, var46, var51);
//     com.google.javascript.jscomp.JSError var53 = com.google.javascript.jscomp.JSError.make(var17, var51);
//     com.google.javascript.jscomp.CheckLevel var54 = var0.getErrorLevel(var53);
// 
//   }

  public void test96() {}
//   public void test96() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test96"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var4 = null;
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
//     com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
//     com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var11 = var8.toMaybeFunctionType();
//     com.google.javascript.rhino.ErrorReporter var12 = null;
//     com.google.javascript.rhino.ErrorReporter var13 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
//     var14.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     com.google.javascript.rhino.jstype.JSType var19 = null;
//     com.google.javascript.rhino.jstype.JSType[] var20 = new com.google.javascript.rhino.jstype.JSType[] { var19};
//     com.google.javascript.rhino.jstype.FunctionType var21 = var14.createConstructorType(var17, false, var20);
//     com.google.javascript.rhino.jstype.JSType var23 = var21.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var24 = var21.toMaybeFunctionType();
//     com.google.javascript.rhino.ErrorReporter var25 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
//     var26.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var29 = null;
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
//     com.google.javascript.rhino.jstype.FunctionType var33 = var26.createConstructorType(var29, false, var32);
//     boolean var34 = var33.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var35 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var35);
//     var36.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var39 = null;
//     com.google.javascript.rhino.jstype.JSType var41 = null;
//     com.google.javascript.rhino.jstype.JSType[] var42 = new com.google.javascript.rhino.jstype.JSType[] { var41};
//     com.google.javascript.rhino.jstype.FunctionType var43 = var36.createConstructorType(var39, false, var42);
//     com.google.javascript.rhino.jstype.JSType var45 = var43.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var46 = var43.getTypeOfThis();
//     boolean var47 = var33.canCastTo((com.google.javascript.rhino.jstype.JSType)var43);
//     boolean var48 = var21.hasEqualCallType(var43);
//     com.google.javascript.rhino.jstype.JSType var49 = var11.forceResolve(var12, (com.google.javascript.rhino.jstype.StaticScope)var43);
// 
//   }

  public void test97() {}
//   public void test97() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test97"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
//     int var15 = var12.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
//     com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
//     com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
//     boolean var19 = var1.shouldTolerateUndefinedValues();
//     com.google.javascript.rhino.jstype.JSTypeNative var20 = null;
//     com.google.javascript.rhino.jstype.FunctionType var21 = var1.getNativeFunctionType(var20);
// 
//   }

  public void test98() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test98"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    boolean var4 = var2.isWith();
    com.google.javascript.rhino.Node var5 = var2.getLastChild();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var6 = com.google.javascript.rhino.SimpleErrorReporter.getMessage1("goog.exportProperty", (java.lang.Object)var2);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test99() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test99"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.trueNode();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    java.util.Set var10 = null;
    var2.setDirectives(var10);
    int var12 = var2.getChildCount();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.trueNode();
    var13.setLineno(10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addChildBefore(var2, var13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test100() {}
//   public void test100() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test100"); }
// 
// 
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
//     com.google.javascript.rhino.Node.SideEffectFlags var5 = null;
//     var4.setSideEffectFlags(var5);
// 
//   }

  public void test101() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test101"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    com.google.javascript.rhino.Node var12 = var10.getLastSibling();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var14 = var12.getExistingIntProp((-1));
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test102() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test102"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
    var4.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType var9 = null;
    com.google.javascript.rhino.jstype.JSType[] var10 = new com.google.javascript.rhino.jstype.JSType[] { var9};
    com.google.javascript.rhino.jstype.FunctionType var11 = var4.createConstructorType(var7, false, var10);
    boolean var12 = var11.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    var14.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.jstype.JSType[] var20 = new com.google.javascript.rhino.jstype.JSType[] { var19};
    com.google.javascript.rhino.jstype.FunctionType var21 = var14.createConstructorType(var17, false, var20);
    com.google.javascript.rhino.jstype.JSType var23 = var21.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var24 = var21.getTypeOfThis();
    boolean var25 = var11.canCastTo((com.google.javascript.rhino.jstype.JSType)var21);
    boolean var26 = var21.isDateType();
    com.google.javascript.rhino.jstype.JSType[] var27 = new com.google.javascript.rhino.jstype.JSType[] { var21};
    com.google.javascript.rhino.Node var28 = var1.createParametersWithVarArgs(var27);
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.string("hi!");
    boolean var33 = var32.isNE();
    int var34 = var32.getSideEffectFlags();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.string("hi!");
    boolean var37 = var36.isNE();
    boolean var38 = var36.isWith();
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.getprop(var32, var36);
    java.util.Set var40 = null;
    var32.setDirectives(var40);
    com.google.javascript.jscomp.CheckLevel var42 = null;
    com.google.javascript.jscomp.CheckLevel var44 = null;
    com.google.javascript.jscomp.DiagnosticType var46 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var44, "");
    java.lang.String[] var47 = null;
    com.google.javascript.jscomp.JSError var48 = com.google.javascript.jscomp.JSError.make("hi!", var32, var42, var46, var47);
    var32.addSuppression("");
    com.google.common.collect.ImmutableList var51 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.FunctionType var52 = var1.createInterfaceType("hi!", var32, var51);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test103() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test103"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    var5.removeProp(0);
    boolean var11 = var5.isVoid();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    boolean var15 = var13.isWith();
    java.util.Set var16 = null;
    var13.setDirectives(var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.assign(var5, var13);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test104() {}
//   public void test104() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test104"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
//     int var15 = var12.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
//     com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
//     com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
//     boolean var19 = var1.shouldTolerateUndefinedValues();
//     com.google.javascript.rhino.ErrorReporter var21 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
//     var22.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var25 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
//     var26.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var29 = null;
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
//     com.google.javascript.rhino.jstype.FunctionType var33 = var26.createConstructorType(var29, false, var32);
//     com.google.javascript.rhino.jstype.JSType var35 = var33.findPropertyType("hi!");
//     int var36 = var33.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var33};
//     com.google.javascript.rhino.Node var38 = var22.createParametersWithVarArgs(var37);
//     com.google.javascript.rhino.jstype.TemplateType var39 = var22.getObjectIndexKey();
//     var22.clearTemplateTypeNames();
//     com.google.javascript.rhino.jstype.TemplateType var41 = var22.getObjectElementKey();
//     var1.registerPropertyOnType("", (com.google.javascript.rhino.jstype.JSType)var41);
// 
//   }

  public void test105() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test105"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
    boolean var11 = var10.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    var13.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType[] var19 = new com.google.javascript.rhino.jstype.JSType[] { var18};
    com.google.javascript.rhino.jstype.FunctionType var20 = var13.createConstructorType(var16, false, var19);
    com.google.javascript.rhino.jstype.JSType var22 = var20.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var23 = var20.getTypeOfThis();
    boolean var24 = var10.canCastTo((com.google.javascript.rhino.jstype.JSType)var20);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    var26.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var29 = null;
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.jstype.FunctionType var33 = var26.createConstructorType(var29, false, var32);
    boolean var34 = var33.isInterface();
    com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var33};
    com.google.javascript.rhino.jstype.FunctionType var36 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var10, var35);
    var36.setDict();
    com.google.javascript.jscomp.ClosureCodingConvention var38 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var39 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var39);
    var40.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.jstype.FunctionType var47 = var40.createConstructorType(var43, false, var46);
    boolean var48 = var47.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var49 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var49);
    var50.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var53 = null;
    com.google.javascript.rhino.jstype.JSType var55 = null;
    com.google.javascript.rhino.jstype.JSType[] var56 = new com.google.javascript.rhino.jstype.JSType[] { var55};
    com.google.javascript.rhino.jstype.FunctionType var57 = var50.createConstructorType(var53, false, var56);
    com.google.javascript.rhino.jstype.JSType var59 = var57.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var60 = var57.getTypeOfThis();
    boolean var61 = var47.canCastTo((com.google.javascript.rhino.jstype.JSType)var57);
    com.google.javascript.rhino.ErrorReporter var62 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var62);
    var63.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var66 = null;
    com.google.javascript.rhino.jstype.JSType var68 = null;
    com.google.javascript.rhino.jstype.JSType[] var69 = new com.google.javascript.rhino.jstype.JSType[] { var68};
    com.google.javascript.rhino.jstype.FunctionType var70 = var63.createConstructorType(var66, false, var69);
    com.google.javascript.rhino.jstype.JSType var72 = var70.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var73 = var70.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var74 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var75 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var74);
    var75.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var78 = null;
    com.google.javascript.rhino.jstype.JSType var80 = null;
    com.google.javascript.rhino.jstype.JSType[] var81 = new com.google.javascript.rhino.jstype.JSType[] { var80};
    com.google.javascript.rhino.jstype.FunctionType var82 = var75.createConstructorType(var78, false, var81);
    boolean var83 = var82.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var84 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var85 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var84);
    var85.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var88 = null;
    com.google.javascript.rhino.jstype.JSType var90 = null;
    com.google.javascript.rhino.jstype.JSType[] var91 = new com.google.javascript.rhino.jstype.JSType[] { var90};
    com.google.javascript.rhino.jstype.FunctionType var92 = var85.createConstructorType(var88, false, var91);
    com.google.javascript.rhino.jstype.JSType var94 = var92.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var95 = var92.getTypeOfThis();
    boolean var96 = var82.canCastTo((com.google.javascript.rhino.jstype.JSType)var92);
    var38.applySingletonGetter(var47, var70, (com.google.javascript.rhino.jstype.ObjectType)var92);
    com.google.javascript.rhino.jstype.TemplateType var98 = var92.toMaybeTemplateType();
    var36.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var98);

  }

  public void test106() {}
//   public void test106() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test106"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var1);
//     java.util.Map var3 = var0.getInputsById();
// 
//   }

  public void test107() {}
//   public void test107() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test107"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.block();
//     int var3 = var2.getSourceOffset();
//     com.google.javascript.rhino.Node[] var4 = new com.google.javascript.rhino.Node[] { var2};
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.script(var4);
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var0, var1, var4);
// 
//   }

  public void test108() {}
//   public void test108() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test108"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var1 = var0.getGraphvizNodes();
//     com.google.javascript.rhino.ErrorReporter var2 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
//     var3.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
//     com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
//     com.google.javascript.rhino.jstype.JSType var12 = var10.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var13 = var10.getTypeOfThis();
//     com.google.javascript.jscomp.graph.GraphNode var14 = var0.getNode((java.lang.Object)var13);
//     var0.popNodeAnnotations();
// 
//   }

  public void test109() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test109"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var12 = var10.getJsDocBuilderForNode();
    int var13 = var10.getCharno();
    java.lang.Object var15 = var10.getProp(10);
    com.google.javascript.rhino.Node var16 = null;
    boolean var17 = var10.hasChild(var16);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var20 = var19.cloneNode();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.continueNode(var20);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.var(var10, var20);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test110() {}
//   public void test110() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test110"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var1 = new com.google.javascript.jscomp.SourceFile("goog.exportProperty");
//     int var3 = var1.getColumnOfOffset(100);
// 
//   }

  public void test111() {}
//   public void test111() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test111"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.CodingConvention var1 = var0.getCodingConvention();
// 
//   }

  public void test112() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test112"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    boolean var12 = var5.isVar();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.string("hi!");
    boolean var15 = var14.isNE();
    int var16 = var14.getSideEffectFlags();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.string("hi!");
    boolean var19 = var18.isNE();
    boolean var20 = var18.isWith();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.getprop(var14, var18);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.string("hi!");
    var18.addChildToBack(var23);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var25 = var23.getJsDocBuilderForNode();
    int var26 = var23.getCharno();
    boolean var27 = var5.isEquivalentTo(var23);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var28 = com.google.javascript.jscomp.NodeUtil.isLValue(var23);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test113() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test113"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var2 = var1.cloneNode();
    boolean var3 = var1.isDelProp();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var6 = var5.cloneNode();
    boolean var7 = var5.isDelProp();
    com.google.javascript.rhino.Node var8 = var1.clonePropsFrom(var5);
    com.google.javascript.rhino.JSDocInfo var9 = var5.getJSDocInfo();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.breakNode(var5);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.ErrorReporter var13 = var12.getErrorReporter();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    var15.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
    com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
    boolean var23 = var22.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var35 = var32.getTypeOfThis();
    boolean var36 = var22.canCastTo((com.google.javascript.rhino.jstype.JSType)var32);
    boolean var37 = var32.isDateType();
    com.google.javascript.rhino.jstype.JSType[] var38 = new com.google.javascript.rhino.jstype.JSType[] { var32};
    com.google.javascript.rhino.Node var39 = var12.createParametersWithVarArgs(var38);
    com.google.javascript.rhino.Node[] var40 = new com.google.javascript.rhino.Node[] { var39};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.switchNode(var10, var40);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test114() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test114"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
    int var15 = var12.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.breakNode(var17);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test115() {}
//   public void test115() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test115"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     com.google.javascript.jscomp.JSSourceFile var2 = null;
//     com.google.javascript.jscomp.JSModule var3 = null;
//     com.google.javascript.jscomp.JSModule[] var4 = new com.google.javascript.jscomp.JSModule[] { var3};
//     com.google.javascript.jscomp.CompilerOptions var5 = null;
//     com.google.javascript.jscomp.Result var6 = var0.compile(var2, var4, var5);
// 
//   }

  public void test116() {}
//   public void test116() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test116"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     int var6 = var3.getLineOffset(1);
// 
//   }

  public void test117() {}
//   public void test117() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test117"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     boolean var1 = var0.acceptEcmaScript5();
// 
//   }

  public void test118() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test118"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var12 = var10.getJsDocBuilderForNode();
    int var13 = var10.getCharno();
    java.lang.Object var15 = var10.getProp(10);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    int var19 = var17.getSideEffectFlags();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.string("hi!");
    boolean var22 = var21.isNE();
    boolean var23 = var21.isWith();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.getprop(var17, var21);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.string("hi!");
    var21.addChildToBack(var26);
    com.google.javascript.rhino.Node var28 = var10.srcrefTree(var26);
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var31 = var30.cloneNode();
    boolean var32 = var30.isDelProp();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var35 = var34.cloneNode();
    boolean var36 = var34.isDelProp();
    com.google.javascript.rhino.Node var37 = var30.clonePropsFrom(var34);
    com.google.javascript.rhino.JSDocInfo var38 = var34.getJSDocInfo();
    int var39 = var34.getLineno();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.var(var28, var34);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));

  }

  public void test119() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test119"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    java.lang.Iterable var3 = var1.getTypesWithProperty("hi!");
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    var6.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var9 = null;
    com.google.javascript.rhino.jstype.JSType var11 = null;
    com.google.javascript.rhino.jstype.JSType[] var12 = new com.google.javascript.rhino.jstype.JSType[] { var11};
    com.google.javascript.rhino.jstype.FunctionType var13 = var6.createConstructorType(var9, false, var12);
    boolean var14 = var13.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
    var16.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.jstype.JSType var21 = null;
    com.google.javascript.rhino.jstype.JSType[] var22 = new com.google.javascript.rhino.jstype.JSType[] { var21};
    com.google.javascript.rhino.jstype.FunctionType var23 = var16.createConstructorType(var19, false, var22);
    com.google.javascript.rhino.jstype.JSType var25 = var23.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var26 = var23.getTypeOfThis();
    boolean var27 = var13.canCastTo((com.google.javascript.rhino.jstype.JSType)var23);
    com.google.javascript.rhino.jstype.JSType var28 = var1.createNullableType((com.google.javascript.rhino.jstype.JSType)var13);
    com.google.javascript.jscomp.AstValidator.ViolationHandler var30 = null;
    com.google.javascript.jscomp.AstValidator var31 = new com.google.javascript.jscomp.AstValidator(var30);
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.string("hi!");
    boolean var34 = var33.isNE();
    int var35 = var33.getSideEffectFlags();
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.string("hi!");
    boolean var38 = var37.isNE();
    boolean var39 = var37.isWith();
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.getprop(var33, var37);
    var31.validateExpression(var33);
    com.google.common.collect.ImmutableList var42 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.FunctionType var43 = var1.createInterfaceType("hi!", var33, var42);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test120() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test120"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var1 = var0.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
    var4.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType var9 = null;
    com.google.javascript.rhino.jstype.JSType[] var10 = new com.google.javascript.rhino.jstype.JSType[] { var9};
    com.google.javascript.rhino.jstype.FunctionType var11 = var4.createConstructorType(var7, false, var10);
    com.google.javascript.rhino.jstype.JSType var13 = var11.findPropertyType("hi!");
    int var14 = var11.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var16 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var11, "");
    java.util.List var17 = var11.getSubTypes();
    java.lang.Iterable var18 = var11.getExtendedInterfaces();
    int var19 = var11.getMinArguments();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var20 = var0.getEdges((java.lang.Object)"hi!: ", (java.lang.Object)var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);

  }

  public void test121() {}
//   public void test121() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test121"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     var0.optimize();
// 
//   }

  public void test122() {}
//   public void test122() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test122"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
//     com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var4 = var3.isNE();
//     int var5 = var3.getSideEffectFlags();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var8 = var7.isNE();
//     boolean var9 = var7.isWith();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
//     var1.validateExpression(var3);
//     com.google.javascript.rhino.Node var12 = null;
//     var1.validateScript(var12);
// 
//   }

  public void test123() {}
//   public void test123() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test123"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
//     int var15 = var12.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
//     com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
//     com.google.javascript.rhino.jstype.FunctionType var18 = null;
//     com.google.javascript.rhino.ErrorReporter var19 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
//     var20.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var23 = null;
//     com.google.javascript.rhino.jstype.JSType var25 = null;
//     com.google.javascript.rhino.jstype.JSType[] var26 = new com.google.javascript.rhino.jstype.JSType[] { var25};
//     com.google.javascript.rhino.jstype.FunctionType var27 = var20.createConstructorType(var23, false, var26);
//     com.google.javascript.rhino.jstype.JSType var29 = var27.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var30 = var27.getTypeOfThis();
//     com.google.javascript.rhino.jstype.FunctionType var31 = var1.createFunctionTypeWithNewThisType(var18, (com.google.javascript.rhino.jstype.ObjectType)var27);
// 
//   }

  public void test124() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test124"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    var5.removeProp(0);
    java.lang.String var11 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.setSideEffectFlags(0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test125() {}
//   public void test125() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test125"); }
// 
// 
//     java.lang.String var0 = com.google.javascript.jscomp.Compiler.getReleaseVersion();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var0 + "' != '" + "Unversioned directory"+ "'", var0.equals("Unversioned directory"));
// 
//   }

  public void test126() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test126"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setDouble(0.0d);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test127() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test127"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var1 = var0.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
    com.google.javascript.rhino.jstype.JSType var12 = var10.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var13 = var10.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var14 = var0.getNode((java.lang.Object)var13);
    java.lang.Object var15 = null;
    java.lang.Object var16 = null;
    java.lang.Object var17 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.connectIfNotFound(var15, var16, var17);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test128() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test128"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var1 = var0.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
    com.google.javascript.rhino.jstype.JSType var12 = var10.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var13 = var10.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var14 = var0.getNode((java.lang.Object)var13);
    java.util.List var15 = var0.getEdges();
    java.lang.Object var16 = null;
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.string("hi!");
    boolean var19 = var18.isNE();
    int var20 = var18.getSideEffectFlags();
    boolean var21 = var18.isReturn();
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    var23.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType[] var29 = new com.google.javascript.rhino.jstype.JSType[] { var28};
    com.google.javascript.rhino.jstype.FunctionType var30 = var23.createConstructorType(var26, false, var29);
    boolean var31 = var30.isInterface();
    boolean var32 = var30.isUnionType();
    boolean var33 = var30.isInterface();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var34 = var0.isConnectedInDirection(var16, (java.lang.Object)var21, (java.lang.Object)var30);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test129() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test129"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.block();
    com.google.javascript.rhino.Node[] var3 = new com.google.javascript.rhino.Node[] { var2};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var0, var1, var3);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test130() {}
//   public void test130() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test130"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var3 = var2.getGraphvizEdges();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var5 = var4.getGraphvizNodes();
//     com.google.javascript.jscomp.CompilerOptions var6 = null;
//     com.google.javascript.jscomp.Result var7 = var0.<com.google.javascript.jscomp.SourceFile,com.google.javascript.jscomp.SourceFile>compile(var3, var5, var6);
// 
//   }

  public void test131() {}
//   public void test131() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test131"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var1 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var2 = var1.getGraphvizNodes();
//     com.google.javascript.rhino.ErrorReporter var3 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
//     var4.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.jstype.JSType var9 = null;
//     com.google.javascript.rhino.jstype.JSType[] var10 = new com.google.javascript.rhino.jstype.JSType[] { var9};
//     com.google.javascript.rhino.jstype.FunctionType var11 = var4.createConstructorType(var7, false, var10);
//     com.google.javascript.rhino.jstype.JSType var13 = var11.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var14 = var11.getTypeOfThis();
//     com.google.javascript.jscomp.graph.GraphNode var15 = var1.getNode((java.lang.Object)var14);
//     java.util.List var16 = var1.getEdges();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var18 = var17.getGraphvizEdges();
//     com.google.javascript.jscomp.CompilerOptions var19 = null;
//     com.google.javascript.jscomp.Result var20 = var0.<com.google.javascript.jscomp.SourceFile>compileModules(var16, var18, var19);
// 
//   }

  public void test132() {}
//   public void test132() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test132"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var4 = null;
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
//     com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
//     boolean var9 = var8.isInterface();
//     boolean var10 = var8.isUnionType();
//     com.google.javascript.rhino.ErrorReporter var11 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
//     com.google.javascript.rhino.ErrorReporter var13 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
//     com.google.javascript.rhino.ErrorReporter var15 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
//     var16.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var19 = null;
//     com.google.javascript.rhino.jstype.JSType var21 = null;
//     com.google.javascript.rhino.jstype.JSType[] var22 = new com.google.javascript.rhino.jstype.JSType[] { var21};
//     com.google.javascript.rhino.jstype.FunctionType var23 = var16.createConstructorType(var19, false, var22);
//     boolean var24 = var23.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var25 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
//     var26.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var29 = null;
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
//     com.google.javascript.rhino.jstype.FunctionType var33 = var26.createConstructorType(var29, false, var32);
//     com.google.javascript.rhino.jstype.JSType var35 = var33.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var36 = var33.getTypeOfThis();
//     boolean var37 = var23.canCastTo((com.google.javascript.rhino.jstype.JSType)var33);
//     com.google.javascript.rhino.ErrorReporter var38 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
//     var39.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     com.google.javascript.rhino.jstype.JSType var44 = null;
//     com.google.javascript.rhino.jstype.JSType[] var45 = new com.google.javascript.rhino.jstype.JSType[] { var44};
//     com.google.javascript.rhino.jstype.FunctionType var46 = var39.createConstructorType(var42, false, var45);
//     boolean var47 = var46.isInterface();
//     com.google.javascript.rhino.jstype.JSType[] var48 = new com.google.javascript.rhino.jstype.JSType[] { var46};
//     com.google.javascript.rhino.jstype.FunctionType var49 = var14.createConstructorType((com.google.javascript.rhino.jstype.JSType)var23, var48);
//     com.google.javascript.rhino.Node var50 = var12.createOptionalParameters(var48);
//     com.google.javascript.rhino.ErrorReporter var52 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var52);
//     java.lang.Iterable var55 = var53.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var56 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var56);
//     var57.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var60 = null;
//     com.google.javascript.rhino.jstype.JSType var62 = null;
//     com.google.javascript.rhino.jstype.JSType[] var63 = new com.google.javascript.rhino.jstype.JSType[] { var62};
//     com.google.javascript.rhino.jstype.FunctionType var64 = var57.createConstructorType(var60, false, var63);
//     boolean var65 = var64.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var66 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var66);
//     var67.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var70 = null;
//     com.google.javascript.rhino.jstype.JSType var72 = null;
//     com.google.javascript.rhino.jstype.JSType[] var73 = new com.google.javascript.rhino.jstype.JSType[] { var72};
//     com.google.javascript.rhino.jstype.FunctionType var74 = var67.createConstructorType(var70, false, var73);
//     com.google.javascript.rhino.jstype.FunctionType var75 = var53.createConstructorType((com.google.javascript.rhino.jstype.JSType)var64, var73);
//     com.google.javascript.rhino.jstype.TemplateType var76 = var53.getObjectIndexKey();
//     var12.unregisterPropertyOnType("hi!: ", (com.google.javascript.rhino.jstype.JSType)var76);
//     boolean var78 = var8.differsFrom((com.google.javascript.rhino.jstype.JSType)var76);
// 
//   }

  public void test133() {}
//   public void test133() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test133"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     var0.check();
// 
//   }

  public void test134() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test134"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var11 = var10.cloneNode();
    boolean var12 = var10.isDelProp();
    int var13 = var10.getSideEffectFlags();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.comma(var1, var10);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);

  }

  public void test135() {}
//   public void test135() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test135"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var1);
//     com.google.javascript.jscomp.JSError[] var3 = var0.getErrors();
// 
//   }

  public void test136() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test136"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    java.util.Set var10 = null;
    var2.setDirectives(var10);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.string("hi!");
    boolean var15 = var14.isNE();
    int var16 = var14.getSideEffectFlags();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.string("hi!");
    boolean var19 = var18.isNE();
    boolean var20 = var18.isWith();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.getprop(var14, var18);
    java.util.Set var22 = null;
    var14.setDirectives(var22);
    com.google.javascript.jscomp.CheckLevel var24 = null;
    com.google.javascript.jscomp.CheckLevel var26 = null;
    com.google.javascript.jscomp.DiagnosticType var28 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var26, "");
    java.lang.String[] var29 = null;
    com.google.javascript.jscomp.JSError var30 = com.google.javascript.jscomp.JSError.make("hi!", var14, var24, var28, var29);
    com.google.javascript.rhino.Node var31 = var2.useSourceInfoIfMissingFrom(var14);
    var14.setType(0);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.string("hi!");
    boolean var36 = var35.isNE();
    int var37 = var35.getSideEffectFlags();
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.string("hi!");
    boolean var40 = var39.isNE();
    boolean var41 = var39.isWith();
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.getprop(var35, var39);
    java.util.Set var43 = null;
    var35.setDirectives(var43);
    int var45 = var35.getChildCount();
    java.lang.Iterable var46 = var35.siblings();
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.string("hi!");
    boolean var49 = var48.isNE();
    int var50 = var48.getSideEffectFlags();
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.string("hi!");
    boolean var53 = var52.isNE();
    boolean var54 = var52.isWith();
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.getprop(var48, var52);
    java.util.Set var56 = null;
    var48.setDirectives(var56);
    com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.string("hi!");
    boolean var61 = var60.isNE();
    int var62 = var60.getSideEffectFlags();
    com.google.javascript.rhino.Node var64 = com.google.javascript.rhino.IR.string("hi!");
    boolean var65 = var64.isNE();
    boolean var66 = var64.isWith();
    com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.getprop(var60, var64);
    java.util.Set var68 = null;
    var60.setDirectives(var68);
    com.google.javascript.jscomp.CheckLevel var70 = null;
    com.google.javascript.jscomp.CheckLevel var72 = null;
    com.google.javascript.jscomp.DiagnosticType var74 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var72, "");
    java.lang.String[] var75 = null;
    com.google.javascript.jscomp.JSError var76 = com.google.javascript.jscomp.JSError.make("hi!", var60, var70, var74, var75);
    com.google.javascript.rhino.Node var77 = var48.useSourceInfoIfMissingFrom(var60);
    int var78 = var48.getSideEffectFlags();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var81 = new com.google.javascript.rhino.Node(1, var14, var35, var48, 0, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);

  }

  public void test137() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test137"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.PropertyRenamingPolicy var1 = com.google.javascript.jscomp.PropertyRenamingPolicy.valueOf("Unversioned directory");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test138() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test138"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    java.util.Set var10 = null;
    var2.setDirectives(var10);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.string("hi!");
    boolean var15 = var14.isNE();
    int var16 = var14.getSideEffectFlags();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.string("hi!");
    boolean var19 = var18.isNE();
    boolean var20 = var18.isWith();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.getprop(var14, var18);
    java.util.Set var22 = null;
    var14.setDirectives(var22);
    com.google.javascript.jscomp.CheckLevel var24 = null;
    com.google.javascript.jscomp.CheckLevel var26 = null;
    com.google.javascript.jscomp.DiagnosticType var28 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var26, "");
    java.lang.String[] var29 = null;
    com.google.javascript.jscomp.JSError var30 = com.google.javascript.jscomp.JSError.make("hi!", var14, var24, var28, var29);
    com.google.javascript.rhino.Node var31 = var2.useSourceInfoIfMissingFrom(var14);
    com.google.javascript.rhino.Node var33 = var14.getAncestor(0);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.string("hi!");
    boolean var36 = var35.isNE();
    int var37 = var35.getSideEffectFlags();
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.string("hi!");
    boolean var40 = var39.isNE();
    boolean var41 = var39.isWith();
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.getprop(var35, var39);
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.string("hi!");
    var39.addChildToBack(var44);
    boolean var46 = var39.isVar();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var47 = new com.google.javascript.rhino.Node(100, var14, var39);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test139() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test139"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.Node.newNumber((-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test140() {}
//   public void test140() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test140"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     var1.generateReport();
//     com.google.javascript.jscomp.CheckLevel var3 = null;
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var7 = var6.isNE();
//     int var8 = var6.getSideEffectFlags();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var11 = var10.isNE();
//     boolean var12 = var10.isWith();
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.getprop(var6, var10);
//     java.util.Set var14 = null;
//     var6.setDirectives(var14);
//     com.google.javascript.jscomp.CheckLevel var16 = null;
//     com.google.javascript.jscomp.CheckLevel var18 = null;
//     com.google.javascript.jscomp.DiagnosticType var20 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var18, "");
//     java.lang.String[] var21 = null;
//     com.google.javascript.jscomp.JSError var22 = com.google.javascript.jscomp.JSError.make("hi!", var6, var16, var20, var21);
//     int var23 = var22.getNodeSourceOffset();
//     var1.println(var3, var22);
// 
//   }

  public void test141() {}
//   public void test141() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test141"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     int var2 = var1.getErrorCount();
//     com.google.javascript.jscomp.CheckLevel var3 = null;
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var7 = var6.isNE();
//     int var8 = var6.getSideEffectFlags();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var11 = var10.isNE();
//     boolean var12 = var10.isWith();
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.getprop(var6, var10);
//     java.util.Set var14 = null;
//     var6.setDirectives(var14);
//     com.google.javascript.jscomp.CheckLevel var16 = null;
//     com.google.javascript.jscomp.CheckLevel var18 = null;
//     com.google.javascript.jscomp.DiagnosticType var20 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var18, "");
//     java.lang.String[] var21 = null;
//     com.google.javascript.jscomp.JSError var22 = com.google.javascript.jscomp.JSError.make("hi!", var6, var16, var20, var21);
//     com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var27 = var26.isNE();
//     int var28 = var26.getSideEffectFlags();
//     com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var31 = var30.isNE();
//     boolean var32 = var30.isWith();
//     com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.getprop(var26, var30);
//     java.util.Set var34 = null;
//     var26.setDirectives(var34);
//     com.google.javascript.jscomp.CheckLevel var36 = null;
//     com.google.javascript.jscomp.CheckLevel var38 = null;
//     com.google.javascript.jscomp.DiagnosticType var40 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var38, "");
//     java.lang.String[] var41 = null;
//     com.google.javascript.jscomp.JSError var42 = com.google.javascript.jscomp.JSError.make("hi!", var26, var36, var40, var41);
//     com.google.javascript.jscomp.CheckLevel var47 = null;
//     com.google.javascript.jscomp.DiagnosticType var49 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var47, "");
//     java.lang.String[] var51 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var52 = com.google.javascript.jscomp.JSError.make("", 100, 0, var49, var51);
//     java.lang.String[] var54 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var55 = com.google.javascript.jscomp.JSError.make("hi!", var26, var49, var54);
//     com.google.javascript.jscomp.JSError var56 = com.google.javascript.jscomp.JSError.make(var20, var54);
//     var1.report(var3, var56);
//     var1.generateReport();
// 
//   }

  public void test142() {}
//   public void test142() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test142"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     com.google.javascript.rhino.InputId var5 = var3.getInputId();
//     java.lang.String var6 = var3.getCode();
// 
//   }

  public void test143() {}
//   public void test143() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test143"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var4 = null;
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
//     com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
//     var1.clearNamedTypes();
//     com.google.javascript.rhino.ErrorReporter var10 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
//     var11.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var14 = null;
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     com.google.javascript.rhino.jstype.JSType[] var17 = new com.google.javascript.rhino.jstype.JSType[] { var16};
//     com.google.javascript.rhino.jstype.FunctionType var18 = var11.createConstructorType(var14, false, var17);
//     boolean var19 = var18.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var20 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
//     var21.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var24 = null;
//     com.google.javascript.rhino.jstype.JSType var26 = null;
//     com.google.javascript.rhino.jstype.JSType[] var27 = new com.google.javascript.rhino.jstype.JSType[] { var26};
//     com.google.javascript.rhino.jstype.FunctionType var28 = var21.createConstructorType(var24, false, var27);
//     com.google.javascript.rhino.jstype.JSType var30 = var28.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var31 = var28.getTypeOfThis();
//     boolean var32 = var18.canCastTo((com.google.javascript.rhino.jstype.JSType)var28);
//     boolean var33 = var28.isUnionType();
//     com.google.javascript.rhino.ErrorReporter var34 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
//     var35.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var38 = null;
//     com.google.javascript.rhino.jstype.JSType var40 = null;
//     com.google.javascript.rhino.jstype.JSType[] var41 = new com.google.javascript.rhino.jstype.JSType[] { var40};
//     com.google.javascript.rhino.jstype.FunctionType var42 = var35.createConstructorType(var38, false, var41);
//     com.google.javascript.rhino.jstype.JSType var44 = var42.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var45 = var42.getTypeOfThis();
//     boolean var46 = var45.isBooleanObjectType();
//     java.util.List var47 = null;
//     com.google.javascript.rhino.jstype.JSType var48 = var1.createFunctionType((com.google.javascript.rhino.jstype.ObjectType)var28, var45, var47);
// 
//   }

  public void test144() {}
//   public void test144() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test144"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var4 = null;
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
//     com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
//     com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var11 = var8.toMaybeFunctionType();
//     boolean var12 = var8.isUnionType();
//     com.google.javascript.rhino.JSDocInfo var13 = var8.getJSDocInfo();
//     java.lang.String var14 = var8.toAnnotationString();
// 
//   }

  public void test145() {}
//   public void test145() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test145"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var4 = null;
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
//     com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
//     var1.clearNamedTypes();
//     com.google.javascript.rhino.jstype.TemplateType var10 = var1.getObjectElementKey();
//     com.google.javascript.rhino.jstype.ObjectType var11 = null;
//     com.google.javascript.rhino.ErrorReporter var12 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
//     var13.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     com.google.javascript.rhino.jstype.JSType var18 = null;
//     com.google.javascript.rhino.jstype.JSType[] var19 = new com.google.javascript.rhino.jstype.JSType[] { var18};
//     com.google.javascript.rhino.jstype.FunctionType var20 = var13.createConstructorType(var16, false, var19);
//     boolean var21 = var20.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var22 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
//     var23.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var26 = null;
//     com.google.javascript.rhino.jstype.JSType var28 = null;
//     com.google.javascript.rhino.jstype.JSType[] var29 = new com.google.javascript.rhino.jstype.JSType[] { var28};
//     com.google.javascript.rhino.jstype.FunctionType var30 = var23.createConstructorType(var26, false, var29);
//     com.google.javascript.rhino.jstype.JSType var32 = var30.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var33 = var30.getTypeOfThis();
//     boolean var34 = var20.canCastTo((com.google.javascript.rhino.jstype.JSType)var30);
//     boolean var35 = var30.isDateType();
//     boolean var36 = var30.isNullType();
//     boolean var37 = var30.hasCachedValues();
//     com.google.javascript.rhino.jstype.JSType[] var38 = new com.google.javascript.rhino.jstype.JSType[] { var30};
//     com.google.javascript.rhino.jstype.TemplatizedType var39 = var1.createTemplatizedType(var11, var38);
// 
//   }

  public void test146() {}
//   public void test146() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test146"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
//     com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var4 = var3.isNE();
//     int var5 = var3.getSideEffectFlags();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var8 = var7.isNE();
//     boolean var9 = var7.isWith();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
//     var1.validateExpression(var3);
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var14 = var13.cloneNode();
//     var1.validateRoot(var13);
// 
//   }

  public void test147() {}
//   public void test147() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test147"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     com.google.javascript.jscomp.JsAst var4 = null;
//     var0.addNewScript(var4);
// 
//   }

  public void test148() {}
//   public void test148() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test148"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
//     com.google.javascript.rhino.jstype.JSTypeNative var3 = null;
//     com.google.javascript.rhino.jstype.ObjectType var4 = var1.getNativeObjectType(var3);
// 
//   }

  public void test149() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test149"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var2 = var1.cloneNode();
    boolean var3 = var1.isDelProp();
    int var4 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    int var8 = var6.getSideEffectFlags();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    boolean var11 = var10.isNE();
    boolean var12 = var10.isWith();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.getprop(var6, var10);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.string("hi!");
    var10.addChildToBack(var15);
    boolean var17 = var10.isVar();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.add(var1, var10);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test150() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test150"); }


    boolean var1 = com.google.javascript.jscomp.NodeUtil.isValidQualifiedName("Unversioned directory");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test151() {}
//   public void test151() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test151"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
//     com.google.javascript.rhino.jstype.TemplateType var3 = var1.getObjectElementKey();
//     com.google.javascript.rhino.jstype.TemplateType var4 = var3.toMaybeTemplateType();
//     boolean var5 = var3.isAllType();
// 
//   }

  public void test152() {}
//   public void test152() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test152"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var2 = var1.isNE();
//     int var3 = var1.getSideEffectFlags();
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var6 = var5.isNE();
//     boolean var7 = var5.isWith();
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
//     var5.removeProp(0);
//     com.google.javascript.rhino.Node var11 = null;
//     var5.addChildToFront(var11);
// 
//   }

  public void test153() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test153"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var2 = var1.cloneNode();
    boolean var3 = var1.isDelProp();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var6 = var5.cloneNode();
    boolean var7 = var5.isDelProp();
    com.google.javascript.rhino.Node var8 = var1.clonePropsFrom(var5);
    boolean var9 = var1.isHook();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.not(var1);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test154() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test154"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    java.util.Collection var1 = var0.getAssertionFunctions();
    java.lang.String var2 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var6 = var5.cloneNode();
    boolean var7 = var5.isDelProp();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var10 = var9.cloneNode();
    boolean var11 = var9.isDelProp();
    com.google.javascript.rhino.Node var12 = var5.clonePropsFrom(var9);
    com.google.javascript.rhino.JSDocInfo var13 = var9.getJSDocInfo();
    int var14 = var9.getLineno();
    boolean var15 = var9.isFalse();
    com.google.javascript.rhino.JSDocInfo var16 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNodeDeclaration((com.google.javascript.jscomp.CodingConvention)var0, "", var9, var16);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test155() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test155"); }


    java.lang.Object var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var2 = com.google.javascript.rhino.SimpleErrorReporter.getMessage1("goog.exportSymbol", var1);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test156() {}
//   public void test156() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test156"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
//     com.google.javascript.rhino.jstype.TemplateType var3 = var1.getObjectElementKey();
//     var3.clearCachedValues();
//     boolean var5 = var3.isConstructor();
// 
//   }

  public void test157() {}
//   public void test157() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test157"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var1);
//     double var3 = var0.getProgress();
//     com.google.javascript.jscomp.JSError[] var4 = var0.getErrors();
// 
//   }

  public void test158() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test158"); }


    com.google.javascript.jscomp.SourceAst var0 = null;
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
    com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
    com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
    com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var6);
    double var8 = var5.getProgress();
    var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var5);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var12 = var11.cloneNode();
    boolean var13 = var11.isDelProp();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var16 = var15.cloneNode();
    boolean var17 = var15.isDelProp();
    com.google.javascript.rhino.Node var18 = var11.clonePropsFrom(var15);
    boolean var19 = var15.isBlock();
    com.google.javascript.jscomp.NodeTraversal.Callback var20 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.NodeTraversal.traverse((com.google.javascript.jscomp.AbstractCompiler)var5, var15, var20);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test159() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test159"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    var2.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
    com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
    boolean var10 = var9.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    var12.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
    com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
    boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    var37.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
    boolean var45 = var44.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    var47.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
    com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
    boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
    var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var62 = var61.cloneNode();
    boolean var63 = var61.isDelProp();
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var66 = var65.cloneNode();
    boolean var67 = var65.isDelProp();
    com.google.javascript.rhino.Node var68 = var61.clonePropsFrom(var65);
    com.google.javascript.rhino.JSDocInfo var69 = var65.getJSDocInfo();
    com.google.javascript.jscomp.CodingConvention.Bind var71 = var0.describeFunctionBind(var65, true);
    com.google.javascript.rhino.ErrorReporter var72 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var73 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var72);
    var73.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var76 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var76);
    var77.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var80 = null;
    com.google.javascript.rhino.jstype.JSType var82 = null;
    com.google.javascript.rhino.jstype.JSType[] var83 = new com.google.javascript.rhino.jstype.JSType[] { var82};
    com.google.javascript.rhino.jstype.FunctionType var84 = var77.createConstructorType(var80, false, var83);
    com.google.javascript.rhino.jstype.JSType var86 = var84.findPropertyType("hi!");
    int var87 = var84.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var88 = new com.google.javascript.rhino.jstype.JSType[] { var84};
    com.google.javascript.rhino.Node var89 = var73.createParametersWithVarArgs(var88);
    com.google.javascript.rhino.Node var90 = var65.useSourceInfoFrom(var89);
    boolean var91 = var89.isParamList();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);

  }

  public void test160() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test160"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
    int var15 = var12.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
    boolean var18 = var17.isVarArgs();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.string("hi!");
    boolean var21 = var20.isNE();
    int var22 = var20.getSideEffectFlags();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.string("hi!");
    boolean var25 = var24.isNE();
    boolean var26 = var24.isWith();
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.getprop(var20, var24);
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.string("hi!");
    boolean var30 = var29.isNE();
    int var31 = var29.getSideEffectFlags();
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.string("hi!");
    boolean var34 = var33.isNE();
    boolean var35 = var33.isWith();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.getprop(var29, var33);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.string("hi!");
    var33.addChildToBack(var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.ifNode(var17, var24, var38);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test161() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test161"); }


    com.google.javascript.jscomp.SourceAst var0 = null;
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
    com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
    com.google.javascript.rhino.InputId var5 = var3.getInputId();
    java.lang.String var6 = var3.getName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var7 = var3.getPathRelativeToClosureBase();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));

  }

  public void test162() {}
//   public void test162() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test162"); }
// 
// 
//     java.util.Map var0 = null;
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var3 = var2.cloneNode();
//     boolean var4 = var2.isDelProp();
//     com.google.javascript.jscomp.NodeUtil.verifyScopeChanges(var0, var2, true);
// 
//   }

  public void test163() {}
//   public void test163() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test163"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
//     com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var4 = var3.isNE();
//     int var5 = var3.getSideEffectFlags();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var8 = var7.isNE();
//     boolean var9 = var7.isWith();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
//     var1.validateExpression(var3);
//     com.google.javascript.rhino.Node var12 = null;
//     var1.validateCodeRoot(var12);
// 
//   }

  public void test164() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test164"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var11 = var8.getTypeOfThis();
    com.google.javascript.rhino.jstype.TemplatizedType var12 = com.google.javascript.rhino.jstype.JSType.toMaybeTemplatizedType((com.google.javascript.rhino.jstype.JSType)var8);
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    java.lang.Iterable var16 = var14.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    var18.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var21 = null;
    com.google.javascript.rhino.jstype.JSType var23 = null;
    com.google.javascript.rhino.jstype.JSType[] var24 = new com.google.javascript.rhino.jstype.JSType[] { var23};
    com.google.javascript.rhino.jstype.FunctionType var25 = var18.createConstructorType(var21, false, var24);
    boolean var26 = var25.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    var28.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
    com.google.javascript.rhino.jstype.FunctionType var35 = var28.createConstructorType(var31, false, var34);
    com.google.javascript.rhino.jstype.FunctionType var36 = var14.createConstructorType((com.google.javascript.rhino.jstype.JSType)var25, var34);
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    var38.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var41 = null;
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.rhino.jstype.JSType[] var44 = new com.google.javascript.rhino.jstype.JSType[] { var43};
    com.google.javascript.rhino.jstype.FunctionType var45 = var38.createConstructorType(var41, false, var44);
    com.google.javascript.rhino.jstype.JSType var47 = var45.findPropertyType("hi!");
    int var48 = var45.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var50 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var45, "");
    boolean var51 = var45.makesStructs();
    boolean var52 = var36.isSubtype((com.google.javascript.rhino.jstype.JSType)var45);
    com.google.javascript.rhino.jstype.TernaryValue var53 = var8.testForEquality((com.google.javascript.rhino.jstype.JSType)var36);
    java.lang.String var54 = var53.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "false"+ "'", var54.equals("false"));

  }

  public void test165() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test165"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.util.Set var9 = null;
    var1.setDirectives(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    int var15 = var13.getSideEffectFlags();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    boolean var19 = var17.isWith();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
    java.util.Set var21 = null;
    var13.setDirectives(var21);
    com.google.javascript.jscomp.CheckLevel var23 = null;
    com.google.javascript.jscomp.CheckLevel var25 = null;
    com.google.javascript.jscomp.DiagnosticType var27 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var25, "");
    java.lang.String[] var28 = null;
    com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("hi!", var13, var23, var27, var28);
    com.google.javascript.rhino.Node var30 = var1.useSourceInfoIfMissingFrom(var13);
    int var31 = var13.getSideEffectFlags();
    boolean var32 = var13.isVar();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var35 = var34.cloneNode();
    boolean var36 = var34.isDelProp();
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var39 = var38.cloneNode();
    boolean var40 = var38.isDelProp();
    com.google.javascript.rhino.Node var41 = var34.clonePropsFrom(var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.caseNode(var13, var41);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test166() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test166"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionParamBuilder var1 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
    boolean var11 = var1.addRequiredParams(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var14 = var13.cloneNode();
    boolean var15 = var13.isDelProp();
    int var16 = var13.getSideEffectFlags();
    com.google.javascript.rhino.Node var17 = var1.newOptionalParameterFromNode(var13);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.string("hi!");
    boolean var20 = var19.isNE();
    int var21 = var19.getSideEffectFlags();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.string("hi!");
    boolean var24 = var23.isNE();
    boolean var25 = var23.isWith();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.getprop(var19, var23);
    java.util.Set var27 = null;
    var19.setDirectives(var27);
    boolean var29 = var19.isNoSideEffectsCall();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.tryCatch(var17, var19);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test167() {}
//   public void test167() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test167"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var4);
//     int var6 = var0.getErrorCount();
// 
//   }

  public void test168() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test168"); }


    com.google.javascript.rhino.Node var0 = null;
    java.lang.String var1 = com.google.javascript.jscomp.NodeUtil.getSourceName(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test169() {}
//   public void test169() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test169"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
//     var3.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
//     com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
//     boolean var11 = var10.canBeCalled();
//     com.google.javascript.rhino.jstype.FunctionBuilder var13 = var1.withReturnType((com.google.javascript.rhino.jstype.JSType)var10, true);
//     com.google.javascript.rhino.jstype.JSType var14 = null;
//     boolean var15 = var10.canTestForEqualityWith(var14);
// 
//   }

  public void test170() {}
//   public void test170() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test170"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
//     com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var4 = var3.isNE();
//     int var5 = var3.getSideEffectFlags();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var8 = var7.isNE();
//     boolean var9 = var7.isWith();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
//     var1.validateExpression(var3);
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var14 = var13.isNE();
//     int var15 = var13.getSideEffectFlags();
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var18 = var17.isNE();
//     boolean var19 = var17.isWith();
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.string("hi!");
//     var17.addChildToBack(var22);
//     com.google.javascript.rhino.Node.FileLevelJsDocBuilder var24 = var22.getJsDocBuilderForNode();
//     int var25 = var22.getCharno();
//     java.lang.Object var27 = var22.getProp(10);
//     com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var30 = var29.isNE();
//     int var31 = var29.getSideEffectFlags();
//     com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var34 = var33.isNE();
//     boolean var35 = var33.isWith();
//     com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.getprop(var29, var33);
//     com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.string("hi!");
//     var33.addChildToBack(var38);
//     com.google.javascript.rhino.Node var40 = var22.srcrefTree(var38);
//     boolean var41 = var38.isCase();
//     boolean var42 = var38.isOr();
//     var1.validateStatement(var38);
// 
//   }

  public void test171() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test171"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
    boolean var11 = var10.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    var13.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType[] var19 = new com.google.javascript.rhino.jstype.JSType[] { var18};
    com.google.javascript.rhino.jstype.FunctionType var20 = var13.createConstructorType(var16, false, var19);
    com.google.javascript.rhino.jstype.JSType var22 = var20.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var23 = var20.getTypeOfThis();
    boolean var24 = var10.canCastTo((com.google.javascript.rhino.jstype.JSType)var20);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    var26.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var29 = null;
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.jstype.FunctionType var33 = var26.createConstructorType(var29, false, var32);
    com.google.javascript.rhino.jstype.JSType var35 = var33.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var36 = var33.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    var38.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var41 = null;
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.rhino.jstype.JSType[] var44 = new com.google.javascript.rhino.jstype.JSType[] { var43};
    com.google.javascript.rhino.jstype.FunctionType var45 = var38.createConstructorType(var41, false, var44);
    boolean var46 = var45.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    var48.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.rhino.jstype.JSType var53 = null;
    com.google.javascript.rhino.jstype.JSType[] var54 = new com.google.javascript.rhino.jstype.JSType[] { var53};
    com.google.javascript.rhino.jstype.FunctionType var55 = var48.createConstructorType(var51, false, var54);
    com.google.javascript.rhino.jstype.JSType var57 = var55.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var58 = var55.getTypeOfThis();
    boolean var59 = var45.canCastTo((com.google.javascript.rhino.jstype.JSType)var55);
    var1.applySingletonGetter(var10, var33, (com.google.javascript.rhino.jstype.ObjectType)var55);
    java.lang.String var61 = var1.getExportPropertyFunction();
    java.lang.String var62 = var1.getGlobalObject();
    boolean var63 = var0.hasNode((java.lang.Object)var1);
    boolean var65 = var1.isConstant("hi!: ");
    com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var68 = var67.cloneNode();
    boolean var69 = var67.isDelProp();
    com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var72 = var71.cloneNode();
    boolean var73 = var71.isDelProp();
    com.google.javascript.rhino.Node var74 = var67.clonePropsFrom(var71);
    boolean var75 = var67.isHook();
    boolean var76 = var67.isContinue();
    boolean var77 = var67.isAssignAdd();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast var78 = var1.getObjectLiteralCast(var67);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "goog.exportProperty"+ "'", var61.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "goog.global"+ "'", var62.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);

  }

  public void test172() {}
//   public void test172() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test172"); }
// 
// 
//     java.io.InputStream var2 = null;
//     com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromInputStream("FALSE", "hi!: ", var2);
// 
//   }

  public void test173() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test173"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var1 = var0.getGraphvizEdges();
    java.lang.String var2 = var0.getName();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var5 = var4.cloneNode();
    boolean var6 = var4.isDelProp();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var9 = var8.cloneNode();
    boolean var10 = var8.isDelProp();
    com.google.javascript.rhino.Node var11 = var4.clonePropsFrom(var8);
    com.google.javascript.rhino.JSDocInfo var12 = var8.getJSDocInfo();
    int var13 = var8.getLineno();
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = null;
    com.google.javascript.rhino.jstype.FunctionParamBuilder var15 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var14);
    com.google.javascript.rhino.ErrorReporter var16 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
    var17.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.rhino.jstype.JSType var22 = null;
    com.google.javascript.rhino.jstype.JSType[] var23 = new com.google.javascript.rhino.jstype.JSType[] { var22};
    com.google.javascript.rhino.jstype.FunctionType var24 = var17.createConstructorType(var20, false, var23);
    boolean var25 = var15.addRequiredParams(var23);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.string("hi!");
    boolean var28 = var27.isNE();
    int var29 = var27.getSideEffectFlags();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.string("hi!");
    boolean var32 = var31.isNE();
    boolean var33 = var31.isWith();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.getprop(var27, var31);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.string("hi!");
    var31.addChildToBack(var36);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var38 = var36.getJsDocBuilderForNode();
    int var39 = var36.getCharno();
    java.lang.Object var41 = var36.getProp(10);
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.string("hi!");
    boolean var44 = var43.isNE();
    int var45 = var43.getSideEffectFlags();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.string("hi!");
    boolean var48 = var47.isNE();
    boolean var49 = var47.isWith();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.getprop(var43, var47);
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.string("hi!");
    var47.addChildToBack(var52);
    com.google.javascript.rhino.Node var54 = var36.srcrefTree(var52);
    com.google.javascript.rhino.Node var55 = var15.newParameterFromNode(var36);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var56 = var0.getDirectedGraphEdges((java.lang.Object)var13, (java.lang.Object)var36);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "LinkedGraph"+ "'", var2.equals("LinkedGraph"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test174() {}
//   public void test174() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test174"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     double var1 = var0.getProgress();
//     com.google.javascript.jscomp.JSError[] var2 = var0.getWarnings();
// 
//   }

  public void test175() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test175"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    java.lang.Iterable var3 = var1.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    boolean var13 = var12.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    var15.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
    com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
    com.google.javascript.rhino.jstype.FunctionType var23 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var12, var21);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    int var35 = var32.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var37 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var32, "");
    boolean var38 = var32.makesStructs();
    boolean var39 = var23.isSubtype((com.google.javascript.rhino.jstype.JSType)var32);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var41 = var40.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var42 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var42);
    var43.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var46 = null;
    com.google.javascript.rhino.jstype.JSType var48 = null;
    com.google.javascript.rhino.jstype.JSType[] var49 = new com.google.javascript.rhino.jstype.JSType[] { var48};
    com.google.javascript.rhino.jstype.FunctionType var50 = var43.createConstructorType(var46, false, var49);
    com.google.javascript.rhino.jstype.JSType var52 = var50.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var53 = var50.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var54 = var40.getNode((java.lang.Object)var53);
    java.util.List var55 = var40.getEdges();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var32.setExtendedInterfaces(var55);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test176() {}
//   public void test176() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test176"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.ErrorReporter var2 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
//     var3.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
//     com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
//     boolean var11 = var10.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var12 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
//     var13.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     com.google.javascript.rhino.jstype.JSType var18 = null;
//     com.google.javascript.rhino.jstype.JSType[] var19 = new com.google.javascript.rhino.jstype.JSType[] { var18};
//     com.google.javascript.rhino.jstype.FunctionType var20 = var13.createConstructorType(var16, false, var19);
//     com.google.javascript.rhino.jstype.JSType var22 = var20.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var23 = var20.getTypeOfThis();
//     boolean var24 = var10.canCastTo((com.google.javascript.rhino.jstype.JSType)var20);
//     com.google.javascript.rhino.ErrorReporter var25 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
//     var26.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var29 = null;
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
//     com.google.javascript.rhino.jstype.FunctionType var33 = var26.createConstructorType(var29, false, var32);
//     com.google.javascript.rhino.jstype.JSType var35 = var33.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var36 = var33.toMaybeFunctionType();
//     com.google.javascript.rhino.ErrorReporter var37 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
//     var38.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var41 = null;
//     com.google.javascript.rhino.jstype.JSType var43 = null;
//     com.google.javascript.rhino.jstype.JSType[] var44 = new com.google.javascript.rhino.jstype.JSType[] { var43};
//     com.google.javascript.rhino.jstype.FunctionType var45 = var38.createConstructorType(var41, false, var44);
//     boolean var46 = var45.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var47 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
//     var48.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var51 = null;
//     com.google.javascript.rhino.jstype.JSType var53 = null;
//     com.google.javascript.rhino.jstype.JSType[] var54 = new com.google.javascript.rhino.jstype.JSType[] { var53};
//     com.google.javascript.rhino.jstype.FunctionType var55 = var48.createConstructorType(var51, false, var54);
//     com.google.javascript.rhino.jstype.JSType var57 = var55.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var58 = var55.getTypeOfThis();
//     boolean var59 = var45.canCastTo((com.google.javascript.rhino.jstype.JSType)var55);
//     var1.applySingletonGetter(var10, var33, (com.google.javascript.rhino.jstype.ObjectType)var55);
//     com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var63 = var62.cloneNode();
//     boolean var64 = var62.isDelProp();
//     com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var67 = var66.cloneNode();
//     boolean var68 = var66.isDelProp();
//     com.google.javascript.rhino.Node var69 = var62.clonePropsFrom(var66);
//     com.google.javascript.rhino.JSDocInfo var70 = var66.getJSDocInfo();
//     com.google.javascript.jscomp.CodingConvention.Bind var72 = var1.describeFunctionBind(var66, true);
//     boolean var73 = var66.isThrow();
//     var66.setSourceEncodedPositionForTree(10);
//     com.google.javascript.rhino.Node var76 = com.google.javascript.rhino.IR.thisNode();
//     com.google.javascript.rhino.Node var77 = null;
//     com.google.javascript.rhino.Node var78 = com.google.javascript.rhino.IR.nullNode();
//     var78.setLength(0);
//     com.google.javascript.rhino.Node var81 = new com.google.javascript.rhino.Node(100, var66, var76, var77, var78);
// 
//   }

  public void test177() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test177"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    boolean var3 = var1.isFunction();
    java.lang.String var4 = var1.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var6 = var1.getExistingIntProp(1);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "STRING hi!"+ "'", var4.equals("STRING hi!"));

  }

  public void test178() {}
//   public void test178() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test178"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
//     com.google.javascript.rhino.jstype.TemplateType var3 = var1.getObjectElementKey();
//     com.google.javascript.rhino.jstype.TemplateType var4 = var3.toMaybeTemplateType();
//     boolean var5 = var3.isEnumType();
// 
//   }

  public void test179() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test179"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("goog.exportProperty");
    int var3 = var1.getLineOfOffset(100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var4 = var1.getCode();
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);

  }

  public void test180() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test180"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    java.util.Set var10 = null;
    var2.setDirectives(var10);
    com.google.javascript.jscomp.CheckLevel var12 = null;
    com.google.javascript.jscomp.CheckLevel var14 = null;
    com.google.javascript.jscomp.DiagnosticType var16 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var14, "");
    java.lang.String[] var17 = null;
    com.google.javascript.jscomp.JSError var18 = com.google.javascript.jscomp.JSError.make("hi!", var2, var12, var16, var17);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.string("hi!");
    boolean var22 = var21.isNE();
    int var23 = var21.getSideEffectFlags();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.string("hi!");
    boolean var26 = var25.isNE();
    boolean var27 = var25.isWith();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.getprop(var21, var25);
    java.util.Set var29 = null;
    var21.setDirectives(var29);
    com.google.javascript.jscomp.CheckLevel var31 = null;
    com.google.javascript.jscomp.CheckLevel var33 = null;
    com.google.javascript.jscomp.DiagnosticType var35 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var33, "");
    java.lang.String[] var36 = null;
    com.google.javascript.jscomp.JSError var37 = com.google.javascript.jscomp.JSError.make("hi!", var21, var31, var35, var36);
    var21.addSuppression("");
    com.google.javascript.rhino.Node var40 = var2.useSourceInfoFromForTree(var21);
    boolean var41 = var2.isStringKey();
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.block();
    int var43 = var42.getSourceOffset();
    com.google.javascript.rhino.Node[] var44 = new com.google.javascript.rhino.Node[] { var42};
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.script(var44);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.call(var2, var44);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test181() {}
//   public void test181() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test181"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     com.google.javascript.jscomp.SymbolTable var4 = var0.buildKnownSymbolTable();
// 
//   }

  public void test182() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test182"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.block();
    int var1 = var0.getSourceOffset();
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
    boolean var4 = var3.isNE();
    int var5 = var3.getSideEffectFlags();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
    boolean var8 = var7.isNE();
    boolean var9 = var7.isWith();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.string("hi!");
    var7.addChildToBack(var12);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var14 = var12.getJsDocBuilderForNode();
    int var15 = var12.getCharno();
    java.lang.Object var17 = var12.getProp(10);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.string("hi!");
    boolean var20 = var19.isNE();
    int var21 = var19.getSideEffectFlags();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.string("hi!");
    boolean var24 = var23.isNE();
    boolean var25 = var23.isWith();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.getprop(var19, var23);
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.string("hi!");
    var23.addChildToBack(var28);
    com.google.javascript.rhino.Node var30 = var12.srcrefTree(var28);
    boolean var31 = var28.isCase();
    boolean var32 = var28.isOr();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.assign(var0, var28);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test183() {}
//   public void test183() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test183"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     int var2 = var1.getErrorCount();
//     com.google.javascript.jscomp.CheckLevel var3 = null;
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var7 = var6.isNE();
//     int var8 = var6.getSideEffectFlags();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var11 = var10.isNE();
//     boolean var12 = var10.isWith();
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.getprop(var6, var10);
//     java.util.Set var14 = null;
//     var6.setDirectives(var14);
//     com.google.javascript.jscomp.CheckLevel var16 = null;
//     com.google.javascript.jscomp.CheckLevel var18 = null;
//     com.google.javascript.jscomp.DiagnosticType var20 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var18, "");
//     java.lang.String[] var21 = null;
//     com.google.javascript.jscomp.JSError var22 = com.google.javascript.jscomp.JSError.make("hi!", var6, var16, var20, var21);
//     com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var27 = var26.isNE();
//     int var28 = var26.getSideEffectFlags();
//     com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var31 = var30.isNE();
//     boolean var32 = var30.isWith();
//     com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.getprop(var26, var30);
//     java.util.Set var34 = null;
//     var26.setDirectives(var34);
//     com.google.javascript.jscomp.CheckLevel var36 = null;
//     com.google.javascript.jscomp.CheckLevel var38 = null;
//     com.google.javascript.jscomp.DiagnosticType var40 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var38, "");
//     java.lang.String[] var41 = null;
//     com.google.javascript.jscomp.JSError var42 = com.google.javascript.jscomp.JSError.make("hi!", var26, var36, var40, var41);
//     com.google.javascript.jscomp.CheckLevel var47 = null;
//     com.google.javascript.jscomp.DiagnosticType var49 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var47, "");
//     java.lang.String[] var51 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var52 = com.google.javascript.jscomp.JSError.make("", 100, 0, var49, var51);
//     java.lang.String[] var54 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var55 = com.google.javascript.jscomp.JSError.make("hi!", var26, var49, var54);
//     com.google.javascript.jscomp.JSError var56 = com.google.javascript.jscomp.JSError.make(var20, var54);
//     var1.report(var3, var56);
//     int var58 = var1.getErrorCount();
//     com.google.javascript.jscomp.CheckLevel var59 = null;
//     com.google.javascript.jscomp.CheckLevel var64 = null;
//     com.google.javascript.jscomp.DiagnosticType var66 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var64, "");
//     java.lang.String[] var68 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var69 = com.google.javascript.jscomp.JSError.make("", 100, 0, var66, var68);
//     int var70 = var69.getNodeSourceOffset();
//     int var71 = var69.getCharno();
//     var1.println(var59, var69);
// 
//   }

  public void test184() {}
//   public void test184() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test184"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("goog.exportProperty");
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var1, false);
//     com.google.javascript.jscomp.JSModule var4 = var3.getModule();
//     com.google.javascript.jscomp.AbstractCompiler var5 = null;
//     com.google.javascript.rhino.Node var6 = var3.getAstRoot(var5);
// 
//   }

  public void test185() {}
//   public void test185() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test185"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
//     com.google.common.collect.ImmutableList var2 = null;
//     com.google.javascript.rhino.jstype.FunctionBuilder var3 = var1.withTemplateKeys(var2);
// 
//   }

  public void test186() {}
//   public void test186() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test186"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
//     int var15 = var12.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
//     com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
//     com.google.javascript.rhino.ErrorReporter var18 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18);
//     com.google.javascript.rhino.ErrorReporter var20 = var19.getErrorReporter();
//     com.google.javascript.rhino.jstype.TemplateType var21 = var19.getObjectElementKey();
//     com.google.javascript.rhino.jstype.TemplateType var22 = var21.toMaybeTemplateType();
//     com.google.javascript.rhino.jstype.JSType var27 = var1.getType((com.google.javascript.rhino.jstype.StaticScope)var21, "TRUE", "", 0, 1);
// 
//   }

  public void test187() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test187"); }


    com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
    com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
    boolean var4 = var3.isNE();
    int var5 = var3.getSideEffectFlags();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
    boolean var8 = var7.isNE();
    boolean var9 = var7.isWith();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
    var10.setLineno(10);
    var1.validateExpression(var10);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.string("hi!");
    boolean var16 = var15.isNE();
    int var17 = var15.getSideEffectFlags();
    boolean var18 = var15.isReturn();
    var10.addChildrenToBack(var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.throwNode(var15);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test188() {}
//   public void test188() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test188"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     var3.removeRequire("LinkedGraph");
// 
//   }

  public void test189() {}
//   public void test189() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test189"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var4 = null;
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
//     com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
//     com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var11 = var8.getTypeOfThis();
//     com.google.javascript.rhino.jstype.JSType var12 = var11.unboxesTo();
//     com.google.common.base.Predicate var13 = null;
//     boolean var14 = var11.setValidator(var13);
// 
//   }

  public void test190() {}
//   public void test190() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test190"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
//     com.google.javascript.rhino.jstype.TemplateType var3 = var1.getObjectElementKey();
//     com.google.javascript.rhino.jstype.Visitor var4 = null;
//     java.lang.Object var5 = var3.visit(var4);
// 
//   }

  public void test191() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test191"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    var0.pushNodeAnnotations();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test192() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test192"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.Node.newString("hi!: ");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.block(var1);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test193() {}
//   public void test193() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test193"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var2 = var1.isNE();
//     int var3 = var1.getSideEffectFlags();
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var6 = var5.isNE();
//     boolean var7 = var5.isWith();
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
//     var5.addChildToBack(var10);
//     com.google.javascript.rhino.Node.FileLevelJsDocBuilder var12 = var10.getJsDocBuilderForNode();
//     int var13 = var10.getCharno();
//     java.lang.Object var15 = var10.getProp(10);
//     com.google.javascript.rhino.Node var16 = null;
//     boolean var17 = var10.hasChild(var16);
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.ifNode(var16, var19);
// 
//   }

  public void test194() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test194"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("goog.exportProperty");
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var1, false);
    com.google.javascript.jscomp.JSModule var4 = var3.getModule();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var5 = var3.getPathRelativeToClosureBase();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test195() {}
//   public void test195() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test195"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     com.google.javascript.rhino.ErrorReporter var1 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
//     var2.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
//     com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
//     com.google.javascript.rhino.jstype.JSType var11 = var9.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var12 = var9.getTypeOfThis();
//     com.google.javascript.rhino.jstype.JSType var13 = var12.unboxesTo();
//     com.google.javascript.rhino.jstype.JSType var15 = var12.getRestrictedTypeGivenToBooleanOutcome(false);
//     boolean var16 = var12.isNoObjectType();
//     boolean var17 = var0.hasNode((java.lang.Object)var16);
//     java.util.List var18 = var0.getGraphvizEdges();
//     var0.popNodeAnnotations();
// 
//   }

  public void test196() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test196"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var1 = var0.getGraphvizEdges();
    java.lang.String var2 = var0.getName();
    var0.pushNodeAnnotations();
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var15 = var12.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var16 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
    var17.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.rhino.jstype.JSType var22 = null;
    com.google.javascript.rhino.jstype.JSType[] var23 = new com.google.javascript.rhino.jstype.JSType[] { var22};
    com.google.javascript.rhino.jstype.FunctionType var24 = var17.createConstructorType(var20, false, var23);
    boolean var25 = var24.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
    var27.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.rhino.jstype.JSType[] var33 = new com.google.javascript.rhino.jstype.JSType[] { var32};
    com.google.javascript.rhino.jstype.FunctionType var34 = var27.createConstructorType(var30, false, var33);
    com.google.javascript.rhino.jstype.JSType var36 = var34.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var37 = var34.getTypeOfThis();
    boolean var38 = var24.canCastTo((com.google.javascript.rhino.jstype.JSType)var34);
    boolean var39 = var12.hasEqualCallType(var34);
    boolean var40 = var12.matchesUint32Context();
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    var42.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType var47 = null;
    com.google.javascript.rhino.jstype.JSType[] var48 = new com.google.javascript.rhino.jstype.JSType[] { var47};
    com.google.javascript.rhino.jstype.FunctionType var49 = var42.createConstructorType(var45, false, var48);
    com.google.javascript.rhino.jstype.JSType var51 = var49.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var52 = var49.getTypeOfThis();
    com.google.javascript.rhino.jstype.JSType var53 = var52.unboxesTo();
    com.google.javascript.rhino.jstype.JSType var55 = var52.getRestrictedTypeGivenToBooleanOutcome(false);
    com.google.javascript.rhino.ErrorReporter var56 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var56);
    var57.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var60 = null;
    com.google.javascript.rhino.jstype.JSType var62 = null;
    com.google.javascript.rhino.jstype.JSType[] var63 = new com.google.javascript.rhino.jstype.JSType[] { var62};
    com.google.javascript.rhino.jstype.FunctionType var64 = var57.createConstructorType(var60, false, var63);
    com.google.javascript.rhino.jstype.JSType var66 = var64.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var67 = var64.toMaybeFunctionType();
    boolean var68 = var64.isUnionType();
    boolean var69 = com.google.javascript.rhino.jstype.JSType.isEquivalent(var55, (com.google.javascript.rhino.jstype.JSType)var64);
    boolean var70 = var12.isSubtype(var55);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var71 = var0.getDirectedPredNodes((java.lang.Object)var55);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "LinkedGraph"+ "'", var2.equals("LinkedGraph"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test197() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test197"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
    boolean var4 = var3.isNE();
    int var5 = var3.getSideEffectFlags();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
    boolean var8 = var7.isNE();
    boolean var9 = var7.isWith();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
    java.util.Set var11 = null;
    var3.setDirectives(var11);
    com.google.javascript.jscomp.CheckLevel var13 = null;
    com.google.javascript.jscomp.CheckLevel var15 = null;
    com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var15, "");
    java.lang.String[] var18 = null;
    com.google.javascript.jscomp.JSError var19 = com.google.javascript.jscomp.JSError.make("hi!", var3, var13, var17, var18);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.string("hi!");
    boolean var23 = var22.isNE();
    int var24 = var22.getSideEffectFlags();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.string("hi!");
    boolean var27 = var26.isNE();
    boolean var28 = var26.isWith();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.getprop(var22, var26);
    java.util.Set var30 = null;
    var22.setDirectives(var30);
    com.google.javascript.jscomp.CheckLevel var32 = null;
    com.google.javascript.jscomp.CheckLevel var34 = null;
    com.google.javascript.jscomp.DiagnosticType var36 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var34, "");
    java.lang.String[] var37 = null;
    com.google.javascript.jscomp.JSError var38 = com.google.javascript.jscomp.JSError.make("hi!", var22, var32, var36, var37);
    var22.addSuppression("");
    com.google.javascript.rhino.Node var41 = var3.useSourceInfoFromForTree(var22);
    boolean var42 = var22.isGetElem();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var43 = new com.google.javascript.rhino.Node(1, var22);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test198() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test198"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
    boolean var11 = var10.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    var13.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType[] var19 = new com.google.javascript.rhino.jstype.JSType[] { var18};
    com.google.javascript.rhino.jstype.FunctionType var20 = var13.createConstructorType(var16, false, var19);
    com.google.javascript.rhino.jstype.JSType var22 = var20.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var23 = var20.getTypeOfThis();
    boolean var24 = var10.canCastTo((com.google.javascript.rhino.jstype.JSType)var20);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    var26.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var29 = null;
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.jstype.FunctionType var33 = var26.createConstructorType(var29, false, var32);
    boolean var34 = var33.isInterface();
    com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var33};
    com.google.javascript.rhino.jstype.FunctionType var36 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var10, var35);
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.Node.newString(1, "goog.global");
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    var42.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType var47 = null;
    com.google.javascript.rhino.jstype.JSType[] var48 = new com.google.javascript.rhino.jstype.JSType[] { var47};
    com.google.javascript.rhino.jstype.FunctionType var49 = var42.createConstructorType(var45, false, var48);
    var42.clearNamedTypes();
    com.google.javascript.rhino.jstype.TemplateType var51 = var42.getObjectElementKey();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.JSType var52 = var1.createFromTypeNodes(var39, "goog.global", (com.google.javascript.rhino.jstype.StaticScope)var51);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test199() {}
//   public void test199() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test199"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     com.google.javascript.jscomp.CheckLevel var8 = null;
//     com.google.javascript.jscomp.DiagnosticType var10 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var8, "");
//     java.lang.String[] var12 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var13 = com.google.javascript.jscomp.JSError.make("", 100, 0, var10, var12);
//     int var14 = var13.getNodeSourceOffset();
//     int var15 = var13.getCharno();
//     var0.report(var13);
// 
//   }

  public void test200() {}
//   public void test200() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test200"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
//     var3.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
//     com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
//     boolean var11 = var10.canBeCalled();
//     com.google.javascript.rhino.jstype.FunctionBuilder var13 = var1.withReturnType((com.google.javascript.rhino.jstype.JSType)var10, true);
//     com.google.common.collect.ImmutableList var14 = null;
//     com.google.javascript.rhino.jstype.FunctionBuilder var15 = var1.withTemplateKeys(var14);
// 
//   }

  public void test201() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test201"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    double var1 = var0.getProgress();
    com.google.javascript.jscomp.Compiler.CodeBuilder var2 = null;
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    var7.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType var12 = null;
    com.google.javascript.rhino.jstype.JSType[] var13 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.jstype.FunctionType var14 = var7.createConstructorType(var10, false, var13);
    boolean var15 = var14.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var16 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
    var17.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.rhino.jstype.JSType var22 = null;
    com.google.javascript.rhino.jstype.JSType[] var23 = new com.google.javascript.rhino.jstype.JSType[] { var22};
    com.google.javascript.rhino.jstype.FunctionType var24 = var17.createConstructorType(var20, false, var23);
    com.google.javascript.rhino.jstype.JSType var26 = var24.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var27 = var24.getTypeOfThis();
    boolean var28 = var14.canCastTo((com.google.javascript.rhino.jstype.JSType)var24);
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    var30.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.jstype.JSType var35 = null;
    com.google.javascript.rhino.jstype.JSType[] var36 = new com.google.javascript.rhino.jstype.JSType[] { var35};
    com.google.javascript.rhino.jstype.FunctionType var37 = var30.createConstructorType(var33, false, var36);
    boolean var38 = var37.isInterface();
    com.google.javascript.rhino.jstype.JSType[] var39 = new com.google.javascript.rhino.jstype.JSType[] { var37};
    com.google.javascript.rhino.jstype.FunctionType var40 = var5.createConstructorType((com.google.javascript.rhino.jstype.JSType)var14, var39);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var41 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var42 = var41.getGraphvizNodes();
    var5.setTemplateTypeNames(var42);
    com.google.javascript.jscomp.deps.SortedDependencies var44 = new com.google.javascript.jscomp.deps.SortedDependencies(var42);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.script(var42);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.toSource(var2, 0, var45);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test202() {}
//   public void test202() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test202"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.ErrorReporter var1 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
//     var2.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
//     com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
//     boolean var10 = var9.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var11 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
//     var12.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
//     com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
//     com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
//     boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
//     com.google.javascript.rhino.ErrorReporter var24 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
//     var25.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var28 = null;
//     com.google.javascript.rhino.jstype.JSType var30 = null;
//     com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
//     com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
//     com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
//     com.google.javascript.rhino.ErrorReporter var36 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
//     var37.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var40 = null;
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
//     com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
//     boolean var45 = var44.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var46 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
//     var47.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var50 = null;
//     com.google.javascript.rhino.jstype.JSType var52 = null;
//     com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
//     com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
//     com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
//     boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
//     var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
//     com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var62 = var61.isNE();
//     boolean var63 = var61.isWith();
//     com.google.javascript.rhino.Node var64 = var61.getLastChild();
//     boolean var65 = var0.isVarArgsParameter(var61);
//     com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var68 = var67.isNE();
//     int var69 = var67.getSideEffectFlags();
//     com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var72 = var71.isNE();
//     boolean var73 = var71.isWith();
//     com.google.javascript.rhino.Node var74 = com.google.javascript.rhino.IR.getprop(var67, var71);
//     java.util.Set var75 = null;
//     var67.setDirectives(var75);
//     com.google.javascript.rhino.Node var79 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var80 = var79.isNE();
//     int var81 = var79.getSideEffectFlags();
//     com.google.javascript.rhino.Node var83 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var84 = var83.isNE();
//     boolean var85 = var83.isWith();
//     com.google.javascript.rhino.Node var86 = com.google.javascript.rhino.IR.getprop(var79, var83);
//     java.util.Set var87 = null;
//     var79.setDirectives(var87);
//     com.google.javascript.jscomp.CheckLevel var89 = null;
//     com.google.javascript.jscomp.CheckLevel var91 = null;
//     com.google.javascript.jscomp.DiagnosticType var93 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var91, "");
//     java.lang.String[] var94 = null;
//     com.google.javascript.jscomp.JSError var95 = com.google.javascript.jscomp.JSError.make("hi!", var79, var89, var93, var94);
//     com.google.javascript.rhino.Node var96 = var67.useSourceInfoIfMissingFrom(var79);
//     int var97 = var67.getSideEffectFlags();
//     boolean var98 = var67.isEmpty();
//     java.util.List var99 = var0.identifyTypeDeclarationCall(var67);
// 
//   }

  public void test203() {}
//   public void test203() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test203"); }
// 
// 
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var3 = var2.isNE();
//     int var4 = var2.getSideEffectFlags();
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var7 = var6.isNE();
//     boolean var8 = var6.isWith();
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
//     java.util.Set var10 = null;
//     var2.setDirectives(var10);
//     com.google.javascript.jscomp.CheckLevel var12 = null;
//     com.google.javascript.jscomp.CheckLevel var14 = null;
//     com.google.javascript.jscomp.DiagnosticType var16 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var14, "");
//     java.lang.String[] var17 = null;
//     com.google.javascript.jscomp.JSError var18 = com.google.javascript.jscomp.JSError.make("hi!", var2, var12, var16, var17);
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var23 = var22.isNE();
//     int var24 = var22.getSideEffectFlags();
//     com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var27 = var26.isNE();
//     boolean var28 = var26.isWith();
//     com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.getprop(var22, var26);
//     java.util.Set var30 = null;
//     var22.setDirectives(var30);
//     com.google.javascript.jscomp.CheckLevel var32 = null;
//     com.google.javascript.jscomp.CheckLevel var34 = null;
//     com.google.javascript.jscomp.DiagnosticType var36 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var34, "");
//     java.lang.String[] var37 = null;
//     com.google.javascript.jscomp.JSError var38 = com.google.javascript.jscomp.JSError.make("hi!", var22, var32, var36, var37);
//     com.google.javascript.jscomp.CheckLevel var43 = null;
//     com.google.javascript.jscomp.DiagnosticType var45 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var43, "");
//     java.lang.String[] var47 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var48 = com.google.javascript.jscomp.JSError.make("", 100, 0, var45, var47);
//     java.lang.String[] var50 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var51 = com.google.javascript.jscomp.JSError.make("hi!", var22, var45, var50);
//     com.google.javascript.jscomp.JSError var52 = com.google.javascript.jscomp.JSError.make(var16, var50);
//     com.google.javascript.jscomp.CheckLevel var53 = null;
//     com.google.javascript.jscomp.Compiler var54 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var57 = var54.getSourceLine("", (-1));
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var58 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var59 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var54, var58);
//     java.lang.String var60 = var52.format(var53, (com.google.javascript.jscomp.MessageFormatter)var59);
// 
//   }

  public void test204() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test204"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    java.util.Set var10 = null;
    var2.setDirectives(var10);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.string("hi!");
    boolean var15 = var14.isNE();
    int var16 = var14.getSideEffectFlags();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.string("hi!");
    boolean var19 = var18.isNE();
    boolean var20 = var18.isWith();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.getprop(var14, var18);
    java.util.Set var22 = null;
    var14.setDirectives(var22);
    com.google.javascript.jscomp.CheckLevel var24 = null;
    com.google.javascript.jscomp.CheckLevel var26 = null;
    com.google.javascript.jscomp.DiagnosticType var28 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var26, "");
    java.lang.String[] var29 = null;
    com.google.javascript.jscomp.JSError var30 = com.google.javascript.jscomp.JSError.make("hi!", var14, var24, var28, var29);
    com.google.javascript.rhino.Node var31 = var2.useSourceInfoIfMissingFrom(var14);
    int var32 = var2.getType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var35 = new com.google.javascript.rhino.Node((-1), var2, 40, 0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 40);

  }

  public void test205() {}
//   public void test205() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test205"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     com.google.javascript.rhino.ErrorReporter var1 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
//     var2.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
//     com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
//     com.google.javascript.rhino.jstype.JSType var11 = var9.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var12 = var9.getTypeOfThis();
//     com.google.javascript.rhino.jstype.JSType var13 = var12.unboxesTo();
//     com.google.javascript.rhino.jstype.JSType var15 = var12.getRestrictedTypeGivenToBooleanOutcome(false);
//     boolean var16 = var12.isNoObjectType();
//     boolean var17 = var0.hasNode((java.lang.Object)var16);
//     com.google.javascript.rhino.ErrorReporter var18 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18);
//     var19.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var22 = null;
//     com.google.javascript.rhino.jstype.JSType var24 = null;
//     com.google.javascript.rhino.jstype.JSType[] var25 = new com.google.javascript.rhino.jstype.JSType[] { var24};
//     com.google.javascript.rhino.jstype.FunctionType var26 = var19.createConstructorType(var22, false, var25);
//     com.google.javascript.rhino.jstype.JSType var28 = var26.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var29 = var26.toMaybeFunctionType();
//     com.google.javascript.rhino.ErrorReporter var30 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
//     var31.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var34 = null;
//     com.google.javascript.rhino.jstype.JSType var36 = null;
//     com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var36};
//     com.google.javascript.rhino.jstype.FunctionType var38 = var31.createConstructorType(var34, false, var37);
//     boolean var39 = var38.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var40 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40);
//     var41.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var44 = null;
//     com.google.javascript.rhino.jstype.JSType var46 = null;
//     com.google.javascript.rhino.jstype.JSType[] var47 = new com.google.javascript.rhino.jstype.JSType[] { var46};
//     com.google.javascript.rhino.jstype.FunctionType var48 = var41.createConstructorType(var44, false, var47);
//     com.google.javascript.rhino.jstype.JSType var50 = var48.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var51 = var48.getTypeOfThis();
//     boolean var52 = var38.canCastTo((com.google.javascript.rhino.jstype.JSType)var48);
//     boolean var53 = var26.hasEqualCallType(var48);
//     java.lang.Iterable var54 = var48.getAllExtendedInterfaces();
//     java.util.Set var55 = var48.getOwnPropertyNames();
//     com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var58 = var57.cloneNode();
//     boolean var59 = var57.isDelProp();
//     com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var62 = var61.cloneNode();
//     boolean var63 = var61.isDelProp();
//     com.google.javascript.rhino.Node var64 = var57.clonePropsFrom(var61);
//     com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
//     com.google.javascript.rhino.Node var70 = var69.getLastChild();
//     com.google.javascript.rhino.Node var71 = var61.srcrefTree(var69);
//     java.lang.Object var72 = null;
//     boolean var73 = var0.isConnectedInDirection((java.lang.Object)var48, (java.lang.Object)var69, var72);
// 
//   }

  public void test206() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test206"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    var2.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
    com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
    boolean var10 = var9.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    var12.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
    com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
    boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    var37.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
    boolean var45 = var44.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    var47.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
    com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
    boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
    var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.string("hi!");
    boolean var62 = var61.isNE();
    boolean var63 = var61.isWith();
    com.google.javascript.rhino.Node var64 = var61.getLastChild();
    boolean var65 = var0.isVarArgsParameter(var61);
    com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var68 = var67.cloneNode();
    boolean var69 = var67.isDelProp();
    com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var72 = var71.cloneNode();
    boolean var73 = var71.isDelProp();
    com.google.javascript.rhino.Node var74 = var67.clonePropsFrom(var71);
    com.google.javascript.rhino.JSDocInfo var75 = var71.getJSDocInfo();
    com.google.javascript.rhino.Node var76 = com.google.javascript.rhino.IR.breakNode(var71);
    com.google.javascript.jscomp.CodingConvention.Bind var78 = var0.describeFunctionBind(var76, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var79 = com.google.javascript.rhino.IR.not(var76);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);

  }

  public void test207() {}
//   public void test207() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test207"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticType[] var0 = null;
//     com.google.javascript.jscomp.DiagnosticGroup var1 = new com.google.javascript.jscomp.DiagnosticGroup(var0);
// 
//   }

  public void test208() {}
//   public void test208() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test208"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     java.util.Collection var1 = var0.getAssertionFunctions();
//     java.lang.String var2 = var0.getDelegateSuperclassName();
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.block();
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var6 = var5.isNE();
//     boolean var7 = var5.isFunction();
//     java.lang.String var8 = var0.extractClassNameIfRequire(var3, var5);
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var12 = var11.isNE();
//     int var13 = var11.getSideEffectFlags();
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var16 = var15.isNE();
//     boolean var17 = var15.isWith();
//     com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.getprop(var11, var15);
//     java.util.Set var19 = null;
//     var11.setDirectives(var19);
//     com.google.javascript.jscomp.CheckLevel var21 = null;
//     com.google.javascript.jscomp.CheckLevel var23 = null;
//     com.google.javascript.jscomp.DiagnosticType var25 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var23, "");
//     java.lang.String[] var26 = null;
//     com.google.javascript.jscomp.JSError var27 = com.google.javascript.jscomp.JSError.make("hi!", var11, var21, var25, var26);
//     com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var31 = var30.isNE();
//     int var32 = var30.getSideEffectFlags();
//     com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var35 = var34.isNE();
//     boolean var36 = var34.isWith();
//     com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.getprop(var30, var34);
//     java.util.Set var38 = null;
//     var30.setDirectives(var38);
//     com.google.javascript.jscomp.CheckLevel var40 = null;
//     com.google.javascript.jscomp.CheckLevel var42 = null;
//     com.google.javascript.jscomp.DiagnosticType var44 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var42, "");
//     java.lang.String[] var45 = null;
//     com.google.javascript.jscomp.JSError var46 = com.google.javascript.jscomp.JSError.make("hi!", var30, var40, var44, var45);
//     var30.addSuppression("");
//     com.google.javascript.rhino.Node var49 = var11.useSourceInfoFromForTree(var30);
//     com.google.javascript.jscomp.CodingConvention.SubclassRelationship var50 = var0.getClassesDefinedByCall(var11);
// 
//   }

  public void test209() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test209"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    java.lang.Iterable var3 = var1.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    boolean var13 = var12.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    var15.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
    com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
    com.google.javascript.rhino.jstype.FunctionType var23 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var12, var21);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    int var35 = var32.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var37 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var32, "");
    boolean var38 = var32.makesStructs();
    boolean var39 = var23.isSubtype((com.google.javascript.rhino.jstype.JSType)var32);
    boolean var40 = var32.isUnknownType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test210() {}
//   public void test210() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test210"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     com.google.javascript.jscomp.SourceFile var3 = new com.google.javascript.jscomp.SourceFile("goog.exportProperty");
//     com.google.javascript.jscomp.JSSourceFile var4 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var5 = new com.google.javascript.jscomp.JSSourceFile[] { var4};
//     com.google.javascript.jscomp.CompilerOptions var6 = null;
//     com.google.javascript.jscomp.Result var7 = var0.compile(var3, var5, var6);
// 
//   }

  public void test211() {}
//   public void test211() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test211"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     com.google.javascript.jscomp.JSSourceFile var2 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var3 = new com.google.javascript.jscomp.JSSourceFile[] { var2};
//     com.google.javascript.jscomp.JSModule var4 = null;
//     com.google.javascript.jscomp.JSModule[] var5 = new com.google.javascript.jscomp.JSModule[] { var4};
//     com.google.javascript.jscomp.CompilerOptions var6 = null;
//     com.google.javascript.jscomp.Result var7 = var0.compile(var3, var5, var6);
// 
//   }

  public void test212() {}
//   public void test212() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test212"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
//     int var15 = var12.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
//     com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
//     com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var19 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
//     com.google.javascript.rhino.jstype.JSType[] var20 = null;
//     boolean var21 = var19.addRequiredParams(var20);
// 
//   }

  public void test213() {}
//   public void test213() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test213"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.block();
//     int var2 = var1.getSourceOffset();
//     com.google.javascript.rhino.Node var3 = null;
//     com.google.javascript.rhino.Node var4 = new com.google.javascript.rhino.Node(1, var1, var3);
// 
//   }

  public void test214() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test214"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    com.google.javascript.rhino.Node var12 = var10.getLastSibling();
    boolean var13 = var12.isLocalResultCall();
    boolean var15 = var12.getBooleanProp((-1));
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var18 = var17.cloneNode();
    boolean var19 = var17.isDelProp();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var22 = var21.cloneNode();
    boolean var23 = var21.isDelProp();
    com.google.javascript.rhino.Node var24 = var17.clonePropsFrom(var21);
    com.google.javascript.rhino.JSDocInfo var25 = var21.getJSDocInfo();
    com.google.javascript.rhino.Node var26 = var21.getNext();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.tryCatch(var12, var21);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test215() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test215"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("FALSE");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var3 = var1.getColumnOfOffset((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test216() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test216"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }

  }

  public void test217() {}
//   public void test217() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test217"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var2 = var1.isNE();
//     int var3 = var1.getSideEffectFlags();
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var6 = var5.isNE();
//     boolean var7 = var5.isWith();
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
//     var8.setLineno(10);
//     com.google.javascript.rhino.Node[] var11 = null;
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.newNode(var8, var11);
// 
//   }

  public void test218() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test218"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    java.util.Set var10 = null;
    var2.setDirectives(var10);
    com.google.javascript.jscomp.CheckLevel var12 = null;
    com.google.javascript.jscomp.CheckLevel var14 = null;
    com.google.javascript.jscomp.DiagnosticType var16 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var14, "");
    java.lang.String[] var17 = null;
    com.google.javascript.jscomp.JSError var18 = com.google.javascript.jscomp.JSError.make("hi!", var2, var12, var16, var17);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.string("hi!");
    boolean var22 = var21.isNE();
    int var23 = var21.getSideEffectFlags();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.string("hi!");
    boolean var26 = var25.isNE();
    boolean var27 = var25.isWith();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.getprop(var21, var25);
    java.util.Set var29 = null;
    var21.setDirectives(var29);
    com.google.javascript.jscomp.CheckLevel var31 = null;
    com.google.javascript.jscomp.CheckLevel var33 = null;
    com.google.javascript.jscomp.DiagnosticType var35 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var33, "");
    java.lang.String[] var36 = null;
    com.google.javascript.jscomp.JSError var37 = com.google.javascript.jscomp.JSError.make("hi!", var21, var31, var35, var36);
    var21.addSuppression("");
    com.google.javascript.rhino.Node var40 = var2.useSourceInfoFromForTree(var21);
    boolean var41 = var21.isGetElem();
    com.google.javascript.rhino.InputId var42 = var21.getInputId();
    boolean var43 = var21.isParamList();
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.block();
    int var45 = var44.getSourceOffset();
    com.google.javascript.rhino.Node[] var46 = new com.google.javascript.rhino.Node[] { var44};
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.script(var46);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.newNode(var21, var46);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test219() {}
//   public void test219() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test219"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var1 = var0.getGraphvizNodes();
//     com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.ErrorReporter var3 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
//     var4.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.jstype.JSType var9 = null;
//     com.google.javascript.rhino.jstype.JSType[] var10 = new com.google.javascript.rhino.jstype.JSType[] { var9};
//     com.google.javascript.rhino.jstype.FunctionType var11 = var4.createConstructorType(var7, false, var10);
//     boolean var12 = var11.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var13 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
//     var14.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     com.google.javascript.rhino.jstype.JSType var19 = null;
//     com.google.javascript.rhino.jstype.JSType[] var20 = new com.google.javascript.rhino.jstype.JSType[] { var19};
//     com.google.javascript.rhino.jstype.FunctionType var21 = var14.createConstructorType(var17, false, var20);
//     com.google.javascript.rhino.jstype.JSType var23 = var21.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var24 = var21.getTypeOfThis();
//     boolean var25 = var11.canCastTo((com.google.javascript.rhino.jstype.JSType)var21);
//     com.google.javascript.rhino.ErrorReporter var26 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
//     var27.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var30 = null;
//     com.google.javascript.rhino.jstype.JSType var32 = null;
//     com.google.javascript.rhino.jstype.JSType[] var33 = new com.google.javascript.rhino.jstype.JSType[] { var32};
//     com.google.javascript.rhino.jstype.FunctionType var34 = var27.createConstructorType(var30, false, var33);
//     com.google.javascript.rhino.jstype.JSType var36 = var34.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var37 = var34.toMaybeFunctionType();
//     com.google.javascript.rhino.ErrorReporter var38 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
//     var39.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     com.google.javascript.rhino.jstype.JSType var44 = null;
//     com.google.javascript.rhino.jstype.JSType[] var45 = new com.google.javascript.rhino.jstype.JSType[] { var44};
//     com.google.javascript.rhino.jstype.FunctionType var46 = var39.createConstructorType(var42, false, var45);
//     boolean var47 = var46.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var48 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var48);
//     var49.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var52 = null;
//     com.google.javascript.rhino.jstype.JSType var54 = null;
//     com.google.javascript.rhino.jstype.JSType[] var55 = new com.google.javascript.rhino.jstype.JSType[] { var54};
//     com.google.javascript.rhino.jstype.FunctionType var56 = var49.createConstructorType(var52, false, var55);
//     com.google.javascript.rhino.jstype.JSType var58 = var56.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var59 = var56.getTypeOfThis();
//     boolean var60 = var46.canCastTo((com.google.javascript.rhino.jstype.JSType)var56);
//     var2.applySingletonGetter(var11, var34, (com.google.javascript.rhino.jstype.ObjectType)var56);
//     com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var64 = var63.cloneNode();
//     boolean var65 = var63.isDelProp();
//     com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var68 = var67.cloneNode();
//     boolean var69 = var67.isDelProp();
//     com.google.javascript.rhino.Node var70 = var63.clonePropsFrom(var67);
//     com.google.javascript.rhino.JSDocInfo var71 = var67.getJSDocInfo();
//     com.google.javascript.jscomp.CodingConvention.Bind var73 = var2.describeFunctionBind(var67, true);
//     java.util.List var74 = var0.getNeighborNodes((java.lang.Object)var2);
// 
//   }

  public void test220() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test220"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionParamBuilder var1 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
    boolean var11 = var1.addRequiredParams(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    int var15 = var13.getSideEffectFlags();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    boolean var19 = var17.isWith();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.string("hi!");
    var17.addChildToBack(var22);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var24 = var22.getJsDocBuilderForNode();
    int var25 = var22.getCharno();
    java.lang.Object var27 = var22.getProp(10);
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.string("hi!");
    boolean var30 = var29.isNE();
    int var31 = var29.getSideEffectFlags();
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.string("hi!");
    boolean var34 = var33.isNE();
    boolean var35 = var33.isWith();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.getprop(var29, var33);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.string("hi!");
    var33.addChildToBack(var38);
    com.google.javascript.rhino.Node var40 = var22.srcrefTree(var38);
    com.google.javascript.rhino.Node var41 = var1.newParameterFromNode(var22);
    com.google.javascript.rhino.Node var42 = var1.build();
    boolean var43 = var42.isDelProp();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test221() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test221"); }


    com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
    com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
    boolean var4 = var3.isNE();
    int var5 = var3.getSideEffectFlags();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
    boolean var8 = var7.isNE();
    boolean var9 = var7.isWith();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
    var1.validateExpression(var3);
    var3.removeProp((-1));
    var3.setSourceEncodedPositionForTree(1);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.block();
    int var17 = var16.getSourceOffset();
    com.google.javascript.rhino.Node[] var18 = new com.google.javascript.rhino.Node[] { var16};
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.script(var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.newNode(var3, var18);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test222() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test222"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    boolean var4 = var1.isReturn();
    boolean var5 = var1.isNot();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var6 = var1.getDouble();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test223() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test223"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    java.lang.String var2 = var1.getExportPropertyFunction();
    boolean var4 = var1.isValidEnumKey("false");
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.script();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var6 = var1.isVarArgsParameter(var5);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "goog.exportProperty"+ "'", var2.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test224() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test224"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var11 = var8.getTypeOfThis();
    boolean var12 = var11.isAllType();
    com.google.javascript.rhino.jstype.FunctionType var13 = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test225() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test225"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    java.util.Collection var1 = var0.getNodes();
    com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.jscomp.GoogleCodingConvention var3 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var2);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    int var8 = var6.getSideEffectFlags();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    boolean var11 = var10.isNE();
    boolean var12 = var10.isWith();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.getprop(var6, var10);
    java.util.Set var14 = null;
    var6.setDirectives(var14);
    com.google.javascript.jscomp.CheckLevel var16 = null;
    com.google.javascript.jscomp.CheckLevel var18 = null;
    com.google.javascript.jscomp.DiagnosticType var20 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var18, "");
    java.lang.String[] var21 = null;
    com.google.javascript.jscomp.JSError var22 = com.google.javascript.jscomp.JSError.make("hi!", var6, var16, var20, var21);
    com.google.javascript.jscomp.DiagnosticGroup var23 = com.google.javascript.jscomp.DiagnosticGroup.forType(var20);
    com.google.javascript.jscomp.DiagnosticGroup[] var24 = new com.google.javascript.jscomp.DiagnosticGroup[] { var23};
    com.google.javascript.jscomp.DiagnosticGroup var25 = new com.google.javascript.jscomp.DiagnosticGroup(var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var26 = var0.isConnected((java.lang.Object)var3, (java.lang.Object)var25);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test226() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test226"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.Node.newString("hi!: ");
    boolean var2 = var1.isSetterDef();
    com.google.javascript.rhino.Node var3 = var1.getLastSibling();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var4 = com.google.javascript.jscomp.NodeUtil.isLValue(var3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test227() {}
//   public void test227() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test227"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.rhino.ErrorReporter var1 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
//     var2.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
//     com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
//     boolean var10 = var9.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var11 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
//     var12.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
//     com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
//     com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
//     boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
//     boolean var24 = var19.isDateType();
//     boolean var25 = var19.isConstructor();
//     com.google.javascript.rhino.ErrorReporter var26 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
//     var27.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var30 = null;
//     com.google.javascript.rhino.jstype.JSType var32 = null;
//     com.google.javascript.rhino.jstype.JSType[] var33 = new com.google.javascript.rhino.jstype.JSType[] { var32};
//     com.google.javascript.rhino.jstype.FunctionType var34 = var27.createConstructorType(var30, false, var33);
//     boolean var35 = var34.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var36 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
//     var37.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var40 = null;
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
//     com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
//     com.google.javascript.rhino.jstype.JSType var46 = var44.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var47 = var44.getTypeOfThis();
//     boolean var48 = var34.canCastTo((com.google.javascript.rhino.jstype.JSType)var44);
//     boolean var49 = var44.isDateType();
//     boolean var50 = var44.isConstructor();
//     com.google.javascript.rhino.Node var51 = var44.getRootNode();
//     com.google.javascript.rhino.ErrorReporter var52 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var52);
//     var53.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var56 = null;
//     com.google.javascript.rhino.jstype.JSType var58 = null;
//     com.google.javascript.rhino.jstype.JSType[] var59 = new com.google.javascript.rhino.jstype.JSType[] { var58};
//     com.google.javascript.rhino.jstype.FunctionType var60 = var53.createConstructorType(var56, false, var59);
//     boolean var61 = var60.isInterface();
//     com.google.javascript.rhino.jstype.JSType var62 = var44.getLeastSupertype((com.google.javascript.rhino.jstype.JSType)var60);
//     boolean var63 = com.google.javascript.rhino.jstype.JSType.isEquivalent((com.google.javascript.rhino.jstype.JSType)var19, (com.google.javascript.rhino.jstype.JSType)var60);
//     var0.disconnect((java.lang.Object)var60, (java.lang.Object)(byte)100);
// 
//   }

  public void test228() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test228"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.util.Set var9 = null;
    var1.setDirectives(var9);
    int var11 = var1.getChildCount();
    java.lang.Iterable var12 = var1.siblings();
    java.lang.Object var14 = var1.getProp(1);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var17 = var16.cloneNode();
    boolean var18 = var16.isDelProp();
    boolean var19 = var16.isDefaultCase();
    boolean var20 = var16.isNE();
    boolean var21 = var16.isString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Map var22 = com.google.javascript.jscomp.NodeUtil.mapMainToClone(var1, var16);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test229() {}
//   public void test229() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test229"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
//     int var15 = var12.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
//     com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
//     com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
//     var1.clearTemplateTypeNames();
//     com.google.javascript.rhino.jstype.JSTypeNative var20 = null;
//     com.google.javascript.rhino.jstype.ObjectType var21 = var1.getNativeObjectType(var20);
// 
//   }

  public void test230() {}
//   public void test230() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test230"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var1);
//     var0.optimize();
// 
//   }

  public void test231() {}
//   public void test231() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test231"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.JSError[] var2 = var1.getWarnings();
// 
//   }

  public void test232() {}
//   public void test232() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test232"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var1);
//     double var3 = var0.getProgress();
//     com.google.javascript.jscomp.JSSourceFile var4 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var5 = new com.google.javascript.jscomp.JSSourceFile[] { var4};
//     com.google.javascript.jscomp.JSSourceFile var6 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var7 = new com.google.javascript.jscomp.JSSourceFile[] { var6};
//     com.google.javascript.jscomp.CompilerOptions var8 = null;
//     var0.init(var5, var7, var8);
// 
//   }

  public void test233() {}
//   public void test233() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test233"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     boolean var2 = var0.acceptEcmaScript5();
// 
//   }

  public void test234() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test234"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test235() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test235"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    int var12 = var10.getChangeTime();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.block(var10);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test236() {}
//   public void test236() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test236"); }
// 
// 
//     java.io.File var0 = null;
//     java.nio.charset.Charset var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromFile(var0, var1);
// 
//   }

  public void test237() {}
//   public void test237() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test237"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
//     com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var4 = var3.isNE();
//     int var5 = var3.getSideEffectFlags();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var8 = var7.isNE();
//     boolean var9 = var7.isWith();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.string("hi!");
//     var7.addChildToBack(var12);
//     com.google.javascript.rhino.Node var14 = var12.getLastSibling();
//     com.google.javascript.rhino.JSDocInfo var15 = var14.getJSDocInfo();
//     var1.validateRoot(var14);
// 
//   }

  public void test238() {}
//   public void test238() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test238"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
//     com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var4 = var3.isNE();
//     int var5 = var3.getSideEffectFlags();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var8 = var7.isNE();
//     boolean var9 = var7.isWith();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
//     var10.setLineno(10);
//     var1.validateExpression(var10);
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var16 = var15.isNE();
//     int var17 = var15.getSideEffectFlags();
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var20 = var19.isNE();
//     boolean var21 = var19.isWith();
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.getprop(var15, var19);
//     var19.removeProp(0);
//     var1.validateStatement(var19);
// 
//   }

  public void test239() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test239"); }


    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    var2.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
    com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
    com.google.javascript.rhino.jstype.JSType var11 = var9.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var12 = var9.getTypeOfThis();
    boolean var13 = var12.isAllType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var14 = com.google.javascript.rhino.SimpleErrorReporter.getMessage1("Unversioned directory", (java.lang.Object)var13);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test240() {}
//   public void test240() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test240"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     int var2 = var1.getErrorCount();
//     com.google.javascript.jscomp.CheckLevel var3 = null;
//     com.google.javascript.jscomp.JSError var4 = null;
//     var1.report(var3, var4);
// 
//   }

  public void test241() {}
//   public void test241() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test241"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     com.google.javascript.jscomp.JSModule var4 = var3.getModule();
//     java.lang.String var5 = var3.getCode();
// 
//   }

  public void test242() {}
//   public void test242() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test242"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
//     int var15 = var12.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
//     com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
//     com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
//     boolean var19 = var18.hasAnyTemplateTypesInternal();
//     com.google.javascript.rhino.jstype.BooleanLiteralSet var20 = var18.getPossibleToBooleanOutcomes();
//     boolean var21 = var18.isFunctionType();
// 
//   }

  public void test243() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test243"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    boolean var3 = var1.isWith();
    java.util.Set var4 = null;
    var1.setDirectives(var4);
    boolean var6 = var1.isUnscopedQualifiedName();
    var1.setCharno(0);
    com.google.javascript.rhino.Node[] var9 = new com.google.javascript.rhino.Node[] { var1};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.objectlit(var9);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test244() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test244"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("goog.exportProperty");
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var1, false);
    boolean var4 = var3.isExtern();
    com.google.javascript.jscomp.JSModule var5 = null;
    var3.setModule(var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var8 = var3.getLineOffset(0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test245() {}
//   public void test245() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test245"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.trueNode();
//     var0.setLineno(10);
//     com.google.javascript.rhino.ErrorReporter var3 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
//     com.google.javascript.rhino.ErrorReporter var5 = var4.getErrorReporter();
//     com.google.javascript.rhino.ErrorReporter var6 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
//     var7.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var10 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
//     var11.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var14 = null;
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     com.google.javascript.rhino.jstype.JSType[] var17 = new com.google.javascript.rhino.jstype.JSType[] { var16};
//     com.google.javascript.rhino.jstype.FunctionType var18 = var11.createConstructorType(var14, false, var17);
//     boolean var19 = var18.canBeCalled();
//     boolean var20 = var18.isTemplatizedType();
//     com.google.javascript.rhino.ErrorReporter var22 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
//     var23.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var26 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
//     var27.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var30 = null;
//     com.google.javascript.rhino.jstype.JSType var32 = null;
//     com.google.javascript.rhino.jstype.JSType[] var33 = new com.google.javascript.rhino.jstype.JSType[] { var32};
//     com.google.javascript.rhino.jstype.FunctionType var34 = var27.createConstructorType(var30, false, var33);
//     com.google.javascript.rhino.jstype.JSType var36 = var34.findPropertyType("hi!");
//     int var37 = var34.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var38 = new com.google.javascript.rhino.jstype.JSType[] { var34};
//     com.google.javascript.rhino.Node var39 = var23.createParametersWithVarArgs(var38);
//     com.google.javascript.rhino.jstype.FunctionType var40 = var7.createFunctionType((com.google.javascript.rhino.jstype.JSType)var18, false, var38);
//     com.google.javascript.rhino.Node var41 = var4.createParametersWithVarArgs(var38);
//     var0.removeChild(var41);
// 
//   }

  public void test246() {}
//   public void test246() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test246"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
//     com.google.javascript.rhino.ErrorReporter var1 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
//     var2.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
//     com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
//     boolean var10 = var9.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var11 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
//     var12.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
//     com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
//     com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
//     boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
//     boolean var24 = var19.isDateType();
//     boolean var25 = var19.isConstructor();
//     com.google.javascript.rhino.Node var26 = var19.getRootNode();
//     com.google.javascript.rhino.ErrorReporter var27 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
//     var28.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     com.google.javascript.rhino.jstype.JSType var33 = null;
//     com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
//     com.google.javascript.rhino.jstype.FunctionType var35 = var28.createConstructorType(var31, false, var34);
//     boolean var36 = var35.isInterface();
//     com.google.javascript.rhino.jstype.JSType var37 = var19.getLeastSupertype((com.google.javascript.rhino.jstype.JSType)var35);
//     java.lang.Object var38 = null;
//     com.google.javascript.rhino.ErrorReporter var39 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var39);
//     var40.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var43 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var43);
//     var44.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var47 = null;
//     com.google.javascript.rhino.jstype.JSType var49 = null;
//     com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
//     com.google.javascript.rhino.jstype.FunctionType var51 = var44.createConstructorType(var47, false, var50);
//     com.google.javascript.rhino.jstype.JSType var53 = var51.findPropertyType("hi!");
//     int var54 = var51.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var55 = new com.google.javascript.rhino.jstype.JSType[] { var51};
//     com.google.javascript.rhino.Node var56 = var40.createParametersWithVarArgs(var55);
//     com.google.javascript.rhino.jstype.TemplateType var57 = var40.getObjectIndexKey();
//     boolean var58 = var57.hasAnyTemplateTypesInternal();
//     com.google.javascript.rhino.jstype.BooleanLiteralSet var59 = var57.getPossibleToBooleanOutcomes();
//     java.lang.String var60 = var59.toString();
//     var0.connectIfNotFound((java.lang.Object)var35, var38, (java.lang.Object)var59);
// 
//   }

  public void test247() {}
//   public void test247() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test247"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var1);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var4 = var3.getGraphvizNodes();
//     com.google.javascript.jscomp.DependencyOptions var5 = new com.google.javascript.jscomp.DependencyOptions();
//     com.google.javascript.rhino.ErrorReporter var6 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
//     java.lang.Iterable var9 = var7.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var10 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
//     var11.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var14 = null;
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     com.google.javascript.rhino.jstype.JSType[] var17 = new com.google.javascript.rhino.jstype.JSType[] { var16};
//     com.google.javascript.rhino.jstype.FunctionType var18 = var11.createConstructorType(var14, false, var17);
//     boolean var19 = var18.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var20 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
//     var21.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var24 = null;
//     com.google.javascript.rhino.jstype.JSType var26 = null;
//     com.google.javascript.rhino.jstype.JSType[] var27 = new com.google.javascript.rhino.jstype.JSType[] { var26};
//     com.google.javascript.rhino.jstype.FunctionType var28 = var21.createConstructorType(var24, false, var27);
//     com.google.javascript.rhino.jstype.FunctionType var29 = var7.createConstructorType((com.google.javascript.rhino.jstype.JSType)var18, var27);
//     com.google.javascript.rhino.ErrorReporter var30 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
//     java.lang.Iterable var33 = var31.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var34 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
//     var35.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var38 = null;
//     com.google.javascript.rhino.jstype.JSType var40 = null;
//     com.google.javascript.rhino.jstype.JSType[] var41 = new com.google.javascript.rhino.jstype.JSType[] { var40};
//     com.google.javascript.rhino.jstype.FunctionType var42 = var35.createConstructorType(var38, false, var41);
//     boolean var43 = var42.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var44 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var44);
//     var45.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var48 = null;
//     com.google.javascript.rhino.jstype.JSType var50 = null;
//     com.google.javascript.rhino.jstype.JSType[] var51 = new com.google.javascript.rhino.jstype.JSType[] { var50};
//     com.google.javascript.rhino.jstype.FunctionType var52 = var45.createConstructorType(var48, false, var51);
//     com.google.javascript.rhino.jstype.FunctionType var53 = var31.createConstructorType((com.google.javascript.rhino.jstype.JSType)var42, var51);
//     boolean var54 = var42.isReturnTypeInferred();
//     boolean var55 = var42.isTemplatizedType();
//     com.google.javascript.rhino.ErrorReporter var56 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var56);
//     com.google.javascript.rhino.ErrorReporter var58 = var57.getErrorReporter();
//     com.google.javascript.rhino.jstype.TemplateType var59 = var57.getObjectElementKey();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var60 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var61 = var60.getGraphvizNodes();
//     com.google.javascript.rhino.ErrorReporter var62 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var62);
//     var63.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var66 = null;
//     com.google.javascript.rhino.jstype.JSType var68 = null;
//     com.google.javascript.rhino.jstype.JSType[] var69 = new com.google.javascript.rhino.jstype.JSType[] { var68};
//     com.google.javascript.rhino.jstype.FunctionType var70 = var63.createConstructorType(var66, false, var69);
//     com.google.javascript.rhino.jstype.JSType var72 = var70.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var73 = var70.getTypeOfThis();
//     com.google.javascript.jscomp.graph.GraphNode var74 = var60.getNode((java.lang.Object)var73);
//     java.util.List var75 = var60.getEdges();
//     com.google.javascript.rhino.jstype.JSType var76 = var7.createFunctionType((com.google.javascript.rhino.jstype.ObjectType)var42, (com.google.javascript.rhino.jstype.JSType)var59, var75);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var77 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var78 = var77.getGraphvizNodes();
//     var42.setImplementedInterfaces(var78);
//     com.google.javascript.jscomp.DependencyOptions var80 = var5.setEntryPoints((java.util.Collection)var78);
//     com.google.javascript.jscomp.CompilerOptions var81 = null;
//     com.google.javascript.jscomp.Result var82 = var0.<com.google.javascript.jscomp.SourceFile>compileModules(var4, var78, var81);
// 
//   }

  public void test248() {}
//   public void test248() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test248"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
//     int var15 = var12.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
//     com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
//     com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
//     com.google.javascript.rhino.ErrorReporter var19 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
//     com.google.javascript.rhino.ErrorReporter var21 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
//     var22.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var25 = null;
//     com.google.javascript.rhino.jstype.JSType var27 = null;
//     com.google.javascript.rhino.jstype.JSType[] var28 = new com.google.javascript.rhino.jstype.JSType[] { var27};
//     com.google.javascript.rhino.jstype.FunctionType var29 = var22.createConstructorType(var25, false, var28);
//     boolean var30 = var29.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var31 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var31);
//     var32.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var35 = null;
//     com.google.javascript.rhino.jstype.JSType var37 = null;
//     com.google.javascript.rhino.jstype.JSType[] var38 = new com.google.javascript.rhino.jstype.JSType[] { var37};
//     com.google.javascript.rhino.jstype.FunctionType var39 = var32.createConstructorType(var35, false, var38);
//     com.google.javascript.rhino.jstype.JSType var41 = var39.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var42 = var39.getTypeOfThis();
//     boolean var43 = var29.canCastTo((com.google.javascript.rhino.jstype.JSType)var39);
//     com.google.javascript.rhino.ErrorReporter var44 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var44);
//     var45.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var48 = null;
//     com.google.javascript.rhino.jstype.JSType var50 = null;
//     com.google.javascript.rhino.jstype.JSType[] var51 = new com.google.javascript.rhino.jstype.JSType[] { var50};
//     com.google.javascript.rhino.jstype.FunctionType var52 = var45.createConstructorType(var48, false, var51);
//     boolean var53 = var52.isInterface();
//     com.google.javascript.rhino.jstype.JSType[] var54 = new com.google.javascript.rhino.jstype.JSType[] { var52};
//     com.google.javascript.rhino.jstype.FunctionType var55 = var20.createConstructorType((com.google.javascript.rhino.jstype.JSType)var29, var54);
//     var55.setDict();
//     boolean var57 = var55.hasReferenceName();
//     com.google.javascript.rhino.jstype.JSType var58 = var1.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType)var55);
//     com.google.javascript.rhino.ErrorReporter var59 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var59);
//     var60.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var63 = null;
//     com.google.javascript.rhino.jstype.JSType var65 = null;
//     com.google.javascript.rhino.jstype.JSType[] var66 = new com.google.javascript.rhino.jstype.JSType[] { var65};
//     com.google.javascript.rhino.jstype.FunctionType var67 = var60.createConstructorType(var63, false, var66);
//     com.google.javascript.rhino.jstype.ObjectType var68 = var67.toObjectType();
//     var67.clearCachedValues();
//     com.google.javascript.rhino.ErrorReporter var70 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var70);
//     var71.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var74 = null;
//     com.google.javascript.rhino.jstype.JSType var76 = null;
//     com.google.javascript.rhino.jstype.JSType[] var77 = new com.google.javascript.rhino.jstype.JSType[] { var76};
//     com.google.javascript.rhino.jstype.FunctionType var78 = var71.createConstructorType(var74, false, var77);
//     com.google.javascript.rhino.jstype.JSType var80 = var78.findPropertyType("hi!");
//     int var81 = var78.getPropertiesCount();
//     com.google.javascript.rhino.jstype.ObjectType var83 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var78, "");
//     boolean var84 = var78.makesStructs();
//     com.google.javascript.rhino.jstype.TemplateType var85 = com.google.javascript.rhino.jstype.JSType.toMaybeTemplateType((com.google.javascript.rhino.jstype.JSType)var78);
//     com.google.javascript.rhino.jstype.FunctionType var86 = var1.createFunctionTypeWithNewThisType(var67, (com.google.javascript.rhino.jstype.ObjectType)var78);
//     com.google.javascript.rhino.jstype.JSTypeNative var87 = null;
//     com.google.javascript.rhino.jstype.FunctionType var88 = var1.getNativeFunctionType(var87);
// 
//   }

  public void test249() {}
//   public void test249() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test249"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.returnNode(var0);
// 
//   }

  public void test250() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test250"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    var2.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
    com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
    com.google.javascript.rhino.jstype.JSType var11 = var9.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var12 = var9.getTypeOfThis();
    com.google.javascript.rhino.jstype.JSType var13 = var12.unboxesTo();
    com.google.javascript.rhino.jstype.JSType var15 = var12.getRestrictedTypeGivenToBooleanOutcome(false);
    boolean var16 = var12.isNoObjectType();
    boolean var17 = var0.hasNode((java.lang.Object)var16);
    com.google.javascript.jscomp.CheckLevel var22 = null;
    com.google.javascript.jscomp.DiagnosticType var24 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var22, "");
    java.lang.String[] var26 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var27 = com.google.javascript.jscomp.JSError.make("", 100, 0, var24, var26);
    int var28 = var27.getNodeSourceOffset();
    int var29 = var27.getCharno();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var30 = var0.getDirectedPredNodes((java.lang.Object)var29);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);

  }

  public void test251() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test251"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var1 = var0.getGraphvizEdges();
    java.lang.String var2 = var0.getName();
    var0.pushNodeAnnotations();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    int var7 = var5.getSideEffectFlags();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.string("hi!");
    boolean var10 = var9.isNE();
    boolean var11 = var9.isWith();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.getprop(var5, var9);
    java.lang.String var13 = com.google.javascript.jscomp.NodeUtil.getSourceName(var5);
    boolean var14 = var5.isCase();
    boolean var15 = var5.isRegExp();
    java.lang.Object var16 = null;
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var19 = var18.cloneNode();
    boolean var20 = var18.isDelProp();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var23 = var22.cloneNode();
    boolean var24 = var22.isDelProp();
    com.google.javascript.rhino.Node var25 = var18.clonePropsFrom(var22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.connectIfNotFound((java.lang.Object)var5, var16, (java.lang.Object)var18);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "LinkedGraph"+ "'", var2.equals("LinkedGraph"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test252() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test252"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    boolean var9 = var8.isWhile();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.nullNode();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.string("hi!");
    boolean var13 = var12.isNE();
    int var14 = var12.getSideEffectFlags();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.string("hi!");
    boolean var17 = var16.isNE();
    boolean var18 = var16.isWith();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.getprop(var12, var16);
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    boolean var33 = var32.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    var35.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var38 = null;
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType[] var41 = new com.google.javascript.rhino.jstype.JSType[] { var40};
    com.google.javascript.rhino.jstype.FunctionType var42 = var35.createConstructorType(var38, false, var41);
    com.google.javascript.rhino.jstype.JSType var44 = var42.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var45 = var42.getTypeOfThis();
    boolean var46 = var32.canCastTo((com.google.javascript.rhino.jstype.JSType)var42);
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    var48.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.rhino.jstype.JSType var53 = null;
    com.google.javascript.rhino.jstype.JSType[] var54 = new com.google.javascript.rhino.jstype.JSType[] { var53};
    com.google.javascript.rhino.jstype.FunctionType var55 = var48.createConstructorType(var51, false, var54);
    boolean var56 = var55.isInterface();
    com.google.javascript.rhino.jstype.JSType[] var57 = new com.google.javascript.rhino.jstype.JSType[] { var55};
    com.google.javascript.rhino.jstype.FunctionType var58 = var23.createConstructorType((com.google.javascript.rhino.jstype.JSType)var32, var57);
    com.google.javascript.rhino.Node var59 = var21.createOptionalParameters(var57);
    var59.setSourceEncodedPosition(100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.forNode(var8, var10, var12, var59);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test253() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test253"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.script();
    com.google.javascript.rhino.InputId var2 = new com.google.javascript.rhino.InputId("goog.global");
    var0.setInputId(var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.var(var0);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test254() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test254"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
    int var11 = var8.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var13 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var8, "");
    boolean var14 = var8.makesStructs();
    boolean var15 = var8.hasReferenceName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test255() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test255"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.util.Set var9 = null;
    var1.setDirectives(var9);
    boolean var11 = var1.isBreak();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test256() {}
//   public void test256() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test256"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var1);
//     double var3 = var0.getProgress();
//     var0.reportCodeChange();
//     com.google.javascript.jscomp.NodeTraversal.FunctionCallback var5 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseChangedFunctions((com.google.javascript.jscomp.AbstractCompiler)var0, var5);
// 
//   }

  public void test257() {}
//   public void test257() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test257"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
//     var3.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
//     com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
//     boolean var11 = var10.canBeCalled();
//     com.google.javascript.rhino.jstype.FunctionBuilder var13 = var1.withReturnType((com.google.javascript.rhino.jstype.JSType)var10, true);
//     com.google.javascript.jscomp.ClosureCodingConvention var14 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.ErrorReporter var15 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
//     var16.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var19 = null;
//     com.google.javascript.rhino.jstype.JSType var21 = null;
//     com.google.javascript.rhino.jstype.JSType[] var22 = new com.google.javascript.rhino.jstype.JSType[] { var21};
//     com.google.javascript.rhino.jstype.FunctionType var23 = var16.createConstructorType(var19, false, var22);
//     boolean var24 = var23.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var25 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
//     var26.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var29 = null;
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
//     com.google.javascript.rhino.jstype.FunctionType var33 = var26.createConstructorType(var29, false, var32);
//     com.google.javascript.rhino.jstype.JSType var35 = var33.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var36 = var33.getTypeOfThis();
//     boolean var37 = var23.canCastTo((com.google.javascript.rhino.jstype.JSType)var33);
//     com.google.javascript.rhino.ErrorReporter var38 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
//     var39.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     com.google.javascript.rhino.jstype.JSType var44 = null;
//     com.google.javascript.rhino.jstype.JSType[] var45 = new com.google.javascript.rhino.jstype.JSType[] { var44};
//     com.google.javascript.rhino.jstype.FunctionType var46 = var39.createConstructorType(var42, false, var45);
//     com.google.javascript.rhino.jstype.JSType var48 = var46.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var49 = var46.toMaybeFunctionType();
//     com.google.javascript.rhino.ErrorReporter var50 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var50);
//     var51.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var54 = null;
//     com.google.javascript.rhino.jstype.JSType var56 = null;
//     com.google.javascript.rhino.jstype.JSType[] var57 = new com.google.javascript.rhino.jstype.JSType[] { var56};
//     com.google.javascript.rhino.jstype.FunctionType var58 = var51.createConstructorType(var54, false, var57);
//     boolean var59 = var58.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var60 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var60);
//     var61.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var64 = null;
//     com.google.javascript.rhino.jstype.JSType var66 = null;
//     com.google.javascript.rhino.jstype.JSType[] var67 = new com.google.javascript.rhino.jstype.JSType[] { var66};
//     com.google.javascript.rhino.jstype.FunctionType var68 = var61.createConstructorType(var64, false, var67);
//     com.google.javascript.rhino.jstype.JSType var70 = var68.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var71 = var68.getTypeOfThis();
//     boolean var72 = var58.canCastTo((com.google.javascript.rhino.jstype.JSType)var68);
//     var14.applySingletonGetter(var23, var46, (com.google.javascript.rhino.jstype.ObjectType)var68);
//     com.google.javascript.rhino.jstype.FunctionBuilder var74 = var1.withInferredReturnType((com.google.javascript.rhino.jstype.JSType)var68);
//     com.google.javascript.rhino.ErrorReporter var75 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var76 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var75);
//     com.google.javascript.rhino.ErrorReporter var77 = var76.getErrorReporter();
//     com.google.javascript.rhino.jstype.TemplateType var78 = var76.getObjectElementKey();
//     com.google.javascript.rhino.jstype.TemplateType var79 = var78.toMaybeTemplateType();
//     var68.matchConstraint((com.google.javascript.rhino.jstype.JSType)var78);
// 
//   }

  public void test258() {}
//   public void test258() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test258"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("goog.exportProperty");
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var1, false);
//     boolean var4 = var3.isExtern();
//     java.util.Collection var5 = var3.getRequires();
// 
//   }

  public void test259() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test259"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    java.lang.String var2 = var1.getExportPropertyFunction();
    boolean var4 = var1.isValidEnumKey("");
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    int var8 = var6.getSideEffectFlags();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    boolean var11 = var10.isNE();
    boolean var12 = var10.isWith();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.getprop(var6, var10);
    var10.removeProp(0);
    java.lang.String var16 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var10);
    java.util.Set var17 = null;
    var10.setDirectives(var17);
    java.lang.Iterable var19 = var10.siblings();
    boolean var20 = var1.isVarArgsParameter(var10);
    boolean var23 = var1.isExported("STRING hi!", true);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.script();
    com.google.javascript.rhino.Node var28 = new com.google.javascript.rhino.Node(0, var25, 100, 0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var29 = var1.isVarArgsParameter(var28);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "goog.exportProperty"+ "'", var2.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test260() {}
//   public void test260() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test260"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticType var0 = null;
//     java.lang.String[] var2 = new java.lang.String[] { "goog.exportProperty"};
//     com.google.javascript.jscomp.JSError var3 = com.google.javascript.jscomp.JSError.make(var0, var2);
// 
//   }

  public void test261() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test261"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
    com.google.javascript.rhino.jstype.TemplateType var3 = var1.getObjectElementKey();
    com.google.javascript.rhino.ErrorReporter var4 = var1.getErrorReporter();
    boolean var6 = var1.isForwardDeclaredType("LinkedGraph");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test262() {}
//   public void test262() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test262"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
//     com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var4 = var3.isNE();
//     int var5 = var3.getSideEffectFlags();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var8 = var7.isNE();
//     boolean var9 = var7.isWith();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
//     var10.setLineno(10);
//     var1.validateExpression(var10);
//     com.google.javascript.jscomp.ClosureCodingConvention var14 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.jscomp.GoogleCodingConvention var15 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var14);
//     java.lang.String var16 = var15.getExportPropertyFunction();
//     boolean var18 = var15.isValidEnumKey("");
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var21 = var20.isNE();
//     int var22 = var20.getSideEffectFlags();
//     com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var25 = var24.isNE();
//     boolean var26 = var24.isWith();
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.getprop(var20, var24);
//     var24.removeProp(0);
//     java.lang.String var30 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var24);
//     java.util.Set var31 = null;
//     var24.setDirectives(var31);
//     java.lang.Iterable var33 = var24.siblings();
//     boolean var34 = var15.isVarArgsParameter(var24);
//     var1.validateStatement(var24);
// 
//   }

  public void test263() {}
//   public void test263() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test263"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     com.google.javascript.jscomp.Result var4 = var0.getResult();
// 
//   }

  public void test264() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test264"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
    com.google.javascript.rhino.jstype.TemplateType var3 = var1.getObjectElementKey();
    com.google.javascript.rhino.jstype.TemplateType var4 = var3.toMaybeTemplateType();
    java.lang.String var5 = var3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Object#Element"+ "'", var5.equals("Object#Element"));

  }

  public void test265() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test265"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.CheckLevel var1 = com.google.javascript.jscomp.CheckLevel.valueOf("false");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test266() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test266"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    java.util.Set var10 = null;
    var2.setDirectives(var10);
    com.google.javascript.rhino.Node var12 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(0, var2, var12, 100, 0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test267() {}
//   public void test267() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test267"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
//     com.google.javascript.rhino.Node var3 = var2.getCurrentNode();
//     java.lang.String var4 = var2.getSourceName();
//     com.google.javascript.rhino.Node var5 = var2.getEnclosingFunction();
//     com.google.javascript.jscomp.CompilerInput var6 = var2.getInput();
// 
//   }

  public void test268() {}
//   public void test268() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test268"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     int var2 = var1.getErrorCount();
//     com.google.javascript.jscomp.CheckLevel var3 = null;
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var7 = var6.isNE();
//     int var8 = var6.getSideEffectFlags();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var11 = var10.isNE();
//     boolean var12 = var10.isWith();
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.getprop(var6, var10);
//     java.util.Set var14 = null;
//     var6.setDirectives(var14);
//     com.google.javascript.jscomp.CheckLevel var16 = null;
//     com.google.javascript.jscomp.CheckLevel var18 = null;
//     com.google.javascript.jscomp.DiagnosticType var20 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var18, "");
//     java.lang.String[] var21 = null;
//     com.google.javascript.jscomp.JSError var22 = com.google.javascript.jscomp.JSError.make("hi!", var6, var16, var20, var21);
//     com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var27 = var26.isNE();
//     int var28 = var26.getSideEffectFlags();
//     com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var31 = var30.isNE();
//     boolean var32 = var30.isWith();
//     com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.getprop(var26, var30);
//     java.util.Set var34 = null;
//     var26.setDirectives(var34);
//     com.google.javascript.jscomp.CheckLevel var36 = null;
//     com.google.javascript.jscomp.CheckLevel var38 = null;
//     com.google.javascript.jscomp.DiagnosticType var40 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var38, "");
//     java.lang.String[] var41 = null;
//     com.google.javascript.jscomp.JSError var42 = com.google.javascript.jscomp.JSError.make("hi!", var26, var36, var40, var41);
//     com.google.javascript.jscomp.CheckLevel var47 = null;
//     com.google.javascript.jscomp.DiagnosticType var49 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var47, "");
//     java.lang.String[] var51 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var52 = com.google.javascript.jscomp.JSError.make("", 100, 0, var49, var51);
//     java.lang.String[] var54 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var55 = com.google.javascript.jscomp.JSError.make("hi!", var26, var49, var54);
//     com.google.javascript.jscomp.JSError var56 = com.google.javascript.jscomp.JSError.make(var20, var54);
//     var1.report(var3, var56);
//     int var58 = var1.getErrorCount();
//     com.google.javascript.jscomp.CheckLevel var59 = null;
//     com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var63 = var62.isNE();
//     int var64 = var62.getSideEffectFlags();
//     com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var67 = var66.isNE();
//     boolean var68 = var66.isWith();
//     com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.IR.getprop(var62, var66);
//     java.util.Set var70 = null;
//     var62.setDirectives(var70);
//     com.google.javascript.jscomp.CheckLevel var72 = null;
//     com.google.javascript.jscomp.CheckLevel var74 = null;
//     com.google.javascript.jscomp.DiagnosticType var76 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var74, "");
//     java.lang.String[] var77 = null;
//     com.google.javascript.jscomp.JSError var78 = com.google.javascript.jscomp.JSError.make("hi!", var62, var72, var76, var77);
//     int var79 = var78.getNodeSourceOffset();
//     int var80 = var78.getNodeLength();
//     var1.println(var59, var78);
// 
//   }

  public void test269() {}
//   public void test269() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test269"); }
// 
// 
//     java.io.File var0 = null;
//     com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile(var0);
// 
//   }

  public void test270() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test270"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var11 = var8.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    var13.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType[] var19 = new com.google.javascript.rhino.jstype.JSType[] { var18};
    com.google.javascript.rhino.jstype.FunctionType var20 = var13.createConstructorType(var16, false, var19);
    boolean var21 = var20.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    var23.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType[] var29 = new com.google.javascript.rhino.jstype.JSType[] { var28};
    com.google.javascript.rhino.jstype.FunctionType var30 = var23.createConstructorType(var26, false, var29);
    com.google.javascript.rhino.jstype.JSType var32 = var30.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var33 = var30.getTypeOfThis();
    boolean var34 = var20.canCastTo((com.google.javascript.rhino.jstype.JSType)var30);
    boolean var35 = var8.hasEqualCallType(var30);
    boolean var36 = var30.isNumber();
    boolean var38 = var30.hasProperty("Node tree inequality:\nTree1:\nSTRING LinkedGraph\n\n\nTree2:\nSTRING hi!\n\n\nSubtree1: STRING LinkedGraph\n\n\nSubtree2: STRING hi!\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test271() {}
//   public void test271() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test271"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     com.google.javascript.jscomp.type.ReverseAbstractInterpreter var2 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var3 = null;
//     com.google.javascript.jscomp.CheckLevel var4 = null;
//     com.google.javascript.jscomp.CheckLevel var5 = null;
//     com.google.javascript.jscomp.TypeCheck var6 = new com.google.javascript.jscomp.TypeCheck((com.google.javascript.jscomp.AbstractCompiler)var0, var2, var3, var4, var5);
// 
//   }

  public void test272() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test272"); }


    com.google.javascript.jscomp.DiagnosticGroups var0 = new com.google.javascript.jscomp.DiagnosticGroups();
    com.google.javascript.jscomp.DiagnosticGroup var2 = var0.forName("hi!: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test273() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test273"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var1 = var0.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
    com.google.javascript.rhino.jstype.JSType var12 = var10.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var13 = var10.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var14 = var0.getNode((java.lang.Object)var13);
    java.util.List var15 = var0.getEdges();
    com.google.javascript.rhino.ErrorReporter var16 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
    var17.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.rhino.jstype.JSType var22 = null;
    com.google.javascript.rhino.jstype.JSType[] var23 = new com.google.javascript.rhino.jstype.JSType[] { var22};
    com.google.javascript.rhino.jstype.FunctionType var24 = var17.createConstructorType(var20, false, var23);
    boolean var25 = var24.isInterface();
    boolean var26 = var24.isInstanceType();
    boolean var27 = var24.matchesNumberContext();
    java.lang.Object var28 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var29 = var0.getDirectedGraphEdges((java.lang.Object)var27, var28);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test274() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test274"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    com.google.javascript.rhino.Node var12 = var10.getLastSibling();
    var12.setLineno(100);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var17 = var16.cloneNode();
    boolean var18 = var16.isDelProp();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var21 = var20.cloneNode();
    boolean var22 = var20.isDelProp();
    com.google.javascript.rhino.Node var23 = var16.clonePropsFrom(var20);
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
    com.google.javascript.rhino.Node var29 = var28.getLastChild();
    com.google.javascript.rhino.Node var30 = var20.srcrefTree(var28);
    boolean var31 = var28.isUnscopedQualifiedName();
    boolean var32 = var28.isContinue();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.add(var12, var28);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test275() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test275"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    var2.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
    com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
    boolean var10 = var9.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    var12.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
    com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
    boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    var37.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
    boolean var45 = var44.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    var47.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
    com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
    boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
    var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
    boolean var61 = var0.isSuperClassReference("");
    com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.Node.newString("hi!: ");
    boolean var64 = var63.isSetterDef();
    com.google.javascript.rhino.Node var65 = var63.getLastSibling();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var66 = var0.isPropertyTestFunction(var63);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test276() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test276"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var1 = var0.getGraphvizEdges();
    com.google.javascript.jscomp.SourceAst var2 = null;
    com.google.javascript.jscomp.CompilerInput var5 = new com.google.javascript.jscomp.CompilerInput(var2, "hi!", false);
    com.google.javascript.jscomp.SourceAst var6 = var5.getSourceAst();
    com.google.javascript.rhino.InputId var7 = var5.getInputId();
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.ErrorReporter var10 = var9.getErrorReporter();
    com.google.javascript.rhino.jstype.TemplateType var11 = var9.getObjectElementKey();
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    var13.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType[] var19 = new com.google.javascript.rhino.jstype.JSType[] { var18};
    com.google.javascript.rhino.jstype.FunctionType var20 = var13.createConstructorType(var16, false, var19);
    com.google.javascript.rhino.jstype.JSType var22 = var20.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var23 = var20.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    boolean var33 = var32.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    var35.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var38 = null;
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType[] var41 = new com.google.javascript.rhino.jstype.JSType[] { var40};
    com.google.javascript.rhino.jstype.FunctionType var42 = var35.createConstructorType(var38, false, var41);
    com.google.javascript.rhino.jstype.JSType var44 = var42.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var45 = var42.getTypeOfThis();
    boolean var46 = var32.canCastTo((com.google.javascript.rhino.jstype.JSType)var42);
    boolean var47 = var20.hasEqualCallType(var42);
    boolean var48 = var20.matchesUint32Context();
    com.google.javascript.rhino.jstype.JSType var50 = var9.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType)var20, "goog.global");
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.script();
    com.google.javascript.rhino.Node var55 = new com.google.javascript.rhino.Node(0, var52, 100, 0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.connectIfNotFound((java.lang.Object)var7, (java.lang.Object)var9, (java.lang.Object)0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test277() {}
//   public void test277() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test277"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var4);
//     var0.processDefines();
// 
//   }

  public void test278() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test278"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var12 = var10.getJsDocBuilderForNode();
    int var13 = var10.getCharno();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.cast(var10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));

  }

  public void test279() {}
//   public void test279() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test279"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
//     com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var4 = var3.isNE();
//     int var5 = var3.getSideEffectFlags();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var8 = var7.isNE();
//     boolean var9 = var7.isWith();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
//     java.util.Set var11 = null;
//     var3.setDirectives(var11);
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var16 = var15.isNE();
//     int var17 = var15.getSideEffectFlags();
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var20 = var19.isNE();
//     boolean var21 = var19.isWith();
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.getprop(var15, var19);
//     java.util.Set var23 = null;
//     var15.setDirectives(var23);
//     com.google.javascript.jscomp.CheckLevel var25 = null;
//     com.google.javascript.jscomp.CheckLevel var27 = null;
//     com.google.javascript.jscomp.DiagnosticType var29 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var27, "");
//     java.lang.String[] var30 = null;
//     com.google.javascript.jscomp.JSError var31 = com.google.javascript.jscomp.JSError.make("hi!", var15, var25, var29, var30);
//     com.google.javascript.rhino.Node var32 = var3.useSourceInfoIfMissingFrom(var15);
//     boolean var33 = var15.isReturn();
//     com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var36 = var35.isNE();
//     int var37 = var35.getSideEffectFlags();
//     boolean var38 = var35.isReturn();
//     var1.process(var15, var35);
// 
//   }

  public void test280() {}
//   public void test280() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test280"); }
// 
// 
//     com.google.javascript.rhino.SimpleErrorReporter var0 = new com.google.javascript.rhino.SimpleErrorReporter();
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry((com.google.javascript.rhino.ErrorReporter)var0);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry((com.google.javascript.rhino.ErrorReporter)var0, true);
//     com.google.javascript.rhino.jstype.JSType var4 = null;
//     com.google.javascript.rhino.jstype.JSType[] var5 = null;
//     com.google.javascript.rhino.jstype.FunctionType var6 = var3.createFunctionTypeWithVarArgs(var4, var5);
// 
//   }

  public void test281() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test281"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var11 = var8.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    var13.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType[] var19 = new com.google.javascript.rhino.jstype.JSType[] { var18};
    com.google.javascript.rhino.jstype.FunctionType var20 = var13.createConstructorType(var16, false, var19);
    boolean var21 = var20.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    var23.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType[] var29 = new com.google.javascript.rhino.jstype.JSType[] { var28};
    com.google.javascript.rhino.jstype.FunctionType var30 = var23.createConstructorType(var26, false, var29);
    com.google.javascript.rhino.jstype.JSType var32 = var30.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var33 = var30.getTypeOfThis();
    boolean var34 = var20.canCastTo((com.google.javascript.rhino.jstype.JSType)var30);
    boolean var35 = var8.hasEqualCallType(var30);
    java.lang.Iterable var36 = var30.getAllExtendedInterfaces();
    java.lang.Iterable var37 = var30.getAllImplementedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test282() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test282"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    var1.clearNamedTypes();
    com.google.javascript.rhino.jstype.TemplateType var10 = var1.getObjectElementKey();
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    java.lang.Iterable var14 = var12.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
    var16.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.jstype.JSType var21 = null;
    com.google.javascript.rhino.jstype.JSType[] var22 = new com.google.javascript.rhino.jstype.JSType[] { var21};
    com.google.javascript.rhino.jstype.FunctionType var23 = var16.createConstructorType(var19, false, var22);
    boolean var24 = var23.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    var26.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var29 = null;
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.jstype.FunctionType var33 = var26.createConstructorType(var29, false, var32);
    com.google.javascript.rhino.jstype.FunctionType var34 = var12.createConstructorType((com.google.javascript.rhino.jstype.JSType)var23, var32);
    com.google.javascript.rhino.ErrorReporter var35 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var35);
    var36.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var39 = null;
    com.google.javascript.rhino.jstype.JSType var41 = null;
    com.google.javascript.rhino.jstype.JSType[] var42 = new com.google.javascript.rhino.jstype.JSType[] { var41};
    com.google.javascript.rhino.jstype.FunctionType var43 = var36.createConstructorType(var39, false, var42);
    com.google.javascript.rhino.jstype.JSType var45 = var43.findPropertyType("hi!");
    int var46 = var43.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var48 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var43, "");
    boolean var49 = var43.makesStructs();
    boolean var50 = var34.isSubtype((com.google.javascript.rhino.jstype.JSType)var43);
    boolean var51 = var34.isNumber();
    com.google.javascript.rhino.ErrorReporter var52 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var52);
    var53.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var56 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var56);
    var57.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var60 = null;
    com.google.javascript.rhino.jstype.JSType var62 = null;
    com.google.javascript.rhino.jstype.JSType[] var63 = new com.google.javascript.rhino.jstype.JSType[] { var62};
    com.google.javascript.rhino.jstype.FunctionType var64 = var57.createConstructorType(var60, false, var63);
    com.google.javascript.rhino.jstype.JSType var66 = var64.findPropertyType("hi!");
    int var67 = var64.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var68 = new com.google.javascript.rhino.jstype.JSType[] { var64};
    com.google.javascript.rhino.Node var69 = var53.createParametersWithVarArgs(var68);
    com.google.javascript.rhino.jstype.TemplateType var70 = var53.getObjectIndexKey();
    boolean var71 = var53.shouldTolerateUndefinedValues();
    com.google.javascript.rhino.ErrorReporter var72 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var73 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var72);
    var73.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var76 = null;
    com.google.javascript.rhino.jstype.JSType var78 = null;
    com.google.javascript.rhino.jstype.JSType[] var79 = new com.google.javascript.rhino.jstype.JSType[] { var78};
    com.google.javascript.rhino.jstype.FunctionType var80 = var73.createConstructorType(var76, false, var79);
    boolean var81 = var80.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var82 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var83 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var82);
    var83.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var86 = null;
    com.google.javascript.rhino.jstype.JSType var88 = null;
    com.google.javascript.rhino.jstype.JSType[] var89 = new com.google.javascript.rhino.jstype.JSType[] { var88};
    com.google.javascript.rhino.jstype.FunctionType var90 = var83.createConstructorType(var86, false, var89);
    com.google.javascript.rhino.jstype.JSType var92 = var90.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var93 = var90.toMaybeFunctionType();
    boolean var95 = var93.isPropertyTypeDeclared("goog.exportProperty");
    com.google.javascript.rhino.jstype.JSType[] var96 = new com.google.javascript.rhino.jstype.JSType[] { var93};
    com.google.javascript.rhino.jstype.FunctionType var97 = var53.createFunctionType((com.google.javascript.rhino.jstype.JSType)var80, var96);
    com.google.javascript.rhino.jstype.FunctionType var98 = var1.createFunctionType((com.google.javascript.rhino.jstype.JSType)var34, var96);
    boolean var99 = var98.isOrdinaryFunction();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == true);

  }

  public void test283() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test283"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.lang.String var9 = com.google.javascript.jscomp.NodeUtil.getSourceName(var1);
    boolean var10 = var1.isCase();
    boolean var11 = var1.isRegExp();
    com.google.javascript.rhino.Node var12 = var1.detachFromParent();
    com.google.javascript.rhino.Node var13 = var12.getFirstChild();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test284() {}
//   public void test284() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test284"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     java.lang.Iterable var3 = var1.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     boolean var13 = var12.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var14 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
//     var15.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var18 = null;
//     com.google.javascript.rhino.jstype.JSType var20 = null;
//     com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
//     com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
//     com.google.javascript.rhino.jstype.FunctionType var23 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var12, var21);
//     com.google.javascript.rhino.ErrorReporter var24 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
//     java.lang.Iterable var27 = var25.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var28 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
//     var29.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var32 = null;
//     com.google.javascript.rhino.jstype.JSType var34 = null;
//     com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var34};
//     com.google.javascript.rhino.jstype.FunctionType var36 = var29.createConstructorType(var32, false, var35);
//     boolean var37 = var36.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var38 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
//     var39.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     com.google.javascript.rhino.jstype.JSType var44 = null;
//     com.google.javascript.rhino.jstype.JSType[] var45 = new com.google.javascript.rhino.jstype.JSType[] { var44};
//     com.google.javascript.rhino.jstype.FunctionType var46 = var39.createConstructorType(var42, false, var45);
//     com.google.javascript.rhino.jstype.FunctionType var47 = var25.createConstructorType((com.google.javascript.rhino.jstype.JSType)var36, var45);
//     boolean var48 = var36.isReturnTypeInferred();
//     boolean var49 = var36.isTemplatizedType();
//     com.google.javascript.rhino.ErrorReporter var50 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var50);
//     com.google.javascript.rhino.ErrorReporter var52 = var51.getErrorReporter();
//     com.google.javascript.rhino.jstype.TemplateType var53 = var51.getObjectElementKey();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var54 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var55 = var54.getGraphvizNodes();
//     com.google.javascript.rhino.ErrorReporter var56 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var56);
//     var57.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var60 = null;
//     com.google.javascript.rhino.jstype.JSType var62 = null;
//     com.google.javascript.rhino.jstype.JSType[] var63 = new com.google.javascript.rhino.jstype.JSType[] { var62};
//     com.google.javascript.rhino.jstype.FunctionType var64 = var57.createConstructorType(var60, false, var63);
//     com.google.javascript.rhino.jstype.JSType var66 = var64.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var67 = var64.getTypeOfThis();
//     com.google.javascript.jscomp.graph.GraphNode var68 = var54.getNode((java.lang.Object)var67);
//     java.util.List var69 = var54.getEdges();
//     com.google.javascript.rhino.jstype.JSType var70 = var1.createFunctionType((com.google.javascript.rhino.jstype.ObjectType)var36, (com.google.javascript.rhino.jstype.JSType)var53, var69);
//     boolean var71 = var53.isStruct();
// 
//   }

  public void test285() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test285"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.Node.newString(100, "Unversioned directory");
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    int var8 = var6.getSideEffectFlags();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    boolean var11 = var10.isNE();
    boolean var12 = var10.isWith();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.getprop(var6, var10);
    java.util.Set var14 = null;
    var6.setDirectives(var14);
    com.google.javascript.jscomp.CheckLevel var16 = null;
    com.google.javascript.jscomp.CheckLevel var18 = null;
    com.google.javascript.jscomp.DiagnosticType var20 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var18, "");
    java.lang.String[] var21 = null;
    com.google.javascript.jscomp.JSError var22 = com.google.javascript.jscomp.JSError.make("hi!", var6, var16, var20, var21);
    com.google.javascript.jscomp.CheckLevel var27 = null;
    com.google.javascript.jscomp.DiagnosticType var29 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var27, "");
    java.lang.String[] var31 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var32 = com.google.javascript.jscomp.JSError.make("", 100, 0, var29, var31);
    java.lang.String[] var34 = new java.lang.String[] { "hi!"};
    com.google.javascript.jscomp.JSError var35 = com.google.javascript.jscomp.JSError.make("hi!", var6, var29, var34);
    com.google.javascript.rhino.InputId var36 = com.google.javascript.jscomp.NodeUtil.getInputId(var6);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var39 = var38.cloneNode();
    boolean var40 = var38.isDelProp();
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var43 = var42.cloneNode();
    boolean var44 = var42.isDelProp();
    com.google.javascript.rhino.Node var45 = var38.clonePropsFrom(var42);
    com.google.javascript.rhino.JSDocInfo var46 = var42.getJSDocInfo();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.breakNode(var42);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.replaceChildAfter(var6, var42);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test286() {}
//   public void test286() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test286"); }
// 
// 
//     java.util.Map var0 = null;
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var3 = var2.isNE();
//     boolean var4 = var2.isWith();
//     java.util.Set var5 = null;
//     var2.setDirectives(var5);
//     com.google.javascript.jscomp.NodeUtil.verifyScopeChanges(var0, var2, true);
// 
//   }

  public void test287() {}
//   public void test287() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test287"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     boolean var2 = var0.acceptConstKeyword();
// 
//   }

  public void test288() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test288"); }


    com.google.javascript.jscomp.DependencyOptions var0 = new com.google.javascript.jscomp.DependencyOptions();
    com.google.javascript.jscomp.DependencyOptions var2 = var0.setDependencySorting(false);
    com.google.javascript.jscomp.DependencyOptions var4 = var0.setMoocherDropping(false);
    com.google.javascript.jscomp.DependencyOptions var6 = var0.setDependencySorting(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test289() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test289"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var2 = var1.cloneNode();
    boolean var3 = var1.isDelProp();
    int var4 = var1.getSideEffectFlags();
    boolean var5 = var1.isQuotedString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.var(var1);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test290() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test290"); }


    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
    var4.setQuotedString();
    boolean var6 = var4.isLabelName();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.ifNode(var4, var8);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test291() {}
//   public void test291() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test291"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var4 = null;
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
//     com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
//     com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
//     int var11 = var8.getPropertiesCount();
//     com.google.javascript.rhino.jstype.ObjectType var13 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var8, "");
//     boolean var14 = var8.isFunctionPrototypeType();
//     boolean var15 = var8.isEmptyType();
//     var8.clearCachedValues();
//     com.google.javascript.rhino.jstype.FunctionType var17 = var8.toMaybeFunctionType();
//     com.google.javascript.rhino.SimpleErrorReporter var18 = new com.google.javascript.rhino.SimpleErrorReporter();
//     var18.error("LinkedGraph", "hi!", 0, 100);
//     com.google.javascript.rhino.ErrorReporter var24 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
//     com.google.javascript.rhino.ErrorReporter var26 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
//     com.google.javascript.rhino.ErrorReporter var28 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
//     var29.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var32 = null;
//     com.google.javascript.rhino.jstype.JSType var34 = null;
//     com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var34};
//     com.google.javascript.rhino.jstype.FunctionType var36 = var29.createConstructorType(var32, false, var35);
//     boolean var37 = var36.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var38 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
//     var39.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     com.google.javascript.rhino.jstype.JSType var44 = null;
//     com.google.javascript.rhino.jstype.JSType[] var45 = new com.google.javascript.rhino.jstype.JSType[] { var44};
//     com.google.javascript.rhino.jstype.FunctionType var46 = var39.createConstructorType(var42, false, var45);
//     com.google.javascript.rhino.jstype.JSType var48 = var46.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var49 = var46.getTypeOfThis();
//     boolean var50 = var36.canCastTo((com.google.javascript.rhino.jstype.JSType)var46);
//     com.google.javascript.rhino.ErrorReporter var51 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
//     var52.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var55 = null;
//     com.google.javascript.rhino.jstype.JSType var57 = null;
//     com.google.javascript.rhino.jstype.JSType[] var58 = new com.google.javascript.rhino.jstype.JSType[] { var57};
//     com.google.javascript.rhino.jstype.FunctionType var59 = var52.createConstructorType(var55, false, var58);
//     boolean var60 = var59.isInterface();
//     com.google.javascript.rhino.jstype.JSType[] var61 = new com.google.javascript.rhino.jstype.JSType[] { var59};
//     com.google.javascript.rhino.jstype.FunctionType var62 = var27.createConstructorType((com.google.javascript.rhino.jstype.JSType)var36, var61);
//     com.google.javascript.rhino.Node var63 = var25.createOptionalParameters(var61);
//     com.google.javascript.rhino.ErrorReporter var65 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var65);
//     java.lang.Iterable var68 = var66.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var69 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var69);
//     var70.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var73 = null;
//     com.google.javascript.rhino.jstype.JSType var75 = null;
//     com.google.javascript.rhino.jstype.JSType[] var76 = new com.google.javascript.rhino.jstype.JSType[] { var75};
//     com.google.javascript.rhino.jstype.FunctionType var77 = var70.createConstructorType(var73, false, var76);
//     boolean var78 = var77.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var79 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var80 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var79);
//     var80.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var83 = null;
//     com.google.javascript.rhino.jstype.JSType var85 = null;
//     com.google.javascript.rhino.jstype.JSType[] var86 = new com.google.javascript.rhino.jstype.JSType[] { var85};
//     com.google.javascript.rhino.jstype.FunctionType var87 = var80.createConstructorType(var83, false, var86);
//     com.google.javascript.rhino.jstype.FunctionType var88 = var66.createConstructorType((com.google.javascript.rhino.jstype.JSType)var77, var86);
//     com.google.javascript.rhino.jstype.TemplateType var89 = var66.getObjectIndexKey();
//     var25.unregisterPropertyOnType("hi!: ", (com.google.javascript.rhino.jstype.JSType)var89);
//     java.lang.Iterable var92 = var25.getTypesWithProperty("");
//     com.google.javascript.rhino.jstype.TemplateType var94 = var25.createTemplateType("false");
//     com.google.javascript.rhino.jstype.JSType var95 = var17.resolve((com.google.javascript.rhino.ErrorReporter)var18, (com.google.javascript.rhino.jstype.StaticScope)var94);
// 
//   }

  public void test292() {}
//   public void test292() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test292"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var4);
//     java.lang.String var8 = var0.getSourceLine("hi!: ", (-1));
//     com.google.javascript.jscomp.JSError[] var9 = var0.getErrors();
// 
//   }

  public void test293() {}
//   public void test293() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test293"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     com.google.javascript.rhino.ErrorReporter var1 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
//     var2.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
//     com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
//     com.google.javascript.rhino.jstype.JSType var11 = var9.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var12 = var9.getTypeOfThis();
//     com.google.javascript.rhino.jstype.JSType var13 = var12.unboxesTo();
//     com.google.javascript.rhino.jstype.JSType var15 = var12.getRestrictedTypeGivenToBooleanOutcome(false);
//     boolean var16 = var12.isNoObjectType();
//     boolean var17 = var0.hasNode((java.lang.Object)var16);
//     boolean var18 = var0.isDirected();
//     var0.pushNodeAnnotations();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var20 = null;
//     java.util.List var21 = var0.getNeighborNodes(var20);
// 
//   }

  public void test294() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test294"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromCode("", "LinkedGraph", "goog.exportProperty");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test295() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test295"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.util.Set var9 = null;
    var1.setDirectives(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    int var15 = var13.getSideEffectFlags();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    boolean var19 = var17.isWith();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
    java.util.Set var21 = null;
    var13.setDirectives(var21);
    com.google.javascript.jscomp.CheckLevel var23 = null;
    com.google.javascript.jscomp.CheckLevel var25 = null;
    com.google.javascript.jscomp.DiagnosticType var27 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var25, "");
    java.lang.String[] var28 = null;
    com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("hi!", var13, var23, var27, var28);
    com.google.javascript.rhino.Node var30 = var1.useSourceInfoIfMissingFrom(var13);
    int var31 = var13.getSideEffectFlags();
    boolean var32 = var13.isVar();
    com.google.javascript.jscomp.AstValidator.ViolationHandler var33 = null;
    com.google.javascript.jscomp.AstValidator var34 = new com.google.javascript.jscomp.AstValidator(var33);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.string("hi!");
    boolean var37 = var36.isNE();
    int var38 = var36.getSideEffectFlags();
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.string("hi!");
    boolean var41 = var40.isNE();
    boolean var42 = var40.isWith();
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.getprop(var36, var40);
    var43.setLineno(10);
    var34.validateExpression(var43);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.string("hi!");
    boolean var49 = var48.isNE();
    int var50 = var48.getSideEffectFlags();
    boolean var51 = var48.isReturn();
    var43.addChildrenToBack(var48);
    var48.setLength(100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var13.addChildrenToBack(var48);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test296() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test296"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
    boolean var4 = var3.isNE();
    int var5 = var3.getSideEffectFlags();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
    boolean var8 = var7.isNE();
    boolean var9 = var7.isWith();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
    java.util.Set var11 = null;
    var3.setDirectives(var11);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.string("hi!");
    boolean var16 = var15.isNE();
    int var17 = var15.getSideEffectFlags();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.string("hi!");
    boolean var20 = var19.isNE();
    boolean var21 = var19.isWith();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.getprop(var15, var19);
    java.util.Set var23 = null;
    var15.setDirectives(var23);
    com.google.javascript.jscomp.CheckLevel var25 = null;
    com.google.javascript.jscomp.CheckLevel var27 = null;
    com.google.javascript.jscomp.DiagnosticType var29 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var27, "");
    java.lang.String[] var30 = null;
    com.google.javascript.jscomp.JSError var31 = com.google.javascript.jscomp.JSError.make("hi!", var15, var25, var29, var30);
    com.google.javascript.rhino.Node var32 = var3.useSourceInfoIfMissingFrom(var15);
    com.google.javascript.rhino.Node var34 = var15.getAncestor(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var35 = var1.isInlinableFunction(var15);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test297() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test297"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.block();
    int var1 = var0.getSourceOffset();
    com.google.javascript.rhino.Node[] var2 = new com.google.javascript.rhino.Node[] { var0};
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.script(var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.arraylit(var2);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test298() {}
//   public void test298() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test298"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     java.util.Collection var1 = var0.getAssertionFunctions();
//     java.lang.String var2 = var0.getDelegateSuperclassName();
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.block();
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var6 = var5.isNE();
//     boolean var7 = var5.isFunction();
//     java.lang.String var8 = var0.extractClassNameIfRequire(var3, var5);
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var11 = var10.isNE();
//     int var12 = var10.getSideEffectFlags();
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var15 = var14.isNE();
//     boolean var16 = var14.isWith();
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.getprop(var10, var14);
//     var14.removeProp(0);
//     java.lang.String var20 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var14);
//     java.util.Set var21 = null;
//     var14.setDirectives(var21);
//     com.google.javascript.rhino.Node.FileLevelJsDocBuilder var23 = var14.getJsDocBuilderForNode();
//     com.google.javascript.rhino.Node var24 = null;
//     java.lang.String var25 = var0.extractClassNameIfRequire(var14, var24);
// 
//   }

  public void test299() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test299"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    java.util.Set var10 = null;
    var2.setDirectives(var10);
    com.google.javascript.jscomp.CheckLevel var12 = null;
    com.google.javascript.jscomp.CheckLevel var14 = null;
    com.google.javascript.jscomp.DiagnosticType var16 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var14, "");
    java.lang.String[] var17 = null;
    com.google.javascript.jscomp.JSError var18 = com.google.javascript.jscomp.JSError.make("hi!", var2, var12, var16, var17);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.string("hi!");
    boolean var22 = var21.isNE();
    int var23 = var21.getSideEffectFlags();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.string("hi!");
    boolean var26 = var25.isNE();
    boolean var27 = var25.isWith();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.getprop(var21, var25);
    java.util.Set var29 = null;
    var21.setDirectives(var29);
    com.google.javascript.jscomp.CheckLevel var31 = null;
    com.google.javascript.jscomp.CheckLevel var33 = null;
    com.google.javascript.jscomp.DiagnosticType var35 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var33, "");
    java.lang.String[] var36 = null;
    com.google.javascript.jscomp.JSError var37 = com.google.javascript.jscomp.JSError.make("hi!", var21, var31, var35, var36);
    var21.addSuppression("");
    com.google.javascript.rhino.Node var40 = var2.useSourceInfoFromForTree(var21);
    boolean var41 = var21.isGetElem();
    com.google.javascript.rhino.Node var43 = var21.getChildAtIndex((-1));
    boolean var44 = var21.isTrue();
    com.google.javascript.rhino.jstype.JSTypeRegistry var45 = null;
    com.google.javascript.rhino.jstype.FunctionParamBuilder var46 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var45);
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    var48.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.rhino.jstype.JSType var53 = null;
    com.google.javascript.rhino.jstype.JSType[] var54 = new com.google.javascript.rhino.jstype.JSType[] { var53};
    com.google.javascript.rhino.jstype.FunctionType var55 = var48.createConstructorType(var51, false, var54);
    boolean var56 = var46.addRequiredParams(var54);
    com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var59 = var58.cloneNode();
    boolean var60 = var58.isDelProp();
    int var61 = var58.getSideEffectFlags();
    com.google.javascript.rhino.Node var62 = var46.newOptionalParameterFromNode(var58);
    var21.addChildToBack(var58);
    com.google.javascript.rhino.Node var64 = null;
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.block();
    int var66 = var65.getSourceOffset();
    com.google.javascript.rhino.Node[] var67 = new com.google.javascript.rhino.Node[] { var65};
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.script(var67);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.IR.ifNode(var58, var64, var68);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test300() {}
//   public void test300() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test300"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     var1.processDefines();
// 
//   }

  public void test301() {}
//   public void test301() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test301"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     boolean var13 = var12.canBeCalled();
//     boolean var14 = var12.isTemplatizedType();
//     com.google.javascript.rhino.ErrorReporter var16 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
//     var17.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var20 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
//     var21.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var24 = null;
//     com.google.javascript.rhino.jstype.JSType var26 = null;
//     com.google.javascript.rhino.jstype.JSType[] var27 = new com.google.javascript.rhino.jstype.JSType[] { var26};
//     com.google.javascript.rhino.jstype.FunctionType var28 = var21.createConstructorType(var24, false, var27);
//     com.google.javascript.rhino.jstype.JSType var30 = var28.findPropertyType("hi!");
//     int var31 = var28.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var28};
//     com.google.javascript.rhino.Node var33 = var17.createParametersWithVarArgs(var32);
//     com.google.javascript.rhino.jstype.FunctionType var34 = var1.createFunctionType((com.google.javascript.rhino.jstype.JSType)var12, false, var32);
//     com.google.javascript.rhino.ErrorReporter var35 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var35);
//     var36.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var39 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var39);
//     var40.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var43 = null;
//     com.google.javascript.rhino.jstype.JSType var45 = null;
//     com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
//     com.google.javascript.rhino.jstype.FunctionType var47 = var40.createConstructorType(var43, false, var46);
//     com.google.javascript.rhino.jstype.JSType var49 = var47.findPropertyType("hi!");
//     int var50 = var47.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var51 = new com.google.javascript.rhino.jstype.JSType[] { var47};
//     com.google.javascript.rhino.Node var52 = var36.createParametersWithVarArgs(var51);
//     com.google.javascript.rhino.jstype.TemplateType var53 = var36.getObjectIndexKey();
//     var36.clearTemplateTypeNames();
//     com.google.javascript.rhino.jstype.TemplateType var55 = var36.getObjectElementKey();
//     com.google.common.collect.ImmutableList var56 = null;
//     com.google.javascript.rhino.jstype.TemplatizedType var57 = var1.createTemplatizedType((com.google.javascript.rhino.jstype.ObjectType)var55, var56);
// 
//   }

  public void test302() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test302"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("goog.exportProperty");
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var1, false);
    boolean var4 = var3.isExtern();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var5 = var3.getPathRelativeToClosureBase();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test303() {}
//   public void test303() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test303"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
//     com.google.javascript.rhino.jstype.FunctionBuilder var2 = var1.forConstructor();
//     com.google.common.collect.ImmutableList var3 = null;
//     com.google.javascript.rhino.jstype.FunctionBuilder var4 = var2.withTemplateKeys(var3);
// 
//   }

  public void test304() {}
//   public void test304() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test304"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Region var3 = var0.getSourceRegion("", 10);
// 
//   }

  public void test305() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test305"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.disabled("Object#Element", "goog.exportProperty");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test306() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test306"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionParamBuilder var1 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
    boolean var11 = var1.addRequiredParams(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    int var15 = var13.getSideEffectFlags();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    boolean var19 = var17.isWith();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.string("hi!");
    var17.addChildToBack(var22);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var24 = var22.getJsDocBuilderForNode();
    int var25 = var22.getCharno();
    java.lang.Object var27 = var22.getProp(10);
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.string("hi!");
    boolean var30 = var29.isNE();
    int var31 = var29.getSideEffectFlags();
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.string("hi!");
    boolean var34 = var33.isNE();
    boolean var35 = var33.isWith();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.getprop(var29, var33);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.string("hi!");
    var33.addChildToBack(var38);
    com.google.javascript.rhino.Node var40 = var22.srcrefTree(var38);
    com.google.javascript.rhino.Node var41 = var1.newParameterFromNode(var22);
    boolean var42 = var22.isSwitch();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test307() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test307"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var12 = var10.getJsDocBuilderForNode();
    int var13 = var10.getCharno();
    java.lang.Object var15 = var10.getProp(10);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    int var19 = var17.getSideEffectFlags();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.string("hi!");
    boolean var22 = var21.isNE();
    boolean var23 = var21.isWith();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.getprop(var17, var21);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.string("hi!");
    var21.addChildToBack(var26);
    com.google.javascript.rhino.Node var28 = var10.srcrefTree(var26);
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.string("hi!");
    boolean var31 = var30.isNE();
    int var32 = var30.getSideEffectFlags();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.string("hi!");
    boolean var35 = var34.isNE();
    boolean var36 = var34.isWith();
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.getprop(var30, var34);
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.string("hi!");
    var34.addChildToBack(var39);
    boolean var41 = var34.isVar();
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.string("hi!");
    boolean var44 = var43.isNE();
    int var45 = var43.getSideEffectFlags();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.string("hi!");
    boolean var48 = var47.isNE();
    boolean var49 = var47.isWith();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.getprop(var43, var47);
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.string("hi!");
    var47.addChildToBack(var52);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var54 = var52.getJsDocBuilderForNode();
    int var55 = var52.getCharno();
    boolean var56 = var34.isEquivalentTo(var52);
    com.google.javascript.rhino.Node var57 = var28.useSourceInfoFrom(var52);
    com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.nullNode();
    boolean var59 = var58.isGetElem();
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var62 = var61.cloneNode();
    boolean var63 = var58.isEquivalentToShallow(var61);
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var66 = var65.cloneNode();
    boolean var67 = var65.isDelProp();
    com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var70 = var69.cloneNode();
    boolean var71 = var69.isDelProp();
    com.google.javascript.rhino.Node var72 = var65.clonePropsFrom(var69);
    boolean var73 = var65.isHook();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var57.addChildBefore(var58, var65);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test308() {}
//   public void test308() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test308"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
//     int var15 = var12.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
//     com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
//     com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
//     com.google.javascript.rhino.ErrorReporter var19 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
//     var20.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var23 = null;
//     com.google.javascript.rhino.jstype.JSType var25 = null;
//     com.google.javascript.rhino.jstype.JSType[] var26 = new com.google.javascript.rhino.jstype.JSType[] { var25};
//     com.google.javascript.rhino.jstype.FunctionType var27 = var20.createConstructorType(var23, false, var26);
//     boolean var28 = var27.isInterface();
//     boolean var29 = var27.hasInstanceType();
//     boolean var30 = var18.canTestForEqualityWith((com.google.javascript.rhino.jstype.JSType)var27);
// 
//   }

  public void test309() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test309"); }


    com.google.javascript.rhino.Node var0 = null;
    com.google.javascript.rhino.InputId var1 = com.google.javascript.jscomp.NodeUtil.getInputId(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test310() {}
//   public void test310() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test310"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     double var1 = var0.getProgress();
//     double var2 = var0.getProgress();
//     boolean var3 = var0.acceptConstKeyword();
// 
//   }

  public void test311() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test311"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    java.util.Collection var1 = var0.getNodes();
    var0.clearNodeAnnotations();
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
    com.google.javascript.rhino.ErrorReporter var5 = var4.getErrorReporter();
    com.google.javascript.rhino.jstype.TemplateType var6 = var4.getObjectElementKey();
    var6.clearCachedValues();
    int var8 = var6.getPropertiesCount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var9 = var0.getInEdges((java.lang.Object)var6);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test312() {}
//   public void test312() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test312"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
//     int var15 = var12.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
//     com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
//     com.google.javascript.rhino.jstype.FunctionType var18 = null;
//     com.google.javascript.rhino.ErrorReporter var19 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
//     var20.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var23 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
//     var24.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var27 = null;
//     com.google.javascript.rhino.jstype.JSType var29 = null;
//     com.google.javascript.rhino.jstype.JSType[] var30 = new com.google.javascript.rhino.jstype.JSType[] { var29};
//     com.google.javascript.rhino.jstype.FunctionType var31 = var24.createConstructorType(var27, false, var30);
//     com.google.javascript.rhino.jstype.JSType var33 = var31.findPropertyType("hi!");
//     int var34 = var31.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var31};
//     com.google.javascript.rhino.Node var36 = var20.createParametersWithVarArgs(var35);
//     com.google.javascript.rhino.jstype.TemplateType var37 = var20.getObjectIndexKey();
//     com.google.javascript.rhino.ErrorReporter var38 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
//     var39.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     com.google.javascript.rhino.jstype.JSType var44 = null;
//     com.google.javascript.rhino.jstype.JSType[] var45 = new com.google.javascript.rhino.jstype.JSType[] { var44};
//     com.google.javascript.rhino.jstype.FunctionType var46 = var39.createConstructorType(var42, false, var45);
//     com.google.javascript.rhino.jstype.JSType var48 = var46.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var49 = var46.toMaybeFunctionType();
//     boolean var51 = var49.isPropertyTypeDeclared("goog.exportProperty");
//     com.google.javascript.rhino.jstype.JSType var52 = var20.createNullableType((com.google.javascript.rhino.jstype.JSType)var49);
//     com.google.javascript.rhino.jstype.FunctionType var53 = var1.createFunctionTypeWithNewReturnType(var18, (com.google.javascript.rhino.jstype.JSType)var49);
// 
//   }

  public void test313() {}
//   public void test313() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test313"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var3 = var2.isNE();
//     boolean var4 = var2.isWith();
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var7 = var6.cloneNode();
//     boolean var8 = var6.isDelProp();
//     boolean var9 = var6.isDefaultCase();
//     boolean var10 = var6.isVar();
//     boolean var11 = var6.isFalse();
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.function(var0, var2, var6);
// 
//   }

  public void test314() {}
//   public void test314() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test314"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
//     com.google.javascript.rhino.jstype.TemplateType var3 = var1.getObjectElementKey();
//     var3.clearCachedValues();
//     int var5 = var3.getPropertiesCount();
//     com.google.javascript.rhino.jstype.Visitor var6 = null;
//     java.lang.Object var7 = var3.visit(var6);
// 
//   }

  public void test315() {}
//   public void test315() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test315"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     double var2 = var1.getProgress();
//     com.google.javascript.jscomp.Region var5 = var1.getSourceRegion("Unversioned directory", 40);
// 
//   }

  public void test316() {}
//   public void test316() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test316"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.jscomp.GoogleCodingConvention var2 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var1);
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var6 = var5.isNE();
//     int var7 = var5.getSideEffectFlags();
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var10 = var9.isNE();
//     boolean var11 = var9.isWith();
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.getprop(var5, var9);
//     java.util.Set var13 = null;
//     var5.setDirectives(var13);
//     int var15 = var5.getChildCount();
//     com.google.javascript.rhino.Node var16 = var5.cloneTree();
//     com.google.javascript.rhino.JSDocInfo var17 = null;
//     com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNodeDeclaration((com.google.javascript.jscomp.CodingConvention)var2, "hi!: ", var16, var17);
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.assign(var0, var16);
// 
//   }

  public void test317() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test317"); }


    com.google.javascript.jscomp.SourceAst var0 = null;
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
    com.google.javascript.jscomp.JSModule var4 = var3.getModule();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var5 = var3.getPathRelativeToClosureBase();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test318() {}
//   public void test318() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test318"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var5 = var4.isNE();
//     int var6 = var4.getSideEffectFlags();
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var9 = var8.isNE();
//     boolean var10 = var8.isWith();
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.getprop(var4, var8);
//     java.util.Set var12 = null;
//     var4.setDirectives(var12);
//     int var14 = var4.getChildCount();
//     com.google.javascript.rhino.Node var15 = var4.cloneTree();
//     com.google.javascript.rhino.JSDocInfo var16 = null;
//     com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNodeDeclaration((com.google.javascript.jscomp.CodingConvention)var1, "hi!: ", var15, var16);
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var20 = var19.isNE();
//     boolean var21 = var19.isWith();
//     java.util.Set var22 = null;
//     var19.setDirectives(var22);
//     java.lang.String var24 = var1.getSingletonGetterClassName(var19);
// 
//   }

  public void test319() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test319"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.util.Set var9 = null;
    var1.setDirectives(var9);
    int var11 = var1.getChildCount();
    com.google.javascript.rhino.Node var12 = var1.cloneTree();
    boolean var13 = var1.isDebugger();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.paramList(var1);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test320() {}
//   public void test320() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test320"); }
// 
// 
//     java.io.InputStream var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromInputStream("Object#Element", var1);
// 
//   }

  public void test321() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test321"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.warning("", "goog.global");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test322() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test322"); }


    com.google.javascript.rhino.jstype.JSType var0 = null;
    com.google.javascript.rhino.jstype.TemplateType var1 = com.google.javascript.rhino.jstype.JSType.toMaybeTemplateType(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test323() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test323"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.util.Set var9 = null;
    var1.setDirectives(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    int var15 = var13.getSideEffectFlags();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    boolean var19 = var17.isWith();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
    java.util.Set var21 = null;
    var13.setDirectives(var21);
    com.google.javascript.jscomp.CheckLevel var23 = null;
    com.google.javascript.jscomp.CheckLevel var25 = null;
    com.google.javascript.jscomp.DiagnosticType var27 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var25, "");
    java.lang.String[] var28 = null;
    com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("hi!", var13, var23, var27, var28);
    com.google.javascript.rhino.Node var30 = var1.useSourceInfoIfMissingFrom(var13);
    var13.setType(0);
    boolean var33 = var13.isObjectLit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test324() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test324"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.lang.Iterable var9 = var8.siblings();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.string("hi!");
    boolean var12 = var11.isNE();
    int var13 = var11.getSideEffectFlags();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.string("hi!");
    boolean var16 = var15.isNE();
    boolean var17 = var15.isWith();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.getprop(var11, var15);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.string("hi!");
    var15.addChildToBack(var20);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var22 = var20.getJsDocBuilderForNode();
    int var23 = var20.getCharno();
    java.lang.Object var25 = var20.getProp(10);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.string("hi!");
    boolean var28 = var27.isNE();
    int var29 = var27.getSideEffectFlags();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.string("hi!");
    boolean var32 = var31.isNE();
    boolean var33 = var31.isWith();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.getprop(var27, var31);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.string("hi!");
    var31.addChildToBack(var36);
    com.google.javascript.rhino.Node var38 = var20.srcrefTree(var36);
    com.google.javascript.rhino.Node var39 = var8.useSourceInfoFromForTree(var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.neg(var38);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test325() {}
//   public void test325() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test325"); }
// 
// 
//     com.google.javascript.rhino.Node[] var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.arraylit(var0);
// 
//   }

  public void test326() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test326"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.util.Set var9 = null;
    var1.setDirectives(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    int var15 = var13.getSideEffectFlags();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    boolean var19 = var17.isWith();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
    java.util.Set var21 = null;
    var13.setDirectives(var21);
    com.google.javascript.jscomp.CheckLevel var23 = null;
    com.google.javascript.jscomp.CheckLevel var25 = null;
    com.google.javascript.jscomp.DiagnosticType var27 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var25, "");
    java.lang.String[] var28 = null;
    com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("hi!", var13, var23, var27, var28);
    com.google.javascript.rhino.Node var30 = var1.useSourceInfoIfMissingFrom(var13);
    int var31 = var1.getSideEffectFlags();
    boolean var32 = var1.isEmpty();
    boolean var33 = var1.isTry();
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.string("hi!");
    boolean var36 = var35.isNE();
    com.google.javascript.rhino.Node var37 = var35.cloneNode();
    boolean var38 = var37.isCatch();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.label(var1, var37);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test327() {}
//   public void test327() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test327"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     boolean var13 = var12.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var14 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
//     var15.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var18 = null;
//     com.google.javascript.rhino.jstype.JSType var20 = null;
//     com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
//     com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
//     com.google.javascript.rhino.jstype.JSType var24 = var22.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var25 = var22.getTypeOfThis();
//     boolean var26 = var12.canCastTo((com.google.javascript.rhino.jstype.JSType)var22);
//     com.google.javascript.rhino.ErrorReporter var27 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
//     var28.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     com.google.javascript.rhino.jstype.JSType var33 = null;
//     com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
//     com.google.javascript.rhino.jstype.FunctionType var35 = var28.createConstructorType(var31, false, var34);
//     boolean var36 = var35.isInterface();
//     com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var35};
//     com.google.javascript.rhino.jstype.FunctionType var38 = var3.createConstructorType((com.google.javascript.rhino.jstype.JSType)var12, var37);
//     com.google.javascript.rhino.Node var39 = var1.createOptionalParameters(var37);
//     com.google.javascript.rhino.jstype.JSTypeNative var40 = null;
//     com.google.javascript.rhino.jstype.JSTypeNative[] var41 = new com.google.javascript.rhino.jstype.JSTypeNative[] { var40};
//     com.google.javascript.rhino.jstype.JSType var42 = var1.createUnionType(var41);
// 
//   }

  public void test328() {}
//   public void test328() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test328"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
//     int var15 = var12.getPropertiesCount();
//     com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
//     com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
//     com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
//     boolean var19 = var18.hasAnyTemplateTypesInternal();
//     com.google.javascript.rhino.jstype.Visitor var20 = null;
//     java.lang.Object var21 = var18.visit(var20);
// 
//   }

  public void test329() {}
//   public void test329() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test329"); }
// 
// 
//     java.util.Map var0 = null;
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var3 = var2.isNE();
//     int var4 = var2.getSideEffectFlags();
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var7 = var6.isNE();
//     boolean var8 = var6.isWith();
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.string("hi!");
//     var6.addChildToBack(var11);
//     com.google.javascript.rhino.Node var13 = var11.getLastSibling();
//     var11.setIsSyntheticBlock(false);
//     com.google.javascript.jscomp.NodeUtil.verifyScopeChanges(var0, var11, false);
// 
//   }

  public void test330() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test330"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    var2.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
    com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
    boolean var10 = var9.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    var12.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
    com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
    boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    var37.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
    boolean var45 = var44.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    var47.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
    com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
    boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
    var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
    java.lang.String var60 = var0.getExportPropertyFunction();
    java.lang.String var61 = var0.getGlobalObject();
    boolean var63 = var0.isConstant("");
    java.lang.String var64 = var0.getExportSymbolFunction();
    com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.Node.newString("hi!: ");
    boolean var67 = var66.isSetterDef();
    com.google.javascript.rhino.Node var68 = var66.getLastSibling();
    boolean var69 = var66.isOnlyModifiesThisCall();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var70 = var0.isPropertyTestFunction(var66);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "goog.exportProperty"+ "'", var60.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "goog.global"+ "'", var61.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "goog.exportSymbol"+ "'", var64.equals("goog.exportSymbol"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test331() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test331"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
    int var11 = var8.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var13 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var8, "");
    boolean var14 = var8.isFunctionPrototypeType();
    boolean var15 = var8.isEmptyType();
    var8.clearCachedValues();
    com.google.javascript.rhino.jstype.FunctionType var17 = var8.toMaybeFunctionType();
    com.google.javascript.rhino.jstype.ObjectType var18 = var8.getPrototype();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test332() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test332"); }


    com.google.javascript.jscomp.parsing.Config.LanguageMode var1 = null;
    com.google.javascript.jscomp.parsing.Config var3 = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(false, var1, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test333() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test333"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    java.lang.Iterable var3 = var1.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    boolean var13 = var12.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    var15.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
    com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
    com.google.javascript.rhino.jstype.FunctionType var23 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var12, var21);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    java.lang.Iterable var27 = var25.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var28 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
    var29.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.rhino.jstype.JSType var34 = null;
    com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var34};
    com.google.javascript.rhino.jstype.FunctionType var36 = var29.createConstructorType(var32, false, var35);
    boolean var37 = var36.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var38 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
    var39.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType var44 = null;
    com.google.javascript.rhino.jstype.JSType[] var45 = new com.google.javascript.rhino.jstype.JSType[] { var44};
    com.google.javascript.rhino.jstype.FunctionType var46 = var39.createConstructorType(var42, false, var45);
    com.google.javascript.rhino.jstype.FunctionType var47 = var25.createConstructorType((com.google.javascript.rhino.jstype.JSType)var36, var45);
    boolean var48 = var36.isReturnTypeInferred();
    boolean var49 = var36.isTemplatizedType();
    com.google.javascript.rhino.ErrorReporter var50 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var50);
    com.google.javascript.rhino.ErrorReporter var52 = var51.getErrorReporter();
    com.google.javascript.rhino.jstype.TemplateType var53 = var51.getObjectElementKey();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var54 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var55 = var54.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var56 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var56);
    var57.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var60 = null;
    com.google.javascript.rhino.jstype.JSType var62 = null;
    com.google.javascript.rhino.jstype.JSType[] var63 = new com.google.javascript.rhino.jstype.JSType[] { var62};
    com.google.javascript.rhino.jstype.FunctionType var64 = var57.createConstructorType(var60, false, var63);
    com.google.javascript.rhino.jstype.JSType var66 = var64.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var67 = var64.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var68 = var54.getNode((java.lang.Object)var67);
    java.util.List var69 = var54.getEdges();
    com.google.javascript.rhino.jstype.JSType var70 = var1.createFunctionType((com.google.javascript.rhino.jstype.ObjectType)var36, (com.google.javascript.rhino.jstype.JSType)var53, var69);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var71 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var72 = var71.getGraphvizNodes();
    var36.setImplementedInterfaces(var72);
    java.lang.Iterable var74 = var36.getCtorImplementedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test334() {}
//   public void test334() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test334"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var4 = null;
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
//     com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
//     com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var11 = var8.toMaybeFunctionType();
//     boolean var13 = var11.isPropertyTypeDeclared("goog.exportProperty");
//     java.lang.String var14 = var11.getDisplayName();
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     com.google.javascript.rhino.jstype.JSType.TypePair var16 = var11.getTypesUnderInequality(var15);
// 
//   }

  public void test335() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test335"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
    com.google.javascript.rhino.jstype.TemplateType var3 = var1.getObjectElementKey();
    java.lang.Iterable var5 = var1.getTypesWithProperty("goog.exportSymbol");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test336() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test336"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var11 = var8.getTypeOfThis();
    boolean var12 = var11.isAllType();
    java.lang.String var13 = var11.getDisplayName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test337() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test337"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.string("hi!");
    boolean var5 = var4.isNE();
    int var6 = var4.getSideEffectFlags();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.string("hi!");
    boolean var9 = var8.isNE();
    boolean var10 = var8.isWith();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.getprop(var4, var8);
    java.util.Set var12 = null;
    var4.setDirectives(var12);
    int var14 = var4.getChildCount();
    com.google.javascript.rhino.Node var15 = var4.cloneTree();
    com.google.javascript.rhino.JSDocInfo var16 = null;
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNodeDeclaration((com.google.javascript.jscomp.CodingConvention)var1, "hi!: ", var15, var16);
    com.google.javascript.rhino.Node[] var18 = new com.google.javascript.rhino.Node[] { var17};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.paramList(var18);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test338() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test338"); }


    java.lang.String var1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "()"+ "'", var1.equals("()"));

  }

  public void test339() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test339"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.util.Set var9 = null;
    var1.setDirectives(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    int var15 = var13.getSideEffectFlags();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    boolean var19 = var17.isWith();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
    java.util.Set var21 = null;
    var13.setDirectives(var21);
    com.google.javascript.jscomp.CheckLevel var23 = null;
    com.google.javascript.jscomp.CheckLevel var25 = null;
    com.google.javascript.jscomp.DiagnosticType var27 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var25, "");
    java.lang.String[] var28 = null;
    com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("hi!", var13, var23, var27, var28);
    com.google.javascript.rhino.Node var30 = var1.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.Node var32 = var13.getAncestor(0);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var36 = var35.cloneNode();
    boolean var37 = var35.isDelProp();
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var40 = var39.cloneNode();
    boolean var41 = var39.isDelProp();
    com.google.javascript.rhino.Node var42 = var35.clonePropsFrom(var39);
    boolean var43 = var39.isBlock();
    var13.putProp((-1), (java.lang.Object)var39);
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var47 = var46.cloneNode();
    boolean var48 = var46.isDelProp();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var51 = var50.cloneNode();
    boolean var52 = var50.isDelProp();
    com.google.javascript.rhino.Node var53 = var46.clonePropsFrom(var50);
    boolean var54 = var46.isHook();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var55 = var13.removeChildAfter(var46);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test340() {}
//   public void test340() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test340"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
//     com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var4 = var3.isNE();
//     int var5 = var3.getSideEffectFlags();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var8 = var7.isNE();
//     boolean var9 = var7.isWith();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
//     var10.setLineno(10);
//     var1.validateExpression(var10);
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var16 = var15.isNE();
//     int var17 = var15.getSideEffectFlags();
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var20 = var19.isNE();
//     boolean var21 = var19.isWith();
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.getprop(var15, var19);
//     com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.string("hi!");
//     var19.addChildToBack(var24);
//     boolean var26 = var19.isVar();
//     com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var29 = var28.isNE();
//     int var30 = var28.getSideEffectFlags();
//     com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var33 = var32.isNE();
//     boolean var34 = var32.isWith();
//     com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.getprop(var28, var32);
//     com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.string("hi!");
//     var32.addChildToBack(var37);
//     com.google.javascript.rhino.Node.FileLevelJsDocBuilder var39 = var37.getJsDocBuilderForNode();
//     int var40 = var37.getCharno();
//     boolean var41 = var19.isEquivalentTo(var37);
//     com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var44 = var43.isNE();
//     int var45 = var43.getSideEffectFlags();
//     com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var48 = var47.isNE();
//     boolean var49 = var47.isWith();
//     com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.getprop(var43, var47);
//     java.util.Set var51 = null;
//     var43.setDirectives(var51);
//     com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var56 = var55.isNE();
//     int var57 = var55.getSideEffectFlags();
//     com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var60 = var59.isNE();
//     boolean var61 = var59.isWith();
//     com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.getprop(var55, var59);
//     java.util.Set var63 = null;
//     var55.setDirectives(var63);
//     com.google.javascript.jscomp.CheckLevel var65 = null;
//     com.google.javascript.jscomp.CheckLevel var67 = null;
//     com.google.javascript.jscomp.DiagnosticType var69 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var67, "");
//     java.lang.String[] var70 = null;
//     com.google.javascript.jscomp.JSError var71 = com.google.javascript.jscomp.JSError.make("hi!", var55, var65, var69, var70);
//     com.google.javascript.rhino.Node var72 = var43.useSourceInfoIfMissingFrom(var55);
//     int var73 = var43.getType();
//     var1.process(var19, var43);
// 
//   }

  public void test341() {}
//   public void test341() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test341"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     boolean var13 = var12.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var14 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
//     var15.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var18 = null;
//     com.google.javascript.rhino.jstype.JSType var20 = null;
//     com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
//     com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
//     com.google.javascript.rhino.jstype.JSType var24 = var22.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var25 = var22.getTypeOfThis();
//     boolean var26 = var12.canCastTo((com.google.javascript.rhino.jstype.JSType)var22);
//     com.google.javascript.rhino.ErrorReporter var27 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
//     var28.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     com.google.javascript.rhino.jstype.JSType var33 = null;
//     com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
//     com.google.javascript.rhino.jstype.FunctionType var35 = var28.createConstructorType(var31, false, var34);
//     boolean var36 = var35.isInterface();
//     com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var35};
//     com.google.javascript.rhino.jstype.FunctionType var38 = var3.createConstructorType((com.google.javascript.rhino.jstype.JSType)var12, var37);
//     com.google.javascript.rhino.Node var39 = var1.createOptionalParameters(var37);
//     com.google.javascript.rhino.ErrorReporter var41 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
//     java.lang.Iterable var44 = var42.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var45 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
//     var46.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var49 = null;
//     com.google.javascript.rhino.jstype.JSType var51 = null;
//     com.google.javascript.rhino.jstype.JSType[] var52 = new com.google.javascript.rhino.jstype.JSType[] { var51};
//     com.google.javascript.rhino.jstype.FunctionType var53 = var46.createConstructorType(var49, false, var52);
//     boolean var54 = var53.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var55 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var55);
//     var56.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var59 = null;
//     com.google.javascript.rhino.jstype.JSType var61 = null;
//     com.google.javascript.rhino.jstype.JSType[] var62 = new com.google.javascript.rhino.jstype.JSType[] { var61};
//     com.google.javascript.rhino.jstype.FunctionType var63 = var56.createConstructorType(var59, false, var62);
//     com.google.javascript.rhino.jstype.FunctionType var64 = var42.createConstructorType((com.google.javascript.rhino.jstype.JSType)var53, var62);
//     com.google.javascript.rhino.jstype.TemplateType var65 = var42.getObjectIndexKey();
//     var1.unregisterPropertyOnType("hi!: ", (com.google.javascript.rhino.jstype.JSType)var65);
//     com.google.javascript.rhino.jstype.JSType var67 = null;
//     boolean var68 = var65.differsFrom(var67);
// 
//   }

  public void test342() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test342"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var2 = var1.cloneNode();
    boolean var3 = var1.isDelProp();
    int var4 = var1.getSideEffectFlags();
    var1.setQuotedString();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.block();
    com.google.javascript.rhino.Node var7 = var1.useSourceInfoFrom(var6);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.string("hi!");
    boolean var10 = var9.isNE();
    int var11 = var9.getSideEffectFlags();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    boolean var15 = var13.isWith();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.getprop(var9, var13);
    java.lang.String var17 = com.google.javascript.jscomp.NodeUtil.getSourceName(var9);
    boolean var18 = var9.isCase();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.sheq(var6, var9);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test343() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test343"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var1 = var0.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
    com.google.javascript.rhino.jstype.JSType var12 = var10.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var13 = var10.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var14 = var0.getNode((java.lang.Object)var13);
    java.util.List var15 = var0.getEdges();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    boolean var19 = var17.isFunction();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var20 = var0.getDirectedGraphNode((java.lang.Object)var17);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.string("hi!");
    boolean var24 = var23.isNE();
    int var25 = var23.getSideEffectFlags();
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.string("hi!");
    boolean var28 = var27.isNE();
    boolean var29 = var27.isWith();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.getprop(var23, var27);
    java.util.Set var31 = null;
    var23.setDirectives(var31);
    com.google.javascript.jscomp.CheckLevel var33 = null;
    com.google.javascript.jscomp.CheckLevel var35 = null;
    com.google.javascript.jscomp.DiagnosticType var37 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var35, "");
    java.lang.String[] var38 = null;
    com.google.javascript.jscomp.JSError var39 = com.google.javascript.jscomp.JSError.make("hi!", var23, var33, var37, var38);
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.string("hi!");
    boolean var43 = var42.isNE();
    int var44 = var42.getSideEffectFlags();
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.string("hi!");
    boolean var47 = var46.isNE();
    boolean var48 = var46.isWith();
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.getprop(var42, var46);
    java.util.Set var50 = null;
    var42.setDirectives(var50);
    com.google.javascript.jscomp.CheckLevel var52 = null;
    com.google.javascript.jscomp.CheckLevel var54 = null;
    com.google.javascript.jscomp.DiagnosticType var56 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var54, "");
    java.lang.String[] var57 = null;
    com.google.javascript.jscomp.JSError var58 = com.google.javascript.jscomp.JSError.make("hi!", var42, var52, var56, var57);
    var42.addSuppression("");
    com.google.javascript.rhino.Node var61 = var23.useSourceInfoFromForTree(var42);
    boolean var62 = var42.isGetElem();
    com.google.javascript.rhino.Node var64 = var42.getChildAtIndex((-1));
    boolean var65 = var42.isTrue();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var66 = var0.getDirectedSuccNodes((java.lang.Object)var42);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test344() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test344"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    java.util.Collection var1 = var0.getNodes();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
    int var8 = var7.getChangeTime();
    boolean var9 = var7.isCatch();
    int var10 = var7.getType();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var13 = var12.cloneNode();
    boolean var14 = var12.isDelProp();
    boolean var15 = var12.isDefaultCase();
    boolean var16 = var12.isNE();
    var12.setLength(100);
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(1, var7, var12, 1, (-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var22 = var0.getOutEdges((java.lang.Object)var12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test345() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test345"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.lang.String var9 = com.google.javascript.jscomp.NodeUtil.getSourceName(var1);
    boolean var10 = var1.isCase();
    boolean var11 = var1.isRegExp();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.breakNode(var1);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test346() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test346"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var12 = var10.getJsDocBuilderForNode();
    int var13 = var10.getCharno();
    java.lang.Object var15 = var10.getProp(10);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var18 = var17.cloneNode();
    boolean var19 = var17.isDelProp();
    boolean var20 = var17.isDefaultCase();
    boolean var21 = var17.isNE();
    boolean var22 = var17.isString();
    com.google.javascript.rhino.Node var23 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.function(var10, var17, var23);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test347() {}
//   public void test347() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test347"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var1 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
//     var3.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
//     com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
//     boolean var11 = var1.addRequiredParams(var9);
//     com.google.javascript.rhino.ErrorReporter var12 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
//     java.lang.Iterable var15 = var13.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var16 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
//     var17.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var20 = null;
//     com.google.javascript.rhino.jstype.JSType var22 = null;
//     com.google.javascript.rhino.jstype.JSType[] var23 = new com.google.javascript.rhino.jstype.JSType[] { var22};
//     com.google.javascript.rhino.jstype.FunctionType var24 = var17.createConstructorType(var20, false, var23);
//     boolean var25 = var24.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var26 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
//     var27.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var30 = null;
//     com.google.javascript.rhino.jstype.JSType var32 = null;
//     com.google.javascript.rhino.jstype.JSType[] var33 = new com.google.javascript.rhino.jstype.JSType[] { var32};
//     com.google.javascript.rhino.jstype.FunctionType var34 = var27.createConstructorType(var30, false, var33);
//     com.google.javascript.rhino.jstype.FunctionType var35 = var13.createConstructorType((com.google.javascript.rhino.jstype.JSType)var24, var33);
//     boolean var36 = var1.addOptionalParams(var33);
// 
//   }

  public void test348() {}
//   public void test348() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test348"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
//     com.google.javascript.rhino.ErrorReporter var3 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
//     var4.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.jstype.JSType var9 = null;
//     com.google.javascript.rhino.jstype.JSType[] var10 = new com.google.javascript.rhino.jstype.JSType[] { var9};
//     com.google.javascript.rhino.jstype.FunctionType var11 = var4.createConstructorType(var7, false, var10);
//     boolean var12 = var11.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var13 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
//     var14.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     com.google.javascript.rhino.jstype.JSType var19 = null;
//     com.google.javascript.rhino.jstype.JSType[] var20 = new com.google.javascript.rhino.jstype.JSType[] { var19};
//     com.google.javascript.rhino.jstype.FunctionType var21 = var14.createConstructorType(var17, false, var20);
//     com.google.javascript.rhino.jstype.JSType var23 = var21.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var24 = var21.getTypeOfThis();
//     boolean var25 = var11.canCastTo((com.google.javascript.rhino.jstype.JSType)var21);
//     boolean var26 = var21.isDateType();
//     com.google.javascript.rhino.jstype.JSType[] var27 = new com.google.javascript.rhino.jstype.JSType[] { var21};
//     com.google.javascript.rhino.Node var28 = var1.createParametersWithVarArgs(var27);
//     com.google.javascript.rhino.jstype.JSTypeNative var29 = null;
//     com.google.javascript.rhino.jstype.ObjectType var30 = var1.getNativeObjectType(var29);
// 
//   }

  public void test349() {}
//   public void test349() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test349"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var6 = var5.isNE();
//     int var7 = var5.getSideEffectFlags();
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var10 = var9.isNE();
//     boolean var11 = var9.isWith();
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.getprop(var5, var9);
//     java.util.Set var13 = null;
//     var5.setDirectives(var13);
//     com.google.javascript.jscomp.CheckLevel var15 = null;
//     com.google.javascript.jscomp.CheckLevel var17 = null;
//     com.google.javascript.jscomp.DiagnosticType var19 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var17, "");
//     java.lang.String[] var20 = null;
//     com.google.javascript.jscomp.JSError var21 = com.google.javascript.jscomp.JSError.make("hi!", var5, var15, var19, var20);
//     com.google.javascript.jscomp.CheckLevel var26 = null;
//     com.google.javascript.jscomp.DiagnosticType var28 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var26, "");
//     java.lang.String[] var30 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var31 = com.google.javascript.jscomp.JSError.make("", 100, 0, var28, var30);
//     java.lang.String[] var33 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var34 = com.google.javascript.jscomp.JSError.make("hi!", var5, var28, var33);
//     com.google.javascript.jscomp.DiagnosticType var35 = var34.getType();
//     com.google.javascript.jscomp.CheckLevel var36 = var0.getErrorLevel(var34);
// 
//   }

  public void test350() {}
//   public void test350() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test350"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
//     java.util.Collection var1 = var0.getNodes();
//     var0.clearNodeAnnotations();
//     com.google.javascript.rhino.jstype.JSTypeRegistry var3 = null;
//     com.google.javascript.rhino.jstype.FunctionBuilder var4 = new com.google.javascript.rhino.jstype.FunctionBuilder(var3);
//     com.google.javascript.rhino.ErrorReporter var5 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
//     var6.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var9 = null;
//     com.google.javascript.rhino.jstype.JSType var11 = null;
//     com.google.javascript.rhino.jstype.JSType[] var12 = new com.google.javascript.rhino.jstype.JSType[] { var11};
//     com.google.javascript.rhino.jstype.FunctionType var13 = var6.createConstructorType(var9, false, var12);
//     boolean var14 = var13.canBeCalled();
//     com.google.javascript.rhino.jstype.FunctionBuilder var16 = var4.withReturnType((com.google.javascript.rhino.jstype.JSType)var13, true);
//     com.google.javascript.rhino.ErrorReporter var17 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
//     var18.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var21 = null;
//     com.google.javascript.rhino.jstype.JSType var23 = null;
//     com.google.javascript.rhino.jstype.JSType[] var24 = new com.google.javascript.rhino.jstype.JSType[] { var23};
//     com.google.javascript.rhino.jstype.FunctionType var25 = var18.createConstructorType(var21, false, var24);
//     boolean var26 = var25.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var27 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
//     var28.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     com.google.javascript.rhino.jstype.JSType var33 = null;
//     com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
//     com.google.javascript.rhino.jstype.FunctionType var35 = var28.createConstructorType(var31, false, var34);
//     com.google.javascript.rhino.jstype.JSType var37 = var35.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var38 = var35.getTypeOfThis();
//     boolean var39 = var25.canCastTo((com.google.javascript.rhino.jstype.JSType)var35);
//     boolean var40 = var35.isDateType();
//     boolean var41 = var35.isNullType();
//     com.google.javascript.rhino.jstype.ObjectType var42 = var35.getInstanceType();
//     com.google.javascript.rhino.jstype.JSType var43 = var35.autobox();
//     com.google.javascript.jscomp.graph.Graph.GraphEdge var44 = var0.getFirstEdge((java.lang.Object)var13, (java.lang.Object)var35);
// 
//   }

  public void test351() {}
//   public void test351() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test351"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     double var2 = var1.getProgress();
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var7 = var6.isNE();
//     int var8 = var6.getSideEffectFlags();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var11 = var10.isNE();
//     boolean var12 = var10.isWith();
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.getprop(var6, var10);
//     java.util.Set var14 = null;
//     var6.setDirectives(var14);
//     com.google.javascript.jscomp.CheckLevel var16 = null;
//     com.google.javascript.jscomp.CheckLevel var18 = null;
//     com.google.javascript.jscomp.DiagnosticType var20 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var18, "");
//     java.lang.String[] var21 = null;
//     com.google.javascript.jscomp.JSError var22 = com.google.javascript.jscomp.JSError.make("hi!", var6, var16, var20, var21);
//     com.google.javascript.jscomp.CheckLevel var27 = null;
//     com.google.javascript.jscomp.DiagnosticType var29 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var27, "");
//     java.lang.String[] var31 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var32 = com.google.javascript.jscomp.JSError.make("", 100, 0, var29, var31);
//     java.lang.String[] var34 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var35 = com.google.javascript.jscomp.JSError.make("hi!", var6, var29, var34);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var36 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var37 = var36.getGraphvizNodes();
//     com.google.javascript.rhino.ErrorReporter var38 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
//     var39.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     com.google.javascript.rhino.jstype.JSType var44 = null;
//     com.google.javascript.rhino.jstype.JSType[] var45 = new com.google.javascript.rhino.jstype.JSType[] { var44};
//     com.google.javascript.rhino.jstype.FunctionType var46 = var39.createConstructorType(var42, false, var45);
//     com.google.javascript.rhino.jstype.JSType var48 = var46.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var49 = var46.getTypeOfThis();
//     com.google.javascript.jscomp.graph.GraphNode var50 = var36.getNode((java.lang.Object)var49);
//     java.util.List var51 = var36.getEdges();
//     boolean var52 = var35.equals((java.lang.Object)var51);
//     com.google.javascript.jscomp.CheckLevel var53 = var1.getErrorLevel(var35);
// 
//   }

  public void test352() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test352"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var15 = var12.getTypeOfThis();
    com.google.javascript.rhino.jstype.JSType var16 = var15.unboxesTo();
    com.google.javascript.rhino.jstype.JSType var18 = var15.getRestrictedTypeGivenToBooleanOutcome(false);
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    var20.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var23 = null;
    com.google.javascript.rhino.jstype.JSType var25 = null;
    com.google.javascript.rhino.jstype.JSType[] var26 = new com.google.javascript.rhino.jstype.JSType[] { var25};
    com.google.javascript.rhino.jstype.FunctionType var27 = var20.createConstructorType(var23, false, var26);
    com.google.javascript.rhino.jstype.JSType var29 = var27.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var30 = var27.toMaybeFunctionType();
    boolean var31 = var27.isUnionType();
    boolean var32 = com.google.javascript.rhino.jstype.JSType.isEquivalent(var18, (com.google.javascript.rhino.jstype.JSType)var27);
    com.google.javascript.rhino.SimpleErrorReporter var33 = new com.google.javascript.rhino.SimpleErrorReporter();
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    var35.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var38 = null;
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType[] var41 = new com.google.javascript.rhino.jstype.JSType[] { var40};
    com.google.javascript.rhino.jstype.FunctionType var42 = var35.createConstructorType(var38, false, var41);
    boolean var43 = var42.canBeCalled();
    boolean var44 = var42.isTemplatizedType();
    com.google.javascript.rhino.jstype.ObjectType var46 = var42.getTopMostDefiningType("hi!");
    com.google.javascript.rhino.jstype.JSType var47 = var18.resolve((com.google.javascript.rhino.ErrorReporter)var33, (com.google.javascript.rhino.jstype.StaticScope)var42);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.overwriteDeclaredType("goog.global", var47);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test353() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test353"); }


    com.google.javascript.rhino.InputId var1 = new com.google.javascript.rhino.InputId("");

  }

  public void test354() {}
//   public void test354() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test354"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.Node.newString("hi!: ");
//     boolean var2 = var1.isSetterDef();
//     com.google.javascript.rhino.Node var3 = var1.getLastSibling();
//     boolean var4 = var1.isLabel();
//     java.lang.Appendable var5 = null;
//     var1.appendStringTree(var5);
// 
//   }

  public void test355() {}
//   public void test355() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test355"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.jscomp.GoogleCodingConvention var2 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var1);
//     com.google.javascript.rhino.ErrorReporter var3 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
//     com.google.javascript.rhino.ErrorReporter var5 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
//     com.google.javascript.rhino.ErrorReporter var7 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7);
//     var8.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var11 = null;
//     com.google.javascript.rhino.jstype.JSType var13 = null;
//     com.google.javascript.rhino.jstype.JSType[] var14 = new com.google.javascript.rhino.jstype.JSType[] { var13};
//     com.google.javascript.rhino.jstype.FunctionType var15 = var8.createConstructorType(var11, false, var14);
//     boolean var16 = var15.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var17 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
//     var18.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var21 = null;
//     com.google.javascript.rhino.jstype.JSType var23 = null;
//     com.google.javascript.rhino.jstype.JSType[] var24 = new com.google.javascript.rhino.jstype.JSType[] { var23};
//     com.google.javascript.rhino.jstype.FunctionType var25 = var18.createConstructorType(var21, false, var24);
//     com.google.javascript.rhino.jstype.JSType var27 = var25.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var28 = var25.getTypeOfThis();
//     boolean var29 = var15.canCastTo((com.google.javascript.rhino.jstype.JSType)var25);
//     com.google.javascript.rhino.ErrorReporter var30 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
//     var31.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var34 = null;
//     com.google.javascript.rhino.jstype.JSType var36 = null;
//     com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var36};
//     com.google.javascript.rhino.jstype.FunctionType var38 = var31.createConstructorType(var34, false, var37);
//     boolean var39 = var38.isInterface();
//     com.google.javascript.rhino.jstype.JSType[] var40 = new com.google.javascript.rhino.jstype.JSType[] { var38};
//     com.google.javascript.rhino.jstype.FunctionType var41 = var6.createConstructorType((com.google.javascript.rhino.jstype.JSType)var15, var40);
//     com.google.javascript.rhino.Node var42 = var4.createOptionalParameters(var40);
//     com.google.javascript.rhino.ErrorReporter var44 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var44);
//     java.lang.Iterable var47 = var45.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var48 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var48);
//     var49.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var52 = null;
//     com.google.javascript.rhino.jstype.JSType var54 = null;
//     com.google.javascript.rhino.jstype.JSType[] var55 = new com.google.javascript.rhino.jstype.JSType[] { var54};
//     com.google.javascript.rhino.jstype.FunctionType var56 = var49.createConstructorType(var52, false, var55);
//     boolean var57 = var56.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var58 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
//     var59.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var62 = null;
//     com.google.javascript.rhino.jstype.JSType var64 = null;
//     com.google.javascript.rhino.jstype.JSType[] var65 = new com.google.javascript.rhino.jstype.JSType[] { var64};
//     com.google.javascript.rhino.jstype.FunctionType var66 = var59.createConstructorType(var62, false, var65);
//     com.google.javascript.rhino.jstype.FunctionType var67 = var45.createConstructorType((com.google.javascript.rhino.jstype.JSType)var56, var65);
//     com.google.javascript.rhino.jstype.TemplateType var68 = var45.getObjectIndexKey();
//     var4.unregisterPropertyOnType("hi!: ", (com.google.javascript.rhino.jstype.JSType)var68);
//     java.lang.Iterable var71 = var4.getTypesWithProperty("");
//     com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var72 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var1, var4);
//     com.google.javascript.rhino.ErrorReporter var73 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var74 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var73);
//     java.lang.Iterable var76 = var74.getTypesWithProperty("hi!");
//     com.google.javascript.jscomp.CheckLevel var77 = null;
//     com.google.javascript.jscomp.CheckLevel var78 = null;
//     com.google.javascript.jscomp.TypeCheck var79 = new com.google.javascript.jscomp.TypeCheck(var0, (com.google.javascript.jscomp.type.ReverseAbstractInterpreter)var72, var74, var77, var78);
// 
//   }

  public void test356() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test356"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
    int var15 = var12.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
    com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
    boolean var19 = var18.hasAnyTemplateTypesInternal();
    com.google.javascript.rhino.jstype.BooleanLiteralSet var20 = var18.getPossibleToBooleanOutcomes();
    java.lang.String var21 = var20.toString();
    java.lang.Class var22 = var20.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var24 = java.lang.Enum.<java.lang.Enum>valueOf(var22, "TRUE 10\n");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "TRUE"+ "'", var21.equals("TRUE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test357() {}
//   public void test357() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test357"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
//     com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var4 = var3.cloneNode();
//     boolean var5 = var3.isDelProp();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var8 = var7.cloneNode();
//     boolean var9 = var7.isDelProp();
//     com.google.javascript.rhino.Node var10 = var3.clonePropsFrom(var7);
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
//     com.google.javascript.rhino.Node var16 = var15.getLastChild();
//     com.google.javascript.rhino.Node var17 = var7.srcrefTree(var15);
//     var1.validateScript(var17);
// 
//   }

  public void test358() {}
//   public void test358() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test358"); }
// 
// 
//     java.lang.String var0 = com.google.javascript.jscomp.Compiler.getReleaseDate();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var0 + "' != '" + "2014/12/24 01:41"+ "'", var0.equals("2014/12/24 01:41"));
// 
//   }

  public void test359() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test359"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
    int var15 = var12.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
    com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
    boolean var19 = var18.hasAnyTemplateTypesInternal();
    com.google.javascript.rhino.jstype.BooleanLiteralSet var20 = var18.getPossibleToBooleanOutcomes();
    java.lang.Class var21 = var20.getDeclaringClass();
    java.lang.Enum var23 = java.lang.Enum.<java.lang.Enum>valueOf(var21, "TRUE");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var25 = java.lang.Enum.<java.lang.Enum>valueOf(var21, "false");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test360() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test360"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var12 = var10.getJsDocBuilderForNode();
    int var13 = var10.getCharno();
    java.lang.Object var15 = var10.getProp(10);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    int var19 = var17.getSideEffectFlags();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.string("hi!");
    boolean var22 = var21.isNE();
    boolean var23 = var21.isWith();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.getprop(var17, var21);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.string("hi!");
    var21.addChildToBack(var26);
    com.google.javascript.rhino.Node var28 = var10.srcrefTree(var26);
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.string("hi!");
    boolean var31 = var30.isNE();
    int var32 = var30.getSideEffectFlags();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.string("hi!");
    boolean var35 = var34.isNE();
    boolean var36 = var34.isWith();
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.getprop(var30, var34);
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.string("hi!");
    var34.addChildToBack(var39);
    boolean var41 = var34.isVar();
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.string("hi!");
    boolean var44 = var43.isNE();
    int var45 = var43.getSideEffectFlags();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.string("hi!");
    boolean var48 = var47.isNE();
    boolean var49 = var47.isWith();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.getprop(var43, var47);
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.string("hi!");
    var47.addChildToBack(var52);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var54 = var52.getJsDocBuilderForNode();
    int var55 = var52.getCharno();
    boolean var56 = var34.isEquivalentTo(var52);
    com.google.javascript.rhino.Node var57 = var28.useSourceInfoFrom(var52);
    var52.setWasEmptyNode(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test361() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test361"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.util.Set var9 = null;
    var1.setDirectives(var9);
    int var11 = var1.getChildCount();
    java.lang.Iterable var12 = var1.siblings();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
    var17.setQuotedString();
    boolean var19 = var17.isLabelName();
    boolean var20 = var17.isDefaultCase();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.string("hi!");
    boolean var25 = var24.isNE();
    int var26 = var24.getSideEffectFlags();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.string("hi!");
    boolean var29 = var28.isNE();
    boolean var30 = var28.isWith();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.getprop(var24, var28);
    java.util.Set var32 = null;
    var24.setDirectives(var32);
    com.google.javascript.jscomp.CheckLevel var34 = null;
    com.google.javascript.jscomp.CheckLevel var36 = null;
    com.google.javascript.jscomp.DiagnosticType var38 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var36, "");
    java.lang.String[] var39 = null;
    com.google.javascript.jscomp.JSError var40 = com.google.javascript.jscomp.JSError.make("hi!", var24, var34, var38, var39);
    com.google.javascript.jscomp.CheckLevel var45 = null;
    com.google.javascript.jscomp.DiagnosticType var47 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var45, "");
    java.lang.String[] var49 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var50 = com.google.javascript.jscomp.JSError.make("", 100, 0, var47, var49);
    java.lang.String[] var52 = new java.lang.String[] { "hi!"};
    com.google.javascript.jscomp.JSError var53 = com.google.javascript.jscomp.JSError.make("hi!", var24, var47, var52);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.forIn(var1, var17, var24);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test362() {}
//   public void test362() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test362"); }
// 
// 
//     java.io.InputStream var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromInputStream("FALSE", var1);
// 
//   }

  public void test363() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test363"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var3 = var2.cloneNode();
    boolean var4 = var2.isDelProp();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var7 = var6.cloneNode();
    boolean var8 = var6.isDelProp();
    com.google.javascript.rhino.Node var9 = var2.clonePropsFrom(var6);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
    com.google.javascript.rhino.Node var15 = var14.getLastChild();
    com.google.javascript.rhino.Node var16 = var6.srcrefTree(var14);
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    var18.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    var22.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var25 = null;
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.rhino.jstype.JSType[] var28 = new com.google.javascript.rhino.jstype.JSType[] { var27};
    com.google.javascript.rhino.jstype.FunctionType var29 = var22.createConstructorType(var25, false, var28);
    com.google.javascript.rhino.jstype.JSType var31 = var29.findPropertyType("hi!");
    int var32 = var29.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var33 = new com.google.javascript.rhino.jstype.JSType[] { var29};
    com.google.javascript.rhino.Node var34 = var18.createParametersWithVarArgs(var33);
    boolean var35 = var34.isVarArgs();
    boolean var36 = var34.isWhile();
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.string("hi!");
    boolean var40 = var39.isNE();
    boolean var41 = var39.isFunction();
    com.google.javascript.rhino.Node var44 = new com.google.javascript.rhino.Node(0, var39, 10, 0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var47 = new com.google.javascript.rhino.Node(100, var14, var34, var39, 40, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test364() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test364"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
    boolean var4 = var3.isNE();
    int var5 = var3.getSideEffectFlags();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
    boolean var8 = var7.isNE();
    boolean var9 = var7.isWith();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
    java.util.Set var11 = null;
    var3.setDirectives(var11);
    com.google.javascript.jscomp.CheckLevel var13 = null;
    com.google.javascript.jscomp.CheckLevel var15 = null;
    com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var15, "");
    java.lang.String[] var18 = null;
    com.google.javascript.jscomp.JSError var19 = com.google.javascript.jscomp.JSError.make("hi!", var3, var13, var17, var18);
    com.google.javascript.jscomp.CheckLevel var24 = null;
    com.google.javascript.jscomp.DiagnosticType var26 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var24, "");
    java.lang.String[] var28 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("", 100, 0, var26, var28);
    java.lang.String[] var31 = new java.lang.String[] { "hi!"};
    com.google.javascript.jscomp.JSError var32 = com.google.javascript.jscomp.JSError.make("hi!", var3, var26, var31);
    com.google.javascript.rhino.InputId var33 = com.google.javascript.jscomp.NodeUtil.getInputId(var3);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.string("hi!");
    boolean var36 = var35.isNE();
    int var37 = var35.getSideEffectFlags();
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.string("hi!");
    boolean var40 = var39.isNE();
    boolean var41 = var39.isWith();
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.getprop(var35, var39);
    java.util.Set var43 = null;
    var35.setDirectives(var43);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.string("hi!");
    boolean var48 = var47.isNE();
    int var49 = var47.getSideEffectFlags();
    com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.string("hi!");
    boolean var52 = var51.isNE();
    boolean var53 = var51.isWith();
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.getprop(var47, var51);
    java.util.Set var55 = null;
    var47.setDirectives(var55);
    com.google.javascript.jscomp.CheckLevel var57 = null;
    com.google.javascript.jscomp.CheckLevel var59 = null;
    com.google.javascript.jscomp.DiagnosticType var61 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var59, "");
    java.lang.String[] var62 = null;
    com.google.javascript.jscomp.JSError var63 = com.google.javascript.jscomp.JSError.make("hi!", var47, var57, var61, var62);
    com.google.javascript.rhino.Node var64 = var35.useSourceInfoIfMissingFrom(var47);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.sheq(var3, var64);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test365() {}
//   public void test365() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test365"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.JSSourceFile var2 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var3 = new com.google.javascript.jscomp.JSSourceFile[] { var2};
//     com.google.javascript.jscomp.JSSourceFile var4 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var5 = new com.google.javascript.jscomp.JSSourceFile[] { var4};
//     com.google.javascript.jscomp.CompilerOptions var6 = null;
//     var1.init(var3, var5, var6);
// 
//   }

  public void test366() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test366"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.util.Set var9 = null;
    var1.setDirectives(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    int var15 = var13.getSideEffectFlags();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    boolean var19 = var17.isWith();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
    java.util.Set var21 = null;
    var13.setDirectives(var21);
    com.google.javascript.jscomp.CheckLevel var23 = null;
    com.google.javascript.jscomp.CheckLevel var25 = null;
    com.google.javascript.jscomp.DiagnosticType var27 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var25, "");
    java.lang.String[] var28 = null;
    com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("hi!", var13, var23, var27, var28);
    com.google.javascript.rhino.Node var30 = var1.useSourceInfoIfMissingFrom(var13);
    int var31 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
    int var37 = var36.getChangeTime();
    boolean var38 = var36.isCatch();
    boolean var39 = var36.isNew();
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.string("hi!");
    boolean var42 = var41.isNE();
    int var43 = var41.getSideEffectFlags();
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.string("hi!");
    boolean var46 = var45.isNE();
    boolean var47 = var45.isWith();
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.getprop(var41, var45);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.function(var1, var36, var41);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test367() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test367"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    java.util.Set var10 = null;
    var2.setDirectives(var10);
    int var12 = var2.getChildCount();
    boolean var13 = var0.isOptionalParameter(var2);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
    int var19 = var18.getChangeTime();
    boolean var20 = var18.isCatch();
    int var21 = var18.getType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var22 = var0.isPropertyTestFunction(var18);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);

  }

  public void test368() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test368"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
    int var15 = var12.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
    boolean var18 = var17.isVarArgs();
    boolean var19 = var17.isWhile();
    boolean var20 = var17.isAssignAdd();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test369() {}
//   public void test369() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test369"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     java.lang.Iterable var3 = var1.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     boolean var13 = var12.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var14 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
//     var15.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var18 = null;
//     com.google.javascript.rhino.jstype.JSType var20 = null;
//     com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
//     com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
//     com.google.javascript.rhino.jstype.FunctionType var23 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var12, var21);
//     com.google.javascript.rhino.ErrorReporter var24 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
//     var25.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var28 = null;
//     com.google.javascript.rhino.jstype.JSType var30 = null;
//     com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
//     com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
//     com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
//     int var35 = var32.getPropertiesCount();
//     com.google.javascript.rhino.jstype.ObjectType var37 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var32, "");
//     boolean var38 = var32.makesStructs();
//     boolean var39 = var23.isSubtype((com.google.javascript.rhino.jstype.JSType)var32);
//     boolean var40 = var23.isNumber();
//     boolean var41 = var23.isNumberValueType();
//     java.lang.String var42 = var23.toDebugHashCodeString();
// 
//   }

  public void test370() {}
//   public void test370() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test370"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.ErrorReporter var2 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
//     var3.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
//     com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
//     boolean var11 = var10.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var12 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
//     var13.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     com.google.javascript.rhino.jstype.JSType var18 = null;
//     com.google.javascript.rhino.jstype.JSType[] var19 = new com.google.javascript.rhino.jstype.JSType[] { var18};
//     com.google.javascript.rhino.jstype.FunctionType var20 = var13.createConstructorType(var16, false, var19);
//     com.google.javascript.rhino.jstype.JSType var22 = var20.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var23 = var20.getTypeOfThis();
//     boolean var24 = var10.canCastTo((com.google.javascript.rhino.jstype.JSType)var20);
//     com.google.javascript.rhino.ErrorReporter var25 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
//     var26.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var29 = null;
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
//     com.google.javascript.rhino.jstype.FunctionType var33 = var26.createConstructorType(var29, false, var32);
//     com.google.javascript.rhino.jstype.JSType var35 = var33.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var36 = var33.toMaybeFunctionType();
//     com.google.javascript.rhino.ErrorReporter var37 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
//     var38.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var41 = null;
//     com.google.javascript.rhino.jstype.JSType var43 = null;
//     com.google.javascript.rhino.jstype.JSType[] var44 = new com.google.javascript.rhino.jstype.JSType[] { var43};
//     com.google.javascript.rhino.jstype.FunctionType var45 = var38.createConstructorType(var41, false, var44);
//     boolean var46 = var45.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var47 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
//     var48.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var51 = null;
//     com.google.javascript.rhino.jstype.JSType var53 = null;
//     com.google.javascript.rhino.jstype.JSType[] var54 = new com.google.javascript.rhino.jstype.JSType[] { var53};
//     com.google.javascript.rhino.jstype.FunctionType var55 = var48.createConstructorType(var51, false, var54);
//     com.google.javascript.rhino.jstype.JSType var57 = var55.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var58 = var55.getTypeOfThis();
//     boolean var59 = var45.canCastTo((com.google.javascript.rhino.jstype.JSType)var55);
//     var1.applySingletonGetter(var10, var33, (com.google.javascript.rhino.jstype.ObjectType)var55);
//     java.lang.String var61 = var1.getExportPropertyFunction();
//     java.lang.String var62 = var1.getGlobalObject();
//     boolean var63 = var0.hasNode((java.lang.Object)var1);
//     var0.pushNodeAnnotations();
//     java.util.Collection var65 = var0.getNodes();
//     java.nio.charset.Charset var67 = null;
//     com.google.javascript.jscomp.SourceFile var68 = com.google.javascript.jscomp.SourceFile.fromFile("goog.global", var67);
//     java.lang.String var69 = var68.getName();
//     var68.setOriginalPath("STRING hi!");
//     java.lang.String var72 = var68.toString();
//     java.util.Iterator var73 = var0.getNeighborNodesIterator((java.lang.Object)var72);
// 
//   }

  public void test371() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test371"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var3 = var0.getSourceLine("", (-1));
    com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
    com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var4);
    java.lang.String var8 = var0.getSourceLine("hi!: ", (-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String[] var9 = var0.toSourceArray();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test372() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test372"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    boolean var13 = var12.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    var15.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
    com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
    com.google.javascript.rhino.jstype.JSType var24 = var22.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var25 = var22.getTypeOfThis();
    boolean var26 = var12.canCastTo((com.google.javascript.rhino.jstype.JSType)var22);
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    var28.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
    com.google.javascript.rhino.jstype.FunctionType var35 = var28.createConstructorType(var31, false, var34);
    boolean var36 = var35.isInterface();
    com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var35};
    com.google.javascript.rhino.jstype.FunctionType var38 = var3.createConstructorType((com.google.javascript.rhino.jstype.JSType)var12, var37);
    com.google.javascript.rhino.Node var39 = var1.createOptionalParameters(var37);
    var39.setSourceEncodedPosition(100);
    boolean var42 = var39.isFalse();
    boolean var43 = var39.isFromExterns();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var44 = var39.getString();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test373() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test373"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.block();
    int var1 = var0.getSourceOffset();
    com.google.javascript.rhino.Node[] var2 = new com.google.javascript.rhino.Node[] { var0};
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.script(var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.paramList(var2);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test374() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test374"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    java.util.Set var10 = null;
    var2.setDirectives(var10);
    com.google.javascript.jscomp.CheckLevel var12 = null;
    com.google.javascript.jscomp.CheckLevel var14 = null;
    com.google.javascript.jscomp.DiagnosticType var16 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var14, "");
    java.lang.String[] var17 = null;
    com.google.javascript.jscomp.JSError var18 = com.google.javascript.jscomp.JSError.make("hi!", var2, var12, var16, var17);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.string("hi!");
    boolean var22 = var21.isNE();
    int var23 = var21.getSideEffectFlags();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.string("hi!");
    boolean var26 = var25.isNE();
    boolean var27 = var25.isWith();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.getprop(var21, var25);
    java.util.Set var29 = null;
    var21.setDirectives(var29);
    com.google.javascript.jscomp.CheckLevel var31 = null;
    com.google.javascript.jscomp.CheckLevel var33 = null;
    com.google.javascript.jscomp.DiagnosticType var35 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var33, "");
    java.lang.String[] var36 = null;
    com.google.javascript.jscomp.JSError var37 = com.google.javascript.jscomp.JSError.make("hi!", var21, var31, var35, var36);
    var21.addSuppression("");
    com.google.javascript.rhino.Node var40 = var2.useSourceInfoFromForTree(var21);
    boolean var41 = var2.isStringKey();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.continueNode(var2);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test375() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test375"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    java.util.Collection var1 = var0.getNodes();
    var0.clearNodeAnnotations();
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
    var4.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType var9 = null;
    com.google.javascript.rhino.jstype.JSType[] var10 = new com.google.javascript.rhino.jstype.JSType[] { var9};
    com.google.javascript.rhino.jstype.FunctionType var11 = var4.createConstructorType(var7, false, var10);
    com.google.javascript.rhino.jstype.JSType var13 = var11.findPropertyType("hi!");
    int var14 = var11.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var16 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var11, "");
    boolean var17 = var11.isFunctionPrototypeType();
    com.google.common.collect.ImmutableList var18 = var11.getTemplateTypes();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var19 = var0.getDirectedSuccNodes((java.lang.Object)var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test376() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test376"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    boolean var11 = var10.isNE();
    int var12 = var10.getSideEffectFlags();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.string("hi!");
    boolean var15 = var14.isNE();
    boolean var16 = var14.isWith();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.getprop(var10, var14);
    java.util.Set var18 = null;
    var10.setDirectives(var18);
    int var20 = var10.getChildCount();
    java.lang.Iterable var21 = var10.siblings();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.label(var1, var10);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test377() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test377"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    java.lang.Iterable var3 = var1.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    boolean var13 = var12.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    var15.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
    com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
    com.google.javascript.rhino.jstype.FunctionType var23 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var12, var21);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    java.lang.Iterable var27 = var25.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var28 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
    var29.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.rhino.jstype.JSType var34 = null;
    com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var34};
    com.google.javascript.rhino.jstype.FunctionType var36 = var29.createConstructorType(var32, false, var35);
    boolean var37 = var36.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var38 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
    var39.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType var44 = null;
    com.google.javascript.rhino.jstype.JSType[] var45 = new com.google.javascript.rhino.jstype.JSType[] { var44};
    com.google.javascript.rhino.jstype.FunctionType var46 = var39.createConstructorType(var42, false, var45);
    com.google.javascript.rhino.jstype.FunctionType var47 = var25.createConstructorType((com.google.javascript.rhino.jstype.JSType)var36, var45);
    boolean var48 = var36.isReturnTypeInferred();
    boolean var49 = var36.isTemplatizedType();
    com.google.javascript.rhino.ErrorReporter var50 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var50);
    com.google.javascript.rhino.ErrorReporter var52 = var51.getErrorReporter();
    com.google.javascript.rhino.jstype.TemplateType var53 = var51.getObjectElementKey();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var54 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var55 = var54.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var56 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var56);
    var57.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var60 = null;
    com.google.javascript.rhino.jstype.JSType var62 = null;
    com.google.javascript.rhino.jstype.JSType[] var63 = new com.google.javascript.rhino.jstype.JSType[] { var62};
    com.google.javascript.rhino.jstype.FunctionType var64 = var57.createConstructorType(var60, false, var63);
    com.google.javascript.rhino.jstype.JSType var66 = var64.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var67 = var64.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var68 = var54.getNode((java.lang.Object)var67);
    java.util.List var69 = var54.getEdges();
    com.google.javascript.rhino.jstype.JSType var70 = var1.createFunctionType((com.google.javascript.rhino.jstype.ObjectType)var36, (com.google.javascript.rhino.jstype.JSType)var53, var69);
    var36.setStruct();
    boolean var72 = var36.isInterface();
    boolean var73 = var36.isOrdinaryFunction();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test378() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test378"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    java.lang.String var2 = var1.getExportPropertyFunction();
    boolean var4 = var1.isConstant("");
    boolean var6 = var1.isValidEnumKey("2014/12/24 01:41");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "goog.exportProperty"+ "'", var2.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test379() {}
//   public void test379() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test379"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var1);
//     com.google.javascript.jscomp.JSError[] var3 = var0.getWarnings();
// 
//   }

  public void test380() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test380"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    java.util.Set var10 = null;
    var2.setDirectives(var10);
    com.google.javascript.jscomp.CheckLevel var12 = null;
    com.google.javascript.jscomp.CheckLevel var14 = null;
    com.google.javascript.jscomp.DiagnosticType var16 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var14, "");
    java.lang.String[] var17 = null;
    com.google.javascript.jscomp.JSError var18 = com.google.javascript.jscomp.JSError.make("hi!", var2, var12, var16, var17);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.string("hi!");
    boolean var22 = var21.isNE();
    int var23 = var21.getSideEffectFlags();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.string("hi!");
    boolean var26 = var25.isNE();
    boolean var27 = var25.isWith();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.getprop(var21, var25);
    java.util.Set var29 = null;
    var21.setDirectives(var29);
    com.google.javascript.jscomp.CheckLevel var31 = null;
    com.google.javascript.jscomp.CheckLevel var33 = null;
    com.google.javascript.jscomp.DiagnosticType var35 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var33, "");
    java.lang.String[] var36 = null;
    com.google.javascript.jscomp.JSError var37 = com.google.javascript.jscomp.JSError.make("hi!", var21, var31, var35, var36);
    var21.addSuppression("");
    com.google.javascript.rhino.Node var40 = var2.useSourceInfoFromForTree(var21);
    boolean var41 = var21.hasChildren();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test381() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test381"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.util.Set var9 = null;
    var1.setDirectives(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    int var15 = var13.getSideEffectFlags();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    boolean var19 = var17.isWith();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
    java.util.Set var21 = null;
    var13.setDirectives(var21);
    com.google.javascript.jscomp.CheckLevel var23 = null;
    com.google.javascript.jscomp.CheckLevel var25 = null;
    com.google.javascript.jscomp.DiagnosticType var27 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var25, "");
    java.lang.String[] var28 = null;
    com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("hi!", var13, var23, var27, var28);
    com.google.javascript.rhino.Node var30 = var1.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.Node var32 = var13.getAncestor(0);
    com.google.javascript.rhino.Node[] var33 = new com.google.javascript.rhino.Node[] { var32};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.arraylit(var33);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test382() {}
//   public void test382() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test382"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
//     com.google.javascript.rhino.Node var3 = var2.getCurrentNode();
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.block();
//     int var5 = var4.getSourceOffset();
//     com.google.javascript.rhino.Node[] var6 = new com.google.javascript.rhino.Node[] { var4};
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.script(var6);
//     var2.traverseRoots(var6);
// 
//   }

  public void test383() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test383"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var1 = var0.getGraphvizEdges();
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var4 = var3.cloneNode();
    boolean var5 = var3.isDelProp();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var8 = var7.cloneNode();
    boolean var9 = var7.isDelProp();
    com.google.javascript.rhino.Node var10 = var3.clonePropsFrom(var7);
    boolean var11 = var7.isBlock();
    boolean var12 = var7.isOnlyModifiesThisCall();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var13 = var0.getDirectedSuccNodes((java.lang.Object)var12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test384() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test384"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    boolean var9 = var8.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    var11.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var14 = null;
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType[] var17 = new com.google.javascript.rhino.jstype.JSType[] { var16};
    com.google.javascript.rhino.jstype.FunctionType var18 = var11.createConstructorType(var14, false, var17);
    com.google.javascript.rhino.jstype.JSType var20 = var18.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var21 = var18.getTypeOfThis();
    boolean var22 = var8.canCastTo((com.google.javascript.rhino.jstype.JSType)var18);
    boolean var23 = var18.isDateType();
    boolean var24 = var18.isConstructor();
    com.google.javascript.rhino.jstype.ObjectType var26 = var18.getTopMostDefiningType("hi!");
    boolean var27 = var26.isOrdinaryFunction();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test385() {}
//   public void test385() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test385"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     com.google.javascript.jscomp.JSSourceFile var2 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var3 = new com.google.javascript.jscomp.JSSourceFile[] { var2};
//     com.google.javascript.jscomp.JSSourceFile var4 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var5 = new com.google.javascript.jscomp.JSSourceFile[] { var4};
//     com.google.javascript.jscomp.CompilerOptions var6 = null;
//     com.google.javascript.jscomp.Result var7 = var0.compile(var3, var5, var6);
// 
//   }

  public void test386() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test386"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var1 = com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.valueOf("");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test387() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test387"); }


    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
    var4.setQuotedString();
    boolean var6 = var4.hasMoreThanOneChild();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test388() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test388"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("goog.exportProperty");
    int var3 = var1.getLineOfOffset(100);
    com.google.javascript.jscomp.CompilerInput var5 = new com.google.javascript.jscomp.CompilerInput(var1, true);
    int var7 = var1.getLineOfOffset(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.io.Reader var8 = var1.getCodeReader();
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);

  }

  public void test389() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test389"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
    boolean var11 = var10.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    var13.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType[] var19 = new com.google.javascript.rhino.jstype.JSType[] { var18};
    com.google.javascript.rhino.jstype.FunctionType var20 = var13.createConstructorType(var16, false, var19);
    com.google.javascript.rhino.jstype.JSType var22 = var20.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var23 = var20.getTypeOfThis();
    boolean var24 = var10.canCastTo((com.google.javascript.rhino.jstype.JSType)var20);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    var26.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var29 = null;
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.jstype.FunctionType var33 = var26.createConstructorType(var29, false, var32);
    com.google.javascript.rhino.jstype.JSType var35 = var33.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var36 = var33.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    var38.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var41 = null;
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.rhino.jstype.JSType[] var44 = new com.google.javascript.rhino.jstype.JSType[] { var43};
    com.google.javascript.rhino.jstype.FunctionType var45 = var38.createConstructorType(var41, false, var44);
    boolean var46 = var45.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    var48.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.rhino.jstype.JSType var53 = null;
    com.google.javascript.rhino.jstype.JSType[] var54 = new com.google.javascript.rhino.jstype.JSType[] { var53};
    com.google.javascript.rhino.jstype.FunctionType var55 = var48.createConstructorType(var51, false, var54);
    com.google.javascript.rhino.jstype.JSType var57 = var55.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var58 = var55.getTypeOfThis();
    boolean var59 = var45.canCastTo((com.google.javascript.rhino.jstype.JSType)var55);
    var1.applySingletonGetter(var10, var33, (com.google.javascript.rhino.jstype.ObjectType)var55);
    java.lang.String var61 = var1.getExportPropertyFunction();
    java.lang.String var62 = var1.getGlobalObject();
    boolean var63 = var0.hasNode((java.lang.Object)var1);
    var0.pushNodeAnnotations();
    java.util.Collection var65 = var0.getNodes();
    com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.paramList();
    var66.setType(0);
    java.lang.Object var69 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.disconnectInDirection((java.lang.Object)0, var69);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "goog.exportProperty"+ "'", var61.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "goog.global"+ "'", var62.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test390() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test390"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var2 = var1.cloneNode();
    boolean var3 = var1.isDelProp();
    boolean var4 = var1.isDefaultCase();
    boolean var5 = var1.isVar();
    boolean var6 = var1.isFalse();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var9 = var8.cloneNode();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.string("hi!");
    boolean var12 = var11.isNE();
    int var13 = var11.getSideEffectFlags();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.string("hi!");
    boolean var16 = var15.isNE();
    boolean var17 = var15.isWith();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.getprop(var11, var15);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.string("hi!");
    var15.addChildToBack(var20);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var22 = var20.getJsDocBuilderForNode();
    int var23 = var20.getCharno();
    java.lang.Object var25 = var20.getProp(10);
    boolean var26 = var20.isAnd();
    com.google.javascript.rhino.InputId var27 = var20.getInputId();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.replaceChildAfter(var9, var20);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test391() {}
//   public void test391() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test391"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var1);
//     double var3 = var0.getProgress();
//     com.google.javascript.jscomp.SourceFile var4 = null;
//     java.nio.charset.Charset var6 = null;
//     com.google.javascript.jscomp.SourceFile var7 = com.google.javascript.jscomp.SourceFile.fromFile("goog.global", var6);
//     com.google.javascript.jscomp.CompilerOptions var8 = null;
//     com.google.javascript.jscomp.Result var9 = var0.compile(var4, var7, var8);
// 
//   }

  public void test392() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test392"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("goog.exportProperty");
    int var3 = var1.getLineOfOffset(100);
    com.google.javascript.jscomp.CompilerInput var5 = new com.google.javascript.jscomp.CompilerInput(var1, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var7 = var1.getLineOffset(100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);

  }

  public void test393() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test393"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
    int var15 = var12.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
    com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
    boolean var19 = var18.hasAnyTemplateTypesInternal();
    com.google.javascript.rhino.jstype.BooleanLiteralSet var20 = var18.getPossibleToBooleanOutcomes();
    java.lang.String var21 = var20.toString();
    java.lang.Class var22 = var20.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var24 = java.lang.Enum.<java.lang.Enum>valueOf(var22, "Unversioned directory");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "TRUE"+ "'", var21.equals("TRUE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test394() {}
//   public void test394() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test394"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     double var1 = var0.getProgress();
//     java.util.Map var2 = var0.getInputsById();
// 
//   }

  public void test395() {}
//   public void test395() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test395"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
//     com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var6);
//     double var8 = var5.getProgress();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var5);
//     com.google.javascript.jscomp.Scope var10 = var5.getTopScope();
//     com.google.javascript.jscomp.JSSourceFile var11 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var12 = new com.google.javascript.jscomp.JSSourceFile[] { var11};
//     com.google.javascript.jscomp.JSSourceFile var13 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var14 = new com.google.javascript.jscomp.JSSourceFile[] { var13};
//     com.google.javascript.jscomp.CompilerOptions var15 = null;
//     var5.init(var12, var14, var15);
// 
//   }

  public void test396() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test396"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.string("hi!");
    var6.addChildToBack(var11);
    com.google.javascript.rhino.Node var13 = var11.getLastSibling();
    com.google.javascript.rhino.Node[] var14 = new com.google.javascript.rhino.Node[] { var13};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(1, var14);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test397() {}
//   public void test397() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test397"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     int var5 = var3.getLineOffset(0);
// 
//   }

  public void test398() {}
//   public void test398() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test398"); }
// 
// 
//     com.google.javascript.jscomp.JSModule[] var0 = null;
//     com.google.javascript.jscomp.JSModuleGraph var1 = new com.google.javascript.jscomp.JSModuleGraph(var0);
// 
//   }

  public void test399() {}
//   public void test399() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test399"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.ErrorReporter var1 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
//     var2.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
//     com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
//     boolean var10 = var9.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var11 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
//     var12.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
//     com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
//     com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
//     boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
//     com.google.javascript.rhino.ErrorReporter var24 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
//     var25.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var28 = null;
//     com.google.javascript.rhino.jstype.JSType var30 = null;
//     com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
//     com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
//     com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
//     com.google.javascript.rhino.ErrorReporter var36 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
//     var37.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var40 = null;
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
//     com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
//     boolean var45 = var44.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var46 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
//     var47.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var50 = null;
//     com.google.javascript.rhino.jstype.JSType var52 = null;
//     com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
//     com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
//     com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
//     boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
//     var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
//     com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var62 = var61.cloneNode();
//     boolean var63 = var61.isDelProp();
//     com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var66 = var65.cloneNode();
//     boolean var67 = var65.isDelProp();
//     com.google.javascript.rhino.Node var68 = var61.clonePropsFrom(var65);
//     com.google.javascript.rhino.JSDocInfo var69 = var65.getJSDocInfo();
//     com.google.javascript.jscomp.CodingConvention.Bind var71 = var0.describeFunctionBind(var65, true);
//     boolean var72 = var65.isThrow();
//     var65.setSourceEncodedPositionForTree(10);
//     com.google.javascript.rhino.JSDocInfo var75 = null;
//     com.google.javascript.rhino.Node var76 = var65.setJSDocInfo(var75);
//     com.google.javascript.rhino.Node var77 = null;
//     boolean var78 = var76.isEquivalentToTyped(var77);
// 
//   }

  public void test400() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test400"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    java.lang.String var2 = var0.getExportPropertyFunction();
    boolean var4 = var0.isConstant("goog.exportSymbol");
    boolean var6 = var0.isConstant("false");
    java.util.Collection var7 = var0.getIndirectlyDeclaredProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "goog.exportProperty"+ "'", var2.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test401() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test401"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    var5.addChildToBack(var10);
    com.google.javascript.rhino.Node var12 = var10.getLastSibling();
    com.google.javascript.rhino.JSDocInfo var13 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var16 = var15.cloneNode();
    boolean var17 = var15.isDelProp();
    boolean var18 = var15.isDefaultCase();
    boolean var19 = var15.isVar();
    com.google.javascript.rhino.Node var20 = var12.useSourceInfoFrom(var15);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.script();
    com.google.javascript.rhino.Node var25 = new com.google.javascript.rhino.Node(0, var22, 100, 0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.propdef(var20, var22);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test402() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test402"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    double var1 = var0.getProgress();
    com.google.javascript.jscomp.Compiler.CodeBuilder var2 = null;
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    java.util.Set var8 = null;
    var5.setDirectives(var8);
    boolean var10 = var5.isUnscopedQualifiedName();
    var5.setCharno(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.toSource(var2, (-1), var5);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test403() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test403"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.block();
    int var1 = var0.getSourceOffset();
    com.google.javascript.rhino.Node[] var2 = new com.google.javascript.rhino.Node[] { var0};
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.script(var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.script(var2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test404() {}
//   public void test404() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test404"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var4 = var3.isNE();
//     int var5 = var3.getSideEffectFlags();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var8 = var7.isNE();
//     boolean var9 = var7.isWith();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
//     java.util.Set var11 = null;
//     var3.setDirectives(var11);
//     com.google.javascript.jscomp.CheckLevel var13 = null;
//     com.google.javascript.jscomp.CheckLevel var15 = null;
//     com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var15, "");
//     java.lang.String[] var18 = null;
//     com.google.javascript.jscomp.JSError var19 = com.google.javascript.jscomp.JSError.make("hi!", var3, var13, var17, var18);
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var23 = var22.isNE();
//     int var24 = var22.getSideEffectFlags();
//     com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var27 = var26.isNE();
//     boolean var28 = var26.isWith();
//     com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.getprop(var22, var26);
//     java.util.Set var30 = null;
//     var22.setDirectives(var30);
//     com.google.javascript.jscomp.CheckLevel var32 = null;
//     com.google.javascript.jscomp.CheckLevel var34 = null;
//     com.google.javascript.jscomp.DiagnosticType var36 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var34, "");
//     java.lang.String[] var37 = null;
//     com.google.javascript.jscomp.JSError var38 = com.google.javascript.jscomp.JSError.make("hi!", var22, var32, var36, var37);
//     var22.addSuppression("");
//     com.google.javascript.rhino.Node var41 = var3.useSourceInfoFromForTree(var22);
//     com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.regexp(var0, var22);
// 
//   }

  public void test405() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test405"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    boolean var9 = var8.canBeCalled();
    boolean var10 = var8.isTemplateType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test406() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test406"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var11 = var8.getTypeOfThis();
    com.google.javascript.rhino.jstype.TemplatizedType var12 = com.google.javascript.rhino.jstype.JSType.toMaybeTemplatizedType((com.google.javascript.rhino.jstype.JSType)var8);
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    java.lang.Iterable var16 = var14.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    var18.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var21 = null;
    com.google.javascript.rhino.jstype.JSType var23 = null;
    com.google.javascript.rhino.jstype.JSType[] var24 = new com.google.javascript.rhino.jstype.JSType[] { var23};
    com.google.javascript.rhino.jstype.FunctionType var25 = var18.createConstructorType(var21, false, var24);
    boolean var26 = var25.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    var28.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
    com.google.javascript.rhino.jstype.FunctionType var35 = var28.createConstructorType(var31, false, var34);
    com.google.javascript.rhino.jstype.FunctionType var36 = var14.createConstructorType((com.google.javascript.rhino.jstype.JSType)var25, var34);
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    var38.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var41 = null;
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.rhino.jstype.JSType[] var44 = new com.google.javascript.rhino.jstype.JSType[] { var43};
    com.google.javascript.rhino.jstype.FunctionType var45 = var38.createConstructorType(var41, false, var44);
    com.google.javascript.rhino.jstype.JSType var47 = var45.findPropertyType("hi!");
    int var48 = var45.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var50 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var45, "");
    boolean var51 = var45.makesStructs();
    boolean var52 = var36.isSubtype((com.google.javascript.rhino.jstype.JSType)var45);
    com.google.javascript.rhino.jstype.TernaryValue var53 = var8.testForEquality((com.google.javascript.rhino.jstype.JSType)var36);
    boolean var54 = var8.isBooleanValueType();
    int var55 = var8.getMaxArguments();
    boolean var56 = var8.isResolved();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test407() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test407"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    java.util.Set var10 = null;
    var2.setDirectives(var10);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.string("hi!");
    boolean var15 = var14.isNE();
    int var16 = var14.getSideEffectFlags();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.string("hi!");
    boolean var19 = var18.isNE();
    boolean var20 = var18.isWith();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.getprop(var14, var18);
    java.util.Set var22 = null;
    var14.setDirectives(var22);
    com.google.javascript.jscomp.CheckLevel var24 = null;
    com.google.javascript.jscomp.CheckLevel var26 = null;
    com.google.javascript.jscomp.DiagnosticType var28 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var26, "");
    java.lang.String[] var29 = null;
    com.google.javascript.jscomp.JSError var30 = com.google.javascript.jscomp.JSError.make("hi!", var14, var24, var28, var29);
    com.google.javascript.rhino.Node var31 = var2.useSourceInfoIfMissingFrom(var14);
    int var32 = var2.getSideEffectFlags();
    boolean var33 = var2.isEmpty();
    boolean var34 = var2.isTry();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var35 = new com.google.javascript.rhino.Node(100, var2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test408() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test408"); }


    com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
    com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
    boolean var4 = var3.isNE();
    int var5 = var3.getSideEffectFlags();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
    boolean var8 = var7.isNE();
    boolean var9 = var7.isWith();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
    var1.validateExpression(var3);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.block();
    int var13 = var12.getSourceOffset();
    com.google.javascript.rhino.Node[] var14 = new com.google.javascript.rhino.Node[] { var12};
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.script(var14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.newNode(var3, var14);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test409() {}
//   public void test409() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test409"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var4);
//     com.google.javascript.jscomp.JSSourceFile var6 = null;
//     com.google.javascript.jscomp.JSModule[] var7 = null;
//     com.google.javascript.jscomp.CompilerOptions var8 = null;
//     com.google.javascript.jscomp.Result var9 = var0.compile(var6, var7, var8);
// 
//   }

  public void test410() {}
//   public void test410() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test410"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
//     com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var4 = var3.isNE();
//     int var5 = var3.getSideEffectFlags();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var8 = var7.isNE();
//     boolean var9 = var7.isWith();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
//     var1.validateExpression(var3);
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var14 = var13.isNE();
//     int var15 = var13.getSideEffectFlags();
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var18 = var17.isNE();
//     boolean var19 = var17.isWith();
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.string("hi!");
//     var17.addChildToBack(var22);
//     com.google.javascript.rhino.Node.FileLevelJsDocBuilder var24 = var22.getJsDocBuilderForNode();
//     int var25 = var22.getCharno();
//     java.lang.Object var27 = var22.getProp(10);
//     boolean var28 = var22.isThis();
//     var1.validateScript(var22);
// 
//   }

  public void test411() {}
//   public void test411() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test411"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     double var2 = var1.getProgress();
//     com.google.javascript.jscomp.JsAst var3 = null;
//     var1.addNewScript(var3);
// 
//   }

  public void test412() {}
//   public void test412() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test412"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var1 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
//     var3.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
//     com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
//     boolean var11 = var10.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var12 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
//     var13.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     com.google.javascript.rhino.jstype.JSType var18 = null;
//     com.google.javascript.rhino.jstype.JSType[] var19 = new com.google.javascript.rhino.jstype.JSType[] { var18};
//     com.google.javascript.rhino.jstype.FunctionType var20 = var13.createConstructorType(var16, false, var19);
//     com.google.javascript.rhino.jstype.JSType var22 = var20.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var23 = var20.getTypeOfThis();
//     boolean var24 = var10.canCastTo((com.google.javascript.rhino.jstype.JSType)var20);
//     boolean var25 = var20.isDateType();
//     boolean var26 = var20.isConstructor();
//     com.google.javascript.rhino.jstype.ObjectType var28 = var20.getTopMostDefiningType("hi!");
//     boolean var29 = var1.addVarArgs((com.google.javascript.rhino.jstype.JSType)var20);
// 
//   }

  public void test413() {}
//   public void test413() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test413"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
//     java.lang.String var2 = var0.getExportPropertyFunction();
//     boolean var4 = var0.isConstant("goog.exportSymbol");
//     com.google.javascript.rhino.ErrorReporter var5 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
//     var6.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var9 = null;
//     com.google.javascript.rhino.jstype.JSType var11 = null;
//     com.google.javascript.rhino.jstype.JSType[] var12 = new com.google.javascript.rhino.jstype.JSType[] { var11};
//     com.google.javascript.rhino.jstype.FunctionType var13 = var6.createConstructorType(var9, false, var12);
//     com.google.javascript.rhino.jstype.ObjectType var14 = var13.toObjectType();
//     var13.clearCachedValues();
//     com.google.javascript.rhino.ErrorReporter var16 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
//     java.lang.Iterable var19 = var17.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var20 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
//     var21.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var24 = null;
//     com.google.javascript.rhino.jstype.JSType var26 = null;
//     com.google.javascript.rhino.jstype.JSType[] var27 = new com.google.javascript.rhino.jstype.JSType[] { var26};
//     com.google.javascript.rhino.jstype.FunctionType var28 = var21.createConstructorType(var24, false, var27);
//     boolean var29 = var28.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var30 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
//     var31.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var34 = null;
//     com.google.javascript.rhino.jstype.JSType var36 = null;
//     com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var36};
//     com.google.javascript.rhino.jstype.FunctionType var38 = var31.createConstructorType(var34, false, var37);
//     com.google.javascript.rhino.jstype.FunctionType var39 = var17.createConstructorType((com.google.javascript.rhino.jstype.JSType)var28, var37);
//     com.google.javascript.jscomp.CodingConvention.SubclassType var40 = null;
//     var0.applySubclassRelationship(var13, var39, var40);
//     com.google.javascript.rhino.ErrorReporter var42 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var42);
//     var43.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var46 = null;
//     com.google.javascript.rhino.jstype.JSType var48 = null;
//     com.google.javascript.rhino.jstype.JSType[] var49 = new com.google.javascript.rhino.jstype.JSType[] { var48};
//     com.google.javascript.rhino.jstype.FunctionType var50 = var43.createConstructorType(var46, false, var49);
//     boolean var51 = var50.isInterface();
//     boolean var52 = var50.isUnionType();
//     boolean var53 = var50.isInterface();
//     com.google.javascript.rhino.ErrorReporter var54 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var54);
//     var55.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var58 = null;
//     com.google.javascript.rhino.jstype.JSType var60 = null;
//     com.google.javascript.rhino.jstype.JSType[] var61 = new com.google.javascript.rhino.jstype.JSType[] { var60};
//     com.google.javascript.rhino.jstype.FunctionType var62 = var55.createConstructorType(var58, false, var61);
//     boolean var63 = var62.canBeCalled();
//     boolean var64 = var62.isTemplatizedType();
//     com.google.javascript.rhino.jstype.ObjectType var66 = var62.getTopMostDefiningType("hi!");
//     com.google.javascript.rhino.ErrorReporter var67 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var68 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var67);
//     var68.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var71 = null;
//     com.google.javascript.rhino.jstype.JSType var73 = null;
//     com.google.javascript.rhino.jstype.JSType[] var74 = new com.google.javascript.rhino.jstype.JSType[] { var73};
//     com.google.javascript.rhino.jstype.FunctionType var75 = var68.createConstructorType(var71, false, var74);
//     com.google.javascript.rhino.jstype.JSType var77 = var75.findPropertyType("hi!");
//     com.google.javascript.rhino.JSDocInfo var78 = var75.getJSDocInfo();
//     boolean var79 = var75.isNumber();
//     com.google.javascript.rhino.jstype.Property var81 = var75.getOwnSlot("goog.global");
//     com.google.javascript.rhino.jstype.FunctionType var82 = null;
//     com.google.javascript.rhino.ErrorReporter var83 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var84 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var83);
//     var84.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var87 = null;
//     com.google.javascript.rhino.jstype.JSType var89 = null;
//     com.google.javascript.rhino.jstype.JSType[] var90 = new com.google.javascript.rhino.jstype.JSType[] { var89};
//     com.google.javascript.rhino.jstype.FunctionType var91 = var84.createConstructorType(var87, false, var90);
//     boolean var92 = var91.isInterface();
//     boolean var93 = var91.hasInstanceType();
//     var0.applyDelegateRelationship((com.google.javascript.rhino.jstype.ObjectType)var50, (com.google.javascript.rhino.jstype.ObjectType)var62, (com.google.javascript.rhino.jstype.ObjectType)var75, var82, var91);
//     java.lang.String var95 = var75.toString();
// 
//   }

  public void test414() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test414"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
    boolean var4 = var3.isNE();
    int var5 = var3.getSideEffectFlags();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
    boolean var8 = var7.isNE();
    boolean var9 = var7.isWith();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
    java.util.Set var11 = null;
    var3.setDirectives(var11);
    com.google.javascript.jscomp.CheckLevel var13 = null;
    com.google.javascript.jscomp.CheckLevel var15 = null;
    com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var15, "");
    java.lang.String[] var18 = null;
    com.google.javascript.jscomp.JSError var19 = com.google.javascript.jscomp.JSError.make("hi!", var3, var13, var17, var18);
    com.google.javascript.jscomp.CheckLevel var24 = null;
    com.google.javascript.jscomp.DiagnosticType var26 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var24, "");
    java.lang.String[] var28 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("", 100, 0, var26, var28);
    java.lang.String[] var31 = new java.lang.String[] { "hi!"};
    com.google.javascript.jscomp.JSError var32 = com.google.javascript.jscomp.JSError.make("hi!", var3, var26, var31);
    com.google.javascript.rhino.InputId var33 = com.google.javascript.jscomp.NodeUtil.getInputId(var3);
    boolean var34 = var3.isVoid();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.setSideEffectFlags(0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test415() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test415"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    boolean var13 = var12.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    var15.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
    com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
    com.google.javascript.rhino.jstype.JSType var24 = var22.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var25 = var22.getTypeOfThis();
    boolean var26 = var12.canCastTo((com.google.javascript.rhino.jstype.JSType)var22);
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    var28.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
    com.google.javascript.rhino.jstype.FunctionType var35 = var28.createConstructorType(var31, false, var34);
    boolean var36 = var35.isInterface();
    com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var35};
    com.google.javascript.rhino.jstype.FunctionType var38 = var3.createConstructorType((com.google.javascript.rhino.jstype.JSType)var12, var37);
    com.google.javascript.rhino.Node var39 = var1.createOptionalParameters(var37);
    var39.setSourceEncodedPosition(100);
    boolean var42 = var39.isFalse();
    boolean var43 = var39.isFromExterns();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.pos(var39);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test416() {}
//   public void test416() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test416"); }
// 
// 
//     java.io.InputStream var2 = null;
//     com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromInputStream("goog.global", "", var2);
// 
//   }

  public void test417() {}
//   public void test417() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test417"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
//     com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var6);
//     double var8 = var5.getProgress();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var5);
//     java.lang.String var10 = var3.getCode();
// 
//   }

  public void test418() {}
//   public void test418() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test418"); }
// 
// 
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
//     int var6 = var5.getChangeTime();
//     boolean var7 = var5.isCatch();
//     int var8 = var5.getType();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var11 = var10.cloneNode();
//     boolean var12 = var10.isDelProp();
//     boolean var13 = var10.isDefaultCase();
//     boolean var14 = var10.isNE();
//     var10.setLength(100);
//     com.google.javascript.rhino.Node var19 = new com.google.javascript.rhino.Node(1, var5, var10, 1, (-1));
//     com.google.javascript.rhino.Node var20 = null;
//     var5.addChildToBack(var20);
// 
//   }

  public void test419() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test419"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    var2.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
    com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
    boolean var10 = var9.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    var12.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
    com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
    boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    var37.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
    boolean var45 = var44.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    var47.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
    com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
    boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
    var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.string("hi!");
    boolean var62 = var61.isNE();
    int var63 = var61.getSideEffectFlags();
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.string("hi!");
    boolean var66 = var65.isNE();
    boolean var67 = var65.isWith();
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.getprop(var61, var65);
    com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.IR.string("hi!");
    var65.addChildToBack(var70);
    com.google.javascript.rhino.Node var72 = var70.getLastSibling();
    boolean var73 = var72.isLocalResultCall();
    java.util.Map var74 = null;
    var0.checkForCallingConventionDefiningCalls(var72, var74);
    int var76 = var72.getType();
    var72.setVarArgs(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 40);

  }

  public void test420() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test420"); }


    java.nio.charset.Charset var1 = null;
    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromFile("goog.global", var1);
    var2.clearCachedSource();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.io.Reader var4 = var2.getCodeReader();
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test421() {}
//   public void test421() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test421"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var4);
//     int var6 = var0.getWarningCount();
// 
//   }

  public void test422() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test422"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.error("NUMBER 0.0", "NUMBER 0.0");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test423() {}
//   public void test423() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test423"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
//     com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var6);
//     double var8 = var5.getProgress();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var5);
//     com.google.javascript.jscomp.Scope var10 = var5.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var11 = null;
//     com.google.javascript.jscomp.NodeTraversal var12 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var11);
//     var5.processDefines();
// 
//   }

  public void test424() {}
//   public void test424() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test424"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
//     com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var4 = var3.cloneNode();
//     boolean var5 = var3.isDelProp();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var8 = var7.cloneNode();
//     boolean var9 = var7.isDelProp();
//     com.google.javascript.rhino.Node var10 = var3.clonePropsFrom(var7);
//     boolean var11 = var3.isHook();
//     boolean var12 = var3.isContinue();
//     boolean var13 = var3.isAssignAdd();
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var16 = var15.cloneNode();
//     boolean var17 = var15.isDelProp();
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var20 = var19.cloneNode();
//     boolean var21 = var19.isDelProp();
//     com.google.javascript.rhino.Node var22 = var15.clonePropsFrom(var19);
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
//     com.google.javascript.rhino.Node var28 = var27.getLastChild();
//     com.google.javascript.rhino.Node var29 = var19.srcrefTree(var27);
//     boolean var30 = var27.isUnscopedQualifiedName();
//     boolean var31 = var27.isNot();
//     var1.process(var3, var27);
// 
//   }

  public void test425() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test425"); }


    java.nio.charset.Charset var1 = null;
    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromFile("Unversioned directory", var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test426() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test426"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node((-1), 1, 0);
    boolean var4 = var3.isLocalResultCall();
    var3.detachChildren();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test427() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test427"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.JSTypeNative var1 = com.google.javascript.rhino.jstype.JSTypeNative.valueOf("hi!: ");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test428() {}
//   public void test428() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test428"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.ErrorReporter var1 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
//     var2.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
//     com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
//     boolean var10 = var9.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var11 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
//     var12.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
//     com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
//     com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
//     boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
//     com.google.javascript.rhino.ErrorReporter var24 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
//     var25.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var28 = null;
//     com.google.javascript.rhino.jstype.JSType var30 = null;
//     com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
//     com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
//     com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
//     com.google.javascript.rhino.ErrorReporter var36 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
//     var37.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var40 = null;
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
//     com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
//     boolean var45 = var44.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var46 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
//     var47.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var50 = null;
//     com.google.javascript.rhino.jstype.JSType var52 = null;
//     com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
//     com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
//     com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
//     boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
//     var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
//     com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var62 = var61.isNE();
//     int var63 = var61.getSideEffectFlags();
//     com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var66 = var65.isNE();
//     boolean var67 = var65.isWith();
//     com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.getprop(var61, var65);
//     com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.IR.string("hi!");
//     var65.addChildToBack(var70);
//     com.google.javascript.rhino.Node var72 = var70.getLastSibling();
//     boolean var73 = var72.isLocalResultCall();
//     java.util.Map var74 = null;
//     var0.checkForCallingConventionDefiningCalls(var72, var74);
//     com.google.javascript.rhino.Node var76 = null;
//     com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.eq(var72, var76);
// 
//   }

  public void test429() {}
//   public void test429() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test429"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
//     java.lang.String var2 = var1.getExportPropertyFunction();
//     boolean var4 = var1.isValidEnumKey("");
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var7 = var6.isNE();
//     int var8 = var6.getSideEffectFlags();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var11 = var10.isNE();
//     boolean var12 = var10.isWith();
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.getprop(var6, var10);
//     var10.removeProp(0);
//     java.lang.String var16 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var10);
//     java.util.Set var17 = null;
//     var10.setDirectives(var17);
//     java.lang.Iterable var19 = var10.siblings();
//     boolean var20 = var1.isVarArgsParameter(var10);
//     boolean var23 = var1.isExported("STRING hi!", true);
//     com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var26 = var25.isNE();
//     int var27 = var25.getSideEffectFlags();
//     com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var30 = var29.isNE();
//     boolean var31 = var29.isWith();
//     com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.getprop(var25, var29);
//     com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.string("hi!");
//     var29.addChildToBack(var34);
//     boolean var36 = var29.isVar();
//     com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var39 = var38.isNE();
//     int var40 = var38.getSideEffectFlags();
//     com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var43 = var42.isNE();
//     boolean var44 = var42.isWith();
//     com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.getprop(var38, var42);
//     com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.string("hi!");
//     var42.addChildToBack(var47);
//     com.google.javascript.rhino.Node.FileLevelJsDocBuilder var49 = var47.getJsDocBuilderForNode();
//     int var50 = var47.getCharno();
//     boolean var51 = var29.isEquivalentTo(var47);
//     com.google.javascript.jscomp.CodingConvention.DelegateRelationship var52 = var1.getDelegateRelationship(var29);
//     boolean var53 = var29.isNot();
//     java.lang.Appendable var54 = null;
//     var29.appendStringTree(var54);
// 
//   }

  public void test430() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test430"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    java.lang.Iterable var3 = var1.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    boolean var13 = var12.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    var15.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
    com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
    com.google.javascript.rhino.jstype.FunctionType var23 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var12, var21);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    java.lang.Iterable var27 = var25.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var28 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
    var29.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.rhino.jstype.JSType var34 = null;
    com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var34};
    com.google.javascript.rhino.jstype.FunctionType var36 = var29.createConstructorType(var32, false, var35);
    boolean var37 = var36.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var38 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
    var39.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType var44 = null;
    com.google.javascript.rhino.jstype.JSType[] var45 = new com.google.javascript.rhino.jstype.JSType[] { var44};
    com.google.javascript.rhino.jstype.FunctionType var46 = var39.createConstructorType(var42, false, var45);
    com.google.javascript.rhino.jstype.FunctionType var47 = var25.createConstructorType((com.google.javascript.rhino.jstype.JSType)var36, var45);
    boolean var48 = var36.isReturnTypeInferred();
    boolean var49 = var36.isTemplatizedType();
    com.google.javascript.rhino.ErrorReporter var50 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var50);
    com.google.javascript.rhino.ErrorReporter var52 = var51.getErrorReporter();
    com.google.javascript.rhino.jstype.TemplateType var53 = var51.getObjectElementKey();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var54 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var55 = var54.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var56 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var56);
    var57.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var60 = null;
    com.google.javascript.rhino.jstype.JSType var62 = null;
    com.google.javascript.rhino.jstype.JSType[] var63 = new com.google.javascript.rhino.jstype.JSType[] { var62};
    com.google.javascript.rhino.jstype.FunctionType var64 = var57.createConstructorType(var60, false, var63);
    com.google.javascript.rhino.jstype.JSType var66 = var64.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var67 = var64.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var68 = var54.getNode((java.lang.Object)var67);
    java.util.List var69 = var54.getEdges();
    com.google.javascript.rhino.jstype.JSType var70 = var1.createFunctionType((com.google.javascript.rhino.jstype.ObjectType)var36, (com.google.javascript.rhino.jstype.JSType)var53, var69);
    boolean var71 = var36.isInterface();
    com.google.javascript.rhino.ErrorReporter var72 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var73 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var72);
    java.lang.Iterable var75 = var73.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var76 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var76);
    var77.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var80 = null;
    com.google.javascript.rhino.jstype.JSType var82 = null;
    com.google.javascript.rhino.jstype.JSType[] var83 = new com.google.javascript.rhino.jstype.JSType[] { var82};
    com.google.javascript.rhino.jstype.FunctionType var84 = var77.createConstructorType(var80, false, var83);
    boolean var85 = var84.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var86 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var87 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var86);
    var87.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var90 = null;
    com.google.javascript.rhino.jstype.JSType var92 = null;
    com.google.javascript.rhino.jstype.JSType[] var93 = new com.google.javascript.rhino.jstype.JSType[] { var92};
    com.google.javascript.rhino.jstype.FunctionType var94 = var87.createConstructorType(var90, false, var93);
    com.google.javascript.rhino.jstype.FunctionType var95 = var73.createConstructorType((com.google.javascript.rhino.jstype.JSType)var84, var93);
    com.google.javascript.rhino.jstype.ObjectType var96 = var84.getPrototype();
    com.google.javascript.rhino.jstype.JSType.TypePair var97 = var36.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType)var84);
    com.google.javascript.rhino.jstype.ObjectType var98 = var84.toObjectType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test431() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test431"); }


    com.google.javascript.jscomp.SourceAst var0 = null;
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
    com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
    com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
    com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var6);
    double var8 = var5.getProgress();
    var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var5);
    com.google.javascript.jscomp.CompilerOptions var10 = null;
    com.google.javascript.jscomp.DefaultPassConfig var11 = new com.google.javascript.jscomp.DefaultPassConfig(var10);
    var5.setPassConfig((com.google.javascript.jscomp.PassConfig)var11);
    com.google.javascript.jscomp.NodeTraversal.Callback var13 = null;
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.block();
    int var15 = var14.getSourceOffset();
    com.google.javascript.rhino.Node[] var16 = new com.google.javascript.rhino.Node[] { var14};
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.script(var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var5, var13, var16);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test432() {}
//   public void test432() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test432"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
//     java.lang.String var2 = var1.getExportPropertyFunction();
//     com.google.javascript.rhino.Node var3 = null;
//     com.google.javascript.jscomp.CodingConvention.SubclassRelationship var4 = var1.getClassesDefinedByCall(var3);
// 
//   }

  public void test433() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test433"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    boolean var3 = var1.isFunction();
    java.lang.String var4 = var1.toString();
    int var5 = var1.getSideEffectFlags();
    com.google.javascript.rhino.InputId var6 = com.google.javascript.jscomp.NodeUtil.getInputId(var1);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.block();
    com.google.javascript.rhino.InputId var8 = var7.getInputId();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.eq(var1, var7);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "STRING hi!"+ "'", var4.equals("STRING hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test434() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test434"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    boolean var9 = var8.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    var11.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var14 = null;
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType[] var17 = new com.google.javascript.rhino.jstype.JSType[] { var16};
    com.google.javascript.rhino.jstype.FunctionType var18 = var11.createConstructorType(var14, false, var17);
    com.google.javascript.rhino.jstype.JSType var20 = var18.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var21 = var18.getTypeOfThis();
    boolean var22 = var8.canCastTo((com.google.javascript.rhino.jstype.JSType)var18);
    boolean var23 = var18.isDateType();
    boolean var24 = var18.isConstructor();
    com.google.javascript.rhino.Node var25 = var18.getRootNode();
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
    var27.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.rhino.jstype.JSType[] var33 = new com.google.javascript.rhino.jstype.JSType[] { var32};
    com.google.javascript.rhino.jstype.FunctionType var34 = var27.createConstructorType(var30, false, var33);
    boolean var35 = var34.isInterface();
    com.google.javascript.rhino.jstype.JSType var36 = var18.getLeastSupertype((com.google.javascript.rhino.jstype.JSType)var34);
    boolean var38 = var34.hasProperty("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test435() {}
//   public void test435() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test435"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
//     com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var6);
//     double var8 = var5.getProgress();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var5);
//     com.google.javascript.jscomp.Scope var10 = var5.getTopScope();
//     com.google.javascript.rhino.Node var11 = var5.getRoot();
//     boolean var12 = var5.acceptEcmaScript5();
// 
//   }

  public void test436() {}
//   public void test436() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test436"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
//     com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var6);
//     double var8 = var5.getProgress();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var5);
//     com.google.javascript.jscomp.Scope var10 = var5.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var11 = null;
//     com.google.javascript.jscomp.NodeTraversal var12 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var11);
//     com.google.javascript.jscomp.ClosureCodingConvention var13 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.jscomp.GoogleCodingConvention var14 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var13);
//     com.google.javascript.rhino.ErrorReporter var15 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
//     com.google.javascript.rhino.ErrorReporter var17 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
//     com.google.javascript.rhino.ErrorReporter var19 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
//     var20.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var23 = null;
//     com.google.javascript.rhino.jstype.JSType var25 = null;
//     com.google.javascript.rhino.jstype.JSType[] var26 = new com.google.javascript.rhino.jstype.JSType[] { var25};
//     com.google.javascript.rhino.jstype.FunctionType var27 = var20.createConstructorType(var23, false, var26);
//     boolean var28 = var27.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var29 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
//     var30.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var33 = null;
//     com.google.javascript.rhino.jstype.JSType var35 = null;
//     com.google.javascript.rhino.jstype.JSType[] var36 = new com.google.javascript.rhino.jstype.JSType[] { var35};
//     com.google.javascript.rhino.jstype.FunctionType var37 = var30.createConstructorType(var33, false, var36);
//     com.google.javascript.rhino.jstype.JSType var39 = var37.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var40 = var37.getTypeOfThis();
//     boolean var41 = var27.canCastTo((com.google.javascript.rhino.jstype.JSType)var37);
//     com.google.javascript.rhino.ErrorReporter var42 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var42);
//     var43.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var46 = null;
//     com.google.javascript.rhino.jstype.JSType var48 = null;
//     com.google.javascript.rhino.jstype.JSType[] var49 = new com.google.javascript.rhino.jstype.JSType[] { var48};
//     com.google.javascript.rhino.jstype.FunctionType var50 = var43.createConstructorType(var46, false, var49);
//     boolean var51 = var50.isInterface();
//     com.google.javascript.rhino.jstype.JSType[] var52 = new com.google.javascript.rhino.jstype.JSType[] { var50};
//     com.google.javascript.rhino.jstype.FunctionType var53 = var18.createConstructorType((com.google.javascript.rhino.jstype.JSType)var27, var52);
//     com.google.javascript.rhino.Node var54 = var16.createOptionalParameters(var52);
//     com.google.javascript.rhino.ErrorReporter var56 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var56);
//     java.lang.Iterable var59 = var57.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var60 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var60);
//     var61.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var64 = null;
//     com.google.javascript.rhino.jstype.JSType var66 = null;
//     com.google.javascript.rhino.jstype.JSType[] var67 = new com.google.javascript.rhino.jstype.JSType[] { var66};
//     com.google.javascript.rhino.jstype.FunctionType var68 = var61.createConstructorType(var64, false, var67);
//     boolean var69 = var68.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var70 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var70);
//     var71.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var74 = null;
//     com.google.javascript.rhino.jstype.JSType var76 = null;
//     com.google.javascript.rhino.jstype.JSType[] var77 = new com.google.javascript.rhino.jstype.JSType[] { var76};
//     com.google.javascript.rhino.jstype.FunctionType var78 = var71.createConstructorType(var74, false, var77);
//     com.google.javascript.rhino.jstype.FunctionType var79 = var57.createConstructorType((com.google.javascript.rhino.jstype.JSType)var68, var77);
//     com.google.javascript.rhino.jstype.TemplateType var80 = var57.getObjectIndexKey();
//     var16.unregisterPropertyOnType("hi!: ", (com.google.javascript.rhino.jstype.JSType)var80);
//     java.lang.Iterable var83 = var16.getTypesWithProperty("");
//     com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var84 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var13, var16);
//     com.google.javascript.rhino.ErrorReporter var85 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var86 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var85);
//     com.google.javascript.rhino.ErrorReporter var87 = var86.getErrorReporter();
//     var86.clearNamedTypes();
//     com.google.javascript.jscomp.CheckLevel var89 = null;
//     com.google.javascript.jscomp.CheckLevel var90 = null;
//     com.google.javascript.jscomp.TypeCheck var91 = new com.google.javascript.jscomp.TypeCheck((com.google.javascript.jscomp.AbstractCompiler)var5, (com.google.javascript.jscomp.type.ReverseAbstractInterpreter)var84, var86, var89, var90);
// 
//   }

  public void test437() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test437"); }


    java.util.logging.Logger var0 = null;
    com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
    int var2 = var1.getErrorCount();
    com.google.javascript.jscomp.CheckLevel var3 = null;
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    int var8 = var6.getSideEffectFlags();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
    boolean var11 = var10.isNE();
    boolean var12 = var10.isWith();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.getprop(var6, var10);
    java.util.Set var14 = null;
    var6.setDirectives(var14);
    com.google.javascript.jscomp.CheckLevel var16 = null;
    com.google.javascript.jscomp.CheckLevel var18 = null;
    com.google.javascript.jscomp.DiagnosticType var20 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var18, "");
    java.lang.String[] var21 = null;
    com.google.javascript.jscomp.JSError var22 = com.google.javascript.jscomp.JSError.make("hi!", var6, var16, var20, var21);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.string("hi!");
    boolean var27 = var26.isNE();
    int var28 = var26.getSideEffectFlags();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.string("hi!");
    boolean var31 = var30.isNE();
    boolean var32 = var30.isWith();
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.getprop(var26, var30);
    java.util.Set var34 = null;
    var26.setDirectives(var34);
    com.google.javascript.jscomp.CheckLevel var36 = null;
    com.google.javascript.jscomp.CheckLevel var38 = null;
    com.google.javascript.jscomp.DiagnosticType var40 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var38, "");
    java.lang.String[] var41 = null;
    com.google.javascript.jscomp.JSError var42 = com.google.javascript.jscomp.JSError.make("hi!", var26, var36, var40, var41);
    com.google.javascript.jscomp.CheckLevel var47 = null;
    com.google.javascript.jscomp.DiagnosticType var49 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var47, "");
    java.lang.String[] var51 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var52 = com.google.javascript.jscomp.JSError.make("", 100, 0, var49, var51);
    java.lang.String[] var54 = new java.lang.String[] { "hi!"};
    com.google.javascript.jscomp.JSError var55 = com.google.javascript.jscomp.JSError.make("hi!", var26, var49, var54);
    com.google.javascript.jscomp.JSError var56 = com.google.javascript.jscomp.JSError.make(var20, var54);
    var1.report(var3, var56);
    java.lang.String var58 = var56.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "hi!.  at (unknown source) line (unknown line) : (unknown column)"+ "'", var58.equals("hi!.  at (unknown source) line (unknown line) : (unknown column)"));

  }

  public void test438() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test438"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineProperties(true);
    var0.setCommonJSModulePathPrefix("TRUE");
    var0.setSaveDataStructures(false);
    var0.setPreferLineBreakAtEndOfFile(true);

  }

  public void test439() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test439"); }


    com.google.javascript.jscomp.SourceAst var0 = null;
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
    com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
    com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
    com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var6);
    double var8 = var5.getProgress();
    var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var5);
    com.google.javascript.jscomp.Scope var10 = var5.getTopScope();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.List var12 = var11.getGraphvizEdges();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.string("hi!");
    boolean var17 = var16.isNE();
    int var18 = var16.getSideEffectFlags();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.string("hi!");
    boolean var21 = var20.isNE();
    boolean var22 = var20.isWith();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.getprop(var16, var20);
    java.util.Set var24 = null;
    var16.setDirectives(var24);
    com.google.javascript.jscomp.CheckLevel var26 = null;
    com.google.javascript.jscomp.CheckLevel var28 = null;
    com.google.javascript.jscomp.DiagnosticType var30 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var28, "");
    java.lang.String[] var31 = null;
    com.google.javascript.jscomp.JSError var32 = com.google.javascript.jscomp.JSError.make("hi!", var16, var26, var30, var31);
    com.google.javascript.jscomp.CheckLevel var37 = null;
    com.google.javascript.jscomp.DiagnosticType var39 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var37, "");
    java.lang.String[] var41 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var42 = com.google.javascript.jscomp.JSError.make("", 100, 0, var39, var41);
    java.lang.String[] var44 = new java.lang.String[] { "hi!"};
    com.google.javascript.jscomp.JSError var45 = com.google.javascript.jscomp.JSError.make("hi!", var16, var39, var44);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var46 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var47 = var46.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var48 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var48);
    var49.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType var54 = null;
    com.google.javascript.rhino.jstype.JSType[] var55 = new com.google.javascript.rhino.jstype.JSType[] { var54};
    com.google.javascript.rhino.jstype.FunctionType var56 = var49.createConstructorType(var52, false, var55);
    com.google.javascript.rhino.jstype.JSType var58 = var56.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var59 = var56.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var60 = var46.getNode((java.lang.Object)var59);
    java.util.List var61 = var46.getEdges();
    boolean var62 = var45.equals((java.lang.Object)var61);
    com.google.javascript.jscomp.CompilerOptions var63 = new com.google.javascript.jscomp.CompilerOptions();
    var63.setInlineProperties(true);
    var63.setRuntimeTypeCheckLogFunction("Object#Element");
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var69 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var70 = var69.getGraphvizEdges();
    java.lang.String var71 = var69.getName();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var72 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var73 = var72.getGraphvizNodes();
    com.google.javascript.jscomp.deps.SortedDependencies var74 = new com.google.javascript.jscomp.deps.SortedDependencies(var73);
    com.google.javascript.jscomp.graph.GraphNode var75 = var69.createNode((java.lang.Object)var73);
    var63.setReplaceStringsConfiguration("FALSE", var73);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.Result var77 = var5.<com.google.javascript.jscomp.SourceFile,com.google.javascript.jscomp.SourceFile>compile(var12, var61, var63);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "LinkedGraph"+ "'", var71.equals("LinkedGraph"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test440() {}
//   public void test440() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test440"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
//     com.google.javascript.rhino.Node var3 = var2.getCurrentNode();
//     com.google.javascript.jscomp.Scope var4 = var2.getScope();
//     com.google.javascript.jscomp.CompilerInput var5 = var2.getInput();
// 
//   }

  public void test441() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test441"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var11 = var8.getTypeOfThis();
    com.google.javascript.rhino.jstype.TemplatizedType var12 = com.google.javascript.rhino.jstype.JSType.toMaybeTemplatizedType((com.google.javascript.rhino.jstype.JSType)var8);
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    java.lang.Iterable var16 = var14.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    var18.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var21 = null;
    com.google.javascript.rhino.jstype.JSType var23 = null;
    com.google.javascript.rhino.jstype.JSType[] var24 = new com.google.javascript.rhino.jstype.JSType[] { var23};
    com.google.javascript.rhino.jstype.FunctionType var25 = var18.createConstructorType(var21, false, var24);
    boolean var26 = var25.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    var28.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
    com.google.javascript.rhino.jstype.FunctionType var35 = var28.createConstructorType(var31, false, var34);
    com.google.javascript.rhino.jstype.FunctionType var36 = var14.createConstructorType((com.google.javascript.rhino.jstype.JSType)var25, var34);
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    var38.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var41 = null;
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.rhino.jstype.JSType[] var44 = new com.google.javascript.rhino.jstype.JSType[] { var43};
    com.google.javascript.rhino.jstype.FunctionType var45 = var38.createConstructorType(var41, false, var44);
    com.google.javascript.rhino.jstype.JSType var47 = var45.findPropertyType("hi!");
    int var48 = var45.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var50 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var45, "");
    boolean var51 = var45.makesStructs();
    boolean var52 = var36.isSubtype((com.google.javascript.rhino.jstype.JSType)var45);
    com.google.javascript.rhino.jstype.TernaryValue var53 = var8.testForEquality((com.google.javascript.rhino.jstype.JSType)var36);
    java.lang.String var54 = var53.name();
    int var55 = var53.ordinal();
    java.lang.String var56 = var53.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "FALSE"+ "'", var54.equals("FALSE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "FALSE"+ "'", var56.equals("FALSE"));

  }

  public void test442() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test442"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    boolean var5 = var2.isReturn();
    boolean var6 = var2.isDo();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var7 = com.google.javascript.rhino.SimpleErrorReporter.getMessage1("hi!", (java.lang.Object)var6);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test443() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test443"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    var9.setLineno(10);
    boolean var12 = var0.hasNode((java.lang.Object)var9);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var15 = var14.cloneNode();
    boolean var16 = var14.isDelProp();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var19 = var18.cloneNode();
    boolean var20 = var18.isDelProp();
    com.google.javascript.rhino.Node var21 = var14.clonePropsFrom(var18);
    com.google.javascript.rhino.JSDocInfo var22 = var18.getJSDocInfo();
    int var23 = var18.getLineno();
    java.util.Set var24 = var18.getDirectives();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.Node.newString("hi!: ");
    java.lang.String var27 = var26.getString();
    com.google.javascript.rhino.Node var28 = var18.useSourceInfoIfMissingFrom(var26);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var29 = var0.getWeight((java.lang.Object)var26);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!: "+ "'", var27.equals("hi!: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test444() {}
//   public void test444() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test444"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
//     com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
//     com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.jscomp.GoogleCodingConvention var3 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var2);
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var7 = var6.isNE();
//     int var8 = var6.getSideEffectFlags();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var11 = var10.isNE();
//     boolean var12 = var10.isWith();
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.getprop(var6, var10);
//     java.util.Set var14 = null;
//     var6.setDirectives(var14);
//     int var16 = var6.getChildCount();
//     com.google.javascript.rhino.Node var17 = var6.cloneTree();
//     com.google.javascript.rhino.JSDocInfo var18 = null;
//     com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNodeDeclaration((com.google.javascript.jscomp.CodingConvention)var3, "hi!: ", var17, var18);
//     var1.validateCodeRoot(var17);
// 
//   }

  public void test445() {}
//   public void test445() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test445"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.Node.newString(0, "hi!", 10, 10);
//     boolean var6 = var5.isQualifiedName();
//     boolean var7 = var5.wasEmptyNode();
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var10 = var9.cloneNode();
//     boolean var11 = var9.isDelProp();
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var14 = var13.cloneNode();
//     boolean var15 = var13.isDelProp();
//     com.google.javascript.rhino.Node var16 = var9.clonePropsFrom(var13);
//     com.google.javascript.rhino.JSDocInfo var17 = var13.getJSDocInfo();
//     com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.function(var0, var5, var13);
// 
//   }

  public void test446() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test446"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.Node.newNumber(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test447() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test447"); }


    com.google.javascript.jscomp.CheckLevel var4 = null;
    com.google.javascript.jscomp.DiagnosticType var6 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var4, "");
    java.lang.String[] var8 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var9 = com.google.javascript.jscomp.JSError.make("", 100, 0, var6, var8);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.string("hi!");
    boolean var13 = var12.isNE();
    int var14 = var12.getSideEffectFlags();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.string("hi!");
    boolean var17 = var16.isNE();
    boolean var18 = var16.isWith();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.getprop(var12, var16);
    java.util.Set var20 = null;
    var12.setDirectives(var20);
    com.google.javascript.jscomp.CheckLevel var22 = null;
    com.google.javascript.jscomp.CheckLevel var24 = null;
    com.google.javascript.jscomp.DiagnosticType var26 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var24, "");
    java.lang.String[] var27 = null;
    com.google.javascript.jscomp.JSError var28 = com.google.javascript.jscomp.JSError.make("hi!", var12, var22, var26, var27);
    com.google.javascript.jscomp.DiagnosticGroup var29 = com.google.javascript.jscomp.DiagnosticGroup.forType(var26);
    java.lang.String var30 = var26.toString();
    int var31 = var6.compareTo(var26);
    java.lang.String var32 = var6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!: "+ "'", var30.equals("hi!: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!: "+ "'", var32.equals("hi!: "));

  }

  public void test448() {}
//   public void test448() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test448"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
//     com.google.javascript.rhino.Node var3 = var2.getCurrentNode();
//     java.lang.String var4 = var2.getSourceName();
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var7 = var6.isNE();
//     int var8 = var6.getSideEffectFlags();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var11 = var10.isNE();
//     boolean var12 = var10.isWith();
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.getprop(var6, var10);
//     java.lang.Iterable var14 = var13.siblings();
//     com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var17 = var16.isNE();
//     int var18 = var16.getSideEffectFlags();
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var21 = var20.isNE();
//     boolean var22 = var20.isWith();
//     com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.getprop(var16, var20);
//     com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.string("hi!");
//     var20.addChildToBack(var25);
//     com.google.javascript.rhino.Node.FileLevelJsDocBuilder var27 = var25.getJsDocBuilderForNode();
//     int var28 = var25.getCharno();
//     java.lang.Object var30 = var25.getProp(10);
//     com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var33 = var32.isNE();
//     int var34 = var32.getSideEffectFlags();
//     com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var37 = var36.isNE();
//     boolean var38 = var36.isWith();
//     com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.getprop(var32, var36);
//     com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.string("hi!");
//     var36.addChildToBack(var41);
//     com.google.javascript.rhino.Node var43 = var25.srcrefTree(var41);
//     com.google.javascript.rhino.Node var44 = var13.useSourceInfoFromForTree(var43);
//     boolean var45 = var43.isBreak();
//     com.google.javascript.rhino.Node[] var46 = new com.google.javascript.rhino.Node[] { var43};
//     var2.traverseRoots(var46);
// 
//   }

  public void test449() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test449"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    java.util.Set var10 = null;
    var2.setDirectives(var10);
    com.google.javascript.jscomp.CheckLevel var12 = null;
    com.google.javascript.jscomp.CheckLevel var14 = null;
    com.google.javascript.jscomp.DiagnosticType var16 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var14, "");
    java.lang.String[] var17 = null;
    com.google.javascript.jscomp.JSError var18 = com.google.javascript.jscomp.JSError.make("hi!", var2, var12, var16, var17);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.string("hi!");
    boolean var22 = var21.isNE();
    int var23 = var21.getSideEffectFlags();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.string("hi!");
    boolean var26 = var25.isNE();
    boolean var27 = var25.isWith();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.getprop(var21, var25);
    java.util.Set var29 = null;
    var21.setDirectives(var29);
    com.google.javascript.jscomp.CheckLevel var31 = null;
    com.google.javascript.jscomp.CheckLevel var33 = null;
    com.google.javascript.jscomp.DiagnosticType var35 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var33, "");
    java.lang.String[] var36 = null;
    com.google.javascript.jscomp.JSError var37 = com.google.javascript.jscomp.JSError.make("hi!", var21, var31, var35, var36);
    var21.addSuppression("");
    com.google.javascript.rhino.Node var40 = var2.useSourceInfoFromForTree(var21);
    boolean var41 = var21.isGetElem();
    com.google.javascript.rhino.InputId var42 = var21.getInputId();
    boolean var43 = var21.isFor();
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.Node.newNumber(10.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.caseNode(var21, var45);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test450() {}
//   public void test450() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test450"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     int var2 = var1.getErrorCount();
//     int var3 = var1.getErrorCount();
//     com.google.javascript.jscomp.Compiler var4 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.SymbolTable var5 = var4.buildKnownSymbolTable();
// 
//   }

  public void test451() {}
//   public void test451() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test451"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.ErrorReporter var1 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
//     var2.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
//     com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
//     boolean var10 = var9.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var11 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
//     var12.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
//     com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
//     com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
//     boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
//     com.google.javascript.rhino.ErrorReporter var24 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
//     var25.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var28 = null;
//     com.google.javascript.rhino.jstype.JSType var30 = null;
//     com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
//     com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
//     com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
//     com.google.javascript.rhino.ErrorReporter var36 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
//     var37.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var40 = null;
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
//     com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
//     boolean var45 = var44.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var46 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
//     var47.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var50 = null;
//     com.google.javascript.rhino.jstype.JSType var52 = null;
//     com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
//     com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
//     com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
//     boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
//     var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
//     java.lang.String var60 = var0.getExportPropertyFunction();
//     java.lang.String var61 = var0.getGlobalObject();
//     boolean var63 = var0.isConstant("");
//     java.util.Collection var64 = var0.getIndirectlyDeclaredProperties();
//     com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var67 = var66.isNE();
//     int var68 = var66.getSideEffectFlags();
//     com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var71 = var70.isNE();
//     boolean var72 = var70.isWith();
//     com.google.javascript.rhino.Node var73 = com.google.javascript.rhino.IR.getprop(var66, var70);
//     com.google.javascript.rhino.Node var75 = com.google.javascript.rhino.IR.string("hi!");
//     var70.addChildToBack(var75);
//     com.google.javascript.rhino.Node var77 = var75.getLastSibling();
//     java.lang.String var78 = var0.getSingletonGetterClassName(var77);
// 
//   }

  public void test452() {}
//   public void test452() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test452"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     com.google.javascript.rhino.InputId var5 = var3.getInputId();
//     com.google.javascript.jscomp.Region var7 = var3.getRegion(100);
// 
//   }

  public void test453() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test453"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    var2.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
    com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
    boolean var10 = var9.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    var12.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
    com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
    boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    var37.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
    boolean var45 = var44.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    var47.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
    com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
    boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
    var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.string("hi!");
    boolean var62 = var61.isNE();
    int var63 = var61.getSideEffectFlags();
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.string("hi!");
    boolean var66 = var65.isNE();
    boolean var67 = var65.isWith();
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.getprop(var61, var65);
    com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.IR.string("hi!");
    var65.addChildToBack(var70);
    com.google.javascript.rhino.Node var72 = var70.getLastSibling();
    boolean var73 = var72.isLocalResultCall();
    java.util.Map var74 = null;
    var0.checkForCallingConventionDefiningCalls(var72, var74);
    var72.setSourceEncodedPositionForTree(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test454() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test454"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.util.Set var9 = null;
    var1.setDirectives(var9);
    int var11 = var1.getChildCount();
    java.lang.Iterable var12 = var1.siblings();
    java.lang.Object var14 = var1.getProp(1);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.string("hi!");
    boolean var17 = var16.isNE();
    int var18 = var16.getSideEffectFlags();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.string("hi!");
    boolean var21 = var20.isNE();
    boolean var22 = var20.isWith();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.getprop(var16, var20);
    java.lang.Iterable var24 = var23.siblings();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.string("hi!");
    boolean var27 = var26.isNE();
    int var28 = var26.getSideEffectFlags();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.string("hi!");
    boolean var31 = var30.isNE();
    boolean var32 = var30.isWith();
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.getprop(var26, var30);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.string("hi!");
    var30.addChildToBack(var35);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var37 = var35.getJsDocBuilderForNode();
    int var38 = var35.getCharno();
    java.lang.Object var40 = var35.getProp(10);
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.string("hi!");
    boolean var43 = var42.isNE();
    int var44 = var42.getSideEffectFlags();
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.string("hi!");
    boolean var47 = var46.isNE();
    boolean var48 = var46.isWith();
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.getprop(var42, var46);
    com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.string("hi!");
    var46.addChildToBack(var51);
    com.google.javascript.rhino.Node var53 = var35.srcrefTree(var51);
    com.google.javascript.rhino.Node var54 = var23.useSourceInfoFromForTree(var53);
    boolean var55 = var1.hasChild(var54);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var56 = com.google.javascript.rhino.IR.neg(var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test455() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test455"); }


    com.google.javascript.jscomp.DependencyOptions var0 = new com.google.javascript.jscomp.DependencyOptions();
    com.google.javascript.jscomp.DependencyOptions var2 = var0.setDependencySorting(false);
    com.google.javascript.jscomp.DependencyOptions var4 = var2.setDependencySorting(true);
    com.google.javascript.jscomp.DependencyOptions var6 = var4.setDependencySorting(true);
    com.google.javascript.jscomp.DependencyOptions var8 = var4.setDependencySorting(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test456() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test456"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    java.lang.Iterable var3 = var1.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    boolean var13 = var12.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    var15.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
    com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
    com.google.javascript.rhino.jstype.FunctionType var23 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var12, var21);
    boolean var24 = var12.isReturnTypeInferred();
    boolean var25 = var12.isDateType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test457() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test457"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    java.util.Set var10 = null;
    var2.setDirectives(var10);
    com.google.javascript.jscomp.CheckLevel var12 = null;
    com.google.javascript.jscomp.CheckLevel var14 = null;
    com.google.javascript.jscomp.DiagnosticType var16 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var14, "");
    java.lang.String[] var17 = null;
    com.google.javascript.jscomp.JSError var18 = com.google.javascript.jscomp.JSError.make("hi!", var2, var12, var16, var17);
    com.google.javascript.jscomp.DiagnosticGroup var19 = com.google.javascript.jscomp.DiagnosticGroup.forType(var16);
    java.lang.Iterable var20 = var19.getTypes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test458() {}
//   public void test458() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test458"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.ErrorReporter var1 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
//     var2.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
//     com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
//     boolean var10 = var9.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var11 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
//     var12.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
//     com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
//     com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
//     boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
//     com.google.javascript.rhino.ErrorReporter var24 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
//     var25.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var28 = null;
//     com.google.javascript.rhino.jstype.JSType var30 = null;
//     com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
//     com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
//     com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
//     com.google.javascript.rhino.ErrorReporter var36 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
//     var37.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var40 = null;
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
//     com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
//     boolean var45 = var44.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var46 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
//     var47.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var50 = null;
//     com.google.javascript.rhino.jstype.JSType var52 = null;
//     com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
//     com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
//     com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
//     boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
//     var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
//     java.lang.String var60 = var0.getExportPropertyFunction();
//     java.lang.String var61 = var0.getGlobalObject();
//     boolean var63 = var0.isConstant("");
//     java.util.Collection var64 = var0.getIndirectlyDeclaredProperties();
//     com.google.javascript.rhino.Node var65 = null;
//     com.google.javascript.rhino.Node var66 = null;
//     java.lang.String var67 = var0.extractClassNameIfRequire(var65, var66);
// 
//   }

  public void test459() {}
//   public void test459() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test459"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var2 = var1.isNE();
//     int var3 = var1.getSideEffectFlags();
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var6 = var5.isNE();
//     boolean var7 = var5.isWith();
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
//     java.lang.Iterable var9 = var8.siblings();
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var12 = var11.isNE();
//     int var13 = var11.getSideEffectFlags();
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var16 = var15.isNE();
//     boolean var17 = var15.isWith();
//     com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.getprop(var11, var15);
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.string("hi!");
//     var15.addChildToBack(var20);
//     com.google.javascript.rhino.Node.FileLevelJsDocBuilder var22 = var20.getJsDocBuilderForNode();
//     int var23 = var20.getCharno();
//     java.lang.Object var25 = var20.getProp(10);
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var28 = var27.isNE();
//     int var29 = var27.getSideEffectFlags();
//     com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var32 = var31.isNE();
//     boolean var33 = var31.isWith();
//     com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.getprop(var27, var31);
//     com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.string("hi!");
//     var31.addChildToBack(var36);
//     com.google.javascript.rhino.Node var38 = var20.srcrefTree(var36);
//     com.google.javascript.rhino.Node var39 = var8.useSourceInfoFromForTree(var38);
//     java.lang.Appendable var40 = null;
//     var39.appendStringTree(var40);
// 
//   }

  public void test460() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test460"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.string("hi!");
    boolean var4 = var3.isNE();
    int var5 = var3.getSideEffectFlags();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.string("hi!");
    boolean var8 = var7.isNE();
    boolean var9 = var7.isWith();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.getprop(var3, var7);
    java.util.Set var11 = null;
    var3.setDirectives(var11);
    com.google.javascript.jscomp.CheckLevel var13 = null;
    com.google.javascript.jscomp.CheckLevel var15 = null;
    com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var15, "");
    java.lang.String[] var18 = null;
    com.google.javascript.jscomp.JSError var19 = com.google.javascript.jscomp.JSError.make("hi!", var3, var13, var17, var18);
    com.google.javascript.jscomp.CheckLevel var24 = null;
    com.google.javascript.jscomp.DiagnosticType var26 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var24, "");
    java.lang.String[] var28 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("", 100, 0, var26, var28);
    java.lang.String[] var31 = new java.lang.String[] { "hi!"};
    com.google.javascript.jscomp.JSError var32 = com.google.javascript.jscomp.JSError.make("hi!", var3, var26, var31);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var34 = var33.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var35 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var35);
    var36.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var39 = null;
    com.google.javascript.rhino.jstype.JSType var41 = null;
    com.google.javascript.rhino.jstype.JSType[] var42 = new com.google.javascript.rhino.jstype.JSType[] { var41};
    com.google.javascript.rhino.jstype.FunctionType var43 = var36.createConstructorType(var39, false, var42);
    com.google.javascript.rhino.jstype.JSType var45 = var43.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var46 = var43.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var47 = var33.getNode((java.lang.Object)var46);
    java.util.List var48 = var33.getEdges();
    boolean var49 = var32.equals((java.lang.Object)var48);
    com.google.javascript.jscomp.AbstractCompiler var50 = null;
    com.google.javascript.jscomp.NodeTraversal.Callback var51 = null;
    com.google.javascript.jscomp.NodeTraversal var52 = new com.google.javascript.jscomp.NodeTraversal(var50, var51);
    java.lang.String var53 = var52.getSourceName();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var54 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var55 = var54.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var56 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var56);
    var57.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var60 = null;
    com.google.javascript.rhino.jstype.JSType var62 = null;
    com.google.javascript.rhino.jstype.JSType[] var63 = new com.google.javascript.rhino.jstype.JSType[] { var62};
    com.google.javascript.rhino.jstype.FunctionType var64 = var57.createConstructorType(var60, false, var63);
    com.google.javascript.rhino.jstype.JSType var66 = var64.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var67 = var64.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var68 = var54.getNode((java.lang.Object)var67);
    java.util.List var69 = var54.getEdges();
    var52.traverseRoots(var69);
    com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.block(var69);
    boolean var72 = var32.equals((java.lang.Object)var71);
    com.google.javascript.rhino.Node var74 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var75 = var74.cloneNode();
    boolean var76 = var74.isDelProp();
    com.google.javascript.rhino.Node var78 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var79 = var78.cloneNode();
    boolean var80 = var78.isDelProp();
    com.google.javascript.rhino.Node var81 = var74.clonePropsFrom(var78);
    com.google.javascript.rhino.JSDocInfo var82 = var78.getJSDocInfo();
    int var83 = var78.getLineno();
    java.lang.Object var85 = var78.getProp(1);
    com.google.javascript.rhino.Node var86 = com.google.javascript.rhino.IR.script();
    com.google.javascript.rhino.InputId var88 = new com.google.javascript.rhino.InputId("goog.global");
    var86.setInputId(var88);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var90 = com.google.javascript.rhino.IR.tryCatchFinally(var71, var78, var86);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + ""+ "'", var53.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test461() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test461"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.trueNode();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.Node.newString("hi!: ");
    boolean var3 = var2.isSetterDef();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var4 = var0.removeChildAfter(var2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test462() {}
//   public void test462() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test462"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = var1.getErrorReporter();
//     com.google.javascript.rhino.jstype.TemplateType var3 = var1.getObjectElementKey();
//     com.google.javascript.rhino.jstype.TemplateType var4 = var3.toMaybeTemplateType();
//     com.google.javascript.rhino.jstype.TemplatizedType var5 = com.google.javascript.rhino.jstype.JSType.toMaybeTemplatizedType((com.google.javascript.rhino.jstype.JSType)var4);
// 
//   }

  public void test463() {}
//   public void test463() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test463"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var1);
//     com.google.javascript.jscomp.NodeTraversal.FunctionCallback var3 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseChangedFunctions((com.google.javascript.jscomp.AbstractCompiler)var0, var3);
// 
//   }

  public void test464() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test464"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    boolean var3 = var1.isFunction();
    java.lang.String var4 = var1.toString();
    int var5 = var1.getSideEffectFlags();
    boolean var6 = var1.isOnlyModifiesThisCall();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "STRING hi!"+ "'", var4.equals("STRING hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test465() {}
//   public void test465() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test465"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var1 = new com.google.javascript.jscomp.SourceFile("goog.exportProperty");
//     var1.setOriginalPath("false");
//     java.lang.String var4 = var1.getCode();
//     java.lang.String var6 = var1.getLine(0);
// 
//   }

  public void test466() {}
//   public void test466() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test466"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
//     java.lang.String var2 = var0.getExportPropertyFunction();
//     boolean var4 = var0.isConstant("goog.exportSymbol");
//     com.google.javascript.rhino.ErrorReporter var5 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
//     var6.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var9 = null;
//     com.google.javascript.rhino.jstype.JSType var11 = null;
//     com.google.javascript.rhino.jstype.JSType[] var12 = new com.google.javascript.rhino.jstype.JSType[] { var11};
//     com.google.javascript.rhino.jstype.FunctionType var13 = var6.createConstructorType(var9, false, var12);
//     com.google.javascript.rhino.jstype.ObjectType var14 = var13.toObjectType();
//     var13.clearCachedValues();
//     com.google.javascript.rhino.ErrorReporter var16 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
//     java.lang.Iterable var19 = var17.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var20 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
//     var21.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var24 = null;
//     com.google.javascript.rhino.jstype.JSType var26 = null;
//     com.google.javascript.rhino.jstype.JSType[] var27 = new com.google.javascript.rhino.jstype.JSType[] { var26};
//     com.google.javascript.rhino.jstype.FunctionType var28 = var21.createConstructorType(var24, false, var27);
//     boolean var29 = var28.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var30 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
//     var31.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var34 = null;
//     com.google.javascript.rhino.jstype.JSType var36 = null;
//     com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var36};
//     com.google.javascript.rhino.jstype.FunctionType var38 = var31.createConstructorType(var34, false, var37);
//     com.google.javascript.rhino.jstype.FunctionType var39 = var17.createConstructorType((com.google.javascript.rhino.jstype.JSType)var28, var37);
//     com.google.javascript.jscomp.CodingConvention.SubclassType var40 = null;
//     var0.applySubclassRelationship(var13, var39, var40);
//     com.google.javascript.rhino.jstype.Visitor var42 = null;
//     java.lang.Object var43 = var13.visit(var42);
// 
//   }

  public void test467() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test467"); }


    java.nio.charset.Charset var1 = null;
    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromFile("goog.global", var1);
    java.lang.String var3 = var2.getName();
    var2.setOriginalPath("STRING hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var7 = var2.getLineOffset((-3));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "goog.global"+ "'", var3.equals("goog.global"));

  }

  public void test468() {}
//   public void test468() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test468"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var4);
//     java.lang.String var8 = var0.getSourceLine("hi!: ", (-1));
//     com.google.javascript.rhino.head.ast.AstRoot var10 = null;
//     var0.setOldParseTree("()", var10);
//     com.google.javascript.jscomp.CompilerOptions var12 = null;
//     var0.initOptions(var12);
// 
//   }

  public void test469() {}
//   public void test469() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test469"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var4);
//     java.util.logging.Logger var6 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var7 = new com.google.javascript.jscomp.LoggerErrorManager((com.google.javascript.jscomp.MessageFormatter)var5, var6);
//     java.util.logging.Logger var8 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var9 = new com.google.javascript.jscomp.LoggerErrorManager((com.google.javascript.jscomp.MessageFormatter)var5, var8);
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var14 = var13.isNE();
//     int var15 = var13.getSideEffectFlags();
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var18 = var17.isNE();
//     boolean var19 = var17.isWith();
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
//     java.util.Set var21 = null;
//     var13.setDirectives(var21);
//     com.google.javascript.jscomp.CheckLevel var23 = null;
//     com.google.javascript.jscomp.CheckLevel var25 = null;
//     com.google.javascript.jscomp.DiagnosticType var27 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var25, "");
//     java.lang.String[] var28 = null;
//     com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("hi!", var13, var23, var27, var28);
//     com.google.javascript.jscomp.CheckLevel var34 = null;
//     com.google.javascript.jscomp.DiagnosticType var36 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var34, "");
//     java.lang.String[] var38 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var39 = com.google.javascript.jscomp.JSError.make("", 100, 0, var36, var38);
//     java.lang.String[] var41 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var42 = com.google.javascript.jscomp.JSError.make("hi!", var13, var36, var41);
//     com.google.javascript.jscomp.DiagnosticType var43 = var42.getType();
//     com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var48 = var47.isNE();
//     int var49 = var47.getSideEffectFlags();
//     com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var52 = var51.isNE();
//     boolean var53 = var51.isWith();
//     com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.getprop(var47, var51);
//     java.util.Set var55 = null;
//     var47.setDirectives(var55);
//     com.google.javascript.jscomp.CheckLevel var57 = null;
//     com.google.javascript.jscomp.CheckLevel var59 = null;
//     com.google.javascript.jscomp.DiagnosticType var61 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var59, "");
//     java.lang.String[] var62 = null;
//     com.google.javascript.jscomp.JSError var63 = com.google.javascript.jscomp.JSError.make("hi!", var47, var57, var61, var62);
//     com.google.javascript.jscomp.CheckLevel var68 = null;
//     com.google.javascript.jscomp.DiagnosticType var70 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var68, "");
//     java.lang.String[] var72 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var73 = com.google.javascript.jscomp.JSError.make("", 100, 0, var70, var72);
//     java.lang.String[] var75 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var76 = com.google.javascript.jscomp.JSError.make("hi!", var47, var70, var75);
//     com.google.javascript.jscomp.JSError var77 = com.google.javascript.jscomp.JSError.make(var43, var75);
//     java.lang.String var78 = var5.formatError(var77);
// 
//   }

  public void test470() {}
//   public void test470() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test470"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     com.google.javascript.jscomp.Scope var4 = var0.getTopScope();
//     var0.processDefines();
// 
//   }

  public void test471() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test471"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("hi!");
    boolean var6 = var5.isNE();
    boolean var7 = var5.isWith();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.getprop(var1, var5);
    java.util.Set var9 = null;
    var1.setDirectives(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    int var15 = var13.getSideEffectFlags();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    boolean var19 = var17.isWith();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
    java.util.Set var21 = null;
    var13.setDirectives(var21);
    com.google.javascript.jscomp.CheckLevel var23 = null;
    com.google.javascript.jscomp.CheckLevel var25 = null;
    com.google.javascript.jscomp.DiagnosticType var27 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var25, "");
    java.lang.String[] var28 = null;
    com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("hi!", var13, var23, var27, var28);
    com.google.javascript.rhino.Node var30 = var1.useSourceInfoIfMissingFrom(var13);
    var13.setType(0);
    com.google.javascript.rhino.jstype.JSType var33 = var13.getJSType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }

  public void test472() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test472"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    boolean var9 = var8.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    var11.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var14 = null;
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType[] var17 = new com.google.javascript.rhino.jstype.JSType[] { var16};
    com.google.javascript.rhino.jstype.FunctionType var18 = var11.createConstructorType(var14, false, var17);
    com.google.javascript.rhino.jstype.JSType var20 = var18.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var21 = var18.getTypeOfThis();
    boolean var22 = var8.canCastTo((com.google.javascript.rhino.jstype.JSType)var18);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var35 = var32.getTypeOfThis();
    boolean var36 = var35.isAllType();
    com.google.javascript.rhino.Node var37 = null;
    boolean var38 = var18.defineInferredProperty("", var35, var37);
    boolean var39 = var18.hasCachedValues();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);

  }

  public void test473() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test473"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    var2.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.jstype.JSType[] var8 = new com.google.javascript.rhino.jstype.JSType[] { var7};
    com.google.javascript.rhino.jstype.FunctionType var9 = var2.createConstructorType(var5, false, var8);
    boolean var10 = var9.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    var12.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.jstype.FunctionType var19 = var12.createConstructorType(var15, false, var18);
    com.google.javascript.rhino.jstype.JSType var21 = var19.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var22 = var19.getTypeOfThis();
    boolean var23 = var9.canCastTo((com.google.javascript.rhino.jstype.JSType)var19);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    var25.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var30};
    com.google.javascript.rhino.jstype.FunctionType var32 = var25.createConstructorType(var28, false, var31);
    com.google.javascript.rhino.jstype.JSType var34 = var32.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.FunctionType var35 = var32.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    var37.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.jstype.FunctionType var44 = var37.createConstructorType(var40, false, var43);
    boolean var45 = var44.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    var47.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var54 = var47.createConstructorType(var50, false, var53);
    com.google.javascript.rhino.jstype.JSType var56 = var54.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var57 = var54.getTypeOfThis();
    boolean var58 = var44.canCastTo((com.google.javascript.rhino.jstype.JSType)var54);
    var0.applySingletonGetter(var9, var32, (com.google.javascript.rhino.jstype.ObjectType)var54);
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.string("hi!");
    boolean var62 = var61.isNE();
    boolean var63 = var61.isWith();
    com.google.javascript.rhino.Node var64 = var61.getLastChild();
    boolean var65 = var0.isVarArgsParameter(var61);
    var61.setSourceEncodedPositionForTree((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test474() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test474"); }


    com.google.javascript.jscomp.CheckLevel var1 = null;
    com.google.javascript.jscomp.DiagnosticType var3 = com.google.javascript.jscomp.DiagnosticType.make("hi!.  at (unknown source) line (unknown line) : (unknown column)", var1, "goog.global");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test475() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test475"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var2 = var1.cloneNode();
    boolean var3 = var1.isDelProp();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var6 = var5.cloneNode();
    boolean var7 = var5.isDelProp();
    com.google.javascript.rhino.Node var8 = var1.clonePropsFrom(var5);
    boolean var9 = var1.isHook();
    boolean var10 = var1.isQualifiedName();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.string("hi!");
    boolean var13 = var12.isNE();
    int var14 = var12.getSideEffectFlags();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.string("hi!");
    boolean var17 = var16.isNE();
    boolean var18 = var16.isWith();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.getprop(var12, var16);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.string("hi!");
    var16.addChildToBack(var21);
    boolean var23 = var16.isVar();
    com.google.javascript.rhino.InputId var24 = var16.getInputId();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.tryCatch(var1, var16);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test476() {}
//   public void test476() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test476"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.ErrorReporter var3 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
//     var4.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.jstype.JSType var9 = null;
//     com.google.javascript.rhino.jstype.JSType[] var10 = new com.google.javascript.rhino.jstype.JSType[] { var9};
//     com.google.javascript.rhino.jstype.FunctionType var11 = var4.createConstructorType(var7, false, var10);
//     boolean var12 = var11.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var13 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
//     var14.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     com.google.javascript.rhino.jstype.JSType var19 = null;
//     com.google.javascript.rhino.jstype.JSType[] var20 = new com.google.javascript.rhino.jstype.JSType[] { var19};
//     com.google.javascript.rhino.jstype.FunctionType var21 = var14.createConstructorType(var17, false, var20);
//     com.google.javascript.rhino.jstype.JSType var23 = var21.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var24 = var21.getTypeOfThis();
//     boolean var25 = var11.canCastTo((com.google.javascript.rhino.jstype.JSType)var21);
//     com.google.javascript.rhino.ErrorReporter var26 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
//     var27.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var30 = null;
//     com.google.javascript.rhino.jstype.JSType var32 = null;
//     com.google.javascript.rhino.jstype.JSType[] var33 = new com.google.javascript.rhino.jstype.JSType[] { var32};
//     com.google.javascript.rhino.jstype.FunctionType var34 = var27.createConstructorType(var30, false, var33);
//     com.google.javascript.rhino.jstype.JSType var36 = var34.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var37 = var34.toMaybeFunctionType();
//     com.google.javascript.rhino.ErrorReporter var38 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
//     var39.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     com.google.javascript.rhino.jstype.JSType var44 = null;
//     com.google.javascript.rhino.jstype.JSType[] var45 = new com.google.javascript.rhino.jstype.JSType[] { var44};
//     com.google.javascript.rhino.jstype.FunctionType var46 = var39.createConstructorType(var42, false, var45);
//     boolean var47 = var46.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var48 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var48);
//     var49.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var52 = null;
//     com.google.javascript.rhino.jstype.JSType var54 = null;
//     com.google.javascript.rhino.jstype.JSType[] var55 = new com.google.javascript.rhino.jstype.JSType[] { var54};
//     com.google.javascript.rhino.jstype.FunctionType var56 = var49.createConstructorType(var52, false, var55);
//     com.google.javascript.rhino.jstype.JSType var58 = var56.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var59 = var56.getTypeOfThis();
//     boolean var60 = var46.canCastTo((com.google.javascript.rhino.jstype.JSType)var56);
//     var2.applySingletonGetter(var11, var34, (com.google.javascript.rhino.jstype.ObjectType)var56);
//     com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var64 = var63.isNE();
//     boolean var65 = var63.isWith();
//     com.google.javascript.rhino.Node var66 = var63.getLastChild();
//     boolean var67 = var2.isVarArgsParameter(var63);
//     com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var70 = var69.cloneNode();
//     boolean var71 = var69.isDelProp();
//     com.google.javascript.rhino.Node var73 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var74 = var73.cloneNode();
//     boolean var75 = var73.isDelProp();
//     com.google.javascript.rhino.Node var76 = var69.clonePropsFrom(var73);
//     com.google.javascript.rhino.JSDocInfo var77 = var73.getJSDocInfo();
//     com.google.javascript.rhino.Node var78 = com.google.javascript.rhino.IR.breakNode(var73);
//     com.google.javascript.jscomp.CodingConvention.Bind var80 = var2.describeFunctionBind(var78, true);
//     com.google.javascript.rhino.Node var82 = com.google.javascript.rhino.IR.nullNode();
//     boolean var83 = var82.isGetElem();
//     com.google.javascript.rhino.JSDocInfo var84 = null;
//     com.google.javascript.rhino.Node var85 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNodeDeclaration((com.google.javascript.jscomp.CodingConvention)var2, "TRUE", var82, var84);
//     com.google.javascript.rhino.Node[] var86 = new com.google.javascript.rhino.Node[] { var85};
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var0, var1, var86);
// 
//   }

  public void test477() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test477"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var1 = var0.getGraphvizEdges();
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
    var3.clearNamedTypes();
    com.google.javascript.rhino.jstype.TemplateType var12 = var3.getObjectElementKey();
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    java.lang.Iterable var16 = var14.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    var18.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var21 = null;
    com.google.javascript.rhino.jstype.JSType var23 = null;
    com.google.javascript.rhino.jstype.JSType[] var24 = new com.google.javascript.rhino.jstype.JSType[] { var23};
    com.google.javascript.rhino.jstype.FunctionType var25 = var18.createConstructorType(var21, false, var24);
    boolean var26 = var25.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    var28.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
    com.google.javascript.rhino.jstype.FunctionType var35 = var28.createConstructorType(var31, false, var34);
    com.google.javascript.rhino.jstype.FunctionType var36 = var14.createConstructorType((com.google.javascript.rhino.jstype.JSType)var25, var34);
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    java.lang.Iterable var40 = var38.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    var42.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType var47 = null;
    com.google.javascript.rhino.jstype.JSType[] var48 = new com.google.javascript.rhino.jstype.JSType[] { var47};
    com.google.javascript.rhino.jstype.FunctionType var49 = var42.createConstructorType(var45, false, var48);
    boolean var50 = var49.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    var52.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var55 = null;
    com.google.javascript.rhino.jstype.JSType var57 = null;
    com.google.javascript.rhino.jstype.JSType[] var58 = new com.google.javascript.rhino.jstype.JSType[] { var57};
    com.google.javascript.rhino.jstype.FunctionType var59 = var52.createConstructorType(var55, false, var58);
    com.google.javascript.rhino.jstype.FunctionType var60 = var38.createConstructorType((com.google.javascript.rhino.jstype.JSType)var49, var58);
    boolean var61 = var49.isReturnTypeInferred();
    boolean var62 = var49.isTemplatizedType();
    com.google.javascript.rhino.ErrorReporter var63 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var63);
    com.google.javascript.rhino.ErrorReporter var65 = var64.getErrorReporter();
    com.google.javascript.rhino.jstype.TemplateType var66 = var64.getObjectElementKey();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var67 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var68 = var67.getGraphvizNodes();
    com.google.javascript.rhino.ErrorReporter var69 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var69);
    var70.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var73 = null;
    com.google.javascript.rhino.jstype.JSType var75 = null;
    com.google.javascript.rhino.jstype.JSType[] var76 = new com.google.javascript.rhino.jstype.JSType[] { var75};
    com.google.javascript.rhino.jstype.FunctionType var77 = var70.createConstructorType(var73, false, var76);
    com.google.javascript.rhino.jstype.JSType var79 = var77.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var80 = var77.getTypeOfThis();
    com.google.javascript.jscomp.graph.GraphNode var81 = var67.getNode((java.lang.Object)var80);
    java.util.List var82 = var67.getEdges();
    com.google.javascript.rhino.jstype.JSType var83 = var14.createFunctionType((com.google.javascript.rhino.jstype.ObjectType)var49, (com.google.javascript.rhino.jstype.JSType)var66, var82);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var84 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var85 = var84.getGraphvizNodes();
    var49.setImplementedInterfaces(var85);
    com.google.javascript.rhino.Node var87 = var3.createParametersWithVarArgs(var85);
    com.google.javascript.rhino.Node var88 = com.google.javascript.rhino.IR.paramList(var85);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var89 = var0.getNodeDegree((java.lang.Object)var88);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test478() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test478"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
    com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
    com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var11 = var8.getTypeOfThis();
    com.google.javascript.rhino.jstype.TemplatizedType var12 = com.google.javascript.rhino.jstype.JSType.toMaybeTemplatizedType((com.google.javascript.rhino.jstype.JSType)var8);
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    java.lang.Iterable var16 = var14.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    var18.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var21 = null;
    com.google.javascript.rhino.jstype.JSType var23 = null;
    com.google.javascript.rhino.jstype.JSType[] var24 = new com.google.javascript.rhino.jstype.JSType[] { var23};
    com.google.javascript.rhino.jstype.FunctionType var25 = var18.createConstructorType(var21, false, var24);
    boolean var26 = var25.canBeCalled();
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    var28.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
    com.google.javascript.rhino.jstype.FunctionType var35 = var28.createConstructorType(var31, false, var34);
    com.google.javascript.rhino.jstype.FunctionType var36 = var14.createConstructorType((com.google.javascript.rhino.jstype.JSType)var25, var34);
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    var38.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var41 = null;
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.rhino.jstype.JSType[] var44 = new com.google.javascript.rhino.jstype.JSType[] { var43};
    com.google.javascript.rhino.jstype.FunctionType var45 = var38.createConstructorType(var41, false, var44);
    com.google.javascript.rhino.jstype.JSType var47 = var45.findPropertyType("hi!");
    int var48 = var45.getPropertiesCount();
    com.google.javascript.rhino.jstype.ObjectType var50 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var45, "");
    boolean var51 = var45.makesStructs();
    boolean var52 = var36.isSubtype((com.google.javascript.rhino.jstype.JSType)var45);
    com.google.javascript.rhino.jstype.TernaryValue var53 = var8.testForEquality((com.google.javascript.rhino.jstype.JSType)var36);
    boolean var54 = var36.isFunctionPrototypeType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test479() {}
//   public void test479() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test479"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var1);
//     double var3 = var0.getProgress();
//     var0.reportCodeChange();
//     com.google.javascript.jscomp.JSError[] var5 = var0.getErrors();
// 
//   }

  public void test480() {}
//   public void test480() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test480"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
//     java.lang.String var2 = var1.getExportPropertyFunction();
//     boolean var4 = var1.isValidEnumKey("");
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var7 = var6.isNE();
//     int var8 = var6.getSideEffectFlags();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.string("hi!");
//     boolean var11 = var10.isNE();
//     boolean var12 = var10.isWith();
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.getprop(var6, var10);
//     var10.removeProp(0);
//     java.lang.String var16 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var10);
//     java.util.Set var17 = null;
//     var10.setDirectives(var17);
//     java.lang.Iterable var19 = var10.siblings();
//     boolean var20 = var1.isVarArgsParameter(var10);
//     boolean var23 = var1.isExported("STRING hi!", true);
//     boolean var25 = var1.isConstantKey("Node tree inequality:\nTree1:\nSTRING LinkedGraph\n\n\nTree2:\nSTRING hi!\n\n\nSubtree1: STRING LinkedGraph\n\n\nSubtree2: STRING hi!\n");
//     com.google.javascript.rhino.Node var26 = null;
//     boolean var27 = var1.isOptionalParameter(var26);
// 
//   }

  public void test481() {}
//   public void test481() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test481"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     com.google.javascript.jscomp.JSModule var4 = var3.getModule();
//     com.google.javascript.jscomp.JSModule var5 = null;
//     var3.setModule(var5);
//     com.google.javascript.jscomp.Region var8 = var3.getRegion(10);
// 
//   }

  public void test482() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test482"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("FALSE");
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var4 = var3.cloneNode();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.sheq(var1, var3);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test483() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test483"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    double var2 = var1.getProgress();
    com.google.javascript.jscomp.NodeTraversal.Callback var3 = null;
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var6 = var5.cloneNode();
    boolean var7 = var5.isDelProp();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var10 = var9.cloneNode();
    boolean var11 = var9.isDelProp();
    com.google.javascript.rhino.Node var12 = var5.clonePropsFrom(var9);
    com.google.javascript.rhino.JSDocInfo var13 = var9.getJSDocInfo();
    com.google.javascript.rhino.Node[] var14 = new com.google.javascript.rhino.Node[] { var9};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var3, var14);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test484() {}
//   public void test484() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test484"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     java.lang.Iterable var3 = var1.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     var5.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
//     com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
//     boolean var13 = var12.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var14 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
//     var15.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var18 = null;
//     com.google.javascript.rhino.jstype.JSType var20 = null;
//     com.google.javascript.rhino.jstype.JSType[] var21 = new com.google.javascript.rhino.jstype.JSType[] { var20};
//     com.google.javascript.rhino.jstype.FunctionType var22 = var15.createConstructorType(var18, false, var21);
//     com.google.javascript.rhino.jstype.FunctionType var23 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var12, var21);
//     com.google.javascript.rhino.ErrorReporter var24 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
//     java.lang.Iterable var27 = var25.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var28 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
//     var29.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var32 = null;
//     com.google.javascript.rhino.jstype.JSType var34 = null;
//     com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var34};
//     com.google.javascript.rhino.jstype.FunctionType var36 = var29.createConstructorType(var32, false, var35);
//     boolean var37 = var36.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var38 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
//     var39.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     com.google.javascript.rhino.jstype.JSType var44 = null;
//     com.google.javascript.rhino.jstype.JSType[] var45 = new com.google.javascript.rhino.jstype.JSType[] { var44};
//     com.google.javascript.rhino.jstype.FunctionType var46 = var39.createConstructorType(var42, false, var45);
//     com.google.javascript.rhino.jstype.FunctionType var47 = var25.createConstructorType((com.google.javascript.rhino.jstype.JSType)var36, var45);
//     boolean var48 = var36.isReturnTypeInferred();
//     boolean var49 = var36.isTemplatizedType();
//     com.google.javascript.rhino.ErrorReporter var50 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var50);
//     com.google.javascript.rhino.ErrorReporter var52 = var51.getErrorReporter();
//     com.google.javascript.rhino.jstype.TemplateType var53 = var51.getObjectElementKey();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var54 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var55 = var54.getGraphvizNodes();
//     com.google.javascript.rhino.ErrorReporter var56 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var56);
//     var57.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var60 = null;
//     com.google.javascript.rhino.jstype.JSType var62 = null;
//     com.google.javascript.rhino.jstype.JSType[] var63 = new com.google.javascript.rhino.jstype.JSType[] { var62};
//     com.google.javascript.rhino.jstype.FunctionType var64 = var57.createConstructorType(var60, false, var63);
//     com.google.javascript.rhino.jstype.JSType var66 = var64.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var67 = var64.getTypeOfThis();
//     com.google.javascript.jscomp.graph.GraphNode var68 = var54.getNode((java.lang.Object)var67);
//     java.util.List var69 = var54.getEdges();
//     com.google.javascript.rhino.jstype.JSType var70 = var1.createFunctionType((com.google.javascript.rhino.jstype.ObjectType)var36, (com.google.javascript.rhino.jstype.JSType)var53, var69);
//     boolean var71 = var36.isBooleanValueType();
//     com.google.javascript.rhino.jstype.Visitor var72 = null;
//     java.lang.Object var73 = var36.visit(var72);
// 
//   }

  public void test485() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test485"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.string("hi!");
    boolean var3 = var2.isNE();
    int var4 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.string("hi!");
    boolean var7 = var6.isNE();
    boolean var8 = var6.isWith();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var2, var6);
    java.lang.String var10 = com.google.javascript.jscomp.NodeUtil.getSourceName(var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(1, var2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test486() {}
//   public void test486() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test486"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     var1.check();
// 
//   }

  public void test487() {}
//   public void test487() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test487"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
//     com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var6);
//     double var8 = var5.getProgress();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var5);
//     com.google.javascript.jscomp.Compiler var10 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var11 = null;
//     com.google.javascript.jscomp.NodeTraversal var12 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var10, var11);
//     com.google.javascript.rhino.head.ast.AstRoot var14 = null;
//     var10.setOldParseTree("", var14);
//     var10.reportCodeChange();
//     com.google.javascript.rhino.Node var17 = var3.getAstRoot((com.google.javascript.jscomp.AbstractCompiler)var10);
// 
//   }

  public void test488() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test488"); }


    com.google.javascript.rhino.jstype.StaticSourceFile var0 = null;
    com.google.javascript.jscomp.parsing.Config var3 = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(true);
    com.google.javascript.rhino.head.ErrorReporter var4 = null;
    java.util.logging.Logger var5 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.parsing.ParserRunner.ParseResult var6 = com.google.javascript.jscomp.parsing.ParserRunner.parse(var0, "2014/12/24 01:41", var3, var4, var5);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test489() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test489"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(1, 10, 1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.JSDocInfo var4 = com.google.javascript.jscomp.NodeUtil.getFunctionJSDocInfo(var3);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }

  }

  public void test490() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test490"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionParamBuilder var1 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.jstype.FunctionType var10 = var3.createConstructorType(var6, false, var9);
    boolean var11 = var1.addRequiredParams(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.string("hi!");
    boolean var14 = var13.isNE();
    int var15 = var13.getSideEffectFlags();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.string("hi!");
    boolean var18 = var17.isNE();
    boolean var19 = var17.isWith();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.getprop(var13, var17);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.string("hi!");
    var17.addChildToBack(var22);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var24 = var22.getJsDocBuilderForNode();
    int var25 = var22.getCharno();
    java.lang.Object var27 = var22.getProp(10);
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.string("hi!");
    boolean var30 = var29.isNE();
    int var31 = var29.getSideEffectFlags();
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.string("hi!");
    boolean var34 = var33.isNE();
    boolean var35 = var33.isWith();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.getprop(var29, var33);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.string("hi!");
    var33.addChildToBack(var38);
    com.google.javascript.rhino.Node var40 = var22.srcrefTree(var38);
    com.google.javascript.rhino.Node var41 = var1.newParameterFromNode(var22);
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.string("hi!");
    boolean var44 = var43.isNE();
    int var45 = var43.getSideEffectFlags();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.string("hi!");
    boolean var48 = var47.isNE();
    boolean var49 = var47.isWith();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.getprop(var43, var47);
    var47.removeProp(0);
    java.lang.String var53 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var47);
    java.util.Set var54 = null;
    var47.setDirectives(var54);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var56 = var47.getJsDocBuilderForNode();
    com.google.javascript.rhino.Node var57 = var1.newOptionalParameterFromNode(var47);
    boolean var58 = var57.isFalse();
    boolean var59 = var57.isObjectLit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);

  }

  public void test491() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test491"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("hi!");
    boolean var2 = var1.isNE();
    int var3 = var1.getSideEffectFlags();
    boolean var4 = var1.isReturn();
    boolean var5 = var1.isNot();
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var6 = var1.getJsDocBuilderForNode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test492() {}
//   public void test492() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test492"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var1 = new com.google.javascript.jscomp.SourceFile("goog.exportProperty");
//     int var3 = var1.getLineOffset(40);
// 
//   }

  public void test493() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test493"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.CheckLevel var1 = com.google.javascript.jscomp.CheckLevel.valueOf("Node tree inequality:\nTree1:\nSTRING LinkedGraph\n\n\nTree2:\nSTRING hi!\n\n\nSubtree1: STRING LinkedGraph\n\n\nSubtree2: STRING hi!\n");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test494() {}
//   public void test494() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test494"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
//     com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var5, var6);
//     double var8 = var5.getProgress();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var5);
//     com.google.javascript.jscomp.SourceFile var11 = com.google.javascript.jscomp.SourceFile.fromFile("FALSE");
//     com.google.javascript.jscomp.JsAst var12 = new com.google.javascript.jscomp.JsAst(var11);
//     var5.replaceScript(var12);
// 
//   }

  public void test495() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test495"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.nullNode();
    var0.setLength(0);
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
    java.lang.Iterable var6 = var4.getTypesWithProperty("hi!");
    com.google.javascript.rhino.jstype.FunctionParamBuilder var7 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var4);
    com.google.javascript.rhino.Node var8 = var7.build();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.add(var0, var8);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test496() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test496"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    var5.identifyNonNullableName("");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.jstype.JSType[] var11 = new com.google.javascript.rhino.jstype.JSType[] { var10};
    com.google.javascript.rhino.jstype.FunctionType var12 = var5.createConstructorType(var8, false, var11);
    com.google.javascript.rhino.jstype.JSType var14 = var12.findPropertyType("hi!");
    int var15 = var12.getPropertiesCount();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var12};
    com.google.javascript.rhino.Node var17 = var1.createParametersWithVarArgs(var16);
    com.google.javascript.rhino.jstype.TemplateType var18 = var1.getObjectIndexKey();
    var1.clearTemplateTypeNames();
    com.google.javascript.rhino.jstype.FunctionParamBuilder var20 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    boolean var22 = var1.isForwardDeclaredType("TRUE");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test497() {}
//   public void test497() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test497"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var4 = null;
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.jstype.JSType[] var7 = new com.google.javascript.rhino.jstype.JSType[] { var6};
//     com.google.javascript.rhino.jstype.FunctionType var8 = var1.createConstructorType(var4, false, var7);
//     com.google.javascript.rhino.jstype.JSType var10 = var8.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.JSType var11 = var8.getTypeOfThis();
//     com.google.javascript.rhino.jstype.JSType var12 = var11.unboxesTo();
//     com.google.javascript.rhino.jstype.JSType var14 = var11.getRestrictedTypeGivenToBooleanOutcome(false);
//     com.google.javascript.rhino.ErrorReporter var15 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
//     var16.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var19 = null;
//     com.google.javascript.rhino.jstype.JSType var21 = null;
//     com.google.javascript.rhino.jstype.JSType[] var22 = new com.google.javascript.rhino.jstype.JSType[] { var21};
//     com.google.javascript.rhino.jstype.FunctionType var23 = var16.createConstructorType(var19, false, var22);
//     com.google.javascript.rhino.jstype.JSType var25 = var23.findPropertyType("hi!");
//     com.google.javascript.rhino.jstype.FunctionType var26 = var23.toMaybeFunctionType();
//     boolean var27 = var23.isUnionType();
//     boolean var28 = com.google.javascript.rhino.jstype.JSType.isEquivalent(var14, (com.google.javascript.rhino.jstype.JSType)var23);
//     com.google.javascript.rhino.SimpleErrorReporter var29 = new com.google.javascript.rhino.SimpleErrorReporter();
//     com.google.javascript.rhino.ErrorReporter var30 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
//     var31.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var34 = null;
//     com.google.javascript.rhino.jstype.JSType var36 = null;
//     com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var36};
//     com.google.javascript.rhino.jstype.FunctionType var38 = var31.createConstructorType(var34, false, var37);
//     boolean var39 = var38.canBeCalled();
//     boolean var40 = var38.isTemplatizedType();
//     com.google.javascript.rhino.jstype.ObjectType var42 = var38.getTopMostDefiningType("hi!");
//     com.google.javascript.rhino.jstype.JSType var43 = var14.resolve((com.google.javascript.rhino.ErrorReporter)var29, (com.google.javascript.rhino.jstype.StaticScope)var38);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var45 = new com.google.javascript.rhino.jstype.JSTypeRegistry((com.google.javascript.rhino.ErrorReporter)var29, false);
//     com.google.javascript.rhino.ErrorReporter var46 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
//     java.lang.Iterable var49 = var47.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var50 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var50);
//     var51.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var54 = null;
//     com.google.javascript.rhino.jstype.JSType var56 = null;
//     com.google.javascript.rhino.jstype.JSType[] var57 = new com.google.javascript.rhino.jstype.JSType[] { var56};
//     com.google.javascript.rhino.jstype.FunctionType var58 = var51.createConstructorType(var54, false, var57);
//     boolean var59 = var58.canBeCalled();
//     com.google.javascript.rhino.ErrorReporter var60 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var60);
//     var61.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var64 = null;
//     com.google.javascript.rhino.jstype.JSType var66 = null;
//     com.google.javascript.rhino.jstype.JSType[] var67 = new com.google.javascript.rhino.jstype.JSType[] { var66};
//     com.google.javascript.rhino.jstype.FunctionType var68 = var61.createConstructorType(var64, false, var67);
//     com.google.javascript.rhino.jstype.FunctionType var69 = var47.createConstructorType((com.google.javascript.rhino.jstype.JSType)var58, var67);
//     com.google.javascript.rhino.ErrorReporter var70 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var70);
//     var71.identifyNonNullableName("");
//     com.google.javascript.rhino.jstype.JSType var74 = null;
//     com.google.javascript.rhino.jstype.JSType var76 = null;
//     com.google.javascript.rhino.jstype.JSType[] var77 = new com.google.javascript.rhino.jstype.JSType[] { var76};
//     com.google.javascript.rhino.jstype.FunctionType var78 = var71.createConstructorType(var74, false, var77);
//     com.google.javascript.rhino.jstype.JSType var80 = var78.findPropertyType("hi!");
//     int var81 = var78.getPropertiesCount();
//     com.google.javascript.rhino.jstype.ObjectType var83 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var78, "");
//     boolean var84 = var78.makesStructs();
//     boolean var85 = var69.isSubtype((com.google.javascript.rhino.jstype.JSType)var78);
//     com.google.javascript.rhino.jstype.TemplateType var86 = com.google.javascript.rhino.jstype.JSType.toMaybeTemplateType((com.google.javascript.rhino.jstype.JSType)var78);
//     com.google.javascript.rhino.jstype.FunctionType var88 = var78.getBindReturnType((-1));
//     boolean var89 = var88.hasDisplayName();
//     com.google.common.collect.ImmutableList var90 = null;
//     com.google.javascript.rhino.jstype.TemplatizedType var91 = var45.createTemplatizedType((com.google.javascript.rhino.jstype.ObjectType)var88, var90);
// 
//   }

  public void test498() {}
//   public void test498() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test498"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var3 = var0.getSourceLine("", (-1));
//     boolean var4 = var0.hasErrors();
// 
//   }

  public void test499() {}
//   public void test499() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test499"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
//     com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
//     java.lang.String var3 = var2.getSourceName();
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.Node.newString("hi!: ");
//     boolean var6 = var5.isSetterDef();
//     com.google.javascript.rhino.Node var7 = var5.getLastSibling();
//     com.google.javascript.rhino.Node[] var8 = new com.google.javascript.rhino.Node[] { var7};
//     var2.traverseRoots(var8);
// 
//   }

  public void test500() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test500"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromCode("", "goog.exportProperty");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

}
