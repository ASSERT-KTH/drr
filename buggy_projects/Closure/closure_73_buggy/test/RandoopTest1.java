
import junit.framework.*;

public class RandoopTest1 extends TestCase {

  public static boolean debug = false;

  public void test1() {}
//   public void test1() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test1"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile.Generator var1 = null;
//     com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var1);
//     com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var2, true);
//     com.google.javascript.jscomp.MessageFormatter var5 = null;
//     java.util.logging.Logger var6 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var7 = new com.google.javascript.jscomp.LoggerErrorManager(var5, var6);
//     var4.setErrorManager((com.google.javascript.jscomp.ErrorManager)var7);
//     com.google.javascript.jscomp.Compiler var9 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var7);
//     com.google.javascript.jscomp.Compiler var10 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var7);
//     java.io.PrintStream var11 = null;
//     com.google.javascript.jscomp.Compiler var12 = new com.google.javascript.jscomp.Compiler(var11);
//     com.google.javascript.jscomp.JSSourceFile var15 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
//     com.google.javascript.rhino.Node var16 = var12.parse(var15);
//     com.google.javascript.jscomp.JSModule var17 = null;
//     com.google.javascript.jscomp.JSModule[] var18 = new com.google.javascript.jscomp.JSModule[] { var17};
//     com.google.javascript.jscomp.CompilerOptions var19 = new com.google.javascript.jscomp.CompilerOptions();
//     var19.setAcceptConstKeyword(true);
//     com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var22 = null;
//     var19.setAliasTransformationHandler(var22);
//     var19.setCollapsePropertiesOnExternTypes(false);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var26 = var19.getTweakProcessing();
//     com.google.javascript.jscomp.Result var27 = var10.compile(var15, var18, var19);
// 
//   }

  public void test2() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test2"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var3 = var0.getTweakProcessing();
    var0.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var6 = var0.getTweakProcessing();
    java.lang.Class var7 = var6.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "hi!. hi! at (unknown source) line (unknown line) : (unknown column)");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test3() {}
//   public void test3() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test3"); }
// 
// 
//     com.google.javascript.rhino.Context var0 = com.google.javascript.rhino.Context.enter();
//     com.google.javascript.rhino.ErrorReporter var1 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       com.google.javascript.rhino.ErrorReporter var2 = var0.setErrorReporter(var1);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var0);
// 
//   }

  public void test4() {}
//   public void test4() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test4"); }
// 
// 
//     com.google.javascript.rhino.Context var0 = null;
//     com.google.javascript.rhino.Context var1 = com.google.javascript.rhino.Context.enter(var0);
//     var1.setCompileFunctionsWithDynamicScope(false);
//     com.google.javascript.jscomp.MessageFormatter var4 = null;
//     java.util.logging.Logger var5 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var6 = new com.google.javascript.jscomp.LoggerErrorManager(var4, var5);
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     com.google.javascript.rhino.Node var9 = null;
//     com.google.javascript.jscomp.CheckLevel var11 = null;
//     com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var11, "hi!");
//     java.lang.String[] var15 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", var9, var13, var15);
//     var6.report(var7, var16);
//     var1.removeThreadLocal((java.lang.Object)var16);
//     int var19 = var1.getInstructionObserverThreshold();
//     var1.addActivationName("goog.exportProperty");
//     int var22 = var1.getLanguageVersion();
//     int var23 = var1.getLanguageVersion();
//     var1.setCompileFunctionsWithDynamicScope(true);
//     int var26 = var1.getOptimizationLevel();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var26 == 0);
// 
//   }

  public void test5() {}
//   public void test5() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test5"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     var0.disableThreads();
//     var0.disableThreads();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal var5 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var4);
//     com.google.javascript.jscomp.SourceFile.Generator var7 = null;
//     com.google.javascript.jscomp.JSSourceFile var8 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var7);
//     com.google.javascript.jscomp.CompilerInput var10 = new com.google.javascript.jscomp.CompilerInput(var8, true);
//     com.google.javascript.jscomp.MessageFormatter var11 = null;
//     java.util.logging.Logger var12 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var13 = new com.google.javascript.jscomp.LoggerErrorManager(var11, var12);
//     var10.setErrorManager((com.google.javascript.jscomp.ErrorManager)var13);
//     int var15 = var13.getWarningCount();
//     var0.setErrorManager((com.google.javascript.jscomp.ErrorManager)var13);
//     com.google.javascript.jscomp.Region var19 = var0.getSourceRegion("", 0);
//     com.google.javascript.jscomp.Compiler var20 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var21 = var20.getTopScope();
//     com.google.javascript.jscomp.SourceMap var22 = var20.getSourceMap();
//     var20.reportCodeChange();
//     com.google.javascript.jscomp.MessageFormatter var24 = null;
//     java.util.logging.Logger var25 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var26 = new com.google.javascript.jscomp.LoggerErrorManager(var24, var25);
//     var20.setErrorManager((com.google.javascript.jscomp.ErrorManager)var26);
//     var0.setErrorManager((com.google.javascript.jscomp.ErrorManager)var26);
//     var0.check();
// 
//   }

  public void test6() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test6"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var8 = var3.clonePropsFrom(var7);
    com.google.javascript.rhino.Node var10 = var7.getAncestor(0);
    java.util.Set var11 = var7.getDirectives();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var15.setType(10);
    var15.setOptionalArg(false);
    var7.addChildrenToBack(var15);
    var15.addSuppression("goog.exportProperty");
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var27 = var26.getType();
    com.google.javascript.rhino.Node var28 = var26.cloneTree();
    var26.addSuppression("");
    int var31 = var26.getType();
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.NodeUtil.newExpr(var26);
    var32.setLineno((-1));
    com.google.javascript.rhino.Node var36 = var32.getAncestor(0);
    int var37 = var36.getLineno();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var38 = var15.clonePropsFrom(var36);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1));

  }

  public void test7() {}
//   public void test7() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test7"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var2 = var0.isPrivate("");
//     java.lang.String var3 = var0.getExportSymbolFunction();
//     com.google.javascript.rhino.Node var5 = null;
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     com.google.javascript.jscomp.DiagnosticType var9 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var7, "hi!");
//     java.lang.String[] var11 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var12 = com.google.javascript.jscomp.JSError.make("", var5, var9, var11);
//     com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var17 = var16.getType();
//     com.google.javascript.rhino.Node var18 = var16.cloneTree();
//     boolean var19 = var12.equals((java.lang.Object)var16);
//     java.lang.String var20 = var0.getSingletonGetterClassName(var16);
// 
//   }

  public void test8() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test8"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var1 = var0.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var3 = var0.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var4 = var0.getGraphvizNodes();
    boolean var5 = var0.isDirected();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var14 = var9.clonePropsFrom(var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    var14.setJSType(var15);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var22 = var21.getType();
    int var23 = var21.getSourcePosition();
    com.google.javascript.rhino.Node var24 = var21.getLastSibling();
    com.google.javascript.rhino.Node var25 = var21.removeFirstChild();
    java.lang.String var29 = var21.toString(false, true, false);
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var38 = var33.clonePropsFrom(var37);
    com.google.javascript.rhino.Node var40 = var37.getAncestor(0);
    boolean var41 = var37.isQualifiedName();
    com.google.javascript.rhino.JSDocInfo var42 = null;
    var37.setJSDocInfo(var42);
    var21.addChildToFront(var37);
    com.google.javascript.jscomp.CheckLevel var45 = null;
    com.google.javascript.jscomp.DiagnosticType var48 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "");
    com.google.javascript.jscomp.CheckLevel var52 = null;
    com.google.javascript.rhino.Node var54 = null;
    com.google.javascript.jscomp.CheckLevel var56 = null;
    com.google.javascript.jscomp.DiagnosticType var58 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var56, "hi!");
    java.lang.String[] var60 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var61 = com.google.javascript.jscomp.JSError.make("", var54, var58, var60);
    java.lang.String[] var63 = new java.lang.String[] { "goog.exportProperty"};
    com.google.javascript.jscomp.JSError var64 = com.google.javascript.jscomp.JSError.make("eof", 1, 40, var52, var58, var63);
    com.google.javascript.jscomp.JSError var65 = com.google.javascript.jscomp.JSError.make("com.google.javascript.rhino.EcmaError: : hi!: goog.global", var21, var45, var48, var63);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.graph.Graph.GraphEdge var66 = var0.getFirstEdge((java.lang.Object)var15, (java.lang.Object)var65);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "STRING "+ "'", var29.equals("STRING "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test9() {}
//   public void test9() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test9"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     com.google.javascript.jscomp.Scope var2 = var0.getTopScope();
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     com.google.javascript.jscomp.SourceMap var5 = var3.getSourceMap();
//     var3.reportCodeChange();
//     com.google.javascript.jscomp.Compiler var7 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var8 = var7.getTopScope();
//     com.google.javascript.jscomp.SourceMap var9 = var7.getSourceMap();
//     com.google.javascript.jscomp.JSSourceFile var12 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
//     com.google.javascript.jscomp.SourceFile.Generator var14 = null;
//     com.google.javascript.jscomp.JSSourceFile var15 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var14);
//     com.google.javascript.jscomp.CompilerInput var17 = new com.google.javascript.jscomp.CompilerInput(var15, true);
//     com.google.javascript.jscomp.CompilerOptions var18 = new com.google.javascript.jscomp.CompilerOptions();
//     var18.setAcceptConstKeyword(true);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var21 = var18.getTweakProcessing();
//     var18.setRewriteNewDateGoogNow(false);
//     com.google.javascript.jscomp.Result var24 = var7.compile(var12, var15, var18);
//     com.google.javascript.rhino.Node var25 = var3.parse(var12);
//     com.google.javascript.jscomp.JSSourceFile var28 = com.google.javascript.jscomp.JSSourceFile.fromCode("null(null)", "goog.global");
//     com.google.javascript.jscomp.JSSourceFile[] var29 = new com.google.javascript.jscomp.JSSourceFile[] { var28};
//     java.nio.charset.Charset var31 = null;
//     com.google.javascript.jscomp.JSSourceFile var32 = com.google.javascript.jscomp.JSSourceFile.fromFile("goog.exportProperty", var31);
//     com.google.javascript.jscomp.JSSourceFile[] var33 = new com.google.javascript.jscomp.JSSourceFile[] { var32};
//     com.google.javascript.jscomp.CompilerOptions var34 = new com.google.javascript.jscomp.CompilerOptions();
//     var34.setAcceptConstKeyword(true);
//     java.util.Map var37 = var34.getTweakReplacements();
//     var34.setDefineToNumberLiteral("eof", 1);
//     com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var41 = null;
//     var34.setAliasTransformationHandler(var41);
//     var34.setGenerateExports(false);
//     com.google.javascript.jscomp.Result var45 = var3.compile(var29, var33, var34);
//     com.google.javascript.jscomp.Compiler var46 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var47 = var46.getTopScope();
//     com.google.javascript.jscomp.SourceMap var48 = var46.getSourceMap();
//     var46.reportCodeChange();
//     com.google.javascript.jscomp.Compiler var50 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var51 = var50.getTopScope();
//     com.google.javascript.jscomp.SourceMap var52 = var50.getSourceMap();
//     com.google.javascript.jscomp.JSSourceFile var55 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
//     com.google.javascript.jscomp.SourceFile.Generator var57 = null;
//     com.google.javascript.jscomp.JSSourceFile var58 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var57);
//     com.google.javascript.jscomp.CompilerInput var60 = new com.google.javascript.jscomp.CompilerInput(var58, true);
//     com.google.javascript.jscomp.CompilerOptions var61 = new com.google.javascript.jscomp.CompilerOptions();
//     var61.setAcceptConstKeyword(true);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var64 = var61.getTweakProcessing();
//     var61.setRewriteNewDateGoogNow(false);
//     com.google.javascript.jscomp.Result var67 = var50.compile(var55, var58, var61);
//     com.google.javascript.rhino.Node var68 = var46.parse(var55);
//     com.google.javascript.jscomp.JSSourceFile var71 = com.google.javascript.jscomp.JSSourceFile.fromCode("null(null)", "goog.global");
//     com.google.javascript.jscomp.JSSourceFile[] var72 = new com.google.javascript.jscomp.JSSourceFile[] { var71};
//     java.nio.charset.Charset var74 = null;
//     com.google.javascript.jscomp.JSSourceFile var75 = com.google.javascript.jscomp.JSSourceFile.fromFile("goog.exportProperty", var74);
//     com.google.javascript.jscomp.JSSourceFile[] var76 = new com.google.javascript.jscomp.JSSourceFile[] { var75};
//     com.google.javascript.jscomp.CompilerOptions var77 = new com.google.javascript.jscomp.CompilerOptions();
//     var77.setAcceptConstKeyword(true);
//     java.util.Map var80 = var77.getTweakReplacements();
//     var77.setDefineToNumberLiteral("eof", 1);
//     com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var84 = null;
//     var77.setAliasTransformationHandler(var84);
//     var77.setGenerateExports(false);
//     com.google.javascript.jscomp.Result var88 = var46.compile(var72, var76, var77);
//     com.google.javascript.jscomp.CompilerOptions var89 = null;
//     com.google.javascript.jscomp.Result var90 = var0.compile(var33, var76, var89);
// 
//   }

  public void test10() {}
//   public void test10() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test10"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     java.lang.String var1 = var0.getGlobalObject();
//     java.lang.String var2 = var0.getExportPropertyFunction();
//     java.lang.String var3 = var0.getDelegateSuperclassName();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString(": hi!", 100, 10);
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     var12.setType(10);
//     com.google.javascript.rhino.Node var16 = new com.google.javascript.rhino.Node(10);
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var25 = var20.clonePropsFrom(var24);
//     var25.putProp((-1), (java.lang.Object)10.0d);
//     com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var37 = var32.clonePropsFrom(var36);
//     com.google.javascript.rhino.Node var38 = var25.copyInformationFrom(var37);
//     boolean var39 = var37.hasOneChild();
//     com.google.javascript.rhino.Node var41 = null;
//     com.google.javascript.jscomp.CheckLevel var43 = null;
//     com.google.javascript.jscomp.DiagnosticType var45 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var43, "hi!");
//     java.lang.String[] var47 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var48 = com.google.javascript.jscomp.JSError.make("", var41, var45, var47);
//     com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var53 = var52.getType();
//     com.google.javascript.rhino.Node var54 = var52.cloneTree();
//     boolean var55 = var48.equals((java.lang.Object)var52);
//     com.google.javascript.rhino.Node var58 = new com.google.javascript.rhino.Node((-1), var12, var16, var37, var52, 0, 1);
//     java.lang.String var59 = var0.extractClassNameIfProvide(var7, var52);
//     com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var64 = var63.getType();
//     int var65 = var63.getSourcePosition();
//     com.google.javascript.rhino.Node var66 = var63.getLastSibling();
//     com.google.javascript.rhino.Node var67 = var63.removeFirstChild();
//     java.lang.String var71 = var63.toString(false, true, false);
//     java.util.List var72 = var0.identifyTypeDeclarationCall(var63);
// 
//   }

  public void test11() {}
//   public void test11() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test11"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     var0.disableThreads();
//     com.google.javascript.rhino.Node var3 = var0.getRoot();
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var4);
//     java.lang.String var8 = var0.getSourceLine("", 40);
// 
//   }

  public void test12() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test12"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var4 = var3.getType();
    com.google.javascript.rhino.Node var5 = var3.cloneTree();
    var3.addSuppression("");
    int var8 = var3.getType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var9 = var3.detachFromParent();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 40);

  }

  public void test13() {}
//   public void test13() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test13"); }
// 
// 
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     var4.setType(10);
//     com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(10);
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var17 = var12.clonePropsFrom(var16);
//     var17.putProp((-1), (java.lang.Object)10.0d);
//     com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var29 = var24.clonePropsFrom(var28);
//     com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var29);
//     boolean var31 = var29.hasOneChild();
//     com.google.javascript.rhino.Node var33 = null;
//     com.google.javascript.jscomp.CheckLevel var35 = null;
//     com.google.javascript.jscomp.DiagnosticType var37 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var35, "hi!");
//     java.lang.String[] var39 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var40 = com.google.javascript.jscomp.JSError.make("", var33, var37, var39);
//     com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var45 = var44.getType();
//     com.google.javascript.rhino.Node var46 = var44.cloneTree();
//     boolean var47 = var40.equals((java.lang.Object)var44);
//     com.google.javascript.rhino.Node var50 = new com.google.javascript.rhino.Node((-1), var4, var8, var29, var44, 0, 1);
//     com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     var54.setType(10);
//     var54.setOptionalArg(false);
//     var54.putIntProp(1, 40);
//     com.google.javascript.rhino.Node var65 = new com.google.javascript.rhino.Node(0, 1, 10);
//     var8.replaceChild(var54, var65);
// 
//   }

  public void test14() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test14"); }


    com.google.javascript.rhino.EcmaError var6 = com.google.javascript.rhino.ScriptRuntime.constructError("", "hi!", "hi!", (-1), "hi!", 1);
    java.lang.String var7 = var6.toString();
    var6.initLineNumber(100);
    java.lang.String var10 = var6.details();
    java.lang.String var11 = var6.details();
    java.lang.String var12 = var6.getSourceName();
    int var13 = var6.columnNumber();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.initLineSource("");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "com.google.javascript.rhino.EcmaError: : hi!"+ "'", var7.equals("com.google.javascript.rhino.EcmaError: : hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ": hi!"+ "'", var10.equals(": hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ": hi!"+ "'", var11.equals(": hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);

  }

  public void test15() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test15"); }


    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var9 = var4.clonePropsFrom(var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    var9.setJSType(var10);
    java.util.Collection var12 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var9);
    boolean var13 = var9.isSyntheticBlock();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var18 = var17.getType();
    int var19 = var17.getSourcePosition();
    com.google.javascript.rhino.Node var20 = var17.getLastSibling();
    boolean var21 = var17.isSyntheticBlock();
    java.lang.String var22 = var9.checkTreeEquals(var17);
    boolean var23 = var17.isOnlyModifiesThisCall();
    com.google.javascript.rhino.Node var24 = new com.google.javascript.rhino.Node(40, var17);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var24.setSideEffectFlags(0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test16() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test16"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var1 = var0.getNodes();
    java.lang.String var2 = var0.getName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var4 = var0.getNodeDegree((java.lang.Object)": WARNING - hi!\n");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "LinkedGraph"+ "'", var2.equals("LinkedGraph"));

  }

  public void test17() {}
//   public void test17() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test17"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     var0.disableThreads();
//     var0.disableThreads();
//     com.google.javascript.jscomp.MessageFormatter var4 = null;
//     java.util.logging.Logger var5 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var6 = new com.google.javascript.jscomp.LoggerErrorManager(var4, var5);
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     com.google.javascript.rhino.Node var9 = null;
//     com.google.javascript.jscomp.CheckLevel var11 = null;
//     com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var11, "hi!");
//     java.lang.String[] var15 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", var9, var13, var15);
//     var6.report(var7, var16);
//     var0.setErrorManager((com.google.javascript.jscomp.ErrorManager)var6);
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var19 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var20 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var19);
//     com.google.javascript.jscomp.NodeTraversal.Callback var21 = null;
//     com.google.javascript.jscomp.NodeTraversal var22 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var21);
//     java.lang.String var23 = var0.getAstDotGraph();
//     var0.rebuildInputsFromModules();
// 
//   }

  public void test18() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test18"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isPrivate("");
    boolean var4 = var0.isPrivate("goog.exportProperty");
    boolean var6 = var0.isConstant("com.google.javascript.rhino.EcmaError: : hi!");
    com.google.javascript.rhino.jstype.FunctionType var7 = null;
    com.google.javascript.rhino.jstype.FunctionType var8 = null;
    com.google.javascript.jscomp.CodingConvention.SubclassType var9 = null;
    var0.applySubclassRelationship(var7, var8, var9);
    com.google.javascript.rhino.jstype.ObjectType var11 = null;
    com.google.javascript.rhino.jstype.ObjectType var12 = null;
    com.google.javascript.rhino.jstype.ObjectType var13 = null;
    com.google.javascript.rhino.jstype.FunctionType var14 = null;
    com.google.javascript.rhino.jstype.FunctionType var15 = null;
    var0.applyDelegateRelationship(var11, var12, var13, var14, var15);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var21 = var20.getType();
    int var22 = var20.getSourcePosition();
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var32 = var27.clonePropsFrom(var31);
    com.google.javascript.rhino.jstype.JSType var33 = null;
    var32.setJSType(var33);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var43 = var38.clonePropsFrom(var42);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var43.setJSType(var44);
    java.util.Collection var46 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var43);
    com.google.javascript.rhino.Node.AncestorIterable var47 = var43.getAncestors();
    boolean var48 = var43.isOnlyModifiesThisCall();
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var56 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var57 = var52.clonePropsFrom(var56);
    com.google.javascript.rhino.jstype.JSType var58 = null;
    var56.setJSType(var58);
    var56.setOptionalArg(true);
    int var62 = var56.getLineno();
    boolean var63 = var56.isLocalResultCall();
    boolean var64 = var56.isQuotedString();
    com.google.javascript.rhino.Node var65 = new com.google.javascript.rhino.Node(0, var32, var43, var56);
    java.lang.String var66 = var0.extractClassNameIfRequire(var20, var43);
    boolean var67 = var20.isSyntheticBlock();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test19() {}
//   public void test19() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test19"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile.Generator var1 = null;
//     com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var1);
//     com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var2, true);
//     com.google.javascript.jscomp.SourceFile.Generator var6 = null;
//     com.google.javascript.jscomp.SourceFile var7 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var6);
//     com.google.javascript.jscomp.JsAst var8 = new com.google.javascript.jscomp.JsAst(var7);
//     var4.setSourceFile(var7);
//     com.google.javascript.jscomp.Compiler var10 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var11 = var10.getTopScope();
//     var10.disableThreads();
//     var10.disableThreads();
//     com.google.javascript.jscomp.NodeTraversal.Callback var14 = null;
//     com.google.javascript.jscomp.NodeTraversal var15 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var10, var14);
//     com.google.javascript.jscomp.SourceFile.Generator var17 = null;
//     com.google.javascript.jscomp.JSSourceFile var18 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var17);
//     com.google.javascript.jscomp.CompilerInput var20 = new com.google.javascript.jscomp.CompilerInput(var18, true);
//     com.google.javascript.jscomp.MessageFormatter var21 = null;
//     java.util.logging.Logger var22 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var23 = new com.google.javascript.jscomp.LoggerErrorManager(var21, var22);
//     var20.setErrorManager((com.google.javascript.jscomp.ErrorManager)var23);
//     int var25 = var23.getWarningCount();
//     var10.setErrorManager((com.google.javascript.jscomp.ErrorManager)var23);
//     com.google.javascript.jscomp.Region var29 = var10.getSourceRegion("", 0);
//     com.google.javascript.rhino.Node var30 = var4.getAstRoot((com.google.javascript.jscomp.AbstractCompiler)var10);
// 
//   }

  public void test20() {}
//   public void test20() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test20"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     var0.disableThreads();
//     com.google.javascript.rhino.Node var3 = var0.getRoot();
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var4);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var6 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var7 = var6.newSubGraph();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var9 = var8.newSubGraph();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var11 = var8.createDirectedGraphNode((java.lang.Object)100);
//     java.util.List var12 = var6.getDirectedPredNodes(var11);
//     com.google.javascript.jscomp.JSModuleGraph var13 = new com.google.javascript.jscomp.JSModuleGraph(var12);
//     com.google.javascript.jscomp.ComposeWarningsGuard var14 = new com.google.javascript.jscomp.ComposeWarningsGuard(var12);
//     com.google.javascript.rhino.Context var15 = null;
//     com.google.javascript.rhino.Context var16 = com.google.javascript.rhino.Context.enter(var15);
//     var16.setCompileFunctionsWithDynamicScope(false);
//     com.google.javascript.jscomp.MessageFormatter var19 = null;
//     java.util.logging.Logger var20 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var21 = new com.google.javascript.jscomp.LoggerErrorManager(var19, var20);
//     com.google.javascript.jscomp.CheckLevel var22 = null;
//     com.google.javascript.rhino.Node var24 = null;
//     com.google.javascript.jscomp.CheckLevel var26 = null;
//     com.google.javascript.jscomp.DiagnosticType var28 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var26, "hi!");
//     java.lang.String[] var30 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var31 = com.google.javascript.jscomp.JSError.make("", var24, var28, var30);
//     var21.report(var22, var31);
//     var16.removeThreadLocal((java.lang.Object)var31);
//     com.google.javascript.jscomp.DiagnosticType var34 = var31.getType();
//     com.google.javascript.jscomp.CheckLevel var35 = var14.level(var31);
//     var0.report(var31);
// 
//   }

  public void test21() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test21"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.Node.newNumber(100.0d);
    boolean var2 = var1.hasOneChild();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test22() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test22"); }


    com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var2);
    com.google.javascript.jscomp.CompilerInput var5 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var3, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var6 = var5.getPathRelativeToClosureBase();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test23() {}
//   public void test23() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test23"); }
// 
// 
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var4 = var3.getType();
//     int var5 = var3.getSourcePosition();
//     com.google.javascript.rhino.Node var6 = var3.getLastSibling();
//     com.google.javascript.rhino.Node var7 = var3.removeFirstChild();
//     com.google.javascript.jscomp.ClosureCodingConvention var8 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var10 = var8.isPrivate("");
//     com.google.javascript.rhino.jstype.FunctionType var11 = null;
//     com.google.javascript.rhino.jstype.FunctionType var12 = null;
//     com.google.javascript.jscomp.CodingConvention.SubclassType var13 = null;
//     var8.applySubclassRelationship(var11, var12, var13);
//     java.lang.String var15 = var8.getExportSymbolFunction();
//     com.google.javascript.jscomp.ClosureCodingConvention var16 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var18 = var16.isPrivate("");
//     boolean var20 = var16.isPrivate("goog.exportProperty");
//     boolean var22 = var16.isConstant("com.google.javascript.rhino.EcmaError: : hi!");
//     com.google.javascript.rhino.Node var23 = null;
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     var27.setType(10);
//     var27.setOptionalArg(false);
//     java.lang.String var32 = var16.extractClassNameIfProvide(var23, var27);
//     boolean var33 = var8.isOptionalParameter(var27);
//     com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var42 = var37.clonePropsFrom(var41);
//     var42.putProp((-1), (java.lang.Object)10.0d);
//     com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var54 = var49.clonePropsFrom(var53);
//     com.google.javascript.rhino.Node var55 = var42.copyInformationFrom(var54);
//     int var56 = var42.getLineno();
//     var42.setType(0);
//     var3.replaceChild(var27, var42);
// 
//   }

  public void test24() {}
//   public void test24() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test24"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var2 = var0.isPrivate("");
//     java.lang.String var3 = var0.getExportPropertyFunction();
//     boolean var5 = var0.isPrivate("com.google.javascript.rhino.EcmaError: : hi!");
//     java.lang.String var6 = var0.getAbstractMethodName();
//     java.lang.String var7 = var0.getGlobalObject();
//     com.google.javascript.rhino.Node var8 = null;
//     java.util.List var9 = var0.identifyTypeDeclarationCall(var8);
// 
//   }

  public void test25() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test25"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    var0.clearNodeAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    var2.clearEdgeAnnotations();
    com.google.javascript.jscomp.Compiler var4 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var5 = var4.getTopScope();
    com.google.javascript.jscomp.SourceMap var6 = var4.getSourceMap();
    com.google.javascript.jscomp.JSSourceFile var9 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.SourceFile.Generator var11 = null;
    com.google.javascript.jscomp.JSSourceFile var12 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var11);
    com.google.javascript.jscomp.CompilerInput var14 = new com.google.javascript.jscomp.CompilerInput(var12, true);
    com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
    var15.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var18 = var15.getTweakProcessing();
    var15.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.Result var21 = var4.compile(var9, var12, var15);
    com.google.javascript.jscomp.LightweightMessageFormatter var22 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var4);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var23 = var2.createDirectedGraphNode((java.lang.Object)var22);
    java.util.List var24 = var0.getNeighborNodes(var23);
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var33 = var28.clonePropsFrom(var32);
    com.google.javascript.rhino.jstype.JSType var34 = null;
    var32.setJSType(var34);
    var32.setOptionalArg(true);
    int var38 = var32.getLineno();
    boolean var39 = var32.isLocalResultCall();
    boolean var40 = var32.isQuotedString();
    var32.setOptionalArg(true);
    com.google.javascript.rhino.Node var45 = null;
    com.google.javascript.jscomp.CheckLevel var47 = null;
    com.google.javascript.jscomp.DiagnosticType var49 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var47, "hi!");
    java.lang.String[] var51 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var52 = com.google.javascript.jscomp.JSError.make("", var45, var49, var51);
    java.lang.RuntimeException var54 = com.google.javascript.rhino.ScriptRuntime.undefWriteError((java.lang.Object)(short)0, (java.lang.Object)var49, (java.lang.Object)40);
    com.google.javascript.jscomp.DiagnosticType[] var55 = new com.google.javascript.jscomp.DiagnosticType[] { var49};
    com.google.javascript.jscomp.DiagnosticGroup var56 = new com.google.javascript.jscomp.DiagnosticGroup(var55);
    com.google.javascript.jscomp.DiagnosticGroup[] var57 = new com.google.javascript.jscomp.DiagnosticGroup[] { var56};
    com.google.javascript.jscomp.DiagnosticGroup var58 = new com.google.javascript.jscomp.DiagnosticGroup(var57);
    com.google.javascript.jscomp.DiagnosticGroup var59 = new com.google.javascript.jscomp.DiagnosticGroup(var57);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var60 = var0.getEdges((java.lang.Object)var32, (java.lang.Object)var59);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test26() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test26"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var3 = var0.getTweakProcessing();
    var0.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var6 = var0.getTweakProcessing();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setNameAnonymousFunctionsOnly(true);
    com.google.javascript.jscomp.CompilerOptions var11 = new com.google.javascript.jscomp.CompilerOptions();
    var11.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var14 = var11.getTweakProcessing();
    var0.setTweakProcessing(var14);
    var0.setTweakToBooleanLiteral("hi!: hi!", false);
    var0.setRewriteNewDateGoogNow(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test27() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test27"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var3 = var2.getNodes();
    java.util.List var4 = var2.getEdges();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var8.setType(10);
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var4, var8, 1, 100);
    com.google.javascript.jscomp.ComposeWarningsGuard var14 = new com.google.javascript.jscomp.ComposeWarningsGuard(var4);
    com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
    var15.setAcceptConstKeyword(true);
    var15.setTweakToStringLiteral("goog.exportProperty", "goog.exportSymbol");
    var15.setShadowVariables(true);
    var15.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var25 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var26 = var25.newSubGraph();
    var25.pushNodeAnnotations();
    java.util.List var28 = var25.getGraphvizEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var29 = new com.google.javascript.jscomp.ComposeWarningsGuard(var28);
    var15.setManageClosureDependencies(var28);
    com.google.javascript.jscomp.CompilerOptions var31 = new com.google.javascript.jscomp.CompilerOptions();
    var31.setAcceptConstKeyword(true);
    var31.setTweakToStringLiteral("goog.exportProperty", "goog.exportSymbol");
    var0.init(var4, var28, var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.optimize();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test28() {}
//   public void test28() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test28"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
//     com.google.javascript.rhino.Context var1 = com.google.javascript.rhino.Context.enter();
//     boolean var2 = var1.isGeneratingDebugChanged();
//     var1.setGeneratingSource(true);
//     boolean var5 = var1.isGeneratingDebugChanged();
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var14 = var9.clonePropsFrom(var13);
//     com.google.javascript.rhino.Node var16 = var13.getAncestor(0);
//     boolean var17 = var13.isQualifiedName();
//     com.google.javascript.rhino.JSDocInfo var18 = null;
//     var13.setJSDocInfo(var18);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var0.disconnect((java.lang.Object)var5, (java.lang.Object)var18);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var2 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var17 == false);
// 
//   }

  public void test29() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test29"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var8 = var3.clonePropsFrom(var7);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var7.setJSType(var9);
    var7.setOptionalArg(true);
    int var13 = var7.getLineno();
    com.google.javascript.rhino.jstype.JSType var14 = var7.getJSType();
    java.lang.String var15 = var7.getQualifiedName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.setDouble(0.0d);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test30() {}
//   public void test30() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test30"); }
// 
// 
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var9 = var4.clonePropsFrom(var8);
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     var9.setJSType(var10);
//     boolean var12 = var9.hasSideEffects();
//     java.lang.Iterable var13 = var9.children();
//     com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var23 = var18.clonePropsFrom(var22);
//     com.google.javascript.rhino.jstype.JSType var24 = null;
//     var23.setJSType(var24);
//     com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var34 = var29.clonePropsFrom(var33);
//     com.google.javascript.rhino.jstype.JSType var35 = null;
//     var34.setJSType(var35);
//     java.util.Collection var37 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var34);
//     com.google.javascript.rhino.Node.AncestorIterable var38 = var34.getAncestors();
//     boolean var39 = var34.isOnlyModifiesThisCall();
//     com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var48 = var43.clonePropsFrom(var47);
//     com.google.javascript.rhino.jstype.JSType var49 = null;
//     var47.setJSType(var49);
//     var47.setOptionalArg(true);
//     int var53 = var47.getLineno();
//     boolean var54 = var47.isLocalResultCall();
//     boolean var55 = var47.isQuotedString();
//     com.google.javascript.rhino.Node var56 = new com.google.javascript.rhino.Node(0, var23, var34, var47);
//     com.google.javascript.rhino.Node var57 = var23.cloneNode();
//     com.google.javascript.rhino.Node var58 = var9.copyInformationFromForTree(var57);
//     com.google.javascript.jscomp.ClosureCodingConvention var59 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     java.lang.String var60 = var59.getGlobalObject();
//     java.lang.String var61 = var59.getExportPropertyFunction();
//     java.lang.String var62 = var59.getDelegateSuperclassName();
//     java.lang.String var63 = var59.getExportSymbolFunction();
//     com.google.javascript.rhino.jstype.ObjectType var64 = null;
//     com.google.javascript.rhino.jstype.ObjectType var65 = null;
//     com.google.javascript.rhino.jstype.ObjectType var66 = null;
//     com.google.javascript.rhino.jstype.FunctionType var67 = null;
//     com.google.javascript.rhino.jstype.FunctionType var68 = null;
//     var59.applyDelegateRelationship(var64, var65, var66, var67, var68);
//     com.google.javascript.rhino.Node var72 = com.google.javascript.rhino.Node.newString("goog.exportSymbol");
//     java.util.Collection var73 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var72);
//     int var74 = var72.getSourcePosition();
//     com.google.javascript.rhino.Node var75 = new com.google.javascript.rhino.Node((-1), var72);
//     com.google.javascript.rhino.Node var79 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var83 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var84 = var79.clonePropsFrom(var83);
//     int var86 = var83.getIntProp(10);
//     java.lang.String var87 = var59.extractClassNameIfProvide(var72, var83);
//     com.google.javascript.rhino.Node var88 = null;
//     com.google.javascript.rhino.Node var91 = new com.google.javascript.rhino.Node(100, var57, var83, var88, 100, 10);
// 
//   }

  public void test31() {}
//   public void test31() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test31"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var1 = var0.newSubGraph();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var3 = var0.createDirectedGraphNode((java.lang.Object)100);
//     java.util.List var4 = var0.getGraphvizNodes();
//     java.util.List var5 = var0.getGraphvizNodes();
//     com.google.javascript.jscomp.SourceFile.Generator var7 = null;
//     com.google.javascript.jscomp.JSSourceFile var8 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var7);
//     com.google.javascript.jscomp.CompilerInput var10 = new com.google.javascript.jscomp.CompilerInput(var8, true);
//     com.google.javascript.jscomp.MessageFormatter var11 = null;
//     java.util.logging.Logger var12 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var13 = new com.google.javascript.jscomp.LoggerErrorManager(var11, var12);
//     var10.setErrorManager((com.google.javascript.jscomp.ErrorManager)var13);
//     com.google.javascript.jscomp.Compiler var15 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var13);
//     java.util.List var16 = var0.getNeighborNodes((java.lang.Object)var13);
// 
//   }

  public void test32() {}
//   public void test32() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test32"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var1 = null;
//     boolean var2 = var0.isVarArgsParameter(var1);
//     com.google.javascript.rhino.jstype.FunctionType var3 = null;
//     com.google.javascript.rhino.jstype.FunctionType var4 = null;
//     com.google.javascript.rhino.jstype.ObjectType var5 = null;
//     var0.applySingletonGetter(var3, var4, var5);
// 
//   }

  public void test33() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test33"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var1 = com.google.javascript.rhino.ScriptRuntime.getMessage0(": WARNING - hi!\n");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test34() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test34"); }


    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var10 = var5.clonePropsFrom(var9);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    var10.setJSType(var11);
    java.util.Collection var13 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var10);
    com.google.javascript.rhino.Node[] var14 = new com.google.javascript.rhino.Node[] { var10};
    com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(10, var14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var18 = new com.google.javascript.rhino.Node((-1), var14, 40, 1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test35() {}
//   public void test35() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test35"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     var0.disableThreads();
//     com.google.javascript.rhino.Node var3 = var0.getRoot();
//     com.google.javascript.jscomp.CompilerInput var5 = var0.newExternInput("");
// 
//   }

  public void test36() {}
//   public void test36() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test36"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile.Generator var1 = null;
//     com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var1);
//     com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var2, true);
//     com.google.javascript.jscomp.SourceFile.Generator var6 = null;
//     com.google.javascript.jscomp.SourceFile var7 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var6);
//     com.google.javascript.jscomp.JsAst var8 = new com.google.javascript.jscomp.JsAst(var7);
//     var4.setSourceFile(var7);
//     com.google.javascript.jscomp.JsAst var10 = new com.google.javascript.jscomp.JsAst(var7);
//     var7.setOriginalPath("string");
//     java.lang.String var14 = var7.getLine(10);
// 
//   }

  public void test37() {}
//   public void test37() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test37"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var1 = var0.newSubGraph();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var3 = var0.createDirectedGraphNode((java.lang.Object)100);
//     var0.clearNodeAnnotations();
//     com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.Collection var9 = var8.getNodes();
//     java.util.List var10 = var8.getEdges();
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     var14.setType(10);
//     com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var10, var14, 1, 100);
//     var5.setReplaceStringsConfiguration("hi!", var10);
//     java.util.Map var21 = var5.getDefineReplacements();
//     var5.setDefineToDoubleLiteral("goog.abstractMethod", 0.0d);
//     com.google.javascript.jscomp.CodingConvention var25 = null;
//     var5.setCodingConvention(var25);
//     com.google.javascript.jscomp.graph.GraphNode var27 = var0.createNode((java.lang.Object)var25);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var29 = var28.newSubGraph();
//     var28.pushNodeAnnotations();
//     com.google.javascript.jscomp.graph.SubGraph var31 = var28.newSubGraph();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var32 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var33 = var32.newSubGraph();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var35 = var32.createDirectedGraphNode((java.lang.Object)100);
//     java.util.List var36 = var32.getGraphvizNodes();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var37 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var38 = var37.newSubGraph();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var39 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var40 = var39.newSubGraph();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var42 = var39.createDirectedGraphNode((java.lang.Object)100);
//     java.util.List var43 = var37.getDirectedPredNodes(var42);
//     java.util.List var44 = var32.getDirectedPredNodes(var42);
//     java.util.List var45 = var28.getDirectedPredNodes(var42);
//     java.util.List var46 = var0.getDirectedPredNodes(var42);
//     com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var55 = var50.clonePropsFrom(var54);
//     var55.putProp((-1), (java.lang.Object)10.0d);
//     com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var67 = var62.clonePropsFrom(var66);
//     com.google.javascript.rhino.Node var68 = var55.copyInformationFrom(var67);
//     boolean var69 = var67.hasOneChild();
//     com.google.javascript.rhino.Context var70 = null;
//     com.google.javascript.rhino.Context var71 = com.google.javascript.rhino.Context.enter(var70);
//     var71.setCompileFunctionsWithDynamicScope(false);
//     com.google.javascript.jscomp.MessageFormatter var74 = null;
//     java.util.logging.Logger var75 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var76 = new com.google.javascript.jscomp.LoggerErrorManager(var74, var75);
//     com.google.javascript.jscomp.CheckLevel var77 = null;
//     com.google.javascript.rhino.Node var79 = null;
//     com.google.javascript.jscomp.CheckLevel var81 = null;
//     com.google.javascript.jscomp.DiagnosticType var83 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var81, "hi!");
//     java.lang.String[] var85 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var86 = com.google.javascript.jscomp.JSError.make("", var79, var83, var85);
//     var76.report(var77, var86);
//     var71.removeThreadLocal((java.lang.Object)var86);
//     int var89 = var86.getCharno();
//     com.google.javascript.jscomp.Compiler var90 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var91 = var90.getTopScope();
//     var90.disableThreads();
//     com.google.javascript.rhino.Node var93 = var90.getRoot();
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var94 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var95 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var90, var94);
//     com.google.javascript.jscomp.ErrorManager var96 = var90.getErrorManager();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       boolean var97 = var0.isConnected((java.lang.Object)var67, (java.lang.Object)var86, (java.lang.Object)var90);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var45);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var54);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var62);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var66);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var67);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var68);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var69 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var71);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var83);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var85);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var86);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var89 == (-1));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var91);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var93);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var96);
// 
//   }

  public void test38() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test38"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.VariableRenamingPolicy var1 = com.google.javascript.jscomp.VariableRenamingPolicy.valueOf("eol");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test39() {}
//   public void test39() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test39"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithEdgeAnnotations();
//     com.google.javascript.jscomp.SourceFile.Generator var2 = null;
//     com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var2);
//     com.google.javascript.jscomp.JsAst var4 = new com.google.javascript.jscomp.JsAst(var3);
//     java.lang.RuntimeException var5 = com.google.javascript.rhino.ScriptRuntime.notFunctionError((java.lang.Object)var0, (java.lang.Object)var3);
//     java.lang.Object var6 = null;
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var0.getDirectedGraphNode(var6);
//     com.google.javascript.jscomp.graph.SubGraph var8 = var0.newSubGraph();
//     var0.popEdgeAnnotations();
// 
//   }

  public void test40() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test40"); }


    com.google.javascript.rhino.EvaluatorException var3 = new com.google.javascript.rhino.EvaluatorException("LinkedGraph", "goog.exportSymbol", 40);

  }

  public void test41() {}
//   public void test41() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test41"); }
// 
// 
//     com.google.javascript.rhino.Context var0 = com.google.javascript.rhino.Context.enter();
//     var0.setInstructionObserverThreshold(0);
//     boolean var3 = var0.isGeneratingSource();
//     boolean var4 = var0.hasCompileFunctionsWithDynamicScope();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       com.google.javascript.rhino.Context var5 = com.google.javascript.rhino.Context.enter(var0);
//       fail("Expected exception of type java.lang.RuntimeException");
//     } catch (java.lang.RuntimeException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == false);
// 
//   }

  public void test42() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test42"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Context.reportWarning("@IMPLEMENTATION.VERSION@");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test43() {}
//   public void test43() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test43"); }
// 
// 
//     java.io.InputStream var2 = null;
//     com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromInputStream("ERROR\n    STRING \n", "hi!", var2);
// 
//   }

  public void test44() {}
//   public void test44() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test44"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var9 = var4.clonePropsFrom(var8);
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     var8.setJSType(var10);
//     var8.setOptionalArg(true);
//     java.lang.String var14 = var0.identifyTypeDefAssign(var8);
//     com.google.javascript.rhino.Node var16 = var8.getChildAtIndex(10);
// 
//   }

  public void test45() {}
//   public void test45() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test45"); }
// 
// 
//     com.google.javascript.rhino.Context var0 = com.google.javascript.rhino.Context.enter();
//     boolean var1 = var0.isGeneratingDebugChanged();
//     var0.setGeneratingSource(true);
//     int var4 = var0.getOptimizationLevel();
//     boolean var5 = var0.isGeneratingSource();
//     com.google.javascript.jscomp.MessageFormatter var7 = null;
//     java.util.logging.Logger var8 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var9 = new com.google.javascript.jscomp.LoggerErrorManager(var7, var8);
//     int var10 = var9.getWarningCount();
//     var0.putThreadLocal((java.lang.Object)(-1.0f), (java.lang.Object)var9);
//     com.google.javascript.jscomp.Compiler var12 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var9);
//     com.google.javascript.jscomp.SourceFile.Generator var14 = null;
//     com.google.javascript.jscomp.JSSourceFile var15 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var14);
//     var15.clearCachedSource();
//     com.google.javascript.jscomp.JSSourceFile var19 = com.google.javascript.jscomp.JSSourceFile.fromCode("eof", "LinkedGraph");
//     com.google.javascript.jscomp.CompilerOptions var20 = null;
//     com.google.javascript.jscomp.Result var21 = var12.compile(var15, var19, var20);
// 
//   }

  public void test46() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test46"); }


    boolean var1 = com.google.javascript.rhino.Context.isValidOptimizationLevel(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test47() {}
//   public void test47() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test47"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     com.google.javascript.jscomp.SourceMap var2 = var0.getSourceMap();
//     var0.reportCodeChange();
//     com.google.javascript.jscomp.SourceMap var4 = var0.getSourceMap();
//     com.google.javascript.jscomp.JSModule var5 = null;
//     java.lang.String var6 = var0.toSource(var5);
// 
//   }

  public void test48() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test48"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var1 = var0.newSubGraph();
    var0.pushNodeAnnotations();
    java.util.List var3 = var0.getGraphvizEdges();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var4 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var5 = var0.getDirectedPredNodes(var4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test49() {}
//   public void test49() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test49"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.SourceMap var2 = var1.getSourceMap();
//     com.google.javascript.jscomp.SourceMap var3 = var1.getSourceMap();
//     com.google.javascript.jscomp.SourceMap var4 = var1.getSourceMap();
//     int var5 = var1.getWarningCount();
// 
//   }

  public void test50() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test50"); }


    com.google.javascript.jscomp.SourceFile.Generator var1 = null;
    com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var1);
    com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var2, true);
    com.google.javascript.jscomp.SourceFile.Generator var6 = null;
    com.google.javascript.jscomp.SourceFile var7 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var6);
    com.google.javascript.jscomp.JsAst var8 = new com.google.javascript.jscomp.JsAst(var7);
    var4.setSourceFile(var7);
    com.google.javascript.jscomp.JSModule var10 = null;
    var4.setModule(var10);
    java.lang.String var12 = var4.getName();
    com.google.javascript.jscomp.CompilerInput var13 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var4);
    java.nio.charset.Charset var15 = null;
    com.google.javascript.jscomp.JSSourceFile var16 = com.google.javascript.jscomp.JSSourceFile.fromFile("goog.exportProperty", var15);
    com.google.javascript.jscomp.JsAst var17 = new com.google.javascript.jscomp.JsAst((com.google.javascript.jscomp.SourceFile)var16);
    com.google.javascript.jscomp.CompilerInput var18 = new com.google.javascript.jscomp.CompilerInput(var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var4.setSourceFile((com.google.javascript.jscomp.SourceFile)var16);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test51() {}
//   public void test51() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test51"); }
// 
// 
//     com.google.javascript.rhino.Context var0 = null;
//     com.google.javascript.rhino.Context var1 = com.google.javascript.rhino.Context.enter(var0);
//     var1.setCompileFunctionsWithDynamicScope(false);
//     java.lang.Object var4 = var1.getDebuggerContextData();
//     var1.setInstructionObserverThreshold(0);
//     com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
//     var7.setAcceptConstKeyword(true);
//     var7.setTweakToStringLiteral("goog.exportProperty", "goog.exportSymbol");
//     var7.setShadowVariables(true);
//     var7.setColorizeErrorOutput(true);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var18 = var17.newSubGraph();
//     var17.pushNodeAnnotations();
//     java.util.List var20 = var17.getGraphvizEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var21 = new com.google.javascript.jscomp.ComposeWarningsGuard(var20);
//     var7.setManageClosureDependencies(var20);
//     var7.setTweakToDoubleLiteral("hi!: hi!", 10.0d);
//     var7.enableExternExports(true);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var1.unseal((java.lang.Object)true);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
// 
//   }

  public void test52() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test52"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var1 = var0.newSubGraph();
    var0.pushNodeAnnotations();
    java.util.List var3 = var0.getGraphvizEdges();
    com.google.javascript.jscomp.CompilerOptions var4 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var7 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var8 = var7.getNodes();
    java.util.List var9 = var7.getEdges();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var13.setType(10);
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var9, var13, 1, 100);
    var4.setReplaceStringsConfiguration("hi!", var9);
    java.util.Map var20 = var4.getDefineReplacements();
    var4.setTweakToDoubleLiteral(": hi!", 100.0d);
    com.google.javascript.jscomp.CodingConvention var24 = var4.getCodingConvention();
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var25 = null;
    var4.setTweakProcessing(var25);
    java.util.Map var27 = var4.getDefineReplacements();
    com.google.javascript.jscomp.CompilerOptions var28 = new com.google.javascript.jscomp.CompilerOptions();
    var28.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var31 = var28.getTweakProcessing();
    var28.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.CompilerOptions var34 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var37 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var38 = var37.getNodes();
    java.util.List var39 = var37.getEdges();
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var43.setType(10);
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var39, var43, 1, 100);
    var34.setReplaceStringsConfiguration("hi!", var39);
    var28.setManageClosureDependencies(var39);
    var28.setRemoveClosureAsserts(true);
    var28.setGenerateExports(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var55 = var0.getEdges((java.lang.Object)var27, (java.lang.Object)var28);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test53() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test53"); }


    com.google.javascript.jscomp.SourceFile.Generator var1 = null;
    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!: hi!", var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test54() {}
//   public void test54() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test54"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var1 = var0.newSubGraph();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var3 = var0.createDirectedGraphNode((java.lang.Object)100);
//     java.util.List var4 = var0.getGraphvizNodes();
//     boolean var5 = var0.isDirected();
//     var0.popNodeAnnotations();
// 
//   }

  public void test55() {}
//   public void test55() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test55"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile.Generator var1 = null;
//     com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var1);
//     com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var2, true);
//     com.google.javascript.jscomp.SourceFile.Generator var6 = null;
//     com.google.javascript.jscomp.SourceFile var7 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var6);
//     com.google.javascript.jscomp.JsAst var8 = new com.google.javascript.jscomp.JsAst(var7);
//     var4.setSourceFile(var7);
//     com.google.javascript.jscomp.JSModule var10 = null;
//     var4.setModule(var10);
//     var4.clearAst();
//     java.lang.String var14 = var4.getLine(100);
// 
//   }

  public void test56() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test56"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.Node.newString(0, "hi!: hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test57() {}
//   public void test57() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test57"); }
// 
// 
//     com.google.javascript.rhino.Context var0 = com.google.javascript.rhino.Context.enter();
//     boolean var1 = var0.isGeneratingDebugChanged();
//     var0.setGeneratingSource(true);
//     int var4 = var0.getOptimizationLevel();
//     boolean var5 = var0.isGeneratingSource();
//     com.google.javascript.jscomp.MessageFormatter var7 = null;
//     java.util.logging.Logger var8 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var9 = new com.google.javascript.jscomp.LoggerErrorManager(var7, var8);
//     int var10 = var9.getWarningCount();
//     var0.putThreadLocal((java.lang.Object)(-1.0f), (java.lang.Object)var9);
//     com.google.javascript.jscomp.Compiler var12 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var9);
//     com.google.javascript.jscomp.CheckLevel var16 = null;
//     com.google.javascript.rhino.Node var18 = null;
//     com.google.javascript.jscomp.CheckLevel var20 = null;
//     com.google.javascript.jscomp.DiagnosticType var22 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var20, "hi!");
//     java.lang.String[] var24 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var25 = com.google.javascript.jscomp.JSError.make("", var18, var22, var24);
//     java.lang.String[] var27 = new java.lang.String[] { "goog.exportProperty"};
//     com.google.javascript.jscomp.JSError var28 = com.google.javascript.jscomp.JSError.make("eof", 1, 40, var16, var22, var27);
//     com.google.javascript.rhino.Node var30 = null;
//     com.google.javascript.jscomp.CheckLevel var32 = null;
//     com.google.javascript.jscomp.DiagnosticType var34 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var32, "hi!");
//     java.lang.String[] var36 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var37 = com.google.javascript.jscomp.JSError.make("", var30, var34, var36);
//     com.google.javascript.jscomp.JSError var38 = com.google.javascript.jscomp.JSError.make(var22, var36);
//     var12.report(var38);
// 
//   }

  public void test58() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test58"); }


    java.lang.String var1 = com.google.javascript.rhino.ScriptRuntime.escapeString("()");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "()"+ "'", var1.equals("()"));

  }

  public void test59() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test59"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    var0.clearNodeAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    var2.clearEdgeAnnotations();
    com.google.javascript.jscomp.Compiler var4 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var5 = var4.getTopScope();
    com.google.javascript.jscomp.SourceMap var6 = var4.getSourceMap();
    com.google.javascript.jscomp.JSSourceFile var9 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.SourceFile.Generator var11 = null;
    com.google.javascript.jscomp.JSSourceFile var12 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var11);
    com.google.javascript.jscomp.CompilerInput var14 = new com.google.javascript.jscomp.CompilerInput(var12, true);
    com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
    var15.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var18 = var15.getTweakProcessing();
    var15.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.Result var21 = var4.compile(var9, var12, var15);
    com.google.javascript.jscomp.LightweightMessageFormatter var22 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var4);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var23 = var2.createDirectedGraphNode((java.lang.Object)var22);
    java.util.List var24 = var0.getNeighborNodes(var23);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var25 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var26 = var0.getDirectedPredNodes(var25);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test60() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test60"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var1 = var0.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var3 = var0.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var4 = var0.getGraphvizNodes();
    boolean var5 = var0.isDirected();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var10 = var9.getType();
    int var11 = var9.getSourcePosition();
    com.google.javascript.rhino.Node var12 = var9.getLastSibling();
    com.google.javascript.rhino.Node var13 = var9.removeFirstChild();
    java.lang.String var17 = var9.toString(false, true, false);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var26 = var21.clonePropsFrom(var25);
    com.google.javascript.rhino.Node var28 = var25.getAncestor(0);
    boolean var29 = var25.isQualifiedName();
    com.google.javascript.rhino.JSDocInfo var30 = null;
    var25.setJSDocInfo(var30);
    var9.addChildToFront(var25);
    boolean var33 = var0.hasNode((java.lang.Object)var9);
    var0.clearEdgeAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var36 = var35.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var37 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var38 = var37.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var40 = var37.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var41 = var35.getDirectedPredNodes(var40);
    com.google.javascript.jscomp.JSModuleGraph var42 = new com.google.javascript.jscomp.JSModuleGraph(var41);
    com.google.javascript.jscomp.DiagnosticType var45 = com.google.javascript.jscomp.DiagnosticType.disabled("STRING ", "");
    com.google.javascript.jscomp.DiagnosticType var51 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
    com.google.javascript.jscomp.DiagnosticType var57 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
    java.lang.String[] var59 = new java.lang.String[] { "hi!: hi!"};
    com.google.javascript.jscomp.JSError var60 = com.google.javascript.jscomp.JSError.make("hi!. hi! at (unknown source) line (unknown line) : (unknown column)", 40, 0, var57, var59);
    com.google.javascript.jscomp.JSError var61 = com.google.javascript.jscomp.JSError.make("()", (-1), 10, var51, var59);
    com.google.javascript.jscomp.JSError var62 = com.google.javascript.jscomp.JSError.make(var45, var59);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var63 = var0.isConnected((java.lang.Object)var41, (java.lang.Object)var45);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "STRING "+ "'", var17.equals("STRING "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test61() {}
//   public void test61() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test61"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile.Generator var1 = null;
//     com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var1);
//     com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var2, true);
//     com.google.javascript.jscomp.SourceFile.Generator var6 = null;
//     com.google.javascript.jscomp.SourceFile var7 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var6);
//     com.google.javascript.jscomp.JsAst var8 = new com.google.javascript.jscomp.JsAst(var7);
//     var4.setSourceFile(var7);
//     com.google.javascript.jscomp.JSModule var10 = null;
//     var4.setModule(var10);
//     java.io.PrintStream var12 = null;
//     com.google.javascript.jscomp.Compiler var13 = new com.google.javascript.jscomp.Compiler(var12);
//     var4.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var13);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var15 = var13.getTypeRegistry();
//     com.google.javascript.jscomp.Compiler var16 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var17 = var16.getTopScope();
//     com.google.javascript.jscomp.SourceMap var18 = var16.getSourceMap();
//     var16.reportCodeChange();
//     com.google.javascript.jscomp.Compiler var20 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var21 = var20.getTopScope();
//     com.google.javascript.jscomp.SourceMap var22 = var20.getSourceMap();
//     com.google.javascript.jscomp.JSSourceFile var25 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
//     com.google.javascript.jscomp.SourceFile.Generator var27 = null;
//     com.google.javascript.jscomp.JSSourceFile var28 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var27);
//     com.google.javascript.jscomp.CompilerInput var30 = new com.google.javascript.jscomp.CompilerInput(var28, true);
//     com.google.javascript.jscomp.CompilerOptions var31 = new com.google.javascript.jscomp.CompilerOptions();
//     var31.setAcceptConstKeyword(true);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var34 = var31.getTweakProcessing();
//     var31.setRewriteNewDateGoogNow(false);
//     com.google.javascript.jscomp.Result var37 = var20.compile(var25, var28, var31);
//     com.google.javascript.rhino.Node var38 = var16.parse(var25);
//     com.google.javascript.jscomp.JSSourceFile var41 = com.google.javascript.jscomp.JSSourceFile.fromCode("null(null)", "goog.global");
//     com.google.javascript.jscomp.JSSourceFile[] var42 = new com.google.javascript.jscomp.JSSourceFile[] { var41};
//     java.nio.charset.Charset var44 = null;
//     com.google.javascript.jscomp.JSSourceFile var45 = com.google.javascript.jscomp.JSSourceFile.fromFile("goog.exportProperty", var44);
//     com.google.javascript.jscomp.JSSourceFile[] var46 = new com.google.javascript.jscomp.JSSourceFile[] { var45};
//     com.google.javascript.jscomp.CompilerOptions var47 = new com.google.javascript.jscomp.CompilerOptions();
//     var47.setAcceptConstKeyword(true);
//     java.util.Map var50 = var47.getTweakReplacements();
//     var47.setDefineToNumberLiteral("eof", 1);
//     com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var54 = null;
//     var47.setAliasTransformationHandler(var54);
//     var47.setGenerateExports(false);
//     com.google.javascript.jscomp.Result var58 = var16.compile(var42, var46, var47);
//     com.google.javascript.jscomp.JSModule var59 = null;
//     com.google.javascript.jscomp.JSModule[] var60 = new com.google.javascript.jscomp.JSModule[] { var59};
//     com.google.javascript.jscomp.CompilerOptions var61 = new com.google.javascript.jscomp.CompilerOptions();
//     var61.setAcceptConstKeyword(true);
//     var61.setTweakToStringLiteral("goog.exportProperty", "goog.exportSymbol");
//     var61.setShadowVariables(true);
//     var61.setColorizeErrorOutput(true);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var71 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var72 = var71.newSubGraph();
//     var71.pushNodeAnnotations();
//     java.util.List var74 = var71.getGraphvizEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var75 = new com.google.javascript.jscomp.ComposeWarningsGuard(var74);
//     var61.setManageClosureDependencies(var74);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var77 = var61.getTweakProcessing();
//     var13.init(var46, var60, var61);
// 
//   }

  public void test62() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test62"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var1 = var0.getNodes();
    var0.clearEdgeAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var4 = var3.newSubGraph();
    var3.pushNodeAnnotations();
    com.google.javascript.jscomp.graph.SubGraph var6 = var3.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var7 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var8 = var7.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var10 = var7.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var11 = var7.getGraphvizNodes();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var13 = var12.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var14 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var15 = var14.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var17 = var14.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var18 = var12.getDirectedPredNodes(var17);
    java.util.List var19 = var7.getDirectedPredNodes(var17);
    java.util.List var20 = var3.getDirectedPredNodes(var17);
    java.util.List var21 = var0.getNeighborNodes(var17);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var22 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.Collection var23 = var22.getNodes();
    var22.pushEdgeAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var25 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithEdgeAnnotations();
    com.google.javascript.jscomp.SourceFile.Generator var27 = null;
    com.google.javascript.jscomp.SourceFile var28 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var27);
    com.google.javascript.jscomp.JsAst var29 = new com.google.javascript.jscomp.JsAst(var28);
    java.lang.RuntimeException var30 = com.google.javascript.rhino.ScriptRuntime.notFunctionError((java.lang.Object)var25, (java.lang.Object)var28);
    java.lang.Object var31 = null;
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var32 = var25.getDirectedGraphNode(var31);
    com.google.javascript.jscomp.graph.SubGraph var33 = var25.newSubGraph();
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var42 = var37.clonePropsFrom(var41);
    com.google.javascript.rhino.jstype.JSType var43 = null;
    var41.setJSType(var43);
    var41.setOptionalArg(true);
    int var47 = var41.getLineno();
    boolean var48 = var41.isLocalResultCall();
    boolean var49 = var41.isQuotedString();
    var41.setOptionalArg(true);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var52 = var25.createDirectedGraphNode((java.lang.Object)var41);
    java.util.List var53 = var22.getNeighborNodes(var52);
    java.util.List var54 = var0.getNeighborNodes(var52);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var56 = var0.getDirectedPredNodes((java.lang.Object)"hi!: hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test63() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test63"); }


    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newNumber(10.0d, (-1), 40);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var5 = com.google.javascript.rhino.ScriptRuntime.getMessage1("ERROR\n    STRING \n", (java.lang.Object)10.0d);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test64() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test64"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var3 = var2.getNodes();
    java.util.List var4 = var2.getEdges();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var8.setType(10);
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var4, var8, 1, 100);
    var8.setVarArgs(false);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var20 = var19.getType();
    com.google.javascript.rhino.Node var21 = var19.cloneTree();
    var19.addSuppression("");
    com.google.javascript.rhino.EcmaError var30 = com.google.javascript.rhino.ScriptRuntime.constructError("", "hi!", "hi!", (-1), "hi!", 1);
    java.lang.RuntimeException var31 = com.google.javascript.rhino.ScriptRuntime.undefReadError((java.lang.Object)var19, (java.lang.Object)"hi!");
    com.google.javascript.rhino.Node var32 = var19.removeChildren();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var37 = var36.getType();
    com.google.javascript.rhino.Node var38 = var36.cloneTree();
    var36.addSuppression("");
    com.google.javascript.rhino.EcmaError var47 = com.google.javascript.rhino.ScriptRuntime.constructError("", "hi!", "hi!", (-1), "hi!", 1);
    java.lang.RuntimeException var48 = com.google.javascript.rhino.ScriptRuntime.undefReadError((java.lang.Object)var36, (java.lang.Object)"hi!");
    com.google.javascript.rhino.jstype.JSType var49 = var36.getJSType();
    var8.addChildAfter(var19, var36);
    var19.setQuotedString();
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var60 = var55.clonePropsFrom(var59);
    var60.putProp((-1), (java.lang.Object)10.0d);
    com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var72 = var67.clonePropsFrom(var71);
    com.google.javascript.rhino.Node var73 = var60.copyInformationFrom(var72);
    boolean var74 = var60.isLocalResultCall();
    com.google.javascript.rhino.Node var78 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var78.putBooleanProp(0, false);
    boolean var82 = var78.isQualifiedName();
    com.google.javascript.rhino.Node var83 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var86 = new com.google.javascript.rhino.Node(1, var19, var60, var78, var83, 10, 40);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);

  }

  public void test65() {}
//   public void test65() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test65"); }
// 
// 
//     com.google.javascript.rhino.Context var0 = null;
//     com.google.javascript.rhino.Context var1 = com.google.javascript.rhino.Context.enter(var0);
//     var1.setCompileFunctionsWithDynamicScope(false);
//     com.google.javascript.jscomp.MessageFormatter var4 = null;
//     java.util.logging.Logger var5 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var6 = new com.google.javascript.jscomp.LoggerErrorManager(var4, var5);
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     com.google.javascript.rhino.Node var9 = null;
//     com.google.javascript.jscomp.CheckLevel var11 = null;
//     com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var11, "hi!");
//     java.lang.String[] var15 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", var9, var13, var15);
//     var6.report(var7, var16);
//     var1.removeThreadLocal((java.lang.Object)var16);
//     int var19 = var1.getInstructionObserverThreshold();
//     var1.addActivationName("goog.exportProperty");
//     int var22 = var1.getLanguageVersion();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var23 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.Collection var24 = var23.getNodes();
//     com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var33 = var28.clonePropsFrom(var32);
//     com.google.javascript.rhino.jstype.JSType var34 = null;
//     var32.setJSType(var34);
//     java.lang.RuntimeException var36 = com.google.javascript.rhino.ScriptRuntime.undefWriteError((java.lang.Object)var1, (java.lang.Object)var23, (java.lang.Object)var34);
//     var1.addActivationName("hi!. hi! at hi!. hi! at (unknown source) line (unknown line) : (unknown column) line 40 : 0");
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var1.setInstructionObserverThreshold((-1));
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
// 
//   }

  public void test66() {}
//   public void test66() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test66"); }
// 
// 
//     java.nio.charset.Charset var1 = null;
//     com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromFile("goog.exportProperty", var1);
//     com.google.javascript.jscomp.JsAst var3 = new com.google.javascript.jscomp.JsAst((com.google.javascript.jscomp.SourceFile)var2);
//     com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var2);
//     java.util.Collection var5 = var4.getRequires();
// 
//   }

  public void test67() {}
//   public void test67() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test67"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticGroup[] var0 = null;
//     com.google.javascript.jscomp.DiagnosticGroup var1 = new com.google.javascript.jscomp.DiagnosticGroup(var0);
// 
//   }

  public void test68() {}
//   public void test68() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test68"); }
// 
// 
//     com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var2);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     com.google.javascript.jscomp.JSModule var5 = var3.getModule();
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var7 = var6.getTopScope();
//     var6.disableThreads();
//     var6.disableThreads();
//     com.google.javascript.jscomp.MessageFormatter var10 = null;
//     java.util.logging.Logger var11 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var12 = new com.google.javascript.jscomp.LoggerErrorManager(var10, var11);
//     com.google.javascript.jscomp.CheckLevel var13 = null;
//     com.google.javascript.rhino.Node var15 = null;
//     com.google.javascript.jscomp.CheckLevel var17 = null;
//     com.google.javascript.jscomp.DiagnosticType var19 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var17, "hi!");
//     java.lang.String[] var21 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var22 = com.google.javascript.jscomp.JSError.make("", var15, var19, var21);
//     var12.report(var13, var22);
//     var6.setErrorManager((com.google.javascript.jscomp.ErrorManager)var12);
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var25 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var26 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var6, var25);
//     com.google.javascript.jscomp.NodeTraversal.Callback var27 = null;
//     com.google.javascript.jscomp.NodeTraversal var28 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var6, var27);
//     com.google.javascript.rhino.Node var29 = var3.getAstRoot((com.google.javascript.jscomp.AbstractCompiler)var6);
// 
//   }

  public void test69() {}
//   public void test69() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test69"); }
// 
// 
//     com.google.javascript.rhino.Context var0 = null;
//     com.google.javascript.rhino.Context var1 = com.google.javascript.rhino.Context.enter(var0);
//     var1.setCompileFunctionsWithDynamicScope(false);
//     com.google.javascript.jscomp.MessageFormatter var4 = null;
//     java.util.logging.Logger var5 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var6 = new com.google.javascript.jscomp.LoggerErrorManager(var4, var5);
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     com.google.javascript.rhino.Node var9 = null;
//     com.google.javascript.jscomp.CheckLevel var11 = null;
//     com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var11, "hi!");
//     java.lang.String[] var15 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", var9, var13, var15);
//     var6.report(var7, var16);
//     var1.removeThreadLocal((java.lang.Object)var16);
//     int var19 = var1.getInstructionObserverThreshold();
//     var1.addActivationName("goog.exportProperty");
//     int var22 = var1.getLanguageVersion();
//     java.beans.PropertyChangeListener var23 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var1.removePropertyChangeListener(var23);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == 0);
// 
//   }

  public void test70() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test70"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newNumber(100.0d, 40, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test71() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test71"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var8 = var3.clonePropsFrom(var7);
    var8.putProp((-1), (java.lang.Object)10.0d);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var20 = var15.clonePropsFrom(var19);
    com.google.javascript.rhino.Node var21 = var8.copyInformationFrom(var20);
    int var22 = var8.getLineno();
    com.google.javascript.rhino.Node var23 = var8.getLastChild();
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var8.setJSType(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test72() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test72"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
    com.google.javascript.jscomp.SourceMap var2 = var0.getSourceMap();
    com.google.javascript.jscomp.JSSourceFile var5 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.SourceFile.Generator var7 = null;
    com.google.javascript.jscomp.JSSourceFile var8 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var7);
    com.google.javascript.jscomp.CompilerInput var10 = new com.google.javascript.jscomp.CompilerInput(var8, true);
    com.google.javascript.jscomp.CompilerOptions var11 = new com.google.javascript.jscomp.CompilerOptions();
    var11.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var14 = var11.getTweakProcessing();
    var11.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.Result var17 = var0.compile(var5, var8, var11);
    com.google.javascript.jscomp.CompilerOptions var18 = new com.google.javascript.jscomp.CompilerOptions();
    var18.setAcceptConstKeyword(true);
    java.util.Map var21 = var18.getTweakReplacements();
    var0.initOptions(var18);
    boolean var23 = var18.shouldColorizeErrorOutput();
    var18.setDefineToStringLiteral("STRING ", "goog.exportSymbol");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test73() {}
//   public void test73() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test73"); }
// 
// 
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var5 = var4.getType();
//     int var6 = var4.getChildCount();
//     com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node((-1), var4);
//     com.google.javascript.rhino.Node.SideEffectFlags var8 = null;
//     var7.setSideEffectFlags(var8);
// 
//   }

  public void test74() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test74"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    int var3 = var2.getWarningCount();
    com.google.javascript.jscomp.JSError[] var4 = var2.getWarnings();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test75() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test75"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    var0.clearNodeAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    var2.clearEdgeAnnotations();
    com.google.javascript.jscomp.Compiler var4 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var5 = var4.getTopScope();
    com.google.javascript.jscomp.SourceMap var6 = var4.getSourceMap();
    com.google.javascript.jscomp.JSSourceFile var9 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.SourceFile.Generator var11 = null;
    com.google.javascript.jscomp.JSSourceFile var12 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var11);
    com.google.javascript.jscomp.CompilerInput var14 = new com.google.javascript.jscomp.CompilerInput(var12, true);
    com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
    var15.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var18 = var15.getTweakProcessing();
    var15.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.Result var21 = var4.compile(var9, var12, var15);
    com.google.javascript.jscomp.LightweightMessageFormatter var22 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var4);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var23 = var2.createDirectedGraphNode((java.lang.Object)var22);
    java.util.List var24 = var0.getNeighborNodes(var23);
    com.google.javascript.jscomp.Compiler var25 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var26 = var25.getTopScope();
    com.google.javascript.jscomp.SourceMap var27 = var25.getSourceMap();
    com.google.javascript.jscomp.JSSourceFile var30 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.SourceFile.Generator var32 = null;
    com.google.javascript.jscomp.JSSourceFile var33 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var32);
    com.google.javascript.jscomp.CompilerInput var35 = new com.google.javascript.jscomp.CompilerInput(var33, true);
    com.google.javascript.jscomp.CompilerOptions var36 = new com.google.javascript.jscomp.CompilerOptions();
    var36.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var39 = var36.getTweakProcessing();
    var36.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.Result var42 = var25.compile(var30, var33, var36);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var43 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var44 = var43.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var45 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var46 = var45.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var48 = var45.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var49 = var43.getDirectedPredNodes(var48);
    com.google.javascript.jscomp.JSModuleGraph var50 = new com.google.javascript.jscomp.JSModuleGraph(var49);
    com.google.javascript.jscomp.NodeTraversal.Callback var51 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var25, var49, var51);
    com.google.javascript.jscomp.ClosureCodingConvention var53 = new com.google.javascript.jscomp.ClosureCodingConvention();
    java.lang.String var54 = var53.getGlobalObject();
    java.lang.String var55 = var53.getGlobalObject();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var56 = var0.isConnectedInDirection((java.lang.Object)var51, (java.lang.Object)var55);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "goog.global"+ "'", var54.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "goog.global"+ "'", var55.equals("goog.global"));

  }

  public void test76() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test76"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var4 = var3.getNodes();
    java.util.List var5 = var3.getEdges();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var9.setType(10);
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var5, var9, 1, 100);
    com.google.javascript.jscomp.NodeTraversal.Callback var15 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var5, var15);
    com.google.javascript.jscomp.SourceFile.Generator var18 = null;
    com.google.javascript.jscomp.JSSourceFile var19 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var18);
    com.google.javascript.jscomp.CompilerInput var21 = new com.google.javascript.jscomp.CompilerInput(var19, true);
    com.google.javascript.jscomp.CompilerInput var23 = new com.google.javascript.jscomp.CompilerInput(var19, true);
    com.google.javascript.jscomp.JSSourceFile[] var24 = new com.google.javascript.jscomp.JSSourceFile[] { var19};
    com.google.javascript.jscomp.Compiler var25 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var26 = var25.getTopScope();
    com.google.javascript.jscomp.SourceMap var27 = var25.getSourceMap();
    var25.reportCodeChange();
    com.google.javascript.jscomp.Compiler var29 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var30 = var29.getTopScope();
    com.google.javascript.jscomp.SourceMap var31 = var29.getSourceMap();
    com.google.javascript.jscomp.JSSourceFile var34 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.SourceFile.Generator var36 = null;
    com.google.javascript.jscomp.JSSourceFile var37 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var36);
    com.google.javascript.jscomp.CompilerInput var39 = new com.google.javascript.jscomp.CompilerInput(var37, true);
    com.google.javascript.jscomp.CompilerOptions var40 = new com.google.javascript.jscomp.CompilerOptions();
    var40.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var43 = var40.getTweakProcessing();
    var40.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.Result var46 = var29.compile(var34, var37, var40);
    com.google.javascript.rhino.Node var47 = var25.parse(var34);
    com.google.javascript.jscomp.JSSourceFile var50 = com.google.javascript.jscomp.JSSourceFile.fromCode("null(null)", "goog.global");
    com.google.javascript.jscomp.JSSourceFile[] var51 = new com.google.javascript.jscomp.JSSourceFile[] { var50};
    java.nio.charset.Charset var53 = null;
    com.google.javascript.jscomp.JSSourceFile var54 = com.google.javascript.jscomp.JSSourceFile.fromFile("goog.exportProperty", var53);
    com.google.javascript.jscomp.JSSourceFile[] var55 = new com.google.javascript.jscomp.JSSourceFile[] { var54};
    com.google.javascript.jscomp.CompilerOptions var56 = new com.google.javascript.jscomp.CompilerOptions();
    var56.setAcceptConstKeyword(true);
    java.util.Map var59 = var56.getTweakReplacements();
    var56.setDefineToNumberLiteral("eof", 1);
    com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var63 = null;
    var56.setAliasTransformationHandler(var63);
    var56.setGenerateExports(false);
    com.google.javascript.jscomp.Result var67 = var25.compile(var51, var55, var56);
    com.google.javascript.jscomp.CompilerOptions var68 = new com.google.javascript.jscomp.CompilerOptions();
    var68.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var71 = var68.getTweakProcessing();
    var68.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var74 = var68.getTweakProcessing();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.Result var75 = var1.compile(var24, var51, var68);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test77() {}
//   public void test77() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test77"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.SourceMap var2 = var1.getSourceMap();
//     com.google.javascript.jscomp.CompilerOptions var3 = new com.google.javascript.jscomp.CompilerOptions();
//     var3.setAcceptConstKeyword(true);
//     var3.setTweakToStringLiteral("goog.exportProperty", "goog.exportSymbol");
//     var3.setShadowVariables(true);
//     var3.setColorizeErrorOutput(true);
//     var3.setDefineToStringLiteral("com.google.javascript.rhino.EcmaError: TypeError: Cannot set property \"hi!: hi!\" of 0 to \"40\"", "");
//     var1.initOptions(var3);
//     com.google.javascript.jscomp.LightweightMessageFormatter var17 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     com.google.javascript.jscomp.Region var20 = var1.getSourceRegion("", 100);
// 
//   }

  public void test78() {}
//   public void test78() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test78"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var1 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.Collection var2 = var1.getNodes();
//     java.util.List var3 = var1.getEdges();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     var7.setType(10);
//     com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var3, var7, 1, 100);
//     com.google.javascript.jscomp.ComposeWarningsGuard var13 = new com.google.javascript.jscomp.ComposeWarningsGuard(var3);
//     com.google.javascript.rhino.Node var16 = null;
//     com.google.javascript.jscomp.CheckLevel var18 = null;
//     com.google.javascript.jscomp.DiagnosticType var20 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var18, "hi!");
//     java.lang.String[] var22 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var23 = com.google.javascript.jscomp.JSError.make("", var16, var20, var22);
//     java.lang.RuntimeException var25 = com.google.javascript.rhino.ScriptRuntime.undefWriteError((java.lang.Object)(short)0, (java.lang.Object)var20, (java.lang.Object)40);
//     com.google.javascript.jscomp.DiagnosticType[] var26 = new com.google.javascript.jscomp.DiagnosticType[] { var20};
//     com.google.javascript.jscomp.DiagnosticGroup var27 = new com.google.javascript.jscomp.DiagnosticGroup(var26);
//     com.google.javascript.jscomp.DiagnosticGroup[] var28 = new com.google.javascript.jscomp.DiagnosticGroup[] { var27};
//     com.google.javascript.jscomp.DiagnosticGroup var29 = new com.google.javascript.jscomp.DiagnosticGroup(var28);
//     boolean var30 = var13.enables(var29);
//     java.lang.String var31 = var13.toString();
//     com.google.javascript.jscomp.DiagnosticGroup var32 = null;
//     boolean var33 = var13.disables(var32);
// 
//   }

  public void test79() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test79"); }


    com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var2);
    com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
    com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var6 = var5.getTopScope();
    com.google.javascript.jscomp.SourceMap var7 = var5.getSourceMap();
    var5.reportCodeChange();
    var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var5);
    com.google.javascript.jscomp.MessageFormatter var10 = null;
    java.util.logging.Logger var11 = null;
    com.google.javascript.jscomp.LoggerErrorManager var12 = new com.google.javascript.jscomp.LoggerErrorManager(var10, var11);
    int var13 = var12.getErrorCount();
    var3.setErrorManager((com.google.javascript.jscomp.ErrorManager)var12);
    java.nio.charset.Charset var16 = null;
    com.google.javascript.jscomp.SourceFile var17 = com.google.javascript.jscomp.SourceFile.fromFile(": hi!", var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.setSourceFile(var17);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test80() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test80"); }


    boolean var1 = com.google.javascript.rhino.Context.isValidOptimizationLevel(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test81() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test81"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var8 = var3.clonePropsFrom(var7);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var7.setJSType(var9);
    var7.setOptionalArg(true);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var17.setType(10);
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(10);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var30 = var25.clonePropsFrom(var29);
    var30.putProp((-1), (java.lang.Object)10.0d);
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var42 = var37.clonePropsFrom(var41);
    com.google.javascript.rhino.Node var43 = var30.copyInformationFrom(var42);
    boolean var44 = var42.hasOneChild();
    com.google.javascript.rhino.Node var46 = null;
    com.google.javascript.jscomp.CheckLevel var48 = null;
    com.google.javascript.jscomp.DiagnosticType var50 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var48, "hi!");
    java.lang.String[] var52 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var53 = com.google.javascript.jscomp.JSError.make("", var46, var50, var52);
    com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var58 = var57.getType();
    com.google.javascript.rhino.Node var59 = var57.cloneTree();
    boolean var60 = var53.equals((java.lang.Object)var57);
    com.google.javascript.rhino.Node var63 = new com.google.javascript.rhino.Node((-1), var17, var21, var42, var57, 0, 1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.addChildrenToFront(var42);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test82() {}
//   public void test82() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test82"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     var0.disableThreads();
//     var0.disableThreads();
//     com.google.javascript.jscomp.MessageFormatter var4 = null;
//     java.util.logging.Logger var5 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var6 = new com.google.javascript.jscomp.LoggerErrorManager(var4, var5);
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     com.google.javascript.rhino.Node var9 = null;
//     com.google.javascript.jscomp.CheckLevel var11 = null;
//     com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var11, "hi!");
//     java.lang.String[] var15 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", var9, var13, var15);
//     var6.report(var7, var16);
//     var0.setErrorManager((com.google.javascript.jscomp.ErrorManager)var6);
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var19 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var20 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var19);
//     com.google.javascript.jscomp.ErrorManager var21 = var0.getErrorManager();
//     com.google.javascript.jscomp.CompilerInput var23 = var0.getInput("com.google.javascript.rhino.EcmaError: TypeError: Cannot set property \"hi!: hi!\" of 0 to \"40\"");
// 
//   }

  public void test83() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test83"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("eof");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test84() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test84"); }


    com.google.javascript.rhino.EcmaError var6 = com.google.javascript.rhino.ScriptRuntime.constructError("", "hi!", "hi!", (-1), "hi!", 1);
    java.lang.String var7 = var6.details();
    int var8 = var6.lineNumber();
    int var9 = var6.lineNumber();
    int var10 = var6.getLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ": hi!"+ "'", var7.equals(": hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);

  }

  public void test85() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test85"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var8 = var3.clonePropsFrom(var7);
    boolean var9 = var3.isSyntheticBlock();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test86() {}
//   public void test86() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test86"); }
// 
// 
//     com.google.javascript.rhino.Context var0 = null;
//     com.google.javascript.rhino.Context var1 = com.google.javascript.rhino.Context.enter(var0);
//     var1.setCompileFunctionsWithDynamicScope(false);
//     com.google.javascript.jscomp.MessageFormatter var4 = null;
//     java.util.logging.Logger var5 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var6 = new com.google.javascript.jscomp.LoggerErrorManager(var4, var5);
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     com.google.javascript.rhino.Node var9 = null;
//     com.google.javascript.jscomp.CheckLevel var11 = null;
//     com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var11, "hi!");
//     java.lang.String[] var15 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", var9, var13, var15);
//     var6.report(var7, var16);
//     var1.removeThreadLocal((java.lang.Object)var16);
//     int var19 = var1.getInstructionObserverThreshold();
//     var1.addActivationName("goog.exportProperty");
//     int var22 = var1.getLanguageVersion();
//     int var23 = var1.getLanguageVersion();
//     var1.setCompileFunctionsWithDynamicScope(true);
//     com.google.javascript.jscomp.ClosureCodingConvention var26 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var28 = var26.isPrivate("");
//     com.google.javascript.rhino.jstype.FunctionType var29 = null;
//     com.google.javascript.rhino.jstype.FunctionType var30 = null;
//     com.google.javascript.jscomp.CodingConvention.SubclassType var31 = null;
//     var26.applySubclassRelationship(var29, var30, var31);
//     java.lang.String var33 = var26.getExportSymbolFunction();
//     java.lang.RuntimeException var34 = com.google.javascript.rhino.ScriptRuntime.notFunctionError((java.lang.Object)var1, (java.lang.Object)var33);
//     com.google.javascript.jscomp.ClosureCodingConvention var35 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     java.lang.String var36 = var35.getGlobalObject();
//     java.lang.String var37 = var35.getExportPropertyFunction();
//     java.lang.String var38 = var35.getDelegateSuperclassName();
//     com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.Node.newString(": hi!", 100, 10);
//     com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     var47.setType(10);
//     com.google.javascript.rhino.Node var51 = new com.google.javascript.rhino.Node(10);
//     com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var60 = var55.clonePropsFrom(var59);
//     var60.putProp((-1), (java.lang.Object)10.0d);
//     com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var72 = var67.clonePropsFrom(var71);
//     com.google.javascript.rhino.Node var73 = var60.copyInformationFrom(var72);
//     boolean var74 = var72.hasOneChild();
//     com.google.javascript.rhino.Node var76 = null;
//     com.google.javascript.jscomp.CheckLevel var78 = null;
//     com.google.javascript.jscomp.DiagnosticType var80 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var78, "hi!");
//     java.lang.String[] var82 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var83 = com.google.javascript.jscomp.JSError.make("", var76, var80, var82);
//     com.google.javascript.rhino.Node var87 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var88 = var87.getType();
//     com.google.javascript.rhino.Node var89 = var87.cloneTree();
//     boolean var90 = var83.equals((java.lang.Object)var87);
//     com.google.javascript.rhino.Node var93 = new com.google.javascript.rhino.Node((-1), var47, var51, var72, var87, 0, 1);
//     java.lang.String var94 = var35.extractClassNameIfProvide(var42, var87);
//     boolean var96 = var35.isSuperClassReference("OFF");
//     var1.removeThreadLocal((java.lang.Object)var96);
//     java.beans.PropertyChangeListener var98 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var1.removePropertyChangeListener(var98);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var28 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var33 + "' != '" + "goog.exportSymbol"+ "'", var33.equals("goog.exportSymbol"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var36 + "' != '" + "goog.global"+ "'", var36.equals("goog.global"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var37 + "' != '" + "goog.exportProperty"+ "'", var37.equals("goog.exportProperty"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var59);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var60);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var67);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var71);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var72);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var73);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var74 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var80);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var82);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var83);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var87);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var88 == 40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var89);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var90 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var94);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var96 == false);
// 
//   }

  public void test87() {}
//   public void test87() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test87"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile.Generator var1 = null;
//     com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var1);
//     com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var2, true);
//     com.google.javascript.jscomp.SourceFile.Generator var6 = null;
//     com.google.javascript.jscomp.SourceFile var7 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var6);
//     com.google.javascript.jscomp.JsAst var8 = new com.google.javascript.jscomp.JsAst(var7);
//     var4.setSourceFile(var7);
//     com.google.javascript.jscomp.CompilerInput var12 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var4, "", true);
//     java.util.Collection var13 = var12.getRequires();
// 
//   }

  public void test88() {}
//   public void test88() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test88"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     var0.disableThreads();
//     var0.disableThreads();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var5 = var4.newSubGraph();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var4.createDirectedGraphNode((java.lang.Object)100);
//     java.util.List var8 = var4.getGraphvizNodes();
//     var4.clearNodeAnnotations();
//     var4.pushNodeAnnotations();
//     java.util.List var11 = var4.getGraphvizEdges();
//     java.util.List var12 = null;
//     com.google.javascript.jscomp.Compiler var13 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var14 = var13.getTopScope();
//     com.google.javascript.jscomp.SourceMap var15 = var13.getSourceMap();
//     com.google.javascript.jscomp.JSSourceFile var18 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
//     com.google.javascript.jscomp.SourceFile.Generator var20 = null;
//     com.google.javascript.jscomp.JSSourceFile var21 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var20);
//     com.google.javascript.jscomp.CompilerInput var23 = new com.google.javascript.jscomp.CompilerInput(var21, true);
//     com.google.javascript.jscomp.CompilerOptions var24 = new com.google.javascript.jscomp.CompilerOptions();
//     var24.setAcceptConstKeyword(true);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var27 = var24.getTweakProcessing();
//     var24.setRewriteNewDateGoogNow(false);
//     com.google.javascript.jscomp.Result var30 = var13.compile(var18, var21, var24);
//     com.google.javascript.jscomp.DiagnosticGroup var31 = null;
//     com.google.javascript.jscomp.CheckLevel var32 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var33 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var31, var32);
//     java.lang.String var34 = var33.toString();
//     var24.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var33);
//     var24.enableRuntimeTypeCheck("");
//     com.google.javascript.jscomp.CompilerOptions var38 = new com.google.javascript.jscomp.CompilerOptions();
//     var38.setAcceptConstKeyword(true);
//     com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var41 = null;
//     var38.setAliasTransformationHandler(var41);
//     var38.setCollapsePropertiesOnExternTypes(false);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var45 = var38.getTweakProcessing();
//     var24.setTweakProcessing(var45);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var47 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var48 = var47.newSubGraph();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var50 = var47.createDirectedGraphNode((java.lang.Object)100);
//     java.util.List var51 = var47.getGraphvizNodes();
//     boolean var52 = var47.isDirected();
//     java.util.List var53 = var47.getGraphvizEdges();
//     var24.setManageClosureDependencies(var53);
//     var24.setRemoveClosureAsserts(true);
//     var0.init(var11, var12, var24);
// 
//   }

  public void test89() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test89"); }


    com.google.javascript.rhino.EcmaError var6 = com.google.javascript.rhino.ScriptRuntime.constructError("", "hi!", "hi!", (-1), "hi!", 1);
    java.lang.String var7 = var6.toString();
    var6.initLineNumber(100);
    java.lang.String var10 = var6.details();
    java.lang.String var11 = var6.getName();
    java.lang.String var12 = var6.lineSource();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.initLineSource("com.google.javascript.rhino.EcmaError: : hi!: goog.global");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "com.google.javascript.rhino.EcmaError: : hi!"+ "'", var7.equals("com.google.javascript.rhino.EcmaError: : hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ": hi!"+ "'", var10.equals(": hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));

  }

  public void test90() {}
//   public void test90() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test90"); }
// 
// 
//     com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var2);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var6 = var5.getTopScope();
//     com.google.javascript.jscomp.SourceMap var7 = var5.getSourceMap();
//     var5.reportCodeChange();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var5);
//     com.google.javascript.jscomp.CompilerOptions var10 = null;
//     var5.initOptions(var10);
// 
//   }

  public void test91() {}
//   public void test91() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test91"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var2 = var0.isPrivate("");
//     java.lang.String var3 = var0.getExportSymbolFunction();
//     boolean var5 = var0.isSuperClassReference("");
//     java.util.Collection var6 = var0.getAssertionFunctions();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     var10.setType(10);
//     boolean var13 = var10.isLocalResultCall();
//     com.google.javascript.jscomp.CodingConvention.DelegateRelationship var14 = var0.getDelegateRelationship(var10);
//     com.google.javascript.rhino.Node var15 = null;
//     java.lang.String var16 = var0.identifyTypeDefAssign(var15);
// 
//   }

  public void test92() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test92"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
    com.google.javascript.jscomp.SourceMap var2 = var0.getSourceMap();
    com.google.javascript.jscomp.JSSourceFile var5 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.SourceFile.Generator var7 = null;
    com.google.javascript.jscomp.JSSourceFile var8 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var7);
    com.google.javascript.jscomp.CompilerInput var10 = new com.google.javascript.jscomp.CompilerInput(var8, true);
    com.google.javascript.jscomp.CompilerOptions var11 = new com.google.javascript.jscomp.CompilerOptions();
    var11.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var14 = var11.getTweakProcessing();
    var11.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.Result var17 = var0.compile(var5, var8, var11);
    com.google.javascript.jscomp.DiagnosticGroup var18 = null;
    com.google.javascript.jscomp.CheckLevel var19 = null;
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var20 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var18, var19);
    java.lang.String var21 = var20.toString();
    var11.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var20);
    var11.enableRuntimeTypeCheck("");
    var11.setRewriteNewDateGoogNow(true);
    var11.setRemoveClosureAsserts(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "null(null)"+ "'", var21.equals("null(null)"));

  }

  public void test93() {}
//   public void test93() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test93"); }
// 
// 
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       com.google.javascript.rhino.EvaluatorException var1 = com.google.javascript.rhino.Context.reportRuntimeError("");
//       fail("Expected exception of type com.google.javascript.rhino.EvaluatorException");
//     } catch (com.google.javascript.rhino.EvaluatorException e) {
//       // Expected exception.
//     }
// 
//   }

  public void test94() {}
//   public void test94() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test94"); }
// 
// 
//     com.google.javascript.rhino.Context var0 = com.google.javascript.rhino.Context.enter();
//     var0.setInstructionObserverThreshold(0);
//     boolean var3 = var0.isGeneratingSource();
//     int var4 = var0.getInstructionObserverThreshold();
//     java.beans.PropertyChangeListener var5 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var0.removePropertyChangeListener(var5);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == 0);
// 
//   }

  public void test95() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test95"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.JSSourceFile var4 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.rhino.Node var5 = var1.parse(var4);
    var1.disableThreads();
    com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
    var7.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var10 = var7.getTweakProcessing();
    var7.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var16 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var17 = var16.getNodes();
    java.util.List var18 = var16.getEdges();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var22.setType(10);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var18, var22, 1, 100);
    var13.setReplaceStringsConfiguration("hi!", var18);
    var7.setManageClosureDependencies(var18);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var31 = var30.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var33 = var30.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var34 = var30.getGraphvizNodes();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var36 = var35.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var37 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var38 = var37.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var40 = var37.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var41 = var35.getDirectedPredNodes(var40);
    java.util.List var42 = var30.getDirectedPredNodes(var40);
    com.google.javascript.jscomp.CompilerOptions var43 = new com.google.javascript.jscomp.CompilerOptions();
    var43.disableRuntimeTypeCheck();
    com.google.javascript.jscomp.Result var45 = var1.compile(var18, var42, var43);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.processDefines();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test96() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test96"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var1 = var0.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var3 = var0.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var4 = var0.getGraphvizNodes();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var6 = var5.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var7 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var8 = var7.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var10 = var7.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var11 = var5.getDirectedPredNodes(var10);
    java.util.List var12 = var0.getDirectedPredNodes(var10);
    java.lang.Object var13 = new java.lang.Object();
    java.lang.String var14 = com.google.javascript.rhino.ScriptRuntime.toString(var13);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var15 = var0.createDirectedGraphNode((java.lang.Object)var14);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var21 = var20.getType();
    java.lang.String var22 = var20.getQualifiedName();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var31 = var26.clonePropsFrom(var30);
    com.google.javascript.rhino.Node var32 = var20.clonePropsFrom(var30);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var41 = var36.clonePropsFrom(var40);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    var41.setJSType(var42);
    java.util.Collection var44 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var41);
    boolean var45 = var41.isSyntheticBlock();
    com.google.javascript.rhino.Node var48 = new com.google.javascript.rhino.Node(100, var30, var41, 1, (-1));
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var49 = var0.createDirectedGraphNode((java.lang.Object)var41);
    var41.putBooleanProp(1, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var54 = var41.getExistingIntProp(100);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test97() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test97"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
    com.google.javascript.jscomp.SourceMap var2 = var0.getSourceMap();
    com.google.javascript.jscomp.JSSourceFile var5 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.SourceFile.Generator var7 = null;
    com.google.javascript.jscomp.JSSourceFile var8 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var7);
    com.google.javascript.jscomp.CompilerInput var10 = new com.google.javascript.jscomp.CompilerInput(var8, true);
    com.google.javascript.jscomp.CompilerOptions var11 = new com.google.javascript.jscomp.CompilerOptions();
    var11.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var14 = var11.getTweakProcessing();
    var11.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.Result var17 = var0.compile(var5, var8, var11);
    var11.setRemoveAbstractMethods(false);
    var11.setTweakToBooleanLiteral("goog.exportProperty", false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var23 = var11.getTweakProcessing();
    com.google.javascript.jscomp.SourceFile var25 = com.google.javascript.jscomp.SourceFile.fromFile("com.google.javascript.rhino.EcmaError: : hi!: goog.global");
    boolean var26 = var23.equals((java.lang.Object)"com.google.javascript.rhino.EcmaError: : hi!: goog.global");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test98() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test98"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithEdgeAnnotations();
    com.google.javascript.jscomp.SourceAst var1 = null;
    com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var1, "hi!", false);
    com.google.javascript.jscomp.JSModule var5 = null;
    var4.setModule(var5);
    com.google.javascript.jscomp.Compiler var7 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var8 = var7.getTopScope();
    var7.disableThreads();
    var7.disableThreads();
    var4.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var12 = var0.getInEdges((java.lang.Object)var4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test99() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test99"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var1 = var0.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var3 = var0.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var4 = var0.getGraphvizNodes();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var6 = var5.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var7 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var8 = var7.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var10 = var7.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var11 = var5.getDirectedPredNodes(var10);
    java.util.List var12 = var0.getDirectedPredNodes(var10);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var22 = var17.clonePropsFrom(var21);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var22.setJSType(var23);
    java.util.Collection var25 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var22);
    boolean var26 = var22.isSyntheticBlock();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var31 = var30.getType();
    int var32 = var30.getSourcePosition();
    com.google.javascript.rhino.Node var33 = var30.getLastSibling();
    boolean var34 = var30.isSyntheticBlock();
    java.lang.String var35 = var22.checkTreeEquals(var30);
    boolean var36 = var30.isOnlyModifiesThisCall();
    com.google.javascript.rhino.Node var37 = new com.google.javascript.rhino.Node(40, var30);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var38 = var0.getInEdges((java.lang.Object)40);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test100() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test100"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var1 = var0.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var3 = var0.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var4 = var0.getGraphvizNodes();
    boolean var5 = var0.isDirected();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var10 = var9.getType();
    int var11 = var9.getSourcePosition();
    com.google.javascript.rhino.Node var12 = var9.getLastSibling();
    com.google.javascript.rhino.Node var13 = var9.removeFirstChild();
    java.lang.String var17 = var9.toString(false, true, false);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var26 = var21.clonePropsFrom(var25);
    com.google.javascript.rhino.Node var28 = var25.getAncestor(0);
    boolean var29 = var25.isQualifiedName();
    com.google.javascript.rhino.JSDocInfo var30 = null;
    var25.setJSDocInfo(var30);
    var9.addChildToFront(var25);
    boolean var33 = var0.hasNode((java.lang.Object)var9);
    var0.clearEdgeAnnotations();
    com.google.javascript.jscomp.CheckLevel var36 = null;
    com.google.javascript.jscomp.DiagnosticType var38 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var36, "hi!");
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var47 = var42.clonePropsFrom(var46);
    com.google.javascript.rhino.jstype.JSType var48 = null;
    var47.setJSType(var48);
    java.util.Collection var50 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var47);
    com.google.javascript.jscomp.DiagnosticType var54 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
    var47.putProp(100, (java.lang.Object)"hi!");
    var47.setLineno(0);
    com.google.javascript.rhino.Node var58 = var47.getParent();
    boolean var59 = var47.isQuotedString();
    com.google.javascript.jscomp.JSSourceFile var62 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.CompilerInput var63 = new com.google.javascript.jscomp.CompilerInput(var62);
    com.google.javascript.jscomp.SourceAst var64 = var63.getSourceAst();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.connectIfNotFound((java.lang.Object)"hi!", (java.lang.Object)var47, (java.lang.Object)var64);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "STRING "+ "'", var17.equals("STRING "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test101() {}
//   public void test101() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test101"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     var0.disableThreads();
//     var0.disableThreads();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal var5 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var4);
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var11 = var10.getType();
//     java.lang.String var12 = var10.getQualifiedName();
//     com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(100, var10);
//     com.google.javascript.jscomp.CheckLevel var14 = null;
//     com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
//     java.lang.String[] var19 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var20 = var5.makeError(var10, var14, var17, var19);
//     com.google.javascript.rhino.Node var21 = var5.getScopeRoot();
// 
//   }

  public void test102() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test102"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var3 = var0.getTweakProcessing();
    var0.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var6 = var0.getTweakProcessing();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setSummaryDetailLevel((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test103() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test103"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var2 = com.google.javascript.rhino.ScriptRuntime.escapeString("com.google.javascript.rhino.EcmaError: : hi!", 'a');
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }

  }

  public void test104() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test104"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    var0.clearNodeAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    var2.clearEdgeAnnotations();
    com.google.javascript.jscomp.Compiler var4 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var5 = var4.getTopScope();
    com.google.javascript.jscomp.SourceMap var6 = var4.getSourceMap();
    com.google.javascript.jscomp.JSSourceFile var9 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.SourceFile.Generator var11 = null;
    com.google.javascript.jscomp.JSSourceFile var12 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var11);
    com.google.javascript.jscomp.CompilerInput var14 = new com.google.javascript.jscomp.CompilerInput(var12, true);
    com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
    var15.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var18 = var15.getTweakProcessing();
    var15.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.Result var21 = var4.compile(var9, var12, var15);
    com.google.javascript.jscomp.LightweightMessageFormatter var22 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var4);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var23 = var2.createDirectedGraphNode((java.lang.Object)var22);
    java.util.List var24 = var0.getNeighborNodes(var23);
    var0.clearEdgeAnnotations();
    com.google.javascript.jscomp.CompilerOptions var26 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var29 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var30 = var29.getNodes();
    java.util.List var31 = var29.getEdges();
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var35.setType(10);
    com.google.javascript.rhino.Node var40 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var31, var35, 1, 100);
    var26.setReplaceStringsConfiguration("hi!", var31);
    java.util.Map var42 = var26.getDefineReplacements();
    var26.disableRuntimeTypeCheck();
    com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var44 = var26.getAliasTransformationHandler();
    var26.setAcceptConstKeyword(true);
    var26.enableExternExports(false);
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var53 = var52.getType();
    com.google.javascript.rhino.Node var54 = var52.cloneTree();
    var52.addSuppression("");
    int var57 = var52.getType();
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.NodeUtil.newExpr(var52);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var59 = var0.getDirectedGraphEdges((java.lang.Object)var26, (java.lang.Object)var52);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test105() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test105"); }


    com.google.javascript.jscomp.SourceFile.Generator var1 = null;
    com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var1);
    com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var2, true);
    com.google.javascript.jscomp.MessageFormatter var5 = null;
    java.util.logging.Logger var6 = null;
    com.google.javascript.jscomp.LoggerErrorManager var7 = new com.google.javascript.jscomp.LoggerErrorManager(var5, var6);
    var4.setErrorManager((com.google.javascript.jscomp.ErrorManager)var7);
    com.google.javascript.jscomp.Compiler var9 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var7);
    int var10 = var7.getWarningCount();
    com.google.javascript.jscomp.JSError[] var11 = var7.getErrors();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test106() {}
//   public void test106() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test106"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setAcceptConstKeyword(true);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     com.google.javascript.jscomp.SourceMap var5 = var3.getSourceMap();
//     com.google.javascript.jscomp.JSSourceFile var8 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
//     com.google.javascript.jscomp.SourceFile.Generator var10 = null;
//     com.google.javascript.jscomp.JSSourceFile var11 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var10);
//     com.google.javascript.jscomp.CompilerInput var13 = new com.google.javascript.jscomp.CompilerInput(var11, true);
//     com.google.javascript.jscomp.CompilerOptions var14 = new com.google.javascript.jscomp.CompilerOptions();
//     var14.setAcceptConstKeyword(true);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var17 = var14.getTweakProcessing();
//     var14.setRewriteNewDateGoogNow(false);
//     com.google.javascript.jscomp.Result var20 = var3.compile(var8, var11, var14);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var22 = var21.newSubGraph();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var23 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var24 = var23.newSubGraph();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var26 = var23.createDirectedGraphNode((java.lang.Object)100);
//     java.util.List var27 = var21.getDirectedPredNodes(var26);
//     com.google.javascript.jscomp.JSModuleGraph var28 = new com.google.javascript.jscomp.JSModuleGraph(var27);
//     com.google.javascript.jscomp.NodeTraversal.Callback var29 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var3, var27, var29);
//     var0.setManageClosureDependencies(var27);
//     com.google.javascript.rhino.Node var34 = null;
//     com.google.javascript.jscomp.CheckLevel var36 = null;
//     com.google.javascript.jscomp.DiagnosticType var38 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var36, "hi!");
//     java.lang.String[] var40 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var41 = com.google.javascript.jscomp.JSError.make("", var34, var38, var40);
//     java.lang.RuntimeException var43 = com.google.javascript.rhino.ScriptRuntime.undefWriteError((java.lang.Object)(short)0, (java.lang.Object)var38, (java.lang.Object)40);
//     com.google.javascript.jscomp.DiagnosticType[] var44 = new com.google.javascript.jscomp.DiagnosticType[] { var38};
//     com.google.javascript.jscomp.DiagnosticGroup var45 = new com.google.javascript.jscomp.DiagnosticGroup(var44);
//     com.google.javascript.jscomp.CheckLevel var46 = null;
//     var0.setWarningLevel(var45, var46);
//     com.google.javascript.jscomp.CheckLevel var48 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var49 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var45, var48);
//     com.google.javascript.rhino.Node var53 = null;
//     com.google.javascript.jscomp.CheckLevel var55 = null;
//     com.google.javascript.jscomp.DiagnosticType var57 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var55, "hi!");
//     java.lang.String[] var59 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var60 = com.google.javascript.jscomp.JSError.make("", var53, var57, var59);
//     java.lang.RuntimeException var62 = com.google.javascript.rhino.ScriptRuntime.undefWriteError((java.lang.Object)(short)0, (java.lang.Object)var57, (java.lang.Object)40);
//     com.google.javascript.jscomp.DiagnosticType[] var63 = new com.google.javascript.jscomp.DiagnosticType[] { var57};
//     com.google.javascript.jscomp.DiagnosticGroup var64 = new com.google.javascript.jscomp.DiagnosticGroup(var63);
//     com.google.javascript.jscomp.DiagnosticGroup[] var65 = new com.google.javascript.jscomp.DiagnosticGroup[] { var64};
//     com.google.javascript.jscomp.DiagnosticGroup var66 = new com.google.javascript.jscomp.DiagnosticGroup(var65);
//     com.google.javascript.jscomp.DiagnosticGroup var67 = new com.google.javascript.jscomp.DiagnosticGroup("string", var65);
//     boolean var68 = var49.enables(var67);
// 
//   }

  public void test107() {}
//   public void test107() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test107"); }
// 
// 
//     com.google.javascript.rhino.Context var0 = com.google.javascript.rhino.Context.enter();
//     var0.setInstructionObserverThreshold(0);
//     var0.removeActivationName("ERROR\n    STRING \n");
//     var0.setInstructionObserverThreshold(0);
//     java.beans.PropertyChangeListener var7 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var0.removePropertyChangeListener(var7);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var0);
// 
//   }

  public void test108() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test108"); }


    com.google.javascript.jscomp.SourceFile.Generator var1 = null;
    com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!. hi! at (unknown source) line (unknown line) : (unknown column)", var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test109() {}
//   public void test109() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test109"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     java.lang.String var1 = var0.getGlobalObject();
//     java.lang.String var2 = var0.getExportPropertyFunction();
//     java.lang.String var3 = var0.getDelegateSuperclassName();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString(": hi!", 100, 10);
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     var12.setType(10);
//     com.google.javascript.rhino.Node var16 = new com.google.javascript.rhino.Node(10);
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var25 = var20.clonePropsFrom(var24);
//     var25.putProp((-1), (java.lang.Object)10.0d);
//     com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var37 = var32.clonePropsFrom(var36);
//     com.google.javascript.rhino.Node var38 = var25.copyInformationFrom(var37);
//     boolean var39 = var37.hasOneChild();
//     com.google.javascript.rhino.Node var41 = null;
//     com.google.javascript.jscomp.CheckLevel var43 = null;
//     com.google.javascript.jscomp.DiagnosticType var45 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var43, "hi!");
//     java.lang.String[] var47 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var48 = com.google.javascript.jscomp.JSError.make("", var41, var45, var47);
//     com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var53 = var52.getType();
//     com.google.javascript.rhino.Node var54 = var52.cloneTree();
//     boolean var55 = var48.equals((java.lang.Object)var52);
//     com.google.javascript.rhino.Node var58 = new com.google.javascript.rhino.Node((-1), var12, var16, var37, var52, 0, 1);
//     java.lang.String var59 = var0.extractClassNameIfProvide(var7, var52);
//     boolean var61 = var0.isSuperClassReference("OFF");
//     boolean var63 = var0.isConstant("0");
//     com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var68 = var67.getType();
//     int var69 = var67.getSourcePosition();
//     com.google.javascript.rhino.Node var70 = var67.getLastSibling();
//     java.lang.String var71 = var0.getSingletonGetterClassName(var67);
// 
//   }

  public void test110() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test110"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var3 = var0.getTweakProcessing();
    var0.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var6 = var0.getTweakProcessing();
    java.lang.Class var7 = var6.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var9 = java.lang.Enum.<java.lang.Enum>valueOf(var7, "hi!. hi! at hi!. hi! at (unknown source) line (unknown line) : (unknown column) line 40 : 0");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test111() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test111"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var1 = var0.getNodes();
    com.google.javascript.jscomp.graph.SubGraph var2 = var0.newSubGraph();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var7 = var6.getType();
    int var8 = var6.getChildCount();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var6.addChildrenToFront(var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var14 = var0.getNodeDegree((java.lang.Object)var6);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test112() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test112"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var8 = var3.clonePropsFrom(var7);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var8.setJSType(var9);
    java.util.Collection var11 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var8);
    com.google.javascript.rhino.Node.AncestorIterable var12 = var8.getAncestors();
    var8.setCharno(10);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var20 = var19.getType();
    com.google.javascript.rhino.Node[] var21 = new com.google.javascript.rhino.Node[] { var19};
    com.google.javascript.rhino.Node var22 = new com.google.javascript.rhino.Node(100, var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var23 = var8.removeChildAfter(var22);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test113() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test113"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var1 = var0.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var3 = var0.createDirectedGraphNode((java.lang.Object)100);
    var0.clearNodeAnnotations();
    com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var9 = var8.getNodes();
    java.util.List var10 = var8.getEdges();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var14.setType(10);
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var10, var14, 1, 100);
    var5.setReplaceStringsConfiguration("hi!", var10);
    java.util.Map var21 = var5.getDefineReplacements();
    var5.setDefineToDoubleLiteral("goog.abstractMethod", 0.0d);
    com.google.javascript.jscomp.CodingConvention var25 = null;
    var5.setCodingConvention(var25);
    com.google.javascript.jscomp.graph.GraphNode var27 = var0.createNode((java.lang.Object)var25);
    java.util.Collection var28 = var0.getNodes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test114() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test114"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var8 = var3.clonePropsFrom(var7);
    var8.putProp((-1), (java.lang.Object)10.0d);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var20 = var15.clonePropsFrom(var19);
    com.google.javascript.rhino.Node var21 = var8.copyInformationFrom(var20);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var30 = var25.clonePropsFrom(var29);
    com.google.javascript.rhino.Node var32 = var29.getAncestor(0);
    java.lang.String var33 = var21.checkTreeEquals(var29);
    var29.removeProp(10);
    com.google.javascript.jscomp.ClosureCodingConvention var36 = new com.google.javascript.jscomp.ClosureCodingConvention();
    java.lang.String var37 = var36.getGlobalObject();
    java.lang.String var38 = var36.getExportPropertyFunction();
    java.lang.String var39 = var36.getDelegateSuperclassName();
    java.lang.String var40 = var36.getExportSymbolFunction();
    com.google.javascript.rhino.jstype.ObjectType var41 = null;
    com.google.javascript.rhino.jstype.ObjectType var42 = null;
    com.google.javascript.rhino.jstype.ObjectType var43 = null;
    com.google.javascript.rhino.jstype.FunctionType var44 = null;
    com.google.javascript.rhino.jstype.FunctionType var45 = null;
    var36.applyDelegateRelationship(var41, var42, var43, var44, var45);
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.Node.newString("goog.exportSymbol");
    java.util.Collection var50 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var49);
    int var51 = var49.getSourcePosition();
    com.google.javascript.rhino.Node var52 = new com.google.javascript.rhino.Node((-1), var49);
    com.google.javascript.rhino.Node var56 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var61 = var56.clonePropsFrom(var60);
    int var63 = var60.getIntProp(10);
    java.lang.String var64 = var36.extractClassNameIfProvide(var49, var60);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var65 = var29.removeChildAfter(var60);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "goog.global"+ "'", var37.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "goog.exportProperty"+ "'", var38.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "goog.exportSymbol"+ "'", var40.equals("goog.exportSymbol"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);

  }

  public void test115() {}
//   public void test115() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test115"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.JSSourceFile var4 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
//     com.google.javascript.rhino.Node var5 = var1.parse(var4);
//     var1.disableThreads();
//     com.google.javascript.jscomp.JSSourceFile var7 = null;
//     com.google.javascript.jscomp.Compiler var8 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var9 = var8.getTopScope();
//     com.google.javascript.jscomp.SourceMap var10 = var8.getSourceMap();
//     var8.reportCodeChange();
//     com.google.javascript.jscomp.Compiler var12 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var13 = var12.getTopScope();
//     com.google.javascript.jscomp.SourceMap var14 = var12.getSourceMap();
//     com.google.javascript.jscomp.JSSourceFile var17 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
//     com.google.javascript.jscomp.SourceFile.Generator var19 = null;
//     com.google.javascript.jscomp.JSSourceFile var20 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var19);
//     com.google.javascript.jscomp.CompilerInput var22 = new com.google.javascript.jscomp.CompilerInput(var20, true);
//     com.google.javascript.jscomp.CompilerOptions var23 = new com.google.javascript.jscomp.CompilerOptions();
//     var23.setAcceptConstKeyword(true);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var26 = var23.getTweakProcessing();
//     var23.setRewriteNewDateGoogNow(false);
//     com.google.javascript.jscomp.Result var29 = var12.compile(var17, var20, var23);
//     com.google.javascript.rhino.Node var30 = var8.parse(var17);
//     com.google.javascript.jscomp.JSSourceFile var33 = com.google.javascript.jscomp.JSSourceFile.fromCode("null(null)", "goog.global");
//     com.google.javascript.jscomp.JSSourceFile[] var34 = new com.google.javascript.jscomp.JSSourceFile[] { var33};
//     java.nio.charset.Charset var36 = null;
//     com.google.javascript.jscomp.JSSourceFile var37 = com.google.javascript.jscomp.JSSourceFile.fromFile("goog.exportProperty", var36);
//     com.google.javascript.jscomp.JSSourceFile[] var38 = new com.google.javascript.jscomp.JSSourceFile[] { var37};
//     com.google.javascript.jscomp.CompilerOptions var39 = new com.google.javascript.jscomp.CompilerOptions();
//     var39.setAcceptConstKeyword(true);
//     java.util.Map var42 = var39.getTweakReplacements();
//     var39.setDefineToNumberLiteral("eof", 1);
//     com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var46 = null;
//     var39.setAliasTransformationHandler(var46);
//     var39.setGenerateExports(false);
//     com.google.javascript.jscomp.Result var50 = var8.compile(var34, var38, var39);
//     com.google.javascript.jscomp.Compiler var51 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var52 = var51.getTopScope();
//     com.google.javascript.jscomp.SourceMap var53 = var51.getSourceMap();
//     var51.reportCodeChange();
//     com.google.javascript.jscomp.Compiler var55 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var56 = var55.getTopScope();
//     com.google.javascript.jscomp.SourceMap var57 = var55.getSourceMap();
//     com.google.javascript.jscomp.JSSourceFile var60 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
//     com.google.javascript.jscomp.SourceFile.Generator var62 = null;
//     com.google.javascript.jscomp.JSSourceFile var63 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var62);
//     com.google.javascript.jscomp.CompilerInput var65 = new com.google.javascript.jscomp.CompilerInput(var63, true);
//     com.google.javascript.jscomp.CompilerOptions var66 = new com.google.javascript.jscomp.CompilerOptions();
//     var66.setAcceptConstKeyword(true);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var69 = var66.getTweakProcessing();
//     var66.setRewriteNewDateGoogNow(false);
//     com.google.javascript.jscomp.Result var72 = var55.compile(var60, var63, var66);
//     com.google.javascript.rhino.Node var73 = var51.parse(var60);
//     com.google.javascript.jscomp.JSSourceFile var76 = com.google.javascript.jscomp.JSSourceFile.fromCode("null(null)", "goog.global");
//     com.google.javascript.jscomp.JSSourceFile[] var77 = new com.google.javascript.jscomp.JSSourceFile[] { var76};
//     java.nio.charset.Charset var79 = null;
//     com.google.javascript.jscomp.JSSourceFile var80 = com.google.javascript.jscomp.JSSourceFile.fromFile("goog.exportProperty", var79);
//     com.google.javascript.jscomp.JSSourceFile[] var81 = new com.google.javascript.jscomp.JSSourceFile[] { var80};
//     com.google.javascript.jscomp.CompilerOptions var82 = new com.google.javascript.jscomp.CompilerOptions();
//     var82.setAcceptConstKeyword(true);
//     java.util.Map var85 = var82.getTweakReplacements();
//     var82.setDefineToNumberLiteral("eof", 1);
//     com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var89 = null;
//     var82.setAliasTransformationHandler(var89);
//     var82.setGenerateExports(false);
//     com.google.javascript.jscomp.Result var93 = var51.compile(var77, var81, var82);
//     com.google.javascript.jscomp.Result var94 = var1.compile(var7, var34, var82);
// 
//   }

  public void test116() {}
//   public void test116() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test116"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile.Generator var1 = null;
//     com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var1);
//     com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var2, true);
//     com.google.javascript.jscomp.SourceFile.Generator var6 = null;
//     com.google.javascript.jscomp.SourceFile var7 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var6);
//     com.google.javascript.jscomp.JsAst var8 = new com.google.javascript.jscomp.JsAst(var7);
//     var4.setSourceFile(var7);
//     com.google.javascript.jscomp.JSModule var10 = null;
//     var4.setModule(var10);
//     java.io.PrintStream var12 = null;
//     com.google.javascript.jscomp.Compiler var13 = new com.google.javascript.jscomp.Compiler(var12);
//     var4.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var13);
//     boolean var15 = var4.isExtern();
//     java.io.PrintStream var16 = null;
//     com.google.javascript.jscomp.Compiler var17 = new com.google.javascript.jscomp.Compiler(var16);
//     com.google.javascript.jscomp.SourceMap var18 = var17.getSourceMap();
//     com.google.javascript.jscomp.SourceMap var19 = var17.getSourceMap();
//     var4.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var17);
//     com.google.javascript.jscomp.CompilerInput var22 = var17.getInput("hi!");
// 
//   }

  public void test117() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test117"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
    var0.disableThreads();
    var0.disableThreads();
    com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
    com.google.javascript.jscomp.NodeTraversal var5 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var4);
    com.google.javascript.jscomp.SourceFile.Generator var7 = null;
    com.google.javascript.jscomp.JSSourceFile var8 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var7);
    com.google.javascript.jscomp.CompilerInput var10 = new com.google.javascript.jscomp.CompilerInput(var8, true);
    com.google.javascript.jscomp.MessageFormatter var11 = null;
    java.util.logging.Logger var12 = null;
    com.google.javascript.jscomp.LoggerErrorManager var13 = new com.google.javascript.jscomp.LoggerErrorManager(var11, var12);
    var10.setErrorManager((com.google.javascript.jscomp.ErrorManager)var13);
    int var15 = var13.getWarningCount();
    var0.setErrorManager((com.google.javascript.jscomp.ErrorManager)var13);
    com.google.javascript.jscomp.Compiler var17 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var18 = var17.getTopScope();
    var17.disableThreads();
    var17.disableThreads();
    com.google.javascript.jscomp.MessageFormatter var21 = null;
    java.util.logging.Logger var22 = null;
    com.google.javascript.jscomp.LoggerErrorManager var23 = new com.google.javascript.jscomp.LoggerErrorManager(var21, var22);
    com.google.javascript.jscomp.CheckLevel var24 = null;
    com.google.javascript.rhino.Node var26 = null;
    com.google.javascript.jscomp.CheckLevel var28 = null;
    com.google.javascript.jscomp.DiagnosticType var30 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var28, "hi!");
    java.lang.String[] var32 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var33 = com.google.javascript.jscomp.JSError.make("", var26, var30, var32);
    var23.report(var24, var33);
    var17.setErrorManager((com.google.javascript.jscomp.ErrorManager)var23);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var37 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var38 = var37.getNodes();
    java.util.List var39 = var37.getEdges();
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var43.setType(10);
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var39, var43, 1, 100);
    com.google.javascript.jscomp.ComposeWarningsGuard var49 = new com.google.javascript.jscomp.ComposeWarningsGuard(var39);
    com.google.javascript.jscomp.NodeTraversal.Callback var50 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var17, var39, var50);
    com.google.javascript.jscomp.Compiler var52 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var53 = var52.getTopScope();
    var52.disableThreads();
    var52.disableThreads();
    com.google.javascript.jscomp.MessageFormatter var56 = null;
    java.util.logging.Logger var57 = null;
    com.google.javascript.jscomp.LoggerErrorManager var58 = new com.google.javascript.jscomp.LoggerErrorManager(var56, var57);
    com.google.javascript.jscomp.CheckLevel var59 = null;
    com.google.javascript.rhino.Node var61 = null;
    com.google.javascript.jscomp.CheckLevel var63 = null;
    com.google.javascript.jscomp.DiagnosticType var65 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var63, "hi!");
    java.lang.String[] var67 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var68 = com.google.javascript.jscomp.JSError.make("", var61, var65, var67);
    var58.report(var59, var68);
    var52.setErrorManager((com.google.javascript.jscomp.ErrorManager)var58);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var72 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var73 = var72.getNodes();
    java.util.List var74 = var72.getEdges();
    com.google.javascript.rhino.Node var78 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var78.setType(10);
    com.google.javascript.rhino.Node var83 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var74, var78, 1, 100);
    com.google.javascript.jscomp.ComposeWarningsGuard var84 = new com.google.javascript.jscomp.ComposeWarningsGuard(var74);
    com.google.javascript.jscomp.NodeTraversal.Callback var85 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var52, var74, var85);
    com.google.javascript.jscomp.CompilerOptions var87 = new com.google.javascript.jscomp.CompilerOptions();
    var87.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var90 = null;
    var87.setAliasTransformationHandler(var90);
    var87.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var94 = var87.getTweakProcessing();
    var0.initModules(var39, var74, var87);
    com.google.javascript.jscomp.Result var96 = var0.getResult();
    boolean var97 = var0.isIdeMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test118() {}
//   public void test118() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test118"); }
// 
// 
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       com.google.javascript.rhino.EvaluatorException var1 = com.google.javascript.rhino.Context.reportRuntimeError("eol");
//       fail("Expected exception of type com.google.javascript.rhino.EvaluatorException");
//     } catch (com.google.javascript.rhino.EvaluatorException e) {
//       // Expected exception.
//     }
// 
//   }

  public void test119() {}
//   public void test119() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test119"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     var0.disableThreads();
//     var0.disableThreads();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal var5 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var4);
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var11 = var10.getType();
//     java.lang.String var12 = var10.getQualifiedName();
//     com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(100, var10);
//     com.google.javascript.jscomp.CheckLevel var14 = null;
//     com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
//     java.lang.String[] var19 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var20 = var5.makeError(var10, var14, var17, var19);
//     com.google.javascript.rhino.Node var21 = var5.getCurrentNode();
//     int var22 = var5.getLineNumber();
//     com.google.javascript.jscomp.Scope var23 = var5.getScope();
//     com.google.javascript.jscomp.JSModule var24 = var5.getModule();
// 
//   }

  public void test120() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test120"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.Node.newString(40, "hi!. hi! at (unknown source) line (unknown line) : (unknown column)");
    var2.setOptionalArg(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var5 = var2.toStringTree();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test121() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test121"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var8 = var3.clonePropsFrom(var7);
    com.google.javascript.rhino.Node var10 = var7.getAncestor(0);
    boolean var11 = var7.isQualifiedName();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var15.setType(10);
    boolean var18 = var15.isLocalResultCall();
    boolean var19 = var15.isUnscopedQualifiedName();
    var15.setWasEmptyNode(false);
    com.google.javascript.rhino.Node var22 = var7.copyInformationFrom(var15);
    java.lang.String var23 = var7.getQualifiedName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test122() {}
//   public void test122() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test122"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile.Generator var1 = null;
//     com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var1);
//     java.lang.String var4 = var2.getLine(100);
// 
//   }

  public void test123() {}
//   public void test123() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test123"); }
// 
// 
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       com.google.javascript.rhino.EvaluatorException var1 = com.google.javascript.rhino.Context.reportRuntimeError("ERROR\n    STRING \n");
//       fail("Expected exception of type com.google.javascript.rhino.EvaluatorException");
//     } catch (com.google.javascript.rhino.EvaluatorException e) {
//       // Expected exception.
//     }
// 
//   }

  public void test124() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test124"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    java.lang.String var1 = var0.getGlobalObject();
    java.lang.String var2 = var0.getExportPropertyFunction();
    java.lang.String var3 = var0.getDelegateSuperclassName();
    java.lang.String var4 = var0.getExportSymbolFunction();
    com.google.javascript.rhino.jstype.ObjectType var5 = null;
    com.google.javascript.rhino.jstype.ObjectType var6 = null;
    com.google.javascript.rhino.jstype.ObjectType var7 = null;
    com.google.javascript.rhino.jstype.FunctionType var8 = null;
    com.google.javascript.rhino.jstype.FunctionType var9 = null;
    var0.applyDelegateRelationship(var5, var6, var7, var8, var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.Node.newString("goog.exportSymbol");
    java.util.Collection var14 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var13);
    int var15 = var13.getSourcePosition();
    com.google.javascript.rhino.Node var16 = new com.google.javascript.rhino.Node((-1), var13);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var25 = var20.clonePropsFrom(var24);
    int var27 = var24.getIntProp(10);
    java.lang.String var28 = var0.extractClassNameIfProvide(var13, var24);
    java.lang.String var29 = var0.getAbstractMethodName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "goog.global"+ "'", var1.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "goog.exportProperty"+ "'", var2.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "goog.exportSymbol"+ "'", var4.equals("goog.exportSymbol"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "goog.abstractMethod"+ "'", var29.equals("goog.abstractMethod"));

  }

  public void test125() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test125"); }


    com.google.javascript.rhino.EvaluatorException var3 = new com.google.javascript.rhino.EvaluatorException("string", "eol", 0);

  }

  public void test126() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test126"); }


    java.lang.Object var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var2 = com.google.javascript.rhino.ScriptRuntime.getMessage1("eol", var1);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test127() {}
//   public void test127() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test127"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     com.google.javascript.jscomp.SourceMap var2 = var0.getSourceMap();
//     var0.reportCodeChange();
//     com.google.javascript.jscomp.SourceMap var4 = var0.getSourceMap();
//     com.google.javascript.jscomp.JSError[] var5 = var0.getErrors();
// 
//   }

  public void test128() {}
//   public void test128() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test128"); }
// 
// 
//     com.google.javascript.rhino.Context var0 = com.google.javascript.rhino.Context.enter();
//     boolean var1 = var0.isGeneratingDebugChanged();
//     var0.setLanguageVersion(0);
//     var0.setGeneratingSource(false);
//     boolean var6 = var0.hasCompileFunctionsWithDynamicScope();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var1 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var6 == false);
// 
//   }

  public void test129() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test129"); }


    com.google.javascript.jscomp.SourceFile.Generator var1 = null;
    com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var1);
    com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var2, true);
    com.google.javascript.jscomp.MessageFormatter var5 = null;
    java.util.logging.Logger var6 = null;
    com.google.javascript.jscomp.LoggerErrorManager var7 = new com.google.javascript.jscomp.LoggerErrorManager(var5, var6);
    var4.setErrorManager((com.google.javascript.jscomp.ErrorManager)var7);
    com.google.javascript.jscomp.Compiler var9 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var7);
    com.google.javascript.jscomp.Compiler var10 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var7);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var20 = var15.clonePropsFrom(var19);
    var20.putProp((-1), (java.lang.Object)10.0d);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var32 = var27.clonePropsFrom(var31);
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var32);
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var42 = var37.clonePropsFrom(var41);
    com.google.javascript.rhino.Node var44 = var41.getAncestor(0);
    java.lang.String var45 = var33.checkTreeEquals(var41);
    com.google.javascript.jscomp.DiagnosticType var48 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
    com.google.javascript.jscomp.Compiler var49 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var50 = var49.getTopScope();
    var49.disableThreads();
    var49.disableThreads();
    com.google.javascript.jscomp.NodeTraversal.Callback var53 = null;
    com.google.javascript.jscomp.NodeTraversal var54 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var49, var53);
    com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var60 = var59.getType();
    java.lang.String var61 = var59.getQualifiedName();
    com.google.javascript.rhino.Node var62 = new com.google.javascript.rhino.Node(100, var59);
    com.google.javascript.jscomp.CheckLevel var63 = null;
    com.google.javascript.jscomp.DiagnosticType var66 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
    java.lang.String[] var68 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var69 = var54.makeError(var59, var63, var66, var68);
    com.google.javascript.jscomp.JSError var70 = com.google.javascript.jscomp.JSError.make("", var41, var48, var68);
    var10.report(var70);
    com.google.javascript.jscomp.ClosureCodingConvention var72 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var74 = var72.isPrivate("");
    java.lang.String var75 = var72.getExportSymbolFunction();
    boolean var77 = var72.isSuperClassReference("");
    java.util.Collection var78 = var72.getAssertionFunctions();
    java.lang.String var79 = var72.getDelegateSuperclassName();
    java.lang.String var80 = var72.getGlobalObject();
    boolean var83 = var72.isExported("null(null)", false);
    boolean var84 = var70.equals((java.lang.Object)var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "goog.exportSymbol"+ "'", var75.equals("goog.exportSymbol"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "goog.global"+ "'", var80.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);

  }

  public void test130() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test130"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
    var0.disableThreads();
    var0.disableThreads();
    com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
    com.google.javascript.jscomp.NodeTraversal var5 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var4);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var11 = var10.getType();
    java.lang.String var12 = var10.getQualifiedName();
    com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(100, var10);
    com.google.javascript.jscomp.CheckLevel var14 = null;
    com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
    java.lang.String[] var19 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var20 = var5.makeError(var10, var14, var17, var19);
    com.google.javascript.rhino.Node var21 = var5.getCurrentNode();
    com.google.javascript.jscomp.Compiler var22 = var5.getCompiler();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var31 = var26.clonePropsFrom(var30);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var36 = var35.getType();
    int var37 = var35.getSourcePosition();
    com.google.javascript.rhino.Node var38 = var35.getLastSibling();
    com.google.javascript.rhino.Node var39 = var35.removeFirstChild();
    java.lang.String var40 = var35.getQualifiedName();
    com.google.javascript.rhino.Node var41 = var30.copyInformationFromForTree(var35);
    com.google.javascript.jscomp.CheckLevel var42 = null;
    com.google.javascript.jscomp.CheckLevel var46 = null;
    com.google.javascript.rhino.Node var48 = null;
    com.google.javascript.jscomp.CheckLevel var50 = null;
    com.google.javascript.jscomp.DiagnosticType var52 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var50, "hi!");
    java.lang.String[] var54 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var55 = com.google.javascript.jscomp.JSError.make("", var48, var52, var54);
    java.lang.String[] var57 = new java.lang.String[] { "goog.exportProperty"};
    com.google.javascript.jscomp.JSError var58 = com.google.javascript.jscomp.JSError.make("eof", 1, 40, var46, var52, var57);
    com.google.javascript.jscomp.Compiler var59 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var60 = var59.getTopScope();
    var59.disableThreads();
    var59.disableThreads();
    com.google.javascript.jscomp.NodeTraversal.Callback var63 = null;
    com.google.javascript.jscomp.NodeTraversal var64 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var59, var63);
    com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var70 = var69.getType();
    java.lang.String var71 = var69.getQualifiedName();
    com.google.javascript.rhino.Node var72 = new com.google.javascript.rhino.Node(100, var69);
    com.google.javascript.jscomp.CheckLevel var73 = null;
    com.google.javascript.jscomp.DiagnosticType var76 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
    java.lang.String[] var78 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var79 = var64.makeError(var69, var73, var76, var78);
    java.lang.String var80 = var76.toString();
    int var81 = var52.compareTo(var76);
    com.google.javascript.jscomp.DiagnosticType var84 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "");
    int var85 = var76.compareTo(var84);
    com.google.javascript.jscomp.DiagnosticType var91 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
    java.lang.String[] var93 = new java.lang.String[] { "hi!: hi!"};
    com.google.javascript.jscomp.JSError var94 = com.google.javascript.jscomp.JSError.make("hi!. hi! at (unknown source) line (unknown line) : (unknown column)", 40, 0, var91, var93);
    com.google.javascript.jscomp.JSError var95 = var5.makeError(var30, var42, var76, var93);
    java.lang.String var96 = var30.getQualifiedName();
    var30.detachChildren();
    var30.setCharno(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "hi!: hi!"+ "'", var80.equals("hi!: hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);

  }

  public void test131() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test131"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Context.reportWarning(": WARNING - hi!\n", "", 0, "com.google.javascript.rhino.EcmaError: TypeError: hi! is not a function, it is com.google.javascript.jscomp.graph.LinkedDirectedGraph.", 0);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test132() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test132"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var1 = var0.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var3 = var0.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var4 = var0.getGraphvizNodes();
    boolean var5 = var0.isDirected();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var10 = var9.getType();
    int var11 = var9.getSourcePosition();
    com.google.javascript.rhino.Node var12 = var9.getLastSibling();
    com.google.javascript.rhino.Node var13 = var9.removeFirstChild();
    java.lang.String var17 = var9.toString(false, true, false);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var26 = var21.clonePropsFrom(var25);
    com.google.javascript.rhino.Node var28 = var25.getAncestor(0);
    boolean var29 = var25.isQualifiedName();
    com.google.javascript.rhino.JSDocInfo var30 = null;
    var25.setJSDocInfo(var30);
    var9.addChildToFront(var25);
    boolean var33 = var0.hasNode((java.lang.Object)var9);
    var0.clearEdgeAnnotations();
    java.lang.Object var35 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var36 = var0.getOutEdges(var35);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "STRING "+ "'", var17.equals("STRING "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test133() {}
//   public void test133() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test133"); }
// 
// 
//     com.google.javascript.rhino.Context var0 = com.google.javascript.rhino.Context.enter();
//     var0.setGeneratingSource(true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var0);
// 
//   }

  public void test134() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test134"); }


    com.google.javascript.jscomp.SourceFile.Generator var1 = null;
    com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var1);
    com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var2, true);
    com.google.javascript.jscomp.SourceFile.Generator var6 = null;
    com.google.javascript.jscomp.SourceFile var7 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var6);
    com.google.javascript.jscomp.JsAst var8 = new com.google.javascript.jscomp.JsAst(var7);
    var4.setSourceFile(var7);
    com.google.javascript.jscomp.JSModule var10 = null;
    var4.setModule(var10);
    java.io.PrintStream var12 = null;
    com.google.javascript.jscomp.Compiler var13 = new com.google.javascript.jscomp.Compiler(var12);
    var4.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var13);
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = var13.getTypeRegistry();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var13.optimize();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test135() {}
//   public void test135() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test135"); }
// 
// 
//     java.io.InputStream var2 = null;
//     com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromInputStream("goog.abstractMethod", "ERROR\n    STRING \n", var2);
// 
//   }

  public void test136() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test136"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test137() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test137"); }


    com.google.javascript.jscomp.JSSourceFile var1 = com.google.javascript.jscomp.JSSourceFile.fromFile("OFF");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.io.Reader var2 = var1.getCodeReader();
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test138() {}
//   public void test138() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test138"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     var0.disableThreads();
//     var0.disableThreads();
//     java.io.PrintStream var4 = null;
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler(var4);
//     com.google.javascript.jscomp.Compiler.IntermediateState var6 = var5.getState();
//     var0.setState(var6);
//     var0.processDefines();
// 
//   }

  public void test139() {}
//   public void test139() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test139"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     var0.disableThreads();
//     var0.disableThreads();
//     com.google.javascript.jscomp.MessageFormatter var4 = null;
//     java.util.logging.Logger var5 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var6 = new com.google.javascript.jscomp.LoggerErrorManager(var4, var5);
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     com.google.javascript.rhino.Node var9 = null;
//     com.google.javascript.jscomp.CheckLevel var11 = null;
//     com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var11, "hi!");
//     java.lang.String[] var15 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", var9, var13, var15);
//     var6.report(var7, var16);
//     var0.setErrorManager((com.google.javascript.jscomp.ErrorManager)var6);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.Collection var21 = var20.getNodes();
//     java.util.List var22 = var20.getEdges();
//     com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     var26.setType(10);
//     com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var22, var26, 1, 100);
//     com.google.javascript.jscomp.ComposeWarningsGuard var32 = new com.google.javascript.jscomp.ComposeWarningsGuard(var22);
//     com.google.javascript.jscomp.NodeTraversal.Callback var33 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var0, var22, var33);
//     com.google.javascript.jscomp.LightweightMessageFormatter var35 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0);
//     boolean var36 = var0.acceptEcmaScript5();
// 
//   }

  public void test140() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test140"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.VariableRenamingPolicy var1 = com.google.javascript.jscomp.VariableRenamingPolicy.valueOf("hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test141() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test141"); }


    com.google.javascript.rhino.EvaluatorException var1 = new com.google.javascript.rhino.EvaluatorException("<No stack trace available>");
    java.lang.String var2 = var1.getScriptStackTrace();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "<No stack trace available>"+ "'", var2.equals("<No stack trace available>"));

  }

  public void test142() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test142"); }


    boolean var1 = com.google.javascript.rhino.ScriptRuntime.isJSLineTerminator(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test143() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test143"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.JSSourceFile var4 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.rhino.Node var5 = var1.parse(var4);
    var1.disableThreads();
    com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
    var7.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.Compiler var10 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var11 = var10.getTopScope();
    com.google.javascript.jscomp.SourceMap var12 = var10.getSourceMap();
    com.google.javascript.jscomp.JSSourceFile var15 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.SourceFile.Generator var17 = null;
    com.google.javascript.jscomp.JSSourceFile var18 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var17);
    com.google.javascript.jscomp.CompilerInput var20 = new com.google.javascript.jscomp.CompilerInput(var18, true);
    com.google.javascript.jscomp.CompilerOptions var21 = new com.google.javascript.jscomp.CompilerOptions();
    var21.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var24 = var21.getTweakProcessing();
    var21.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.Result var27 = var10.compile(var15, var18, var21);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var29 = var28.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var31 = var30.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var33 = var30.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var34 = var28.getDirectedPredNodes(var33);
    com.google.javascript.jscomp.JSModuleGraph var35 = new com.google.javascript.jscomp.JSModuleGraph(var34);
    com.google.javascript.jscomp.NodeTraversal.Callback var36 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var10, var34, var36);
    var7.setManageClosureDependencies(var34);
    var7.setNameAnonymousFunctionsOnly(false);
    com.google.javascript.jscomp.DefaultPassConfig var41 = new com.google.javascript.jscomp.DefaultPassConfig(var7);
    var1.setPassConfig((com.google.javascript.jscomp.PassConfig)var41);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.processDefines();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test144() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test144"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithEdgeAnnotations();
    com.google.javascript.jscomp.SourceFile.Generator var2 = null;
    com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var2);
    com.google.javascript.jscomp.JsAst var4 = new com.google.javascript.jscomp.JsAst(var3);
    java.lang.RuntimeException var5 = com.google.javascript.rhino.ScriptRuntime.notFunctionError((java.lang.Object)var0, (java.lang.Object)var3);
    java.lang.Object var6 = null;
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var0.getDirectedGraphNode(var6);
    com.google.javascript.jscomp.ClosureCodingConvention var8 = new com.google.javascript.jscomp.ClosureCodingConvention();
    java.lang.String var9 = var8.getGlobalObject();
    java.lang.String var10 = var8.getExportPropertyFunction();
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = null;
    com.google.javascript.jscomp.Scope var12 = null;
    com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var16 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var17 = var16.getNodes();
    java.util.List var18 = var16.getEdges();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var22.setType(10);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var18, var22, 1, 100);
    var13.setReplaceStringsConfiguration("hi!", var18);
    var8.defineDelegateProxyPrototypeProperties(var11, var12, var18);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var30 = var0.createDirectedGraphNode((java.lang.Object)var18);
    java.io.PrintStream var31 = null;
    com.google.javascript.jscomp.Compiler var32 = new com.google.javascript.jscomp.Compiler(var31);
    com.google.javascript.jscomp.JSSourceFile var35 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.rhino.Node var36 = var32.parse(var35);
    boolean var37 = var32.isTypeCheckingEnabled();
    com.google.javascript.jscomp.ClosureCodingConvention var38 = new com.google.javascript.jscomp.ClosureCodingConvention();
    java.lang.String var39 = var38.getGlobalObject();
    java.lang.String var40 = var38.getExportPropertyFunction();
    java.lang.String var41 = var38.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.Node.newString(": hi!", 100, 10);
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var50.setType(10);
    com.google.javascript.rhino.Node var54 = new com.google.javascript.rhino.Node(10);
    com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var63 = var58.clonePropsFrom(var62);
    var63.putProp((-1), (java.lang.Object)10.0d);
    com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var74 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var75 = var70.clonePropsFrom(var74);
    com.google.javascript.rhino.Node var76 = var63.copyInformationFrom(var75);
    boolean var77 = var75.hasOneChild();
    com.google.javascript.rhino.Node var79 = null;
    com.google.javascript.jscomp.CheckLevel var81 = null;
    com.google.javascript.jscomp.DiagnosticType var83 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var81, "hi!");
    java.lang.String[] var85 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var86 = com.google.javascript.jscomp.JSError.make("", var79, var83, var85);
    com.google.javascript.rhino.Node var90 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var91 = var90.getType();
    com.google.javascript.rhino.Node var92 = var90.cloneTree();
    boolean var93 = var86.equals((java.lang.Object)var90);
    com.google.javascript.rhino.Node var96 = new com.google.javascript.rhino.Node((-1), var50, var54, var75, var90, 0, 1);
    java.lang.String var97 = var38.extractClassNameIfProvide(var45, var90);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.connectIfNotFound((java.lang.Object)var37, (java.lang.Object)var38, (java.lang.Object)(short)10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "goog.global"+ "'", var9.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "goog.exportProperty"+ "'", var10.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "goog.global"+ "'", var39.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "goog.exportProperty"+ "'", var40.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);

  }

  public void test145() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test145"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var1 = var0.getNodes();
    java.lang.String var2 = var0.getName();
    com.google.javascript.rhino.EcmaError var9 = com.google.javascript.rhino.ScriptRuntime.constructError("", "hi!", "hi!", (-1), "hi!", 1);
    java.lang.String var10 = var9.toString();
    var9.initLineNumber(100);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var13 = var0.getDirectedGraphNode((java.lang.Object)100);
    com.google.javascript.jscomp.SourceFile.Generator var15 = null;
    com.google.javascript.jscomp.JSSourceFile var16 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var15);
    com.google.javascript.jscomp.CompilerInput var18 = new com.google.javascript.jscomp.CompilerInput(var16, true);
    com.google.javascript.jscomp.MessageFormatter var19 = null;
    java.util.logging.Logger var20 = null;
    com.google.javascript.jscomp.LoggerErrorManager var21 = new com.google.javascript.jscomp.LoggerErrorManager(var19, var20);
    var18.setErrorManager((com.google.javascript.jscomp.ErrorManager)var21);
    com.google.javascript.jscomp.Compiler var23 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var21);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var25 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var26 = var25.getNodes();
    java.util.List var27 = var25.getEdges();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var31.setType(10);
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var27, var31, 1, 100);
    var31.setVarArgs(false);
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var42.setType(10);
    java.lang.Object var46 = var42.getProp(40);
    var31.addChildToBack(var42);
    int var48 = var31.getChildCount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var49 = var0.isConnected((java.lang.Object)var23, (java.lang.Object)var31);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "LinkedGraph"+ "'", var2.equals("LinkedGraph"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "com.google.javascript.rhino.EcmaError: : hi!"+ "'", var10.equals("com.google.javascript.rhino.EcmaError: : hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);

  }

  public void test146() {}
//   public void test146() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test146"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var1 = null;
//     boolean var2 = var0.isVarArgsParameter(var1);
//     java.lang.String var3 = var0.getExportSymbolFunction();
//     boolean var5 = var0.isSuperClassReference("goog.exportProperty");
//     boolean var8 = var0.isExported("null(null)", true);
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var14 = var13.getType();
//     int var15 = var13.getSourcePosition();
//     com.google.javascript.rhino.Node var16 = var13.getLastSibling();
//     com.google.javascript.rhino.Node var17 = var13.removeFirstChild();
//     java.lang.String var21 = var13.toString(false, true, false);
//     com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var30 = var25.clonePropsFrom(var29);
//     com.google.javascript.rhino.Node var32 = var29.getAncestor(0);
//     boolean var33 = var29.isQualifiedName();
//     com.google.javascript.rhino.JSDocInfo var34 = null;
//     var29.setJSDocInfo(var34);
//     var13.addChildToFront(var29);
//     com.google.javascript.jscomp.CheckLevel var37 = null;
//     com.google.javascript.jscomp.DiagnosticType var40 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "");
//     com.google.javascript.jscomp.CheckLevel var44 = null;
//     com.google.javascript.rhino.Node var46 = null;
//     com.google.javascript.jscomp.CheckLevel var48 = null;
//     com.google.javascript.jscomp.DiagnosticType var50 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var48, "hi!");
//     java.lang.String[] var52 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var53 = com.google.javascript.jscomp.JSError.make("", var46, var50, var52);
//     java.lang.String[] var55 = new java.lang.String[] { "goog.exportProperty"};
//     com.google.javascript.jscomp.JSError var56 = com.google.javascript.jscomp.JSError.make("eof", 1, 40, var44, var50, var55);
//     com.google.javascript.jscomp.JSError var57 = com.google.javascript.jscomp.JSError.make("com.google.javascript.rhino.EcmaError: : hi!: goog.global", var13, var37, var40, var55);
//     int var58 = var13.getChildCount();
//     com.google.javascript.rhino.Node var59 = null;
//     java.lang.String var60 = var0.extractClassNameIfProvide(var13, var59);
// 
//   }

  public void test147() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test147"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var8 = var3.clonePropsFrom(var7);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var7.setJSType(var9);
    var7.setOptionalArg(true);
    int var13 = var7.getLineno();
    com.google.javascript.rhino.jstype.JSType var14 = var7.getJSType();
    java.lang.String var15 = var7.getQualifiedName();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var20.setType(10);
    com.google.javascript.rhino.Node var24 = new com.google.javascript.rhino.Node(10);
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var33 = var28.clonePropsFrom(var32);
    var33.putProp((-1), (java.lang.Object)10.0d);
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var45 = var40.clonePropsFrom(var44);
    com.google.javascript.rhino.Node var46 = var33.copyInformationFrom(var45);
    boolean var47 = var45.hasOneChild();
    com.google.javascript.rhino.Node var49 = null;
    com.google.javascript.jscomp.CheckLevel var51 = null;
    com.google.javascript.jscomp.DiagnosticType var53 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var51, "hi!");
    java.lang.String[] var55 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var56 = com.google.javascript.jscomp.JSError.make("", var49, var53, var55);
    com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var61 = var60.getType();
    com.google.javascript.rhino.Node var62 = var60.cloneTree();
    boolean var63 = var56.equals((java.lang.Object)var60);
    com.google.javascript.rhino.Node var66 = new com.google.javascript.rhino.Node((-1), var20, var24, var45, var60, 0, 1);
    com.google.javascript.rhino.Node var67 = var24.getLastChild();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.addChildrenToBack(var24);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);

  }

  public void test148() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test148"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
    var0.disableThreads();
    var0.disableThreads();
    com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
    com.google.javascript.jscomp.NodeTraversal var5 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var4);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var10 = var9.getType();
    int var11 = var9.getChildCount();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var9.addChildrenToFront(var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.traverse(var15);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test149() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test149"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.VariableRenamingPolicy var1 = com.google.javascript.jscomp.VariableRenamingPolicy.valueOf("com.google.javascript.rhino.EcmaError: TypeError: Cannot set property \"hi!: hi!\" of 0 to \"40\"");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test150() {}
//   public void test150() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test150"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var2 = var0.isPrivate("");
//     boolean var4 = var0.isPrivate("goog.exportProperty");
//     boolean var6 = var0.isConstant("com.google.javascript.rhino.EcmaError: : hi!");
//     com.google.javascript.rhino.Node var7 = null;
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     var11.setType(10);
//     var11.setOptionalArg(false);
//     java.lang.String var16 = var0.extractClassNameIfProvide(var7, var11);
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var21 = var20.getType();
//     int var22 = var20.getChildCount();
//     boolean var23 = var20.hasOneChild();
//     var11.addChildrenToFront(var20);
//     com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var30 = var29.getType();
//     java.lang.String var31 = var29.getQualifiedName();
//     com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var40 = var35.clonePropsFrom(var39);
//     com.google.javascript.rhino.Node var41 = var29.clonePropsFrom(var39);
//     com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var50 = var45.clonePropsFrom(var49);
//     com.google.javascript.rhino.jstype.JSType var51 = null;
//     var50.setJSType(var51);
//     java.util.Collection var53 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var50);
//     boolean var54 = var50.isSyntheticBlock();
//     com.google.javascript.rhino.Node var57 = new com.google.javascript.rhino.Node(100, var39, var50, 1, (-1));
//     com.google.javascript.jscomp.ClosureCodingConvention var58 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     java.lang.String var59 = var58.getGlobalObject();
//     java.lang.String var60 = var58.getExportPropertyFunction();
//     java.lang.String var61 = var58.getDelegateSuperclassName();
//     java.lang.String var62 = var58.getExportSymbolFunction();
//     com.google.javascript.rhino.jstype.ObjectType var63 = null;
//     com.google.javascript.rhino.jstype.ObjectType var64 = null;
//     com.google.javascript.rhino.jstype.ObjectType var65 = null;
//     com.google.javascript.rhino.jstype.FunctionType var66 = null;
//     com.google.javascript.rhino.jstype.FunctionType var67 = null;
//     var58.applyDelegateRelationship(var63, var64, var65, var66, var67);
//     com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.Node.newString("goog.exportSymbol");
//     java.util.Collection var72 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var71);
//     int var73 = var71.getSourcePosition();
//     com.google.javascript.rhino.Node var74 = new com.google.javascript.rhino.Node((-1), var71);
//     com.google.javascript.rhino.Node var78 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var82 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var83 = var78.clonePropsFrom(var82);
//     int var85 = var82.getIntProp(10);
//     java.lang.String var86 = var58.extractClassNameIfProvide(var71, var82);
//     var20.addChildBefore(var57, var71);
// 
//   }

  public void test151() {}
//   public void test151() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test151"); }
// 
// 
//     com.google.javascript.rhino.Context var0 = com.google.javascript.rhino.Context.enter();
//     boolean var1 = var0.isGeneratingDebugChanged();
//     var0.setGeneratingSource(true);
//     int var4 = var0.getOptimizationLevel();
//     boolean var5 = var0.isGeneratingSource();
//     com.google.javascript.jscomp.MessageFormatter var7 = null;
//     java.util.logging.Logger var8 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var9 = new com.google.javascript.jscomp.LoggerErrorManager(var7, var8);
//     int var10 = var9.getWarningCount();
//     var0.putThreadLocal((java.lang.Object)(-1.0f), (java.lang.Object)var9);
//     com.google.javascript.jscomp.Compiler var12 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var9);
//     boolean var13 = var12.isTypeCheckingEnabled();
// 
//   }

  public void test152() {}
//   public void test152() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test152"); }
// 
// 
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       com.google.javascript.rhino.EvaluatorException var5 = com.google.javascript.rhino.Context.reportRuntimeError("eol", ": WARNING - hi!\n", 40, "null(null)", 0);
//       fail("Expected exception of type com.google.javascript.rhino.EvaluatorException");
//     } catch (com.google.javascript.rhino.EvaluatorException e) {
//       // Expected exception.
//     }
// 
//   }

  public void test153() {}
//   public void test153() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test153"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile.Generator var1 = null;
//     com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var1);
//     com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var2, true);
//     com.google.javascript.jscomp.MessageFormatter var5 = null;
//     java.util.logging.Logger var6 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var7 = new com.google.javascript.jscomp.LoggerErrorManager(var5, var6);
//     var4.setErrorManager((com.google.javascript.jscomp.ErrorManager)var7);
//     com.google.javascript.jscomp.Compiler var9 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var7);
//     java.lang.String var10 = var9.toSource();
// 
//   }

  public void test154() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test154"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
    var0.disableThreads();
    var0.disableThreads();
    com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
    com.google.javascript.jscomp.NodeTraversal var5 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var4);
    com.google.javascript.jscomp.SourceFile.Generator var7 = null;
    com.google.javascript.jscomp.JSSourceFile var8 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var7);
    com.google.javascript.jscomp.CompilerInput var10 = new com.google.javascript.jscomp.CompilerInput(var8, true);
    com.google.javascript.jscomp.MessageFormatter var11 = null;
    java.util.logging.Logger var12 = null;
    com.google.javascript.jscomp.LoggerErrorManager var13 = new com.google.javascript.jscomp.LoggerErrorManager(var11, var12);
    var10.setErrorManager((com.google.javascript.jscomp.ErrorManager)var13);
    int var15 = var13.getWarningCount();
    var0.setErrorManager((com.google.javascript.jscomp.ErrorManager)var13);
    com.google.javascript.jscomp.Compiler var17 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var18 = var17.getTopScope();
    var17.disableThreads();
    var17.disableThreads();
    com.google.javascript.jscomp.MessageFormatter var21 = null;
    java.util.logging.Logger var22 = null;
    com.google.javascript.jscomp.LoggerErrorManager var23 = new com.google.javascript.jscomp.LoggerErrorManager(var21, var22);
    com.google.javascript.jscomp.CheckLevel var24 = null;
    com.google.javascript.rhino.Node var26 = null;
    com.google.javascript.jscomp.CheckLevel var28 = null;
    com.google.javascript.jscomp.DiagnosticType var30 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var28, "hi!");
    java.lang.String[] var32 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var33 = com.google.javascript.jscomp.JSError.make("", var26, var30, var32);
    var23.report(var24, var33);
    var17.setErrorManager((com.google.javascript.jscomp.ErrorManager)var23);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var37 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var38 = var37.getNodes();
    java.util.List var39 = var37.getEdges();
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var43.setType(10);
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var39, var43, 1, 100);
    com.google.javascript.jscomp.ComposeWarningsGuard var49 = new com.google.javascript.jscomp.ComposeWarningsGuard(var39);
    com.google.javascript.jscomp.NodeTraversal.Callback var50 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var17, var39, var50);
    com.google.javascript.jscomp.Compiler var52 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var53 = var52.getTopScope();
    var52.disableThreads();
    var52.disableThreads();
    com.google.javascript.jscomp.MessageFormatter var56 = null;
    java.util.logging.Logger var57 = null;
    com.google.javascript.jscomp.LoggerErrorManager var58 = new com.google.javascript.jscomp.LoggerErrorManager(var56, var57);
    com.google.javascript.jscomp.CheckLevel var59 = null;
    com.google.javascript.rhino.Node var61 = null;
    com.google.javascript.jscomp.CheckLevel var63 = null;
    com.google.javascript.jscomp.DiagnosticType var65 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var63, "hi!");
    java.lang.String[] var67 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var68 = com.google.javascript.jscomp.JSError.make("", var61, var65, var67);
    var58.report(var59, var68);
    var52.setErrorManager((com.google.javascript.jscomp.ErrorManager)var58);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var72 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var73 = var72.getNodes();
    java.util.List var74 = var72.getEdges();
    com.google.javascript.rhino.Node var78 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var78.setType(10);
    com.google.javascript.rhino.Node var83 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var74, var78, 1, 100);
    com.google.javascript.jscomp.ComposeWarningsGuard var84 = new com.google.javascript.jscomp.ComposeWarningsGuard(var74);
    com.google.javascript.jscomp.NodeTraversal.Callback var85 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var52, var74, var85);
    com.google.javascript.jscomp.CompilerOptions var87 = new com.google.javascript.jscomp.CompilerOptions();
    var87.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var90 = null;
    var87.setAliasTransformationHandler(var90);
    var87.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var94 = var87.getTweakProcessing();
    var0.initModules(var39, var74, var87);
    var87.setRemoveAbstractMethods(true);
    var87.setShadowVariables(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test155() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test155"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isPrivate("");
    java.lang.String var3 = var0.getExportSymbolFunction();
    boolean var5 = var0.isSuperClassReference("");
    java.util.Collection var6 = var0.getAssertionFunctions();
    java.lang.String var7 = var0.getDelegateSuperclassName();
    java.lang.String var8 = var0.getGlobalObject();
    boolean var11 = var0.isExported("null(null)", false);
    java.lang.String var12 = var0.getExportPropertyFunction();
    com.google.javascript.jscomp.Compiler var13 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var14 = var13.getTopScope();
    var13.disableThreads();
    var13.disableThreads();
    com.google.javascript.jscomp.NodeTraversal.Callback var17 = null;
    com.google.javascript.jscomp.NodeTraversal var18 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var13, var17);
    com.google.javascript.rhino.Node var19 = var18.getEnclosingFunction();
    java.lang.String var20 = var18.getSourceName();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var29 = var24.clonePropsFrom(var28);
    com.google.javascript.rhino.Node var31 = var28.getAncestor(0);
    boolean var32 = var28.isQualifiedName();
    java.lang.String var33 = var28.toStringTree();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast var34 = var0.getObjectLiteralCast(var18, var28);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "goog.exportSymbol"+ "'", var3.equals("goog.exportSymbol"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "goog.global"+ "'", var8.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "goog.exportProperty"+ "'", var12.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + ""+ "'", var20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "STRING \n"+ "'", var33.equals("STRING \n"));

  }

  public void test156() {}
//   public void test156() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test156"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.JSSourceFile var4 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
//     com.google.javascript.rhino.Node var5 = var1.parse(var4);
//     boolean var6 = var1.isTypeCheckingEnabled();
//     var1.disableThreads();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     var8.clearEdgeAnnotations();
//     com.google.javascript.jscomp.Compiler var10 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var11 = var10.getTopScope();
//     com.google.javascript.jscomp.SourceMap var12 = var10.getSourceMap();
//     com.google.javascript.jscomp.JSSourceFile var15 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
//     com.google.javascript.jscomp.SourceFile.Generator var17 = null;
//     com.google.javascript.jscomp.JSSourceFile var18 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var17);
//     com.google.javascript.jscomp.CompilerInput var20 = new com.google.javascript.jscomp.CompilerInput(var18, true);
//     com.google.javascript.jscomp.CompilerOptions var21 = new com.google.javascript.jscomp.CompilerOptions();
//     var21.setAcceptConstKeyword(true);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var24 = var21.getTweakProcessing();
//     var21.setRewriteNewDateGoogNow(false);
//     com.google.javascript.jscomp.Result var27 = var10.compile(var15, var18, var21);
//     com.google.javascript.jscomp.LightweightMessageFormatter var28 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var10);
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var29 = var8.createDirectedGraphNode((java.lang.Object)var28);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var31 = var30.newSubGraph();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var32 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var33 = var32.newSubGraph();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var35 = var32.createDirectedGraphNode((java.lang.Object)100);
//     java.util.List var36 = var30.getDirectedPredNodes(var35);
//     com.google.javascript.jscomp.JSModuleGraph var37 = new com.google.javascript.jscomp.JSModuleGraph(var36);
//     com.google.javascript.jscomp.ComposeWarningsGuard var38 = new com.google.javascript.jscomp.ComposeWarningsGuard(var36);
//     com.google.javascript.rhino.Context var39 = null;
//     com.google.javascript.rhino.Context var40 = com.google.javascript.rhino.Context.enter(var39);
//     var40.setCompileFunctionsWithDynamicScope(false);
//     com.google.javascript.jscomp.MessageFormatter var43 = null;
//     java.util.logging.Logger var44 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var45 = new com.google.javascript.jscomp.LoggerErrorManager(var43, var44);
//     com.google.javascript.jscomp.CheckLevel var46 = null;
//     com.google.javascript.rhino.Node var48 = null;
//     com.google.javascript.jscomp.CheckLevel var50 = null;
//     com.google.javascript.jscomp.DiagnosticType var52 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var50, "hi!");
//     java.lang.String[] var54 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var55 = com.google.javascript.jscomp.JSError.make("", var48, var52, var54);
//     var45.report(var46, var55);
//     var40.removeThreadLocal((java.lang.Object)var55);
//     com.google.javascript.jscomp.DiagnosticType var58 = var55.getType();
//     com.google.javascript.jscomp.CheckLevel var59 = var38.level(var55);
//     java.lang.String var60 = var28.formatWarning(var55);
//     com.google.javascript.jscomp.CheckLevel var61 = var1.getErrorLevel(var55);
//     java.lang.String var64 = var1.getSourceLine("null(null)", 100);
// 
//   }

  public void test157() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test157"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isPrivate("");
    com.google.javascript.rhino.jstype.FunctionType var3 = null;
    com.google.javascript.rhino.jstype.FunctionType var4 = null;
    com.google.javascript.jscomp.CodingConvention.SubclassType var5 = null;
    var0.applySubclassRelationship(var3, var4, var5);
    java.lang.String var7 = var0.getExportSymbolFunction();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var12 = var11.getType();
    int var13 = var11.getChildCount();
    boolean var14 = var11.hasOneChild();
    boolean var15 = var0.isOptionalParameter(var11);
    java.util.Set var16 = var11.getDirectives();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "goog.exportSymbol"+ "'", var7.equals("goog.exportSymbol"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test158() {}
//   public void test158() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test158"); }
// 
// 
//     com.google.javascript.jscomp.CheckLevel var3 = null;
//     com.google.javascript.rhino.Node var5 = null;
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     com.google.javascript.jscomp.DiagnosticType var9 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var7, "hi!");
//     java.lang.String[] var11 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var12 = com.google.javascript.jscomp.JSError.make("", var5, var9, var11);
//     java.lang.String[] var14 = new java.lang.String[] { "goog.exportProperty"};
//     com.google.javascript.jscomp.JSError var15 = com.google.javascript.jscomp.JSError.make("eof", 1, 40, var3, var9, var14);
//     com.google.javascript.jscomp.Compiler var16 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var17 = var16.getTopScope();
//     var16.disableThreads();
//     var16.disableThreads();
//     com.google.javascript.jscomp.NodeTraversal.Callback var20 = null;
//     com.google.javascript.jscomp.NodeTraversal var21 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var16, var20);
//     com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var27 = var26.getType();
//     java.lang.String var28 = var26.getQualifiedName();
//     com.google.javascript.rhino.Node var29 = new com.google.javascript.rhino.Node(100, var26);
//     com.google.javascript.jscomp.CheckLevel var30 = null;
//     com.google.javascript.jscomp.DiagnosticType var33 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
//     java.lang.String[] var35 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var36 = var21.makeError(var26, var30, var33, var35);
//     java.lang.String var37 = var33.toString();
//     int var38 = var9.compareTo(var33);
//     com.google.javascript.jscomp.DiagnosticType var39 = null;
//     int var40 = var9.compareTo(var39);
// 
//   }

  public void test159() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test159"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isPrivate("");
    boolean var4 = var0.isPrivate("goog.exportProperty");
    boolean var6 = var0.isConstant("");
    java.lang.String var7 = var0.getExportSymbolFunction();
    boolean var9 = var0.isPrivate("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "goog.exportSymbol"+ "'", var7.equals("goog.exportSymbol"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test160() {}
//   public void test160() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test160"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     com.google.javascript.jscomp.CompilerInput var3 = var0.newExternInput("goog.global");
// 
//   }

  public void test161() {}
//   public void test161() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test161"); }
// 
// 
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       com.google.javascript.rhino.EvaluatorException var1 = com.google.javascript.rhino.Context.reportRuntimeError("string");
//       fail("Expected exception of type com.google.javascript.rhino.EvaluatorException");
//     } catch (com.google.javascript.rhino.EvaluatorException e) {
//       // Expected exception.
//     }
// 
//   }

  public void test162() {}
//   public void test162() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test162"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.CheckLevel var3 = null;
//     com.google.javascript.rhino.Node var5 = null;
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     com.google.javascript.jscomp.DiagnosticType var9 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var7, "hi!");
//     java.lang.String[] var11 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var12 = com.google.javascript.jscomp.JSError.make("", var5, var9, var11);
//     var2.report(var3, var12);
//     var2.generateReport();
// 
//   }

  public void test163() {}
//   public void test163() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test163"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setAcceptConstKeyword(true);
//     var0.setTweakToStringLiteral("goog.exportProperty", "goog.exportSymbol");
//     var0.setShadowVariables(true);
//     var0.setDefineToDoubleLiteral("hi!", 1.0d);
//     java.util.Map var11 = var0.getDefineReplacements();
//     com.google.javascript.jscomp.ClosureCodingConvention var12 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var14 = var12.isPrivate("");
//     boolean var16 = var12.isPrivate("goog.exportProperty");
//     boolean var18 = var12.isConstant("com.google.javascript.rhino.EcmaError: : hi!");
//     com.google.javascript.rhino.jstype.FunctionType var19 = null;
//     com.google.javascript.rhino.jstype.FunctionType var20 = null;
//     com.google.javascript.jscomp.CodingConvention.SubclassType var21 = null;
//     var12.applySubclassRelationship(var19, var20, var21);
//     com.google.javascript.rhino.jstype.ObjectType var23 = null;
//     com.google.javascript.rhino.jstype.ObjectType var24 = null;
//     com.google.javascript.rhino.jstype.ObjectType var25 = null;
//     com.google.javascript.rhino.jstype.FunctionType var26 = null;
//     com.google.javascript.rhino.jstype.FunctionType var27 = null;
//     var12.applyDelegateRelationship(var23, var24, var25, var26, var27);
//     boolean var30 = var12.isExported("com.google.javascript.rhino.EcmaError: TypeError: Cannot set property \"hi!: hi!\" of 0 to \"40\"");
//     var0.setCodingConvention((com.google.javascript.jscomp.CodingConvention)var12);
//     com.google.javascript.jscomp.ClosureCodingConvention var32 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var41 = var36.clonePropsFrom(var40);
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     var40.setJSType(var42);
//     var40.setOptionalArg(true);
//     java.lang.String var46 = var32.identifyTypeDefAssign(var40);
//     java.util.List var47 = var12.identifyTypeDeclarationCall(var40);
// 
//   }

  public void test164() {}
//   public void test164() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test164"); }
// 
// 
//     java.io.InputStream var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromInputStream("string", var1);
// 
//   }

  public void test165() {}
//   public void test165() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test165"); }
// 
// 
//     com.google.javascript.rhino.Context var0 = null;
//     com.google.javascript.rhino.Context var1 = com.google.javascript.rhino.Context.enter(var0);
//     var1.setCompileFunctionsWithDynamicScope(false);
//     com.google.javascript.jscomp.MessageFormatter var4 = null;
//     java.util.logging.Logger var5 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var6 = new com.google.javascript.jscomp.LoggerErrorManager(var4, var5);
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     com.google.javascript.rhino.Node var9 = null;
//     com.google.javascript.jscomp.CheckLevel var11 = null;
//     com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var11, "hi!");
//     java.lang.String[] var15 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", var9, var13, var15);
//     var6.report(var7, var16);
//     var1.removeThreadLocal((java.lang.Object)var16);
//     int var19 = var1.getInstructionObserverThreshold();
//     var1.addActivationName("goog.exportProperty");
//     int var22 = var1.getLanguageVersion();
//     int var23 = var1.getLanguageVersion();
//     var1.setCompileFunctionsWithDynamicScope(true);
//     com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var34 = var29.clonePropsFrom(var33);
//     com.google.javascript.rhino.Node var36 = var33.getAncestor(0);
//     boolean var37 = var33.isQualifiedName();
//     com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     var41.setType(10);
//     boolean var44 = var41.isLocalResultCall();
//     boolean var45 = var41.isUnscopedQualifiedName();
//     var41.setWasEmptyNode(false);
//     com.google.javascript.rhino.Node var48 = var33.copyInformationFrom(var41);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var1.unseal((java.lang.Object)var33);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var37 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var44 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var45 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
// 
//   }

  public void test166() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test166"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    var0.clearEdgeAnnotations();
    com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var3 = var2.getTopScope();
    com.google.javascript.jscomp.SourceMap var4 = var2.getSourceMap();
    com.google.javascript.jscomp.JSSourceFile var7 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.SourceFile.Generator var9 = null;
    com.google.javascript.jscomp.JSSourceFile var10 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var9);
    com.google.javascript.jscomp.CompilerInput var12 = new com.google.javascript.jscomp.CompilerInput(var10, true);
    com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
    var13.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var16 = var13.getTweakProcessing();
    var13.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.Result var19 = var2.compile(var7, var10, var13);
    com.google.javascript.jscomp.LightweightMessageFormatter var20 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var2);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var21 = var0.createDirectedGraphNode((java.lang.Object)var20);
    com.google.javascript.jscomp.DiagnosticType var24 = com.google.javascript.jscomp.DiagnosticType.error("", "com.google.javascript.rhino.EcmaError: TypeError: hi! is not a function, it is com.google.javascript.jscomp.graph.LinkedDirectedGraph.");
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var29 = var28.getType();
    int var30 = var28.getSourcePosition();
    boolean var31 = var28.isVarArgs();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var32 = var0.isConnectedInDirection((java.lang.Object)var24, (java.lang.Object)var28);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test167() {}
//   public void test167() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test167"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.disabled("STRING ", "");
//     com.google.javascript.jscomp.DiagnosticType var8 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
//     com.google.javascript.jscomp.DiagnosticType var14 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
//     java.lang.String[] var16 = new java.lang.String[] { "hi!: hi!"};
//     com.google.javascript.jscomp.JSError var17 = com.google.javascript.jscomp.JSError.make("hi!. hi! at (unknown source) line (unknown line) : (unknown column)", 40, 0, var14, var16);
//     com.google.javascript.jscomp.JSError var18 = com.google.javascript.jscomp.JSError.make("()", (-1), 10, var8, var16);
//     com.google.javascript.jscomp.JSError var19 = com.google.javascript.jscomp.JSError.make(var2, var16);
//     com.google.javascript.jscomp.CheckLevel var20 = null;
//     com.google.javascript.jscomp.Compiler var21 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var22 = var21.getTopScope();
//     var21.disableThreads();
//     var21.disableThreads();
//     com.google.javascript.jscomp.MessageFormatter var25 = null;
//     java.util.logging.Logger var26 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var27 = new com.google.javascript.jscomp.LoggerErrorManager(var25, var26);
//     com.google.javascript.jscomp.CheckLevel var28 = null;
//     com.google.javascript.rhino.Node var30 = null;
//     com.google.javascript.jscomp.CheckLevel var32 = null;
//     com.google.javascript.jscomp.DiagnosticType var34 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var32, "hi!");
//     java.lang.String[] var36 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var37 = com.google.javascript.jscomp.JSError.make("", var30, var34, var36);
//     var27.report(var28, var37);
//     var21.setErrorManager((com.google.javascript.jscomp.ErrorManager)var27);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var41 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.Collection var42 = var41.getNodes();
//     java.util.List var43 = var41.getEdges();
//     com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     var47.setType(10);
//     com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var43, var47, 1, 100);
//     com.google.javascript.jscomp.ComposeWarningsGuard var53 = new com.google.javascript.jscomp.ComposeWarningsGuard(var43);
//     com.google.javascript.jscomp.NodeTraversal.Callback var54 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var21, var43, var54);
//     com.google.javascript.jscomp.LightweightMessageFormatter var56 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var21);
//     com.google.javascript.jscomp.MessageFormatter var57 = null;
//     java.util.logging.Logger var58 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var59 = new com.google.javascript.jscomp.LoggerErrorManager(var57, var58);
//     com.google.javascript.jscomp.CheckLevel var60 = null;
//     com.google.javascript.rhino.Node var62 = null;
//     com.google.javascript.jscomp.CheckLevel var64 = null;
//     com.google.javascript.jscomp.DiagnosticType var66 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var64, "hi!");
//     java.lang.String[] var68 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var69 = com.google.javascript.jscomp.JSError.make("", var62, var66, var68);
//     var59.report(var60, var69);
//     java.lang.String var71 = var56.formatWarning(var69);
//     java.lang.String var72 = var19.format(var20, (com.google.javascript.jscomp.MessageFormatter)var56);
// 
//   }

  public void test168() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test168"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var2 = com.google.javascript.rhino.ScriptRuntime.escapeString("goog.global", 'a');
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }

  }

  public void test169() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test169"); }


    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var5 = var4.getType();
    com.google.javascript.rhino.Node var6 = var4.cloneTree();
    var4.addSuppression("");
    int var9 = var4.getType();
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.NodeUtil.newExpr(var4);
    var10.setLineno((-1));
    var10.setWasEmptyNode(false);
    com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(10, var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.NodeUtil.newExpr(var10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test170() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test170"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var8 = var3.clonePropsFrom(var7);
    com.google.javascript.rhino.Node var10 = var7.getAncestor(0);
    boolean var11 = var7.isQualifiedName();
    java.lang.String var12 = var7.toStringTree();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.setDouble(10.0d);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "STRING \n"+ "'", var12.equals("STRING \n"));

  }

  public void test171() {}
//   public void test171() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test171"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile.Generator var1 = null;
//     com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var1);
//     com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var2, true);
//     com.google.javascript.jscomp.SourceFile.Generator var6 = null;
//     com.google.javascript.jscomp.SourceFile var7 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var6);
//     com.google.javascript.jscomp.JsAst var8 = new com.google.javascript.jscomp.JsAst(var7);
//     var4.setSourceFile(var7);
//     com.google.javascript.jscomp.JSModule var10 = null;
//     var4.setModule(var10);
//     java.lang.String var12 = var4.getName();
//     com.google.javascript.jscomp.CompilerInput var13 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var4);
//     com.google.javascript.jscomp.CompilerInput var14 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var13);
//     com.google.javascript.jscomp.Region var16 = var14.getRegion(0);
// 
//   }

  public void test172() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test172"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = null;
    boolean var3 = var1.isVarArgsParameter(var2);
    java.lang.String var4 = var1.getExportSymbolFunction();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var6 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var7 = var6.getNodes();
    java.util.List var8 = var6.getEdges();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var12.setType(10);
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var8, var12, 1, 100);
    java.lang.String var18 = var1.getSingletonGetterClassName(var17);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var19 = var0.createDirectedGraphNode((java.lang.Object)var1);
    com.google.javascript.rhino.EcmaError var26 = com.google.javascript.rhino.ScriptRuntime.constructError("", "hi!", "hi!", (-1), "hi!", 1);
    java.lang.String var27 = var26.toString();
    var26.initLineNumber(100);
    java.lang.String var30 = var26.details();
    java.lang.String var31 = var26.details();
    java.io.FilenameFilter var32 = null;
    java.lang.String var33 = var26.getScriptStackTrace(var32);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var34 = var0.getNodeDegree((java.lang.Object)var26);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "goog.exportSymbol"+ "'", var4.equals("goog.exportSymbol"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "com.google.javascript.rhino.EcmaError: : hi!"+ "'", var27.equals("com.google.javascript.rhino.EcmaError: : hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ": hi!"+ "'", var30.equals(": hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + ": hi!"+ "'", var31.equals(": hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "<No stack trace available>"+ "'", var33.equals("<No stack trace available>"));

  }

  public void test173() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test173"); }


    com.google.javascript.jscomp.CheckLevel var1 = null;
    com.google.javascript.jscomp.DiagnosticType var3 = com.google.javascript.jscomp.DiagnosticType.make("goog.abstractMethod", var1, "");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test174() {}
//   public void test174() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test174"); }
// 
// 
//     java.io.InputStream var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromInputStream("bitxor", var1);
// 
//   }

  public void test175() {}
//   public void test175() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test175"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile.Generator var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var1);
//     com.google.javascript.jscomp.JsAst var3 = new com.google.javascript.jscomp.JsAst(var2);
//     com.google.javascript.jscomp.SourceFile.Generator var5 = null;
//     com.google.javascript.jscomp.SourceFile var6 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var5);
//     var3.setSourceFile(var6);
//     java.lang.String var8 = com.google.javascript.rhino.ScriptRuntime.toString((java.lang.Object)var3);
//     com.google.javascript.jscomp.Compiler var9 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var10 = var9.getTopScope();
//     var9.disableThreads();
//     var9.disableThreads();
//     com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
//     var13.setAcceptConstKeyword(true);
//     java.util.Map var16 = var13.getTweakReplacements();
//     var13.setDefineToNumberLiteral("eof", 1);
//     com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var20 = null;
//     var13.setAliasTransformationHandler(var20);
//     var9.initOptions(var13);
//     boolean var23 = var9.hasErrors();
//     com.google.javascript.rhino.Node var24 = var3.getAstRoot((com.google.javascript.jscomp.AbstractCompiler)var9);
// 
//   }

  public void test176() {}
//   public void test176() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test176"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var1 = var0.newSubGraph();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var3 = var0.createDirectedGraphNode((java.lang.Object)100);
//     java.util.List var4 = var0.getGraphvizNodes();
//     var0.clearNodeAnnotations();
//     var0.pushNodeAnnotations();
//     java.util.List var7 = var0.getGraphvizEdges();
//     var0.pushEdgeAnnotations();
//     com.google.javascript.jscomp.Compiler var9 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var10 = var9.getTopScope();
//     var9.disableThreads();
//     var9.disableThreads();
//     com.google.javascript.jscomp.NodeTraversal.Callback var13 = null;
//     com.google.javascript.jscomp.NodeTraversal var14 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var9, var13);
//     com.google.javascript.rhino.Node var15 = var14.getEnclosingFunction();
//     com.google.javascript.jscomp.Compiler var16 = var14.getCompiler();
//     com.google.javascript.rhino.Node var17 = null;
//     com.google.javascript.rhino.Context var18 = null;
//     com.google.javascript.rhino.Context var19 = com.google.javascript.rhino.Context.enter(var18);
//     var19.setCompileFunctionsWithDynamicScope(false);
//     com.google.javascript.jscomp.MessageFormatter var22 = null;
//     java.util.logging.Logger var23 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var24 = new com.google.javascript.jscomp.LoggerErrorManager(var22, var23);
//     com.google.javascript.jscomp.CheckLevel var25 = null;
//     com.google.javascript.rhino.Node var27 = null;
//     com.google.javascript.jscomp.CheckLevel var29 = null;
//     com.google.javascript.jscomp.DiagnosticType var31 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var29, "hi!");
//     java.lang.String[] var33 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var34 = com.google.javascript.jscomp.JSError.make("", var27, var31, var33);
//     var24.report(var25, var34);
//     var19.removeThreadLocal((java.lang.Object)var34);
//     com.google.javascript.jscomp.DiagnosticType var37 = var34.getType();
//     com.google.javascript.jscomp.DiagnosticType var43 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
//     java.lang.String[] var45 = new java.lang.String[] { "hi!: hi!"};
//     com.google.javascript.jscomp.JSError var46 = com.google.javascript.jscomp.JSError.make("hi!. hi! at (unknown source) line (unknown line) : (unknown column)", 40, 0, var43, var45);
//     com.google.javascript.jscomp.JSError var47 = var14.makeError(var17, var37, var45);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var0.disconnectInDirection((java.lang.Object)var37, (java.lang.Object)false);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var45);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
// 
//   }

  public void test177() {}
//   public void test177() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test177"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     var0.disableThreads();
//     var0.disableThreads();
//     com.google.javascript.jscomp.MessageFormatter var4 = null;
//     java.util.logging.Logger var5 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var6 = new com.google.javascript.jscomp.LoggerErrorManager(var4, var5);
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     com.google.javascript.rhino.Node var9 = null;
//     com.google.javascript.jscomp.CheckLevel var11 = null;
//     com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var11, "hi!");
//     java.lang.String[] var15 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", var9, var13, var15);
//     var6.report(var7, var16);
//     var0.setErrorManager((com.google.javascript.jscomp.ErrorManager)var6);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.Collection var21 = var20.getNodes();
//     java.util.List var22 = var20.getEdges();
//     com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     var26.setType(10);
//     com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var22, var26, 1, 100);
//     com.google.javascript.jscomp.ComposeWarningsGuard var32 = new com.google.javascript.jscomp.ComposeWarningsGuard(var22);
//     com.google.javascript.jscomp.NodeTraversal.Callback var33 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var0, var22, var33);
//     com.google.javascript.jscomp.LightweightMessageFormatter var35 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0);
//     com.google.javascript.rhino.Node var36 = var0.getRoot();
//     com.google.javascript.jscomp.SourceMap var37 = var0.getSourceMap();
//     boolean var38 = var0.hasErrors();
// 
//   }

  public void test178() {}
//   public void test178() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test178"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var2 = null;
//     boolean var3 = var1.isVarArgsParameter(var2);
//     java.lang.String var4 = var1.getExportSymbolFunction();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var6 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.Collection var7 = var6.getNodes();
//     java.util.List var8 = var6.getEdges();
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     var12.setType(10);
//     com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var8, var12, 1, 100);
//     java.lang.String var18 = var1.getSingletonGetterClassName(var17);
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var19 = var0.createDirectedGraphNode((java.lang.Object)var1);
//     com.google.javascript.rhino.Context var20 = null;
//     com.google.javascript.rhino.Context var21 = com.google.javascript.rhino.Context.enter(var20);
//     var21.setCompileFunctionsWithDynamicScope(false);
//     com.google.javascript.jscomp.MessageFormatter var24 = null;
//     java.util.logging.Logger var25 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var26 = new com.google.javascript.jscomp.LoggerErrorManager(var24, var25);
//     com.google.javascript.jscomp.CheckLevel var27 = null;
//     com.google.javascript.rhino.Node var29 = null;
//     com.google.javascript.jscomp.CheckLevel var31 = null;
//     com.google.javascript.jscomp.DiagnosticType var33 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var31, "hi!");
//     java.lang.String[] var35 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var36 = com.google.javascript.jscomp.JSError.make("", var29, var33, var35);
//     var26.report(var27, var36);
//     var21.removeThreadLocal((java.lang.Object)var36);
//     com.google.javascript.jscomp.DiagnosticType var39 = var36.getType();
//     java.lang.String var40 = var36.toString();
//     com.google.javascript.jscomp.CompilerOptions var41 = new com.google.javascript.jscomp.CompilerOptions();
//     var41.setAcceptConstKeyword(true);
//     var41.setTweakToStringLiteral("goog.exportProperty", "goog.exportSymbol");
//     var41.setShadowVariables(true);
//     var41.setDefineToDoubleLiteral("hi!", 1.0d);
//     java.util.Map var52 = var41.getDefineReplacements();
//     boolean var53 = var36.equals((java.lang.Object)var41);
//     com.google.javascript.jscomp.SourceFile.Generator var55 = null;
//     com.google.javascript.jscomp.JSSourceFile var56 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var55);
//     com.google.javascript.jscomp.CompilerInput var58 = new com.google.javascript.jscomp.CompilerInput(var56, true);
//     com.google.javascript.jscomp.SourceFile.Generator var60 = null;
//     com.google.javascript.jscomp.SourceFile var61 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var60);
//     com.google.javascript.jscomp.JsAst var62 = new com.google.javascript.jscomp.JsAst(var61);
//     com.google.javascript.jscomp.SourceFile.Generator var64 = null;
//     com.google.javascript.jscomp.SourceFile var65 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var64);
//     var62.setSourceFile(var65);
//     java.lang.String var67 = com.google.javascript.rhino.ScriptRuntime.toString((java.lang.Object)var62);
//     com.google.javascript.jscomp.SourceFile var68 = var62.getSourceFile();
//     var62.clearAst();
//     var62.clearAst();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       boolean var71 = var0.isConnectedInDirection((java.lang.Object)var41, (java.lang.Object)var58, (java.lang.Object)var62);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var4 + "' != '" + "goog.exportSymbol"+ "'", var4.equals("goog.exportSymbol"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var40 + "' != '" + "hi!. hi! at (unknown source) line (unknown line) : (unknown column)"+ "'", var40.equals("hi!. hi! at (unknown source) line (unknown line) : (unknown column)"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var53 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var61);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var65);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var68);
// 
//   }

  public void test179() {}
//   public void test179() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test179"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.Collection var4 = var3.getNodes();
//     java.util.List var5 = var3.getEdges();
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     var9.setType(10);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var5, var9, 1, 100);
//     com.google.javascript.jscomp.NodeTraversal.Callback var15 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var5, var15);
//     com.google.javascript.rhino.Context var17 = com.google.javascript.rhino.Context.enter();
//     boolean var18 = var17.isGeneratingDebugChanged();
//     var17.setGeneratingSource(true);
//     int var21 = var17.getOptimizationLevel();
//     boolean var22 = var17.isGeneratingSource();
//     com.google.javascript.jscomp.MessageFormatter var24 = null;
//     java.util.logging.Logger var25 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var26 = new com.google.javascript.jscomp.LoggerErrorManager(var24, var25);
//     int var27 = var26.getWarningCount();
//     var17.putThreadLocal((java.lang.Object)(-1.0f), (java.lang.Object)var26);
//     var1.setErrorManager((com.google.javascript.jscomp.ErrorManager)var26);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var30 = var1.getTypeRegistry();
// 
//   }

  public void test180() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test180"); }


    java.lang.String var2 = com.google.javascript.rhino.ScriptRuntime.numberToString(0.0d, 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "0"+ "'", var2.equals("0"));

  }

  public void test181() {}
//   public void test181() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test181"); }
// 
// 
//     com.google.javascript.rhino.Context var0 = com.google.javascript.rhino.Context.enter();
//     var0.setInstructionObserverThreshold(0);
//     boolean var3 = var0.isGeneratingSource();
//     java.lang.Object var4 = var0.getDebuggerContextData();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var4);
// 
//   }

  public void test182() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test182"); }


    java.lang.String var1 = com.google.javascript.rhino.Node.tokenToName(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "or"+ "'", var1.equals("or"));

  }

  public void test183() {}
//   public void test183() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test183"); }
// 
// 
//     com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var2);
//     com.google.javascript.jscomp.CompilerInput var5 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var3, false);
//     java.util.Collection var6 = var3.getRequires();
// 
//   }

  public void test184() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test184"); }


    com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var2);
    com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
    com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var6 = var5.getTopScope();
    com.google.javascript.jscomp.SourceMap var7 = var5.getSourceMap();
    var5.reportCodeChange();
    var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var10 = var3.getPathRelativeToClosureBase();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test185() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test185"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
    var0.disableThreads();
    var0.disableThreads();
    com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
    com.google.javascript.jscomp.NodeTraversal var5 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var4);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var11 = var10.getType();
    java.lang.String var12 = var10.getQualifiedName();
    com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(100, var10);
    com.google.javascript.jscomp.CheckLevel var14 = null;
    com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
    java.lang.String[] var19 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var20 = var5.makeError(var10, var14, var17, var19);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var30 = var25.clonePropsFrom(var29);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var30.setJSType(var31);
    java.util.Collection var33 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var30);
    com.google.javascript.rhino.Node[] var34 = new com.google.javascript.rhino.Node[] { var30};
    com.google.javascript.rhino.Node var35 = new com.google.javascript.rhino.Node(10, var34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.traverseRoots(var34);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test186() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test186"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
    var0.disableThreads();
    var0.disableThreads();
    com.google.javascript.jscomp.MessageFormatter var4 = null;
    java.util.logging.Logger var5 = null;
    com.google.javascript.jscomp.LoggerErrorManager var6 = new com.google.javascript.jscomp.LoggerErrorManager(var4, var5);
    com.google.javascript.jscomp.CheckLevel var7 = null;
    com.google.javascript.rhino.Node var9 = null;
    com.google.javascript.jscomp.CheckLevel var11 = null;
    com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var11, "hi!");
    java.lang.String[] var15 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", var9, var13, var15);
    var6.report(var7, var16);
    var0.setErrorManager((com.google.javascript.jscomp.ErrorManager)var6);
    com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var19 = null;
    com.google.javascript.jscomp.LightweightMessageFormatter var20 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var19);
    com.google.javascript.jscomp.NodeTraversal.Callback var21 = null;
    com.google.javascript.jscomp.NodeTraversal var22 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var21);
    java.lang.String var23 = var22.getSourceName();
    com.google.javascript.jscomp.Scope var24 = var22.getScope();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var30 = var29.getType();
    com.google.javascript.rhino.Node[] var31 = new com.google.javascript.rhino.Node[] { var29};
    com.google.javascript.rhino.Node var32 = new com.google.javascript.rhino.Node(100, var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var22.traverseRoots(var31);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test187() {}
//   public void test187() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test187"); }
// 
// 
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var5 = var4.getType();
//     java.lang.String var6 = var4.getQualifiedName();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var15 = var10.clonePropsFrom(var14);
//     com.google.javascript.rhino.Node var16 = var4.clonePropsFrom(var14);
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var25 = var20.clonePropsFrom(var24);
//     com.google.javascript.rhino.jstype.JSType var26 = null;
//     var25.setJSType(var26);
//     java.util.Collection var28 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var25);
//     boolean var29 = var25.isSyntheticBlock();
//     com.google.javascript.rhino.Node var32 = new com.google.javascript.rhino.Node(100, var14, var25, 1, (-1));
//     var14.setOptionalArg(false);
//     com.google.javascript.rhino.Node.SideEffectFlags var35 = null;
//     var14.setSideEffectFlags(var35);
// 
//   }

  public void test188() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test188"); }


    com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.JsAst var3 = new com.google.javascript.jscomp.JsAst((com.google.javascript.jscomp.SourceFile)var2);
    var3.clearAst();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test189() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test189"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
    var0.disableThreads();
    var0.disableThreads();
    com.google.javascript.jscomp.MessageFormatter var4 = null;
    java.util.logging.Logger var5 = null;
    com.google.javascript.jscomp.LoggerErrorManager var6 = new com.google.javascript.jscomp.LoggerErrorManager(var4, var5);
    com.google.javascript.jscomp.CheckLevel var7 = null;
    com.google.javascript.rhino.Node var9 = null;
    com.google.javascript.jscomp.CheckLevel var11 = null;
    com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var11, "hi!");
    java.lang.String[] var15 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", var9, var13, var15);
    var6.report(var7, var16);
    var0.setErrorManager((com.google.javascript.jscomp.ErrorManager)var6);
    com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var19 = null;
    com.google.javascript.jscomp.LightweightMessageFormatter var20 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var19);
    com.google.javascript.jscomp.NodeTraversal.Callback var21 = null;
    com.google.javascript.jscomp.NodeTraversal var22 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var21);
    com.google.javascript.jscomp.ErrorManager var23 = var0.getErrorManager();
    com.google.javascript.jscomp.Compiler.CodeBuilder var24 = null;
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var30 = var29.getType();
    int var31 = var29.getSourcePosition();
    com.google.javascript.rhino.Node var32 = var29.getLastSibling();
    com.google.javascript.rhino.jstype.JSType var33 = var29.getJSType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.toSource(var24, 0, var29);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }

  public void test190() {}
//   public void test190() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test190"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     var0.disableThreads();
//     var0.disableThreads();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal var5 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var4);
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var11 = var10.getType();
//     java.lang.String var12 = var10.getQualifiedName();
//     com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(100, var10);
//     com.google.javascript.jscomp.CheckLevel var14 = null;
//     com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
//     java.lang.String[] var19 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var20 = var5.makeError(var10, var14, var17, var19);
//     com.google.javascript.jscomp.CompilerInput var21 = var5.getInput();
// 
//   }

  public void test191() {}
//   public void test191() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test191"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     com.google.javascript.jscomp.SourceMap var2 = var0.getSourceMap();
//     var0.reportCodeChange();
//     com.google.javascript.jscomp.JSSourceFile var6 = com.google.javascript.jscomp.JSSourceFile.fromCode("eol", "hi!. hi! at com.google.javascript.rhino.EcmaError: TypeError: Cannot set property \"hi!: hi!\" of 0 to \"40\" line (unknown line) : 0");
//     com.google.javascript.jscomp.Compiler var7 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var8 = var7.getTopScope();
//     var7.disableThreads();
//     var7.disableThreads();
//     com.google.javascript.jscomp.MessageFormatter var11 = null;
//     java.util.logging.Logger var12 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var13 = new com.google.javascript.jscomp.LoggerErrorManager(var11, var12);
//     com.google.javascript.jscomp.CheckLevel var14 = null;
//     com.google.javascript.rhino.Node var16 = null;
//     com.google.javascript.jscomp.CheckLevel var18 = null;
//     com.google.javascript.jscomp.DiagnosticType var20 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var18, "hi!");
//     java.lang.String[] var22 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var23 = com.google.javascript.jscomp.JSError.make("", var16, var20, var22);
//     var13.report(var14, var23);
//     var7.setErrorManager((com.google.javascript.jscomp.ErrorManager)var13);
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var26 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var27 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var7, var26);
//     com.google.javascript.jscomp.NodeTraversal.Callback var28 = null;
//     com.google.javascript.jscomp.NodeTraversal var29 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var7, var28);
//     com.google.javascript.jscomp.ErrorManager var30 = var7.getErrorManager();
//     com.google.javascript.jscomp.JSSourceFile var33 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
//     var33.clearCachedSource();
//     com.google.javascript.jscomp.JSSourceFile[] var35 = new com.google.javascript.jscomp.JSSourceFile[] { var33};
//     com.google.javascript.jscomp.Compiler var36 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var37 = var36.getTopScope();
//     com.google.javascript.jscomp.SourceMap var38 = var36.getSourceMap();
//     var36.reportCodeChange();
//     com.google.javascript.jscomp.Compiler var40 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var41 = var40.getTopScope();
//     com.google.javascript.jscomp.SourceMap var42 = var40.getSourceMap();
//     com.google.javascript.jscomp.JSSourceFile var45 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
//     com.google.javascript.jscomp.SourceFile.Generator var47 = null;
//     com.google.javascript.jscomp.JSSourceFile var48 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var47);
//     com.google.javascript.jscomp.CompilerInput var50 = new com.google.javascript.jscomp.CompilerInput(var48, true);
//     com.google.javascript.jscomp.CompilerOptions var51 = new com.google.javascript.jscomp.CompilerOptions();
//     var51.setAcceptConstKeyword(true);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var54 = var51.getTweakProcessing();
//     var51.setRewriteNewDateGoogNow(false);
//     com.google.javascript.jscomp.Result var57 = var40.compile(var45, var48, var51);
//     com.google.javascript.rhino.Node var58 = var36.parse(var45);
//     com.google.javascript.jscomp.JSSourceFile var61 = com.google.javascript.jscomp.JSSourceFile.fromCode("null(null)", "goog.global");
//     com.google.javascript.jscomp.JSSourceFile[] var62 = new com.google.javascript.jscomp.JSSourceFile[] { var61};
//     java.nio.charset.Charset var64 = null;
//     com.google.javascript.jscomp.JSSourceFile var65 = com.google.javascript.jscomp.JSSourceFile.fromFile("goog.exportProperty", var64);
//     com.google.javascript.jscomp.JSSourceFile[] var66 = new com.google.javascript.jscomp.JSSourceFile[] { var65};
//     com.google.javascript.jscomp.CompilerOptions var67 = new com.google.javascript.jscomp.CompilerOptions();
//     var67.setAcceptConstKeyword(true);
//     java.util.Map var70 = var67.getTweakReplacements();
//     var67.setDefineToNumberLiteral("eof", 1);
//     com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var74 = null;
//     var67.setAliasTransformationHandler(var74);
//     var67.setGenerateExports(false);
//     com.google.javascript.jscomp.Result var78 = var36.compile(var62, var66, var67);
//     com.google.javascript.jscomp.CompilerOptions var79 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var82 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.Collection var83 = var82.getNodes();
//     java.util.List var84 = var82.getEdges();
//     com.google.javascript.rhino.Node var88 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     var88.setType(10);
//     com.google.javascript.rhino.Node var93 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var84, var88, 1, 100);
//     var79.setReplaceStringsConfiguration("hi!", var84);
//     java.util.Map var95 = var79.getDefineReplacements();
//     var7.init(var35, var66, var79);
//     com.google.javascript.jscomp.CompilerOptions var97 = null;
//     com.google.javascript.jscomp.Result var98 = var0.compile(var6, var66, var97);
// 
//   }

  public void test192() {}
//   public void test192() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test192"); }
// 
// 
//     java.io.InputStream var2 = null;
//     com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromInputStream("eof", "@IMPLEMENTATION.VERSION@", var2);
// 
//   }

  public void test193() {}
//   public void test193() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test193"); }
// 
// 
//     com.google.javascript.rhino.Context var0 = com.google.javascript.rhino.Context.enter();
//     var0.setInstructionObserverThreshold(0);
//     boolean var3 = var0.isGeneratingSource();
//     int var4 = var0.getInstructionObserverThreshold();
//     java.lang.Object var5 = var0.getDebuggerContextData();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var5);
// 
//   }

  public void test194() {}
//   public void test194() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test194"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     java.lang.String var1 = var0.getGlobalObject();
//     java.lang.String var2 = var0.getExportPropertyFunction();
//     java.lang.String var3 = var0.getDelegateSuperclassName();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString(": hi!", 100, 10);
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     var12.setType(10);
//     com.google.javascript.rhino.Node var16 = new com.google.javascript.rhino.Node(10);
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var25 = var20.clonePropsFrom(var24);
//     var25.putProp((-1), (java.lang.Object)10.0d);
//     com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var37 = var32.clonePropsFrom(var36);
//     com.google.javascript.rhino.Node var38 = var25.copyInformationFrom(var37);
//     boolean var39 = var37.hasOneChild();
//     com.google.javascript.rhino.Node var41 = null;
//     com.google.javascript.jscomp.CheckLevel var43 = null;
//     com.google.javascript.jscomp.DiagnosticType var45 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var43, "hi!");
//     java.lang.String[] var47 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var48 = com.google.javascript.jscomp.JSError.make("", var41, var45, var47);
//     com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var53 = var52.getType();
//     com.google.javascript.rhino.Node var54 = var52.cloneTree();
//     boolean var55 = var48.equals((java.lang.Object)var52);
//     com.google.javascript.rhino.Node var58 = new com.google.javascript.rhino.Node((-1), var12, var16, var37, var52, 0, 1);
//     java.lang.String var59 = var0.extractClassNameIfProvide(var7, var52);
//     java.lang.String var60 = var0.getExportSymbolFunction();
//     com.google.javascript.rhino.jstype.FunctionType var61 = null;
//     com.google.javascript.rhino.jstype.FunctionType var62 = null;
//     com.google.javascript.rhino.jstype.ObjectType var63 = null;
//     var0.applySingletonGetter(var61, var62, var63);
// 
//   }

  public void test195() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test195"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var1 = com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.valueOf("<No stack trace available>");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test196() {}
//   public void test196() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test196"); }
// 
// 
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.String var2 = com.google.javascript.rhino.ScriptRuntime.numberToString(1.0d, 0);
//       fail("Expected exception of type com.google.javascript.rhino.EvaluatorException");
//     } catch (com.google.javascript.rhino.EvaluatorException e) {
//       // Expected exception.
//     }
// 
//   }

  public void test197() {}
//   public void test197() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test197"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     var0.clearNodeAnnotations();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     var2.clearEdgeAnnotations();
//     com.google.javascript.jscomp.Compiler var4 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var5 = var4.getTopScope();
//     com.google.javascript.jscomp.SourceMap var6 = var4.getSourceMap();
//     com.google.javascript.jscomp.JSSourceFile var9 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
//     com.google.javascript.jscomp.SourceFile.Generator var11 = null;
//     com.google.javascript.jscomp.JSSourceFile var12 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var11);
//     com.google.javascript.jscomp.CompilerInput var14 = new com.google.javascript.jscomp.CompilerInput(var12, true);
//     com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
//     var15.setAcceptConstKeyword(true);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var18 = var15.getTweakProcessing();
//     var15.setRewriteNewDateGoogNow(false);
//     com.google.javascript.jscomp.Result var21 = var4.compile(var9, var12, var15);
//     com.google.javascript.jscomp.LightweightMessageFormatter var22 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var4);
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var23 = var2.createDirectedGraphNode((java.lang.Object)var22);
//     java.util.List var24 = var0.getNeighborNodes(var23);
//     var0.clearEdgeAnnotations();
//     var0.popEdgeAnnotations();
// 
//   }

  public void test198() {}
//   public void test198() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test198"); }
// 
// 
//     com.google.javascript.rhino.Context var0 = null;
//     com.google.javascript.rhino.Context var1 = com.google.javascript.rhino.Context.enter(var0);
//     var1.setCompileFunctionsWithDynamicScope(false);
//     com.google.javascript.jscomp.MessageFormatter var4 = null;
//     java.util.logging.Logger var5 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var6 = new com.google.javascript.jscomp.LoggerErrorManager(var4, var5);
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     com.google.javascript.rhino.Node var9 = null;
//     com.google.javascript.jscomp.CheckLevel var11 = null;
//     com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var11, "hi!");
//     java.lang.String[] var15 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", var9, var13, var15);
//     var6.report(var7, var16);
//     var1.removeThreadLocal((java.lang.Object)var16);
//     int var19 = var1.getInstructionObserverThreshold();
//     var1.addActivationName("goog.exportProperty");
//     int var22 = var1.getLanguageVersion();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var23 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.Collection var24 = var23.getNodes();
//     com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var33 = var28.clonePropsFrom(var32);
//     com.google.javascript.rhino.jstype.JSType var34 = null;
//     var32.setJSType(var34);
//     java.lang.RuntimeException var36 = com.google.javascript.rhino.ScriptRuntime.undefWriteError((java.lang.Object)var1, (java.lang.Object)var23, (java.lang.Object)var34);
//     var1.addActivationName("hi!. hi! at hi!. hi! at (unknown source) line (unknown line) : (unknown column) line 40 : 0");
//     com.google.javascript.rhino.ErrorReporter var39 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       com.google.javascript.rhino.ErrorReporter var40 = var1.setErrorReporter(var39);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
// 
//   }

  public void test199() {}
//   public void test199() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test199"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var2 = var0.isPrivate("");
//     java.lang.String var3 = var0.getExportSymbolFunction();
//     boolean var5 = var0.isSuperClassReference("");
//     java.lang.String var6 = var0.getExportSymbolFunction();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var15 = var10.clonePropsFrom(var14);
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     var14.setJSType(var16);
//     var14.setOptionalArg(true);
//     int var20 = var14.getLineno();
//     boolean var21 = var14.isLocalResultCall();
//     boolean var22 = var14.isQuotedString();
//     java.lang.String var23 = var14.getString();
//     java.util.List var24 = var0.identifyTypeDeclarationCall(var14);
// 
//   }

  public void test200() {}
//   public void test200() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test200"); }
// 
// 
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var4 = var3.getType();
//     java.lang.String var5 = var3.getQualifiedName();
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var14 = var9.clonePropsFrom(var13);
//     com.google.javascript.rhino.Node var15 = var3.clonePropsFrom(var13);
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.Node.newString(": hi!", 100, 10);
//     var15.removeChild(var19);
// 
//   }

  public void test201() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test201"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var3.putBooleanProp(0, false);
    boolean var7 = var3.isQualifiedName();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var13 = var12.getType();
    java.lang.String var14 = var12.getQualifiedName();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var23 = var18.clonePropsFrom(var22);
    com.google.javascript.rhino.Node var24 = var12.clonePropsFrom(var22);
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var33 = var28.clonePropsFrom(var32);
    com.google.javascript.rhino.jstype.JSType var34 = null;
    var33.setJSType(var34);
    java.util.Collection var36 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var33);
    boolean var37 = var33.isSyntheticBlock();
    com.google.javascript.rhino.Node var40 = new com.google.javascript.rhino.Node(100, var22, var33, 1, (-1));
    boolean var41 = var3.hasChild(var22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var22.setSideEffectFlags(1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test202() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test202"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var1 = var0.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var3 = var0.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var4 = var0.getGraphvizNodes();
    var0.clearNodeAnnotations();
    var0.pushNodeAnnotations();
    java.util.List var7 = var0.getGraphvizEdges();
    com.google.javascript.jscomp.JSSourceFile var10 = com.google.javascript.jscomp.JSSourceFile.fromCode("null(null)", "goog.global");
    com.google.javascript.jscomp.graph.GraphNode var11 = var0.getNode((java.lang.Object)"null(null)");
    var0.pushNodeAnnotations();
    com.google.javascript.jscomp.SourceFile.Generator var14 = null;
    com.google.javascript.jscomp.SourceFile var15 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var14);
    com.google.javascript.jscomp.JsAst var16 = new com.google.javascript.jscomp.JsAst(var15);
    com.google.javascript.jscomp.SourceFile.Generator var18 = null;
    com.google.javascript.jscomp.SourceFile var19 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var18);
    var16.setSourceFile(var19);
    var16.clearAst();
    com.google.javascript.jscomp.SourceFile var22 = var16.getSourceFile();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var23 = var0.getOutEdges((java.lang.Object)var22);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test203() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test203"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
    com.google.javascript.jscomp.SourceMap var2 = var0.getSourceMap();
    var0.reportCodeChange();
    com.google.javascript.jscomp.Compiler var4 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var5 = var4.getTopScope();
    com.google.javascript.jscomp.SourceMap var6 = var4.getSourceMap();
    com.google.javascript.jscomp.JSSourceFile var9 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.SourceFile.Generator var11 = null;
    com.google.javascript.jscomp.JSSourceFile var12 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var11);
    com.google.javascript.jscomp.CompilerInput var14 = new com.google.javascript.jscomp.CompilerInput(var12, true);
    com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
    var15.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var18 = var15.getTweakProcessing();
    var15.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.Result var21 = var4.compile(var9, var12, var15);
    com.google.javascript.rhino.Node var22 = var0.parse(var9);
    com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var23 = null;
    com.google.javascript.jscomp.LightweightMessageFormatter var24 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var23);
    com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var25 = null;
    com.google.javascript.jscomp.LightweightMessageFormatter var26 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.normalize();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test204() {}
//   public void test204() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test204"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     com.google.javascript.jscomp.Scope var2 = var0.getTopScope();
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     var3.disableThreads();
//     var3.disableThreads();
//     com.google.javascript.jscomp.NodeTraversal.Callback var7 = null;
//     com.google.javascript.jscomp.NodeTraversal var8 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var7);
//     com.google.javascript.rhino.Node var9 = var8.getEnclosingFunction();
//     com.google.javascript.jscomp.Compiler var10 = var8.getCompiler();
//     com.google.javascript.rhino.Node var11 = null;
//     com.google.javascript.rhino.Context var12 = null;
//     com.google.javascript.rhino.Context var13 = com.google.javascript.rhino.Context.enter(var12);
//     var13.setCompileFunctionsWithDynamicScope(false);
//     com.google.javascript.jscomp.MessageFormatter var16 = null;
//     java.util.logging.Logger var17 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var18 = new com.google.javascript.jscomp.LoggerErrorManager(var16, var17);
//     com.google.javascript.jscomp.CheckLevel var19 = null;
//     com.google.javascript.rhino.Node var21 = null;
//     com.google.javascript.jscomp.CheckLevel var23 = null;
//     com.google.javascript.jscomp.DiagnosticType var25 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var23, "hi!");
//     java.lang.String[] var27 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var28 = com.google.javascript.jscomp.JSError.make("", var21, var25, var27);
//     var18.report(var19, var28);
//     var13.removeThreadLocal((java.lang.Object)var28);
//     com.google.javascript.jscomp.DiagnosticType var31 = var28.getType();
//     com.google.javascript.jscomp.DiagnosticType var37 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
//     java.lang.String[] var39 = new java.lang.String[] { "hi!: hi!"};
//     com.google.javascript.jscomp.JSError var40 = com.google.javascript.jscomp.JSError.make("hi!. hi! at (unknown source) line (unknown line) : (unknown column)", 40, 0, var37, var39);
//     com.google.javascript.jscomp.JSError var41 = var8.makeError(var11, var31, var39);
//     com.google.javascript.jscomp.SourceFile.Generator var43 = null;
//     com.google.javascript.jscomp.JSSourceFile var44 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var43);
//     com.google.javascript.jscomp.CompilerInput var46 = new com.google.javascript.jscomp.CompilerInput(var44, true);
//     com.google.javascript.jscomp.SourceFile.Generator var48 = null;
//     com.google.javascript.jscomp.SourceFile var49 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var48);
//     com.google.javascript.jscomp.JsAst var50 = new com.google.javascript.jscomp.JsAst(var49);
//     var46.setSourceFile(var49);
//     com.google.javascript.jscomp.JsAst var52 = new com.google.javascript.jscomp.JsAst(var49);
//     boolean var53 = var41.equals((java.lang.Object)var49);
//     var0.report(var41);
// 
//   }

  public void test205() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test205"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var1 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var2 = var1.getNodes();
    java.util.List var3 = var1.getEdges();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var7.setType(10);
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var3, var7, 1, 100);
    var7.setVarArgs(false);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var19 = var18.getType();
    com.google.javascript.rhino.Node var20 = var18.cloneTree();
    var18.addSuppression("");
    com.google.javascript.rhino.EcmaError var29 = com.google.javascript.rhino.ScriptRuntime.constructError("", "hi!", "hi!", (-1), "hi!", 1);
    java.lang.RuntimeException var30 = com.google.javascript.rhino.ScriptRuntime.undefReadError((java.lang.Object)var18, (java.lang.Object)"hi!");
    com.google.javascript.rhino.Node var31 = var18.removeChildren();
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var36 = var35.getType();
    com.google.javascript.rhino.Node var37 = var35.cloneTree();
    var35.addSuppression("");
    com.google.javascript.rhino.EcmaError var46 = com.google.javascript.rhino.ScriptRuntime.constructError("", "hi!", "hi!", (-1), "hi!", 1);
    java.lang.RuntimeException var47 = com.google.javascript.rhino.ScriptRuntime.undefReadError((java.lang.Object)var35, (java.lang.Object)"hi!");
    com.google.javascript.rhino.jstype.JSType var48 = var35.getJSType();
    var7.addChildAfter(var18, var35);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.NodeUtil.newExpr(var35);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);

  }

  public void test206() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test206"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var4 = var3.getType();
    com.google.javascript.rhino.Node var5 = var3.cloneTree();
    var3.addSuppression("");
    int var8 = var3.getType();
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.NodeUtil.newExpr(var3);
    var9.setLineno((-1));
    com.google.javascript.rhino.EcmaError var19 = com.google.javascript.rhino.ScriptRuntime.constructError("", "hi!", "hi!", (-1), "hi!", 1);
    java.lang.String var20 = var19.details();
    int var21 = var19.lineNumber();
    var9.putProp(100, (java.lang.Object)var19);
    java.lang.String var23 = var19.getName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var19.initColumnNumber(100);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + ": hi!"+ "'", var20.equals(": hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));

  }

  public void test207() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test207"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    java.lang.String var1 = var0.getGlobalObject();
    java.lang.String var2 = var0.getExportPropertyFunction();
    java.lang.String var3 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString(": hi!", 100, 10);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var12.setType(10);
    com.google.javascript.rhino.Node var16 = new com.google.javascript.rhino.Node(10);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var25 = var20.clonePropsFrom(var24);
    var25.putProp((-1), (java.lang.Object)10.0d);
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var37 = var32.clonePropsFrom(var36);
    com.google.javascript.rhino.Node var38 = var25.copyInformationFrom(var37);
    boolean var39 = var37.hasOneChild();
    com.google.javascript.rhino.Node var41 = null;
    com.google.javascript.jscomp.CheckLevel var43 = null;
    com.google.javascript.jscomp.DiagnosticType var45 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var43, "hi!");
    java.lang.String[] var47 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var48 = com.google.javascript.jscomp.JSError.make("", var41, var45, var47);
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var53 = var52.getType();
    com.google.javascript.rhino.Node var54 = var52.cloneTree();
    boolean var55 = var48.equals((java.lang.Object)var52);
    com.google.javascript.rhino.Node var58 = new com.google.javascript.rhino.Node((-1), var12, var16, var37, var52, 0, 1);
    java.lang.String var59 = var0.extractClassNameIfProvide(var7, var52);
    boolean var61 = var0.isSuperClassReference("OFF");
    java.lang.String var62 = var0.getDelegateSuperclassName();
    com.google.javascript.jscomp.ClosureCodingConvention var63 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var65 = var63.isPrivate("");
    boolean var67 = var63.isPrivate("goog.exportProperty");
    boolean var69 = var63.isConstant("com.google.javascript.rhino.EcmaError: : hi!");
    com.google.javascript.rhino.jstype.FunctionType var70 = null;
    com.google.javascript.rhino.jstype.FunctionType var71 = null;
    com.google.javascript.jscomp.CodingConvention.SubclassType var72 = null;
    var63.applySubclassRelationship(var70, var71, var72);
    com.google.javascript.rhino.jstype.ObjectType var74 = null;
    com.google.javascript.rhino.jstype.ObjectType var75 = null;
    com.google.javascript.rhino.jstype.ObjectType var76 = null;
    com.google.javascript.rhino.jstype.FunctionType var77 = null;
    com.google.javascript.rhino.jstype.FunctionType var78 = null;
    var63.applyDelegateRelationship(var74, var75, var76, var77, var78);
    com.google.javascript.rhino.Node var84 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var85 = var84.getType();
    int var86 = var84.getChildCount();
    com.google.javascript.rhino.Node var87 = new com.google.javascript.rhino.Node((-1), var84);
    java.lang.String var91 = var84.toString(false, false, true);
    java.lang.String var92 = var63.identifyTypeDefAssign(var84);
    java.lang.RuntimeException var93 = com.google.javascript.rhino.ScriptRuntime.notFunctionError((java.lang.Object)var0, (java.lang.Object)var84);
    com.google.javascript.rhino.jstype.ObjectType var94 = null;
    com.google.javascript.rhino.jstype.ObjectType var95 = null;
    com.google.javascript.rhino.jstype.ObjectType var96 = null;
    com.google.javascript.rhino.jstype.FunctionType var97 = null;
    com.google.javascript.rhino.jstype.FunctionType var98 = null;
    var0.applyDelegateRelationship(var94, var95, var96, var97, var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "goog.global"+ "'", var1.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "goog.exportProperty"+ "'", var2.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "STRING "+ "'", var91.equals("STRING "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test208() {}
//   public void test208() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test208"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var2 = var0.isPrivate("");
//     java.lang.String var3 = var0.getExportSymbolFunction();
//     boolean var5 = var0.isSuperClassReference("");
//     java.lang.String var6 = var0.getExportSymbolFunction();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var11 = var10.getType();
//     int var12 = var10.getSourcePosition();
//     java.lang.String var13 = var10.getQualifiedName();
//     var10.setCharno(40);
//     com.google.javascript.jscomp.CodingConvention.SubclassRelationship var16 = var0.getClassesDefinedByCall(var10);
// 
//   }

  public void test209() {}
//   public void test209() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test209"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     com.google.javascript.jscomp.SourceMap var2 = var0.getSourceMap();
//     com.google.javascript.jscomp.JSSourceFile var5 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
//     com.google.javascript.jscomp.SourceFile.Generator var7 = null;
//     com.google.javascript.jscomp.JSSourceFile var8 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var7);
//     com.google.javascript.jscomp.CompilerInput var10 = new com.google.javascript.jscomp.CompilerInput(var8, true);
//     com.google.javascript.jscomp.CompilerOptions var11 = new com.google.javascript.jscomp.CompilerOptions();
//     var11.setAcceptConstKeyword(true);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var14 = var11.getTweakProcessing();
//     var11.setRewriteNewDateGoogNow(false);
//     com.google.javascript.jscomp.Result var17 = var0.compile(var5, var8, var11);
//     com.google.javascript.jscomp.LightweightMessageFormatter var18 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0);
//     java.nio.charset.Charset var20 = null;
//     com.google.javascript.jscomp.JSSourceFile var21 = com.google.javascript.jscomp.JSSourceFile.fromFile("goog.exportProperty", var20);
//     com.google.javascript.jscomp.JSSourceFile[] var22 = null;
//     com.google.javascript.jscomp.CompilerOptions var23 = new com.google.javascript.jscomp.CompilerOptions();
//     var23.setAcceptConstKeyword(true);
//     var23.setTweakToStringLiteral("goog.exportProperty", "goog.exportSymbol");
//     var23.setShadowVariables(true);
//     var23.setColorizeErrorOutput(true);
//     var23.setDefineToStringLiteral("com.google.javascript.rhino.EcmaError: TypeError: Cannot set property \"hi!: hi!\" of 0 to \"40\"", "");
//     com.google.javascript.jscomp.Compiler var36 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var37 = var36.getTopScope();
//     com.google.javascript.jscomp.SourceMap var38 = var36.getSourceMap();
//     com.google.javascript.jscomp.JSSourceFile var41 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
//     com.google.javascript.jscomp.SourceFile.Generator var43 = null;
//     com.google.javascript.jscomp.JSSourceFile var44 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var43);
//     com.google.javascript.jscomp.CompilerInput var46 = new com.google.javascript.jscomp.CompilerInput(var44, true);
//     com.google.javascript.jscomp.CompilerOptions var47 = new com.google.javascript.jscomp.CompilerOptions();
//     var47.setAcceptConstKeyword(true);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var50 = var47.getTweakProcessing();
//     var47.setRewriteNewDateGoogNow(false);
//     com.google.javascript.jscomp.Result var53 = var36.compile(var41, var44, var47);
//     com.google.javascript.jscomp.DiagnosticGroup var54 = null;
//     com.google.javascript.jscomp.CheckLevel var55 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var56 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var54, var55);
//     java.lang.String var57 = var56.toString();
//     var47.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var56);
//     var47.enableRuntimeTypeCheck("");
//     com.google.javascript.jscomp.CompilerOptions var61 = new com.google.javascript.jscomp.CompilerOptions();
//     var61.setAcceptConstKeyword(true);
//     com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var64 = null;
//     var61.setAliasTransformationHandler(var64);
//     var61.setCollapsePropertiesOnExternTypes(false);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var68 = var61.getTweakProcessing();
//     var47.setTweakProcessing(var68);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var70 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var71 = var70.newSubGraph();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var73 = var70.createDirectedGraphNode((java.lang.Object)100);
//     java.util.List var74 = var70.getGraphvizNodes();
//     boolean var75 = var70.isDirected();
//     java.util.List var76 = var70.getGraphvizEdges();
//     var47.setManageClosureDependencies(var76);
//     com.google.javascript.jscomp.CompilerOptions var78 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var81 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.Collection var82 = var81.getNodes();
//     java.util.List var83 = var81.getEdges();
//     com.google.javascript.rhino.Node var87 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     var87.setType(10);
//     com.google.javascript.rhino.Node var92 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var83, var87, 1, 100);
//     var78.setReplaceStringsConfiguration("hi!", var83);
//     java.util.Map var94 = var78.getDefineReplacements();
//     var78.disableRuntimeTypeCheck();
//     com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var96 = var78.getAliasTransformationHandler();
//     var47.setAliasTransformationHandler(var96);
//     var23.setAliasTransformationHandler(var96);
//     com.google.javascript.jscomp.Result var99 = var0.compile(var21, var22, var23);
// 
//   }

  public void test210() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test210"); }


    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var5 = var4.getType();
    int var6 = var4.getChildCount();
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node((-1), var4);
    java.lang.String var11 = var4.toString(false, false, true);
    int var12 = var4.getType();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var18 = var17.getType();
    int var19 = var17.getChildCount();
    com.google.javascript.rhino.Node var20 = new com.google.javascript.rhino.Node((-1), var17);
    java.lang.String var21 = var17.getQualifiedName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var4.addChildrenToBack(var17);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "STRING "+ "'", var11.equals("STRING "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test211() {}
//   public void test211() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test211"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile.Generator var1 = null;
//     com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var1);
//     com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var2, true);
//     com.google.javascript.jscomp.SourceFile.Generator var6 = null;
//     com.google.javascript.jscomp.SourceFile var7 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var6);
//     com.google.javascript.jscomp.JsAst var8 = new com.google.javascript.jscomp.JsAst(var7);
//     var4.setSourceFile(var7);
//     java.lang.String var10 = var4.getCode();
// 
//   }

  public void test212() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test212"); }


    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var11 = var6.clonePropsFrom(var10);
    var11.putProp((-1), (java.lang.Object)10.0d);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var23 = var18.clonePropsFrom(var22);
    com.google.javascript.rhino.Node var24 = var11.copyInformationFrom(var23);
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var33 = var28.clonePropsFrom(var32);
    com.google.javascript.rhino.Node var35 = var32.getAncestor(0);
    java.lang.String var36 = var24.checkTreeEquals(var32);
    com.google.javascript.jscomp.DiagnosticType var39 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
    com.google.javascript.jscomp.Compiler var40 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var41 = var40.getTopScope();
    var40.disableThreads();
    var40.disableThreads();
    com.google.javascript.jscomp.NodeTraversal.Callback var44 = null;
    com.google.javascript.jscomp.NodeTraversal var45 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var40, var44);
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var51 = var50.getType();
    java.lang.String var52 = var50.getQualifiedName();
    com.google.javascript.rhino.Node var53 = new com.google.javascript.rhino.Node(100, var50);
    com.google.javascript.jscomp.CheckLevel var54 = null;
    com.google.javascript.jscomp.DiagnosticType var57 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
    java.lang.String[] var59 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var60 = var45.makeError(var50, var54, var57, var59);
    com.google.javascript.jscomp.JSError var61 = com.google.javascript.jscomp.JSError.make("", var32, var39, var59);
    com.google.javascript.rhino.Node[] var62 = new com.google.javascript.rhino.Node[] { var32};
    com.google.javascript.rhino.Node var63 = new com.google.javascript.rhino.Node(0, var62);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var64 = new com.google.javascript.rhino.Node(1, var62);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test213() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test213"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var1 = com.google.javascript.rhino.ScriptRuntime.getMessage0("eol");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test214() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test214"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("0");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test215() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test215"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Context.reportWarning("ERROR\n    STRING \n: com.google.javascript.rhino.EcmaError: : hi!");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test216() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test216"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var1 = var0.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var3 = var0.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var4 = var0.getGraphvizNodes();
    java.util.List var5 = var0.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var6 = new com.google.javascript.jscomp.CompilerOptions();
    var6.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.Compiler var9 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var10 = var9.getTopScope();
    com.google.javascript.jscomp.SourceMap var11 = var9.getSourceMap();
    com.google.javascript.jscomp.JSSourceFile var14 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.SourceFile.Generator var16 = null;
    com.google.javascript.jscomp.JSSourceFile var17 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var16);
    com.google.javascript.jscomp.CompilerInput var19 = new com.google.javascript.jscomp.CompilerInput(var17, true);
    com.google.javascript.jscomp.CompilerOptions var20 = new com.google.javascript.jscomp.CompilerOptions();
    var20.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var23 = var20.getTweakProcessing();
    var20.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.Result var26 = var9.compile(var14, var17, var20);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var27 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var28 = var27.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var29 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var30 = var29.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var32 = var29.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var33 = var27.getDirectedPredNodes(var32);
    com.google.javascript.jscomp.JSModuleGraph var34 = new com.google.javascript.jscomp.JSModuleGraph(var33);
    com.google.javascript.jscomp.NodeTraversal.Callback var35 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var9, var33, var35);
    var6.setManageClosureDependencies(var33);
    var6.setNameAnonymousFunctionsOnly(false);
    com.google.javascript.jscomp.DefaultPassConfig var40 = new com.google.javascript.jscomp.DefaultPassConfig(var6);
    com.google.javascript.jscomp.CompilerOptions var41 = new com.google.javascript.jscomp.CompilerOptions();
    var41.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.Compiler var44 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var45 = var44.getTopScope();
    com.google.javascript.jscomp.SourceMap var46 = var44.getSourceMap();
    com.google.javascript.jscomp.JSSourceFile var49 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.SourceFile.Generator var51 = null;
    com.google.javascript.jscomp.JSSourceFile var52 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var51);
    com.google.javascript.jscomp.CompilerInput var54 = new com.google.javascript.jscomp.CompilerInput(var52, true);
    com.google.javascript.jscomp.CompilerOptions var55 = new com.google.javascript.jscomp.CompilerOptions();
    var55.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var58 = var55.getTweakProcessing();
    var55.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.Result var61 = var44.compile(var49, var52, var55);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var62 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var63 = var62.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var64 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var65 = var64.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var67 = var64.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var68 = var62.getDirectedPredNodes(var67);
    com.google.javascript.jscomp.JSModuleGraph var69 = new com.google.javascript.jscomp.JSModuleGraph(var68);
    com.google.javascript.jscomp.NodeTraversal.Callback var70 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var44, var68, var70);
    var41.setManageClosureDependencies(var68);
    var41.setNameAnonymousFunctionsOnly(false);
    com.google.javascript.jscomp.DefaultPassConfig var75 = new com.google.javascript.jscomp.DefaultPassConfig(var41);
    com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var76 = var41.getAliasTransformationHandler();
    var6.setAliasTransformationHandler(var76);
    var6.setShadowVariables(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var80 = var0.getDirectedSuccNodes((java.lang.Object)true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test217() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test217"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.Collection var1 = var0.getNodes();
    var0.pushEdgeAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithEdgeAnnotations();
    com.google.javascript.jscomp.SourceFile.Generator var5 = null;
    com.google.javascript.jscomp.SourceFile var6 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var5);
    com.google.javascript.jscomp.JsAst var7 = new com.google.javascript.jscomp.JsAst(var6);
    java.lang.RuntimeException var8 = com.google.javascript.rhino.ScriptRuntime.notFunctionError((java.lang.Object)var3, (java.lang.Object)var6);
    java.lang.Object var9 = null;
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var10 = var3.getDirectedGraphNode(var9);
    com.google.javascript.jscomp.graph.SubGraph var11 = var3.newSubGraph();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var20 = var15.clonePropsFrom(var19);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    var19.setJSType(var21);
    var19.setOptionalArg(true);
    int var25 = var19.getLineno();
    boolean var26 = var19.isLocalResultCall();
    boolean var27 = var19.isQuotedString();
    var19.setOptionalArg(true);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var30 = var3.createDirectedGraphNode((java.lang.Object)var19);
    java.util.List var31 = var0.getNeighborNodes(var30);
    java.nio.charset.Charset var33 = null;
    com.google.javascript.jscomp.SourceFile var34 = com.google.javascript.jscomp.SourceFile.fromFile(": hi!", var33);
    com.google.javascript.jscomp.Region var36 = var34.getRegion(100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var37 = var0.getDirectedPredNodes((java.lang.Object)var34);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);

  }

  public void test218() {}
//   public void test218() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test218"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     var0.disableThreads();
//     var0.disableThreads();
//     com.google.javascript.jscomp.MessageFormatter var4 = null;
//     java.util.logging.Logger var5 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var6 = new com.google.javascript.jscomp.LoggerErrorManager(var4, var5);
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     com.google.javascript.rhino.Node var9 = null;
//     com.google.javascript.jscomp.CheckLevel var11 = null;
//     com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var11, "hi!");
//     java.lang.String[] var15 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", var9, var13, var15);
//     var6.report(var7, var16);
//     var0.setErrorManager((com.google.javascript.jscomp.ErrorManager)var6);
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var19 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var20 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var19);
//     com.google.javascript.jscomp.NodeTraversal.Callback var21 = null;
//     com.google.javascript.jscomp.NodeTraversal var22 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var21);
//     com.google.javascript.jscomp.Scope var23 = var22.getScope();
//     com.google.javascript.jscomp.JSModule var24 = var22.getModule();
// 
//   }

  public void test219() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test219"); }


    java.lang.String var1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("goog.abstractMethod");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(goog.abstractMethod)"+ "'", var1.equals("(goog.abstractMethod)"));

  }

  public void test220() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test220"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.error("com.google.javascript.rhino.EcmaError: : hi!", "hi!: hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test221() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test221"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.JSSourceFile var4 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.rhino.Node var5 = var1.parse(var4);
    var1.disableThreads();
    com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
    var7.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var10 = var7.getTweakProcessing();
    var7.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var16 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var17 = var16.getNodes();
    java.util.List var18 = var16.getEdges();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var22.setType(10);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var18, var22, 1, 100);
    var13.setReplaceStringsConfiguration("hi!", var18);
    var7.setManageClosureDependencies(var18);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var31 = var30.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var33 = var30.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var34 = var30.getGraphvizNodes();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var36 = var35.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var37 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var38 = var37.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var40 = var37.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var41 = var35.getDirectedPredNodes(var40);
    java.util.List var42 = var30.getDirectedPredNodes(var40);
    com.google.javascript.jscomp.CompilerOptions var43 = new com.google.javascript.jscomp.CompilerOptions();
    var43.disableRuntimeTypeCheck();
    com.google.javascript.jscomp.Result var45 = var1.compile(var18, var42, var43);
    com.google.javascript.jscomp.JSError[] var46 = var1.getMessages();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.processDefines();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test222() {}
//   public void test222() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test222"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     var0.disableThreads();
//     var0.disableThreads();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal var5 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var4);
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var11 = var10.getType();
//     java.lang.String var12 = var10.getQualifiedName();
//     com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(100, var10);
//     com.google.javascript.jscomp.CheckLevel var14 = null;
//     com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
//     java.lang.String[] var19 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var20 = var5.makeError(var10, var14, var17, var19);
//     com.google.javascript.rhino.Node var21 = var5.getCurrentNode();
//     int var22 = var5.getLineNumber();
//     com.google.javascript.rhino.Node var23 = var5.getCurrentNode();
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var32 = var27.clonePropsFrom(var31);
//     com.google.javascript.rhino.jstype.JSType var33 = null;
//     var31.setJSType(var33);
//     var31.setOptionalArg(true);
//     com.google.javascript.rhino.JSDocInfo var37 = null;
//     var31.setJSDocInfo(var37);
//     var31.setIsSyntheticBlock(true);
//     com.google.javascript.jscomp.DiagnosticType var41 = null;
//     java.lang.String[] var42 = null;
//     var5.report(var31, var41, var42);
// 
//   }

  public void test223() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test223"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var1 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var2 = var1.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var4 = var1.createDirectedGraphNode((java.lang.Object)100);
    var1.clearNodeAnnotations();
    com.google.javascript.jscomp.CompilerOptions var6 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var9 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var10 = var9.getNodes();
    java.util.List var11 = var9.getEdges();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var15.setType(10);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var11, var15, 1, 100);
    var6.setReplaceStringsConfiguration("hi!", var11);
    java.util.Map var22 = var6.getDefineReplacements();
    var6.setDefineToDoubleLiteral("goog.abstractMethod", 0.0d);
    com.google.javascript.jscomp.CodingConvention var26 = null;
    var6.setCodingConvention(var26);
    com.google.javascript.jscomp.graph.GraphNode var28 = var1.createNode((java.lang.Object)var26);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var29 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var30 = var29.newSubGraph();
    var29.pushNodeAnnotations();
    com.google.javascript.jscomp.graph.SubGraph var32 = var29.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var34 = var33.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var36 = var33.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var37 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var38 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var39 = var38.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var41 = var40.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var43 = var40.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var44 = var38.getDirectedPredNodes(var43);
    java.util.List var45 = var33.getDirectedPredNodes(var43);
    java.util.List var46 = var29.getDirectedPredNodes(var43);
    java.util.List var47 = var1.getDirectedPredNodes(var43);
    com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var52 = var51.getType();
    com.google.javascript.rhino.Node var53 = var51.cloneTree();
    com.google.javascript.rhino.Node var55 = var51.getAncestor(0);
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("com.google.javascript.rhino.EcmaError: : hi!", var47, var51, 1, 0);
    com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var67 = var62.clonePropsFrom(var66);
    com.google.javascript.rhino.jstype.JSType var68 = null;
    var66.setJSType(var68);
    var66.setOptionalArg(true);
    int var72 = var66.getLineno();
    com.google.javascript.rhino.jstype.JSType var73 = var66.getJSType();
    var66.addSuppression("");
    var58.addChildrenToFront(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);

  }

  public void test224() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test224"); }


    java.lang.String var1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix(": hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(: hi!)"+ "'", var1.equals("(: hi!)"));

  }

  public void test225() {}
//   public void test225() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test225"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile.Generator var1 = null;
//     com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var1);
//     com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var2, true);
//     com.google.javascript.jscomp.SourceFile.Generator var6 = null;
//     com.google.javascript.jscomp.SourceFile var7 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var6);
//     com.google.javascript.jscomp.JsAst var8 = new com.google.javascript.jscomp.JsAst(var7);
//     var4.setSourceFile(var7);
//     com.google.javascript.jscomp.JSModule var10 = null;
//     var4.setModule(var10);
//     var4.clearAst();
//     java.lang.String var13 = var4.getCode();
// 
//   }

  public void test226() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test226"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.PropertyRenamingPolicy var1 = com.google.javascript.jscomp.PropertyRenamingPolicy.valueOf("or");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test227() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test227"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
    var0.disableThreads();
    var0.disableThreads();
    com.google.javascript.jscomp.CompilerOptions var4 = new com.google.javascript.jscomp.CompilerOptions();
    var4.setAcceptConstKeyword(true);
    java.util.Map var7 = var4.getTweakReplacements();
    var4.setDefineToNumberLiteral("eof", 1);
    com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var11 = null;
    var4.setAliasTransformationHandler(var11);
    var0.initOptions(var4);
    boolean var14 = var0.hasErrors();
    com.google.javascript.jscomp.Compiler var15 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var16 = var15.getTopScope();
    var15.disableThreads();
    var15.disableThreads();
    com.google.javascript.jscomp.NodeTraversal.Callback var19 = null;
    com.google.javascript.jscomp.NodeTraversal var20 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var15, var19);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var26 = var25.getType();
    java.lang.String var27 = var25.getQualifiedName();
    com.google.javascript.rhino.Node var28 = new com.google.javascript.rhino.Node(100, var25);
    com.google.javascript.jscomp.CheckLevel var29 = null;
    com.google.javascript.jscomp.DiagnosticType var32 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
    java.lang.String[] var34 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var35 = var20.makeError(var25, var29, var32, var34);
    var0.report(var35);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.optimize();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test228() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test228"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    java.lang.RuntimeException var4 = com.google.javascript.rhino.ScriptRuntime.notFunctionError((java.lang.Object)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test229() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test229"); }


    com.google.javascript.jscomp.DefaultCodingConvention var0 = new com.google.javascript.jscomp.DefaultCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var2 = var0.getClassesDefinedByCall(var1);
    boolean var4 = var0.isValidEnumKey("goog.exportProperty");
    boolean var6 = var0.isExported(": hi!");
    boolean var8 = var0.isPrivate("ERROR\n    STRING \n");
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var17 = var12.clonePropsFrom(var16);
    com.google.javascript.rhino.jstype.JSType var18 = null;
    var17.setJSType(var18);
    java.util.Collection var20 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var17);
    boolean var21 = var17.isSyntheticBlock();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var26 = var25.getType();
    int var27 = var25.getSourcePosition();
    com.google.javascript.rhino.Node var28 = var25.getLastSibling();
    boolean var29 = var25.isSyntheticBlock();
    java.lang.String var30 = var17.checkTreeEquals(var25);
    boolean var31 = var25.isOnlyModifiesThisCall();
    boolean var32 = var25.hasMoreThanOneChild();
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var33 = var0.getClassesDefinedByCall(var25);
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var38 = var37.getType();
    int var39 = var37.getSourcePosition();
    java.lang.String var40 = var37.getQualifiedName();
    boolean var41 = var37.wasEmptyNode();
    java.lang.String var42 = var0.identifyTypeDefAssign(var37);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var44 = var37.getExistingIntProp(100);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);

  }

  public void test230() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test230"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    java.lang.String var1 = var0.getGlobalObject();
    java.lang.String var2 = var0.getExportPropertyFunction();
    java.lang.String var3 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString(": hi!", 100, 10);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var12.setType(10);
    com.google.javascript.rhino.Node var16 = new com.google.javascript.rhino.Node(10);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var25 = var20.clonePropsFrom(var24);
    var25.putProp((-1), (java.lang.Object)10.0d);
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var37 = var32.clonePropsFrom(var36);
    com.google.javascript.rhino.Node var38 = var25.copyInformationFrom(var37);
    boolean var39 = var37.hasOneChild();
    com.google.javascript.rhino.Node var41 = null;
    com.google.javascript.jscomp.CheckLevel var43 = null;
    com.google.javascript.jscomp.DiagnosticType var45 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var43, "hi!");
    java.lang.String[] var47 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var48 = com.google.javascript.jscomp.JSError.make("", var41, var45, var47);
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var53 = var52.getType();
    com.google.javascript.rhino.Node var54 = var52.cloneTree();
    boolean var55 = var48.equals((java.lang.Object)var52);
    com.google.javascript.rhino.Node var58 = new com.google.javascript.rhino.Node((-1), var12, var16, var37, var52, 0, 1);
    java.lang.String var59 = var0.extractClassNameIfProvide(var7, var52);
    java.lang.String var60 = var0.getExportSymbolFunction();
    java.lang.String var61 = var0.getGlobalObject();
    boolean var63 = var0.isConstant("<No stack trace available>");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "goog.global"+ "'", var1.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "goog.exportProperty"+ "'", var2.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "goog.exportSymbol"+ "'", var60.equals("goog.exportSymbol"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "goog.global"+ "'", var61.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test231() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test231"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithEdgeAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var1 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var2 = var1.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var4 = var1.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var5 = var0.getDirectedPredNodes(var4);
    com.google.javascript.jscomp.ClosureCodingConvention var6 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var8 = var6.isPrivate("");
    com.google.javascript.rhino.jstype.FunctionType var9 = null;
    com.google.javascript.rhino.jstype.FunctionType var10 = null;
    com.google.javascript.jscomp.CodingConvention.SubclassType var11 = null;
    var6.applySubclassRelationship(var9, var10, var11);
    java.lang.String var13 = var6.getExportSymbolFunction();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var18 = var17.getType();
    int var19 = var17.getChildCount();
    boolean var20 = var17.hasOneChild();
    boolean var21 = var6.isOptionalParameter(var17);
    java.lang.String var22 = var6.getAbstractMethodName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var23 = var0.getDirectedSuccNodes((java.lang.Object)var22);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "goog.exportSymbol"+ "'", var13.equals("goog.exportSymbol"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "goog.abstractMethod"+ "'", var22.equals("goog.abstractMethod"));

  }

  public void test232() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test232"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.EcmaError var2 = com.google.javascript.rhino.ScriptRuntime.typeError1(": hi!", "hi!");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test233() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test233"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var4 = var3.getType();
    int var5 = var3.getSourcePosition();
    com.google.javascript.rhino.Node var6 = var3.getLastSibling();
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.NodeUtil.newExpr(var3);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.Node.newString(40, "hi!. hi! at (unknown source) line (unknown line) : (unknown column)");
    var10.setOptionalArg(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var13 = var3.checkTreeEquals(var10);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test234() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test234"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var4 = var3.getType();
    com.google.javascript.rhino.Node var5 = var3.cloneTree();
    var3.addSuppression("");
    int var8 = var3.getType();
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.NodeUtil.newExpr(var3);
    var9.setLineno((-1));
    com.google.javascript.rhino.Node var13 = var9.getAncestor(0);
    com.google.javascript.rhino.jstype.JSType var14 = var9.getJSType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test235() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test235"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.disabled("hi!. hi! at (unknown source) line (unknown line) : (unknown column)", "(: hi!)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test236() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test236"); }


    com.google.javascript.rhino.Node var2 = null;
    com.google.javascript.jscomp.CheckLevel var4 = null;
    com.google.javascript.jscomp.DiagnosticType var6 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var4, "hi!");
    java.lang.String[] var8 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var9 = com.google.javascript.jscomp.JSError.make("", var2, var6, var8);
    java.lang.RuntimeException var11 = com.google.javascript.rhino.ScriptRuntime.undefWriteError((java.lang.Object)(short)0, (java.lang.Object)var6, (java.lang.Object)40);
    com.google.javascript.jscomp.DiagnosticType[] var12 = new com.google.javascript.jscomp.DiagnosticType[] { var6};
    com.google.javascript.jscomp.DiagnosticGroup var13 = new com.google.javascript.jscomp.DiagnosticGroup(var12);
    java.lang.String var14 = var13.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test237() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test237"); }


    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var5 = var4.getType();
    com.google.javascript.rhino.Node[] var6 = new com.google.javascript.rhino.Node[] { var4};
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(100, var6);
    java.lang.Iterable var8 = var7.siblings();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var11 = var10.getNodes();
    java.util.List var12 = var10.getEdges();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var16.setType(10);
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var12, var16, 1, 100);
    var16.setVarArgs(false);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var27.setType(10);
    java.lang.Object var31 = var27.getProp(40);
    var16.addChildToBack(var27);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.addChildToFront(var16);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test238() {}
//   public void test238() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test238"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.Collection var1 = var0.getNodes();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var3 = var2.newSubGraph();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var5 = var4.newSubGraph();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var4.createDirectedGraphNode((java.lang.Object)100);
//     java.util.List var8 = var2.getDirectedPredNodes(var7);
//     com.google.javascript.jscomp.JSModuleGraph var9 = new com.google.javascript.jscomp.JSModuleGraph(var8);
//     var9.coalesceDuplicateFiles();
//     boolean var11 = var0.hasNode((java.lang.Object)var9);
//     com.google.javascript.jscomp.JSModule var12 = null;
//     com.google.javascript.jscomp.JSModule var13 = null;
//     boolean var14 = var9.dependsOn(var12, var13);
// 
//   }

  public void test239() {}
//   public void test239() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test239"); }
// 
// 
//     com.google.javascript.rhino.Context var0 = null;
//     com.google.javascript.rhino.Context var1 = com.google.javascript.rhino.Context.enter(var0);
//     var1.setCompileFunctionsWithDynamicScope(false);
//     com.google.javascript.jscomp.MessageFormatter var4 = null;
//     java.util.logging.Logger var5 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var6 = new com.google.javascript.jscomp.LoggerErrorManager(var4, var5);
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     com.google.javascript.rhino.Node var9 = null;
//     com.google.javascript.jscomp.CheckLevel var11 = null;
//     com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var11, "hi!");
//     java.lang.String[] var15 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", var9, var13, var15);
//     var6.report(var7, var16);
//     var1.removeThreadLocal((java.lang.Object)var16);
//     com.google.javascript.rhino.Context var19 = com.google.javascript.rhino.Context.enter();
//     boolean var20 = var19.isGeneratingDebugChanged();
//     var19.setLanguageVersion(0);
//     var19.setGeneratingSource(false);
//     java.util.Locale var25 = var19.getLocale();
//     java.util.Locale var26 = var1.setLocale(var25);
//     com.google.javascript.rhino.Context var27 = null;
//     com.google.javascript.rhino.Context var28 = com.google.javascript.rhino.Context.enter(var27);
//     var28.setCompileFunctionsWithDynamicScope(false);
//     com.google.javascript.jscomp.MessageFormatter var31 = null;
//     java.util.logging.Logger var32 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var33 = new com.google.javascript.jscomp.LoggerErrorManager(var31, var32);
//     com.google.javascript.jscomp.CheckLevel var34 = null;
//     com.google.javascript.rhino.Node var36 = null;
//     com.google.javascript.jscomp.CheckLevel var38 = null;
//     com.google.javascript.jscomp.DiagnosticType var40 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var38, "hi!");
//     java.lang.String[] var42 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var43 = com.google.javascript.jscomp.JSError.make("", var36, var40, var42);
//     var33.report(var34, var43);
//     var28.removeThreadLocal((java.lang.Object)var43);
//     com.google.javascript.rhino.Context var46 = com.google.javascript.rhino.Context.enter();
//     boolean var47 = var46.isGeneratingDebugChanged();
//     var46.setLanguageVersion(0);
//     var46.setGeneratingSource(false);
//     java.util.Locale var52 = var46.getLocale();
//     java.util.Locale var53 = var28.setLocale(var52);
//     java.util.Locale var54 = var1.setLocale(var52);
//     boolean var55 = var1.isGeneratingDebug();
//     var1.addActivationName("com.google.javascript.rhino.EcmaError: TypeError: Cannot set property \"hi!: hi!\" of 0 to \"40\"");
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var20 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var47 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var53);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var54);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var55 == false);
// 
//   }

  public void test240() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test240"); }


    long var1 = com.google.javascript.rhino.ScriptRuntime.testUint32String("ERROR\n    STRING \n");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1L));

  }

  public void test241() {}
//   public void test241() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test241"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     com.google.javascript.jscomp.SourceMap var2 = var0.getSourceMap();
//     com.google.javascript.jscomp.Compiler.IntermediateState var3 = var0.getState();
//     boolean var4 = var0.hasErrors();
// 
//   }

  public void test242() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test242"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.SourceMap var5 = var3.getSourceMap();
    com.google.javascript.jscomp.JSSourceFile var8 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.SourceFile.Generator var10 = null;
    com.google.javascript.jscomp.JSSourceFile var11 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var10);
    com.google.javascript.jscomp.CompilerInput var13 = new com.google.javascript.jscomp.CompilerInput(var11, true);
    com.google.javascript.jscomp.CompilerOptions var14 = new com.google.javascript.jscomp.CompilerOptions();
    var14.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var17 = var14.getTweakProcessing();
    var14.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.Result var20 = var3.compile(var8, var11, var14);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var22 = var21.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var23 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var24 = var23.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var26 = var23.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var27 = var21.getDirectedPredNodes(var26);
    com.google.javascript.jscomp.JSModuleGraph var28 = new com.google.javascript.jscomp.JSModuleGraph(var27);
    com.google.javascript.jscomp.NodeTraversal.Callback var29 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var3, var27, var29);
    var0.setManageClosureDependencies(var27);
    var0.lineLengthThreshold(40);
    java.util.Map var34 = var0.getDefineReplacements();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test243() {}
//   public void test243() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test243"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var2 = var0.isPrivate("");
//     java.lang.String var3 = var0.getExportPropertyFunction();
//     boolean var5 = var0.isPrivate("com.google.javascript.rhino.EcmaError: : hi!");
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var7 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.Collection var8 = var7.getNodes();
//     java.util.List var9 = var7.getEdges();
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     var13.setType(10);
//     com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var9, var13, 1, 100);
//     var13.setVarArgs(false);
//     com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     var24.setType(10);
//     java.lang.Object var28 = var24.getProp(40);
//     var13.addChildToBack(var24);
//     java.lang.String var30 = var0.getSingletonGetterClassName(var24);
// 
//   }

  public void test244() {}
//   public void test244() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test244"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.SourceMap var2 = var1.getSourceMap();
//     com.google.javascript.jscomp.CompilerOptions var3 = new com.google.javascript.jscomp.CompilerOptions();
//     var3.setAcceptConstKeyword(true);
//     var3.setTweakToStringLiteral("goog.exportProperty", "goog.exportSymbol");
//     var3.setShadowVariables(true);
//     var3.setColorizeErrorOutput(true);
//     var3.setDefineToStringLiteral("com.google.javascript.rhino.EcmaError: TypeError: Cannot set property \"hi!: hi!\" of 0 to \"40\"", "");
//     var1.initOptions(var3);
//     com.google.javascript.jscomp.LightweightMessageFormatter var17 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     int var18 = var1.getWarningCount();
//     boolean var19 = var1.acceptEcmaScript5();
//     com.google.javascript.jscomp.Region var22 = var1.getSourceRegion("0", 1);
// 
//   }

  public void test245() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test245"); }


    java.lang.String var1 = com.google.javascript.rhino.ScriptRuntime.escapeString("(goog.abstractMethod)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(goog.abstractMethod)"+ "'", var1.equals("(goog.abstractMethod)"));

  }

  public void test246() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test246"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var1 = var0.getNodes();
    var0.clearEdgeAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var4 = var3.newSubGraph();
    var3.pushNodeAnnotations();
    com.google.javascript.jscomp.graph.SubGraph var6 = var3.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var7 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var8 = var7.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var10 = var7.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var11 = var7.getGraphvizNodes();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var13 = var12.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var14 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var15 = var14.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var17 = var14.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var18 = var12.getDirectedPredNodes(var17);
    java.util.List var19 = var7.getDirectedPredNodes(var17);
    java.util.List var20 = var3.getDirectedPredNodes(var17);
    java.util.List var21 = var0.getNeighborNodes(var17);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var22 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.Collection var23 = var22.getNodes();
    var22.pushEdgeAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var25 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithEdgeAnnotations();
    com.google.javascript.jscomp.SourceFile.Generator var27 = null;
    com.google.javascript.jscomp.SourceFile var28 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var27);
    com.google.javascript.jscomp.JsAst var29 = new com.google.javascript.jscomp.JsAst(var28);
    java.lang.RuntimeException var30 = com.google.javascript.rhino.ScriptRuntime.notFunctionError((java.lang.Object)var25, (java.lang.Object)var28);
    java.lang.Object var31 = null;
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var32 = var25.getDirectedGraphNode(var31);
    com.google.javascript.jscomp.graph.SubGraph var33 = var25.newSubGraph();
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var42 = var37.clonePropsFrom(var41);
    com.google.javascript.rhino.jstype.JSType var43 = null;
    var41.setJSType(var43);
    var41.setOptionalArg(true);
    int var47 = var41.getLineno();
    boolean var48 = var41.isLocalResultCall();
    boolean var49 = var41.isQuotedString();
    var41.setOptionalArg(true);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var52 = var25.createDirectedGraphNode((java.lang.Object)var41);
    java.util.List var53 = var22.getNeighborNodes(var52);
    java.util.List var54 = var0.getNeighborNodes(var52);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var55 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var56 = var0.getDirectedPredNodes(var55);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test247() {}
//   public void test247() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test247"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     var0.disableThreads();
//     var0.disableThreads();
//     com.google.javascript.jscomp.CompilerInput var5 = var0.newExternInput("hi!. hi! at (unknown source) line (unknown line) : (unknown column)");
// 
//   }

  public void test248() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test248"); }


    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var9 = var4.clonePropsFrom(var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    var9.setJSType(var10);
    boolean var12 = var9.hasSideEffects();
    java.lang.Iterable var13 = var9.children();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var23 = var18.clonePropsFrom(var22);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var23.setJSType(var24);
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var34 = var29.clonePropsFrom(var33);
    com.google.javascript.rhino.jstype.JSType var35 = null;
    var34.setJSType(var35);
    java.util.Collection var37 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var34);
    com.google.javascript.rhino.Node.AncestorIterable var38 = var34.getAncestors();
    boolean var39 = var34.isOnlyModifiesThisCall();
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var48 = var43.clonePropsFrom(var47);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    var47.setJSType(var49);
    var47.setOptionalArg(true);
    int var53 = var47.getLineno();
    boolean var54 = var47.isLocalResultCall();
    boolean var55 = var47.isQuotedString();
    com.google.javascript.rhino.Node var56 = new com.google.javascript.rhino.Node(0, var23, var34, var47);
    com.google.javascript.rhino.Node var57 = var23.cloneNode();
    com.google.javascript.rhino.Node var58 = var9.copyInformationFromForTree(var57);
    java.lang.String var59 = var9.getQualifiedName();
    com.google.javascript.rhino.jstype.JSType var60 = null;
    var9.setJSType(var60);
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var66 = var65.getType();
    com.google.javascript.rhino.Node var67 = var65.cloneTree();
    var65.addSuppression("");
    int var70 = var65.getType();
    com.google.javascript.rhino.Node var71 = com.google.javascript.jscomp.NodeUtil.newExpr(var65);
    int var72 = var71.getChildCount();
    com.google.javascript.rhino.Node var76 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var77 = var76.getType();
    int var78 = var76.getSourcePosition();
    com.google.javascript.rhino.Node var79 = var76.getLastSibling();
    com.google.javascript.rhino.Node var80 = var76.removeFirstChild();
    java.lang.String var81 = var76.getQualifiedName();
    com.google.javascript.rhino.Node var86 = com.google.javascript.rhino.Node.newString(0, "", 40, (-1));
    com.google.javascript.rhino.Node var87 = new com.google.javascript.rhino.Node(1, var9, var71, var76, var86);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var71.setSideEffectFlags((-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test249() {}
//   public void test249() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test249"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var1 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.Collection var2 = var1.getNodes();
//     java.util.List var3 = var1.getEdges();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     var7.setType(10);
//     com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var3, var7, 1, 100);
//     com.google.javascript.jscomp.ComposeWarningsGuard var13 = new com.google.javascript.jscomp.ComposeWarningsGuard(var3);
//     com.google.javascript.rhino.Node var16 = null;
//     com.google.javascript.jscomp.CheckLevel var18 = null;
//     com.google.javascript.jscomp.DiagnosticType var20 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var18, "hi!");
//     java.lang.String[] var22 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var23 = com.google.javascript.jscomp.JSError.make("", var16, var20, var22);
//     java.lang.RuntimeException var25 = com.google.javascript.rhino.ScriptRuntime.undefWriteError((java.lang.Object)(short)0, (java.lang.Object)var20, (java.lang.Object)40);
//     com.google.javascript.jscomp.DiagnosticType[] var26 = new com.google.javascript.jscomp.DiagnosticType[] { var20};
//     com.google.javascript.jscomp.DiagnosticGroup var27 = new com.google.javascript.jscomp.DiagnosticGroup(var26);
//     com.google.javascript.jscomp.DiagnosticGroup[] var28 = new com.google.javascript.jscomp.DiagnosticGroup[] { var27};
//     com.google.javascript.jscomp.DiagnosticGroup var29 = new com.google.javascript.jscomp.DiagnosticGroup(var28);
//     boolean var30 = var13.enables(var29);
//     com.google.javascript.jscomp.Compiler var31 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var32 = var31.getTopScope();
//     var31.disableThreads();
//     var31.disableThreads();
//     com.google.javascript.jscomp.MessageFormatter var35 = null;
//     java.util.logging.Logger var36 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var37 = new com.google.javascript.jscomp.LoggerErrorManager(var35, var36);
//     com.google.javascript.jscomp.CheckLevel var38 = null;
//     com.google.javascript.rhino.Node var40 = null;
//     com.google.javascript.jscomp.CheckLevel var42 = null;
//     com.google.javascript.jscomp.DiagnosticType var44 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var42, "hi!");
//     java.lang.String[] var46 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var47 = com.google.javascript.jscomp.JSError.make("", var40, var44, var46);
//     var37.report(var38, var47);
//     var31.setErrorManager((com.google.javascript.jscomp.ErrorManager)var37);
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var50 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var51 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var31, var50);
//     com.google.javascript.jscomp.NodeTraversal.Callback var52 = null;
//     com.google.javascript.jscomp.NodeTraversal var53 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var31, var52);
//     com.google.javascript.jscomp.ErrorManager var54 = var31.getErrorManager();
//     com.google.javascript.rhino.Context var55 = null;
//     com.google.javascript.rhino.Context var56 = com.google.javascript.rhino.Context.enter(var55);
//     var56.setCompileFunctionsWithDynamicScope(false);
//     com.google.javascript.jscomp.MessageFormatter var59 = null;
//     java.util.logging.Logger var60 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var61 = new com.google.javascript.jscomp.LoggerErrorManager(var59, var60);
//     com.google.javascript.jscomp.CheckLevel var62 = null;
//     com.google.javascript.rhino.Node var64 = null;
//     com.google.javascript.jscomp.CheckLevel var66 = null;
//     com.google.javascript.jscomp.DiagnosticType var68 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var66, "hi!");
//     java.lang.String[] var70 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var71 = com.google.javascript.jscomp.JSError.make("", var64, var68, var70);
//     var61.report(var62, var71);
//     var56.removeThreadLocal((java.lang.Object)var71);
//     java.lang.String var74 = var71.toString();
//     com.google.javascript.jscomp.CheckLevel var75 = var31.getErrorLevel(var71);
//     com.google.javascript.jscomp.CheckLevel var76 = var13.level(var71);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var30 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var54);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var68);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var70);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var71);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var74 + "' != '" + "hi!. hi! at (unknown source) line (unknown line) : (unknown column)"+ "'", var74.equals("hi!. hi! at (unknown source) line (unknown line) : (unknown column)"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var75);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var76);
// 
//   }

  public void test250() {}
//   public void test250() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test250"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     java.util.Collection var1 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var0);
// 
//   }

  public void test251() {}
//   public void test251() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test251"); }
// 
// 
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       com.google.javascript.rhino.EvaluatorException var1 = com.google.javascript.rhino.Context.reportRuntimeError("STRING \n");
//       fail("Expected exception of type com.google.javascript.rhino.EvaluatorException");
//     } catch (com.google.javascript.rhino.EvaluatorException e) {
//       // Expected exception.
//     }
// 
//   }

  public void test252() {}
//   public void test252() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test252"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile.Generator var1 = null;
//     com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("goog.exportSymbol", var1);
//     java.io.Reader var3 = var2.getCodeReader();
// 
//   }

  public void test253() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test253"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var4 = var3.getNodes();
    java.util.List var5 = var3.getEdges();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var9.setType(10);
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var5, var9, 1, 100);
    var0.setReplaceStringsConfiguration("hi!", var5);
    var0.setShadowVariables(true);
    var0.setRemoveClosureAsserts(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test254() {}
//   public void test254() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test254"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.Node.newString("hi!");
//     com.google.javascript.rhino.Node var3 = var1.getChildAtIndex(40);
// 
//   }

  public void test255() {}
//   public void test255() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test255"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setAcceptConstKeyword(true);
//     var0.setTweakToStringLiteral("goog.exportProperty", "goog.exportSymbol");
//     var0.setShadowVariables(true);
//     var0.setColorizeErrorOutput(true);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var11 = var10.newSubGraph();
//     var10.pushNodeAnnotations();
//     java.util.List var13 = var10.getGraphvizEdges();
//     com.google.javascript.jscomp.ComposeWarningsGuard var14 = new com.google.javascript.jscomp.ComposeWarningsGuard(var13);
//     var0.setManageClosureDependencies(var13);
//     var0.setTweakToDoubleLiteral("hi!: hi!", 10.0d);
//     java.util.List var19 = null;
//     var0.setManageClosureDependencies(var19);
// 
//   }

  public void test256() {}
//   public void test256() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test256"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var1 = var0.newSubGraph();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var3 = var2.newSubGraph();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var5 = var2.createDirectedGraphNode((java.lang.Object)100);
//     java.util.List var6 = var0.getDirectedPredNodes(var5);
//     com.google.javascript.jscomp.JSModuleGraph var7 = new com.google.javascript.jscomp.JSModuleGraph(var6);
//     com.google.javascript.jscomp.ComposeWarningsGuard var8 = new com.google.javascript.jscomp.ComposeWarningsGuard(var6);
//     com.google.javascript.rhino.Context var9 = null;
//     com.google.javascript.rhino.Context var10 = com.google.javascript.rhino.Context.enter(var9);
//     var10.setCompileFunctionsWithDynamicScope(false);
//     com.google.javascript.jscomp.MessageFormatter var13 = null;
//     java.util.logging.Logger var14 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var15 = new com.google.javascript.jscomp.LoggerErrorManager(var13, var14);
//     com.google.javascript.jscomp.CheckLevel var16 = null;
//     com.google.javascript.rhino.Node var18 = null;
//     com.google.javascript.jscomp.CheckLevel var20 = null;
//     com.google.javascript.jscomp.DiagnosticType var22 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var20, "hi!");
//     java.lang.String[] var24 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var25 = com.google.javascript.jscomp.JSError.make("", var18, var22, var24);
//     var15.report(var16, var25);
//     var10.removeThreadLocal((java.lang.Object)var25);
//     com.google.javascript.jscomp.DiagnosticType var28 = var25.getType();
//     com.google.javascript.jscomp.CheckLevel var29 = var8.level(var25);
//     com.google.javascript.rhino.Node var32 = null;
//     com.google.javascript.jscomp.CheckLevel var34 = null;
//     com.google.javascript.jscomp.DiagnosticType var36 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var34, "hi!");
//     java.lang.String[] var38 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var39 = com.google.javascript.jscomp.JSError.make("", var32, var36, var38);
//     java.lang.RuntimeException var41 = com.google.javascript.rhino.ScriptRuntime.undefWriteError((java.lang.Object)(short)0, (java.lang.Object)var36, (java.lang.Object)40);
//     com.google.javascript.jscomp.DiagnosticType[] var42 = new com.google.javascript.jscomp.DiagnosticType[] { var36};
//     com.google.javascript.jscomp.DiagnosticGroup var43 = new com.google.javascript.jscomp.DiagnosticGroup(var42);
//     com.google.javascript.jscomp.DiagnosticGroup var44 = new com.google.javascript.jscomp.DiagnosticGroup(var42);
//     boolean var45 = var8.disables(var44);
//     com.google.javascript.jscomp.DiagnosticType var51 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
//     com.google.javascript.jscomp.DiagnosticType var57 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
//     java.lang.String[] var59 = new java.lang.String[] { "hi!: hi!"};
//     com.google.javascript.jscomp.JSError var60 = com.google.javascript.jscomp.JSError.make("hi!. hi! at (unknown source) line (unknown line) : (unknown column)", 40, 0, var57, var59);
//     com.google.javascript.jscomp.JSError var61 = com.google.javascript.jscomp.JSError.make("()", (-1), 10, var51, var59);
//     com.google.javascript.jscomp.CheckLevel var62 = var8.level(var61);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var2);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var45 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var57);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var59);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var60);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var61);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var62);
// 
//   }

  public void test257() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test257"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var1 = var0.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var3 = var0.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var4 = var0.getGraphvizNodes();
    java.util.List var5 = var0.getGraphvizNodes();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var6 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var7 = var6.newSubGraph();
    var6.clearEdgeAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var9 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var10 = var9.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var12 = var9.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var13 = var9.getGraphvizNodes();
    var9.clearNodeAnnotations();
    var9.pushNodeAnnotations();
    java.util.List var16 = var9.getGraphvizEdges();
    com.google.javascript.jscomp.JSSourceFile var19 = com.google.javascript.jscomp.JSSourceFile.fromCode("null(null)", "goog.global");
    com.google.javascript.jscomp.graph.GraphNode var20 = var9.getNode((java.lang.Object)"null(null)");
    var9.pushNodeAnnotations();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var22 = var0.getDirectedGraphEdges((java.lang.Object)var6, (java.lang.Object)var9);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test258() {}
//   public void test258() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test258"); }
// 
// 
//     com.google.javascript.rhino.Context var0 = null;
//     com.google.javascript.rhino.Context var1 = com.google.javascript.rhino.Context.enter(var0);
//     var1.setCompileFunctionsWithDynamicScope(false);
//     com.google.javascript.jscomp.MessageFormatter var4 = null;
//     java.util.logging.Logger var5 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var6 = new com.google.javascript.jscomp.LoggerErrorManager(var4, var5);
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     com.google.javascript.rhino.Node var9 = null;
//     com.google.javascript.jscomp.CheckLevel var11 = null;
//     com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var11, "hi!");
//     java.lang.String[] var15 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", var9, var13, var15);
//     var6.report(var7, var16);
//     var1.removeThreadLocal((java.lang.Object)var16);
//     int var19 = var1.getInstructionObserverThreshold();
//     var1.addActivationName("goog.exportProperty");
//     int var22 = var1.getLanguageVersion();
//     boolean var23 = var1.isSealed();
//     var1.removeActivationName("");
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == false);
// 
//   }

  public void test259() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test259"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setAcceptConstKeyword(true);
    var0.setTweakToStringLiteral("goog.exportProperty", "goog.exportSymbol");
    var0.setShadowVariables(true);
    var0.setCollapsePropertiesOnExternTypes(true);
    java.util.Map var10 = var0.getDefineReplacements();
    var0.setTweakToBooleanLiteral("com.google.javascript.rhino.EcmaError: : hi!: goog.global", false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test260() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test260"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var1 = var0.getNodes();
    var0.clearEdgeAnnotations();
    boolean var3 = var0.isDirected();
    java.util.List var4 = var0.getGraphvizEdges();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var13 = var8.clonePropsFrom(var12);
    var13.putProp((-1), (java.lang.Object)10.0d);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var25 = var20.clonePropsFrom(var24);
    com.google.javascript.rhino.Node var26 = var13.copyInformationFrom(var25);
    boolean var27 = var25.hasOneChild();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var28 = var0.getWeight((java.lang.Object)var25);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test261() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test261"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var4 = var3.getType();
    com.google.javascript.rhino.Node var5 = var3.cloneTree();
    var3.addSuppression("");
    int var8 = var3.getType();
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.NodeUtil.newExpr(var3);
    var9.setLineno((-1));
    com.google.javascript.rhino.Node var13 = var9.getAncestor(0);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var22 = var17.clonePropsFrom(var21);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var21.setJSType(var23);
    var21.setOptionalArg(true);
    int var27 = var21.getLineno();
    com.google.javascript.rhino.jstype.JSType var28 = var21.getJSType();
    var21.addSuppression("");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var31 = var9.checkTreeEquals(var21);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test262() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test262"); }


    com.google.javascript.jscomp.SourceFile.Generator var1 = null;
    com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("goog.exportSymbol: STRING ", var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test263() {}
//   public void test263() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test263"); }
// 
// 
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       com.google.javascript.rhino.Context.reportError("()", "hi!: hi!", 0, "or", 0);
//       fail("Expected exception of type com.google.javascript.rhino.EvaluatorException");
//     } catch (com.google.javascript.rhino.EvaluatorException e) {
//       // Expected exception.
//     }
// 
//   }

  public void test264() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test264"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var1 = var0.newSubGraph();
    var0.pushNodeAnnotations();
    com.google.javascript.jscomp.graph.SubGraph var3 = var0.newSubGraph();
    java.lang.Iterable var4 = var0.getDirectedGraphNodes();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var10 = var9.getType();
    int var11 = var9.getSourcePosition();
    com.google.javascript.rhino.Node var12 = var9.getLastSibling();
    com.google.javascript.rhino.Node var13 = var9.removeFirstChild();
    java.lang.String var17 = var9.toString(false, true, false);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var26 = var21.clonePropsFrom(var25);
    com.google.javascript.rhino.Node var28 = var25.getAncestor(0);
    boolean var29 = var25.isQualifiedName();
    com.google.javascript.rhino.JSDocInfo var30 = null;
    var25.setJSDocInfo(var30);
    var9.addChildToFront(var25);
    com.google.javascript.jscomp.CheckLevel var33 = null;
    com.google.javascript.jscomp.DiagnosticType var36 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "");
    com.google.javascript.jscomp.CheckLevel var40 = null;
    com.google.javascript.rhino.Node var42 = null;
    com.google.javascript.jscomp.CheckLevel var44 = null;
    com.google.javascript.jscomp.DiagnosticType var46 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var44, "hi!");
    java.lang.String[] var48 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var49 = com.google.javascript.jscomp.JSError.make("", var42, var46, var48);
    java.lang.String[] var51 = new java.lang.String[] { "goog.exportProperty"};
    com.google.javascript.jscomp.JSError var52 = com.google.javascript.jscomp.JSError.make("eof", 1, 40, var40, var46, var51);
    com.google.javascript.jscomp.JSError var53 = com.google.javascript.jscomp.JSError.make("com.google.javascript.rhino.EcmaError: : hi!: goog.global", var9, var33, var36, var51);
    com.google.javascript.jscomp.DiagnosticType var54 = var53.getType();
    com.google.javascript.jscomp.JSSourceFile var57 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.CompilerInput var58 = new com.google.javascript.jscomp.CompilerInput(var57);
    java.lang.String var59 = var57.getOriginalPath();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.graph.Graph.GraphEdge var60 = var0.getFirstEdge((java.lang.Object)var53, (java.lang.Object)var59);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "STRING "+ "'", var17.equals("STRING "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + ""+ "'", var59.equals(""));

  }

  public void test265() {}
//   public void test265() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test265"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     var0.disableThreads();
//     var0.disableThreads();
//     com.google.javascript.jscomp.MessageFormatter var4 = null;
//     java.util.logging.Logger var5 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var6 = new com.google.javascript.jscomp.LoggerErrorManager(var4, var5);
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     com.google.javascript.rhino.Node var9 = null;
//     com.google.javascript.jscomp.CheckLevel var11 = null;
//     com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var11, "hi!");
//     java.lang.String[] var15 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", var9, var13, var15);
//     var6.report(var7, var16);
//     var0.setErrorManager((com.google.javascript.jscomp.ErrorManager)var6);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.Collection var21 = var20.getNodes();
//     java.util.List var22 = var20.getEdges();
//     com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     var26.setType(10);
//     com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var22, var26, 1, 100);
//     com.google.javascript.jscomp.ComposeWarningsGuard var32 = new com.google.javascript.jscomp.ComposeWarningsGuard(var22);
//     com.google.javascript.jscomp.NodeTraversal.Callback var33 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var0, var22, var33);
//     com.google.javascript.jscomp.LightweightMessageFormatter var35 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0);
//     com.google.javascript.rhino.Node var36 = var0.getRoot();
//     com.google.javascript.jscomp.Scope var37 = var0.getTopScope();
//     boolean var38 = var0.hasErrors();
// 
//   }

  public void test266() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test266"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var4 = var3.getType();
    com.google.javascript.rhino.Node var5 = var3.cloneTree();
    var3.addSuppression("");
    int var8 = var3.getType();
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.NodeUtil.newExpr(var3);
    var9.setLineno((-1));
    com.google.javascript.rhino.EcmaError var19 = com.google.javascript.rhino.ScriptRuntime.constructError("", "hi!", "hi!", (-1), "hi!", 1);
    java.lang.String var20 = var19.details();
    int var21 = var19.lineNumber();
    var9.putProp(100, (java.lang.Object)var19);
    java.lang.String var23 = var19.getName();
    java.lang.String var24 = var19.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + ": hi!"+ "'", var20.equals(": hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "com.google.javascript.rhino.EcmaError: : hi!"+ "'", var24.equals("com.google.javascript.rhino.EcmaError: : hi!"));

  }

  public void test267() {}
//   public void test267() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test267"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     java.lang.String var1 = var0.getGlobalObject();
//     java.lang.String var2 = var0.getExportPropertyFunction();
//     java.lang.String var3 = var0.getDelegateSuperclassName();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString(": hi!", 100, 10);
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     var12.setType(10);
//     com.google.javascript.rhino.Node var16 = new com.google.javascript.rhino.Node(10);
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var25 = var20.clonePropsFrom(var24);
//     var25.putProp((-1), (java.lang.Object)10.0d);
//     com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var37 = var32.clonePropsFrom(var36);
//     com.google.javascript.rhino.Node var38 = var25.copyInformationFrom(var37);
//     boolean var39 = var37.hasOneChild();
//     com.google.javascript.rhino.Node var41 = null;
//     com.google.javascript.jscomp.CheckLevel var43 = null;
//     com.google.javascript.jscomp.DiagnosticType var45 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var43, "hi!");
//     java.lang.String[] var47 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var48 = com.google.javascript.jscomp.JSError.make("", var41, var45, var47);
//     com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var53 = var52.getType();
//     com.google.javascript.rhino.Node var54 = var52.cloneTree();
//     boolean var55 = var48.equals((java.lang.Object)var52);
//     com.google.javascript.rhino.Node var58 = new com.google.javascript.rhino.Node((-1), var12, var16, var37, var52, 0, 1);
//     java.lang.String var59 = var0.extractClassNameIfProvide(var7, var52);
//     boolean var61 = var0.isPrivate("goog.exportProperty");
//     com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     java.lang.String var66 = var0.getSingletonGetterClassName(var65);
// 
//   }

  public void test268() {}
//   public void test268() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test268"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticGroup var0 = null;
//     com.google.javascript.jscomp.CheckLevel var1 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var2 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var0, var1);
//     java.lang.String var3 = var2.toString();
//     java.lang.String var4 = var2.toString();
//     com.google.javascript.jscomp.JSError var5 = null;
//     com.google.javascript.jscomp.CheckLevel var6 = var2.level(var5);
// 
//   }

  public void test269() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test269"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var4 = var3.getType();
    com.google.javascript.rhino.Node var5 = var3.cloneTree();
    var3.addSuppression("");
    int var8 = var3.getType();
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.NodeUtil.newExpr(var3);
    var9.setLineno((-1));
    com.google.javascript.rhino.EcmaError var19 = com.google.javascript.rhino.ScriptRuntime.constructError("", "hi!", "hi!", (-1), "hi!", 1);
    java.lang.String var20 = var19.details();
    int var21 = var19.lineNumber();
    var9.putProp(100, (java.lang.Object)var19);
    java.lang.String var23 = var19.getName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var19.initSourceName(": WARNING - hi!\n");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + ": hi!"+ "'", var20.equals(": hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));

  }

  public void test270() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test270"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var1 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var2 = var1.getNodes();
    java.util.List var3 = var1.getEdges();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var7.setType(10);
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var3, var7, 1, 100);
    com.google.javascript.jscomp.JSModuleGraph var13 = new com.google.javascript.jscomp.JSModuleGraph(var3);
    com.google.javascript.jscomp.JSModule var14 = null;
    com.google.javascript.jscomp.JSModule var15 = null;
    com.google.javascript.jscomp.JSModule var16 = var13.getDeepestCommonDependencyInclusive(var14, var15);
    var13.coalesceDuplicateFiles();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test271() {}
//   public void test271() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test271"); }
// 
// 
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var8 = var3.clonePropsFrom(var7);
//     int var9 = var8.getLineno();
//     com.google.javascript.rhino.Node var10 = var8.cloneNode();
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var15 = var14.getType();
//     com.google.javascript.rhino.Node var16 = var14.cloneTree();
//     var14.addSuppression("");
//     int var19 = var14.getType();
//     com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.NodeUtil.newExpr(var14);
//     var20.setLineno((-1));
//     var8.removeChild(var20);
// 
//   }

  public void test272() {}
//   public void test272() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test272"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     com.google.javascript.jscomp.SourceMap var2 = var0.getSourceMap();
//     com.google.javascript.jscomp.JSSourceFile var5 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
//     com.google.javascript.jscomp.SourceFile.Generator var7 = null;
//     com.google.javascript.jscomp.JSSourceFile var8 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var7);
//     com.google.javascript.jscomp.CompilerInput var10 = new com.google.javascript.jscomp.CompilerInput(var8, true);
//     com.google.javascript.jscomp.CompilerOptions var11 = new com.google.javascript.jscomp.CompilerOptions();
//     var11.setAcceptConstKeyword(true);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var14 = var11.getTweakProcessing();
//     var11.setRewriteNewDateGoogNow(false);
//     com.google.javascript.jscomp.Result var17 = var0.compile(var5, var8, var11);
//     java.lang.String var18 = var8.getCode();
// 
//   }

  public void test273() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test273"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.warning("or", "goog.exportSymbol");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test274() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test274"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
    com.google.javascript.jscomp.SourceMap var2 = var0.getSourceMap();
    com.google.javascript.jscomp.JSSourceFile var5 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.SourceFile.Generator var7 = null;
    com.google.javascript.jscomp.JSSourceFile var8 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var7);
    com.google.javascript.jscomp.CompilerInput var10 = new com.google.javascript.jscomp.CompilerInput(var8, true);
    com.google.javascript.jscomp.CompilerOptions var11 = new com.google.javascript.jscomp.CompilerOptions();
    var11.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var14 = var11.getTweakProcessing();
    var11.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.Result var17 = var0.compile(var5, var8, var11);
    com.google.javascript.jscomp.LightweightMessageFormatter var18 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0);
    com.google.javascript.jscomp.Region var21 = var0.getSourceRegion("com.google.javascript.rhino.EcmaError: : hi!", 0);
    com.google.javascript.jscomp.JSModule var22 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String[] var23 = var0.toSourceArray(var22);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test275() {}
//   public void test275() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test275"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setAcceptConstKeyword(true);
//     com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var3 = null;
//     var0.setAliasTransformationHandler(var3);
//     var0.setCollapsePropertiesOnExternTypes(false);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var7 = var0.getTweakProcessing();
//     var0.setColorizeErrorOutput(true);
//     com.google.javascript.jscomp.CompilerOptions var10 = new com.google.javascript.jscomp.CompilerOptions();
//     var10.setAcceptConstKeyword(true);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var13 = var10.getTweakProcessing();
//     var10.setRewriteNewDateGoogNow(false);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var16 = var10.getTweakProcessing();
//     var0.setTweakProcessing(var16);
//     java.util.Set var18 = null;
//     var0.setIdGenerators(var18);
// 
//   }

  public void test276() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test276"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.EcmaError var2 = com.google.javascript.rhino.ScriptRuntime.typeError1("goog.global: ", "ERROR\n    STRING \n");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test277() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test277"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isPrivate("");
    boolean var4 = var0.isPrivate("goog.exportProperty");
    boolean var6 = var0.isConstant("com.google.javascript.rhino.EcmaError: : hi!");
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var15 = var10.clonePropsFrom(var14);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    var14.setJSType(var16);
    var14.setOptionalArg(true);
    int var20 = var14.getLineno();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var29 = var24.clonePropsFrom(var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    var28.setJSType(var30);
    java.lang.String var32 = var0.extractClassNameIfProvide(var14, var28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var14.setDouble(1.0d);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test278() {}
//   public void test278() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test278"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.JSSourceFile var4 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
//     com.google.javascript.rhino.Node var5 = var1.parse(var4);
//     boolean var6 = var1.isTypeCheckingEnabled();
//     var1.disableThreads();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     var8.clearEdgeAnnotations();
//     com.google.javascript.jscomp.Compiler var10 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var11 = var10.getTopScope();
//     com.google.javascript.jscomp.SourceMap var12 = var10.getSourceMap();
//     com.google.javascript.jscomp.JSSourceFile var15 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
//     com.google.javascript.jscomp.SourceFile.Generator var17 = null;
//     com.google.javascript.jscomp.JSSourceFile var18 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var17);
//     com.google.javascript.jscomp.CompilerInput var20 = new com.google.javascript.jscomp.CompilerInput(var18, true);
//     com.google.javascript.jscomp.CompilerOptions var21 = new com.google.javascript.jscomp.CompilerOptions();
//     var21.setAcceptConstKeyword(true);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var24 = var21.getTweakProcessing();
//     var21.setRewriteNewDateGoogNow(false);
//     com.google.javascript.jscomp.Result var27 = var10.compile(var15, var18, var21);
//     com.google.javascript.jscomp.LightweightMessageFormatter var28 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var10);
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var29 = var8.createDirectedGraphNode((java.lang.Object)var28);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var31 = var30.newSubGraph();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var32 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var33 = var32.newSubGraph();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var35 = var32.createDirectedGraphNode((java.lang.Object)100);
//     java.util.List var36 = var30.getDirectedPredNodes(var35);
//     com.google.javascript.jscomp.JSModuleGraph var37 = new com.google.javascript.jscomp.JSModuleGraph(var36);
//     com.google.javascript.jscomp.ComposeWarningsGuard var38 = new com.google.javascript.jscomp.ComposeWarningsGuard(var36);
//     com.google.javascript.rhino.Context var39 = null;
//     com.google.javascript.rhino.Context var40 = com.google.javascript.rhino.Context.enter(var39);
//     var40.setCompileFunctionsWithDynamicScope(false);
//     com.google.javascript.jscomp.MessageFormatter var43 = null;
//     java.util.logging.Logger var44 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var45 = new com.google.javascript.jscomp.LoggerErrorManager(var43, var44);
//     com.google.javascript.jscomp.CheckLevel var46 = null;
//     com.google.javascript.rhino.Node var48 = null;
//     com.google.javascript.jscomp.CheckLevel var50 = null;
//     com.google.javascript.jscomp.DiagnosticType var52 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var50, "hi!");
//     java.lang.String[] var54 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var55 = com.google.javascript.jscomp.JSError.make("", var48, var52, var54);
//     var45.report(var46, var55);
//     var40.removeThreadLocal((java.lang.Object)var55);
//     com.google.javascript.jscomp.DiagnosticType var58 = var55.getType();
//     com.google.javascript.jscomp.CheckLevel var59 = var38.level(var55);
//     java.lang.String var60 = var28.formatWarning(var55);
//     com.google.javascript.jscomp.CheckLevel var61 = var1.getErrorLevel(var55);
//     com.google.javascript.jscomp.JSSourceFile var64 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
//     com.google.javascript.jscomp.CompilerInput var65 = new com.google.javascript.jscomp.CompilerInput(var64);
//     java.lang.String var66 = var64.getOriginalPath();
//     var64.setOriginalPath("goog.exportSymbol");
//     com.google.javascript.jscomp.JSSourceFile[] var69 = new com.google.javascript.jscomp.JSSourceFile[] { var64};
//     com.google.javascript.jscomp.JSModule var70 = null;
//     com.google.javascript.jscomp.JSModule[] var71 = new com.google.javascript.jscomp.JSModule[] { var70};
//     com.google.javascript.jscomp.CompilerOptions var72 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var75 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.Collection var76 = var75.getNodes();
//     java.util.List var77 = var75.getEdges();
//     com.google.javascript.rhino.Node var81 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     var81.setType(10);
//     com.google.javascript.rhino.Node var86 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var77, var81, 1, 100);
//     var72.setReplaceStringsConfiguration("hi!", var77);
//     java.util.Map var88 = var72.getDefineReplacements();
//     var72.setTweakToDoubleLiteral(": hi!", 100.0d);
//     com.google.javascript.jscomp.CodingConvention var92 = var72.getCodingConvention();
//     java.util.Map var93 = var72.getTweakReplacements();
//     com.google.javascript.jscomp.Result var94 = var1.compile(var69, var71, var72);
// 
//   }

  public void test279() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test279"); }


    com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
    java.lang.String var2 = var1.getGlobalObject();
    java.lang.String var3 = var1.getExportPropertyFunction();
    java.lang.String var4 = var1.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.Node.newString(": hi!", 100, 10);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var13.setType(10);
    com.google.javascript.rhino.Node var17 = new com.google.javascript.rhino.Node(10);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var26 = var21.clonePropsFrom(var25);
    var26.putProp((-1), (java.lang.Object)10.0d);
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var38 = var33.clonePropsFrom(var37);
    com.google.javascript.rhino.Node var39 = var26.copyInformationFrom(var38);
    boolean var40 = var38.hasOneChild();
    com.google.javascript.rhino.Node var42 = null;
    com.google.javascript.jscomp.CheckLevel var44 = null;
    com.google.javascript.jscomp.DiagnosticType var46 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var44, "hi!");
    java.lang.String[] var48 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var49 = com.google.javascript.jscomp.JSError.make("", var42, var46, var48);
    com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var54 = var53.getType();
    com.google.javascript.rhino.Node var55 = var53.cloneTree();
    boolean var56 = var49.equals((java.lang.Object)var53);
    com.google.javascript.rhino.Node var59 = new com.google.javascript.rhino.Node((-1), var13, var17, var38, var53, 0, 1);
    java.lang.String var60 = var1.extractClassNameIfProvide(var8, var53);
    com.google.javascript.rhino.Node var61 = var53.cloneNode();
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var66 = var65.getType();
    com.google.javascript.rhino.Node var67 = var65.cloneTree();
    var65.addSuppression("");
    int var70 = var65.getType();
    com.google.javascript.rhino.Node var71 = com.google.javascript.jscomp.NodeUtil.newExpr(var65);
    var71.setLineno((-1));
    com.google.javascript.rhino.EcmaError var81 = com.google.javascript.rhino.ScriptRuntime.constructError("", "hi!", "hi!", (-1), "hi!", 1);
    java.lang.String var82 = var81.details();
    int var83 = var81.lineNumber();
    var71.putProp(100, (java.lang.Object)var81);
    com.google.javascript.rhino.Node var88 = new com.google.javascript.rhino.Node(0, 1, 10);
    com.google.javascript.rhino.Node var89 = var88.cloneNode();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var92 = new com.google.javascript.rhino.Node(1, var53, var71, var88, 1, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "goog.global"+ "'", var2.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "goog.exportProperty"+ "'", var3.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + ": hi!"+ "'", var82.equals(": hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test280() {}
//   public void test280() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test280"); }
// 
// 
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       com.google.javascript.rhino.Context.reportError("com.google.javascript.rhino.EcmaError: TypeError: Cannot set property \"hi!: hi!\" of 0 to \"40\"", "hi!. hi! at hi!. hi! at (unknown source) line (unknown line) : (unknown column) line 40 : 0", 10, "ERROR\n    STRING \n", 0);
//       fail("Expected exception of type com.google.javascript.rhino.EvaluatorException");
//     } catch (com.google.javascript.rhino.EvaluatorException e) {
//       // Expected exception.
//     }
// 
//   }

  public void test281() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test281"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    var0.clearEdgeAnnotations();
    com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var3 = var2.getTopScope();
    com.google.javascript.jscomp.SourceMap var4 = var2.getSourceMap();
    com.google.javascript.jscomp.JSSourceFile var7 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.SourceFile.Generator var9 = null;
    com.google.javascript.jscomp.JSSourceFile var10 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var9);
    com.google.javascript.jscomp.CompilerInput var12 = new com.google.javascript.jscomp.CompilerInput(var10, true);
    com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
    var13.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var16 = var13.getTweakProcessing();
    var13.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.Result var19 = var2.compile(var7, var10, var13);
    com.google.javascript.jscomp.LightweightMessageFormatter var20 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var2);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var21 = var0.createDirectedGraphNode((java.lang.Object)var20);
    com.google.javascript.jscomp.SourceFile var25 = com.google.javascript.jscomp.SourceFile.fromCode("goog.global", "string", "goog.exportSymbol");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var26 = var0.getDirectedSuccNodes((java.lang.Object)var25);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test282() {}
//   public void test282() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test282"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     com.google.javascript.jscomp.SourceMap var2 = var0.getSourceMap();
//     var0.reportCodeChange();
//     com.google.javascript.jscomp.SourceMap var4 = var0.getSourceMap();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     var5.clearEdgeAnnotations();
//     com.google.javascript.jscomp.Compiler var7 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var8 = var7.getTopScope();
//     com.google.javascript.jscomp.SourceMap var9 = var7.getSourceMap();
//     com.google.javascript.jscomp.JSSourceFile var12 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
//     com.google.javascript.jscomp.SourceFile.Generator var14 = null;
//     com.google.javascript.jscomp.JSSourceFile var15 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var14);
//     com.google.javascript.jscomp.CompilerInput var17 = new com.google.javascript.jscomp.CompilerInput(var15, true);
//     com.google.javascript.jscomp.CompilerOptions var18 = new com.google.javascript.jscomp.CompilerOptions();
//     var18.setAcceptConstKeyword(true);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var21 = var18.getTweakProcessing();
//     var18.setRewriteNewDateGoogNow(false);
//     com.google.javascript.jscomp.Result var24 = var7.compile(var12, var15, var18);
//     com.google.javascript.jscomp.LightweightMessageFormatter var25 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var7);
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var26 = var5.createDirectedGraphNode((java.lang.Object)var25);
//     com.google.javascript.rhino.Context var27 = null;
//     com.google.javascript.rhino.Context var28 = com.google.javascript.rhino.Context.enter(var27);
//     var28.setCompileFunctionsWithDynamicScope(false);
//     com.google.javascript.jscomp.MessageFormatter var31 = null;
//     java.util.logging.Logger var32 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var33 = new com.google.javascript.jscomp.LoggerErrorManager(var31, var32);
//     com.google.javascript.jscomp.CheckLevel var34 = null;
//     com.google.javascript.rhino.Node var36 = null;
//     com.google.javascript.jscomp.CheckLevel var38 = null;
//     com.google.javascript.jscomp.DiagnosticType var40 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var38, "hi!");
//     java.lang.String[] var42 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var43 = com.google.javascript.jscomp.JSError.make("", var36, var40, var42);
//     var33.report(var34, var43);
//     var28.removeThreadLocal((java.lang.Object)var43);
//     java.lang.String var46 = var43.toString();
//     java.lang.String var47 = var25.formatWarning(var43);
//     var0.report(var43);
// 
//   }

  public void test283() {}
//   public void test283() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test283"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var2 = var0.isPrivate("");
//     java.lang.String var3 = var0.getExportSymbolFunction();
//     boolean var5 = var0.isSuperClassReference("");
//     java.util.Collection var6 = var0.getAssertionFunctions();
//     java.lang.String var7 = var0.getDelegateSuperclassName();
//     java.lang.String var8 = var0.getGlobalObject();
//     com.google.javascript.rhino.jstype.FunctionType var9 = null;
//     com.google.javascript.rhino.jstype.FunctionType var10 = null;
//     com.google.javascript.rhino.jstype.ObjectType var11 = null;
//     var0.applySingletonGetter(var9, var10, var11);
// 
//   }

  public void test284() {}
//   public void test284() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test284"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile.Generator var1 = null;
//     com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var1);
//     com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var2, true);
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var6 = var5.getTopScope();
//     com.google.javascript.jscomp.Scope var7 = var5.getTopScope();
//     var4.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var5);
//     java.util.List var9 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var10 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var5, var9, var10);
// 
//   }

  public void test285() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test285"); }


    com.google.javascript.rhino.EcmaError var2 = com.google.javascript.rhino.ScriptRuntime.constructError("ERROR\n    STRING \n", "com.google.javascript.rhino.EcmaError: : hi!");
    java.lang.String var3 = var2.details();
    com.google.javascript.rhino.EcmaError var6 = com.google.javascript.rhino.ScriptRuntime.constructError("goog.global", "");
    int var7 = var6.getColumnNumber();
    com.google.javascript.rhino.EcmaError var14 = com.google.javascript.rhino.ScriptRuntime.constructError("", "hi!", "hi!", (-1), "hi!", 1);
    java.lang.String var15 = var14.toString();
    var6.addSuppressed((java.lang.Throwable)var14);
    var2.addSuppressed((java.lang.Throwable)var14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var14.initSourceName("ERROR\n    STRING \n");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "ERROR\n    STRING \n: com.google.javascript.rhino.EcmaError: : hi!"+ "'", var3.equals("ERROR\n    STRING \n: com.google.javascript.rhino.EcmaError: : hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "com.google.javascript.rhino.EcmaError: : hi!"+ "'", var15.equals("com.google.javascript.rhino.EcmaError: : hi!"));

  }

  public void test286() {}
//   public void test286() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test286"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile.Generator var1 = null;
//     com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var1);
//     com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var2, true);
//     com.google.javascript.jscomp.SourceFile.Generator var6 = null;
//     com.google.javascript.jscomp.SourceFile var7 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var6);
//     com.google.javascript.jscomp.JsAst var8 = new com.google.javascript.jscomp.JsAst(var7);
//     var4.setSourceFile(var7);
//     com.google.javascript.jscomp.JSModule var10 = null;
//     var4.setModule(var10);
//     java.lang.String var12 = var4.getName();
//     com.google.javascript.jscomp.Region var14 = var4.getRegion(100);
// 
//   }

  public void test287() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test287"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
    com.google.javascript.jscomp.SourceMap var2 = var0.getSourceMap();
    com.google.javascript.jscomp.JSSourceFile var5 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.SourceFile.Generator var7 = null;
    com.google.javascript.jscomp.JSSourceFile var8 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var7);
    com.google.javascript.jscomp.CompilerInput var10 = new com.google.javascript.jscomp.CompilerInput(var8, true);
    com.google.javascript.jscomp.CompilerOptions var11 = new com.google.javascript.jscomp.CompilerOptions();
    var11.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var14 = var11.getTweakProcessing();
    var11.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.Result var17 = var0.compile(var5, var8, var11);
    var11.setRemoveAbstractMethods(false);
    var11.setTweakToBooleanLiteral("or", true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test288() {}
//   public void test288() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test288"); }
// 
// 
//     com.google.javascript.rhino.Context var0 = com.google.javascript.rhino.Context.enter();
//     var0.setInstructionObserverThreshold(0);
//     boolean var3 = var0.isGeneratingSource();
//     int var4 = var0.getInstructionObserverThreshold();
//     boolean var5 = var0.isGeneratingDebugChanged();
//     java.lang.String var6 = var0.getImplementationVersion();
//     java.beans.PropertyChangeListener var7 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var0.addPropertyChangeListener(var7);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var6 + "' != '" + "@IMPLEMENTATION.VERSION@"+ "'", var6.equals("@IMPLEMENTATION.VERSION@"));
// 
//   }

  public void test289() {}
//   public void test289() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test289"); }
// 
// 
//     com.google.javascript.rhino.Context var0 = null;
//     com.google.javascript.rhino.Context var1 = com.google.javascript.rhino.Context.enter(var0);
//     var1.setCompileFunctionsWithDynamicScope(false);
//     com.google.javascript.jscomp.MessageFormatter var4 = null;
//     java.util.logging.Logger var5 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var6 = new com.google.javascript.jscomp.LoggerErrorManager(var4, var5);
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     com.google.javascript.rhino.Node var9 = null;
//     com.google.javascript.jscomp.CheckLevel var11 = null;
//     com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var11, "hi!");
//     java.lang.String[] var15 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", var9, var13, var15);
//     var6.report(var7, var16);
//     var1.removeThreadLocal((java.lang.Object)var16);
//     int var19 = var1.getInstructionObserverThreshold();
//     var1.addActivationName("goog.exportProperty");
//     java.util.Locale var22 = null;
//     java.util.Locale var23 = var1.setLocale(var22);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       com.google.javascript.rhino.Context var24 = com.google.javascript.rhino.Context.enter(var1);
//       fail("Expected exception of type java.lang.RuntimeException");
//     } catch (java.lang.RuntimeException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var23);
// 
//   }

  public void test290() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test290"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var4 = var3.getNodes();
    java.util.List var5 = var3.getEdges();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var9.setType(10);
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var5, var9, 1, 100);
    var0.setReplaceStringsConfiguration("hi!", var5);
    java.util.Map var16 = var0.getDefineReplacements();
    var0.setTweakToDoubleLiteral(": hi!", 100.0d);
    com.google.javascript.jscomp.CodingConvention var20 = var0.getCodingConvention();
    java.util.Map var21 = var0.getTweakReplacements();
    var0.setTweakToNumberLiteral("STRING \n", 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test291() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test291"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var1 = com.google.javascript.rhino.ScriptRuntime.getMessage0("hi!. hi! at (unknown source) line (unknown line) : (unknown column)");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test292() {}
//   public void test292() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test292"); }
// 
// 
//     com.google.javascript.rhino.Context var0 = com.google.javascript.rhino.Context.enter();
//     var0.setCompileFunctionsWithDynamicScope(false);
//     com.google.javascript.rhino.ErrorReporter var3 = var0.getErrorReporter();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var3);
// 
//   }

  public void test293() {}
//   public void test293() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test293"); }
// 
// 
//     com.google.javascript.rhino.Context var0 = null;
//     com.google.javascript.rhino.Context var1 = com.google.javascript.rhino.Context.enter(var0);
//     var1.setCompileFunctionsWithDynamicScope(false);
//     com.google.javascript.jscomp.MessageFormatter var4 = null;
//     java.util.logging.Logger var5 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var6 = new com.google.javascript.jscomp.LoggerErrorManager(var4, var5);
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     com.google.javascript.rhino.Node var9 = null;
//     com.google.javascript.jscomp.CheckLevel var11 = null;
//     com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var11, "hi!");
//     java.lang.String[] var15 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", var9, var13, var15);
//     var6.report(var7, var16);
//     var1.removeThreadLocal((java.lang.Object)var16);
//     int var19 = var1.getInstructionObserverThreshold();
//     var1.addActivationName("goog.exportProperty");
//     int var22 = var1.getLanguageVersion();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var23 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.Collection var24 = var23.getNodes();
//     com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var33 = var28.clonePropsFrom(var32);
//     com.google.javascript.rhino.jstype.JSType var34 = null;
//     var32.setJSType(var34);
//     java.lang.RuntimeException var36 = com.google.javascript.rhino.ScriptRuntime.undefWriteError((java.lang.Object)var1, (java.lang.Object)var23, (java.lang.Object)var34);
//     var23.popEdgeAnnotations();
// 
//   }

  public void test294() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test294"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var1 = var0.getNodes();
    var0.clearEdgeAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var4 = var3.newSubGraph();
    var3.pushNodeAnnotations();
    com.google.javascript.jscomp.graph.SubGraph var6 = var3.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var7 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var8 = var7.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var10 = var7.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var11 = var7.getGraphvizNodes();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var13 = var12.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var14 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var15 = var14.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var17 = var14.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var18 = var12.getDirectedPredNodes(var17);
    java.util.List var19 = var7.getDirectedPredNodes(var17);
    java.util.List var20 = var3.getDirectedPredNodes(var17);
    java.util.List var21 = var0.getNeighborNodes(var17);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var22 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.Collection var23 = var22.getNodes();
    var22.pushEdgeAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var25 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithEdgeAnnotations();
    com.google.javascript.jscomp.SourceFile.Generator var27 = null;
    com.google.javascript.jscomp.SourceFile var28 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var27);
    com.google.javascript.jscomp.JsAst var29 = new com.google.javascript.jscomp.JsAst(var28);
    java.lang.RuntimeException var30 = com.google.javascript.rhino.ScriptRuntime.notFunctionError((java.lang.Object)var25, (java.lang.Object)var28);
    java.lang.Object var31 = null;
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var32 = var25.getDirectedGraphNode(var31);
    com.google.javascript.jscomp.graph.SubGraph var33 = var25.newSubGraph();
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var42 = var37.clonePropsFrom(var41);
    com.google.javascript.rhino.jstype.JSType var43 = null;
    var41.setJSType(var43);
    var41.setOptionalArg(true);
    int var47 = var41.getLineno();
    boolean var48 = var41.isLocalResultCall();
    boolean var49 = var41.isQuotedString();
    var41.setOptionalArg(true);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var52 = var25.createDirectedGraphNode((java.lang.Object)var41);
    java.util.List var53 = var22.getNeighborNodes(var52);
    java.util.List var54 = var0.getNeighborNodes(var52);
    java.nio.charset.Charset var56 = null;
    com.google.javascript.jscomp.JSSourceFile var57 = com.google.javascript.jscomp.JSSourceFile.fromFile("hi!. hi! at (unknown source) line (unknown line) : (unknown column)", var56);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var58 = var0.getOutEdges((java.lang.Object)var56);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test295() {}
//   public void test295() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test295"); }
// 
// 
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       com.google.javascript.rhino.EvaluatorException var1 = com.google.javascript.rhino.Context.reportRuntimeError(": hi!");
//       fail("Expected exception of type com.google.javascript.rhino.EvaluatorException");
//     } catch (com.google.javascript.rhino.EvaluatorException e) {
//       // Expected exception.
//     }
// 
//   }

  public void test296() {}
//   public void test296() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test296"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile.Generator var1 = null;
//     com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var1);
//     com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var2, true);
//     com.google.javascript.jscomp.MessageFormatter var5 = null;
//     java.util.logging.Logger var6 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var7 = new com.google.javascript.jscomp.LoggerErrorManager(var5, var6);
//     var4.setErrorManager((com.google.javascript.jscomp.ErrorManager)var7);
//     com.google.javascript.jscomp.CompilerInput var10 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var4, true);
//     java.io.PrintStream var11 = null;
//     com.google.javascript.jscomp.Compiler var12 = new com.google.javascript.jscomp.Compiler(var11);
//     com.google.javascript.jscomp.SourceMap var13 = var12.getSourceMap();
//     com.google.javascript.jscomp.CompilerOptions var14 = new com.google.javascript.jscomp.CompilerOptions();
//     var14.setAcceptConstKeyword(true);
//     var14.setTweakToStringLiteral("goog.exportProperty", "goog.exportSymbol");
//     var14.setShadowVariables(true);
//     var14.setColorizeErrorOutput(true);
//     var14.setDefineToStringLiteral("com.google.javascript.rhino.EcmaError: TypeError: Cannot set property \"hi!: hi!\" of 0 to \"40\"", "");
//     var12.initOptions(var14);
//     com.google.javascript.rhino.Node var28 = var12.getRoot();
//     com.google.javascript.rhino.Node var29 = var10.getAstRoot((com.google.javascript.jscomp.AbstractCompiler)var12);
// 
//   }

  public void test297() {}
//   public void test297() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test297"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var1 = var0.newSubGraph();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var3 = var2.newSubGraph();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var5 = var2.createDirectedGraphNode((java.lang.Object)100);
//     java.util.List var6 = var0.getDirectedPredNodes(var5);
//     com.google.javascript.jscomp.JSModuleGraph var7 = new com.google.javascript.jscomp.JSModuleGraph(var6);
//     com.google.javascript.jscomp.JSModule var8 = null;
//     com.google.javascript.jscomp.JSModule var9 = null;
//     boolean var10 = var7.dependsOn(var8, var9);
// 
//   }

  public void test298() {}
//   public void test298() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test298"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var2 = var0.isPrivate("");
//     java.lang.String var3 = var0.getExportSymbolFunction();
//     boolean var5 = var0.isSuperClassReference("");
//     java.util.Collection var6 = var0.getAssertionFunctions();
//     java.lang.String var7 = var0.getDelegateSuperclassName();
//     java.lang.String var8 = var0.getGlobalObject();
//     boolean var11 = var0.isExported("null(null)", false);
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.Node.newString(0, "", 40, (-1));
//     var17.setCharno(40);
//     com.google.javascript.rhino.Context var20 = null;
//     com.google.javascript.rhino.Context var21 = com.google.javascript.rhino.Context.enter(var20);
//     var21.setCompileFunctionsWithDynamicScope(false);
//     com.google.javascript.jscomp.MessageFormatter var24 = null;
//     java.util.logging.Logger var25 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var26 = new com.google.javascript.jscomp.LoggerErrorManager(var24, var25);
//     com.google.javascript.jscomp.CheckLevel var27 = null;
//     com.google.javascript.rhino.Node var29 = null;
//     com.google.javascript.jscomp.CheckLevel var31 = null;
//     com.google.javascript.jscomp.DiagnosticType var33 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var31, "hi!");
//     java.lang.String[] var35 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var36 = com.google.javascript.jscomp.JSError.make("", var29, var33, var35);
//     var26.report(var27, var36);
//     var21.removeThreadLocal((java.lang.Object)var36);
//     com.google.javascript.jscomp.DiagnosticType var39 = var36.getType();
//     java.lang.String[] var40 = null;
//     com.google.javascript.jscomp.JSError var41 = com.google.javascript.jscomp.JSError.make("0", var17, var39, var40);
//     java.lang.String var45 = var17.toString(true, true, false);
//     java.lang.String var46 = var0.getSingletonGetterClassName(var17);
// 
//   }

  public void test299() {}
//   public void test299() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test299"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile.Generator var1 = null;
//     com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var1);
//     com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var2, true);
//     com.google.javascript.jscomp.SourceFile.Generator var6 = null;
//     com.google.javascript.jscomp.SourceFile var7 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var6);
//     com.google.javascript.jscomp.JsAst var8 = new com.google.javascript.jscomp.JsAst(var7);
//     var4.setSourceFile(var7);
//     com.google.javascript.jscomp.JSModule var10 = null;
//     var4.setModule(var10);
//     java.io.PrintStream var12 = null;
//     com.google.javascript.jscomp.Compiler var13 = new com.google.javascript.jscomp.Compiler(var12);
//     var4.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var13);
//     java.util.Collection var15 = var4.getRequires();
// 
//   }

  public void test300() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test300"); }


    boolean var1 = com.google.javascript.rhino.Context.isValidLanguageVersion(40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test301() {}
//   public void test301() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test301"); }
// 
// 
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var9 = var4.clonePropsFrom(var8);
//     var9.putProp((-1), (java.lang.Object)10.0d);
//     com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var21 = var16.clonePropsFrom(var20);
//     com.google.javascript.rhino.Node var22 = var9.copyInformationFrom(var21);
//     com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var31 = var26.clonePropsFrom(var30);
//     com.google.javascript.rhino.Node var33 = var30.getAncestor(0);
//     java.lang.String var34 = var22.checkTreeEquals(var30);
//     int var35 = var30.getLineno();
//     com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.Node.newString("");
//     com.google.javascript.rhino.Node var40 = new com.google.javascript.rhino.Node(1, var30, var37, 40, 0);
//     com.google.javascript.rhino.Node var42 = var40.getChildAtIndex(40);
// 
//   }

  public void test302() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test302"); }


    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var5 = var4.getType();
    java.lang.String var6 = var4.getQualifiedName();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var15 = var10.clonePropsFrom(var14);
    com.google.javascript.rhino.Node var16 = var4.clonePropsFrom(var14);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var25 = var20.clonePropsFrom(var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.setJSType(var26);
    var24.setOptionalArg(true);
    int var30 = var24.getLineno();
    boolean var31 = var24.isLocalResultCall();
    boolean var32 = var24.isQuotedString();
    com.google.javascript.jscomp.ClosureCodingConvention var34 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var36 = var34.isPrivate("");
    java.lang.String var37 = var34.getExportSymbolFunction();
    boolean var39 = var34.isSuperClassReference("");
    var24.putProp(0, (java.lang.Object)"");
    com.google.javascript.rhino.Node var41 = var24.cloneTree();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var42 = com.google.javascript.rhino.ScriptRuntime.getMessage2("com.google.javascript.rhino.EcmaError: : hi!", (java.lang.Object)var16, (java.lang.Object)var41);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "goog.exportSymbol"+ "'", var37.equals("goog.exportSymbol"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test303() {}
//   public void test303() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test303"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile.Generator var1 = null;
//     com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var1);
//     com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var2, true);
//     com.google.javascript.jscomp.SourceFile.Generator var6 = null;
//     com.google.javascript.jscomp.SourceFile var7 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var6);
//     com.google.javascript.jscomp.JsAst var8 = new com.google.javascript.jscomp.JsAst(var7);
//     var4.setSourceFile(var7);
//     com.google.javascript.jscomp.CompilerInput var12 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var4, "", true);
//     java.lang.String var14 = var4.getLine(1);
// 
//   }

  public void test304() {}
//   public void test304() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test304"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     var0.disableThreads();
//     com.google.javascript.rhino.Node var3 = var0.getRoot();
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var4);
//     var0.parse();
// 
//   }

  public void test305() {}
//   public void test305() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test305"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     com.google.javascript.jscomp.JSModule var4 = null;
//     var3.setModule(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var7 = var6.getTopScope();
//     var6.disableThreads();
//     var6.disableThreads();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     boolean var11 = var6.acceptConstKeyword();
//     com.google.javascript.jscomp.Region var14 = var6.getSourceRegion("()", 100);
// 
//   }

  public void test306() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test306"); }


    com.google.javascript.rhino.EcmaError var6 = com.google.javascript.rhino.ScriptRuntime.constructError("hi!: hi!", ": WARNING - hi!\n", "", 0, "hi!: hi!", 40);
    java.lang.String var7 = var6.sourceName();
    int var8 = var6.getLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ""+ "'", var7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test307() {}
//   public void test307() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test307"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     var0.disableThreads();
//     var0.disableThreads();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal var5 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var4);
//     com.google.javascript.jscomp.SourceFile.Generator var7 = null;
//     com.google.javascript.jscomp.JSSourceFile var8 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var7);
//     com.google.javascript.jscomp.CompilerInput var10 = new com.google.javascript.jscomp.CompilerInput(var8, true);
//     com.google.javascript.jscomp.MessageFormatter var11 = null;
//     java.util.logging.Logger var12 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var13 = new com.google.javascript.jscomp.LoggerErrorManager(var11, var12);
//     var10.setErrorManager((com.google.javascript.jscomp.ErrorManager)var13);
//     int var15 = var13.getWarningCount();
//     var0.setErrorManager((com.google.javascript.jscomp.ErrorManager)var13);
//     int var17 = var0.getErrorCount();
//     var0.normalize();
// 
//   }

  public void test308() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test308"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var4 = var3.getType();
    com.google.javascript.rhino.Node var5 = var3.cloneTree();
    var3.addSuppression("");
    int var8 = var3.getType();
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.NodeUtil.newExpr(var3);
    var9.setLineno((-1));
    com.google.javascript.rhino.EcmaError var19 = com.google.javascript.rhino.ScriptRuntime.constructError("", "hi!", "hi!", (-1), "hi!", 1);
    java.lang.String var20 = var19.details();
    int var21 = var19.lineNumber();
    var9.putProp(100, (java.lang.Object)var19);
    int var23 = var19.getLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + ": hi!"+ "'", var20.equals(": hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);

  }

  public void test309() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test309"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var1 = var0.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var3 = var0.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var4 = var0.getGraphvizNodes();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var6 = var5.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var7 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var8 = var7.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var10 = var7.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var11 = var5.getDirectedPredNodes(var10);
    java.util.List var12 = var0.getDirectedPredNodes(var10);
    java.lang.Object var13 = new java.lang.Object();
    java.lang.String var14 = com.google.javascript.rhino.ScriptRuntime.toString(var13);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var15 = var0.createDirectedGraphNode((java.lang.Object)var14);
    com.google.javascript.jscomp.SourceFile var19 = com.google.javascript.jscomp.SourceFile.fromCode("goog.global", "null(null)", "com.google.javascript.rhino.EcmaError: TypeError: hi! is not a function, it is com.google.javascript.jscomp.graph.LinkedDirectedGraph.");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var20 = var0.getNodeDegree((java.lang.Object)"com.google.javascript.rhino.EcmaError: TypeError: hi! is not a function, it is com.google.javascript.jscomp.graph.LinkedDirectedGraph.");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test310() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test310"); }


    com.google.javascript.rhino.EcmaError var6 = com.google.javascript.rhino.ScriptRuntime.constructError("", "hi!", "hi!", (-1), "hi!", 1);
    java.lang.String var7 = var6.getSourceName();
    int var8 = var6.getColumnNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);

  }

  public void test311() {}
//   public void test311() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test311"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     var0.disableThreads();
//     var0.disableThreads();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal var5 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var4);
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var11 = var10.getType();
//     java.lang.String var12 = var10.getQualifiedName();
//     com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(100, var10);
//     com.google.javascript.jscomp.CheckLevel var14 = null;
//     com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
//     java.lang.String[] var19 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var20 = var5.makeError(var10, var14, var17, var19);
//     com.google.javascript.rhino.Node var21 = var5.getCurrentNode();
//     int var22 = var5.getLineNumber();
//     com.google.javascript.jscomp.Scope var23 = var5.getScope();
//     com.google.javascript.jscomp.CompilerInput var24 = var5.getInput();
// 
//   }

  public void test312() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test312"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var1 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var2 = var1.newSubGraph();
    var1.pushNodeAnnotations();
    com.google.javascript.jscomp.graph.SubGraph var4 = var1.newSubGraph();
    java.lang.RuntimeException var5 = com.google.javascript.rhino.ScriptRuntime.undefCallError((java.lang.Object)"hi!. hi! at (unknown source) line (unknown line) : (unknown column)", (java.lang.Object)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test313() {}
//   public void test313() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test313"); }
// 
// 
//     com.google.javascript.rhino.Context var0 = com.google.javascript.rhino.Context.enter();
//     boolean var1 = var0.isGeneratingDebugChanged();
//     var0.setGeneratingSource(true);
//     int var4 = var0.getOptimizationLevel();
//     boolean var5 = var0.isGeneratingSource();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var6 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var7 = var6.newSubGraph();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var9 = var6.createDirectedGraphNode((java.lang.Object)100);
//     java.util.List var10 = var6.getGraphvizNodes();
//     java.lang.Object var11 = var0.getThreadLocal((java.lang.Object)var10);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var0.setLanguageVersion(40);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var1 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var11);
// 
//   }

  public void test314() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test314"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.JSError[] var3 = var2.getWarnings();
    int var4 = var2.getErrorCount();
    int var5 = var2.getWarningCount();
    double var6 = var2.getTypedPercent();
    com.google.javascript.jscomp.JSError[] var7 = var2.getWarnings();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test315() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test315"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.EcmaError var2 = com.google.javascript.rhino.ScriptRuntime.typeError1("", "()");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test316() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test316"); }


    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var5 = var4.getType();
    java.lang.String var6 = var4.getQualifiedName();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var15 = var10.clonePropsFrom(var14);
    com.google.javascript.rhino.Node var16 = var4.clonePropsFrom(var14);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var25 = var20.clonePropsFrom(var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var25.setJSType(var26);
    java.util.Collection var28 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var25);
    boolean var29 = var25.isSyntheticBlock();
    com.google.javascript.rhino.Node var32 = new com.google.javascript.rhino.Node(100, var14, var25, 1, (-1));
    java.lang.String var33 = var25.getString();
    boolean var34 = var25.isVarArgs();
    var25.setCharno(0);
    java.lang.Iterable var37 = var25.siblings();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var38 = var25.getDouble();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test317() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test317"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
    com.google.javascript.jscomp.SourceMap var2 = var0.getSourceMap();
    com.google.javascript.jscomp.JSSourceFile var5 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.SourceFile.Generator var7 = null;
    com.google.javascript.jscomp.JSSourceFile var8 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var7);
    com.google.javascript.jscomp.CompilerInput var10 = new com.google.javascript.jscomp.CompilerInput(var8, true);
    com.google.javascript.jscomp.CompilerOptions var11 = new com.google.javascript.jscomp.CompilerOptions();
    var11.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var14 = var11.getTweakProcessing();
    var11.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.Result var17 = var0.compile(var5, var8, var11);
    com.google.javascript.jscomp.ErrorManager var18 = var0.getErrorManager();
    com.google.javascript.jscomp.SourceMap var19 = var0.getSourceMap();
    com.google.javascript.jscomp.JSSourceFile var21 = com.google.javascript.jscomp.JSSourceFile.fromFile("");
    java.lang.String var22 = var21.getOriginalPath();
    com.google.javascript.jscomp.JSSourceFile[] var23 = new com.google.javascript.jscomp.JSSourceFile[] { var21};
    com.google.javascript.jscomp.Compiler var24 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var25 = var24.getTopScope();
    com.google.javascript.jscomp.SourceMap var26 = var24.getSourceMap();
    var24.reportCodeChange();
    com.google.javascript.jscomp.Compiler var28 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var29 = var28.getTopScope();
    com.google.javascript.jscomp.SourceMap var30 = var28.getSourceMap();
    com.google.javascript.jscomp.JSSourceFile var33 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.SourceFile.Generator var35 = null;
    com.google.javascript.jscomp.JSSourceFile var36 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var35);
    com.google.javascript.jscomp.CompilerInput var38 = new com.google.javascript.jscomp.CompilerInput(var36, true);
    com.google.javascript.jscomp.CompilerOptions var39 = new com.google.javascript.jscomp.CompilerOptions();
    var39.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var42 = var39.getTweakProcessing();
    var39.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.Result var45 = var28.compile(var33, var36, var39);
    com.google.javascript.rhino.Node var46 = var24.parse(var33);
    com.google.javascript.jscomp.JSSourceFile var49 = com.google.javascript.jscomp.JSSourceFile.fromCode("null(null)", "goog.global");
    com.google.javascript.jscomp.JSSourceFile[] var50 = new com.google.javascript.jscomp.JSSourceFile[] { var49};
    java.nio.charset.Charset var52 = null;
    com.google.javascript.jscomp.JSSourceFile var53 = com.google.javascript.jscomp.JSSourceFile.fromFile("goog.exportProperty", var52);
    com.google.javascript.jscomp.JSSourceFile[] var54 = new com.google.javascript.jscomp.JSSourceFile[] { var53};
    com.google.javascript.jscomp.CompilerOptions var55 = new com.google.javascript.jscomp.CompilerOptions();
    var55.setAcceptConstKeyword(true);
    java.util.Map var58 = var55.getTweakReplacements();
    var55.setDefineToNumberLiteral("eof", 1);
    com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var62 = null;
    var55.setAliasTransformationHandler(var62);
    var55.setGenerateExports(false);
    com.google.javascript.jscomp.Result var66 = var24.compile(var50, var54, var55);
    com.google.javascript.jscomp.CompilerOptions var67 = new com.google.javascript.jscomp.CompilerOptions();
    var67.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var70 = var67.getTweakProcessing();
    var67.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var73 = var67.getTweakProcessing();
    com.google.javascript.jscomp.DiagnosticGroup var74 = null;
    com.google.javascript.jscomp.CheckLevel var75 = null;
    var67.setWarningLevel(var74, var75);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.Result var77 = var0.compile(var23, var50, var67);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test318() {}
//   public void test318() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test318"); }
// 
// 
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.Node.newString(0, "", 40, (-1));
//     var5.setCharno(40);
//     com.google.javascript.rhino.Context var8 = null;
//     com.google.javascript.rhino.Context var9 = com.google.javascript.rhino.Context.enter(var8);
//     var9.setCompileFunctionsWithDynamicScope(false);
//     com.google.javascript.jscomp.MessageFormatter var12 = null;
//     java.util.logging.Logger var13 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var14 = new com.google.javascript.jscomp.LoggerErrorManager(var12, var13);
//     com.google.javascript.jscomp.CheckLevel var15 = null;
//     com.google.javascript.rhino.Node var17 = null;
//     com.google.javascript.jscomp.CheckLevel var19 = null;
//     com.google.javascript.jscomp.DiagnosticType var21 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var19, "hi!");
//     java.lang.String[] var23 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var24 = com.google.javascript.jscomp.JSError.make("", var17, var21, var23);
//     var14.report(var15, var24);
//     var9.removeThreadLocal((java.lang.Object)var24);
//     com.google.javascript.jscomp.DiagnosticType var27 = var24.getType();
//     java.lang.String[] var28 = null;
//     com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("0", var5, var27, var28);
//     var5.setLineno(0);
//     var5.putBooleanProp(1, false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
// 
//   }

  public void test319() {}
//   public void test319() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test319"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setAcceptConstKeyword(true);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var3 = var0.getTweakProcessing();
//     var0.setRewriteNewDateGoogNow(false);
//     com.google.javascript.jscomp.CompilerOptions var6 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var9 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.Collection var10 = var9.getNodes();
//     java.util.List var11 = var9.getEdges();
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     var15.setType(10);
//     com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var11, var15, 1, 100);
//     var6.setReplaceStringsConfiguration("hi!", var11);
//     var0.setManageClosureDependencies(var11);
//     var0.setNameAnonymousFunctionsOnly(true);
//     java.util.Set var25 = null;
//     var0.setIdGenerators(var25);
// 
//   }

  public void test320() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test320"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var3.putBooleanProp(0, false);
    boolean var7 = var3.isQualifiedName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.setDouble((-1.0d));
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test321() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test321"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var1 = var0.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var3 = var0.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var4 = var0.getGraphvizNodes();
    var0.clearNodeAnnotations();
    var0.pushNodeAnnotations();
    java.util.List var7 = var0.getGraphvizEdges();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.deps.SortedDependencies var8 = new com.google.javascript.jscomp.deps.SortedDependencies(var7);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test322() {}
//   public void test322() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test322"); }
// 
// 
//     com.google.javascript.rhino.Context var0 = com.google.javascript.rhino.Context.enter();
//     var0.setInstructionObserverThreshold(0);
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     var7.setType(10);
//     com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(10);
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var20 = var15.clonePropsFrom(var19);
//     var20.putProp((-1), (java.lang.Object)10.0d);
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var32 = var27.clonePropsFrom(var31);
//     com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var32);
//     boolean var34 = var32.hasOneChild();
//     com.google.javascript.rhino.Node var36 = null;
//     com.google.javascript.jscomp.CheckLevel var38 = null;
//     com.google.javascript.jscomp.DiagnosticType var40 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var38, "hi!");
//     java.lang.String[] var42 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var43 = com.google.javascript.jscomp.JSError.make("", var36, var40, var42);
//     com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var48 = var47.getType();
//     com.google.javascript.rhino.Node var49 = var47.cloneTree();
//     boolean var50 = var43.equals((java.lang.Object)var47);
//     com.google.javascript.rhino.Node var53 = new com.google.javascript.rhino.Node((-1), var7, var11, var32, var47, 0, 1);
//     java.util.Collection var54 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var47);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var0.unseal((java.lang.Object)var54);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var34 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var48 == 40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var50 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var54);
// 
//   }

  public void test323() {}
//   public void test323() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test323"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var1 = var0.newSubGraph();
//     var0.pushNodeAnnotations();
//     java.util.List var3 = var0.getGraphvizEdges();
//     boolean var4 = var0.isDirected();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var15 = var10.clonePropsFrom(var14);
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     var15.setJSType(var16);
//     java.util.Collection var18 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var15);
//     com.google.javascript.rhino.Node[] var19 = new com.google.javascript.rhino.Node[] { var15};
//     com.google.javascript.rhino.Node var20 = new com.google.javascript.rhino.Node(10, var19);
//     com.google.javascript.rhino.JSDocInfo var21 = var20.getJSDocInfo();
//     com.google.javascript.jscomp.CheckLevel var22 = null;
//     com.google.javascript.jscomp.DiagnosticType var25 = com.google.javascript.jscomp.DiagnosticType.disabled("", "eof");
//     com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var31 = var30.getType();
//     java.lang.String var32 = var30.getQualifiedName();
//     com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var41 = var36.clonePropsFrom(var40);
//     com.google.javascript.rhino.Node var42 = var30.clonePropsFrom(var40);
//     com.google.javascript.rhino.Node var47 = null;
//     com.google.javascript.jscomp.CheckLevel var49 = null;
//     com.google.javascript.jscomp.DiagnosticType var51 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var49, "hi!");
//     java.lang.String[] var53 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var54 = com.google.javascript.jscomp.JSError.make("", var47, var51, var53);
//     java.lang.String[] var55 = null;
//     com.google.javascript.jscomp.JSError var56 = com.google.javascript.jscomp.JSError.make(": hi!", 100, 0, var51, var55);
//     com.google.javascript.jscomp.Compiler var57 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var58 = var57.getTopScope();
//     var57.disableThreads();
//     var57.disableThreads();
//     com.google.javascript.jscomp.NodeTraversal.Callback var61 = null;
//     com.google.javascript.jscomp.NodeTraversal var62 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var57, var61);
//     com.google.javascript.rhino.Node var63 = var62.getEnclosingFunction();
//     com.google.javascript.jscomp.Compiler var64 = var62.getCompiler();
//     com.google.javascript.rhino.Node var65 = null;
//     com.google.javascript.rhino.Context var66 = null;
//     com.google.javascript.rhino.Context var67 = com.google.javascript.rhino.Context.enter(var66);
//     var67.setCompileFunctionsWithDynamicScope(false);
//     com.google.javascript.jscomp.MessageFormatter var70 = null;
//     java.util.logging.Logger var71 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var72 = new com.google.javascript.jscomp.LoggerErrorManager(var70, var71);
//     com.google.javascript.jscomp.CheckLevel var73 = null;
//     com.google.javascript.rhino.Node var75 = null;
//     com.google.javascript.jscomp.CheckLevel var77 = null;
//     com.google.javascript.jscomp.DiagnosticType var79 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var77, "hi!");
//     java.lang.String[] var81 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var82 = com.google.javascript.jscomp.JSError.make("", var75, var79, var81);
//     var72.report(var73, var82);
//     var67.removeThreadLocal((java.lang.Object)var82);
//     com.google.javascript.jscomp.DiagnosticType var85 = var82.getType();
//     com.google.javascript.jscomp.DiagnosticType var91 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
//     java.lang.String[] var93 = new java.lang.String[] { "hi!: hi!"};
//     com.google.javascript.jscomp.JSError var94 = com.google.javascript.jscomp.JSError.make("hi!. hi! at (unknown source) line (unknown line) : (unknown column)", 40, 0, var91, var93);
//     com.google.javascript.jscomp.JSError var95 = var62.makeError(var65, var85, var93);
//     com.google.javascript.jscomp.JSError var96 = com.google.javascript.jscomp.JSError.make("goog.global", var30, var51, var93);
//     com.google.javascript.jscomp.JSError var97 = com.google.javascript.jscomp.JSError.make("ERROR\n    STRING \n", var20, var22, var25, var93);
//     com.google.javascript.jscomp.graph.GraphNode var98 = var0.getNode((java.lang.Object)var93);
//     java.lang.Iterable var99 = var0.getDirectedGraphNodes();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var31 == 40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var53);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var54);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var63);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var64);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var67);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var79);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var81);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var82);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var85);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var91);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var93);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var94);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var95);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var96);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var97);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var98);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var99);
// 
//   }

  public void test324() {}
//   public void test324() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test324"); }
// 
// 
//     java.io.InputStream var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromInputStream("hi!. hi! at hi!. hi! at (unknown source) line (unknown line) : (unknown column) line 40 : 0", var1);
// 
//   }

  public void test325() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test325"); }


    com.google.javascript.jscomp.SourceFile.Generator var1 = null;
    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var1);
    com.google.javascript.jscomp.JsAst var3 = new com.google.javascript.jscomp.JsAst(var2);
    com.google.javascript.jscomp.SourceFile.Generator var5 = null;
    com.google.javascript.jscomp.SourceFile var6 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var5);
    var3.setSourceFile(var6);
    java.lang.String var8 = com.google.javascript.rhino.ScriptRuntime.toString((java.lang.Object)var3);
    com.google.javascript.jscomp.SourceFile var9 = var3.getSourceFile();
    var3.clearAst();
    java.nio.charset.Charset var12 = null;
    com.google.javascript.jscomp.SourceFile var13 = com.google.javascript.jscomp.SourceFile.fromFile("goog.exportProperty", var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.setSourceFile(var13);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test326() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test326"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var3 = var0.getTweakProcessing();
    var0.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var6 = var0.getTweakProcessing();
    com.google.javascript.jscomp.DiagnosticGroup var7 = null;
    com.google.javascript.jscomp.CheckLevel var8 = null;
    var0.setWarningLevel(var7, var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var12 = var11.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var13 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var14 = var13.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var16 = var13.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var17 = var11.getDirectedPredNodes(var16);
    var0.setReplaceStringsConfiguration("com.google.javascript.rhino.EcmaError: : hi!", var17);
    var0.setTweakToDoubleLiteral(": ERROR - hi!\n", 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test327() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test327"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var8 = var3.clonePropsFrom(var7);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var7.setJSType(var9);
    var7.setOptionalArg(true);
    com.google.javascript.rhino.JSDocInfo var13 = null;
    var7.setJSDocInfo(var13);
    java.lang.Iterable var15 = var7.siblings();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test328() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test328"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.EcmaError var4 = com.google.javascript.rhino.ScriptRuntime.typeError3("string", ": WARNING - hi!\n", "", "@IMPLEMENTATION.VERSION@");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test329() {}
//   public void test329() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test329"); }
// 
// 
//     com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot var0 = null;
//     com.google.javascript.jscomp.parsing.Config.LanguageMode var3 = null;
//     com.google.javascript.jscomp.parsing.Config var5 = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(false, var3, false);
//     com.google.javascript.jscomp.mozilla.rhino.ErrorReporter var6 = null;
//     com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.IRFactory.transformTree(var0, "com.google.javascript.rhino.EcmaError: : hi!: goog.global", var5, var6);
// 
//   }

  public void test330() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test330"); }


    com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var2);
    com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var5 = var3.getPathRelativeToClosureBase();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test331() {}
//   public void test331() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test331"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.Collection var1 = var0.getNodes();
//     com.google.javascript.jscomp.graph.SubGraph var2 = var0.newSubGraph();
//     java.lang.Object var3 = null;
//     java.util.Iterator var4 = var0.getNeighborNodesIterator(var3);
// 
//   }

  public void test332() {}
//   public void test332() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test332"); }
// 
// 
//     com.google.javascript.rhino.Context var0 = com.google.javascript.rhino.Context.enter();
//     boolean var1 = var0.isGeneratingDebugChanged();
//     var0.setGeneratingSource(true);
//     int var4 = var0.getOptimizationLevel();
//     boolean var5 = var0.isGeneratingSource();
//     com.google.javascript.jscomp.MessageFormatter var7 = null;
//     java.util.logging.Logger var8 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var9 = new com.google.javascript.jscomp.LoggerErrorManager(var7, var8);
//     int var10 = var9.getWarningCount();
//     var0.putThreadLocal((java.lang.Object)(-1.0f), (java.lang.Object)var9);
//     com.google.javascript.jscomp.Compiler var12 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var9);
//     int var13 = var9.getWarningCount();
//     var9.setTypedPercent(10.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var1 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == 0);
// 
//   }

  public void test333() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test333"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
    var0.disableThreads();
    var0.disableThreads();
    com.google.javascript.jscomp.MessageFormatter var4 = null;
    java.util.logging.Logger var5 = null;
    com.google.javascript.jscomp.LoggerErrorManager var6 = new com.google.javascript.jscomp.LoggerErrorManager(var4, var5);
    com.google.javascript.jscomp.CheckLevel var7 = null;
    com.google.javascript.rhino.Node var9 = null;
    com.google.javascript.jscomp.CheckLevel var11 = null;
    com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var11, "hi!");
    java.lang.String[] var15 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", var9, var13, var15);
    var6.report(var7, var16);
    var0.setErrorManager((com.google.javascript.jscomp.ErrorManager)var6);
    com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var19 = null;
    com.google.javascript.jscomp.LightweightMessageFormatter var20 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var19);
    com.google.javascript.jscomp.NodeTraversal.Callback var21 = null;
    com.google.javascript.jscomp.NodeTraversal var22 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var21);
    com.google.javascript.jscomp.ErrorManager var23 = var0.getErrorManager();
    com.google.javascript.jscomp.JSSourceFile var26 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    var26.clearCachedSource();
    com.google.javascript.jscomp.JSSourceFile[] var28 = new com.google.javascript.jscomp.JSSourceFile[] { var26};
    com.google.javascript.jscomp.Compiler var29 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var30 = var29.getTopScope();
    com.google.javascript.jscomp.SourceMap var31 = var29.getSourceMap();
    var29.reportCodeChange();
    com.google.javascript.jscomp.Compiler var33 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var34 = var33.getTopScope();
    com.google.javascript.jscomp.SourceMap var35 = var33.getSourceMap();
    com.google.javascript.jscomp.JSSourceFile var38 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.SourceFile.Generator var40 = null;
    com.google.javascript.jscomp.JSSourceFile var41 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var40);
    com.google.javascript.jscomp.CompilerInput var43 = new com.google.javascript.jscomp.CompilerInput(var41, true);
    com.google.javascript.jscomp.CompilerOptions var44 = new com.google.javascript.jscomp.CompilerOptions();
    var44.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var47 = var44.getTweakProcessing();
    var44.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.Result var50 = var33.compile(var38, var41, var44);
    com.google.javascript.rhino.Node var51 = var29.parse(var38);
    com.google.javascript.jscomp.JSSourceFile var54 = com.google.javascript.jscomp.JSSourceFile.fromCode("null(null)", "goog.global");
    com.google.javascript.jscomp.JSSourceFile[] var55 = new com.google.javascript.jscomp.JSSourceFile[] { var54};
    java.nio.charset.Charset var57 = null;
    com.google.javascript.jscomp.JSSourceFile var58 = com.google.javascript.jscomp.JSSourceFile.fromFile("goog.exportProperty", var57);
    com.google.javascript.jscomp.JSSourceFile[] var59 = new com.google.javascript.jscomp.JSSourceFile[] { var58};
    com.google.javascript.jscomp.CompilerOptions var60 = new com.google.javascript.jscomp.CompilerOptions();
    var60.setAcceptConstKeyword(true);
    java.util.Map var63 = var60.getTweakReplacements();
    var60.setDefineToNumberLiteral("eof", 1);
    com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var67 = null;
    var60.setAliasTransformationHandler(var67);
    var60.setGenerateExports(false);
    com.google.javascript.jscomp.Result var71 = var29.compile(var55, var59, var60);
    com.google.javascript.jscomp.CompilerOptions var72 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var75 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var76 = var75.getNodes();
    java.util.List var77 = var75.getEdges();
    com.google.javascript.rhino.Node var81 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var81.setType(10);
    com.google.javascript.rhino.Node var86 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var77, var81, 1, 100);
    var72.setReplaceStringsConfiguration("hi!", var77);
    java.util.Map var88 = var72.getDefineReplacements();
    var0.init(var28, var59, var72);
    java.util.Map var90 = var72.getDefineReplacements();
    var72.setManageClosureDependencies(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test334() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test334"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var1 = var0.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var3 = var0.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var4 = var0.getGraphvizNodes();
    var0.clearNodeAnnotations();
    var0.pushNodeAnnotations();
    java.util.List var7 = var0.getGraphvizEdges();
    var0.pushEdgeAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var9 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    com.google.javascript.jscomp.ClosureCodingConvention var10 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var11 = null;
    boolean var12 = var10.isVarArgsParameter(var11);
    java.lang.String var13 = var10.getExportSymbolFunction();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var15 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var16 = var15.getNodes();
    java.util.List var17 = var15.getEdges();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var21.setType(10);
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var17, var21, 1, 100);
    java.lang.String var27 = var10.getSingletonGetterClassName(var26);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var28 = var9.createDirectedGraphNode((java.lang.Object)var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var29 = var0.getNodeDegree((java.lang.Object)var10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "goog.exportSymbol"+ "'", var13.equals("goog.exportSymbol"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test335() {}
//   public void test335() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test335"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setAcceptConstKeyword(true);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     com.google.javascript.jscomp.SourceMap var5 = var3.getSourceMap();
//     com.google.javascript.jscomp.JSSourceFile var8 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
//     com.google.javascript.jscomp.SourceFile.Generator var10 = null;
//     com.google.javascript.jscomp.JSSourceFile var11 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var10);
//     com.google.javascript.jscomp.CompilerInput var13 = new com.google.javascript.jscomp.CompilerInput(var11, true);
//     com.google.javascript.jscomp.CompilerOptions var14 = new com.google.javascript.jscomp.CompilerOptions();
//     var14.setAcceptConstKeyword(true);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var17 = var14.getTweakProcessing();
//     var14.setRewriteNewDateGoogNow(false);
//     com.google.javascript.jscomp.Result var20 = var3.compile(var8, var11, var14);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var22 = var21.newSubGraph();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var23 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var24 = var23.newSubGraph();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var26 = var23.createDirectedGraphNode((java.lang.Object)100);
//     java.util.List var27 = var21.getDirectedPredNodes(var26);
//     com.google.javascript.jscomp.JSModuleGraph var28 = new com.google.javascript.jscomp.JSModuleGraph(var27);
//     com.google.javascript.jscomp.NodeTraversal.Callback var29 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var3, var27, var29);
//     var0.setManageClosureDependencies(var27);
//     com.google.javascript.rhino.Node var34 = null;
//     com.google.javascript.jscomp.CheckLevel var36 = null;
//     com.google.javascript.jscomp.DiagnosticType var38 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var36, "hi!");
//     java.lang.String[] var40 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var41 = com.google.javascript.jscomp.JSError.make("", var34, var38, var40);
//     java.lang.RuntimeException var43 = com.google.javascript.rhino.ScriptRuntime.undefWriteError((java.lang.Object)(short)0, (java.lang.Object)var38, (java.lang.Object)40);
//     com.google.javascript.jscomp.DiagnosticType[] var44 = new com.google.javascript.jscomp.DiagnosticType[] { var38};
//     com.google.javascript.jscomp.DiagnosticGroup var45 = new com.google.javascript.jscomp.DiagnosticGroup(var44);
//     com.google.javascript.jscomp.CheckLevel var46 = null;
//     var0.setWarningLevel(var45, var46);
//     com.google.javascript.jscomp.CheckLevel var48 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var49 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var45, var48);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var51 = var50.newSubGraph();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var52 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var53 = var52.newSubGraph();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var55 = var52.createDirectedGraphNode((java.lang.Object)100);
//     java.util.List var56 = var50.getDirectedPredNodes(var55);
//     com.google.javascript.jscomp.JSModuleGraph var57 = new com.google.javascript.jscomp.JSModuleGraph(var56);
//     com.google.javascript.jscomp.ComposeWarningsGuard var58 = new com.google.javascript.jscomp.ComposeWarningsGuard(var56);
//     com.google.javascript.rhino.Context var59 = null;
//     com.google.javascript.rhino.Context var60 = com.google.javascript.rhino.Context.enter(var59);
//     var60.setCompileFunctionsWithDynamicScope(false);
//     com.google.javascript.jscomp.MessageFormatter var63 = null;
//     java.util.logging.Logger var64 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var65 = new com.google.javascript.jscomp.LoggerErrorManager(var63, var64);
//     com.google.javascript.jscomp.CheckLevel var66 = null;
//     com.google.javascript.rhino.Node var68 = null;
//     com.google.javascript.jscomp.CheckLevel var70 = null;
//     com.google.javascript.jscomp.DiagnosticType var72 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var70, "hi!");
//     java.lang.String[] var74 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var75 = com.google.javascript.jscomp.JSError.make("", var68, var72, var74);
//     var65.report(var66, var75);
//     var60.removeThreadLocal((java.lang.Object)var75);
//     com.google.javascript.jscomp.DiagnosticType var78 = var75.getType();
//     com.google.javascript.jscomp.CheckLevel var79 = var58.level(var75);
//     com.google.javascript.rhino.Node var82 = null;
//     com.google.javascript.jscomp.CheckLevel var84 = null;
//     com.google.javascript.jscomp.DiagnosticType var86 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var84, "hi!");
//     java.lang.String[] var88 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var89 = com.google.javascript.jscomp.JSError.make("", var82, var86, var88);
//     java.lang.RuntimeException var91 = com.google.javascript.rhino.ScriptRuntime.undefWriteError((java.lang.Object)(short)0, (java.lang.Object)var86, (java.lang.Object)40);
//     com.google.javascript.jscomp.DiagnosticType[] var92 = new com.google.javascript.jscomp.DiagnosticType[] { var86};
//     com.google.javascript.jscomp.DiagnosticGroup var93 = new com.google.javascript.jscomp.DiagnosticGroup(var92);
//     com.google.javascript.jscomp.DiagnosticGroup var94 = new com.google.javascript.jscomp.DiagnosticGroup(var92);
//     boolean var95 = var58.disables(var94);
//     com.google.javascript.jscomp.DiagnosticType var96 = null;
//     boolean var97 = var94.matches(var96);
//     boolean var98 = var49.disables(var94);
// 
//   }

  public void test336() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test336"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("()", 100, 10);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var12 = var7.clonePropsFrom(var11);
    var12.putProp((-1), (java.lang.Object)10.0d);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var24 = var19.clonePropsFrom(var23);
    com.google.javascript.rhino.Node var25 = var12.copyInformationFrom(var24);
    boolean var26 = var3.hasChild(var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var27 = var3.detachFromParent();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test337() {}
//   public void test337() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test337"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     com.google.javascript.jscomp.JSModule var4 = null;
//     var3.setModule(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var7 = var6.getTopScope();
//     var6.disableThreads();
//     var6.disableThreads();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     java.nio.charset.Charset var12 = null;
//     com.google.javascript.jscomp.JSSourceFile var13 = com.google.javascript.jscomp.JSSourceFile.fromFile("goog.exportProperty", var12);
//     com.google.javascript.jscomp.JsAst var14 = new com.google.javascript.jscomp.JsAst((com.google.javascript.jscomp.SourceFile)var13);
//     java.lang.String var15 = var13.getOriginalPath();
//     var3.setSourceFile((com.google.javascript.jscomp.SourceFile)var13);
// 
//   }

  public void test338() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test338"); }


    com.google.javascript.jscomp.DiagnosticType var5 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
    com.google.javascript.jscomp.DiagnosticType var11 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
    java.lang.String[] var13 = new java.lang.String[] { "hi!: hi!"};
    com.google.javascript.jscomp.JSError var14 = com.google.javascript.jscomp.JSError.make("hi!. hi! at (unknown source) line (unknown line) : (unknown column)", 40, 0, var11, var13);
    com.google.javascript.jscomp.JSError var15 = com.google.javascript.jscomp.JSError.make("()", (-1), 10, var5, var13);
    com.google.javascript.jscomp.DiagnosticType var21 = com.google.javascript.jscomp.DiagnosticType.disabled("STRING ", "");
    com.google.javascript.jscomp.CheckLevel var25 = null;
    com.google.javascript.jscomp.CheckLevel var27 = null;
    com.google.javascript.jscomp.DiagnosticType var29 = com.google.javascript.jscomp.DiagnosticType.make(": hi!", var27, "()");
    com.google.javascript.jscomp.CheckLevel var33 = null;
    com.google.javascript.rhino.Node var35 = null;
    com.google.javascript.jscomp.CheckLevel var37 = null;
    com.google.javascript.jscomp.DiagnosticType var39 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var37, "hi!");
    java.lang.String[] var41 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var42 = com.google.javascript.jscomp.JSError.make("", var35, var39, var41);
    java.lang.String[] var44 = new java.lang.String[] { "goog.exportProperty"};
    com.google.javascript.jscomp.JSError var45 = com.google.javascript.jscomp.JSError.make("eof", 1, 40, var33, var39, var44);
    com.google.javascript.jscomp.JSError var46 = com.google.javascript.jscomp.JSError.make("eol", 0, 0, var25, var29, var44);
    com.google.javascript.jscomp.JSError var47 = com.google.javascript.jscomp.JSError.make("goog.exportSymbol", 0, 0, var21, var44);
    com.google.javascript.jscomp.JSError var48 = com.google.javascript.jscomp.JSError.make(var5, var44);
    java.lang.String var49 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "hi!: hi!"+ "'", var49.equals("hi!: hi!"));

  }

  public void test339() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test339"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var8 = var3.clonePropsFrom(var7);
    var8.putProp((-1), (java.lang.Object)10.0d);
    com.google.javascript.jscomp.ClosureCodingConvention var12 = new com.google.javascript.jscomp.ClosureCodingConvention();
    java.lang.String var13 = var12.getGlobalObject();
    java.lang.String var14 = var12.getExportPropertyFunction();
    java.lang.String var15 = var12.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.Node.newString(": hi!", 100, 10);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var24.setType(10);
    com.google.javascript.rhino.Node var28 = new com.google.javascript.rhino.Node(10);
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var37 = var32.clonePropsFrom(var36);
    var37.putProp((-1), (java.lang.Object)10.0d);
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var49 = var44.clonePropsFrom(var48);
    com.google.javascript.rhino.Node var50 = var37.copyInformationFrom(var49);
    boolean var51 = var49.hasOneChild();
    com.google.javascript.rhino.Node var53 = null;
    com.google.javascript.jscomp.CheckLevel var55 = null;
    com.google.javascript.jscomp.DiagnosticType var57 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var55, "hi!");
    java.lang.String[] var59 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var60 = com.google.javascript.jscomp.JSError.make("", var53, var57, var59);
    com.google.javascript.rhino.Node var64 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var65 = var64.getType();
    com.google.javascript.rhino.Node var66 = var64.cloneTree();
    boolean var67 = var60.equals((java.lang.Object)var64);
    com.google.javascript.rhino.Node var70 = new com.google.javascript.rhino.Node((-1), var24, var28, var49, var64, 0, 1);
    java.lang.String var71 = var12.extractClassNameIfProvide(var19, var64);
    var19.setSourcePositionForTree(40);
    java.lang.String var74 = var8.checkTreeEquals(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "goog.global"+ "'", var13.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "goog.exportProperty"+ "'", var14.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  [catch_scope_prop: 10.0]\n\n\nTree2:\nSTRING : hi! 0\n\n\nSubtree1: STRING  [catch_scope_prop: 10.0]\n\n\nSubtree2: STRING : hi! 0\n"+ "'", var74.equals("Node tree inequality:\nTree1:\nSTRING  [catch_scope_prop: 10.0]\n\n\nTree2:\nSTRING : hi! 0\n\n\nSubtree1: STRING  [catch_scope_prop: 10.0]\n\n\nSubtree2: STRING : hi! 0\n"));

  }

  public void test340() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test340"); }


    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var9 = var4.clonePropsFrom(var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    var9.setJSType(var10);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var20 = var15.clonePropsFrom(var19);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    var20.setJSType(var21);
    java.util.Collection var23 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var20);
    com.google.javascript.rhino.Node.AncestorIterable var24 = var20.getAncestors();
    boolean var25 = var20.isOnlyModifiesThisCall();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var34 = var29.clonePropsFrom(var33);
    com.google.javascript.rhino.jstype.JSType var35 = null;
    var33.setJSType(var35);
    var33.setOptionalArg(true);
    int var39 = var33.getLineno();
    boolean var40 = var33.isLocalResultCall();
    boolean var41 = var33.isQuotedString();
    com.google.javascript.rhino.Node var42 = new com.google.javascript.rhino.Node(0, var9, var20, var33);
    java.lang.String var46 = var9.toString(true, true, true);
    com.google.javascript.jscomp.Compiler var47 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var48 = var47.getTopScope();
    var47.disableThreads();
    var47.disableThreads();
    com.google.javascript.jscomp.NodeTraversal.Callback var51 = null;
    com.google.javascript.jscomp.NodeTraversal var52 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var47, var51);
    com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var58 = var57.getType();
    java.lang.String var59 = var57.getQualifiedName();
    com.google.javascript.rhino.Node var60 = new com.google.javascript.rhino.Node(100, var57);
    com.google.javascript.jscomp.CheckLevel var61 = null;
    com.google.javascript.jscomp.DiagnosticType var64 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
    java.lang.String[] var66 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var67 = var52.makeError(var57, var61, var64, var66);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var9.addChildToBack(var57);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "STRING "+ "'", var46.equals("STRING "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test341() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test341"); }


    com.google.javascript.jscomp.DefaultCodingConvention var0 = new com.google.javascript.jscomp.DefaultCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var2 = var0.getClassesDefinedByCall(var1);
    boolean var4 = var0.isValidEnumKey("goog.exportProperty");
    boolean var6 = var0.isExported(": hi!");
    boolean var8 = var0.isPrivate("ERROR\n    STRING \n");
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var17 = var12.clonePropsFrom(var16);
    com.google.javascript.rhino.jstype.JSType var18 = null;
    var17.setJSType(var18);
    java.util.Collection var20 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var17);
    boolean var21 = var17.isSyntheticBlock();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var26 = var25.getType();
    int var27 = var25.getSourcePosition();
    com.google.javascript.rhino.Node var28 = var25.getLastSibling();
    boolean var29 = var25.isSyntheticBlock();
    java.lang.String var30 = var17.checkTreeEquals(var25);
    boolean var31 = var25.isOnlyModifiesThisCall();
    boolean var32 = var25.hasMoreThanOneChild();
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var33 = var0.getClassesDefinedByCall(var25);
    var25.setOptionalArg(false);
    boolean var36 = var25.wasEmptyNode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test342() {}
//   public void test342() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test342"); }
// 
// 
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       com.google.javascript.rhino.EvaluatorException var5 = com.google.javascript.rhino.Context.reportRuntimeError("", "com.google.javascript.rhino.EcmaError: TypeError: Cannot set property \"hi!: hi!\" of 0 to \"40\"", (-1), "ERROR\n    STRING \n: com.google.javascript.rhino.EcmaError: : hi!", (-1));
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
// 
//   }

  public void test343() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test343"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
    var0.disableThreads();
    java.nio.charset.Charset var4 = null;
    com.google.javascript.jscomp.JSSourceFile var5 = com.google.javascript.jscomp.JSSourceFile.fromFile("hi!. hi! at (unknown source) line (unknown line) : (unknown column)", var4);
    com.google.javascript.rhino.Node var6 = var0.parse(var5);
    com.google.javascript.rhino.Node var7 = null;
    com.google.javascript.jscomp.NodeTraversal.Callback var8 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.NodeTraversal.traverse((com.google.javascript.jscomp.AbstractCompiler)var0, var7, var8);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test344() {}
//   public void test344() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test344"); }
// 
// 
//     java.io.InputStream var2 = null;
//     com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromInputStream("", "Node tree inequality:\nTree1:\nSTRING  [catch_scope_prop: 10.0]\n\n\nTree2:\nSTRING : hi! 0\n\n\nSubtree1: STRING  [catch_scope_prop: 10.0]\n\n\nSubtree2: STRING : hi! 0\n", var2);
// 
//   }

  public void test345() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test345"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var1 = var0.newSubGraph();
    com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var3 = var2.getTopScope();
    var2.disableThreads();
    var2.disableThreads();
    com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
    com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var2, var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var8 = var0.getDirectedSuccNodes((java.lang.Object)var7);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test346() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test346"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var3 = var0.getTweakProcessing();
    var0.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.CompilerOptions var6 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var9 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var10 = var9.getNodes();
    java.util.List var11 = var9.getEdges();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var15.setType(10);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var11, var15, 1, 100);
    var6.setReplaceStringsConfiguration("hi!", var11);
    var0.setManageClosureDependencies(var11);
    java.lang.RuntimeException var23 = com.google.javascript.rhino.ScriptRuntime.notFunctionError((java.lang.Object)var0);
    var0.setTweakToNumberLiteral(": hi!", 10);
    var0.setOutputCharset("0");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test347() {}
//   public void test347() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test347"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     var0.disableThreads();
//     var0.disableThreads();
//     com.google.javascript.jscomp.CompilerOptions var4 = new com.google.javascript.jscomp.CompilerOptions();
//     var4.setAcceptConstKeyword(true);
//     java.util.Map var7 = var4.getTweakReplacements();
//     var4.setDefineToNumberLiteral("eof", 1);
//     com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var11 = null;
//     var4.setAliasTransformationHandler(var11);
//     var0.initOptions(var4);
//     boolean var14 = var0.hasErrors();
//     com.google.javascript.jscomp.CompilerInput var16 = var0.getInput("");
// 
//   }

  public void test348() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test348"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.EcmaError var4 = com.google.javascript.rhino.ScriptRuntime.typeError3("ERROR - hi!\n", "hi!. hi! at (unknown source) line (unknown line) : (unknown column)", "goog.exportSymbol", "LinkedGraph");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test349() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test349"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var8 = var3.clonePropsFrom(var7);
    com.google.javascript.rhino.Node var10 = var7.getAncestor(0);
    boolean var11 = var7.isQualifiedName();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var15.setType(10);
    boolean var18 = var15.isLocalResultCall();
    boolean var19 = var15.isUnscopedQualifiedName();
    var15.setWasEmptyNode(false);
    com.google.javascript.rhino.Node var22 = var7.copyInformationFrom(var15);
    var7.setString("goog.global");
    java.util.Set var25 = var7.getDirectives();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test350() {}
//   public void test350() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test350"); }
// 
// 
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newNumber(1.0d, 40, 100);
//     com.google.javascript.jscomp.ClosureCodingConvention var4 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var6 = var4.isPrivate("");
//     com.google.javascript.rhino.jstype.FunctionType var7 = null;
//     com.google.javascript.rhino.jstype.FunctionType var8 = null;
//     com.google.javascript.jscomp.CodingConvention.SubclassType var9 = null;
//     var4.applySubclassRelationship(var7, var8, var9);
//     java.lang.String var11 = var4.getExportSymbolFunction();
//     com.google.javascript.rhino.jstype.ObjectType var12 = null;
//     com.google.javascript.rhino.jstype.ObjectType var13 = null;
//     com.google.javascript.rhino.jstype.ObjectType var14 = null;
//     com.google.javascript.rhino.jstype.FunctionType var15 = null;
//     com.google.javascript.rhino.jstype.FunctionType var16 = null;
//     var4.applyDelegateRelationship(var12, var13, var14, var15, var16);
//     com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var22 = var21.getType();
//     com.google.javascript.rhino.Node var23 = var21.cloneTree();
//     var21.addSuppression("");
//     int var26 = var21.getType();
//     com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.NodeUtil.newExpr(var21);
//     var27.setLineno((-1));
//     com.google.javascript.rhino.EcmaError var37 = com.google.javascript.rhino.ScriptRuntime.constructError("", "hi!", "hi!", (-1), "hi!", 1);
//     java.lang.String var38 = var37.details();
//     int var39 = var37.lineNumber();
//     var27.putProp(100, (java.lang.Object)var37);
//     com.google.javascript.jscomp.CodingConvention.DelegateRelationship var41 = var4.getDelegateRelationship(var27);
//     var3.removeChild(var27);
// 
//   }

  public void test351() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test351"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var4 = var3.getNodes();
    java.util.List var5 = var3.getEdges();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var9.setType(10);
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var5, var9, 1, 100);
    var0.setReplaceStringsConfiguration("hi!", var5);
    java.util.Map var16 = var0.getDefineReplacements();
    var0.setDefineToDoubleLiteral("goog.abstractMethod", 0.0d);
    com.google.javascript.jscomp.CodingConvention var20 = null;
    var0.setCodingConvention(var20);
    var0.setShadowVariables(false);
    var0.setCollapsePropertiesOnExternTypes(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test352() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test352"); }


    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var5.setType(10);
    com.google.javascript.rhino.Node var9 = new com.google.javascript.rhino.Node(10);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var18 = var13.clonePropsFrom(var17);
    var18.putProp((-1), (java.lang.Object)10.0d);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var30 = var25.clonePropsFrom(var29);
    com.google.javascript.rhino.Node var31 = var18.copyInformationFrom(var30);
    boolean var32 = var30.hasOneChild();
    com.google.javascript.rhino.Node var34 = null;
    com.google.javascript.jscomp.CheckLevel var36 = null;
    com.google.javascript.jscomp.DiagnosticType var38 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var36, "hi!");
    java.lang.String[] var40 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var41 = com.google.javascript.jscomp.JSError.make("", var34, var38, var40);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var46 = var45.getType();
    com.google.javascript.rhino.Node var47 = var45.cloneTree();
    boolean var48 = var41.equals((java.lang.Object)var45);
    com.google.javascript.rhino.Node var51 = new com.google.javascript.rhino.Node((-1), var5, var9, var30, var45, 0, 1);
    com.google.javascript.rhino.Node var53 = null;
    com.google.javascript.jscomp.CheckLevel var55 = null;
    com.google.javascript.jscomp.DiagnosticType var57 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var55, "hi!");
    java.lang.String[] var59 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var60 = com.google.javascript.jscomp.JSError.make("", var53, var57, var59);
    com.google.javascript.rhino.Node var64 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var65 = var64.getType();
    java.lang.String var66 = var64.getQualifiedName();
    com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var74 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var75 = var70.clonePropsFrom(var74);
    com.google.javascript.rhino.Node var76 = var64.clonePropsFrom(var74);
    boolean var77 = var60.equals((java.lang.Object)var76);
    com.google.javascript.rhino.Node var81 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var82 = var81.getType();
    com.google.javascript.rhino.Node var83 = var81.cloneTree();
    var81.addSuppression("");
    int var86 = var81.getType();
    com.google.javascript.rhino.Node var87 = com.google.javascript.jscomp.NodeUtil.newExpr(var81);
    var87.setLineno((-1));
    var87.setWasEmptyNode(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var94 = new com.google.javascript.rhino.Node(0, var5, var76, var87, 0, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test353() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test353"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var1 = var0.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var3 = var0.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var4 = var0.getGraphvizNodes();
    boolean var5 = var0.isDirected();
    java.lang.String var6 = var0.getName();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var7 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var12 = var11.getType();
    com.google.javascript.rhino.Node var13 = var11.cloneTree();
    com.google.javascript.rhino.Node.AncestorIterable var14 = var13.getAncestors();
    java.lang.Iterable var15 = var13.children();
    com.google.javascript.jscomp.SourceFile var18 = com.google.javascript.jscomp.SourceFile.fromCode("goog.exportProperty", "goog.exportProperty");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var19 = var0.isConnected((java.lang.Object)var7, (java.lang.Object)var13, (java.lang.Object)"goog.exportProperty");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "LinkedGraph"+ "'", var6.equals("LinkedGraph"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test354() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test354"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setAcceptConstKeyword(true);
    var0.lineLengthThreshold(10);
    boolean var5 = var0.shouldColorizeErrorOutput();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test355() {}
//   public void test355() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test355"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile.Generator var1 = null;
//     com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var1);
//     com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var2, true);
//     com.google.javascript.jscomp.MessageFormatter var5 = null;
//     java.util.logging.Logger var6 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var7 = new com.google.javascript.jscomp.LoggerErrorManager(var5, var6);
//     var4.setErrorManager((com.google.javascript.jscomp.ErrorManager)var7);
//     com.google.javascript.jscomp.Compiler var9 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var7);
//     com.google.javascript.jscomp.Compiler var10 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var7);
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var20 = var15.clonePropsFrom(var19);
//     var20.putProp((-1), (java.lang.Object)10.0d);
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var32 = var27.clonePropsFrom(var31);
//     com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var32);
//     com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var42 = var37.clonePropsFrom(var41);
//     com.google.javascript.rhino.Node var44 = var41.getAncestor(0);
//     java.lang.String var45 = var33.checkTreeEquals(var41);
//     com.google.javascript.jscomp.DiagnosticType var48 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
//     com.google.javascript.jscomp.Compiler var49 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var50 = var49.getTopScope();
//     var49.disableThreads();
//     var49.disableThreads();
//     com.google.javascript.jscomp.NodeTraversal.Callback var53 = null;
//     com.google.javascript.jscomp.NodeTraversal var54 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var49, var53);
//     com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var60 = var59.getType();
//     java.lang.String var61 = var59.getQualifiedName();
//     com.google.javascript.rhino.Node var62 = new com.google.javascript.rhino.Node(100, var59);
//     com.google.javascript.jscomp.CheckLevel var63 = null;
//     com.google.javascript.jscomp.DiagnosticType var66 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
//     java.lang.String[] var68 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var69 = var54.makeError(var59, var63, var66, var68);
//     com.google.javascript.jscomp.JSError var70 = com.google.javascript.jscomp.JSError.make("", var41, var48, var68);
//     var10.report(var70);
//     com.google.javascript.jscomp.Compiler.IntermediateState var72 = var10.getState();
//     com.google.javascript.jscomp.CompilerInput var74 = var10.getInput("hi!");
// 
//   }

  public void test356() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test356"); }


    com.google.javascript.rhino.Context var0 = null;
    com.google.javascript.rhino.Context var1 = com.google.javascript.rhino.Context.enter(var0);
    boolean var2 = var1.isGeneratingDebug();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var12 = var7.clonePropsFrom(var11);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var12.setJSType(var13);
    boolean var15 = var12.hasSideEffects();
    java.lang.Iterable var16 = var12.children();
    var1.putThreadLocal((java.lang.Object)10.0d, (java.lang.Object)var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setLanguageVersion(1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test357() {}
//   public void test357() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test357"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     var0.disableThreads();
//     var0.disableThreads();
//     com.google.javascript.jscomp.MessageFormatter var4 = null;
//     java.util.logging.Logger var5 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var6 = new com.google.javascript.jscomp.LoggerErrorManager(var4, var5);
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     com.google.javascript.rhino.Node var9 = null;
//     com.google.javascript.jscomp.CheckLevel var11 = null;
//     com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var11, "hi!");
//     java.lang.String[] var15 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", var9, var13, var15);
//     var6.report(var7, var16);
//     var0.setErrorManager((com.google.javascript.jscomp.ErrorManager)var6);
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var19 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var20 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var19);
//     com.google.javascript.jscomp.NodeTraversal.Callback var21 = null;
//     com.google.javascript.jscomp.NodeTraversal var22 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var21);
//     java.lang.String var23 = var22.getSourceName();
//     com.google.javascript.jscomp.CompilerInput var24 = var22.getInput();
// 
//   }

  public void test358() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test358"); }


    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var5 = var4.getType();
    int var6 = var4.getChildCount();
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node((-1), var4);
    java.lang.String var11 = var4.toString(false, false, true);
    int var12 = var4.getType();
    boolean var13 = var4.hasMoreThanOneChild();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "STRING "+ "'", var11.equals("STRING "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test359() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test359"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var1 = var0.getNodes();
    java.lang.String var2 = var0.getName();
    com.google.javascript.rhino.EcmaError var9 = com.google.javascript.rhino.ScriptRuntime.constructError("", "hi!", "hi!", (-1), "hi!", 1);
    java.lang.String var10 = var9.toString();
    var9.initLineNumber(100);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var13 = var0.getDirectedGraphNode((java.lang.Object)100);
    com.google.javascript.jscomp.Compiler var14 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var15 = var14.getTopScope();
    com.google.javascript.jscomp.SourceMap var16 = var14.getSourceMap();
    com.google.javascript.jscomp.JSSourceFile var19 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.SourceFile.Generator var21 = null;
    com.google.javascript.jscomp.JSSourceFile var22 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var21);
    com.google.javascript.jscomp.CompilerInput var24 = new com.google.javascript.jscomp.CompilerInput(var22, true);
    com.google.javascript.jscomp.CompilerOptions var25 = new com.google.javascript.jscomp.CompilerOptions();
    var25.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var28 = var25.getTweakProcessing();
    var25.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.Result var31 = var14.compile(var19, var22, var25);
    com.google.javascript.jscomp.DiagnosticGroup var32 = null;
    com.google.javascript.jscomp.CheckLevel var33 = null;
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var34 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var32, var33);
    java.lang.String var35 = var34.toString();
    var25.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var34);
    var25.enableRuntimeTypeCheck("");
    var25.setDefineToBooleanLiteral("null(null)", false);
    com.google.javascript.jscomp.Compiler var42 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var43 = var42.getTopScope();
    var42.disableThreads();
    var42.disableThreads();
    com.google.javascript.jscomp.MessageFormatter var46 = null;
    java.util.logging.Logger var47 = null;
    com.google.javascript.jscomp.LoggerErrorManager var48 = new com.google.javascript.jscomp.LoggerErrorManager(var46, var47);
    com.google.javascript.jscomp.CheckLevel var49 = null;
    com.google.javascript.rhino.Node var51 = null;
    com.google.javascript.jscomp.CheckLevel var53 = null;
    com.google.javascript.jscomp.DiagnosticType var55 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var53, "hi!");
    java.lang.String[] var57 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var58 = com.google.javascript.jscomp.JSError.make("", var51, var55, var57);
    var48.report(var49, var58);
    var42.setErrorManager((com.google.javascript.jscomp.ErrorManager)var48);
    com.google.javascript.jscomp.JSError[] var61 = var48.getErrors();
    int var62 = var48.getErrorCount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.disconnectInDirection((java.lang.Object)"null(null)", (java.lang.Object)var62);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "LinkedGraph"+ "'", var2.equals("LinkedGraph"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "com.google.javascript.rhino.EcmaError: : hi!"+ "'", var10.equals("com.google.javascript.rhino.EcmaError: : hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "null(null)"+ "'", var35.equals("null(null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);

  }

  public void test360() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test360"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    var2.clearNodeAnnotations();
    com.google.javascript.jscomp.Compiler var4 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var5 = var4.getTopScope();
    com.google.javascript.jscomp.SourceMap var6 = var4.getSourceMap();
    com.google.javascript.jscomp.JSSourceFile var9 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.SourceFile.Generator var11 = null;
    com.google.javascript.jscomp.JSSourceFile var12 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var11);
    com.google.javascript.jscomp.CompilerInput var14 = new com.google.javascript.jscomp.CompilerInput(var12, true);
    com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
    var15.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var18 = var15.getTweakProcessing();
    var15.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.Result var21 = var4.compile(var9, var12, var15);
    var15.setRemoveAbstractMethods(false);
    var15.setTweakToBooleanLiteral("goog.exportProperty", false);
    com.google.javascript.jscomp.graph.GraphNode var27 = var2.createNode((java.lang.Object)"goog.exportProperty");
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var29 = var28.newSubGraph();
    var28.pushNodeAnnotations();
    com.google.javascript.jscomp.graph.SubGraph var31 = var28.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var32 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var33 = var32.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var35 = var32.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var36 = var32.getGraphvizNodes();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var37 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var38 = var37.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var39 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var40 = var39.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var42 = var39.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var43 = var37.getDirectedPredNodes(var42);
    java.util.List var44 = var32.getDirectedPredNodes(var42);
    java.util.List var45 = var28.getDirectedPredNodes(var42);
    com.google.javascript.jscomp.Compiler var46 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var47 = var46.getTopScope();
    var46.disableThreads();
    var46.disableThreads();
    com.google.javascript.jscomp.NodeTraversal.Callback var50 = null;
    com.google.javascript.jscomp.NodeTraversal var51 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var46, var50);
    com.google.javascript.jscomp.SourceFile.Generator var53 = null;
    com.google.javascript.jscomp.JSSourceFile var54 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var53);
    com.google.javascript.jscomp.CompilerInput var56 = new com.google.javascript.jscomp.CompilerInput(var54, true);
    com.google.javascript.jscomp.MessageFormatter var57 = null;
    java.util.logging.Logger var58 = null;
    com.google.javascript.jscomp.LoggerErrorManager var59 = new com.google.javascript.jscomp.LoggerErrorManager(var57, var58);
    var56.setErrorManager((com.google.javascript.jscomp.ErrorManager)var59);
    int var61 = var59.getWarningCount();
    var46.setErrorManager((com.google.javascript.jscomp.ErrorManager)var59);
    var59.setTypedPercent(100.0d);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var65 = var28.createDirectedGraphNode((java.lang.Object)100.0d);
    java.util.List var66 = var2.getDirectedSuccNodes(var65);
    var0.setReplaceStringsConfiguration("hi!. hi! at (unknown source) line (unknown line) : (unknown column)", var66);
    var0.disableRuntimeTypeCheck();
    var0.setManageClosureDependencies(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test361() {}
//   public void test361() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test361"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     var0.disableThreads();
//     var0.disableThreads();
//     java.io.PrintStream var4 = null;
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler(var4);
//     com.google.javascript.jscomp.Compiler.IntermediateState var6 = var5.getState();
//     var0.setState(var6);
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var8 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var9 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var8);
//     com.google.javascript.jscomp.CheckLevel var13 = null;
//     com.google.javascript.jscomp.Compiler var14 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var15 = var14.getTopScope();
//     var14.disableThreads();
//     var14.disableThreads();
//     com.google.javascript.jscomp.NodeTraversal.Callback var18 = null;
//     com.google.javascript.jscomp.NodeTraversal var19 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var14, var18);
//     com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var25 = var24.getType();
//     java.lang.String var26 = var24.getQualifiedName();
//     com.google.javascript.rhino.Node var27 = new com.google.javascript.rhino.Node(100, var24);
//     com.google.javascript.jscomp.CheckLevel var28 = null;
//     com.google.javascript.jscomp.DiagnosticType var31 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
//     java.lang.String[] var33 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var34 = var19.makeError(var24, var28, var31, var33);
//     com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var44 = var39.clonePropsFrom(var43);
//     var44.putProp((-1), (java.lang.Object)10.0d);
//     com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var56 = var51.clonePropsFrom(var55);
//     com.google.javascript.rhino.Node var57 = var44.copyInformationFrom(var56);
//     com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var66 = var61.clonePropsFrom(var65);
//     com.google.javascript.rhino.Node var68 = var65.getAncestor(0);
//     java.lang.String var69 = var57.checkTreeEquals(var65);
//     com.google.javascript.jscomp.DiagnosticType var72 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
//     com.google.javascript.jscomp.Compiler var73 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var74 = var73.getTopScope();
//     var73.disableThreads();
//     var73.disableThreads();
//     com.google.javascript.jscomp.NodeTraversal.Callback var77 = null;
//     com.google.javascript.jscomp.NodeTraversal var78 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var73, var77);
//     com.google.javascript.rhino.Node var83 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var84 = var83.getType();
//     java.lang.String var85 = var83.getQualifiedName();
//     com.google.javascript.rhino.Node var86 = new com.google.javascript.rhino.Node(100, var83);
//     com.google.javascript.jscomp.CheckLevel var87 = null;
//     com.google.javascript.jscomp.DiagnosticType var90 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
//     java.lang.String[] var92 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var93 = var78.makeError(var83, var87, var90, var92);
//     com.google.javascript.jscomp.JSError var94 = com.google.javascript.jscomp.JSError.make("", var65, var72, var92);
//     com.google.javascript.jscomp.JSError var95 = com.google.javascript.jscomp.JSError.make("com.google.javascript.rhino.EcmaError: TypeError: Cannot set property \"hi!: hi!\" of 0 to \"40\"", (-1), 0, var13, var31, var92);
//     var0.report(var95);
// 
//   }

  public void test362() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test362"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var1 = var0.newSubGraph();
    var0.pushNodeAnnotations();
    com.google.javascript.jscomp.graph.SubGraph var3 = var0.newSubGraph();
    java.lang.Iterable var4 = var0.getDirectedGraphNodes();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var6 = var5.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var8 = var5.createDirectedGraphNode((java.lang.Object)100);
    var5.clearNodeAnnotations();
    com.google.javascript.rhino.Context var10 = com.google.javascript.rhino.Context.enter();
    var10.setInstructionObserverThreshold(0);
    int var13 = var10.getLanguageVersion();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var14 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var15 = var14.getNodes();
    var14.clearEdgeAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var18 = var17.newSubGraph();
    var17.pushNodeAnnotations();
    com.google.javascript.jscomp.graph.SubGraph var20 = var17.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var22 = var21.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var24 = var21.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var25 = var21.getGraphvizNodes();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var26 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var27 = var26.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var29 = var28.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var31 = var28.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var32 = var26.getDirectedPredNodes(var31);
    java.util.List var33 = var21.getDirectedPredNodes(var31);
    java.util.List var34 = var17.getDirectedPredNodes(var31);
    java.util.List var35 = var14.getNeighborNodes(var31);
    var10.seal((java.lang.Object)var31);
    java.util.List var37 = var5.getDirectedSuccNodes(var31);
    java.util.List var38 = var0.getDirectedPredNodes(var31);
    com.google.javascript.jscomp.DiagnosticType var41 = com.google.javascript.jscomp.DiagnosticType.disabled("", ": hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var43 = var0.isConnectedInDirection((java.lang.Object)"", (java.lang.Object)1L);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test363() {}
//   public void test363() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test363"); }
// 
// 
//     java.io.InputStream var1 = null;
//     com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromInputStream("", var1);
// 
//   }

  public void test364() {}
//   public void test364() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test364"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     var0.disableThreads();
//     com.google.javascript.rhino.Node var3 = var0.getRoot();
//     com.google.javascript.jscomp.SourceMap var4 = var0.getSourceMap();
//     com.google.javascript.jscomp.CompilerInput var6 = var0.getInput("");
// 
//   }

  public void test365() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test365"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var2 = com.google.javascript.rhino.ScriptRuntime.escapeString("", ' ');
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }

  }

  public void test366() {}
//   public void test366() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test366"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.Collection var1 = var0.getNodes();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var3 = var2.newSubGraph();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var5 = var4.newSubGraph();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var4.createDirectedGraphNode((java.lang.Object)100);
//     java.util.List var8 = var2.getDirectedPredNodes(var7);
//     com.google.javascript.jscomp.JSModuleGraph var9 = new com.google.javascript.jscomp.JSModuleGraph(var8);
//     var9.coalesceDuplicateFiles();
//     boolean var11 = var0.hasNode((java.lang.Object)var9);
//     var9.coalesceDuplicateFiles();
//     com.google.javascript.jscomp.JSModule var13 = null;
//     com.google.javascript.jscomp.JSModule var14 = null;
//     boolean var15 = var9.dependsOn(var13, var14);
// 
//   }

  public void test367() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test367"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isPrivate("");
    com.google.javascript.rhino.jstype.FunctionType var3 = null;
    com.google.javascript.rhino.jstype.FunctionType var4 = null;
    com.google.javascript.jscomp.CodingConvention.SubclassType var5 = null;
    var0.applySubclassRelationship(var3, var4, var5);
    java.lang.String var7 = var0.getExportSymbolFunction();
    com.google.javascript.jscomp.Compiler var8 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var9 = var8.getTopScope();
    var8.disableThreads();
    var8.disableThreads();
    com.google.javascript.jscomp.NodeTraversal.Callback var12 = null;
    com.google.javascript.jscomp.NodeTraversal var13 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var8, var12);
    com.google.javascript.rhino.Node var14 = var13.getEnclosingFunction();
    com.google.javascript.jscomp.Compiler var15 = var13.getCompiler();
    java.io.PrintStream var16 = null;
    com.google.javascript.jscomp.Compiler var17 = new com.google.javascript.jscomp.Compiler(var16);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var19 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var20 = var19.getNodes();
    java.util.List var21 = var19.getEdges();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var25.setType(10);
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var21, var25, 1, 100);
    com.google.javascript.jscomp.NodeTraversal.Callback var31 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var17, var21, var31);
    com.google.javascript.jscomp.JSModuleGraph var33 = new com.google.javascript.jscomp.JSModuleGraph(var21);
    var13.traverseRoots(var21);
    java.lang.String var35 = var13.getSourceName();
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.Node.newString("goog.exportSymbol");
    com.google.javascript.rhino.Node var39 = var38.getFirstChild();
    var38.setType(0);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var46 = var45.getType();
    com.google.javascript.rhino.Node var47 = var45.cloneTree();
    var45.addSuppression("");
    int var50 = var45.getType();
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.NodeUtil.newExpr(var45);
    int var52 = var51.getChildCount();
    com.google.javascript.rhino.Node var56 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var57 = var56.getType();
    java.lang.String var58 = var56.getQualifiedName();
    com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var67 = var62.clonePropsFrom(var66);
    com.google.javascript.rhino.Node var68 = var56.clonePropsFrom(var66);
    boolean var69 = var51.isEquivalentTo(var66);
    com.google.javascript.rhino.Node var70 = new com.google.javascript.rhino.Node(0, var38, var66);
    var66.setOptionalArg(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast var73 = var0.getObjectLiteralCast(var13, var66);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "goog.exportSymbol"+ "'", var7.equals("goog.exportSymbol"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test368() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test368"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Context.reportWarning("STRING \n", "eof", 100, "eof", (-1));
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test369() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test369"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isPrivate("");
    java.lang.String var3 = var0.getExportSymbolFunction();
    boolean var5 = var0.isSuperClassReference("");
    java.util.Collection var6 = var0.getAssertionFunctions();
    java.lang.String var7 = var0.getDelegateSuperclassName();
    com.google.javascript.jscomp.Compiler var8 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var9 = var8.getTopScope();
    var8.disableThreads();
    var8.disableThreads();
    com.google.javascript.jscomp.MessageFormatter var12 = null;
    java.util.logging.Logger var13 = null;
    com.google.javascript.jscomp.LoggerErrorManager var14 = new com.google.javascript.jscomp.LoggerErrorManager(var12, var13);
    com.google.javascript.jscomp.CheckLevel var15 = null;
    com.google.javascript.rhino.Node var17 = null;
    com.google.javascript.jscomp.CheckLevel var19 = null;
    com.google.javascript.jscomp.DiagnosticType var21 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var19, "hi!");
    java.lang.String[] var23 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var24 = com.google.javascript.jscomp.JSError.make("", var17, var21, var23);
    var14.report(var15, var24);
    var8.setErrorManager((com.google.javascript.jscomp.ErrorManager)var14);
    com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var27 = null;
    com.google.javascript.jscomp.LightweightMessageFormatter var28 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var8, var27);
    com.google.javascript.jscomp.NodeTraversal.Callback var29 = null;
    com.google.javascript.jscomp.NodeTraversal var30 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var8, var29);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var36 = var35.getType();
    java.lang.String var37 = var35.getQualifiedName();
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var46 = var41.clonePropsFrom(var45);
    com.google.javascript.rhino.Node var47 = var35.clonePropsFrom(var45);
    com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var56 = var51.clonePropsFrom(var55);
    com.google.javascript.rhino.jstype.JSType var57 = null;
    var56.setJSType(var57);
    java.util.Collection var59 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var56);
    boolean var60 = var56.isSyntheticBlock();
    com.google.javascript.rhino.Node var63 = new com.google.javascript.rhino.Node(100, var45, var56, 1, (-1));
    var45.setOptionalArg(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast var66 = var0.getObjectLiteralCast(var30, var45);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "goog.exportSymbol"+ "'", var3.equals("goog.exportSymbol"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test370() {}
//   public void test370() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test370"); }
// 
// 
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       java.lang.String var2 = com.google.javascript.rhino.ScriptRuntime.numberToString((-1.0d), 40);
//       fail("Expected exception of type com.google.javascript.rhino.EvaluatorException");
//     } catch (com.google.javascript.rhino.EvaluatorException e) {
//       // Expected exception.
//     }
// 
//   }

  public void test371() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test371"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var1 = com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.valueOf("goog.exportProperty");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test372() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test372"); }


    com.google.javascript.jscomp.SourceFile.Generator var1 = null;
    com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var1);
    com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var2, true);
    com.google.javascript.jscomp.SourceFile.Generator var6 = null;
    com.google.javascript.jscomp.SourceFile var7 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var6);
    com.google.javascript.jscomp.JsAst var8 = new com.google.javascript.jscomp.JsAst(var7);
    var4.setSourceFile(var7);
    com.google.javascript.jscomp.JSModule var10 = null;
    var4.setModule(var10);
    java.io.PrintStream var12 = null;
    com.google.javascript.jscomp.Compiler var13 = new com.google.javascript.jscomp.Compiler(var12);
    var4.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var13);
    boolean var15 = var4.isExtern();
    com.google.javascript.jscomp.JSModule var16 = var4.getModule();
    var4.clearAst();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test373() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test373"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var4 = var3.getType();
    int var5 = var3.getSourcePosition();
    com.google.javascript.rhino.Node var6 = var3.getLastSibling();
    var3.setIsSyntheticBlock(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test374() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test374"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    var2.clearNodeAnnotations();
    com.google.javascript.jscomp.Compiler var4 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var5 = var4.getTopScope();
    com.google.javascript.jscomp.SourceMap var6 = var4.getSourceMap();
    com.google.javascript.jscomp.JSSourceFile var9 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.SourceFile.Generator var11 = null;
    com.google.javascript.jscomp.JSSourceFile var12 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var11);
    com.google.javascript.jscomp.CompilerInput var14 = new com.google.javascript.jscomp.CompilerInput(var12, true);
    com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
    var15.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var18 = var15.getTweakProcessing();
    var15.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.Result var21 = var4.compile(var9, var12, var15);
    var15.setRemoveAbstractMethods(false);
    var15.setTweakToBooleanLiteral("goog.exportProperty", false);
    com.google.javascript.jscomp.graph.GraphNode var27 = var2.createNode((java.lang.Object)"goog.exportProperty");
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var29 = var28.newSubGraph();
    var28.pushNodeAnnotations();
    com.google.javascript.jscomp.graph.SubGraph var31 = var28.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var32 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var33 = var32.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var35 = var32.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var36 = var32.getGraphvizNodes();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var37 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var38 = var37.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var39 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var40 = var39.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var42 = var39.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var43 = var37.getDirectedPredNodes(var42);
    java.util.List var44 = var32.getDirectedPredNodes(var42);
    java.util.List var45 = var28.getDirectedPredNodes(var42);
    com.google.javascript.jscomp.Compiler var46 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var47 = var46.getTopScope();
    var46.disableThreads();
    var46.disableThreads();
    com.google.javascript.jscomp.NodeTraversal.Callback var50 = null;
    com.google.javascript.jscomp.NodeTraversal var51 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var46, var50);
    com.google.javascript.jscomp.SourceFile.Generator var53 = null;
    com.google.javascript.jscomp.JSSourceFile var54 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var53);
    com.google.javascript.jscomp.CompilerInput var56 = new com.google.javascript.jscomp.CompilerInput(var54, true);
    com.google.javascript.jscomp.MessageFormatter var57 = null;
    java.util.logging.Logger var58 = null;
    com.google.javascript.jscomp.LoggerErrorManager var59 = new com.google.javascript.jscomp.LoggerErrorManager(var57, var58);
    var56.setErrorManager((com.google.javascript.jscomp.ErrorManager)var59);
    int var61 = var59.getWarningCount();
    var46.setErrorManager((com.google.javascript.jscomp.ErrorManager)var59);
    var59.setTypedPercent(100.0d);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var65 = var28.createDirectedGraphNode((java.lang.Object)100.0d);
    java.util.List var66 = var2.getDirectedSuccNodes(var65);
    var0.setReplaceStringsConfiguration("hi!. hi! at (unknown source) line (unknown line) : (unknown column)", var66);
    var0.disableRuntimeTypeCheck();
    java.util.Map var69 = var0.getTweakReplacements();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test375() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test375"); }


    com.google.javascript.rhino.EcmaError var6 = com.google.javascript.rhino.ScriptRuntime.constructError("hi!: hi!", ": WARNING - hi!\n", "", 0, "hi!: hi!", 40);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.initColumnNumber((-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test376() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test376"); }


    com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var2);
    com.google.javascript.jscomp.CompilerInput var5 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var3, false);
    java.lang.String var7 = var5.getLine(100);
    com.google.javascript.jscomp.SourceFile var10 = com.google.javascript.jscomp.SourceFile.fromCode("goog.global", "hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.setSourceFile(var10);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test377() {}
//   public void test377() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test377"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     var0.clearEdgeAnnotations();
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var3 = var2.getTopScope();
//     com.google.javascript.jscomp.SourceMap var4 = var2.getSourceMap();
//     com.google.javascript.jscomp.JSSourceFile var7 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
//     com.google.javascript.jscomp.SourceFile.Generator var9 = null;
//     com.google.javascript.jscomp.JSSourceFile var10 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var9);
//     com.google.javascript.jscomp.CompilerInput var12 = new com.google.javascript.jscomp.CompilerInput(var10, true);
//     com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
//     var13.setAcceptConstKeyword(true);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var16 = var13.getTweakProcessing();
//     var13.setRewriteNewDateGoogNow(false);
//     com.google.javascript.jscomp.Result var19 = var2.compile(var7, var10, var13);
//     com.google.javascript.jscomp.LightweightMessageFormatter var20 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var2);
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var21 = var0.createDirectedGraphNode((java.lang.Object)var20);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var22 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var23 = var22.newSubGraph();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var24 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var25 = var24.newSubGraph();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var27 = var24.createDirectedGraphNode((java.lang.Object)100);
//     java.util.List var28 = var22.getDirectedPredNodes(var27);
//     com.google.javascript.jscomp.JSModuleGraph var29 = new com.google.javascript.jscomp.JSModuleGraph(var28);
//     com.google.javascript.jscomp.ComposeWarningsGuard var30 = new com.google.javascript.jscomp.ComposeWarningsGuard(var28);
//     com.google.javascript.rhino.Context var31 = null;
//     com.google.javascript.rhino.Context var32 = com.google.javascript.rhino.Context.enter(var31);
//     var32.setCompileFunctionsWithDynamicScope(false);
//     com.google.javascript.jscomp.MessageFormatter var35 = null;
//     java.util.logging.Logger var36 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var37 = new com.google.javascript.jscomp.LoggerErrorManager(var35, var36);
//     com.google.javascript.jscomp.CheckLevel var38 = null;
//     com.google.javascript.rhino.Node var40 = null;
//     com.google.javascript.jscomp.CheckLevel var42 = null;
//     com.google.javascript.jscomp.DiagnosticType var44 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var42, "hi!");
//     java.lang.String[] var46 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var47 = com.google.javascript.jscomp.JSError.make("", var40, var44, var46);
//     var37.report(var38, var47);
//     var32.removeThreadLocal((java.lang.Object)var47);
//     com.google.javascript.jscomp.DiagnosticType var50 = var47.getType();
//     com.google.javascript.jscomp.CheckLevel var51 = var30.level(var47);
//     java.lang.String var52 = var20.formatWarning(var47);
//     com.google.javascript.jscomp.CheckLevel var53 = null;
//     com.google.javascript.jscomp.Compiler var54 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var55 = var54.getTopScope();
//     var54.disableThreads();
//     var54.disableThreads();
//     com.google.javascript.jscomp.MessageFormatter var58 = null;
//     java.util.logging.Logger var59 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var60 = new com.google.javascript.jscomp.LoggerErrorManager(var58, var59);
//     com.google.javascript.jscomp.CheckLevel var61 = null;
//     com.google.javascript.rhino.Node var63 = null;
//     com.google.javascript.jscomp.CheckLevel var65 = null;
//     com.google.javascript.jscomp.DiagnosticType var67 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var65, "hi!");
//     java.lang.String[] var69 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var70 = com.google.javascript.jscomp.JSError.make("", var63, var67, var69);
//     var60.report(var61, var70);
//     var54.setErrorManager((com.google.javascript.jscomp.ErrorManager)var60);
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var73 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var74 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var54, var73);
//     java.lang.String var75 = var47.format(var53, (com.google.javascript.jscomp.MessageFormatter)var74);
// 
//   }

  public void test378() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test378"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var3 = var0.getTweakProcessing();
    com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var4 = null;
    var0.setAliasTransformationHandler(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test379() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test379"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
    var0.disableThreads();
    var0.disableThreads();
    com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
    com.google.javascript.jscomp.NodeTraversal var5 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var4);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var11 = var10.getType();
    java.lang.String var12 = var10.getQualifiedName();
    com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(100, var10);
    com.google.javascript.jscomp.CheckLevel var14 = null;
    com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
    java.lang.String[] var19 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var20 = var5.makeError(var10, var14, var17, var19);
    com.google.javascript.rhino.Node var21 = var5.getCurrentNode();
    int var22 = var5.getLineNumber();
    com.google.javascript.jscomp.Scope var23 = var5.getScope();
    com.google.javascript.jscomp.Scope var24 = var5.getScope();
    com.google.javascript.rhino.Node var25 = var5.getEnclosingFunction();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var36 = var31.clonePropsFrom(var35);
    var36.putProp((-1), (java.lang.Object)10.0d);
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var48 = var43.clonePropsFrom(var47);
    com.google.javascript.rhino.Node var49 = var36.copyInformationFrom(var48);
    com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var58 = var53.clonePropsFrom(var57);
    com.google.javascript.rhino.Node var60 = var57.getAncestor(0);
    java.lang.String var61 = var49.checkTreeEquals(var57);
    com.google.javascript.jscomp.DiagnosticType var64 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
    com.google.javascript.jscomp.Compiler var65 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var66 = var65.getTopScope();
    var65.disableThreads();
    var65.disableThreads();
    com.google.javascript.jscomp.NodeTraversal.Callback var69 = null;
    com.google.javascript.jscomp.NodeTraversal var70 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var65, var69);
    com.google.javascript.rhino.Node var75 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var76 = var75.getType();
    java.lang.String var77 = var75.getQualifiedName();
    com.google.javascript.rhino.Node var78 = new com.google.javascript.rhino.Node(100, var75);
    com.google.javascript.jscomp.CheckLevel var79 = null;
    com.google.javascript.jscomp.DiagnosticType var82 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
    java.lang.String[] var84 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var85 = var70.makeError(var75, var79, var82, var84);
    com.google.javascript.jscomp.JSError var86 = com.google.javascript.jscomp.JSError.make("", var57, var64, var84);
    com.google.javascript.rhino.Node[] var87 = new com.google.javascript.rhino.Node[] { var57};
    com.google.javascript.rhino.Node var88 = new com.google.javascript.rhino.Node(0, var87);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.traverseRoots(var87);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test380() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test380"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var8 = var3.clonePropsFrom(var7);
    var8.putProp((-1), (java.lang.Object)10.0d);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var20 = var15.clonePropsFrom(var19);
    com.google.javascript.rhino.Node var21 = var8.copyInformationFrom(var20);
    int var22 = var8.getLineno();
    int var23 = var8.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 40);

  }

  public void test381() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test381"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    var0.clearNodeAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    var2.clearEdgeAnnotations();
    com.google.javascript.jscomp.Compiler var4 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var5 = var4.getTopScope();
    com.google.javascript.jscomp.SourceMap var6 = var4.getSourceMap();
    com.google.javascript.jscomp.JSSourceFile var9 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.SourceFile.Generator var11 = null;
    com.google.javascript.jscomp.JSSourceFile var12 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var11);
    com.google.javascript.jscomp.CompilerInput var14 = new com.google.javascript.jscomp.CompilerInput(var12, true);
    com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
    var15.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var18 = var15.getTweakProcessing();
    var15.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.Result var21 = var4.compile(var9, var12, var15);
    com.google.javascript.jscomp.LightweightMessageFormatter var22 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var4);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var23 = var2.createDirectedGraphNode((java.lang.Object)var22);
    java.util.List var24 = var0.getNeighborNodes(var23);
    var0.clearEdgeAnnotations();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var30 = var29.getType();
    int var31 = var29.getSourcePosition();
    com.google.javascript.rhino.Node var32 = var29.getLastSibling();
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.NodeUtil.newExpr(var29);
    boolean var34 = var29.isNoSideEffectsCall();
    java.lang.Object var35 = null;
    com.google.javascript.jscomp.ClosureCodingConvention var36 = new com.google.javascript.jscomp.ClosureCodingConvention();
    java.lang.String var37 = var36.getGlobalObject();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var38 = var0.isConnectedInDirection((java.lang.Object)var34, var35, (java.lang.Object)var37);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "goog.global"+ "'", var37.equals("goog.global"));

  }

  public void test382() {}
//   public void test382() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test382"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithEdgeAnnotations();
//     com.google.javascript.jscomp.SourceFile.Generator var2 = null;
//     com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var2);
//     com.google.javascript.jscomp.JsAst var4 = new com.google.javascript.jscomp.JsAst(var3);
//     java.lang.RuntimeException var5 = com.google.javascript.rhino.ScriptRuntime.notFunctionError((java.lang.Object)var0, (java.lang.Object)var3);
//     java.lang.Object var6 = null;
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var7 = var0.getDirectedGraphNode(var6);
//     com.google.javascript.jscomp.ClosureCodingConvention var8 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     java.lang.String var9 = var8.getGlobalObject();
//     java.lang.String var10 = var8.getExportPropertyFunction();
//     com.google.javascript.rhino.jstype.JSTypeRegistry var11 = null;
//     com.google.javascript.jscomp.Scope var12 = null;
//     com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var16 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.Collection var17 = var16.getNodes();
//     java.util.List var18 = var16.getEdges();
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     var22.setType(10);
//     com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var18, var22, 1, 100);
//     var13.setReplaceStringsConfiguration("hi!", var18);
//     var8.defineDelegateProxyPrototypeProperties(var11, var12, var18);
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var30 = var0.createDirectedGraphNode((java.lang.Object)var18);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var31 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var32 = var31.newSubGraph();
//     com.google.javascript.jscomp.Compiler var33 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var34 = var33.getTopScope();
//     var33.disableThreads();
//     var33.disableThreads();
//     com.google.javascript.jscomp.NodeTraversal.Callback var37 = null;
//     com.google.javascript.jscomp.NodeTraversal var38 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var33, var37);
//     com.google.javascript.rhino.Node var39 = var38.getEnclosingFunction();
//     com.google.javascript.jscomp.Compiler var40 = var38.getCompiler();
//     com.google.javascript.rhino.Node var41 = null;
//     com.google.javascript.rhino.Context var42 = null;
//     com.google.javascript.rhino.Context var43 = com.google.javascript.rhino.Context.enter(var42);
//     var43.setCompileFunctionsWithDynamicScope(false);
//     com.google.javascript.jscomp.MessageFormatter var46 = null;
//     java.util.logging.Logger var47 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var48 = new com.google.javascript.jscomp.LoggerErrorManager(var46, var47);
//     com.google.javascript.jscomp.CheckLevel var49 = null;
//     com.google.javascript.rhino.Node var51 = null;
//     com.google.javascript.jscomp.CheckLevel var53 = null;
//     com.google.javascript.jscomp.DiagnosticType var55 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var53, "hi!");
//     java.lang.String[] var57 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var58 = com.google.javascript.jscomp.JSError.make("", var51, var55, var57);
//     var48.report(var49, var58);
//     var43.removeThreadLocal((java.lang.Object)var58);
//     com.google.javascript.jscomp.DiagnosticType var61 = var58.getType();
//     com.google.javascript.jscomp.DiagnosticType var67 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
//     java.lang.String[] var69 = new java.lang.String[] { "hi!: hi!"};
//     com.google.javascript.jscomp.JSError var70 = com.google.javascript.jscomp.JSError.make("hi!. hi! at (unknown source) line (unknown line) : (unknown column)", 40, 0, var67, var69);
//     com.google.javascript.jscomp.JSError var71 = var38.makeError(var41, var61, var69);
//     boolean var72 = var31.hasNode((java.lang.Object)var41);
//     com.google.javascript.rhino.Node var76 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var77 = var76.getType();
//     java.lang.String var78 = var76.getQualifiedName();
//     var76.addSuppression("");
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       com.google.javascript.jscomp.graph.Graph.GraphEdge var81 = var0.getFirstEdge((java.lang.Object)var72, (java.lang.Object)"");
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var9 + "' != '" + "goog.global"+ "'", var9.equals("goog.global"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var10 + "' != '" + "goog.exportProperty"+ "'", var10.equals("goog.exportProperty"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var57);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var61);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var67);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var69);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var70);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var71);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var72 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var76);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var77 == 40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var78);
// 
//   }

  public void test383() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test383"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    var0.clearNodeAnnotations();
    java.util.List var2 = var0.getGraphvizEdges();
    com.google.javascript.jscomp.JSSourceFile var5 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var5);
    com.google.javascript.jscomp.JSModule var7 = var6.getModule();
    java.io.PrintStream var8 = null;
    com.google.javascript.jscomp.Compiler var9 = new com.google.javascript.jscomp.Compiler(var8);
    com.google.javascript.jscomp.SourceMap var10 = var9.getSourceMap();
    com.google.javascript.jscomp.SourceMap var11 = var9.getSourceMap();
    var6.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var13 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    com.google.javascript.jscomp.ClosureCodingConvention var14 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var15 = null;
    boolean var16 = var14.isVarArgsParameter(var15);
    java.lang.String var17 = var14.getExportSymbolFunction();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var19 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var20 = var19.getNodes();
    java.util.List var21 = var19.getEdges();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var25.setType(10);
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var21, var25, 1, 100);
    java.lang.String var31 = var14.getSingletonGetterClassName(var30);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var32 = var13.createDirectedGraphNode((java.lang.Object)var14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var33 = var0.isConnectedInDirection((java.lang.Object)var6, (java.lang.Object)var32);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "goog.exportSymbol"+ "'", var17.equals("goog.exportSymbol"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test384() {}
//   public void test384() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test384"); }
// 
// 
//     com.google.javascript.rhino.Context var0 = null;
//     com.google.javascript.rhino.Context var1 = com.google.javascript.rhino.Context.enter(var0);
//     var1.setCompileFunctionsWithDynamicScope(false);
//     com.google.javascript.jscomp.MessageFormatter var4 = null;
//     java.util.logging.Logger var5 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var6 = new com.google.javascript.jscomp.LoggerErrorManager(var4, var5);
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     com.google.javascript.rhino.Node var9 = null;
//     com.google.javascript.jscomp.CheckLevel var11 = null;
//     com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var11, "hi!");
//     java.lang.String[] var15 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", var9, var13, var15);
//     var6.report(var7, var16);
//     var1.removeThreadLocal((java.lang.Object)var16);
//     boolean var19 = var1.isGeneratingDebug();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       com.google.javascript.rhino.Context var20 = com.google.javascript.rhino.Context.enter(var1);
//       fail("Expected exception of type java.lang.RuntimeException");
//     } catch (java.lang.RuntimeException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == false);
// 
//   }

  public void test385() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test385"); }


    java.nio.charset.Charset var1 = null;
    com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromFile("", var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test386() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test386"); }


    java.lang.Object var1 = null;
    java.lang.Object var2 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var3 = com.google.javascript.rhino.ScriptRuntime.getMessage2("or", var1, var2);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test387() {}
//   public void test387() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test387"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile.Generator var1 = null;
//     com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var1);
//     com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var2, true);
//     com.google.javascript.jscomp.MessageFormatter var5 = null;
//     java.util.logging.Logger var6 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var7 = new com.google.javascript.jscomp.LoggerErrorManager(var5, var6);
//     var4.setErrorManager((com.google.javascript.jscomp.ErrorManager)var7);
//     com.google.javascript.jscomp.Compiler var9 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var7);
//     com.google.javascript.jscomp.CompilerInput var11 = var9.newExternInput("com.google.javascript.rhino.EcmaError: TypeError: Cannot set property \"hi!: hi!\" of 0 to \"40\"");
// 
//   }

  public void test388() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test388"); }


    com.google.javascript.jscomp.CheckLevel var3 = null;
    com.google.javascript.rhino.Node var5 = null;
    com.google.javascript.jscomp.CheckLevel var7 = null;
    com.google.javascript.jscomp.DiagnosticType var9 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var7, "hi!");
    java.lang.String[] var11 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var12 = com.google.javascript.jscomp.JSError.make("", var5, var9, var11);
    java.lang.String[] var14 = new java.lang.String[] { "goog.exportProperty"};
    com.google.javascript.jscomp.JSError var15 = com.google.javascript.jscomp.JSError.make("eof", 1, 40, var3, var9, var14);
    com.google.javascript.jscomp.Compiler var16 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var17 = var16.getTopScope();
    var16.disableThreads();
    var16.disableThreads();
    com.google.javascript.jscomp.NodeTraversal.Callback var20 = null;
    com.google.javascript.jscomp.NodeTraversal var21 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var16, var20);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var27 = var26.getType();
    java.lang.String var28 = var26.getQualifiedName();
    com.google.javascript.rhino.Node var29 = new com.google.javascript.rhino.Node(100, var26);
    com.google.javascript.jscomp.CheckLevel var30 = null;
    com.google.javascript.jscomp.DiagnosticType var33 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
    java.lang.String[] var35 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var36 = var21.makeError(var26, var30, var33, var35);
    java.lang.String var37 = var33.toString();
    int var38 = var9.compareTo(var33);
    com.google.javascript.jscomp.DiagnosticType var41 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "");
    int var42 = var33.compareTo(var41);
    java.lang.String var43 = var33.toString();
    com.google.javascript.jscomp.DiagnosticType var46 = com.google.javascript.jscomp.DiagnosticType.disabled("", "eof");
    int var47 = var33.compareTo(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!: hi!"+ "'", var37.equals("hi!: hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!: hi!"+ "'", var43.equals("hi!: hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 3);

  }

  public void test389() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test389"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
    com.google.javascript.jscomp.SourceMap var2 = var0.getSourceMap();
    com.google.javascript.jscomp.JSSourceFile var5 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.SourceFile.Generator var7 = null;
    com.google.javascript.jscomp.JSSourceFile var8 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var7);
    com.google.javascript.jscomp.CompilerInput var10 = new com.google.javascript.jscomp.CompilerInput(var8, true);
    com.google.javascript.jscomp.CompilerOptions var11 = new com.google.javascript.jscomp.CompilerOptions();
    var11.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var14 = var11.getTweakProcessing();
    var11.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.Result var17 = var0.compile(var5, var8, var11);
    var11.setRemoveAbstractMethods(false);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var21 = var20.newSubGraph();
    var20.pushNodeAnnotations();
    java.util.List var23 = var20.getGraphvizEdges();
    com.google.javascript.jscomp.ComposeWarningsGuard var24 = new com.google.javascript.jscomp.ComposeWarningsGuard(var23);
    java.lang.String var25 = var24.toString();
    var11.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var24);
    com.google.javascript.jscomp.ClosureCodingConvention var27 = new com.google.javascript.jscomp.ClosureCodingConvention();
    java.lang.String var28 = var27.getGlobalObject();
    java.lang.String var29 = var27.getExportPropertyFunction();
    java.lang.String var30 = var27.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.Node.newString(": hi!", 100, 10);
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var39.setType(10);
    com.google.javascript.rhino.Node var43 = new com.google.javascript.rhino.Node(10);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var52 = var47.clonePropsFrom(var51);
    var52.putProp((-1), (java.lang.Object)10.0d);
    com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var64 = var59.clonePropsFrom(var63);
    com.google.javascript.rhino.Node var65 = var52.copyInformationFrom(var64);
    boolean var66 = var64.hasOneChild();
    com.google.javascript.rhino.Node var68 = null;
    com.google.javascript.jscomp.CheckLevel var70 = null;
    com.google.javascript.jscomp.DiagnosticType var72 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var70, "hi!");
    java.lang.String[] var74 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var75 = com.google.javascript.jscomp.JSError.make("", var68, var72, var74);
    com.google.javascript.rhino.Node var79 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var80 = var79.getType();
    com.google.javascript.rhino.Node var81 = var79.cloneTree();
    boolean var82 = var75.equals((java.lang.Object)var79);
    com.google.javascript.rhino.Node var85 = new com.google.javascript.rhino.Node((-1), var39, var43, var64, var79, 0, 1);
    java.lang.String var86 = var27.extractClassNameIfProvide(var34, var79);
    boolean var88 = var27.isSuperClassReference("OFF");
    var11.setCodingConvention((com.google.javascript.jscomp.CodingConvention)var27);
    com.google.javascript.rhino.Node var93 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var94 = var93.getType();
    int var95 = var93.getSourcePosition();
    com.google.javascript.rhino.Node var96 = var93.getLastSibling();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var97 = var27.isPropertyTestFunction(var93);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "goog.global"+ "'", var28.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "goog.exportProperty"+ "'", var29.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test390() {}
//   public void test390() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test390"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.Collection var1 = var0.getNodes();
//     var0.clearEdgeAnnotations();
//     boolean var3 = var0.isDirected();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.Collection var5 = var4.getNodes();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var6 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var7 = var6.newSubGraph();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     com.google.javascript.jscomp.graph.SubGraph var9 = var8.newSubGraph();
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var11 = var8.createDirectedGraphNode((java.lang.Object)100);
//     java.util.List var12 = var6.getDirectedPredNodes(var11);
//     com.google.javascript.jscomp.JSModuleGraph var13 = new com.google.javascript.jscomp.JSModuleGraph(var12);
//     var13.coalesceDuplicateFiles();
//     boolean var15 = var4.hasNode((java.lang.Object)var13);
//     var13.coalesceDuplicateFiles();
//     com.google.javascript.rhino.Context var17 = com.google.javascript.rhino.Context.enter();
//     boolean var18 = var17.isGeneratingDebugChanged();
//     var17.setGeneratingSource(true);
//     int var21 = var17.getOptimizationLevel();
//     var17.removeActivationName(": hi!");
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var24 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithEdgeAnnotations();
//     com.google.javascript.jscomp.SourceFile.Generator var26 = null;
//     com.google.javascript.jscomp.SourceFile var27 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var26);
//     com.google.javascript.jscomp.JsAst var28 = new com.google.javascript.jscomp.JsAst(var27);
//     java.lang.RuntimeException var29 = com.google.javascript.rhino.ScriptRuntime.notFunctionError((java.lang.Object)var24, (java.lang.Object)var27);
//     java.lang.Object var30 = null;
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var31 = var24.getDirectedGraphNode(var30);
//     com.google.javascript.jscomp.ClosureCodingConvention var32 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     java.lang.String var33 = var32.getGlobalObject();
//     java.lang.String var34 = var32.getExportPropertyFunction();
//     com.google.javascript.rhino.jstype.JSTypeRegistry var35 = null;
//     com.google.javascript.jscomp.Scope var36 = null;
//     com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.util.Collection var41 = var40.getNodes();
//     java.util.List var42 = var40.getEdges();
//     com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     var46.setType(10);
//     com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var42, var46, 1, 100);
//     var37.setReplaceStringsConfiguration("hi!", var42);
//     var32.defineDelegateProxyPrototypeProperties(var35, var36, var42);
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var54 = var24.createDirectedGraphNode((java.lang.Object)var42);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       boolean var55 = var0.isConnected((java.lang.Object)var13, (java.lang.Object)": hi!", (java.lang.Object)var24);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var3 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var15 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var21 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var33 + "' != '" + "goog.global"+ "'", var33.equals("goog.global"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var34 + "' != '" + "goog.exportProperty"+ "'", var34.equals("goog.exportProperty"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var54);
// 
//   }

  public void test391() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test391"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.SourceMap var5 = var3.getSourceMap();
    com.google.javascript.jscomp.JSSourceFile var8 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.SourceFile.Generator var10 = null;
    com.google.javascript.jscomp.JSSourceFile var11 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var10);
    com.google.javascript.jscomp.CompilerInput var13 = new com.google.javascript.jscomp.CompilerInput(var11, true);
    com.google.javascript.jscomp.CompilerOptions var14 = new com.google.javascript.jscomp.CompilerOptions();
    var14.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var17 = var14.getTweakProcessing();
    var14.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.Result var20 = var3.compile(var8, var11, var14);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var22 = var21.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var23 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var24 = var23.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var26 = var23.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var27 = var21.getDirectedPredNodes(var26);
    com.google.javascript.jscomp.JSModuleGraph var28 = new com.google.javascript.jscomp.JSModuleGraph(var27);
    com.google.javascript.jscomp.NodeTraversal.Callback var29 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var3, var27, var29);
    var0.setManageClosureDependencies(var27);
    com.google.javascript.rhino.Node var34 = null;
    com.google.javascript.jscomp.CheckLevel var36 = null;
    com.google.javascript.jscomp.DiagnosticType var38 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var36, "hi!");
    java.lang.String[] var40 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var41 = com.google.javascript.jscomp.JSError.make("", var34, var38, var40);
    java.lang.RuntimeException var43 = com.google.javascript.rhino.ScriptRuntime.undefWriteError((java.lang.Object)(short)0, (java.lang.Object)var38, (java.lang.Object)40);
    com.google.javascript.jscomp.DiagnosticType[] var44 = new com.google.javascript.jscomp.DiagnosticType[] { var38};
    com.google.javascript.jscomp.DiagnosticGroup var45 = new com.google.javascript.jscomp.DiagnosticGroup(var44);
    com.google.javascript.jscomp.CheckLevel var46 = null;
    var0.setWarningLevel(var45, var46);
    var0.setOutputCharset("bitxor");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test392() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test392"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.EcmaError var3 = com.google.javascript.rhino.ScriptRuntime.typeError2("ERROR\n    STRING \n: com.google.javascript.rhino.EcmaError: : hi!", "(: hi!)", "hi!: hi!");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test393() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test393"); }


    com.google.javascript.jscomp.JSSourceFile var1 = com.google.javascript.jscomp.JSSourceFile.fromFile("eof");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test394() {}
//   public void test394() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test394"); }
// 
// 
//     com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot var0 = null;
//     com.google.javascript.jscomp.parsing.Config.LanguageMode var3 = null;
//     com.google.javascript.jscomp.parsing.Config var5 = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(false, var3, true);
//     com.google.javascript.jscomp.mozilla.rhino.ErrorReporter var6 = null;
//     com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.IRFactory.transformTree(var0, "", var5, var6);
// 
//   }

  public void test395() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test395"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var1 = com.google.javascript.rhino.ScriptRuntime.getMessage0("@IMPLEMENTATION.VERSION@");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test396() {}
//   public void test396() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test396"); }
// 
// 
//     com.google.javascript.rhino.Context var0 = null;
//     com.google.javascript.rhino.Context var1 = com.google.javascript.rhino.Context.enter(var0);
//     var1.setCompileFunctionsWithDynamicScope(false);
//     com.google.javascript.jscomp.MessageFormatter var4 = null;
//     java.util.logging.Logger var5 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var6 = new com.google.javascript.jscomp.LoggerErrorManager(var4, var5);
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     com.google.javascript.rhino.Node var9 = null;
//     com.google.javascript.jscomp.CheckLevel var11 = null;
//     com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var11, "hi!");
//     java.lang.String[] var15 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", var9, var13, var15);
//     var6.report(var7, var16);
//     var1.removeThreadLocal((java.lang.Object)var16);
//     int var19 = var1.getInstructionObserverThreshold();
//     var1.addActivationName("goog.exportProperty");
//     int var22 = var1.getLanguageVersion();
//     com.google.javascript.jscomp.ClosureCodingConvention var23 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     java.lang.String var24 = var23.getGlobalObject();
//     java.lang.String var25 = var23.getExportPropertyFunction();
//     java.lang.String var26 = var23.getDelegateSuperclassName();
//     com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.Node.newString(": hi!", 100, 10);
//     com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     var35.setType(10);
//     com.google.javascript.rhino.Node var39 = new com.google.javascript.rhino.Node(10);
//     com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var48 = var43.clonePropsFrom(var47);
//     var48.putProp((-1), (java.lang.Object)10.0d);
//     com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var60 = var55.clonePropsFrom(var59);
//     com.google.javascript.rhino.Node var61 = var48.copyInformationFrom(var60);
//     boolean var62 = var60.hasOneChild();
//     com.google.javascript.rhino.Node var64 = null;
//     com.google.javascript.jscomp.CheckLevel var66 = null;
//     com.google.javascript.jscomp.DiagnosticType var68 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var66, "hi!");
//     java.lang.String[] var70 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var71 = com.google.javascript.jscomp.JSError.make("", var64, var68, var70);
//     com.google.javascript.rhino.Node var75 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var76 = var75.getType();
//     com.google.javascript.rhino.Node var77 = var75.cloneTree();
//     boolean var78 = var71.equals((java.lang.Object)var75);
//     com.google.javascript.rhino.Node var81 = new com.google.javascript.rhino.Node((-1), var35, var39, var60, var75, 0, 1);
//     java.lang.String var82 = var23.extractClassNameIfProvide(var30, var75);
//     var30.setSourcePositionForTree(40);
//     var1.seal((java.lang.Object)var30);
//     int var86 = var1.getInstructionObserverThreshold();
//     java.beans.PropertyChangeListener var87 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       var1.removePropertyChangeListener(var87);
//       fail("Expected exception of type java.lang.IllegalStateException");
//     } catch (java.lang.IllegalStateException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var24 + "' != '" + "goog.global"+ "'", var24.equals("goog.global"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var25 + "' != '" + "goog.exportProperty"+ "'", var25.equals("goog.exportProperty"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var55);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var59);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var60);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var61);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var62 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var68);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var70);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var71);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var75);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var76 == 40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var77);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var78 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var82);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var86 == 0);
// 
//   }

  public void test397() {}
//   public void test397() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test397"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     var0.disableThreads();
//     var0.disableThreads();
//     com.google.javascript.jscomp.MessageFormatter var4 = null;
//     java.util.logging.Logger var5 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var6 = new com.google.javascript.jscomp.LoggerErrorManager(var4, var5);
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     com.google.javascript.rhino.Node var9 = null;
//     com.google.javascript.jscomp.CheckLevel var11 = null;
//     com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var11, "hi!");
//     java.lang.String[] var15 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", var9, var13, var15);
//     var6.report(var7, var16);
//     var0.setErrorManager((com.google.javascript.jscomp.ErrorManager)var6);
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var19 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var20 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var19);
//     com.google.javascript.jscomp.NodeTraversal.Callback var21 = null;
//     com.google.javascript.jscomp.NodeTraversal var22 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var21);
//     com.google.javascript.jscomp.Scope var23 = var22.getScope();
//     com.google.javascript.jscomp.CompilerInput var24 = var22.getInput();
// 
//   }

  public void test398() {}
//   public void test398() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test398"); }
// 
// 
//     com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot var0 = null;
//     com.google.javascript.jscomp.parsing.Config var3 = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(false);
//     com.google.javascript.jscomp.mozilla.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.IRFactory.transformTree(var0, "(: hi!)", var3, var4);
// 
//   }

  public void test399() {}
//   public void test399() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test399"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var2 = var0.isPrivate("");
//     com.google.javascript.rhino.jstype.FunctionType var3 = null;
//     com.google.javascript.rhino.jstype.FunctionType var4 = null;
//     com.google.javascript.jscomp.CodingConvention.SubclassType var5 = null;
//     var0.applySubclassRelationship(var3, var4, var5);
//     java.lang.String var7 = var0.getExportSymbolFunction();
//     boolean var10 = var0.isExported("STRING \n", true);
//     boolean var13 = var0.isExported("STRING \n", false);
//     com.google.javascript.jscomp.Compiler var14 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var15 = var14.getTopScope();
//     var14.disableThreads();
//     var14.disableThreads();
//     com.google.javascript.jscomp.NodeTraversal.Callback var18 = null;
//     com.google.javascript.jscomp.NodeTraversal var19 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var14, var18);
//     com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var25 = var24.getType();
//     java.lang.String var26 = var24.getQualifiedName();
//     com.google.javascript.rhino.Node var27 = new com.google.javascript.rhino.Node(100, var24);
//     com.google.javascript.jscomp.CheckLevel var28 = null;
//     com.google.javascript.jscomp.DiagnosticType var31 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
//     java.lang.String[] var33 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var34 = var19.makeError(var24, var28, var31, var33);
//     java.lang.String var35 = var0.identifyTypeDefAssign(var24);
//     com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var40 = var39.getType();
//     int var41 = var39.getSourcePosition();
//     com.google.javascript.rhino.Node var42 = var39.getLastSibling();
//     com.google.javascript.rhino.jstype.JSType var43 = var39.getJSType();
//     java.util.List var44 = var0.identifyTypeDeclarationCall(var39);
// 
//   }

  public void test400() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test400"); }


    java.lang.String var1 = com.google.javascript.rhino.Node.tokenToName((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "error"+ "'", var1.equals("error"));

  }

  public void test401() {}
//   public void test401() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test401"); }
// 
// 
//     java.io.InputStream var2 = null;
//     com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromInputStream("error", "LinkedGraph", var2);
// 
//   }

  public void test402() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test402"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.EcmaError var6 = com.google.javascript.rhino.ScriptRuntime.constructError("goog.abstractMethod", "string: string", "LinkedGraph", 3, "EOF ", (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test403() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test403"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    int var4 = var3.getType();
    com.google.javascript.rhino.Node var5 = var3.cloneTree();
    boolean var6 = var5.isQualifiedName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test404() {}
//   public void test404() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test404"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     var0.disableThreads();
//     var0.disableThreads();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal var5 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var4);
//     com.google.javascript.rhino.Node var6 = var5.getEnclosingFunction();
//     com.google.javascript.jscomp.Compiler var7 = var5.getCompiler();
//     com.google.javascript.rhino.Node var8 = null;
//     com.google.javascript.rhino.Context var9 = null;
//     com.google.javascript.rhino.Context var10 = com.google.javascript.rhino.Context.enter(var9);
//     var10.setCompileFunctionsWithDynamicScope(false);
//     com.google.javascript.jscomp.MessageFormatter var13 = null;
//     java.util.logging.Logger var14 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var15 = new com.google.javascript.jscomp.LoggerErrorManager(var13, var14);
//     com.google.javascript.jscomp.CheckLevel var16 = null;
//     com.google.javascript.rhino.Node var18 = null;
//     com.google.javascript.jscomp.CheckLevel var20 = null;
//     com.google.javascript.jscomp.DiagnosticType var22 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var20, "hi!");
//     java.lang.String[] var24 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var25 = com.google.javascript.jscomp.JSError.make("", var18, var22, var24);
//     var15.report(var16, var25);
//     var10.removeThreadLocal((java.lang.Object)var25);
//     com.google.javascript.jscomp.DiagnosticType var28 = var25.getType();
//     com.google.javascript.jscomp.DiagnosticType var34 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
//     java.lang.String[] var36 = new java.lang.String[] { "hi!: hi!"};
//     com.google.javascript.jscomp.JSError var37 = com.google.javascript.jscomp.JSError.make("hi!. hi! at (unknown source) line (unknown line) : (unknown column)", 40, 0, var34, var36);
//     com.google.javascript.jscomp.JSError var38 = var5.makeError(var8, var28, var36);
//     com.google.javascript.jscomp.CompilerInput var39 = var5.getInput();
// 
//   }

  public void test405() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test405"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.JSError[] var3 = var2.getWarnings();
    int var4 = var2.getWarningCount();
    int var5 = var2.getWarningCount();
    var2.generateReport();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test406() {}
//   public void test406() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test406"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     var0.disableThreads();
//     var0.disableThreads();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal var5 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var0, var4);
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var11 = var10.getType();
//     java.lang.String var12 = var10.getQualifiedName();
//     com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(100, var10);
//     com.google.javascript.jscomp.CheckLevel var14 = null;
//     com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "hi!");
//     java.lang.String[] var19 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var20 = var5.makeError(var10, var14, var17, var19);
//     com.google.javascript.rhino.Node var21 = var5.getCurrentNode();
//     int var22 = var5.getLineNumber();
//     com.google.javascript.jscomp.Scope var23 = var5.getScope();
//     com.google.javascript.jscomp.Scope var24 = var5.getScope();
//     com.google.javascript.rhino.Node var25 = var5.getEnclosingFunction();
//     com.google.javascript.jscomp.JSModule var26 = var5.getModule();
// 
//   }

  public void test407() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test407"); }


    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var9 = var4.clonePropsFrom(var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    var9.setJSType(var10);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var20 = var15.clonePropsFrom(var19);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    var20.setJSType(var21);
    java.util.Collection var23 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var20);
    com.google.javascript.rhino.Node.AncestorIterable var24 = var20.getAncestors();
    boolean var25 = var20.isOnlyModifiesThisCall();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var34 = var29.clonePropsFrom(var33);
    com.google.javascript.rhino.jstype.JSType var35 = null;
    var33.setJSType(var35);
    var33.setOptionalArg(true);
    int var39 = var33.getLineno();
    boolean var40 = var33.isLocalResultCall();
    boolean var41 = var33.isQuotedString();
    com.google.javascript.rhino.Node var42 = new com.google.javascript.rhino.Node(0, var9, var20, var33);
    com.google.javascript.jscomp.ClosureCodingConvention var43 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var45 = var43.isPrivate("");
    boolean var47 = var43.isPrivate("goog.exportProperty");
    boolean var49 = var43.isConstant("com.google.javascript.rhino.EcmaError: : hi!");
    com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var58 = var53.clonePropsFrom(var57);
    com.google.javascript.rhino.jstype.JSType var59 = null;
    var57.setJSType(var59);
    var57.setOptionalArg(true);
    int var63 = var57.getLineno();
    com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var72 = var67.clonePropsFrom(var71);
    com.google.javascript.rhino.jstype.JSType var73 = null;
    var71.setJSType(var73);
    java.lang.String var75 = var43.extractClassNameIfProvide(var57, var71);
    var42.addChildrenToFront(var57);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var77 = var42.toStringTree();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);

  }

  public void test408() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test408"); }


    com.google.javascript.jscomp.CheckLevel var1 = null;
    com.google.javascript.jscomp.DiagnosticType var3 = com.google.javascript.jscomp.DiagnosticType.make("com.google.javascript.rhino.EcmaError: : hi!: goog.global", var1, "com.google.javascript.rhino.EcmaError: TypeError: hi! is not a function, it is com.google.javascript.jscomp.graph.LinkedDirectedGraph.");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test409() {}
//   public void test409() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test409"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile.Generator var1 = null;
//     com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var1);
//     com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var2, true);
//     com.google.javascript.jscomp.JSModule var5 = var4.getModule();
//     com.google.javascript.jscomp.Region var7 = var4.getRegion(40);
// 
//   }

  public void test410() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test410"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newNumber(1.0d, 40, 10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var4 = var3.detachFromParent();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test411() {}
//   public void test411() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test411"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     var0.disableThreads();
//     com.google.javascript.rhino.Node var3 = var0.getRoot();
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var7 = var6.getTopScope();
//     com.google.javascript.jscomp.SourceMap var8 = var6.getSourceMap();
//     var6.reportCodeChange();
//     com.google.javascript.jscomp.Compiler var10 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var11 = var10.getTopScope();
//     com.google.javascript.jscomp.SourceMap var12 = var10.getSourceMap();
//     com.google.javascript.jscomp.JSSourceFile var15 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
//     com.google.javascript.jscomp.SourceFile.Generator var17 = null;
//     com.google.javascript.jscomp.JSSourceFile var18 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var17);
//     com.google.javascript.jscomp.CompilerInput var20 = new com.google.javascript.jscomp.CompilerInput(var18, true);
//     com.google.javascript.jscomp.CompilerOptions var21 = new com.google.javascript.jscomp.CompilerOptions();
//     var21.setAcceptConstKeyword(true);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var24 = var21.getTweakProcessing();
//     var21.setRewriteNewDateGoogNow(false);
//     com.google.javascript.jscomp.Result var27 = var10.compile(var15, var18, var21);
//     com.google.javascript.rhino.Node var28 = var6.parse(var15);
//     com.google.javascript.jscomp.JSSourceFile var31 = com.google.javascript.jscomp.JSSourceFile.fromCode("null(null)", "goog.global");
//     com.google.javascript.jscomp.JSSourceFile[] var32 = new com.google.javascript.jscomp.JSSourceFile[] { var31};
//     java.nio.charset.Charset var34 = null;
//     com.google.javascript.jscomp.JSSourceFile var35 = com.google.javascript.jscomp.JSSourceFile.fromFile("goog.exportProperty", var34);
//     com.google.javascript.jscomp.JSSourceFile[] var36 = new com.google.javascript.jscomp.JSSourceFile[] { var35};
//     com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
//     var37.setAcceptConstKeyword(true);
//     java.util.Map var40 = var37.getTweakReplacements();
//     var37.setDefineToNumberLiteral("eof", 1);
//     com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var44 = null;
//     var37.setAliasTransformationHandler(var44);
//     var37.setGenerateExports(false);
//     com.google.javascript.jscomp.Result var48 = var6.compile(var32, var36, var37);
//     com.google.javascript.jscomp.JSModule var49 = null;
//     com.google.javascript.jscomp.JSModule[] var50 = new com.google.javascript.jscomp.JSModule[] { var49};
//     com.google.javascript.jscomp.CompilerOptions var51 = null;
//     var0.init(var32, var50, var51);
// 
//   }

  public void test412() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test412"); }


    com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var2);
    com.google.javascript.jscomp.CompilerInput var5 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var3, false);
    java.lang.String var7 = var5.getLine(100);
    com.google.javascript.jscomp.Region var9 = var5.getRegion(3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test413() {}
//   public void test413() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test413"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     com.google.javascript.jscomp.SourceMap var2 = var0.getSourceMap();
//     boolean var3 = var0.isTypeCheckingEnabled();
// 
//   }

  public void test414() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test414"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
    var0.disableThreads();
    var0.disableThreads();
    com.google.javascript.jscomp.MessageFormatter var4 = null;
    java.util.logging.Logger var5 = null;
    com.google.javascript.jscomp.LoggerErrorManager var6 = new com.google.javascript.jscomp.LoggerErrorManager(var4, var5);
    com.google.javascript.jscomp.CheckLevel var7 = null;
    com.google.javascript.rhino.Node var9 = null;
    com.google.javascript.jscomp.CheckLevel var11 = null;
    com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var11, "hi!");
    java.lang.String[] var15 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", var9, var13, var15);
    var6.report(var7, var16);
    var0.setErrorManager((com.google.javascript.jscomp.ErrorManager)var6);
    int var19 = var6.getErrorCount();
    int var20 = var6.getErrorCount();
    com.google.javascript.jscomp.JSError[] var21 = var6.getErrors();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test415() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test415"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
    com.google.javascript.jscomp.SourceMap var2 = var0.getSourceMap();
    com.google.javascript.jscomp.JSSourceFile var5 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.SourceFile.Generator var7 = null;
    com.google.javascript.jscomp.JSSourceFile var8 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var7);
    com.google.javascript.jscomp.CompilerInput var10 = new com.google.javascript.jscomp.CompilerInput(var8, true);
    com.google.javascript.jscomp.CompilerOptions var11 = new com.google.javascript.jscomp.CompilerOptions();
    var11.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var14 = var11.getTweakProcessing();
    var11.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.Result var17 = var0.compile(var5, var8, var11);
    com.google.javascript.jscomp.DiagnosticGroup var18 = null;
    com.google.javascript.jscomp.CheckLevel var19 = null;
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var20 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var18, var19);
    java.lang.String var21 = var20.toString();
    var11.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var20);
    var11.enableRuntimeTypeCheck("");
    var11.setDefineToBooleanLiteral("null(null)", false);
    var11.setCollapsePropertiesOnExternTypes(true);
    var11.setSummaryDetailLevel(3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "null(null)"+ "'", var21.equals("null(null)"));

  }

  public void test416() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test416"); }


    com.google.javascript.jscomp.SourceFile.Generator var1 = null;
    com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var1);
    com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var2, true);
    com.google.javascript.jscomp.SourceFile.Generator var6 = null;
    com.google.javascript.jscomp.SourceFile var7 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var6);
    com.google.javascript.jscomp.JsAst var8 = new com.google.javascript.jscomp.JsAst(var7);
    var4.setSourceFile(var7);
    com.google.javascript.jscomp.JsAst var10 = new com.google.javascript.jscomp.JsAst(var7);
    var7.setOriginalPath("eol");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test417() {}
//   public void test417() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test417"); }
// 
// 
//     com.google.javascript.rhino.Context var0 = null;
//     com.google.javascript.rhino.Context var1 = com.google.javascript.rhino.Context.enter(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = null;
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       com.google.javascript.rhino.ErrorReporter var3 = var1.setErrorReporter(var2);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
// 
//   }

  public void test418() {}
//   public void test418() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test418"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var2 = var0.isPrivate("");
//     boolean var4 = var0.isPrivate("goog.exportProperty");
//     boolean var6 = var0.isConstant("com.google.javascript.rhino.EcmaError: : hi!");
//     com.google.javascript.rhino.jstype.FunctionType var7 = null;
//     com.google.javascript.rhino.jstype.FunctionType var8 = null;
//     com.google.javascript.jscomp.CodingConvention.SubclassType var9 = null;
//     var0.applySubclassRelationship(var7, var8, var9);
//     com.google.javascript.jscomp.ClosureCodingConvention var11 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var13 = var11.isPrivate("");
//     java.lang.String var14 = var11.getExportPropertyFunction();
//     boolean var16 = var11.isPrivate("com.google.javascript.rhino.EcmaError: : hi!");
//     com.google.javascript.rhino.Node var17 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var18 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var20 = var18.isPrivate("");
//     boolean var22 = var18.isPrivate("goog.exportProperty");
//     boolean var24 = var18.isConstant("com.google.javascript.rhino.EcmaError: : hi!");
//     com.google.javascript.rhino.jstype.FunctionType var25 = null;
//     com.google.javascript.rhino.jstype.FunctionType var26 = null;
//     com.google.javascript.jscomp.CodingConvention.SubclassType var27 = null;
//     var18.applySubclassRelationship(var25, var26, var27);
//     com.google.javascript.rhino.jstype.ObjectType var29 = null;
//     com.google.javascript.rhino.jstype.ObjectType var30 = null;
//     com.google.javascript.rhino.jstype.ObjectType var31 = null;
//     com.google.javascript.rhino.jstype.FunctionType var32 = null;
//     com.google.javascript.rhino.jstype.FunctionType var33 = null;
//     var18.applyDelegateRelationship(var29, var30, var31, var32, var33);
//     com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var39 = var38.getType();
//     int var40 = var38.getSourcePosition();
//     com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var50 = var45.clonePropsFrom(var49);
//     com.google.javascript.rhino.jstype.JSType var51 = null;
//     var50.setJSType(var51);
//     com.google.javascript.rhino.Node var56 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var61 = var56.clonePropsFrom(var60);
//     com.google.javascript.rhino.jstype.JSType var62 = null;
//     var61.setJSType(var62);
//     java.util.Collection var64 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var61);
//     com.google.javascript.rhino.Node.AncestorIterable var65 = var61.getAncestors();
//     boolean var66 = var61.isOnlyModifiesThisCall();
//     com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var74 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var75 = var70.clonePropsFrom(var74);
//     com.google.javascript.rhino.jstype.JSType var76 = null;
//     var74.setJSType(var76);
//     var74.setOptionalArg(true);
//     int var80 = var74.getLineno();
//     boolean var81 = var74.isLocalResultCall();
//     boolean var82 = var74.isQuotedString();
//     com.google.javascript.rhino.Node var83 = new com.google.javascript.rhino.Node(0, var50, var61, var74);
//     java.lang.String var84 = var18.extractClassNameIfRequire(var38, var61);
//     java.lang.String var85 = var11.extractClassNameIfRequire(var17, var38);
//     boolean var86 = var0.isPropertyTestFunction(var17);
// 
//   }

  public void test419() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test419"); }


    com.google.javascript.rhino.EcmaError var2 = com.google.javascript.rhino.ScriptRuntime.constructError("ERROR\n    STRING \n", "com.google.javascript.rhino.EcmaError: : hi!");
    var2.initLineSource("goog.exportSymbol: STRING ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test420() {}
//   public void test420() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test420"); }
// 
// 
//     com.google.javascript.rhino.Node var2 = null;
//     com.google.javascript.jscomp.CheckLevel var4 = null;
//     com.google.javascript.jscomp.DiagnosticType var6 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var4, "hi!");
//     java.lang.String[] var8 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var9 = com.google.javascript.jscomp.JSError.make("", var2, var6, var8);
//     java.lang.RuntimeException var11 = com.google.javascript.rhino.ScriptRuntime.undefWriteError((java.lang.Object)(short)0, (java.lang.Object)var6, (java.lang.Object)40);
//     com.google.javascript.jscomp.DiagnosticType[] var12 = new com.google.javascript.jscomp.DiagnosticType[] { var6};
//     com.google.javascript.jscomp.DiagnosticGroup var13 = new com.google.javascript.jscomp.DiagnosticGroup(var12);
//     com.google.javascript.jscomp.DiagnosticGroup[] var14 = new com.google.javascript.jscomp.DiagnosticGroup[] { var13};
//     com.google.javascript.jscomp.DiagnosticGroup var15 = new com.google.javascript.jscomp.DiagnosticGroup(var14);
//     com.google.javascript.jscomp.DiagnosticGroup var16 = new com.google.javascript.jscomp.DiagnosticGroup(var14);
//     com.google.javascript.jscomp.CheckLevel var17 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var18 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var16, var17);
//     java.lang.String var19 = var18.toString();
//     java.lang.String var20 = var18.toString();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithEdgeAnnotations();
//     com.google.javascript.jscomp.SourceFile.Generator var23 = null;
//     com.google.javascript.jscomp.SourceFile var24 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var23);
//     com.google.javascript.jscomp.JsAst var25 = new com.google.javascript.jscomp.JsAst(var24);
//     java.lang.RuntimeException var26 = com.google.javascript.rhino.ScriptRuntime.notFunctionError((java.lang.Object)var21, (java.lang.Object)var24);
//     java.lang.Object var27 = null;
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var28 = var21.getDirectedGraphNode(var27);
//     com.google.javascript.jscomp.graph.SubGraph var29 = var21.newSubGraph();
//     com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var38 = var33.clonePropsFrom(var37);
//     com.google.javascript.rhino.jstype.JSType var39 = null;
//     var37.setJSType(var39);
//     var37.setOptionalArg(true);
//     int var43 = var37.getLineno();
//     boolean var44 = var37.isLocalResultCall();
//     boolean var45 = var37.isQuotedString();
//     var37.setOptionalArg(true);
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var48 = var21.createDirectedGraphNode((java.lang.Object)var37);
//     com.google.javascript.rhino.Node var53 = null;
//     com.google.javascript.jscomp.CheckLevel var55 = null;
//     com.google.javascript.jscomp.DiagnosticType var57 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var55, "hi!");
//     java.lang.String[] var59 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var60 = com.google.javascript.jscomp.JSError.make("", var53, var57, var59);
//     java.lang.RuntimeException var62 = com.google.javascript.rhino.ScriptRuntime.undefWriteError((java.lang.Object)(short)0, (java.lang.Object)var57, (java.lang.Object)40);
//     com.google.javascript.jscomp.DiagnosticType[] var63 = new com.google.javascript.jscomp.DiagnosticType[] { var57};
//     com.google.javascript.jscomp.DiagnosticGroup var64 = new com.google.javascript.jscomp.DiagnosticGroup(var63);
//     com.google.javascript.jscomp.DiagnosticGroup[] var65 = new com.google.javascript.jscomp.DiagnosticGroup[] { var64};
//     com.google.javascript.jscomp.DiagnosticGroup var66 = new com.google.javascript.jscomp.DiagnosticGroup(var65);
//     com.google.javascript.jscomp.DiagnosticGroup var67 = new com.google.javascript.jscomp.DiagnosticGroup("string", var65);
//     com.google.javascript.jscomp.DiagnosticGroup[] var68 = new com.google.javascript.jscomp.DiagnosticGroup[] { var67};
//     com.google.javascript.jscomp.DiagnosticGroup var69 = new com.google.javascript.jscomp.DiagnosticGroup("OFF", var68);
//     com.google.javascript.jscomp.DiagnosticGroup var70 = new com.google.javascript.jscomp.DiagnosticGroup(var68);
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var71 = var21.getDirectedGraphNode((java.lang.Object)var70);
//     boolean var72 = var18.enables(var70);
// 
//   }

  public void test421() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test421"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var1 = var0.getNodes();
    var0.clearEdgeAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var4 = var3.newSubGraph();
    var3.pushNodeAnnotations();
    com.google.javascript.jscomp.graph.SubGraph var6 = var3.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var7 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var8 = var7.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var10 = var7.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var11 = var7.getGraphvizNodes();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var13 = var12.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var14 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var15 = var14.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var17 = var14.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var18 = var12.getDirectedPredNodes(var17);
    java.util.List var19 = var7.getDirectedPredNodes(var17);
    java.util.List var20 = var3.getDirectedPredNodes(var17);
    java.util.List var21 = var0.getNeighborNodes(var17);
    com.google.javascript.jscomp.Compiler var22 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var23 = var22.getTopScope();
    var22.disableThreads();
    var22.disableThreads();
    com.google.javascript.jscomp.MessageFormatter var26 = null;
    java.util.logging.Logger var27 = null;
    com.google.javascript.jscomp.LoggerErrorManager var28 = new com.google.javascript.jscomp.LoggerErrorManager(var26, var27);
    com.google.javascript.jscomp.CheckLevel var29 = null;
    com.google.javascript.rhino.Node var31 = null;
    com.google.javascript.jscomp.CheckLevel var33 = null;
    com.google.javascript.jscomp.DiagnosticType var35 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var33, "hi!");
    java.lang.String[] var37 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var38 = com.google.javascript.jscomp.JSError.make("", var31, var35, var37);
    var28.report(var29, var38);
    var22.setErrorManager((com.google.javascript.jscomp.ErrorManager)var28);
    com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var41 = null;
    com.google.javascript.jscomp.LightweightMessageFormatter var42 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var22, var41);
    com.google.javascript.jscomp.NodeTraversal.Callback var43 = null;
    com.google.javascript.jscomp.NodeTraversal var44 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var22, var43);
    com.google.javascript.jscomp.ErrorManager var45 = var22.getErrorManager();
    java.lang.Object var46 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.graph.Graph.GraphEdge var47 = var0.getFirstEdge((java.lang.Object)var45, var46);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test422() {}
//   public void test422() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test422"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var1 = null;
//     boolean var2 = var0.isVarArgsParameter(var1);
//     java.lang.String var3 = var0.getExportSymbolFunction();
//     boolean var5 = var0.isSuperClassReference("goog.exportProperty");
//     boolean var8 = var0.isExported("null(null)", true);
//     com.google.javascript.rhino.jstype.FunctionType var9 = null;
//     com.google.javascript.rhino.jstype.FunctionType var10 = null;
//     com.google.javascript.rhino.jstype.ObjectType var11 = null;
//     var0.applySingletonGetter(var9, var10, var11);
// 
//   }

  public void test423() {}
//   public void test423() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test423"); }
// 
// 
//     com.google.javascript.rhino.Node var3 = null;
//     com.google.javascript.jscomp.CheckLevel var5 = null;
//     com.google.javascript.jscomp.DiagnosticType var7 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var5, "hi!");
//     java.lang.String[] var9 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var10 = com.google.javascript.jscomp.JSError.make("", var3, var7, var9);
//     java.lang.RuntimeException var12 = com.google.javascript.rhino.ScriptRuntime.undefWriteError((java.lang.Object)(short)0, (java.lang.Object)var7, (java.lang.Object)40);
//     com.google.javascript.jscomp.DiagnosticType[] var13 = new com.google.javascript.jscomp.DiagnosticType[] { var7};
//     com.google.javascript.jscomp.DiagnosticGroup var14 = new com.google.javascript.jscomp.DiagnosticGroup(var13);
//     com.google.javascript.jscomp.DiagnosticGroup[] var15 = new com.google.javascript.jscomp.DiagnosticGroup[] { var14};
//     com.google.javascript.jscomp.DiagnosticGroup var16 = new com.google.javascript.jscomp.DiagnosticGroup(var15);
//     com.google.javascript.jscomp.DiagnosticGroup var17 = new com.google.javascript.jscomp.DiagnosticGroup("string", var15);
//     com.google.javascript.jscomp.CheckLevel var18 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var19 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var17, var18);
//     com.google.javascript.jscomp.WarningsGuard[] var20 = new com.google.javascript.jscomp.WarningsGuard[] { var19};
//     com.google.javascript.jscomp.ComposeWarningsGuard var21 = new com.google.javascript.jscomp.ComposeWarningsGuard(var20);
//     com.google.javascript.jscomp.ComposeWarningsGuard var22 = new com.google.javascript.jscomp.ComposeWarningsGuard(var20);
//     com.google.javascript.rhino.Node var27 = null;
//     com.google.javascript.jscomp.CheckLevel var29 = null;
//     com.google.javascript.jscomp.DiagnosticType var31 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var29, "hi!");
//     java.lang.String[] var33 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var34 = com.google.javascript.jscomp.JSError.make("", var27, var31, var33);
//     java.lang.RuntimeException var36 = com.google.javascript.rhino.ScriptRuntime.undefWriteError((java.lang.Object)(short)0, (java.lang.Object)var31, (java.lang.Object)40);
//     com.google.javascript.jscomp.DiagnosticType[] var37 = new com.google.javascript.jscomp.DiagnosticType[] { var31};
//     com.google.javascript.jscomp.DiagnosticGroup var38 = new com.google.javascript.jscomp.DiagnosticGroup(var37);
//     com.google.javascript.jscomp.DiagnosticGroup[] var39 = new com.google.javascript.jscomp.DiagnosticGroup[] { var38};
//     com.google.javascript.jscomp.DiagnosticGroup var40 = new com.google.javascript.jscomp.DiagnosticGroup(var39);
//     com.google.javascript.jscomp.DiagnosticGroup var41 = new com.google.javascript.jscomp.DiagnosticGroup("string", var39);
//     com.google.javascript.jscomp.DiagnosticGroup[] var42 = new com.google.javascript.jscomp.DiagnosticGroup[] { var41};
//     com.google.javascript.jscomp.DiagnosticGroup var43 = new com.google.javascript.jscomp.DiagnosticGroup("OFF", var42);
//     boolean var44 = var22.enables(var43);
// 
//   }

  public void test424() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test424"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isPrivate("");
    com.google.javascript.rhino.jstype.FunctionType var3 = null;
    com.google.javascript.rhino.jstype.FunctionType var4 = null;
    com.google.javascript.jscomp.CodingConvention.SubclassType var5 = null;
    var0.applySubclassRelationship(var3, var4, var5);
    java.lang.String var7 = var0.getExportSymbolFunction();
    com.google.javascript.jscomp.ClosureCodingConvention var8 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var10 = var8.isPrivate("");
    boolean var12 = var8.isPrivate("goog.exportProperty");
    boolean var14 = var8.isConstant("com.google.javascript.rhino.EcmaError: : hi!");
    com.google.javascript.rhino.Node var15 = null;
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var19.setType(10);
    var19.setOptionalArg(false);
    java.lang.String var24 = var8.extractClassNameIfProvide(var15, var19);
    boolean var25 = var0.isOptionalParameter(var19);
    java.lang.Iterable var26 = var19.children();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var19.setDouble((-1.0d));
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "goog.exportSymbol"+ "'", var7.equals("goog.exportSymbol"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test425() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test425"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
    var0.disableThreads();
    var0.disableThreads();
    com.google.javascript.jscomp.CompilerOptions var4 = new com.google.javascript.jscomp.CompilerOptions();
    var4.setAcceptConstKeyword(true);
    java.util.Map var7 = var4.getTweakReplacements();
    var4.setDefineToNumberLiteral("eof", 1);
    com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var11 = null;
    var4.setAliasTransformationHandler(var11);
    var0.initOptions(var4);
    var4.setColorizeErrorOutput(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test426() {}
//   public void test426() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test426"); }
// 
// 
//     com.google.javascript.rhino.Context var0 = com.google.javascript.rhino.Context.enter();
//     boolean var1 = var0.isGeneratingDebugChanged();
//     var0.setGeneratingSource(true);
//     int var4 = var0.getOptimizationLevel();
//     boolean var5 = var0.isGeneratingSource();
//     com.google.javascript.jscomp.MessageFormatter var7 = null;
//     java.util.logging.Logger var8 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var9 = new com.google.javascript.jscomp.LoggerErrorManager(var7, var8);
//     int var10 = var9.getWarningCount();
//     var0.putThreadLocal((java.lang.Object)(-1.0f), (java.lang.Object)var9);
//     double var12 = var9.getTypedPercent();
//     com.google.javascript.jscomp.Compiler var13 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var9);
//     com.google.javascript.jscomp.JSError[] var14 = var9.getWarnings();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var1 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var4 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var10 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == 0.0d);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
// 
//   }

  public void test427() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test427"); }


    com.google.javascript.rhino.EcmaError var6 = com.google.javascript.rhino.ScriptRuntime.constructError("", "hi!", "hi!", (-1), "hi!", 1);
    java.lang.String var7 = var6.sourceName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));

  }

  public void test428() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test428"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var1 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var2 = var1.newSubGraph();
    var1.pushNodeAnnotations();
    java.util.List var4 = var1.getGraphvizEdges();
    boolean var5 = var1.isDirected();
    com.google.javascript.rhino.Context var6 = null;
    com.google.javascript.rhino.Context var7 = com.google.javascript.rhino.Context.enter(var6);
    boolean var8 = var7.isGeneratingDebug();
    com.google.javascript.jscomp.ClosureCodingConvention var9 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var11 = var9.isPrivate("");
    boolean var13 = var9.isPrivate("goog.exportProperty");
    boolean var15 = var9.isConstant("com.google.javascript.rhino.EcmaError: : hi!");
    com.google.javascript.rhino.Node var16 = null;
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var20.setType(10);
    var20.setOptionalArg(false);
    java.lang.String var25 = var9.extractClassNameIfProvide(var16, var20);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var26 = com.google.javascript.rhino.ScriptRuntime.getMessage3("hi!. hi! at (unknown source) line (unknown line) : (unknown column)", (java.lang.Object)var5, (java.lang.Object)var7, (java.lang.Object)var20);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test429() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test429"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var1 = var0.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var3 = var0.createDirectedGraphNode((java.lang.Object)100);
    var0.clearNodeAnnotations();
    com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.util.Collection var9 = var8.getNodes();
    java.util.List var10 = var8.getEdges();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    var14.setType(10);
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.NodeUtil.newFunctionNode("", var10, var14, 1, 100);
    var5.setReplaceStringsConfiguration("hi!", var10);
    java.util.Map var21 = var5.getDefineReplacements();
    var5.setDefineToDoubleLiteral("goog.abstractMethod", 0.0d);
    com.google.javascript.jscomp.CodingConvention var25 = null;
    var5.setCodingConvention(var25);
    com.google.javascript.jscomp.graph.GraphNode var27 = var0.createNode((java.lang.Object)var25);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var29 = var28.newSubGraph();
    var28.pushNodeAnnotations();
    com.google.javascript.jscomp.graph.SubGraph var31 = var28.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var32 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var33 = var32.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var35 = var32.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var36 = var32.getGraphvizNodes();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var37 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var38 = var37.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var39 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var40 = var39.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var42 = var39.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var43 = var37.getDirectedPredNodes(var42);
    java.util.List var44 = var32.getDirectedPredNodes(var42);
    java.util.List var45 = var28.getDirectedPredNodes(var42);
    java.util.List var46 = var0.getDirectedPredNodes(var42);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.deps.SortedDependencies var47 = new com.google.javascript.jscomp.deps.SortedDependencies(var46);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test430() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test430"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
    com.google.javascript.jscomp.SourceMap var2 = var0.getSourceMap();
    com.google.javascript.jscomp.JSSourceFile var5 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.SourceFile.Generator var7 = null;
    com.google.javascript.jscomp.JSSourceFile var8 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var7);
    com.google.javascript.jscomp.CompilerInput var10 = new com.google.javascript.jscomp.CompilerInput(var8, true);
    com.google.javascript.jscomp.CompilerOptions var11 = new com.google.javascript.jscomp.CompilerOptions();
    var11.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var14 = var11.getTweakProcessing();
    var11.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.Result var17 = var0.compile(var5, var8, var11);
    com.google.javascript.jscomp.CompilerOptions var18 = new com.google.javascript.jscomp.CompilerOptions();
    var18.setAcceptConstKeyword(true);
    java.util.Map var21 = var18.getTweakReplacements();
    var0.initOptions(var18);
    com.google.javascript.jscomp.JSModule var23 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var24 = var0.toSource(var23);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test431() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test431"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.JSSourceFile var4 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.rhino.Node var5 = var1.parse(var4);
    var1.disableThreads();
    com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
    var7.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.Compiler var10 = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.jscomp.Scope var11 = var10.getTopScope();
    com.google.javascript.jscomp.SourceMap var12 = var10.getSourceMap();
    com.google.javascript.jscomp.JSSourceFile var15 = com.google.javascript.jscomp.JSSourceFile.fromCode("", "hi!");
    com.google.javascript.jscomp.SourceFile.Generator var17 = null;
    com.google.javascript.jscomp.JSSourceFile var18 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("hi!", var17);
    com.google.javascript.jscomp.CompilerInput var20 = new com.google.javascript.jscomp.CompilerInput(var18, true);
    com.google.javascript.jscomp.CompilerOptions var21 = new com.google.javascript.jscomp.CompilerOptions();
    var21.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var24 = var21.getTweakProcessing();
    var21.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.Result var27 = var10.compile(var15, var18, var21);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var29 = var28.newSubGraph();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var31 = var30.newSubGraph();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var33 = var30.createDirectedGraphNode((java.lang.Object)100);
    java.util.List var34 = var28.getDirectedPredNodes(var33);
    com.google.javascript.jscomp.JSModuleGraph var35 = new com.google.javascript.jscomp.JSModuleGraph(var34);
    com.google.javascript.jscomp.NodeTraversal.Callback var36 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var10, var34, var36);
    var7.setManageClosureDependencies(var34);
    var7.setNameAnonymousFunctionsOnly(false);
    com.google.javascript.jscomp.DefaultPassConfig var41 = new com.google.javascript.jscomp.DefaultPassConfig(var7);
    var1.setPassConfig((com.google.javascript.jscomp.PassConfig)var41);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.check();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test432() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test432"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.SubGraph var1 = var0.newSubGraph();
    var0.pushNodeAnnotations();
    java.util.List var3 = var0.getGraphvizEdges();
    boolean var4 = var0.isDirected();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.Collection var6 = var5.getNodes();
    var5.pushEdgeAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithEdgeAnnotations();
    com.google.javascript.jscomp.SourceFile.Generator var10 = null;
    com.google.javascript.jscomp.SourceFile var11 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", var10);
    com.google.javascript.jscomp.JsAst var12 = new com.google.javascript.jscomp.JsAst(var11);
    java.lang.RuntimeException var13 = com.google.javascript.rhino.ScriptRuntime.notFunctionError((java.lang.Object)var8, (java.lang.Object)var11);
    java.lang.Object var14 = null;
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var15 = var8.getDirectedGraphNode(var14);
    com.google.javascript.jscomp.graph.SubGraph var16 = var8.newSubGraph();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.Node.newString("", (-1), 10);
    com.google.javascript.rhino.Node var25 = var20.clonePropsFrom(var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.setJSType(var26);
    var24.setOptionalArg(true);
    int var30 = var24.getLineno();
    boolean var31 = var24.isLocalResultCall();
    boolean var32 = var24.isQuotedString();
    var24.setOptionalArg(true);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var35 = var8.createDirectedGraphNode((java.lang.Object)var24);
    java.util.List var36 = var5.getNeighborNodes(var35);
    java.util.List var37 = var0.getNeighborNodes(var35);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.deps.SortedDependencies var38 = new com.google.javascript.jscomp.deps.SortedDependencies(var37);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test433() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test433"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.EcmaError var4 = com.google.javascript.rhino.ScriptRuntime.typeError3("com.google.javascript.rhino.EcmaError: TypeError: hi! is not a function, it is com.google.javascript.jscomp.graph.LinkedDirectedGraph.", "", "goog.global", "");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test434() {}
//   public void test434() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test434"); }
// 
// 
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     var3.setType(10);
//     boolean var6 = var3.isLocalResultCall();
//     java.lang.Iterable var7 = var3.siblings();
//     int var8 = var3.getLineno();
//     java.util.Collection var9 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var3);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     int var15 = var14.getType();
//     int var16 = var14.getChildCount();
//     com.google.javascript.rhino.Node var17 = new com.google.javascript.rhino.Node((-1), var14);
//     int var19 = var17.getIntProp(10);
//     com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var28 = var23.clonePropsFrom(var27);
//     com.google.javascript.rhino.jstype.JSType var29 = null;
//     var27.setJSType(var29);
//     var27.setOptionalArg(true);
//     int var33 = var27.getLineno();
//     com.google.javascript.rhino.jstype.JSType var34 = var27.getJSType();
//     var27.addSuppression("");
//     var3.replaceChild(var17, var27);
// 
//   }

  public void test435() {}
//   public void test435() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test435"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, "hi!", false);
//     com.google.javascript.jscomp.JSModule var4 = null;
//     var3.setModule(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var7 = var6.getTopScope();
//     var6.disableThreads();
//     var6.disableThreads();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     boolean var11 = var6.acceptConstKeyword();
//     com.google.javascript.jscomp.LightweightMessageFormatter var12 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var6);
//     com.google.javascript.jscomp.CompilerInput var14 = var6.getInput("");
// 
//   }

  public void test436() {}
//   public void test436() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test436"); }
// 
// 
//     java.io.InputStream var1 = null;
//     com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromInputStream("EOF ", var1);
// 
//   }

  public void test437() {}
//   public void test437() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test437"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.Collection var1 = var0.getNodes();
//     var0.pushEdgeAnnotations();
//     var0.popEdgeAnnotations();
//     var0.popNodeAnnotations();
// 
//   }

  public void test438() {}
//   public void test438() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test438"); }
// 
// 
//     java.nio.charset.Charset var1 = null;
//     com.google.javascript.jscomp.JSSourceFile var2 = com.google.javascript.jscomp.JSSourceFile.fromFile("goog.exportProperty", var1);
//     com.google.javascript.jscomp.JsAst var3 = new com.google.javascript.jscomp.JsAst((com.google.javascript.jscomp.SourceFile)var2);
//     com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var2);
//     java.util.Collection var5 = var4.getProvides();
// 
//   }

  public void test439() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test439"); }


    com.google.javascript.rhino.Node var3 = null;
    com.google.javascript.jscomp.CheckLevel var5 = null;
    com.google.javascript.jscomp.DiagnosticType var7 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var5, "hi!");
    java.lang.String[] var9 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
    com.google.javascript.jscomp.JSError var10 = com.google.javascript.jscomp.JSError.make("", var3, var7, var9);
    java.lang.RuntimeException var12 = com.google.javascript.rhino.ScriptRuntime.undefWriteError((java.lang.Object)(short)0, (java.lang.Object)var7, (java.lang.Object)40);
    com.google.javascript.jscomp.DiagnosticType[] var13 = new com.google.javascript.jscomp.DiagnosticType[] { var7};
    com.google.javascript.jscomp.DiagnosticGroup var14 = new com.google.javascript.jscomp.DiagnosticGroup(var13);
    com.google.javascript.jscomp.DiagnosticGroup[] var15 = new com.google.javascript.jscomp.DiagnosticGroup[] { var14};
    com.google.javascript.jscomp.DiagnosticGroup var16 = new com.google.javascript.jscomp.DiagnosticGroup(var15);
    com.google.javascript.jscomp.DiagnosticGroup var17 = new com.google.javascript.jscomp.DiagnosticGroup(var15);
    com.google.javascript.jscomp.DiagnosticGroup var18 = new com.google.javascript.jscomp.DiagnosticGroup("com.google.javascript.rhino.EcmaError: : hi!", var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test440() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test440"); }


    java.lang.String var2 = com.google.javascript.rhino.ScriptRuntime.numberToString(100.0d, 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "10201"+ "'", var2.equals("10201"));

  }

  public void test441() {}
//   public void test441() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest1.test441"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     com.google.javascript.jscomp.Scope var1 = var0.getTopScope();
//     var0.disableThreads();
//     var0.disableThreads();
//     com.google.javascript.jscomp.MessageFormatter var4 = null;
//     java.util.logging.Logger var5 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var6 = new com.google.javascript.jscomp.LoggerErrorManager(var4, var5);
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     com.google.javascript.rhino.Node var9 = null;
//     com.google.javascript.jscomp.CheckLevel var11 = null;
//     com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var11, "hi!");
//     java.lang.String[] var15 = new java.lang.String[] { "com.google.javascript.rhino.EcmaError: : hi!"};
//     com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("", var9, var13, var15);
//     var6.report(var7, var16);
//     var0.setErrorManager((com.google.javascript.jscomp.ErrorManager)var6);
//     var0.reportCodeChange();
//     com.google.javascript.jscomp.SourceMap var20 = var0.getSourceMap();
//     com.google.javascript.jscomp.Compiler.CodeBuilder var21 = null;
//     com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var31 = var26.clonePropsFrom(var30);
//     var31.putProp((-1), (java.lang.Object)10.0d);
//     com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.Node.newString("", (-1), 10);
//     com.google.javascript.rhino.Node var43 = var38.clonePropsFrom(var42);
//     com.google.javascript.rhino.Node var44 = var31.copyInformationFrom(var43);
//     boolean var45 = var43.hasOneChild();
//     var0.toSource(var21, 40, var43);
// 
//   }

  public void test442() throws T