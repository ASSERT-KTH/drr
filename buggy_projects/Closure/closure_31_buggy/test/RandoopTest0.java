
import junit.framework.*;

public class RandoopTest0 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test1"); }


    com.google.javascript.jscomp.AnonymousFunctionNamingPolicy[] var0 = com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.values();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test2() {}
//   public void test2() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test2"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.returnNode(var0);
// 
//   }

  public void test3() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test3"); }


    com.google.javascript.rhino.Node var0 = null;
    com.google.javascript.rhino.jstype.StaticSourceFile var1 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test4() {}
//   public void test4() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test4"); }
// 
// 
//     java.util.Collection var0 = null;
//     com.google.javascript.jscomp.JSModule[] var1 = com.google.javascript.jscomp.JSModule.sortJsModules(var0);
// 
//   }

  public void test5() {}
//   public void test5() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test5"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = null;
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.label(var0, var1);
// 
//   }

  public void test6() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test6"); }


    com.google.javascript.rhino.Node var0 = null;
    java.lang.String var1 = com.google.javascript.jscomp.NodeUtil.getSourceName(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test7() {}
//   public void test7() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test7"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticType var0 = null;
//     com.google.javascript.jscomp.DiagnosticGroup var1 = com.google.javascript.jscomp.DiagnosticGroup.forType(var0);
// 
//   }

  public void test8() {}
//   public void test8() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test8"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.var(var0);
// 
//   }

  public void test9() {}
//   public void test9() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test9"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node[] var1 = new com.google.javascript.rhino.Node[] { var0};
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.arraylit(var1);
// 
//   }

  public void test10() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test10"); }


    java.lang.String var1 = com.google.javascript.rhino.ScriptRuntime.escapeString("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));

  }

  public void test11() {}
//   public void test11() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test11"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = null;
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.catchNode(var0, var1);
// 
//   }

  public void test12() {}
//   public void test12() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test12"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setSourceMapOutputPath("hi!");
//     var0.setIdeMode(false);
//     com.google.javascript.jscomp.DependencyOptions var5 = null;
//     var0.setDependencyOptions(var5);
// 
//   }

  public void test13() {}
//   public void test13() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test13"); }
// 
// 
//     com.google.javascript.rhino.JSTypeExpression var0 = null;
//     com.google.javascript.rhino.JSTypeExpression var1 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var0);
// 
//   }

  public void test14() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test14"); }


    com.google.javascript.jscomp.VariableRenamingPolicy[] var0 = com.google.javascript.jscomp.VariableRenamingPolicy.values();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test15() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test15"); }


    int var1 = com.google.javascript.jscomp.NodeUtil.getInverseOperator(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));

  }

  public void test16() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test16"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromCode("", "", "");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test17() {}
//   public void test17() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test17"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setCrossModuleCodeMotion(false);
//     com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var3 = null;
//     var0.setAnonymousFunctionNaming(var3);
//     var0.setExtractPrototypeMemberDeclarations(true);
//     com.google.javascript.jscomp.CompilerOptions.Reach var7 = null;
//     var0.setRemoveUnusedVariables(var7);
// 
//   }

  public void test18() {}
//   public void test18() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test18"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = null;
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.sheq(var0, var1);
// 
//   }

  public void test19() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test19"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromCode("", "");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test20() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test20"); }


    com.google.javascript.jscomp.CompilationLevel[] var0 = com.google.javascript.jscomp.CompilationLevel.values();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test21() {}
//   public void test21() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test21"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = null;
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.doNode(var0, var1);
// 
//   }

  public void test22() {}
//   public void test22() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test22"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.regexp(var0);
// 
//   }

  public void test23() {}
//   public void test23() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test23"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setCrossModuleCodeMotion(false);
//     com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var3 = null;
//     var0.setAnonymousFunctionNaming(var3);
//     var0.setExtractPrototypeMemberDeclarations(true);
//     com.google.javascript.jscomp.CompilerOptions.Reach var7 = null;
//     var0.setInlineVariables(var7);
// 
//   }

  public void test24() {}
//   public void test24() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test24"); }
// 
// 
//     com.google.javascript.rhino.Node[] var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.paramList(var0);
// 
//   }

  public void test25() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test25"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.defaultCase(var1);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test26() {}
//   public void test26() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test26"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticType var0 = null;
//     java.lang.String[] var2 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var3 = com.google.javascript.jscomp.JSError.make(var0, var2);
// 
//   }

  public void test27() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test27"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.VariableRenamingPolicy var1 = com.google.javascript.jscomp.VariableRenamingPolicy.valueOf("hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test28() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test28"); }


    com.google.javascript.rhino.jstype.StaticSourceFile var0 = null;
    com.google.javascript.jscomp.parsing.Config var2 = null;
    com.google.javascript.rhino.head.ErrorReporter var3 = null;
    java.util.logging.Logger var4 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.ParserRunner.parse(var0, "", var2, var3, var4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test29() {}
//   public void test29() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test29"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var0 = null;
//     com.google.javascript.jscomp.CompilerInput var1 = new com.google.javascript.jscomp.CompilerInput(var0);
// 
//   }

  public void test30() {}
//   public void test30() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test30"); }
// 
// 
//     java.io.File var0 = null;
//     com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile(var0);
// 
//   }

  public void test31() {}
//   public void test31() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test31"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var0 = null;
//     com.google.javascript.jscomp.JsAst var1 = new com.google.javascript.jscomp.JsAst(var0);
// 
//   }

  public void test32() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test32"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    boolean var7 = var6.isDo();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var12 = var9.useSourceInfoIfMissingFrom(var11);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.eq(var11, var14);
    int var16 = var6.getIndexOfChild(var14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var4.addChildToFront(var14);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));

  }

  public void test33() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test33"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    boolean var2 = var1.isDo();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = var4.useSourceInfoIfMissingFrom(var6);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.eq(var6, var9);
    int var11 = var1.getIndexOfChild(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var16 = var13.useSourceInfoIfMissingFrom(var15);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.eq(var15, var18);
    com.google.javascript.rhino.Node var20 = var15.cloneNode();
    boolean var21 = var20.isOr();
    com.google.javascript.rhino.jstype.StaticSourceFile var22 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var20);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.comma(var9, var20);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test34() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test34"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var12 = var9.useSourceInfoIfMissingFrom(var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.tryFinally(var7, var11);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test35() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test35"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    com.google.javascript.rhino.Node var8 = var3.cloneNode();
    boolean var9 = var8.isOr();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.block();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var15 = var12.useSourceInfoIfMissingFrom(var14);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var18 = var15.copyInformationFrom(var17);
    boolean var19 = var10.isEquivalentToTyped(var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.comma(var8, var10);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test36() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test36"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    com.google.javascript.rhino.Node[] var8 = new com.google.javascript.rhino.Node[] { var3};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.objectlit(var8);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test37() {}
//   public void test37() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test37"); }
// 
// 
//     com.google.javascript.jscomp.CheckLevel var3 = null;
//     com.google.javascript.jscomp.DiagnosticType var4 = null;
//     java.lang.String[] var6 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var7 = com.google.javascript.jscomp.JSError.make("", 10, 100, var3, var4, var6);
// 
//   }

  public void test38() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test38"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.number(10.0d);
    boolean var3 = var2.isDo();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var8 = var5.useSourceInfoIfMissingFrom(var7);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.eq(var7, var10);
    int var12 = var2.getIndexOfChild(var10);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var17 = var14.useSourceInfoIfMissingFrom(var16);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var20 = var17.copyInformationFrom(var19);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var25 = var22.useSourceInfoIfMissingFrom(var24);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.exprResult(var25);
    boolean var27 = var25.isOptionalArg();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var28 = new com.google.javascript.rhino.Node(100, var2, var17, var25);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test39() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test39"); }


    boolean var1 = com.google.javascript.jscomp.NodeUtil.isValidQualifiedName("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test40() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test40"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.PropertyRenamingPolicy var1 = com.google.javascript.jscomp.PropertyRenamingPolicy.valueOf("");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test41() {}
//   public void test41() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test41"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setCrossModuleCodeMotion(false);
//     com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var3 = null;
//     var0.setAnonymousFunctionNaming(var3);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var5 = var0.getTweakProcessing();
//     java.util.List var6 = null;
//     var0.setManageClosureDependencies(var6);
// 
//   }

  public void test42() {}
//   public void test42() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test42"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var0 = null;
//     com.google.javascript.jscomp.CompilerInput var2 = new com.google.javascript.jscomp.CompilerInput(var0, true);
// 
//   }

  public void test43() {}
//   public void test43() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test43"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticType var0 = null;
//     java.lang.String[] var2 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var3 = com.google.javascript.jscomp.JSError.make(var0, var2);
// 
//   }

  public void test44() {}
//   public void test44() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test44"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.jscomp.type.ReverseAbstractInterpreter var1 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = null;
//     com.google.javascript.jscomp.CheckLevel var3 = null;
//     com.google.javascript.jscomp.CheckLevel var4 = null;
//     com.google.javascript.jscomp.TypeCheck var5 = new com.google.javascript.jscomp.TypeCheck(var0, var1, var2, var3, var4);
// 
//   }

  public void test45() {}
//   public void test45() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test45"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var0 = null;
//     com.google.javascript.jscomp.JSModule[] var1 = new com.google.javascript.jscomp.JSModule[] { var0};
//     com.google.javascript.jscomp.JSModuleGraph var2 = new com.google.javascript.jscomp.JSModuleGraph(var1);
// 
//   }

  public void test46() {}
//   public void test46() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test46"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = null;
//     com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(var0, "hi!");
// 
//   }

  public void test47() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test47"); }


    java.lang.String var1 = com.google.javascript.rhino.ScriptRuntime.escapeString("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "hi!"+ "'", var1.equals("hi!"));

  }

  public void test48() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test48"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = var4.copyInformationFrom(var6);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.number(10.0d);
    boolean var10 = var9.isLabel();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.block();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var4.replaceChildAfter(var9, var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test49() {}
//   public void test49() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test49"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.Compiler.CodeBuilder var2 = null;
//     com.google.javascript.rhino.Node var4 = null;
//     var1.toSource(var2, 0, var4);
// 
//   }

  public void test50() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test50"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var5 = var2.useSourceInfoIfMissingFrom(var4);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.eq(var4, var7);
    com.google.javascript.rhino.Node var9 = var4.cloneNode();
    boolean var10 = var9.isOr();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var15 = var12.useSourceInfoIfMissingFrom(var14);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.eq(var14, var17);
    com.google.javascript.rhino.Node var19 = var14.cloneNode();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.or(var9, var19);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var25 = var22.useSourceInfoIfMissingFrom(var24);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.eq(var24, var27);
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var33 = var30.useSourceInfoIfMissingFrom(var32);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.eq(var32, var35);
    com.google.javascript.rhino.Node var37 = var32.cloneNode();
    boolean var38 = var37.isOr();
    com.google.javascript.rhino.jstype.StaticSourceFile var39 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var37);
    boolean var40 = var37.isDec();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var43 = new com.google.javascript.rhino.Node(1, var9, var28, var37, (-1), 0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test51() {}
//   public void test51() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test51"); }
// 
// 
//     java.io.Reader var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromReader("hi!", var1);
// 
//   }

  public void test52() {}
//   public void test52() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test52"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.PassConfig var2 = null;
//     var1.setPassConfig(var2);
// 
//   }

  public void test53() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test53"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = var4.copyInformationFrom(var6);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.number(10.0d);
    boolean var10 = var9.isLabel();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var15 = var12.useSourceInfoIfMissingFrom(var14);
    boolean var16 = var14.isFalse();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.sheq(var9, var14);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var22 = var19.useSourceInfoIfMissingFrom(var21);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.eq(var21, var24);
    com.google.javascript.rhino.Node var26 = var21.cloneNode();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.function(var4, var9, var21);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test54() {}
//   public void test54() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test54"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.JSError[] var2 = var1.getErrors();
// 
//   }

  public void test55() {}
//   public void test55() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test55"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     int var3 = var1.getErrorCount();
// 
//   }

  public void test56() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test56"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    com.google.javascript.rhino.Node var8 = var3.cloneNode();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.not(var3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test57() {}
//   public void test57() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test57"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.SourceFile var2 = null;
//     com.google.javascript.rhino.Node var3 = var1.parse(var2);
// 
//   }

  public void test58() {}
//   public void test58() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test58"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.JSModule var2 = null;
//     java.lang.String var3 = var1.toSource(var2);
// 
//   }

  public void test59() {}
//   public void test59() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test59"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setCrossModuleCodeMotion(false);
//     var0.setLabelRenaming(true);
//     var0.setGenerateExports(false);
//     com.google.javascript.jscomp.CompilerOptions.Reach var7 = null;
//     var0.setInlineFunctions(var7);
// 
//   }

  public void test60() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test60"); }


    long var1 = com.google.javascript.rhino.ScriptRuntime.testUint32String("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1L));

  }

  public void test61() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test61"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = var4.copyInformationFrom(var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var9 = var7.getExistingIntProp(10);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test62() {}
//   public void test62() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test62"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setCrossModuleCodeMotion(false);
//     com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var3 = null;
//     var0.setAnonymousFunctionNaming(var3);
//     var0.setExtractPrototypeMemberDeclarations(true);
//     var0.setRemoveTryCatchFinally(true);
//     var0.setFoldConstants(false);
//     com.google.javascript.jscomp.ErrorHandler var11 = null;
//     var0.setErrorHandler(var11);
//     java.util.List var14 = null;
//     var0.setReplaceStringsConfiguration("", var14);
// 
//   }

  public void test63() {}
//   public void test63() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test63"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     var1.processDefines();
// 
//   }

  public void test64() {}
//   public void test64() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test64"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
//     boolean var3 = var1.isExported("NUMBER 10.0\n");
// 
//   }

  public void test65() {}
//   public void test65() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test65"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.block();
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var5 = var2.useSourceInfoIfMissingFrom(var4);
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var8 = var5.copyInformationFrom(var7);
//     boolean var9 = var0.isEquivalentToTyped(var8);
//     com.google.javascript.rhino.Node var10 = null;
//     var0.removeChild(var10);
// 
//   }

  public void test66() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test66"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.block();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var5 = var2.useSourceInfoIfMissingFrom(var4);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var8 = var5.copyInformationFrom(var7);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = var10.useSourceInfoIfMissingFrom(var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.ifNode(var0, var7, var13);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test67() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test67"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var1 = com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.valueOf("");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test68() {}
//   public void test68() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test68"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     com.google.javascript.jscomp.SourceMap var3 = var1.getSourceMap();
//     com.google.javascript.jscomp.JSSourceFile var4 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var5 = new com.google.javascript.jscomp.JSSourceFile[] { var4};
//     com.google.javascript.jscomp.JSModule var6 = null;
//     com.google.javascript.jscomp.JSModule[] var7 = new com.google.javascript.jscomp.JSModule[] { var6};
//     com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
//     var8.setSourceMapOutputPath("hi!");
//     var8.setIdeMode(false);
//     java.util.Set var13 = null;
//     var8.setReplaceStringsReservedStrings(var13);
//     com.google.javascript.jscomp.Result var15 = var1.compile(var5, var7, var8);
// 
//   }

  public void test69() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test69"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    com.google.javascript.rhino.Node var8 = var3.cloneNode();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = var10.useSourceInfoIfMissingFrom(var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.caseNode(var3, var12);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test70() {}
//   public void test70() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test70"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = null;
//     com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(var0, "");
// 
//   }

  public void test71() {}
//   public void test71() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test71"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.rhino.jstype.JSType[] var6 = new com.google.javascript.rhino.jstype.JSType[] { var5};
//     com.google.javascript.rhino.jstype.FunctionType var7 = var2.createConstructorType(var3, true, var6);
// 
//   }

  public void test72() {}
//   public void test72() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test72"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
//     com.google.javascript.rhino.jstype.JSType var4 = null;
//     var2.registerPropertyOnType("", var4);
// 
//   }

  public void test73() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test73"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    com.google.javascript.rhino.Node var8 = var3.cloneNode();
    boolean var9 = var8.isOr();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = var11.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.eq(var13, var16);
    com.google.javascript.rhino.Node var18 = var13.cloneNode();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.or(var8, var18);
    boolean var20 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var19);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var25 = var22.useSourceInfoIfMissingFrom(var24);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.eq(var24, var27);
    var28.setSourceEncodedPosition(100);
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var35 = var32.useSourceInfoIfMissingFrom(var34);
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.eq(var34, var37);
    com.google.javascript.rhino.Node var39 = var34.cloneNode();
    boolean var40 = var39.isOr();
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var45 = var42.useSourceInfoIfMissingFrom(var44);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.eq(var44, var47);
    com.google.javascript.rhino.Node var49 = var44.cloneNode();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.or(var39, var49);
    com.google.javascript.rhino.Node var51 = var28.useSourceInfoFromForTree(var39);
    boolean var52 = var51.isAdd();
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var56 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var57 = var54.useSourceInfoIfMissingFrom(var56);
    boolean var58 = var56.isFromExterns();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var19.replaceChild(var51, var56);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test74() {}
//   public void test74() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test74"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.CompilerInput var3 = var1.newExternInput("NUMBER 10.0\n");
// 
//   }

  public void test75() {}
//   public void test75() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test75"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var3 = var1.getTypeRegistry();
// 
//   }

  public void test76() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test76"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    boolean var2 = var1.isDo();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = var4.useSourceInfoIfMissingFrom(var6);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.eq(var6, var9);
    int var11 = var1.getIndexOfChild(var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.pos(var9);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));

  }

  public void test77() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test77"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    com.google.javascript.rhino.Node var8 = var3.cloneNode();
    boolean var9 = var8.isOr();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = var11.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.eq(var13, var16);
    com.google.javascript.rhino.Node var18 = var13.cloneNode();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.or(var8, var18);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = var21.useSourceInfoIfMissingFrom(var23);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var27 = var24.copyInformationFrom(var26);
    com.google.javascript.rhino.Node var28 = var8.srcrefTree(var26);
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.empty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.caseNode(var26, var29);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test78() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test78"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    boolean var5 = var3.isOr();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var10 = var7.useSourceInfoIfMissingFrom(var9);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.exprResult(var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.regexp(var3, var11);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test79() {}
//   public void test79() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test79"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.JSSourceFile var2 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var3 = new com.google.javascript.jscomp.JSSourceFile[] { var2};
//     com.google.javascript.jscomp.JSModule var4 = null;
//     com.google.javascript.jscomp.JSModule[] var5 = new com.google.javascript.jscomp.JSModule[] { var4};
//     com.google.javascript.jscomp.CompilerOptions var6 = new com.google.javascript.jscomp.CompilerOptions();
//     var6.setCrossModuleCodeMotion(false);
//     com.google.javascript.jscomp.Result var9 = var1.compile(var3, var5, var6);
// 
//   }

  public void test80() {}
//   public void test80() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test80"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
//     boolean var5 = var3.isFromExterns();
//     java.lang.String var6 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var3);
// 
//   }

  public void test81() {}
//   public void test81() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test81"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
//     com.google.javascript.rhino.jstype.ObjectType var3 = var2.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4, true);
//     com.google.javascript.rhino.jstype.ObjectType var7 = var6.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var8 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8, true);
//     com.google.javascript.rhino.jstype.ObjectType var11 = var10.createAnonymousObjectType();
//     boolean var12 = var11.isUnknownType();
//     boolean var13 = var7.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var11);
//     java.util.List var14 = null;
//     com.google.javascript.rhino.jstype.FunctionType var15 = var2.createFunctionType((com.google.javascript.rhino.jstype.JSType)var7, var14);
// 
//   }

  public void test82() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test82"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test83() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test83"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
    boolean var2 = var1.recordOverride();
    boolean var4 = var1.recordMeaning("NUMBER 10.0");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test84() {}
//   public void test84() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test84"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     com.google.javascript.jscomp.SourceMap var3 = var1.getSourceMap();
//     com.google.javascript.jscomp.Region var6 = var1.getSourceRegion("hi!", 1);
// 
//   }

  public void test85() {}
//   public void test85() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test85"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     com.google.javascript.jscomp.SourceMap var3 = var1.getSourceMap();
//     com.google.javascript.jscomp.PassConfig var4 = null;
//     var1.setPassConfig(var4);
// 
//   }

  public void test86() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test86"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setSourceMapOutputPath("hi!");
    var0.setReplaceStringsPlaceholderToken("hi!");
    var0.setDeadAssignmentElimination(false);

  }

  public void test87() {}
//   public void test87() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test87"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     boolean var5 = var2.canPropertyBeDefined(var3, "hi!");
//     boolean var7 = var2.hasNamespace("");
//     com.google.javascript.rhino.jstype.JSTypeNative var8 = null;
//     com.google.javascript.rhino.jstype.JSType var9 = var2.getNativeType(var8);
// 
//   }

  public void test88() {}
//   public void test88() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test88"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     java.util.List var3 = null;
//     java.util.List var4 = null;
//     com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
//     var5.setSourceMapOutputPath("hi!");
//     var5.setIdeMode(false);
//     com.google.javascript.jscomp.CompilerOptions.LanguageMode var10 = var5.getLanguageIn();
//     var5.setClosurePass(false);
//     var5.setRenamePrefix("hi!");
//     com.google.javascript.jscomp.Result var15 = var1.<com.google.javascript.jscomp.SourceFile,com.google.javascript.jscomp.SourceFile>compile(var3, var4, var5);
// 
//   }

  public void test89() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test89"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var5 = var2.useSourceInfoIfMissingFrom(var4);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.eq(var4, var7);
    com.google.javascript.rhino.Node var9 = var4.cloneNode();
    boolean var10 = var9.isOr();
    com.google.javascript.rhino.jstype.StaticSourceFile var11 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var9);
    boolean var12 = var9.isDec();
    var9.setVarArgs(true);
    com.google.javascript.rhino.Node var17 = new com.google.javascript.rhino.Node(0, var9, (-1), (-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.NodeUtil.getRootOfQualifiedName(var17);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test90() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test90"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("NUMBER 10.0");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.NodeUtil.getRootOfQualifiedName(var1);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test91() {}
//   public void test91() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test91"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     java.io.PrintStream var3 = null;
//     com.google.javascript.jscomp.PrintStreamErrorManager var4 = new com.google.javascript.jscomp.PrintStreamErrorManager((com.google.javascript.jscomp.MessageFormatter)var2, var3);
//     com.google.javascript.jscomp.CheckLevel var8 = null;
//     com.google.javascript.jscomp.DiagnosticType var11 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
//     com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
//     java.lang.String[] var19 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var20 = com.google.javascript.jscomp.JSError.make("", 1, 39, var17, var19);
//     com.google.javascript.jscomp.JSError var21 = com.google.javascript.jscomp.JSError.make("hi!", 100, 100, var8, var11, var19);
//     java.lang.String var22 = var2.formatError(var21);
// 
//   }

  public void test92() {}
//   public void test92() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test92"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     com.google.javascript.jscomp.JSSourceFile[] var3 = null;
//     com.google.javascript.jscomp.JSSourceFile var4 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var5 = new com.google.javascript.jscomp.JSSourceFile[] { var4};
//     com.google.javascript.jscomp.CompilerOptions var6 = new com.google.javascript.jscomp.CompilerOptions();
//     var6.setCrossModuleCodeMotion(false);
//     var1.init(var3, var5, var6);
// 
//   }

  public void test93() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test93"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.empty();
    com.google.javascript.jscomp.DiagnosticType var7 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
    java.lang.String[] var9 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var10 = com.google.javascript.jscomp.JSError.make("", 1, 39, var7, var9);
    com.google.javascript.jscomp.CheckLevel var14 = null;
    com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
    com.google.javascript.jscomp.DiagnosticType var23 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
    java.lang.String[] var25 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var26 = com.google.javascript.jscomp.JSError.make("", 1, 39, var23, var25);
    com.google.javascript.jscomp.JSError var27 = com.google.javascript.jscomp.JSError.make("hi!", 100, 100, var14, var17, var25);
    com.google.javascript.jscomp.JSError var28 = com.google.javascript.jscomp.JSError.make("NUMBER 10.0\n", var1, var7, var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setDouble((-1.0d));
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test94() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test94"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    var7.setSourceEncodedPosition(100);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = var11.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.eq(var13, var16);
    com.google.javascript.rhino.Node var18 = var13.cloneNode();
    boolean var19 = var18.isOr();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = var21.useSourceInfoIfMissingFrom(var23);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.eq(var23, var26);
    com.google.javascript.rhino.Node var28 = var23.cloneNode();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.or(var18, var28);
    com.google.javascript.rhino.Node var30 = var7.useSourceInfoFromForTree(var18);
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var35 = var32.useSourceInfoIfMissingFrom(var34);
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.eq(var34, var37);
    var38.setSourceEncodedPosition(100);
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var45 = var42.useSourceInfoIfMissingFrom(var44);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.eq(var44, var47);
    com.google.javascript.rhino.Node var49 = var44.cloneNode();
    boolean var50 = var49.isOr();
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var55 = var52.useSourceInfoIfMissingFrom(var54);
    com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.eq(var54, var57);
    com.google.javascript.rhino.Node var59 = var54.cloneNode();
    com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.or(var49, var59);
    com.google.javascript.rhino.Node var61 = var38.useSourceInfoFromForTree(var49);
    boolean var62 = var61.isScript();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.and(var18, var61);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test95() {}
//   public void test95() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test95"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setCrossModuleCodeMotion(false);
//     com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var3 = null;
//     var0.setAnonymousFunctionNaming(var3);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var5 = var0.getTweakProcessing();
//     com.google.javascript.jscomp.VariableRenamingPolicy var6 = null;
//     com.google.javascript.jscomp.PropertyRenamingPolicy var7 = null;
//     var0.setRenamingPolicy(var6, var7);
//     var0.setLineBreak(false);
//     com.google.javascript.jscomp.CompilerOptions.Reach var11 = null;
//     var0.setInlineVariables(var11);
// 
//   }

  public void test96() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test96"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    boolean var2 = var1.isDo();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.continueNode(var1);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test97() {}
//   public void test97() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test97"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
//     com.google.javascript.rhino.jstype.ObjectType var3 = var2.createAnonymousObjectType();
//     com.google.javascript.rhino.jstype.JSType[] var4 = null;
//     com.google.javascript.rhino.jstype.JSType var5 = var2.createUnionType(var4);
// 
//   }

  public void test98() {}
//   public void test98() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test98"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     com.google.javascript.jscomp.type.ReverseAbstractInterpreter var3 = var1.getReverseAbstractInterpreter();
// 
//   }

  public void test99() {}
//   public void test99() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test99"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     int var5 = var3.getLineOffset((-1));
// 
//   }

  public void test100() {}
//   public void test100() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test100"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     boolean var5 = var2.canPropertyBeDefined(var3, "hi!");
//     java.lang.Iterable var7 = var2.getEachReferenceTypeWithProperty("");
//     com.google.javascript.rhino.jstype.JSType[] var8 = null;
//     com.google.javascript.rhino.Node var9 = var2.createParameters(var8);
// 
//   }

  public void test101() {}
//   public void test101() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test101"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setTweakToNumberLiteral("", 1);
//     java.util.Set var4 = null;
//     var0.setStripTypePrefixes(var4);
//     com.google.javascript.jscomp.DiagnosticGroup var6 = null;
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var8 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var6, var7);
//     var0.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var8);
//     com.google.javascript.jscomp.WarningsGuard[] var10 = new com.google.javascript.jscomp.WarningsGuard[] { var8};
//     com.google.javascript.jscomp.ComposeWarningsGuard var11 = new com.google.javascript.jscomp.ComposeWarningsGuard(var10);
//     com.google.javascript.jscomp.CheckLevel var15 = null;
//     com.google.javascript.jscomp.DiagnosticType var18 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
//     com.google.javascript.jscomp.DiagnosticType var24 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
//     java.lang.String[] var26 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var27 = com.google.javascript.jscomp.JSError.make("", 1, 39, var24, var26);
//     com.google.javascript.jscomp.JSError var28 = com.google.javascript.jscomp.JSError.make("hi!", 100, 100, var15, var18, var26);
//     com.google.javascript.jscomp.CheckLevel var29 = var11.level(var28);
// 
//   }

  public void test102() {}
//   public void test102() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test102"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
//     com.google.javascript.rhino.jstype.ObjectType var3 = var2.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4, true);
//     com.google.javascript.rhino.jstype.ObjectType var7 = var6.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var8 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8, true);
//     com.google.javascript.rhino.jstype.ObjectType var11 = var10.createAnonymousObjectType();
//     boolean var12 = var11.isUnknownType();
//     boolean var13 = var7.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var11);
//     com.google.javascript.rhino.jstype.JSType var14 = var2.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType)var7);
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     var2.registerPropertyOnType("{723551193}", var16);
// 
//   }

  public void test103() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test103"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.block();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var5 = var2.useSourceInfoIfMissingFrom(var4);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.eq(var4, var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.getprop(var0, var7);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test104() {}
//   public void test104() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test104"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = null;
//     com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var3 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var1, var2);
//     boolean var5 = var1.isConstantKey("hi!");
// 
//   }

  public void test105() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test105"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.CompilationLevel var1 = com.google.javascript.jscomp.CompilationLevel.valueOf("NUMBER 10.0\n");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test106() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test106"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    com.google.javascript.rhino.Node var8 = var3.cloneNode();
    boolean var9 = var3.isDelProp();
    boolean var10 = var3.isIf();
    java.lang.String var11 = var3.toString();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.nullNode();
    var3.addChildToBack(var12);
    com.google.javascript.rhino.Node[] var14 = new com.google.javascript.rhino.Node[] { var12};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.script(var14);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "NUMBER 10.0"+ "'", var11.equals("NUMBER 10.0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test107() {}
//   public void test107() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test107"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     java.lang.String var4 = var3.toString();
// 
//   }

  public void test108() {}
//   public void test108() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test108"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
//     var2.setCrossModuleCodeMotion(false);
//     var2.setLabelRenaming(true);
//     java.util.Set var7 = null;
//     var2.setStripTypePrefixes(var7);
//     var1.initOptions(var2);
//     java.lang.String var12 = var1.getSourceLine("NUMBER 10.0", 100);
// 
//   }

  public void test109() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test109"); }


    com.google.javascript.jscomp.SourceAst var0 = null;
    com.google.javascript.rhino.InputId var1 = null;
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
    com.google.javascript.jscomp.SourceAst var4 = var3.getAst();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var5 = var3.getPathRelativeToClosureBase();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test110() {}
//   public void test110() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test110"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setTweakToNumberLiteral("", 1);
//     java.util.Set var4 = null;
//     var0.setStripTypePrefixes(var4);
//     com.google.javascript.jscomp.DiagnosticGroup var6 = null;
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var8 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var6, var7);
//     var0.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var8);
//     com.google.javascript.jscomp.WarningsGuard[] var10 = new com.google.javascript.jscomp.WarningsGuard[] { var8};
//     com.google.javascript.jscomp.ComposeWarningsGuard var11 = new com.google.javascript.jscomp.ComposeWarningsGuard(var10);
//     com.google.javascript.jscomp.WarningsGuard[] var12 = new com.google.javascript.jscomp.WarningsGuard[] { var11};
//     com.google.javascript.jscomp.ComposeWarningsGuard var13 = new com.google.javascript.jscomp.ComposeWarningsGuard(var12);
//     com.google.javascript.jscomp.CheckLevel var17 = null;
//     com.google.javascript.jscomp.DiagnosticType var20 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
//     com.google.javascript.jscomp.DiagnosticType var26 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
//     java.lang.String[] var28 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("", 1, 39, var26, var28);
//     com.google.javascript.jscomp.JSError var30 = com.google.javascript.jscomp.JSError.make("hi!", 100, 100, var17, var20, var28);
//     int var31 = var30.getNodeLength();
//     com.google.javascript.jscomp.CheckLevel var32 = var13.level(var30);
// 
//   }

  public void test111() {}
//   public void test111() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test111"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.SourceMap var2 = var1.getSourceMap();
//     var1.check();
// 
//   }

  public void test112() {}
//   public void test112() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test112"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     boolean var5 = var2.canPropertyBeDefined(var3, "hi!");
//     boolean var7 = var2.hasNamespace("");
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var13 = var10.useSourceInfoIfMissingFrom(var12);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.exprResult(var13);
//     boolean var15 = var14.isDec();
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var20 = var17.useSourceInfoIfMissingFrom(var19);
//     com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.exprResult(var20);
//     com.google.javascript.rhino.ErrorReporter var22 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22, true);
//     com.google.javascript.rhino.jstype.ObjectType var25 = var24.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var26 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26, true);
//     com.google.javascript.rhino.jstype.ObjectType var29 = var28.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var30 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30, true);
//     com.google.javascript.rhino.jstype.ObjectType var33 = var32.createAnonymousObjectType();
//     boolean var34 = var33.isUnknownType();
//     boolean var35 = var29.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var33);
//     com.google.javascript.rhino.jstype.JSType var36 = var24.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType)var29);
//     boolean var37 = var29.isBooleanValueType();
//     java.lang.String var38 = var29.toDebugHashCodeString();
//     com.google.javascript.rhino.ErrorReporter var39 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var39, true);
//     com.google.javascript.rhino.jstype.ObjectType var42 = var41.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var43 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var43, true);
//     com.google.javascript.rhino.jstype.ObjectType var46 = var45.createAnonymousObjectType();
//     boolean var47 = var46.isUnknownType();
//     boolean var48 = var42.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var46);
//     boolean var49 = var46.isFunctionPrototypeType();
//     com.google.javascript.rhino.jstype.ObjectType var50 = com.google.javascript.rhino.jstype.ObjectType.cast((com.google.javascript.rhino.jstype.JSType)var46);
//     boolean var52 = var50.hasOwnProperty("");
//     boolean var53 = var50.isEnumElementType();
//     com.google.javascript.rhino.jstype.JSType.TypePair var54 = var29.getTypesUnderShallowEquality((com.google.javascript.rhino.jstype.JSType)var50);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       com.google.javascript.rhino.jstype.FunctionType var55 = var2.createConstructorType("", var14, var20, (com.google.javascript.rhino.jstype.JSType)var50);
//       fail("Expected exception of type java.lang.IllegalArgumentException");
//     } catch (java.lang.IllegalArgumentException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var5 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var7 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var15 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var34 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var35 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var37 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var38 + "' != '" + "{1196574095}"+ "'", var38.equals("{1196574095}"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var47 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var48 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var49 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var52 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var53 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var54);
// 
//   }

  public void test113() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test113"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.jstype.ObjectType var3 = var2.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4, true);
    com.google.javascript.rhino.jstype.ObjectType var7 = var6.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8, true);
    com.google.javascript.rhino.jstype.ObjectType var11 = var10.createAnonymousObjectType();
    boolean var12 = var11.isUnknownType();
    boolean var13 = var7.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var11);
    com.google.javascript.rhino.jstype.JSType var14 = var2.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType)var7);
    boolean var15 = var7.isBooleanValueType();
    boolean var16 = var7.matchesNumberContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test114() {}
//   public void test114() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test114"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setTweakToNumberLiteral("", 1);
//     var0.setInlineVariables(false);
//     com.google.javascript.jscomp.CompilerOptions.TracerMode var6 = var0.getTracerMode();
//     var0.setPrintInputDelimiter(false);
//     var0.setCheckMissingGetCssNameBlacklist("");
//     var0.setCollapseObjectLiterals(false);
//     var0.setLooseTypes(true);
//     com.google.javascript.jscomp.CodingConvention var15 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var16 = new com.google.javascript.jscomp.ClosureCodingConvention(var15);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var17 = null;
//     com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var18 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var16, var17);
//     com.google.javascript.jscomp.ClosureCodingConvention var19 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var16);
//     com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var24 = var21.useSourceInfoIfMissingFrom(var23);
//     com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.eq(var23, var26);
//     com.google.javascript.rhino.Node var28 = var23.cloneNode();
//     boolean var29 = var28.isOr();
//     com.google.javascript.rhino.jstype.StaticSourceFile var30 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var28);
//     boolean var31 = var28.isDec();
//     boolean var32 = var28.isFor();
//     boolean var33 = var16.isVarArgsParameter(var28);
//     var0.setCodingConvention((com.google.javascript.jscomp.CodingConvention)var16);
//     boolean var37 = var16.isExported("", true);
// 
//   }

  public void test115() {}
//   public void test115() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test115"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = null;
//     com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var3 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var1, var2);
//     com.google.javascript.jscomp.ClosureCodingConvention var4 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var1);
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var9 = var6.useSourceInfoIfMissingFrom(var8);
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.eq(var8, var11);
//     com.google.javascript.rhino.Node var13 = var8.cloneNode();
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var18 = var15.useSourceInfoIfMissingFrom(var17);
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var23 = var20.useSourceInfoIfMissingFrom(var22);
//     com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.exprResult(var23);
//     java.lang.String var25 = var17.checkTreeEquals(var23);
//     com.google.javascript.rhino.Node var26 = var8.srcref(var17);
//     boolean var27 = var26.isRegExp();
//     com.google.javascript.jscomp.CodingConvention.SubclassRelationship var28 = var1.getClassesDefinedByCall(var26);
// 
//   }

  public void test116() {}
//   public void test116() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test116"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
//     boolean var2 = var1.isDo();
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var7 = var4.useSourceInfoIfMissingFrom(var6);
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.eq(var6, var9);
//     int var11 = var1.getIndexOfChild(var9);
//     com.google.javascript.rhino.Node var12 = null;
//     com.google.javascript.rhino.Node var13 = null;
//     var1.addChildrenAfter(var12, var13);
// 
//   }

  public void test117() {}
//   public void test117() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test117"); }
// 
// 
//     java.util.List var0 = null;
//     com.google.javascript.jscomp.deps.SortedDependencies var1 = new com.google.javascript.jscomp.deps.SortedDependencies(var0);
// 
//   }

  public void test118() {}
//   public void test118() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test118"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
//     var2.setCrossModuleCodeMotion(false);
//     var2.setLabelRenaming(true);
//     java.util.Set var7 = null;
//     var2.setStripTypePrefixes(var7);
//     var1.initOptions(var2);
//     java.nio.charset.Charset var11 = null;
//     com.google.javascript.jscomp.SourceFile var12 = com.google.javascript.jscomp.SourceFile.fromFile("NUMBER 10.0", var11);
//     com.google.javascript.jscomp.Region var14 = var12.getRegion(100);
//     java.lang.String var15 = var12.toString();
//     com.google.javascript.rhino.Node var16 = var1.parse(var12);
//     com.google.javascript.jscomp.JSSourceFile var17 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var18 = new com.google.javascript.jscomp.JSSourceFile[] { var17};
//     com.google.javascript.jscomp.JSSourceFile var19 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var20 = new com.google.javascript.jscomp.JSSourceFile[] { var19};
//     com.google.javascript.jscomp.CompilerOptions var21 = new com.google.javascript.jscomp.CompilerOptions();
//     var21.setSourceMapOutputPath("hi!");
//     var21.setReplaceStringsPlaceholderToken("hi!");
//     var21.setIdeMode(false);
//     var1.init(var18, var20, var21);
// 
//   }

  public void test119() {}
//   public void test119() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test119"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     boolean var5 = var2.canPropertyBeDefined(var3, "hi!");
//     boolean var7 = var2.hasNamespace("");
//     com.google.javascript.rhino.jstype.FunctionBuilder var8 = new com.google.javascript.rhino.jstype.FunctionBuilder(var2);
//     com.google.javascript.rhino.ErrorReporter var9 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var9, true);
//     com.google.javascript.rhino.ErrorReporter var12 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12, true);
//     com.google.javascript.rhino.jstype.ObjectType var15 = var14.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var16 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16, true);
//     com.google.javascript.rhino.jstype.ObjectType var19 = var18.createAnonymousObjectType();
//     boolean var20 = var19.isUnknownType();
//     boolean var21 = var15.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var19);
//     boolean var22 = var19.isFunctionPrototypeType();
//     var19.clearCachedValues();
//     com.google.javascript.rhino.jstype.ObjectType var24 = var19.dereference();
//     com.google.javascript.rhino.jstype.JSType[] var25 = new com.google.javascript.rhino.jstype.JSType[] { var24};
//     com.google.javascript.rhino.jstype.JSType var26 = var11.createUnionType(var25);
//     com.google.javascript.rhino.ErrorReporter var27 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27, true);
//     com.google.javascript.rhino.ErrorReporter var30 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30, true);
//     com.google.javascript.rhino.jstype.ObjectType var33 = var32.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var34 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34, true);
//     com.google.javascript.rhino.jstype.ObjectType var37 = var36.createAnonymousObjectType();
//     boolean var38 = var37.isUnknownType();
//     boolean var39 = var33.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var37);
//     boolean var40 = var37.isFunctionPrototypeType();
//     var37.clearCachedValues();
//     com.google.javascript.rhino.jstype.ObjectType var42 = var37.dereference();
//     com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
//     com.google.javascript.rhino.jstype.JSType var44 = var29.createUnionType(var43);
//     com.google.javascript.rhino.jstype.FunctionType var45 = var2.createFunctionTypeWithVarArgs(var26, var43);
//     com.google.javascript.rhino.jstype.ObjectType var46 = null;
//     com.google.javascript.rhino.ErrorReporter var47 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47, true);
//     com.google.javascript.rhino.jstype.ObjectType var50 = var49.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var51 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51, true);
//     com.google.javascript.rhino.jstype.ObjectType var54 = var53.createAnonymousObjectType();
//     boolean var55 = var54.isUnknownType();
//     boolean var56 = var50.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var54);
//     java.util.List var57 = null;
//     com.google.javascript.rhino.jstype.JSType var58 = var2.createFunctionType(var46, (com.google.javascript.rhino.jstype.JSType)var54, var57);
// 
//   }

  public void test120() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test120"); }


    com.google.javascript.jscomp.ShowByPathWarningsGuard.ShowType var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.ShowByPathWarningsGuard var2 = new com.google.javascript.jscomp.ShowByPathWarningsGuard("", var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test121() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test121"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.empty();
    com.google.javascript.jscomp.DiagnosticType var7 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
    java.lang.String[] var9 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var10 = com.google.javascript.jscomp.JSError.make("", 1, 39, var7, var9);
    com.google.javascript.jscomp.CheckLevel var14 = null;
    com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
    com.google.javascript.jscomp.DiagnosticType var23 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
    java.lang.String[] var25 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var26 = com.google.javascript.jscomp.JSError.make("", 1, 39, var23, var25);
    com.google.javascript.jscomp.JSError var27 = com.google.javascript.jscomp.JSError.make("hi!", 100, 100, var14, var17, var25);
    com.google.javascript.jscomp.JSError var28 = com.google.javascript.jscomp.JSError.make("NUMBER 10.0\n", var1, var7, var25);
    com.google.javascript.jscomp.ShowByPathWarningsGuard.ShowType var29 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.ShowByPathWarningsGuard var30 = new com.google.javascript.jscomp.ShowByPathWarningsGuard(var25, var29);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test122() {}
//   public void test122() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test122"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     boolean var5 = var2.canPropertyBeDefined(var3, "hi!");
//     boolean var7 = var2.hasNamespace("");
//     com.google.javascript.rhino.jstype.FunctionBuilder var8 = new com.google.javascript.rhino.jstype.FunctionBuilder(var2);
//     com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var9 = null;
//     var2.setResolveMode(var9);
//     java.util.List var11 = null;
//     com.google.javascript.rhino.Node var12 = var2.createParametersWithVarArgs(var11);
// 
//   }

  public void test123() {}
//   public void test123() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test123"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     java.util.List var1 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var2 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots(var0, var1, var2);
// 
//   }

  public void test124() {}
//   public void test124() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test124"); }
// 
// 
//     java.util.List var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.paramList(var0);
// 
//   }

  public void test125() {}
//   public void test125() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test125"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.Compiler.IntermediateState var2 = var1.getState();
//     com.google.javascript.jscomp.JSModule var3 = null;
//     java.lang.String[] var4 = var1.toSourceArray(var3);
// 
//   }

  public void test126() {}
//   public void test126() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test126"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setTweakToNumberLiteral("", 1);
//     var0.setInlineVariables(false);
//     com.google.javascript.jscomp.CompilerOptions.TracerMode var6 = var0.getTracerMode();
//     var0.setPrintInputDelimiter(false);
//     java.util.Set var9 = null;
//     var0.setIdGenerators(var9);
// 
//   }

  public void test127() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test127"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.CompilationLevel var1 = com.google.javascript.jscomp.CompilationLevel.valueOf("{1459695149}");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test128() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test128"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.VariableRenamingPolicy var1 = com.google.javascript.jscomp.VariableRenamingPolicy.valueOf("{505847021}");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test129() {}
//   public void test129() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test129"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     boolean var3 = var1.acceptEcmaScript5();
// 
//   }

  public void test130() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test130"); }


    com.google.javascript.jscomp.DiagnosticType var5 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
    java.lang.String[] var7 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var8 = com.google.javascript.jscomp.JSError.make("", 1, 39, var5, var7);
    com.google.javascript.jscomp.ShowByPathWarningsGuard.ShowType var9 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.ShowByPathWarningsGuard var10 = new com.google.javascript.jscomp.ShowByPathWarningsGuard(var7, var9);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test131() {}
//   public void test131() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test131"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     com.google.javascript.jscomp.SourceMap var3 = var1.getSourceMap();
//     com.google.javascript.jscomp.JSSourceFile var4 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var5 = new com.google.javascript.jscomp.JSSourceFile[] { var4};
//     com.google.javascript.jscomp.JSSourceFile var6 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var7 = new com.google.javascript.jscomp.JSSourceFile[] { var6};
//     com.google.javascript.jscomp.CompilerOptions var8 = null;
//     com.google.javascript.jscomp.Result var9 = var1.compile(var5, var7, var8);
// 
//   }

  public void test132() {}
//   public void test132() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test132"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     boolean var5 = var2.canPropertyBeDefined(var3, "hi!");
//     boolean var7 = var2.hasNamespace("");
//     com.google.javascript.rhino.jstype.FunctionBuilder var8 = new com.google.javascript.rhino.jstype.FunctionBuilder(var2);
//     com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var9 = null;
//     var2.setResolveMode(var9);
//     com.google.javascript.rhino.jstype.ObjectType var11 = null;
//     com.google.javascript.rhino.ErrorReporter var12 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12, true);
//     com.google.javascript.rhino.jstype.ObjectType var15 = var14.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var16 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16, true);
//     com.google.javascript.rhino.jstype.ObjectType var19 = var18.createAnonymousObjectType();
//     boolean var20 = var19.isUnknownType();
//     boolean var21 = var15.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var19);
//     boolean var22 = var15.isBooleanValueType();
//     com.google.javascript.rhino.jstype.JSType var24 = null;
//     com.google.javascript.jscomp.DiagnosticType var27 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0\n", "NUMBER 10.0\n");
//     com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var32 = var29.useSourceInfoIfMissingFrom(var31);
//     boolean var33 = var31.isSetterDef();
//     boolean var34 = var31.isNoSideEffectsCall();
//     com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var39 = var36.useSourceInfoIfMissingFrom(var38);
//     com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.eq(var38, var41);
//     com.google.javascript.rhino.Node var43 = var38.cloneNode();
//     boolean var44 = var43.isOr();
//     com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var49 = var46.useSourceInfoIfMissingFrom(var48);
//     com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.eq(var48, var51);
//     com.google.javascript.rhino.Node var53 = var48.cloneNode();
//     com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.or(var43, var53);
//     com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.voidNode(var54);
//     com.google.javascript.rhino.Node var56 = var31.srcref(var54);
//     boolean var57 = var27.equals((java.lang.Object)var54);
//     boolean var58 = var15.defineDeclaredProperty("NUMBER 10.0\n", var24, var54);
//     java.util.List var59 = null;
//     com.google.javascript.rhino.jstype.JSType var60 = var2.createFunctionType(var11, (com.google.javascript.rhino.jstype.JSType)var15, var59);
// 
//   }

  public void test133() {}
//   public void test133() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test133"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
//     var2.setCrossModuleCodeMotion(false);
//     var2.setLabelRenaming(true);
//     java.util.Set var7 = null;
//     var2.setStripTypePrefixes(var7);
//     var1.initOptions(var2);
//     com.google.javascript.jscomp.JSSourceFile var10 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var11 = new com.google.javascript.jscomp.JSSourceFile[] { var10};
//     com.google.javascript.jscomp.JSSourceFile var12 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var13 = new com.google.javascript.jscomp.JSSourceFile[] { var12};
//     com.google.javascript.jscomp.CompilerOptions var14 = new com.google.javascript.jscomp.CompilerOptions();
//     var14.setSourceMapOutputPath("hi!");
//     com.google.javascript.jscomp.Result var17 = var1.compile(var11, var13, var14);
// 
//   }

  public void test134() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test134"); }


    java.lang.String[] var1 = new java.lang.String[] { "NUMBER 10.0\n"};
    com.google.javascript.jscomp.ShowByPathWarningsGuard.ShowType var2 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.ShowByPathWarningsGuard var3 = new com.google.javascript.jscomp.ShowByPathWarningsGuard(var1, var2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test135() {}
//   public void test135() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test135"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var6 = var3.useSourceInfoIfMissingFrom(var5);
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.eq(var5, var8);
//     com.google.javascript.rhino.Node var10 = var5.cloneNode();
//     boolean var11 = var10.isOr();
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var16 = var13.useSourceInfoIfMissingFrom(var15);
//     com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.eq(var15, var18);
//     com.google.javascript.rhino.Node var20 = var15.cloneNode();
//     com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.or(var10, var20);
//     java.lang.String var22 = var1.getSingletonGetterClassName(var20);
// 
//   }

  public void test136() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test136"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    com.google.javascript.rhino.Node var8 = var3.cloneNode();
    boolean var9 = var8.isOr();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = var11.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.eq(var13, var16);
    com.google.javascript.rhino.Node var18 = var13.cloneNode();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.or(var8, var18);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = var21.useSourceInfoIfMissingFrom(var23);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var27 = var24.copyInformationFrom(var26);
    com.google.javascript.rhino.Node var28 = var8.srcrefTree(var26);
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.block();
    boolean var30 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(var29);
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.number(10.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.ifNode(var8, var29, var32);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test137() {}
//   public void test137() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test137"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
//     com.google.javascript.rhino.ErrorReporter var3 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3, true);
//     com.google.javascript.rhino.jstype.ObjectType var6 = var5.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var7 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7, true);
//     com.google.javascript.rhino.jstype.ObjectType var10 = var9.createAnonymousObjectType();
//     boolean var11 = var10.isUnknownType();
//     boolean var12 = var6.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var10);
//     boolean var13 = var10.isFunctionPrototypeType();
//     var10.clearCachedValues();
//     com.google.javascript.rhino.jstype.ObjectType var15 = var10.dereference();
//     com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var15};
//     com.google.javascript.rhino.jstype.JSType var17 = var2.createUnionType(var16);
//     boolean var19 = var2.isForwardDeclaredType("{1459695149}");
//     com.google.javascript.rhino.ErrorReporter var20 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20, true);
//     com.google.javascript.rhino.jstype.ObjectType var23 = var22.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var24 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24, true);
//     com.google.javascript.rhino.jstype.ObjectType var27 = var26.createAnonymousObjectType();
//     boolean var28 = var27.isUnknownType();
//     boolean var29 = var23.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var27);
//     boolean var30 = var27.isFunctionPrototypeType();
//     var27.clearCachedValues();
//     com.google.javascript.rhino.jstype.ObjectType var32 = var27.dereference();
//     boolean var33 = var27.isFunctionPrototypeType();
//     java.util.List var34 = null;
//     com.google.javascript.rhino.jstype.FunctionType var35 = var2.createFunctionType((com.google.javascript.rhino.jstype.JSType)var27, var34);
// 
//   }

  public void test138() {}
//   public void test138() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test138"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     com.google.javascript.jscomp.Compiler.IntermediateState var3 = var1.getState();
//     java.lang.String[] var4 = var1.toSourceArray();
// 
//   }

  public void test139() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test139"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.paramList();
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3, true);
    com.google.javascript.rhino.jstype.JSType var6 = null;
    boolean var8 = var5.canPropertyBeDefined(var6, "hi!");
    boolean var10 = var5.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var11 = new com.google.javascript.rhino.jstype.FunctionBuilder(var5);
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12, true);
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15, true);
    com.google.javascript.rhino.jstype.ObjectType var18 = var17.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19, true);
    com.google.javascript.rhino.jstype.ObjectType var22 = var21.createAnonymousObjectType();
    boolean var23 = var22.isUnknownType();
    boolean var24 = var18.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var22);
    boolean var25 = var22.isFunctionPrototypeType();
    var22.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var27 = var22.dereference();
    com.google.javascript.rhino.jstype.JSType[] var28 = new com.google.javascript.rhino.jstype.JSType[] { var27};
    com.google.javascript.rhino.jstype.JSType var29 = var14.createUnionType(var28);
    com.google.javascript.rhino.ErrorReporter var30 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30, true);
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33, true);
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37, true);
    com.google.javascript.rhino.jstype.ObjectType var40 = var39.createAnonymousObjectType();
    boolean var41 = var40.isUnknownType();
    boolean var42 = var36.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var40);
    boolean var43 = var40.isFunctionPrototypeType();
    var40.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var45 = var40.dereference();
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.jstype.JSType var47 = var32.createUnionType(var46);
    com.google.javascript.rhino.jstype.FunctionType var48 = var5.createFunctionTypeWithVarArgs(var29, var46);
    com.google.javascript.rhino.jstype.JSType[] var49 = new com.google.javascript.rhino.jstype.JSType[] { var29};
    com.google.javascript.rhino.Node var50 = var2.createParameters(var49);
    com.google.javascript.rhino.Node[] var51 = new com.google.javascript.rhino.Node[] { var50};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.switchNode(var0, var51);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test140() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test140"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    var2.setCrossModuleCodeMotion(false);
    var2.setLabelRenaming(true);
    java.util.Set var7 = null;
    var2.setStripTypePrefixes(var7);
    var1.initOptions(var2);
    java.nio.charset.Charset var11 = null;
    com.google.javascript.jscomp.SourceFile var12 = com.google.javascript.jscomp.SourceFile.fromFile("NUMBER 10.0", var11);
    com.google.javascript.jscomp.Region var14 = var12.getRegion(100);
    java.lang.String var15 = var12.toString();
    com.google.javascript.rhino.Node var16 = var1.parse(var12);
    com.google.javascript.jscomp.type.ReverseAbstractInterpreter var17 = var1.getReverseAbstractInterpreter();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String[] var18 = var1.toSourceArray();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "NUMBER 10.0"+ "'", var15.equals("NUMBER 10.0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test141() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test141"); }


    java.nio.charset.Charset var1 = null;
    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromFile("NUMBER 10.0", var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var3 = var2.getCode();
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test142() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test142"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    com.google.javascript.rhino.Node var8 = var3.cloneNode();
    boolean var9 = var8.isOr();
    com.google.javascript.rhino.jstype.StaticSourceFile var10 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var8);
    boolean var11 = var8.isDec();
    boolean var12 = var8.isFor();
    boolean var13 = var8.isNoSideEffectsCall();
    boolean var14 = var8.isOptionalArg();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var8.setQuotedString();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test143() {}
//   public void test143() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test143"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getAst();
//     java.util.Collection var5 = var3.getRequires();
// 
//   }

  public void test144() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test144"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setCrossModuleCodeMotion(false);
    com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var3 = null;
    var0.setAnonymousFunctionNaming(var3);
    var0.setExtractPrototypeMemberDeclarations(true);
    var0.setRemoveTryCatchFinally(true);
    var0.setSyntheticBlockStartMarker("hi!");
    boolean var11 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CheckLevel var12 = null;
    var0.setCheckUnreachableCode(var12);
    var0.resetWarningsGuard();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test145() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test145"); }


    com.google.javascript.jscomp.CheckLevel[] var0 = com.google.javascript.jscomp.CheckLevel.values();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test146() {}
//   public void test146() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test146"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
//     com.google.javascript.rhino.jstype.ObjectType var3 = var2.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4, true);
//     com.google.javascript.rhino.jstype.ObjectType var7 = var6.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var8 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8, true);
//     com.google.javascript.rhino.jstype.ObjectType var11 = var10.createAnonymousObjectType();
//     boolean var12 = var11.isUnknownType();
//     boolean var13 = var7.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var11);
//     com.google.javascript.rhino.jstype.JSType var14 = var2.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType)var7);
//     boolean var15 = var7.isBooleanValueType();
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     com.google.javascript.rhino.jstype.JSType var17 = var7.getLeastSupertype(var16);
// 
//   }

  public void test147() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test147"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setSourceMapOutputPath("hi!");
    var0.setIdeMode(false);
    java.util.Set var5 = null;
    var0.setReplaceStringsReservedStrings(var5);
    var0.resetWarningsGuard();
    var0.setCrossModuleMethodMotion(true);

  }

  public void test148() {}
//   public void test148() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test148"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getAst();
//     com.google.javascript.jscomp.SourceFile var6 = com.google.javascript.jscomp.SourceFile.fromFile("NUMBER 10.0\n");
//     var3.setSourceFile(var6);
// 
//   }

  public void test149() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test149"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    var2.setCrossModuleCodeMotion(false);
    var2.setLabelRenaming(true);
    java.util.Set var7 = null;
    var2.setStripTypePrefixes(var7);
    var1.initOptions(var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.normalize();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test150() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test150"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    var2.setCrossModuleCodeMotion(false);
    var2.setLabelRenaming(true);
    java.util.Set var7 = null;
    var2.setStripTypePrefixes(var7);
    var1.initOptions(var2);
    java.nio.charset.Charset var11 = null;
    com.google.javascript.jscomp.SourceFile var12 = com.google.javascript.jscomp.SourceFile.fromFile("NUMBER 10.0", var11);
    com.google.javascript.jscomp.Region var14 = var12.getRegion(100);
    java.lang.String var15 = var12.toString();
    com.google.javascript.rhino.Node var16 = var1.parse(var12);
    com.google.javascript.jscomp.CodingConvention var17 = null;
    com.google.javascript.jscomp.ClosureCodingConvention var18 = new com.google.javascript.jscomp.ClosureCodingConvention(var17);
    com.google.javascript.rhino.jstype.JSTypeRegistry var19 = null;
    com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var20 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var18, var19);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var25 = var22.useSourceInfoIfMissingFrom(var24);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.eq(var24, var27);
    var28.setSourceEncodedPosition(100);
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var35 = var32.useSourceInfoIfMissingFrom(var34);
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.eq(var34, var37);
    com.google.javascript.rhino.Node var39 = var34.cloneNode();
    boolean var40 = var39.isOr();
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var45 = var42.useSourceInfoIfMissingFrom(var44);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.eq(var44, var47);
    com.google.javascript.rhino.Node var49 = var44.cloneNode();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.or(var39, var49);
    com.google.javascript.rhino.Node var51 = var28.useSourceInfoFromForTree(var39);
    com.google.javascript.rhino.Node var52 = var28.removeFirstChild();
    com.google.javascript.jscomp.CodingConvention var53 = null;
    com.google.javascript.jscomp.ClosureCodingConvention var54 = new com.google.javascript.jscomp.ClosureCodingConvention(var53);
    com.google.javascript.rhino.jstype.JSTypeRegistry var55 = null;
    com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var56 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var54, var55);
    com.google.javascript.jscomp.ClosureCodingConvention var57 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var54);
    com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var62 = var59.useSourceInfoIfMissingFrom(var61);
    com.google.javascript.rhino.Node var64 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.eq(var61, var64);
    com.google.javascript.rhino.Node var66 = var61.cloneNode();
    boolean var67 = var66.isOr();
    com.google.javascript.rhino.jstype.StaticSourceFile var68 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var66);
    boolean var69 = var66.isDec();
    boolean var70 = var66.isFor();
    boolean var71 = var54.isVarArgsParameter(var66);
    boolean var72 = var66.isEmpty();
    boolean var73 = var52.hasChild(var66);
    com.google.javascript.rhino.Node var75 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var78 = var75.useSourceInfoIfMissingFrom(var77);
    com.google.javascript.rhino.Node var80 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var81 = com.google.javascript.rhino.IR.eq(var77, var80);
    com.google.javascript.rhino.Node var82 = var77.cloneNode();
    boolean var83 = var82.isOr();
    com.google.javascript.rhino.Node var85 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var87 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var88 = var85.useSourceInfoIfMissingFrom(var87);
    com.google.javascript.rhino.Node var90 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var91 = com.google.javascript.rhino.IR.eq(var87, var90);
    com.google.javascript.rhino.Node var92 = var87.cloneNode();
    com.google.javascript.rhino.Node var93 = com.google.javascript.rhino.IR.or(var82, var92);
    int var94 = var82.getCharno();
    java.lang.String var95 = var18.extractClassNameIfRequire(var52, var82);
    com.google.javascript.jscomp.NodeTraversal.Callback var96 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.NodeTraversal.traverse((com.google.javascript.jscomp.AbstractCompiler)var1, var52, var96);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "NUMBER 10.0"+ "'", var15.equals("NUMBER 10.0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);

  }

  public void test151() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test151"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    com.google.javascript.rhino.Node var8 = var3.cloneNode();
    boolean var9 = var8.isOr();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = var11.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.eq(var13, var16);
    com.google.javascript.rhino.Node var18 = var13.cloneNode();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.or(var8, var18);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = var21.useSourceInfoIfMissingFrom(var23);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var27 = var24.copyInformationFrom(var26);
    com.google.javascript.rhino.Node var28 = var8.srcrefTree(var26);
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var33 = var30.useSourceInfoIfMissingFrom(var32);
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.exprResult(var33);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.block(var34);
    com.google.javascript.rhino.Node var36 = var28.clonePropsFrom(var35);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.not(var28);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test152() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test152"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
    boolean var2 = var1.recordImplicitCast();
    com.google.javascript.rhino.JSTypeExpression var4 = null;
    boolean var5 = var1.recordParameter("hi!", var4);
    boolean var7 = var1.recordFileOverview("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test153() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test153"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var6 = var3.useSourceInfoIfMissingFrom(var5);
    boolean var7 = var5.isSetterDef();
    com.google.javascript.rhino.Node[] var8 = new com.google.javascript.rhino.Node[] { var5};
    com.google.javascript.rhino.Node var9 = new com.google.javascript.rhino.Node(100, var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node((-1), var8);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test154() {}
//   public void test154() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test154"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
//     var2.setCrossModuleCodeMotion(false);
//     var2.setLabelRenaming(true);
//     java.util.Set var7 = null;
//     var2.setStripTypePrefixes(var7);
//     var1.initOptions(var2);
//     java.nio.charset.Charset var11 = null;
//     com.google.javascript.jscomp.SourceFile var12 = com.google.javascript.jscomp.SourceFile.fromFile("NUMBER 10.0", var11);
//     com.google.javascript.jscomp.Region var14 = var12.getRegion(100);
//     java.lang.String var15 = var12.toString();
//     com.google.javascript.rhino.Node var16 = var1.parse(var12);
//     com.google.javascript.jscomp.type.ReverseAbstractInterpreter var17 = var1.getReverseAbstractInterpreter();
//     java.util.List var18 = null;
//     java.util.List var19 = null;
//     com.google.javascript.jscomp.CompilerOptions var20 = new com.google.javascript.jscomp.CompilerOptions();
//     var20.setCrossModuleCodeMotion(false);
//     com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var23 = null;
//     var20.setAnonymousFunctionNaming(var23);
//     var20.setExtractPrototypeMemberDeclarations(true);
//     var20.setRemoveClosureAsserts(false);
//     var20.setInlineConstantVars(false);
//     com.google.javascript.jscomp.SourceMap.Format var31 = null;
//     var20.setSourceMapFormat(var31);
//     var1.<com.google.javascript.jscomp.SourceFile>initModules(var18, var19, var20);
// 
//   }

  public void test155() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test155"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.jstype.ObjectType var3 = var2.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5, true);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    boolean var10 = var7.canPropertyBeDefined(var8, "hi!");
    boolean var12 = var7.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var13 = new com.google.javascript.rhino.jstype.FunctionBuilder(var7);
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14, true);
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17, true);
    com.google.javascript.rhino.jstype.ObjectType var20 = var19.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21, true);
    com.google.javascript.rhino.jstype.ObjectType var24 = var23.createAnonymousObjectType();
    boolean var25 = var24.isUnknownType();
    boolean var26 = var20.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var24);
    boolean var27 = var24.isFunctionPrototypeType();
    var24.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var29 = var24.dereference();
    com.google.javascript.rhino.jstype.JSType[] var30 = new com.google.javascript.rhino.jstype.JSType[] { var29};
    com.google.javascript.rhino.jstype.JSType var31 = var16.createUnionType(var30);
    com.google.javascript.rhino.ErrorReporter var32 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var32, true);
    com.google.javascript.rhino.ErrorReporter var35 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var35, true);
    com.google.javascript.rhino.jstype.ObjectType var38 = var37.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var39 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var39, true);
    com.google.javascript.rhino.jstype.ObjectType var42 = var41.createAnonymousObjectType();
    boolean var43 = var42.isUnknownType();
    boolean var44 = var38.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var42);
    boolean var45 = var42.isFunctionPrototypeType();
    var42.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var47 = var42.dereference();
    com.google.javascript.rhino.jstype.JSType[] var48 = new com.google.javascript.rhino.jstype.JSType[] { var47};
    com.google.javascript.rhino.jstype.JSType var49 = var34.createUnionType(var48);
    com.google.javascript.rhino.jstype.FunctionType var50 = var7.createFunctionTypeWithVarArgs(var31, var48);
    boolean var51 = var31.isEnumElementType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.overwriteDeclaredType("", var31);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test156() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test156"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    com.google.javascript.rhino.Node var8 = var3.cloneNode();
    boolean var9 = var8.isOr();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = var11.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.eq(var13, var16);
    com.google.javascript.rhino.Node var18 = var13.cloneNode();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.or(var8, var18);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = var21.useSourceInfoIfMissingFrom(var23);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.eq(var23, var26);
    com.google.javascript.rhino.Node var28 = var23.cloneNode();
    boolean var29 = var28.isOr();
    com.google.javascript.rhino.jstype.StaticSourceFile var30 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var28);
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.returnNode(var28);
    com.google.javascript.jscomp.CodingConvention var32 = null;
    com.google.javascript.jscomp.ClosureCodingConvention var33 = new com.google.javascript.jscomp.ClosureCodingConvention(var32);
    com.google.javascript.rhino.jstype.JSTypeRegistry var34 = null;
    com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var35 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var33, var34);
    com.google.javascript.jscomp.ClosureCodingConvention var36 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var33);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var41 = var38.useSourceInfoIfMissingFrom(var40);
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.eq(var40, var43);
    com.google.javascript.rhino.Node var45 = var40.cloneNode();
    boolean var46 = var45.isOr();
    com.google.javascript.rhino.jstype.StaticSourceFile var47 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var45);
    boolean var48 = var45.isDec();
    boolean var49 = var45.isFor();
    boolean var50 = var33.isVarArgsParameter(var45);
    boolean var51 = var45.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.tryCatchFinally(var8, var28, var45);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test157() {}
//   public void test157() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test157"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.empty();
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.regexp(var0, var1);
// 
//   }

  public void test158() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test158"); }


    java.lang.String var1 = com.google.javascript.jscomp.ProcessCommonJSModules.toModuleName("Node tree inequality:\nTree1:\nNUMBER 10.0\n\n\nTree2:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree1: NUMBER 10.0\n\n\nSubtree2: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "module$Node tree inequality:\nTree1:\nNUMBER 10.0\n\n\nTree2:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree1: NUMBER 10.0\n\n\nSubtree2: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n"+ "'", var1.equals("module$Node tree inequality:\nTree1:\nNUMBER 10.0\n\n\nTree2:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree1: NUMBER 10.0\n\n\nSubtree2: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n"));

  }

  public void test159() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test159"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var1 = com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.valueOf("Node tree inequality:\nTree1:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nTree2:\nNUMBER 10.0\n\n\nSubtree1: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree2: NUMBER 10.0\n");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test160() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test160"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var5 = var2.useSourceInfoIfMissingFrom(var4);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.eq(var4, var7);
    com.google.javascript.rhino.Node var9 = var4.cloneNode();
    boolean var10 = var9.isOr();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var15 = var12.useSourceInfoIfMissingFrom(var14);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.eq(var14, var17);
    com.google.javascript.rhino.Node var19 = var14.cloneNode();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.or(var9, var19);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.voidNode(var20);
    com.google.javascript.rhino.Node var22 = var21.getFirstChild();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.not(var21);
    com.google.javascript.rhino.Node var24 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var27 = new com.google.javascript.rhino.Node(10, var21, var24, 0, 100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test161() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test161"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    boolean var5 = var2.canPropertyBeDefined(var3, "hi!");
    boolean var7 = var2.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var8 = new com.google.javascript.rhino.jstype.FunctionBuilder(var2);
    com.google.javascript.rhino.ErrorReporter var9 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var9, true);
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12, true);
    com.google.javascript.rhino.jstype.ObjectType var15 = var14.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var16 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16, true);
    com.google.javascript.rhino.jstype.ObjectType var19 = var18.createAnonymousObjectType();
    boolean var20 = var19.isUnknownType();
    boolean var21 = var15.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var19);
    boolean var22 = var19.isFunctionPrototypeType();
    var19.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var24 = var19.dereference();
    com.google.javascript.rhino.jstype.JSType[] var25 = new com.google.javascript.rhino.jstype.JSType[] { var24};
    com.google.javascript.rhino.jstype.JSType var26 = var11.createUnionType(var25);
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27, true);
    com.google.javascript.rhino.ErrorReporter var30 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30, true);
    com.google.javascript.rhino.jstype.ObjectType var33 = var32.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34, true);
    com.google.javascript.rhino.jstype.ObjectType var37 = var36.createAnonymousObjectType();
    boolean var38 = var37.isUnknownType();
    boolean var39 = var33.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var37);
    boolean var40 = var37.isFunctionPrototypeType();
    var37.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var42 = var37.dereference();
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.jstype.JSType var44 = var29.createUnionType(var43);
    com.google.javascript.rhino.jstype.FunctionType var45 = var2.createFunctionTypeWithVarArgs(var26, var43);
    boolean var46 = var26.isEnumElementType();
    com.google.javascript.rhino.jstype.JSType var47 = var26.restrictByNotNullOrUndefined();
    boolean var48 = var47.isRecordType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test162() {}
//   public void test162() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test162"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.SourceMap var2 = var1.getSourceMap();
//     java.io.PrintStream var3 = null;
//     com.google.javascript.jscomp.Compiler var4 = new com.google.javascript.jscomp.Compiler(var3);
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var4);
//     java.io.PrintStream var6 = null;
//     com.google.javascript.jscomp.PrintStreamErrorManager var7 = new com.google.javascript.jscomp.PrintStreamErrorManager((com.google.javascript.jscomp.MessageFormatter)var5, var6);
//     java.io.PrintStream var8 = null;
//     com.google.javascript.jscomp.PrintStreamErrorManager var9 = new com.google.javascript.jscomp.PrintStreamErrorManager((com.google.javascript.jscomp.MessageFormatter)var5, var8);
//     var1.setErrorManager((com.google.javascript.jscomp.ErrorManager)var9);
//     com.google.javascript.jscomp.JSSourceFile var11 = null;
//     com.google.javascript.jscomp.JSModule var12 = null;
//     com.google.javascript.jscomp.JSModule[] var13 = new com.google.javascript.jscomp.JSModule[] { var12};
//     com.google.javascript.jscomp.CompilerOptions var14 = new com.google.javascript.jscomp.CompilerOptions();
//     var14.setCrossModuleCodeMotion(false);
//     com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var17 = null;
//     var14.setAnonymousFunctionNaming(var17);
//     var14.setExtractPrototypeMemberDeclarations(true);
//     var14.setRemoveTryCatchFinally(true);
//     var14.setFoldConstants(false);
//     var14.setPreferLineBreakAtEndOfFile(false);
//     com.google.javascript.jscomp.Result var27 = var1.compile(var11, var13, var14);
// 
//   }

  public void test163() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test163"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3, true);
    com.google.javascript.rhino.jstype.ObjectType var6 = var5.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var7 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7, true);
    com.google.javascript.rhino.jstype.ObjectType var10 = var9.createAnonymousObjectType();
    boolean var11 = var10.isUnknownType();
    boolean var12 = var6.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var10);
    boolean var13 = var10.isFunctionPrototypeType();
    var10.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var15 = var10.dereference();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var15};
    com.google.javascript.rhino.jstype.JSType var17 = var2.createUnionType(var16);
    com.google.javascript.rhino.ErrorReporter var18 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18, true);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    boolean var23 = var20.canPropertyBeDefined(var21, "hi!");
    boolean var25 = var20.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var26 = new com.google.javascript.rhino.jstype.FunctionBuilder(var20);
    com.google.javascript.rhino.jstype.FunctionBuilder var28 = var26.withName("NUMBER 10.0\n");
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29, true);
    com.google.javascript.rhino.jstype.ObjectType var32 = var31.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33, true);
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.createAnonymousObjectType();
    boolean var37 = var36.isUnknownType();
    boolean var38 = var32.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var36);
    boolean var39 = var36.isFunctionPrototypeType();
    com.google.javascript.rhino.jstype.FunctionBuilder var41 = var28.withReturnType((com.google.javascript.rhino.jstype.JSType)var36, true);
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var46 = var43.useSourceInfoIfMissingFrom(var45);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.eq(var45, var48);
    com.google.javascript.rhino.Node var50 = var45.cloneNode();
    boolean var51 = var50.isOr();
    com.google.javascript.rhino.jstype.StaticSourceFile var52 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var50);
    boolean var53 = var50.isDec();
    boolean var54 = var50.isFor();
    boolean var55 = var50.isNoSideEffectsCall();
    com.google.javascript.rhino.jstype.FunctionType var56 = var2.createFunctionType((com.google.javascript.rhino.jstype.JSType)var36, var50);
    int var57 = var56.getExtendedInterfacesCount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.ObjectType var58 = var56.getInstanceType();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);

  }

  public void test164() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test164"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    com.google.javascript.rhino.Node var8 = var3.cloneNode();
    boolean var9 = var8.isOr();
    com.google.javascript.rhino.jstype.StaticSourceFile var10 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var8);
    boolean var11 = var8.isDec();
    var8.setVarArgs(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.paramList(var8);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test165() {}
//   public void test165() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test165"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = null;
//     com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var3 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var1, var2);
//     com.google.javascript.jscomp.ClosureCodingConvention var4 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var1);
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var9 = var6.useSourceInfoIfMissingFrom(var8);
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.eq(var8, var11);
//     com.google.javascript.rhino.Node var13 = var8.cloneNode();
//     boolean var14 = var13.isOr();
//     com.google.javascript.rhino.jstype.StaticSourceFile var15 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var13);
//     boolean var16 = var13.isDec();
//     boolean var17 = var13.isFor();
//     boolean var18 = var1.isVarArgsParameter(var13);
//     java.lang.String var19 = var1.getExportSymbolFunction();
//     com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode((com.google.javascript.jscomp.CodingConvention)var1, "{505847021}");
// 
//   }

  public void test166() {}
//   public void test166() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test166"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     var1.normalize();
// 
//   }

  public void test167() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test167"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    var2.setCrossModuleCodeMotion(false);
    var2.setLabelRenaming(true);
    java.util.Set var7 = null;
    var2.setStripTypePrefixes(var7);
    var1.initOptions(var2);
    java.nio.charset.Charset var11 = null;
    com.google.javascript.jscomp.SourceFile var12 = com.google.javascript.jscomp.SourceFile.fromFile("NUMBER 10.0", var11);
    com.google.javascript.jscomp.Region var14 = var12.getRegion(100);
    java.lang.String var15 = var12.toString();
    com.google.javascript.rhino.Node var16 = var1.parse(var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.optimize();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "NUMBER 10.0"+ "'", var15.equals("NUMBER 10.0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test168() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test168"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setSourceMapOutputPath("hi!");
    var0.setIdeMode(false);
    com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
    var5.setSourceMapOutputPath("hi!");
    var5.setIdeMode(false);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var10 = var5.getLanguageIn();
    var0.setLanguageOut(var10);
    var0.setReserveRawExports(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test169() {}
//   public void test169() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test169"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var3, "{505847021}", false);
// 
//   }

  public void test170() {}
//   public void test170() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test170"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getAst();
//     java.lang.String var5 = var3.getName();
// 
//   }

  public void test171() {}
//   public void test171() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test171"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.number(10.0d);
//     boolean var3 = var2.isLabel();
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var8 = var5.useSourceInfoIfMissingFrom(var7);
//     boolean var9 = var7.isFalse();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.sheq(var2, var7);
//     com.google.javascript.jscomp.NodeTraversal.Callback var11 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverse(var0, var10, var11);
// 
//   }

  public void test172() {}
//   public void test172() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test172"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     com.google.javascript.jscomp.Compiler.IntermediateState var3 = var1.getState();
//     java.nio.charset.Charset var5 = null;
//     com.google.javascript.jscomp.SourceFile var6 = com.google.javascript.jscomp.SourceFile.fromFile("{505847021}", var5);
//     com.google.javascript.jscomp.JSSourceFile var7 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var8 = new com.google.javascript.jscomp.JSSourceFile[] { var7};
//     com.google.javascript.jscomp.CompilerOptions var9 = new com.google.javascript.jscomp.CompilerOptions();
//     var9.setSourceMapOutputPath("hi!");
//     com.google.javascript.jscomp.Result var12 = var1.compile(var6, var8, var9);
// 
//   }

  public void test173() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test173"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    com.google.javascript.rhino.Node var8 = var3.cloneNode();
    boolean var9 = var8.isOr();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = var11.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.eq(var13, var16);
    com.google.javascript.rhino.Node var18 = var13.cloneNode();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.or(var8, var18);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = var21.useSourceInfoIfMissingFrom(var23);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var27 = var24.copyInformationFrom(var26);
    com.google.javascript.rhino.Node var28 = var8.srcrefTree(var26);
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var33 = var30.useSourceInfoIfMissingFrom(var32);
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.exprResult(var33);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.block(var34);
    com.google.javascript.rhino.Node var36 = var28.clonePropsFrom(var35);
    boolean var37 = var35.isQuotedString();
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var42 = var39.useSourceInfoIfMissingFrom(var41);
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.eq(var41, var44);
    com.google.javascript.rhino.Node var46 = var41.cloneNode();
    boolean var47 = var46.isOr();
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var52 = var49.useSourceInfoIfMissingFrom(var51);
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.eq(var51, var54);
    com.google.javascript.rhino.Node var56 = var51.cloneNode();
    com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.IR.or(var46, var56);
    com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.voidNode(var57);
    com.google.javascript.rhino.Node var59 = var58.getFirstChild();
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var64 = var61.useSourceInfoIfMissingFrom(var63);
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.exprResult(var64);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var35.replaceChild(var58, var65);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test174() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test174"); }


    com.google.javascript.jscomp.ShowByPathWarningsGuard.ShowType var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.ShowByPathWarningsGuard var2 = new com.google.javascript.jscomp.ShowByPathWarningsGuard("Node tree inequality:\nTree1:\nNUMBER 10.0\n\n\nTree2:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree1: NUMBER 10.0\n\n\nSubtree2: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n", var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test175() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test175"); }


    com.google.javascript.jscomp.ShowByPathWarningsGuard var1 = new com.google.javascript.jscomp.ShowByPathWarningsGuard("ECMASCRIPT3");

  }

  public void test176() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test176"); }


    com.google.javascript.jscomp.parsing.Config var1 = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test177() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test177"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var12 = var9.useSourceInfoIfMissingFrom(var11);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.eq(var11, var14);
    com.google.javascript.rhino.Node var16 = var11.cloneNode();
    boolean var17 = var16.isOr();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var22 = var19.useSourceInfoIfMissingFrom(var21);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.eq(var21, var24);
    com.google.javascript.rhino.Node var26 = var21.cloneNode();
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.or(var16, var26);
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.voidNode(var27);
    com.google.javascript.rhino.Node var29 = var28.getFirstChild();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.var(var6, var28);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test178() {}
//   public void test178() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test178"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.continueNode(var0);
// 
//   }

  public void test179() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test179"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    var2.setCrossModuleCodeMotion(false);
    var2.setLabelRenaming(true);
    java.util.Set var7 = null;
    var2.setStripTypePrefixes(var7);
    var1.initOptions(var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.check();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test180() {}
//   public void test180() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test180"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = null;
//     com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var3 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var1, var2);
//     boolean var6 = var1.isExported("null(null)", false);
// 
//   }

  public void test181() {}
//   public void test181() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test181"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
//     var2.setCrossModuleCodeMotion(false);
//     var2.setLabelRenaming(true);
//     java.util.Set var7 = null;
//     var2.setStripTypePrefixes(var7);
//     var1.initOptions(var2);
//     java.nio.charset.Charset var11 = null;
//     com.google.javascript.jscomp.SourceFile var12 = com.google.javascript.jscomp.SourceFile.fromFile("NUMBER 10.0", var11);
//     com.google.javascript.jscomp.Region var14 = var12.getRegion(100);
//     java.lang.String var15 = var12.toString();
//     com.google.javascript.rhino.Node var16 = var1.parse(var12);
//     java.util.List var17 = null;
//     java.util.List var18 = null;
//     com.google.javascript.jscomp.CompilerOptions var19 = new com.google.javascript.jscomp.CompilerOptions();
//     var19.setTweakToNumberLiteral("", 1);
//     var19.setInlineVariables(false);
//     com.google.javascript.jscomp.CompilerOptions.TracerMode var25 = var19.getTracerMode();
//     com.google.javascript.jscomp.Result var26 = var1.<com.google.javascript.jscomp.SourceFile,com.google.javascript.jscomp.SourceFile>compile(var17, var18, var19);
// 
//   }

  public void test182() {}
//   public void test182() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test182"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     boolean var5 = var2.canPropertyBeDefined(var3, "hi!");
//     boolean var7 = var2.hasNamespace("");
//     com.google.javascript.rhino.jstype.FunctionBuilder var8 = new com.google.javascript.rhino.jstype.FunctionBuilder(var2);
//     com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var9 = null;
//     var2.setResolveMode(var9);
//     com.google.javascript.rhino.jstype.JSTypeNative[] var11 = null;
//     com.google.javascript.rhino.jstype.JSType var12 = var2.createUnionType(var11);
// 
//   }

  public void test183() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test183"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.jstype.ObjectType var3 = var2.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4, true);
    com.google.javascript.rhino.jstype.ObjectType var7 = var6.createAnonymousObjectType();
    boolean var8 = var7.isUnknownType();
    boolean var9 = var3.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var7);
    boolean var10 = var7.isFunctionPrototypeType();
    com.google.javascript.rhino.jstype.ObjectType var11 = com.google.javascript.rhino.jstype.ObjectType.cast((com.google.javascript.rhino.jstype.JSType)var7);
    boolean var12 = var7.isEnumType();
    boolean var13 = var7.isNullType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test184() {}
//   public void test184() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test184"); }
// 
// 
//     java.io.InputStream var2 = null;
//     com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromInputStream("{723551193}", "", var2);
// 
//   }

  public void test185() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test185"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.empty();
    int var1 = var0.getLineno();
    boolean var2 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test186() {}
//   public void test186() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test186"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.JSModule var4 = var3.getModule();
//     com.google.javascript.jscomp.Region var6 = var3.getRegion(0);
// 
//   }

  public void test187() {}
//   public void test187() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test187"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setSourceMapOutputPath("hi!");
//     var0.setIdeMode(false);
//     com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
//     var5.setSourceMapOutputPath("hi!");
//     var5.setIdeMode(false);
//     com.google.javascript.jscomp.CompilerOptions.LanguageMode var10 = var5.getLanguageIn();
//     var0.setLanguageOut(var10);
//     var0.setSkipAllPasses(true);
//     java.util.List var14 = null;
//     var0.setManageClosureDependencies(var14);
// 
//   }

  public void test188() {}
//   public void test188() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test188"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
//     com.google.javascript.rhino.jstype.ObjectType var3 = var2.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4, true);
//     com.google.javascript.rhino.jstype.ObjectType var7 = var6.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var8 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8, true);
//     com.google.javascript.rhino.jstype.ObjectType var11 = var10.createAnonymousObjectType();
//     boolean var12 = var11.isUnknownType();
//     boolean var13 = var7.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var11);
//     com.google.javascript.rhino.jstype.JSType var14 = var2.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType)var7);
//     com.google.javascript.rhino.jstype.FunctionType var15 = null;
//     com.google.javascript.rhino.ErrorReporter var16 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16, true);
//     com.google.javascript.rhino.jstype.ObjectType var19 = var18.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var20 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20, true);
//     com.google.javascript.rhino.jstype.ObjectType var23 = var22.createAnonymousObjectType();
//     boolean var24 = var23.isUnknownType();
//     boolean var25 = var19.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var23);
//     boolean var26 = var19.isBooleanValueType();
//     com.google.javascript.rhino.jstype.ObjectType var27 = var19.getParentScope();
//     com.google.javascript.rhino.jstype.FunctionType var28 = var2.createFunctionTypeWithNewReturnType(var15, (com.google.javascript.rhino.jstype.JSType)var27);
// 
//   }

  public void test189() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test189"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var8 = var5.useSourceInfoIfMissingFrom(var7);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = var10.useSourceInfoIfMissingFrom(var12);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.exprResult(var13);
    java.lang.String var15 = var7.checkTreeEquals(var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.FunctionType var16 = var2.createInterfaceType("{723551193}", var13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test190() {}
//   public void test190() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test190"); }
// 
// 
//     java.util.List var0 = com.google.javascript.jscomp.CommandLineRunner.getDefaultExterns();
// 
//   }

  public void test191() {}
//   public void test191() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test191"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
//     com.google.javascript.rhino.jstype.ObjectType var3 = var2.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4, true);
//     com.google.javascript.rhino.jstype.ObjectType var7 = var6.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var8 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8, true);
//     com.google.javascript.rhino.jstype.ObjectType var11 = var10.createAnonymousObjectType();
//     boolean var12 = var11.isUnknownType();
//     boolean var13 = var7.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var11);
//     com.google.javascript.rhino.jstype.JSType var14 = var2.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType)var7);
//     boolean var15 = var7.isBooleanValueType();
//     java.lang.String var16 = var7.toDebugHashCodeString();
//     com.google.javascript.rhino.ErrorReporter var17 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17, true);
//     com.google.javascript.rhino.ErrorReporter var20 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20, true);
//     com.google.javascript.rhino.jstype.ObjectType var23 = var22.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var24 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24, true);
//     com.google.javascript.rhino.jstype.ObjectType var27 = var26.createAnonymousObjectType();
//     boolean var28 = var27.isUnknownType();
//     boolean var29 = var23.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var27);
//     boolean var30 = var27.isFunctionPrototypeType();
//     var27.clearCachedValues();
//     com.google.javascript.rhino.jstype.ObjectType var32 = var27.dereference();
//     com.google.javascript.rhino.jstype.JSType[] var33 = new com.google.javascript.rhino.jstype.JSType[] { var32};
//     com.google.javascript.rhino.jstype.JSType var34 = var19.createUnionType(var33);
//     boolean var35 = var7.differsFrom(var34);
//     boolean var36 = var34.isEnumType();
//     boolean var37 = var34.isBooleanObjectType();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var15 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var16 + "' != '" + "{1614250164}"+ "'", var16.equals("{1614250164}"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var28 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var29 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var30 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var35 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var36 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var37 == false);
// 
//   }

  public void test192() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test192"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    boolean var5 = var3.isSetterDef();
    boolean var6 = var3.isNoSideEffectsCall();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var11 = var8.useSourceInfoIfMissingFrom(var10);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.eq(var10, var13);
    com.google.javascript.rhino.Node var15 = var10.cloneNode();
    boolean var16 = var15.isOr();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var21 = var18.useSourceInfoIfMissingFrom(var20);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.eq(var20, var23);
    com.google.javascript.rhino.Node var25 = var20.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.or(var15, var25);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.voidNode(var26);
    com.google.javascript.rhino.Node var28 = var3.srcref(var26);
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var33 = var30.useSourceInfoIfMissingFrom(var32);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.eq(var32, var35);
    com.google.javascript.rhino.Node var37 = var32.cloneNode();
    boolean var38 = var37.isOr();
    var26.addChildrenToFront(var37);
    com.google.javascript.rhino.Node[] var40 = new com.google.javascript.rhino.Node[] { var37};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.block(var40);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test193() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test193"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2, true);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    boolean var7 = var4.canPropertyBeDefined(var5, "hi!");
    boolean var9 = var4.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var10 = new com.google.javascript.rhino.jstype.FunctionBuilder(var4);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11, true);
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14, true);
    com.google.javascript.rhino.jstype.ObjectType var17 = var16.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var18 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18, true);
    com.google.javascript.rhino.jstype.ObjectType var21 = var20.createAnonymousObjectType();
    boolean var22 = var21.isUnknownType();
    boolean var23 = var17.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var21);
    boolean var24 = var21.isFunctionPrototypeType();
    var21.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var26 = var21.dereference();
    com.google.javascript.rhino.jstype.JSType[] var27 = new com.google.javascript.rhino.jstype.JSType[] { var26};
    com.google.javascript.rhino.jstype.JSType var28 = var13.createUnionType(var27);
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29, true);
    com.google.javascript.rhino.ErrorReporter var32 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var32, true);
    com.google.javascript.rhino.jstype.ObjectType var35 = var34.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36, true);
    com.google.javascript.rhino.jstype.ObjectType var39 = var38.createAnonymousObjectType();
    boolean var40 = var39.isUnknownType();
    boolean var41 = var35.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var39);
    boolean var42 = var39.isFunctionPrototypeType();
    var39.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var44 = var39.dereference();
    com.google.javascript.rhino.jstype.JSType[] var45 = new com.google.javascript.rhino.jstype.JSType[] { var44};
    com.google.javascript.rhino.jstype.JSType var46 = var31.createUnionType(var45);
    com.google.javascript.rhino.jstype.FunctionType var47 = var4.createFunctionTypeWithVarArgs(var28, var45);
    com.google.javascript.rhino.jstype.JSType[] var48 = new com.google.javascript.rhino.jstype.JSType[] { var28};
    com.google.javascript.rhino.Node var49 = var1.createParameters(var48);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.pos(var49);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test194() {}
//   public void test194() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test194"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, false);
//     com.google.javascript.rhino.jstype.JSTypeNative var3 = null;
//     com.google.javascript.rhino.jstype.JSType var4 = var2.getNativeType(var3);
// 
//   }

  public void test195() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test195"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    com.google.javascript.rhino.Node var8 = var3.cloneNode();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = var10.useSourceInfoIfMissingFrom(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var18 = var15.useSourceInfoIfMissingFrom(var17);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.exprResult(var18);
    java.lang.String var20 = var12.checkTreeEquals(var18);
    com.google.javascript.rhino.Node var21 = var3.srcref(var12);
    com.google.javascript.rhino.Node var22 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.doNode(var12, var22);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test196() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test196"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    var2.setCrossModuleCodeMotion(false);
    var2.setLabelRenaming(true);
    java.util.Set var7 = null;
    var2.setStripTypePrefixes(var7);
    var1.initOptions(var2);
    com.google.javascript.jscomp.JSModule var10 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var11 = var1.toSource(var10);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test197() {}
//   public void test197() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test197"); }
// 
// 
//     java.util.List var0 = null;
//     com.google.javascript.jscomp.JSModuleGraph var1 = new com.google.javascript.jscomp.JSModuleGraph(var0);
// 
//   }

  public void test198() {}
//   public void test198() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test198"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var5 = var2.useSourceInfoIfMissingFrom(var4);
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.eq(var4, var7);
//     var8.setSourceEncodedPosition(100);
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var15 = var12.useSourceInfoIfMissingFrom(var14);
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.eq(var14, var17);
//     com.google.javascript.rhino.Node var19 = var14.cloneNode();
//     boolean var20 = var19.isOr();
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var25 = var22.useSourceInfoIfMissingFrom(var24);
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.eq(var24, var27);
//     com.google.javascript.rhino.Node var29 = var24.cloneNode();
//     com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.or(var19, var29);
//     com.google.javascript.rhino.Node var31 = var8.useSourceInfoFromForTree(var19);
//     com.google.javascript.rhino.Node var32 = var8.removeFirstChild();
//     com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.doNode(var0, var32);
// 
//   }

  public void test199() {}
//   public void test199() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test199"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.JSModule var4 = var3.getModule();
//     com.google.javascript.jscomp.CompilerInput var7 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var3, "null(null)", false);
// 
//   }

  public void test200() {}
//   public void test200() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test200"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = null;
//     com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var3 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var1, var2);
//     com.google.javascript.jscomp.ClosureCodingConvention var4 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var1);
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var9 = var6.useSourceInfoIfMissingFrom(var8);
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.eq(var8, var11);
//     com.google.javascript.rhino.Node var13 = var8.cloneNode();
//     boolean var14 = var13.isOr();
//     com.google.javascript.rhino.jstype.StaticSourceFile var15 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var13);
//     boolean var16 = var13.isDec();
//     boolean var17 = var13.isFor();
//     boolean var18 = var1.isVarArgsParameter(var13);
//     com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode((com.google.javascript.jscomp.CodingConvention)var1, "{505847021}");
// 
//   }

  public void test201() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test201"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.CheckLevel var1 = com.google.javascript.jscomp.CheckLevel.valueOf("{1125981799}");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test202() {}
//   public void test202() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test202"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     com.google.javascript.jscomp.Compiler.IntermediateState var3 = var1.getState();
//     double var4 = var1.getProgress();
//     boolean var5 = var1.hasErrors();
// 
//   }

  public void test203() {}
//   public void test203() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test203"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.block();
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.comma(var0, var1);
// 
//   }

  public void test204() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test204"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.number(10.0d);
    boolean var3 = var2.isLabel();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var8 = var5.useSourceInfoIfMissingFrom(var7);
    boolean var9 = var7.isFalse();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.sheq(var2, var7);
    java.lang.Iterable var11 = var7.siblings();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var12 = com.google.javascript.rhino.ScriptRuntime.getMessage1("{1459695149}", (java.lang.Object)var11);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test205() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test205"); }


    java.lang.String var2 = com.google.javascript.jscomp.ProcessCommonJSModules.toModuleName("", "");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "module$"+ "'", var2.equals("module$"));

  }

  public void test206() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test206"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
    boolean var2 = var1.isPopulated();
    boolean var3 = var1.recordNoCompile();
    boolean var4 = var1.recordNoShadow();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.markAnnotation("", 1, 100);
      fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test207() {}
//   public void test207() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test207"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
//     boolean var3 = var1.isSuperClassReference("hi!");
//     boolean var5 = var1.isConstantKey("{1459695149}");
// 
//   }

  public void test208() {}
//   public void test208() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test208"); }
// 
// 
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var5 = var2.useSourceInfoIfMissingFrom(var4);
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.eq(var4, var7);
//     var8.setSourceEncodedPosition(100);
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var15 = var12.useSourceInfoIfMissingFrom(var14);
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.eq(var14, var17);
//     com.google.javascript.rhino.Node var19 = var14.cloneNode();
//     boolean var20 = var19.isOr();
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var25 = var22.useSourceInfoIfMissingFrom(var24);
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.eq(var24, var27);
//     com.google.javascript.rhino.Node var29 = var24.cloneNode();
//     com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.or(var19, var29);
//     com.google.javascript.rhino.Node var31 = var8.useSourceInfoFromForTree(var19);
//     com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var36 = var33.useSourceInfoIfMissingFrom(var35);
//     com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.eq(var35, var38);
//     com.google.javascript.rhino.Node var40 = var35.cloneNode();
//     boolean var41 = var40.isOr();
//     com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var46 = var43.useSourceInfoIfMissingFrom(var45);
//     com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.eq(var45, var48);
//     com.google.javascript.rhino.Node var50 = var45.cloneNode();
//     com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.or(var40, var50);
//     com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var56 = var53.useSourceInfoIfMissingFrom(var55);
//     com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var59 = var56.copyInformationFrom(var58);
//     com.google.javascript.rhino.Node var60 = var40.srcrefTree(var58);
//     com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var64 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var65 = var62.useSourceInfoIfMissingFrom(var64);
//     com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.exprResult(var65);
//     com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.block(var66);
//     com.google.javascript.rhino.Node var68 = var60.clonePropsFrom(var67);
//     boolean var69 = var67.isQuotedString();
//     com.google.javascript.rhino.Node var70 = null;
//     com.google.javascript.rhino.Node var71 = new com.google.javascript.rhino.Node(100, var8, var67, var70);
// 
//   }

  public void test209() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test209"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.jstype.ObjectType var3 = var2.createAnonymousObjectType();
    boolean var4 = var3.isArrayType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test210() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test210"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    com.google.javascript.rhino.Node var8 = var3.cloneNode();
    boolean var9 = var8.isOr();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = var11.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.eq(var13, var16);
    com.google.javascript.rhino.Node var18 = var13.cloneNode();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.or(var8, var18);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.voidNode(var19);
    com.google.javascript.rhino.Node[] var21 = new com.google.javascript.rhino.Node[] { var20};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.objectlit(var21);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test211() {}
//   public void test211() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test211"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticGroup var0 = null;
//     com.google.javascript.jscomp.CheckLevel var1 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var2 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var0, var1);
//     java.lang.String var3 = var2.toString();
//     java.lang.String var4 = var2.toString();
//     com.google.javascript.jscomp.DiagnosticType var7 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
//     com.google.javascript.jscomp.DiagnosticType[] var8 = new com.google.javascript.jscomp.DiagnosticType[] { var7};
//     com.google.javascript.jscomp.DiagnosticGroup var9 = new com.google.javascript.jscomp.DiagnosticGroup(var8);
//     java.lang.Iterable var10 = var9.getTypes();
//     java.lang.String var11 = var9.toString();
//     java.lang.String var12 = var9.toString();
//     boolean var13 = var2.disables(var9);
// 
//   }

  public void test212() {}
//   public void test212() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test212"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setCrossModuleCodeMotion(false);
//     com.google.javascript.jscomp.CompilerOptions.Reach var3 = null;
//     var0.setRemoveUnusedVariables(var3);
// 
//   }

  public void test213() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test213"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    var2.setCrossModuleCodeMotion(false);
    var2.setLabelRenaming(true);
    java.util.Set var7 = null;
    var2.setStripTypePrefixes(var7);
    var1.initOptions(var2);
    boolean var10 = var1.acceptConstKeyword();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.normalize();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test214() {}
//   public void test214() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test214"); }
// 
// 
//     java.io.InputStream var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromInputStream("{1614250164}", var1);
// 
//   }

  public void test215() {}
//   public void test215() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test215"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setSourceMapOutputPath("hi!");
//     var0.setReplaceStringsPlaceholderToken("hi!");
//     var0.setCheckCaja(true);
//     java.util.Set var7 = null;
//     var0.setExtraAnnotationNames(var7);
// 
//   }

  public void test216() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test216"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    boolean var5 = var3.isOr();
    int var6 = var3.getChildCount();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var11 = var8.useSourceInfoIfMissingFrom(var10);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.eq(var10, var13);
    com.google.javascript.rhino.Node var15 = var10.cloneNode();
    boolean var16 = var15.isOr();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var21 = var18.useSourceInfoIfMissingFrom(var20);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.eq(var20, var23);
    com.google.javascript.rhino.Node var25 = var20.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.or(var15, var25);
    com.google.javascript.rhino.Node var27 = var3.srcrefTree(var26);
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var32 = var29.useSourceInfoIfMissingFrom(var31);
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.eq(var31, var34);
    var35.setSourceEncodedPosition(100);
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var42 = var39.useSourceInfoIfMissingFrom(var41);
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.eq(var41, var44);
    com.google.javascript.rhino.Node var46 = var41.cloneNode();
    boolean var47 = var46.isOr();
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var52 = var49.useSourceInfoIfMissingFrom(var51);
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.eq(var51, var54);
    com.google.javascript.rhino.Node var56 = var51.cloneNode();
    com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.IR.or(var46, var56);
    com.google.javascript.rhino.Node var58 = var35.useSourceInfoFromForTree(var46);
    java.lang.String var59 = com.google.javascript.jscomp.NodeUtil.getSourceName(var46);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.var(var3, var46);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);

  }

  public void test217() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test217"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    com.google.javascript.rhino.Node var8 = var3.cloneNode();
    boolean var9 = var8.isOr();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = var11.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.eq(var13, var16);
    com.google.javascript.rhino.Node var18 = var13.cloneNode();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.or(var8, var18);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.voidNode(var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var21 = var19.getString();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test218() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test218"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    var1.markTypeNode(var3, 10, 100, 100, 0, true);
    boolean var10 = var1.recordConsistentIdGenerator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test219() {}
//   public void test219() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test219"); }
// 
// 
//     com.google.javascript.rhino.jstype.ObjectType var0 = null;
//     com.google.javascript.rhino.jstype.ObjectType var2 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(var0, "{1459695149}");
// 
//   }

  public void test220() {}
//   public void test220() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test220"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
//     boolean var4 = var3.isLabel();
//     java.nio.charset.Charset var6 = null;
//     com.google.javascript.jscomp.SourceFile var7 = com.google.javascript.jscomp.SourceFile.fromFile("NUMBER 10.0", var6);
//     var3.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var7);
//     java.nio.charset.Charset var10 = null;
//     com.google.javascript.jscomp.SourceFile var11 = com.google.javascript.jscomp.SourceFile.fromFile("NUMBER 10.0", var10);
//     com.google.javascript.jscomp.Region var13 = var11.getRegion(100);
//     java.lang.String var14 = var11.toString();
//     com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
//     var15.setCrossModuleCodeMotion(false);
//     com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var18 = null;
//     var15.setAnonymousFunctionNaming(var18);
//     var15.setExtractPrototypeMemberDeclarations(true);
//     var15.setRemoveTryCatchFinally(true);
//     var15.setFoldConstants(false);
//     var15.setInlineGetters(false);
//     com.google.javascript.jscomp.Result var28 = var1.compile(var7, var11, var15);
//     com.google.javascript.jscomp.JSSourceFile var29 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var30 = new com.google.javascript.jscomp.JSSourceFile[] { var29};
//     com.google.javascript.jscomp.JSSourceFile var31 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var32 = new com.google.javascript.jscomp.JSSourceFile[] { var31};
//     com.google.javascript.jscomp.CompilerOptions var33 = null;
//     var1.init(var30, var32, var33);
// 
//   }

  public void test221() {}
//   public void test221() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test221"); }
// 
// 
//     com.google.javascript.jscomp.CheckLevel var3 = null;
//     com.google.javascript.jscomp.DiagnosticType var4 = null;
//     com.google.javascript.jscomp.DiagnosticType var10 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
//     java.lang.String[] var12 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var13 = com.google.javascript.jscomp.JSError.make("", 1, 39, var10, var12);
//     com.google.javascript.jscomp.JSError var14 = com.google.javascript.jscomp.JSError.make("NUMBER 10.0", 39, (-1), var3, var4, var12);
// 
//   }

  public void test222() {}
//   public void test222() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test222"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     boolean var5 = var2.canPropertyBeDefined(var3, "hi!");
//     boolean var7 = var2.hasNamespace("");
//     com.google.javascript.rhino.jstype.FunctionBuilder var8 = new com.google.javascript.rhino.jstype.FunctionBuilder(var2);
//     com.google.javascript.rhino.ErrorReporter var9 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var9, true);
//     com.google.javascript.rhino.ErrorReporter var12 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12, true);
//     com.google.javascript.rhino.jstype.ObjectType var15 = var14.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var16 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16, true);
//     com.google.javascript.rhino.jstype.ObjectType var19 = var18.createAnonymousObjectType();
//     boolean var20 = var19.isUnknownType();
//     boolean var21 = var15.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var19);
//     boolean var22 = var19.isFunctionPrototypeType();
//     var19.clearCachedValues();
//     com.google.javascript.rhino.jstype.ObjectType var24 = var19.dereference();
//     com.google.javascript.rhino.jstype.JSType[] var25 = new com.google.javascript.rhino.jstype.JSType[] { var24};
//     com.google.javascript.rhino.jstype.JSType var26 = var11.createUnionType(var25);
//     com.google.javascript.rhino.ErrorReporter var27 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27, true);
//     com.google.javascript.rhino.ErrorReporter var30 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30, true);
//     com.google.javascript.rhino.jstype.ObjectType var33 = var32.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var34 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34, true);
//     com.google.javascript.rhino.jstype.ObjectType var37 = var36.createAnonymousObjectType();
//     boolean var38 = var37.isUnknownType();
//     boolean var39 = var33.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var37);
//     boolean var40 = var37.isFunctionPrototypeType();
//     var37.clearCachedValues();
//     com.google.javascript.rhino.jstype.ObjectType var42 = var37.dereference();
//     com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
//     com.google.javascript.rhino.jstype.JSType var44 = var29.createUnionType(var43);
//     com.google.javascript.rhino.jstype.FunctionType var45 = var2.createFunctionTypeWithVarArgs(var26, var43);
//     com.google.javascript.rhino.jstype.JSTypeNative var46 = null;
//     com.google.javascript.rhino.jstype.JSTypeNative[] var47 = new com.google.javascript.rhino.jstype.JSTypeNative[] { var46};
//     com.google.javascript.rhino.jstype.JSType var48 = var2.createUnionType(var47);
// 
//   }

  public void test223() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test223"); }


    java.lang.String var1 = com.google.javascript.jscomp.ProcessCommonJSModules.toModuleName("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "module$"+ "'", var1.equals("module$"));

  }

  public void test224() {}
//   public void test224() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test224"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = null;
//     com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var3 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var1, var2);
//     com.google.javascript.jscomp.ClosureCodingConvention var4 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var1);
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.Node.newNumber(1.0d, 1, 39);
//     var8.setCharno(0);
//     com.google.javascript.jscomp.CodingConvention.DelegateRelationship var11 = var4.getDelegateRelationship(var8);
// 
//   }

  public void test225() {}
//   public void test225() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test225"); }
// 
// 
//     java.util.List var2 = null;
//     java.util.List var3 = null;
//     com.google.javascript.jscomp.deps.SimpleDependencyInfo var4 = new com.google.javascript.jscomp.deps.SimpleDependencyInfo("", "hi!", var2, var3);
//     com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
//     var5.setSourceMapOutputPath("hi!");
//     var5.setReplaceStringsPlaceholderToken("hi!");
//     var5.setCheckCaja(true);
//     boolean var12 = var4.equals((java.lang.Object)var5);
//     java.util.Collection var13 = var4.getRequires();
// 
//   }

  public void test226() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test226"); }


    com.google.javascript.rhino.Node var1 = new com.google.javascript.rhino.Node(0);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var6 = var3.useSourceInfoIfMissingFrom(var5);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.eq(var5, var8);
    var8.setSourceEncodedPositionForTree(100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.or(var1, var8);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test227() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test227"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setSourceMapOutputPath("hi!");
    var0.setReplaceStringsPlaceholderToken("hi!");
    var0.setNameReferenceReportPath("{2018015076}");

  }

  public void test228() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test228"); }


    java.lang.String var2 = com.google.javascript.jscomp.ProcessCommonJSModules.toModuleName("null(null)", "");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "module$null(null)"+ "'", var2.equals("module$null(null)"));

  }

  public void test229() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test229"); }


    com.google.javascript.jscomp.CheckLevel var3 = null;
    com.google.javascript.jscomp.DiagnosticType var6 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.empty();
    com.google.javascript.jscomp.DiagnosticType var14 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
    java.lang.String[] var16 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var17 = com.google.javascript.jscomp.JSError.make("", 1, 39, var14, var16);
    com.google.javascript.jscomp.CheckLevel var21 = null;
    com.google.javascript.jscomp.DiagnosticType var24 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
    com.google.javascript.jscomp.DiagnosticType var30 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
    java.lang.String[] var32 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var33 = com.google.javascript.jscomp.JSError.make("", 1, 39, var30, var32);
    com.google.javascript.jscomp.JSError var34 = com.google.javascript.jscomp.JSError.make("hi!", 100, 100, var21, var24, var32);
    com.google.javascript.jscomp.JSError var35 = com.google.javascript.jscomp.JSError.make("NUMBER 10.0\n", var8, var14, var32);
    com.google.javascript.jscomp.JSError var36 = com.google.javascript.jscomp.JSError.make("NUMBER 10.0\n", 0, 0, var3, var6, var32);
    com.google.javascript.jscomp.ShowByPathWarningsGuard.ShowType var37 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.ShowByPathWarningsGuard var38 = new com.google.javascript.jscomp.ShowByPathWarningsGuard(var32, var37);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test230() {}
//   public void test230() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test230"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     java.io.PrintStream var3 = null;
//     com.google.javascript.jscomp.PrintStreamErrorManager var4 = new com.google.javascript.jscomp.PrintStreamErrorManager((com.google.javascript.jscomp.MessageFormatter)var2, var3);
//     java.io.PrintStream var5 = null;
//     com.google.javascript.jscomp.PrintStreamErrorManager var6 = new com.google.javascript.jscomp.PrintStreamErrorManager((com.google.javascript.jscomp.MessageFormatter)var2, var5);
//     com.google.javascript.jscomp.deps.JsFileParser var7 = new com.google.javascript.jscomp.deps.JsFileParser((com.google.javascript.jscomp.ErrorManager)var6);
//     com.google.javascript.jscomp.CheckLevel var8 = null;
//     com.google.javascript.jscomp.CheckLevel var12 = null;
//     com.google.javascript.jscomp.DiagnosticType var15 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
//     com.google.javascript.jscomp.DiagnosticType var21 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
//     java.lang.String[] var23 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var24 = com.google.javascript.jscomp.JSError.make("", 1, 39, var21, var23);
//     com.google.javascript.jscomp.JSError var25 = com.google.javascript.jscomp.JSError.make("hi!", 100, 100, var12, var15, var23);
//     int var26 = var25.getNodeLength();
//     var6.println(var8, var25);
// 
//   }

  public void test231() {}
//   public void test231() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test231"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setCrossModuleCodeMotion(false);
//     com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var3 = null;
//     var0.setAnonymousFunctionNaming(var3);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var5 = var0.getTweakProcessing();
//     com.google.javascript.jscomp.VariableRenamingPolicy var6 = null;
//     com.google.javascript.jscomp.PropertyRenamingPolicy var7 = null;
//     var0.setRenamingPolicy(var6, var7);
//     var0.setRewriteNewDateGoogNow(false);
//     java.util.Set var11 = null;
//     var0.setExtraAnnotationNames(var11);
// 
//   }

  public void test232() {}
//   public void test232() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test232"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     boolean var5 = var2.canPropertyBeDefined(var3, "hi!");
//     boolean var7 = var2.hasNamespace("");
//     com.google.javascript.rhino.jstype.FunctionBuilder var8 = new com.google.javascript.rhino.jstype.FunctionBuilder(var2);
//     com.google.javascript.rhino.jstype.JSType[] var9 = null;
//     com.google.javascript.rhino.Node var10 = var2.createParameters(var9);
// 
//   }

  public void test233() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test233"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3, true);
    com.google.javascript.rhino.jstype.ObjectType var6 = var5.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var7 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7, true);
    com.google.javascript.rhino.jstype.ObjectType var10 = var9.createAnonymousObjectType();
    boolean var11 = var10.isUnknownType();
    boolean var12 = var6.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var10);
    boolean var13 = var10.isFunctionPrototypeType();
    var10.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var15 = var10.dereference();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var15};
    com.google.javascript.rhino.jstype.JSType var17 = var2.createUnionType(var16);
    com.google.javascript.rhino.ErrorReporter var18 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18, true);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    boolean var23 = var20.canPropertyBeDefined(var21, "hi!");
    boolean var25 = var20.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var26 = new com.google.javascript.rhino.jstype.FunctionBuilder(var20);
    com.google.javascript.rhino.jstype.FunctionBuilder var28 = var26.withName("NUMBER 10.0\n");
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29, true);
    com.google.javascript.rhino.jstype.ObjectType var32 = var31.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33, true);
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.createAnonymousObjectType();
    boolean var37 = var36.isUnknownType();
    boolean var38 = var32.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var36);
    boolean var39 = var36.isFunctionPrototypeType();
    com.google.javascript.rhino.jstype.FunctionBuilder var41 = var28.withReturnType((com.google.javascript.rhino.jstype.JSType)var36, true);
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var46 = var43.useSourceInfoIfMissingFrom(var45);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.eq(var45, var48);
    com.google.javascript.rhino.Node var50 = var45.cloneNode();
    boolean var51 = var50.isOr();
    com.google.javascript.rhino.jstype.StaticSourceFile var52 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var50);
    boolean var53 = var50.isDec();
    boolean var54 = var50.isFor();
    boolean var55 = var50.isNoSideEffectsCall();
    com.google.javascript.rhino.jstype.FunctionType var56 = var2.createFunctionType((com.google.javascript.rhino.jstype.JSType)var36, var50);
    boolean var57 = var56.isReturnTypeInferred();
    boolean var58 = var56.hasInstanceType();
    com.google.javascript.rhino.jstype.FunctionType var59 = var56.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var60 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var60, true);
    com.google.javascript.rhino.jstype.ObjectType var63 = var62.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var64 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var64, true);
    com.google.javascript.rhino.jstype.ObjectType var67 = var66.createAnonymousObjectType();
    boolean var68 = var67.isUnknownType();
    boolean var69 = var63.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var67);
    boolean var70 = var67.isFunctionPrototypeType();
    com.google.javascript.rhino.jstype.JSType var71 = var59.getLeastSupertype((com.google.javascript.rhino.jstype.JSType)var67);
    boolean var72 = var71.isTemplateType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test234() {}
//   public void test234() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test234"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.Compiler.IntermediateState var2 = var1.getState();
//     java.util.List var3 = null;
//     java.util.List var4 = null;
//     com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
//     var5.setCrossModuleCodeMotion(false);
//     com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var8 = null;
//     var5.setAnonymousFunctionNaming(var8);
//     var5.setExtractPrototypeMemberDeclarations(true);
//     var5.setRemoveTryCatchFinally(true);
//     var5.setFoldConstants(false);
//     var5.setPreferLineBreakAtEndOfFile(false);
//     var1.<com.google.javascript.jscomp.SourceFile>initModules(var3, var4, var5);
// 
//   }

  public void test235() {}
//   public void test235() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test235"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     com.google.javascript.jscomp.Compiler.IntermediateState var3 = var1.getState();
//     boolean var4 = var1.acceptConstKeyword();
// 
//   }

  public void test236() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test236"); }


    com.google.javascript.jscomp.WarningLevel[] var0 = com.google.javascript.jscomp.WarningLevel.values();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test237() {}
//   public void test237() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test237"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2, true);
//     com.google.javascript.rhino.jstype.ObjectType var5 = var4.createAnonymousObjectType();
//     java.util.Collection var6 = var1.getDirectImplementors(var5);
//     com.google.javascript.rhino.jstype.JSTypeNative var7 = null;
//     com.google.javascript.rhino.jstype.FunctionType var8 = var1.getNativeFunctionType(var7);
// 
//   }

  public void test238() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test238"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    boolean var5 = var3.isOr();
    int var6 = var3.getChildCount();
    int var7 = var3.getType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.continueNode(var3);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 39);

  }

  public void test239() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test239"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.block();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var5 = var2.useSourceInfoIfMissingFrom(var4);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var8 = var5.copyInformationFrom(var7);
    boolean var9 = var0.isEquivalentToTyped(var8);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = var11.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.eq(var13, var16);
    com.google.javascript.rhino.Node var18 = var13.cloneNode();
    boolean var19 = var18.isOr();
    com.google.javascript.rhino.jstype.StaticSourceFile var20 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var18);
    boolean var21 = var18.isDec();
    var18.setVarArgs(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.assign(var0, var18);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test240() {}
//   public void test240() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test240"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = null;
//     com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var3 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var1, var2);
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var8 = var5.useSourceInfoIfMissingFrom(var7);
//     boolean var9 = var7.isSetterDef();
//     boolean var10 = var7.isNoSideEffectsCall();
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var15 = var12.useSourceInfoIfMissingFrom(var14);
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.eq(var14, var17);
//     com.google.javascript.rhino.Node var19 = var14.cloneNode();
//     boolean var20 = var19.isOr();
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var25 = var22.useSourceInfoIfMissingFrom(var24);
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.eq(var24, var27);
//     com.google.javascript.rhino.Node var29 = var24.cloneNode();
//     com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.or(var19, var29);
//     com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.voidNode(var30);
//     com.google.javascript.rhino.Node var32 = var7.srcref(var30);
//     com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var37 = var34.useSourceInfoIfMissingFrom(var36);
//     com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.exprResult(var37);
//     com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.block(var38);
//     com.google.javascript.rhino.InputId var40 = null;
//     var38.setInputId(var40);
//     java.lang.String var42 = var1.extractClassNameIfRequire(var32, var38);
//     boolean var44 = var1.isExported("function (): {552562541}");
// 
//   }

  public void test241() {}
//   public void test241() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test241"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     com.google.javascript.jscomp.Compiler.IntermediateState var3 = var1.getState();
//     double var4 = var1.getProgress();
//     com.google.javascript.jscomp.CheckLevel var8 = null;
//     com.google.javascript.jscomp.DiagnosticType var11 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
//     com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
//     java.lang.String[] var19 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var20 = com.google.javascript.jscomp.JSError.make("", 1, 39, var17, var19);
//     com.google.javascript.jscomp.JSError var21 = com.google.javascript.jscomp.JSError.make("hi!", 100, 100, var8, var11, var19);
//     int var22 = var21.getNodeLength();
//     int var23 = var21.getCharno();
//     com.google.javascript.jscomp.CheckLevel var24 = var1.getErrorLevel(var21);
// 
//   }

  public void test242() {}
//   public void test242() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test242"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     java.io.PrintStream var3 = null;
//     com.google.javascript.jscomp.PrintStreamErrorManager var4 = new com.google.javascript.jscomp.PrintStreamErrorManager((com.google.javascript.jscomp.MessageFormatter)var2, var3);
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var4);
//     com.google.javascript.jscomp.CodingConvention var6 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var7 = new com.google.javascript.jscomp.ClosureCodingConvention(var6);
//     com.google.javascript.rhino.ErrorReporter var8 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
//     com.google.javascript.rhino.ErrorReporter var10 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10, true);
//     com.google.javascript.rhino.jstype.JSType var13 = null;
//     boolean var15 = var12.canPropertyBeDefined(var13, "hi!");
//     boolean var17 = var12.hasNamespace("");
//     com.google.javascript.rhino.jstype.FunctionBuilder var18 = new com.google.javascript.rhino.jstype.FunctionBuilder(var12);
//     com.google.javascript.rhino.ErrorReporter var19 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19, true);
//     com.google.javascript.rhino.ErrorReporter var22 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22, true);
//     com.google.javascript.rhino.jstype.ObjectType var25 = var24.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var26 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26, true);
//     com.google.javascript.rhino.jstype.ObjectType var29 = var28.createAnonymousObjectType();
//     boolean var30 = var29.isUnknownType();
//     boolean var31 = var25.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var29);
//     boolean var32 = var29.isFunctionPrototypeType();
//     var29.clearCachedValues();
//     com.google.javascript.rhino.jstype.ObjectType var34 = var29.dereference();
//     com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var34};
//     com.google.javascript.rhino.jstype.JSType var36 = var21.createUnionType(var35);
//     com.google.javascript.rhino.ErrorReporter var37 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37, true);
//     com.google.javascript.rhino.ErrorReporter var40 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40, true);
//     com.google.javascript.rhino.jstype.ObjectType var43 = var42.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var44 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var44, true);
//     com.google.javascript.rhino.jstype.ObjectType var47 = var46.createAnonymousObjectType();
//     boolean var48 = var47.isUnknownType();
//     boolean var49 = var43.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var47);
//     boolean var50 = var47.isFunctionPrototypeType();
//     var47.clearCachedValues();
//     com.google.javascript.rhino.jstype.ObjectType var52 = var47.dereference();
//     com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
//     com.google.javascript.rhino.jstype.JSType var54 = var39.createUnionType(var53);
//     com.google.javascript.rhino.jstype.FunctionType var55 = var12.createFunctionTypeWithVarArgs(var36, var53);
//     com.google.javascript.rhino.jstype.JSType[] var56 = new com.google.javascript.rhino.jstype.JSType[] { var36};
//     com.google.javascript.rhino.Node var57 = var9.createParameters(var56);
//     com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var58 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var7, var9);
//     com.google.javascript.rhino.ErrorReporter var59 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var59, true);
//     com.google.javascript.rhino.jstype.JSType var62 = null;
//     boolean var64 = var61.canPropertyBeDefined(var62, "hi!");
//     boolean var66 = var61.hasNamespace("");
//     com.google.javascript.jscomp.CheckLevel var67 = null;
//     com.google.javascript.jscomp.CheckLevel var68 = null;
//     com.google.javascript.jscomp.TypeCheck var69 = new com.google.javascript.jscomp.TypeCheck((com.google.javascript.jscomp.AbstractCompiler)var5, (com.google.javascript.jscomp.type.ReverseAbstractInterpreter)var58, var61, var67, var68);
// 
//   }

  public void test243() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test243"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    boolean var5 = var2.canPropertyBeDefined(var3, "hi!");
    boolean var7 = var2.hasNamespace("");
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8, true);
    com.google.javascript.rhino.jstype.ObjectType var11 = var10.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12, true);
    com.google.javascript.rhino.jstype.ObjectType var15 = var14.createAnonymousObjectType();
    boolean var16 = var15.isUnknownType();
    boolean var17 = var11.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var15);
    boolean var18 = var15.isFunctionPrototypeType();
    var2.resolveTypesInScope((com.google.javascript.rhino.jstype.StaticScope)var15);
    boolean var20 = var15.canBeCalled();
    boolean var21 = var15.isNativeObjectType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test244() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test244"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.exprResult(var4);
    int var6 = var5.getSideEffectFlags();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.var(var5);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test245() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test245"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    var2.setCrossModuleCodeMotion(false);
    var2.setLabelRenaming(true);
    java.util.Set var7 = null;
    var2.setStripTypePrefixes(var7);
    var1.initOptions(var2);
    boolean var10 = var1.acceptConstKeyword();
    com.google.javascript.jscomp.JSModule var11 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String[] var12 = var1.toSourceArray(var11);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test246() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test246"); }


    boolean var1 = com.google.javascript.jscomp.NodeUtil.isValidQualifiedName("Node tree inequality:\nTree1:\nNUMBER 10.0\n\n\nTree2:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree1: NUMBER 10.0\n\n\nSubtree2: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test247() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test247"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    boolean var2 = var1.isLabel();
    java.nio.charset.Charset var4 = null;
    com.google.javascript.jscomp.SourceFile var5 = com.google.javascript.jscomp.SourceFile.fromFile("NUMBER 10.0", var4);
    var1.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var5);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.number(10.0d);
    boolean var9 = var8.isLabel();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = var11.useSourceInfoIfMissingFrom(var13);
    boolean var15 = var13.isFalse();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.sheq(var8, var13);
    java.lang.Iterable var17 = var13.siblings();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.and(var1, var13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test248() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test248"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    boolean var5 = var3.isSetterDef();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var10 = var7.useSourceInfoIfMissingFrom(var9);
    var3.addChildrenToFront(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.empty();
    com.google.javascript.jscomp.DiagnosticType var19 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
    java.lang.String[] var21 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var22 = com.google.javascript.jscomp.JSError.make("", 1, 39, var19, var21);
    com.google.javascript.jscomp.CheckLevel var26 = null;
    com.google.javascript.jscomp.DiagnosticType var29 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
    com.google.javascript.jscomp.DiagnosticType var35 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
    java.lang.String[] var37 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var38 = com.google.javascript.jscomp.JSError.make("", 1, 39, var35, var37);
    com.google.javascript.jscomp.JSError var39 = com.google.javascript.jscomp.JSError.make("hi!", 100, 100, var26, var29, var37);
    com.google.javascript.jscomp.JSError var40 = com.google.javascript.jscomp.JSError.make("NUMBER 10.0\n", var13, var19, var37);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.caseNode(var9, var13);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test249() {}
//   public void test249() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test249"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.JSModule var4 = var3.getModule();
//     java.util.Collection var5 = var3.getRequires();
// 
//   }

  public void test250() {}
//   public void test250() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test250"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
//     com.google.javascript.rhino.jstype.ObjectType var3 = var2.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4, true);
//     com.google.javascript.rhino.jstype.ObjectType var7 = var6.createAnonymousObjectType();
//     boolean var8 = var7.isUnknownType();
//     boolean var9 = var3.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var7);
//     boolean var10 = var3.isBooleanValueType();
//     com.google.javascript.rhino.ErrorReporter var11 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11, true);
//     com.google.javascript.rhino.ErrorReporter var14 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14, true);
//     com.google.javascript.rhino.jstype.ObjectType var17 = var16.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var18 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18, true);
//     com.google.javascript.rhino.jstype.ObjectType var21 = var20.createAnonymousObjectType();
//     boolean var22 = var21.isUnknownType();
//     boolean var23 = var17.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var21);
//     boolean var24 = var21.isFunctionPrototypeType();
//     var21.clearCachedValues();
//     com.google.javascript.rhino.jstype.ObjectType var26 = var21.dereference();
//     com.google.javascript.rhino.jstype.JSType[] var27 = new com.google.javascript.rhino.jstype.JSType[] { var26};
//     com.google.javascript.rhino.jstype.JSType var28 = var13.createUnionType(var27);
//     com.google.javascript.rhino.ErrorReporter var29 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29, true);
//     com.google.javascript.rhino.jstype.JSType var32 = null;
//     boolean var34 = var31.canPropertyBeDefined(var32, "hi!");
//     boolean var36 = var31.hasNamespace("");
//     com.google.javascript.rhino.jstype.FunctionBuilder var37 = new com.google.javascript.rhino.jstype.FunctionBuilder(var31);
//     com.google.javascript.rhino.jstype.FunctionBuilder var39 = var37.withName("NUMBER 10.0\n");
//     com.google.javascript.rhino.ErrorReporter var40 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40, true);
//     com.google.javascript.rhino.jstype.ObjectType var43 = var42.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var44 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var44, true);
//     com.google.javascript.rhino.jstype.ObjectType var47 = var46.createAnonymousObjectType();
//     boolean var48 = var47.isUnknownType();
//     boolean var49 = var43.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var47);
//     boolean var50 = var47.isFunctionPrototypeType();
//     com.google.javascript.rhino.jstype.FunctionBuilder var52 = var39.withReturnType((com.google.javascript.rhino.jstype.JSType)var47, true);
//     com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var56 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var57 = var54.useSourceInfoIfMissingFrom(var56);
//     com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.eq(var56, var59);
//     com.google.javascript.rhino.Node var61 = var56.cloneNode();
//     boolean var62 = var61.isOr();
//     com.google.javascript.rhino.jstype.StaticSourceFile var63 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var61);
//     boolean var64 = var61.isDec();
//     boolean var65 = var61.isFor();
//     boolean var66 = var61.isNoSideEffectsCall();
//     com.google.javascript.rhino.jstype.FunctionType var67 = var13.createFunctionType((com.google.javascript.rhino.jstype.JSType)var47, var61);
//     boolean var68 = var3.differsFrom((com.google.javascript.rhino.jstype.JSType)var47);
//     com.google.javascript.rhino.jstype.JSType var69 = null;
//     com.google.javascript.rhino.jstype.JSType var70 = var3.getLeastSupertype(var69);
// 
//   }

  public void test251() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test251"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    com.google.javascript.rhino.Node var8 = var3.cloneNode();
    boolean var9 = var3.isDelProp();
    boolean var10 = var3.isIf();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.paramList(var3);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test252() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test252"); }


    com.google.javascript.jscomp.CodingConvention var0 = null;
    com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = null;
    com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var3 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var1, var2);
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var8 = var5.useSourceInfoIfMissingFrom(var7);
    boolean var9 = var7.isSetterDef();
    boolean var10 = var7.isNoSideEffectsCall();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var15 = var12.useSourceInfoIfMissingFrom(var14);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.eq(var14, var17);
    com.google.javascript.rhino.Node var19 = var14.cloneNode();
    boolean var20 = var19.isOr();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var25 = var22.useSourceInfoIfMissingFrom(var24);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.eq(var24, var27);
    com.google.javascript.rhino.Node var29 = var24.cloneNode();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.or(var19, var29);
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.voidNode(var30);
    com.google.javascript.rhino.Node var32 = var7.srcref(var30);
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var37 = var34.useSourceInfoIfMissingFrom(var36);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.exprResult(var37);
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.block(var38);
    com.google.javascript.rhino.InputId var40 = null;
    var38.setInputId(var40);
    java.lang.String var42 = var1.extractClassNameIfRequire(var32, var38);
    int var43 = var38.getSideEffectFlags();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);

  }

  public void test253() {}
//   public void test253() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test253"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.JSModule var4 = var3.getModule();
//     com.google.javascript.jscomp.SourceAst var5 = var3.getAst();
//     java.lang.String var6 = var3.getCode();
// 
//   }

  public void test254() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test254"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    var1.markTypeNode(var3, 10, 100, 100, 0, true);
    var3.addSuppression("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test255() {}
//   public void test255() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test255"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var5 = var2.useSourceInfoIfMissingFrom(var4);
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.eq(var4, var7);
//     var8.setSourceEncodedPosition(100);
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var15 = var12.useSourceInfoIfMissingFrom(var14);
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.eq(var14, var17);
//     com.google.javascript.rhino.Node var19 = var14.cloneNode();
//     boolean var20 = var19.isOr();
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var25 = var22.useSourceInfoIfMissingFrom(var24);
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.eq(var24, var27);
//     com.google.javascript.rhino.Node var29 = var24.cloneNode();
//     com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.or(var19, var29);
//     com.google.javascript.rhino.Node var31 = var8.useSourceInfoFromForTree(var19);
//     boolean var32 = var31.isScript();
//     com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.catchNode(var0, var31);
// 
//   }

  public void test256() {}
//   public void test256() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test256"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = null;
//     com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var3 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var1, var2);
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var8 = var5.useSourceInfoIfMissingFrom(var7);
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.eq(var7, var10);
//     var11.setSourceEncodedPosition(100);
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var18 = var15.useSourceInfoIfMissingFrom(var17);
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.eq(var17, var20);
//     com.google.javascript.rhino.Node var22 = var17.cloneNode();
//     boolean var23 = var22.isOr();
//     com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var28 = var25.useSourceInfoIfMissingFrom(var27);
//     com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.eq(var27, var30);
//     com.google.javascript.rhino.Node var32 = var27.cloneNode();
//     com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.or(var22, var32);
//     com.google.javascript.rhino.Node var34 = var11.useSourceInfoFromForTree(var22);
//     com.google.javascript.rhino.Node var35 = var11.removeFirstChild();
//     com.google.javascript.jscomp.CodingConvention var36 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var37 = new com.google.javascript.jscomp.ClosureCodingConvention(var36);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var38 = null;
//     com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var39 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var37, var38);
//     com.google.javascript.jscomp.ClosureCodingConvention var40 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var37);
//     com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var45 = var42.useSourceInfoIfMissingFrom(var44);
//     com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.eq(var44, var47);
//     com.google.javascript.rhino.Node var49 = var44.cloneNode();
//     boolean var50 = var49.isOr();
//     com.google.javascript.rhino.jstype.StaticSourceFile var51 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var49);
//     boolean var52 = var49.isDec();
//     boolean var53 = var49.isFor();
//     boolean var54 = var37.isVarArgsParameter(var49);
//     boolean var55 = var49.isEmpty();
//     boolean var56 = var35.hasChild(var49);
//     com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var61 = var58.useSourceInfoIfMissingFrom(var60);
//     com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var64 = com.google.javascript.rhino.IR.eq(var60, var63);
//     com.google.javascript.rhino.Node var65 = var60.cloneNode();
//     boolean var66 = var65.isOr();
//     com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var71 = var68.useSourceInfoIfMissingFrom(var70);
//     com.google.javascript.rhino.Node var73 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var74 = com.google.javascript.rhino.IR.eq(var70, var73);
//     com.google.javascript.rhino.Node var75 = var70.cloneNode();
//     com.google.javascript.rhino.Node var76 = com.google.javascript.rhino.IR.or(var65, var75);
//     int var77 = var65.getCharno();
//     java.lang.String var78 = var1.extractClassNameIfRequire(var35, var65);
//     java.lang.String var79 = var1.getGlobalObject();
//     com.google.javascript.rhino.Node var81 = com.google.javascript.rhino.IR.number(10.0d);
//     boolean var82 = var81.isLabel();
//     com.google.javascript.rhino.Node var84 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var86 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var87 = var84.useSourceInfoIfMissingFrom(var86);
//     boolean var88 = var86.isFalse();
//     com.google.javascript.rhino.Node var89 = com.google.javascript.rhino.IR.sheq(var81, var86);
//     boolean var90 = var81.isTrue();
//     java.lang.String var91 = var1.getSingletonGetterClassName(var81);
// 
//   }

  public void test257() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test257"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.jstype.ObjectType var3 = var2.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4, true);
    com.google.javascript.rhino.jstype.ObjectType var7 = var6.createAnonymousObjectType();
    boolean var8 = var7.isUnknownType();
    boolean var9 = var3.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var7);
    boolean var10 = var3.isBooleanValueType();
    com.google.javascript.rhino.jstype.JSType var12 = null;
    com.google.javascript.jscomp.DiagnosticType var15 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0\n", "NUMBER 10.0\n");
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var20 = var17.useSourceInfoIfMissingFrom(var19);
    boolean var21 = var19.isSetterDef();
    boolean var22 = var19.isNoSideEffectsCall();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var27 = var24.useSourceInfoIfMissingFrom(var26);
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.eq(var26, var29);
    com.google.javascript.rhino.Node var31 = var26.cloneNode();
    boolean var32 = var31.isOr();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var37 = var34.useSourceInfoIfMissingFrom(var36);
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.eq(var36, var39);
    com.google.javascript.rhino.Node var41 = var36.cloneNode();
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.or(var31, var41);
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.voidNode(var42);
    com.google.javascript.rhino.Node var44 = var19.srcref(var42);
    boolean var45 = var15.equals((java.lang.Object)var42);
    boolean var46 = var3.defineDeclaredProperty("NUMBER 10.0\n", var12, var42);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.throwNode(var42);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);

  }

  public void test258() {}
//   public void test258() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test258"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
//     boolean var4 = var3.isLabel();
//     java.nio.charset.Charset var6 = null;
//     com.google.javascript.jscomp.SourceFile var7 = com.google.javascript.jscomp.SourceFile.fromFile("NUMBER 10.0", var6);
//     var3.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var7);
//     java.nio.charset.Charset var10 = null;
//     com.google.javascript.jscomp.SourceFile var11 = com.google.javascript.jscomp.SourceFile.fromFile("NUMBER 10.0", var10);
//     com.google.javascript.jscomp.Region var13 = var11.getRegion(100);
//     java.lang.String var14 = var11.toString();
//     com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
//     var15.setCrossModuleCodeMotion(false);
//     com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var18 = null;
//     var15.setAnonymousFunctionNaming(var18);
//     var15.setExtractPrototypeMemberDeclarations(true);
//     var15.setRemoveTryCatchFinally(true);
//     var15.setFoldConstants(false);
//     var15.setInlineGetters(false);
//     com.google.javascript.jscomp.Result var28 = var1.compile(var7, var11, var15);
//     com.google.javascript.jscomp.JSSourceFile[] var29 = null;
//     com.google.javascript.jscomp.JSModule var30 = null;
//     com.google.javascript.jscomp.JSModule[] var31 = new com.google.javascript.jscomp.JSModule[] { var30};
//     com.google.javascript.jscomp.CompilerOptions var32 = new com.google.javascript.jscomp.CompilerOptions();
//     var32.setTweakToNumberLiteral("", 1);
//     var32.setInlineVariables(false);
//     com.google.javascript.jscomp.CompilerOptions.TracerMode var38 = var32.getTracerMode();
//     var32.setPrintInputDelimiter(false);
//     var32.setCheckMissingGetCssNameBlacklist("");
//     var32.setCollapseObjectLiterals(false);
//     var32.setLooseTypes(true);
//     var32.setCollapsePropertiesOnExternTypes(false);
//     var32.setSyntheticBlockEndMarker("{1459695149}");
//     com.google.javascript.jscomp.Result var51 = var1.compile(var29, var31, var32);
// 
//   }

  public void test259() {}
//   public void test259() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test259"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     com.google.javascript.jscomp.JSSourceFile var3 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var4 = new com.google.javascript.jscomp.JSSourceFile[] { var3};
//     com.google.javascript.jscomp.JSSourceFile var5 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var6 = new com.google.javascript.jscomp.JSSourceFile[] { var5};
//     com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
//     var7.setSourceMapOutputPath("hi!");
//     var7.setReplaceStringsPlaceholderToken("hi!");
//     var7.setIdeMode(false);
//     var7.setAliasExternals(true);
//     com.google.javascript.jscomp.Result var16 = var1.compile(var4, var6, var7);
// 
//   }

  public void test260() {}
//   public void test260() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test260"); }
// 
// 
//     java.util.List var0 = null;
//     com.google.javascript.jscomp.ComposeWarningsGuard var1 = new com.google.javascript.jscomp.ComposeWarningsGuard(var0);
// 
//   }

  public void test261() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test261"); }


    com.google.javascript.jscomp.PropertyRenamingPolicy[] var0 = com.google.javascript.jscomp.PropertyRenamingPolicy.values();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test262() {}
//   public void test262() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test262"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var0);
// 
//   }

  public void test263() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test263"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setCrossModuleCodeMotion(false);
    com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var3 = null;
    var0.setAnonymousFunctionNaming(var3);
    var0.setExtractPrototypeMemberDeclarations(true);
    var0.setRemoveTryCatchFinally(true);
    var0.setSyntheticBlockStartMarker("hi!");
    boolean var11 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CheckLevel var12 = null;
    var0.setCheckUnreachableCode(var12);
    com.google.javascript.jscomp.SourceMap.Format var14 = null;
    var0.setSourceMapFormat(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test264() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test264"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordIdGenerator();
    boolean var3 = var1.recordConstructor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test265() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test265"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    com.google.javascript.rhino.Node var8 = var3.cloneNode();
    boolean var9 = var8.isOr();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = var11.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.eq(var13, var16);
    com.google.javascript.rhino.Node var18 = var13.cloneNode();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.or(var8, var18);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.voidNode(var19);
    com.google.javascript.rhino.Node var21 = var20.getFirstChild();
    boolean var22 = var21.isNE();
    boolean var23 = var21.isComma();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test266() {}
//   public void test266() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test266"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.JSModule var4 = var3.getModule();
//     com.google.javascript.jscomp.SourceAst var5 = var3.getAst();
//     int var7 = var3.getLineOffset(1);
// 
//   }

  public void test267() {}
//   public void test267() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test267"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.SourceMap var2 = var1.getSourceMap();
//     java.io.PrintStream var3 = null;
//     com.google.javascript.jscomp.Compiler var4 = new com.google.javascript.jscomp.Compiler(var3);
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var4);
//     java.io.PrintStream var6 = null;
//     com.google.javascript.jscomp.PrintStreamErrorManager var7 = new com.google.javascript.jscomp.PrintStreamErrorManager((com.google.javascript.jscomp.MessageFormatter)var5, var6);
//     java.io.PrintStream var8 = null;
//     com.google.javascript.jscomp.PrintStreamErrorManager var9 = new com.google.javascript.jscomp.PrintStreamErrorManager((com.google.javascript.jscomp.MessageFormatter)var5, var8);
//     var1.setErrorManager((com.google.javascript.jscomp.ErrorManager)var9);
//     var1.check();
// 
//   }

  public void test268() {}
//   public void test268() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test268"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setCrossModuleCodeMotion(false);
//     var0.setLabelRenaming(true);
//     java.util.Set var5 = null;
//     var0.setStripTypePrefixes(var5);
//     com.google.javascript.jscomp.DependencyOptions var7 = null;
//     var0.setDependencyOptions(var7);
// 
//   }

  public void test269() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test269"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordIdGenerator();
    boolean var3 = var1.recordNoTypeCheck();
    boolean var4 = var1.recordIdGenerator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test270() {}
//   public void test270() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test270"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
//     com.google.javascript.rhino.ErrorReporter var3 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3, true);
//     com.google.javascript.rhino.jstype.ObjectType var6 = var5.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var7 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7, true);
//     com.google.javascript.rhino.jstype.ObjectType var10 = var9.createAnonymousObjectType();
//     boolean var11 = var10.isUnknownType();
//     boolean var12 = var6.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var10);
//     boolean var13 = var10.isFunctionPrototypeType();
//     var10.clearCachedValues();
//     com.google.javascript.rhino.jstype.ObjectType var15 = var10.dereference();
//     com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var15};
//     com.google.javascript.rhino.jstype.JSType var17 = var2.createUnionType(var16);
//     com.google.javascript.rhino.ErrorReporter var18 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18, true);
//     com.google.javascript.rhino.jstype.JSType var21 = null;
//     boolean var23 = var20.canPropertyBeDefined(var21, "hi!");
//     boolean var25 = var20.hasNamespace("");
//     com.google.javascript.rhino.jstype.FunctionBuilder var26 = new com.google.javascript.rhino.jstype.FunctionBuilder(var20);
//     com.google.javascript.rhino.jstype.FunctionBuilder var28 = var26.withName("NUMBER 10.0\n");
//     com.google.javascript.rhino.ErrorReporter var29 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29, true);
//     com.google.javascript.rhino.jstype.ObjectType var32 = var31.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var33 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33, true);
//     com.google.javascript.rhino.jstype.ObjectType var36 = var35.createAnonymousObjectType();
//     boolean var37 = var36.isUnknownType();
//     boolean var38 = var32.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var36);
//     boolean var39 = var36.isFunctionPrototypeType();
//     com.google.javascript.rhino.jstype.FunctionBuilder var41 = var28.withReturnType((com.google.javascript.rhino.jstype.JSType)var36, true);
//     com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var46 = var43.useSourceInfoIfMissingFrom(var45);
//     com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.eq(var45, var48);
//     com.google.javascript.rhino.Node var50 = var45.cloneNode();
//     boolean var51 = var50.isOr();
//     com.google.javascript.rhino.jstype.StaticSourceFile var52 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var50);
//     boolean var53 = var50.isDec();
//     boolean var54 = var50.isFor();
//     boolean var55 = var50.isNoSideEffectsCall();
//     com.google.javascript.rhino.jstype.FunctionType var56 = var2.createFunctionType((com.google.javascript.rhino.jstype.JSType)var36, var50);
//     com.google.javascript.rhino.jstype.ObjectType var57 = var56.getTypeOfThis();
//     java.lang.String var58 = var56.toDebugHashCodeString();
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       com.google.javascript.rhino.jstype.ObjectType var59 = var56.getInstanceType();
//       fail("Expected exception of type java.lang.IllegalStateException");
//     } catch (java.lang.IllegalStateException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var11 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var13 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var23 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var25 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var37 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var38 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var39 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var45);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var49);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var51 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var52);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var53 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var54 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var55 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var57);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var58 + "' != '" + "function (): {1887958978}"+ "'", var58.equals("function (): {1887958978}"));
// 
//   }

  public void test271() {}
//   public void test271() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test271"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.JSSourceFile var2 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var3 = new com.google.javascript.jscomp.JSSourceFile[] { var2};
//     com.google.javascript.jscomp.JSModule[] var4 = null;
//     com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
//     var5.setCrossModuleCodeMotion(false);
//     com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var8 = null;
//     var5.setAnonymousFunctionNaming(var8);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var10 = var5.getTweakProcessing();
//     var5.setExternExportsPath("");
//     var1.init(var3, var4, var5);
// 
//   }

  public void test272() {}
//   public void test272() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test272"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setTweakToNumberLiteral("", 1);
//     var0.setRuntimeTypeCheck(true);
//     java.util.Set var6 = null;
//     var0.setExtraAnnotationNames(var6);
// 
//   }

  public void test273() {}
//   public void test273() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test273"); }
// 
// 
//     com.google.javascript.jscomp.JSModule[] var0 = null;
//     com.google.javascript.jscomp.JSModuleGraph var1 = new com.google.javascript.jscomp.JSModuleGraph(var0);
// 
//   }

  public void test274() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test274"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var5 = var2.useSourceInfoIfMissingFrom(var4);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.eq(var4, var7);
    com.google.javascript.rhino.Node var9 = var4.cloneNode();
    com.google.javascript.jscomp.DiagnosticType var12 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0\n", "NUMBER 10.0\n");
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var17 = var14.useSourceInfoIfMissingFrom(var16);
    boolean var18 = var16.isSetterDef();
    boolean var19 = var16.isNoSideEffectsCall();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = var21.useSourceInfoIfMissingFrom(var23);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.eq(var23, var26);
    com.google.javascript.rhino.Node var28 = var23.cloneNode();
    boolean var29 = var28.isOr();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var34 = var31.useSourceInfoIfMissingFrom(var33);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.eq(var33, var36);
    com.google.javascript.rhino.Node var38 = var33.cloneNode();
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.or(var28, var38);
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.voidNode(var39);
    com.google.javascript.rhino.Node var41 = var16.srcref(var39);
    boolean var42 = var12.equals((java.lang.Object)var39);
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.number(10.0d);
    boolean var45 = var44.isLabel();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var50 = var47.useSourceInfoIfMissingFrom(var49);
    boolean var51 = var49.isFalse();
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.sheq(var44, var49);
    com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.IR.block();
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var58 = var55.useSourceInfoIfMissingFrom(var57);
    com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var61 = var58.copyInformationFrom(var60);
    boolean var62 = var53.isEquivalentToTyped(var61);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var63 = new com.google.javascript.rhino.Node(10, var4, var39, var49, var53);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test275() {}
//   public void test275() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test275"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.falseNode();
//     com.google.javascript.rhino.Node.SideEffectFlags var1 = null;
//     var0.setSideEffectFlags(var1);
// 
//   }

  public void test276() {}
//   public void test276() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test276"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = null;
//     com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var3 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var1, var2);
//     com.google.javascript.jscomp.ClosureCodingConvention var4 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var1);
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var9 = var6.useSourceInfoIfMissingFrom(var8);
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.eq(var8, var11);
//     com.google.javascript.rhino.Node var13 = var8.cloneNode();
//     boolean var14 = var13.isOr();
//     com.google.javascript.rhino.jstype.StaticSourceFile var15 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var13);
//     boolean var16 = var13.isDec();
//     boolean var17 = var13.isFor();
//     boolean var18 = var1.isVarArgsParameter(var13);
//     java.lang.String var19 = var1.getExportSymbolFunction();
//     com.google.javascript.rhino.Node var20 = null;
//     boolean var21 = var1.isPrototypeAlias(var20);
//     com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var26 = var23.useSourceInfoIfMissingFrom(var25);
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.exprResult(var26);
//     com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.block(var27);
//     com.google.javascript.jscomp.CodingConvention.Bind var29 = var1.describeFunctionBind(var27);
// 
//   }

  public void test277() {}
//   public void test277() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test277"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
//     boolean var4 = var3.isLabel();
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var9 = var6.useSourceInfoIfMissingFrom(var8);
//     boolean var10 = var8.isFalse();
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.sheq(var3, var8);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.Node.newString(0, "hi!");
//     java.lang.String var15 = var1.extractClassNameIfRequire(var3, var14);
//     boolean var16 = var14.isParamList();
//     java.lang.String var17 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var14);
// 
//   }

  public void test278() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test278"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setCrossModuleCodeMotion(false);
    com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var3 = null;
    var0.setAnonymousFunctionNaming(var3);
    var0.setExtractPrototypeMemberDeclarations(true);
    var0.setRemoveTryCatchFinally(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var9 = null;
    var0.setTweakProcessing(var9);
    var0.setRemoveUnusedVars(false);
    var0.setManageClosureDependencies(false);

  }

  public void test279() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test279"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    boolean var5 = var3.isOr();
    int var6 = var3.getChildCount();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var11 = var8.useSourceInfoIfMissingFrom(var10);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.eq(var10, var13);
    com.google.javascript.rhino.Node var15 = var10.cloneNode();
    boolean var16 = var15.isOr();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var21 = var18.useSourceInfoIfMissingFrom(var20);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.eq(var20, var23);
    com.google.javascript.rhino.Node var25 = var20.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.or(var15, var25);
    com.google.javascript.rhino.Node var27 = var3.srcrefTree(var26);
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var32 = var29.useSourceInfoIfMissingFrom(var31);
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.exprResult(var32);
    boolean var34 = var32.isOptionalArg();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.comma(var26, var32);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test280() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test280"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.jstype.ObjectType var3 = var2.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4, true);
    com.google.javascript.rhino.jstype.ObjectType var7 = var6.createAnonymousObjectType();
    boolean var8 = var7.isUnknownType();
    boolean var9 = var3.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var7);
    boolean var10 = var3.isBooleanValueType();
    com.google.javascript.rhino.jstype.JSType var12 = null;
    com.google.javascript.jscomp.DiagnosticType var15 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0\n", "NUMBER 10.0\n");
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var20 = var17.useSourceInfoIfMissingFrom(var19);
    boolean var21 = var19.isSetterDef();
    boolean var22 = var19.isNoSideEffectsCall();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var27 = var24.useSourceInfoIfMissingFrom(var26);
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.eq(var26, var29);
    com.google.javascript.rhino.Node var31 = var26.cloneNode();
    boolean var32 = var31.isOr();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var37 = var34.useSourceInfoIfMissingFrom(var36);
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.eq(var36, var39);
    com.google.javascript.rhino.Node var41 = var36.cloneNode();
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.or(var31, var41);
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.voidNode(var42);
    com.google.javascript.rhino.Node var44 = var19.srcref(var42);
    boolean var45 = var15.equals((java.lang.Object)var42);
    boolean var46 = var3.defineDeclaredProperty("NUMBER 10.0\n", var12, var42);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.breakNode(var42);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);

  }

  public void test281() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test281"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3, true);
    com.google.javascript.rhino.jstype.ObjectType var6 = var5.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var7 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7, true);
    com.google.javascript.rhino.jstype.ObjectType var10 = var9.createAnonymousObjectType();
    boolean var11 = var10.isUnknownType();
    boolean var12 = var6.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var10);
    boolean var13 = var10.isFunctionPrototypeType();
    var10.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var15 = var10.dereference();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var15};
    com.google.javascript.rhino.jstype.JSType var17 = var2.createUnionType(var16);
    boolean var19 = var2.isForwardDeclaredType("{1459695149}");
    com.google.javascript.jscomp.CodingConvention var20 = null;
    com.google.javascript.jscomp.ClosureCodingConvention var21 = new com.google.javascript.jscomp.ClosureCodingConvention(var20);
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = null;
    com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var23 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var21, var22);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var28 = var25.useSourceInfoIfMissingFrom(var27);
    boolean var29 = var27.isSetterDef();
    boolean var30 = var27.isNoSideEffectsCall();
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var35 = var32.useSourceInfoIfMissingFrom(var34);
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.eq(var34, var37);
    com.google.javascript.rhino.Node var39 = var34.cloneNode();
    boolean var40 = var39.isOr();
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var45 = var42.useSourceInfoIfMissingFrom(var44);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.eq(var44, var47);
    com.google.javascript.rhino.Node var49 = var44.cloneNode();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.or(var39, var49);
    com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.voidNode(var50);
    com.google.javascript.rhino.Node var52 = var27.srcref(var50);
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var56 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var57 = var54.useSourceInfoIfMissingFrom(var56);
    com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.exprResult(var57);
    com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.IR.block(var58);
    com.google.javascript.rhino.InputId var60 = null;
    var58.setInputId(var60);
    java.lang.String var62 = var21.extractClassNameIfRequire(var52, var58);
    com.google.javascript.rhino.ErrorReporter var64 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var64, true);
    com.google.javascript.rhino.jstype.ObjectType var67 = var66.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var68 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var68, true);
    com.google.javascript.rhino.jstype.ObjectType var71 = var70.createAnonymousObjectType();
    boolean var72 = var71.isUnknownType();
    boolean var73 = var67.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var71);
    boolean var74 = var67.isStringValueType();
    com.google.javascript.rhino.jstype.ObjectType var75 = var67.dereference();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.JSType var76 = var2.createFromTypeNodes(var58, "module$null(null)", (com.google.javascript.rhino.jstype.StaticScope)var67);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test282() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test282"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var5 = var2.useSourceInfoIfMissingFrom(var4);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.eq(var4, var7);
    com.google.javascript.rhino.Node var9 = var4.cloneNode();
    boolean var10 = var9.isOr();
    com.google.javascript.rhino.jstype.StaticSourceFile var11 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var9);
    boolean var12 = var9.isDec();
    var9.setVarArgs(true);
    com.google.javascript.rhino.Node var17 = new com.google.javascript.rhino.Node(0, var9, (-1), (-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.defaultCase(var9);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test283() {}
//   public void test283() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test283"); }
// 
// 
//     com.google.javascript.jscomp.CheckLevel var3 = null;
//     com.google.javascript.jscomp.DiagnosticType var6 = com.google.javascript.jscomp.DiagnosticType.warning("{505847021}", "{505847021}");
//     com.google.javascript.jscomp.DiagnosticType var12 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
//     java.lang.String[] var14 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var15 = com.google.javascript.jscomp.JSError.make("", 1, 39, var12, var14);
//     com.google.javascript.jscomp.ShowByPathWarningsGuard var16 = new com.google.javascript.jscomp.ShowByPathWarningsGuard(var14);
//     com.google.javascript.jscomp.JSError var17 = com.google.javascript.jscomp.JSError.make("Node tree inequality:\nTree1:\nNUMBER 10.0\n\n\nTree2:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree1: NUMBER 10.0\n\n\nSubtree2: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n", (-1), 10, var3, var6, var14);
//     com.google.javascript.rhino.ErrorReporter var18 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18, true);
//     com.google.javascript.rhino.jstype.ObjectType var21 = var20.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var22 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22, true);
//     com.google.javascript.rhino.jstype.ObjectType var25 = var24.createAnonymousObjectType();
//     boolean var26 = var25.isUnknownType();
//     boolean var27 = var21.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var25);
//     boolean var28 = var25.isFunctionPrototypeType();
//     var25.clearCachedValues();
//     com.google.javascript.rhino.Node var31 = var25.getPropertyNode("NUMBER 10.0\n");
//     boolean var32 = var17.equals((java.lang.Object)var25);
//     com.google.javascript.jscomp.CheckLevel var33 = null;
//     java.io.PrintStream var34 = null;
//     com.google.javascript.jscomp.Compiler var35 = new com.google.javascript.jscomp.Compiler(var34);
//     com.google.javascript.jscomp.LightweightMessageFormatter var36 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var35);
//     java.lang.String var37 = var17.format(var33, (com.google.javascript.jscomp.MessageFormatter)var36);
// 
//   }

  public void test284() {}
//   public void test284() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test284"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
//     var2.setCrossModuleCodeMotion(false);
//     var2.setLabelRenaming(true);
//     java.util.Set var7 = null;
//     var2.setStripTypePrefixes(var7);
//     var1.initOptions(var2);
//     boolean var10 = var1.acceptConstKeyword();
//     com.google.javascript.jscomp.CodingConvention var11 = var1.getCodingConvention();
//     boolean var12 = var1.acceptConstKeyword();
//     com.google.javascript.jscomp.ErrorManager var13 = null;
//     var1.setErrorManager(var13);
// 
//   }

  public void test285() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test285"); }


    com.google.javascript.jscomp.SourceFile.Builder var0 = com.google.javascript.jscomp.SourceFile.builder();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test286() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test286"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var1 = com.google.javascript.rhino.ScriptRuntime.getMessage0("Node tree inequality:\nTree1:\nNUMBER 10.0\n\n\nTree2:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree1: NUMBER 10.0\n\n\nSubtree2: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test287() {}
//   public void test287() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test287"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setCrossModuleCodeMotion(false);
//     com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var3 = null;
//     var0.setAnonymousFunctionNaming(var3);
//     var0.setExtractPrototypeMemberDeclarations(true);
//     var0.setRemoveTryCatchFinally(true);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var9 = null;
//     var0.setTweakProcessing(var9);
//     var0.setRemoveUnusedVars(false);
//     var0.enableRuntimeTypeCheck("{1125981799}");
//     java.util.Set var15 = null;
//     var0.setExtraAnnotationNames(var15);
// 
//   }

  public void test288() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test288"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setTweakToNumberLiteral("", 1);
    com.google.javascript.jscomp.SourceMap.DetailLevel var4 = null;
    var0.setSourceMapDetailLevel(var4);
    var0.setRemoveTryCatchFinally(true);
    com.google.javascript.jscomp.ErrorFormat var8 = null;
    var0.setErrorFormat(var8);

  }

  public void test289() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test289"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    var7.setSourceEncodedPosition(100);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = var11.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.eq(var13, var16);
    com.google.javascript.rhino.Node var18 = var13.cloneNode();
    boolean var19 = var18.isOr();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = var21.useSourceInfoIfMissingFrom(var23);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.eq(var23, var26);
    com.google.javascript.rhino.Node var28 = var23.cloneNode();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.or(var18, var28);
    com.google.javascript.rhino.Node var30 = var7.useSourceInfoFromForTree(var18);
    java.lang.String var31 = com.google.javascript.jscomp.NodeUtil.getSourceName(var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.not(var18);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test290() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test290"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setCrossModuleCodeMotion(false);
    com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var3 = null;
    var0.setAnonymousFunctionNaming(var3);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var5 = var0.getTweakProcessing();
    var0.setAssumeClosuresOnlyCaptureReferences(false);
    var0.setSkipAllPasses(false);
    var0.setUnaliasableGlobals("EMPTY\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test291() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test291"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var5 = var2.useSourceInfoIfMissingFrom(var4);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.eq(var4, var7);
    com.google.javascript.rhino.Node var9 = var4.cloneNode();
    boolean var10 = var9.isOr();
    com.google.javascript.rhino.jstype.StaticSourceFile var11 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var9);
    boolean var12 = var9.isDec();
    var9.setVarArgs(true);
    com.google.javascript.rhino.Node var17 = new com.google.javascript.rhino.Node(0, var9, (-1), (-1));
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var22 = var19.useSourceInfoIfMissingFrom(var21);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.eq(var21, var24);
    var25.setSourceEncodedPosition(100);
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var32 = var29.useSourceInfoIfMissingFrom(var31);
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.eq(var31, var34);
    com.google.javascript.rhino.Node var36 = var31.cloneNode();
    boolean var37 = var36.isOr();
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var42 = var39.useSourceInfoIfMissingFrom(var41);
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.eq(var41, var44);
    com.google.javascript.rhino.Node var46 = var41.cloneNode();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.or(var36, var46);
    com.google.javascript.rhino.Node var48 = var25.useSourceInfoFromForTree(var36);
    com.google.javascript.rhino.Node var49 = var25.removeFirstChild();
    com.google.javascript.jscomp.CodingConvention var50 = null;
    com.google.javascript.jscomp.ClosureCodingConvention var51 = new com.google.javascript.jscomp.ClosureCodingConvention(var50);
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = null;
    com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var53 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var51, var52);
    com.google.javascript.jscomp.ClosureCodingConvention var54 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var51);
    com.google.javascript.rhino.Node var56 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var59 = var56.useSourceInfoIfMissingFrom(var58);
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.eq(var58, var61);
    com.google.javascript.rhino.Node var63 = var58.cloneNode();
    boolean var64 = var63.isOr();
    com.google.javascript.rhino.jstype.StaticSourceFile var65 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var63);
    boolean var66 = var63.isDec();
    boolean var67 = var63.isFor();
    boolean var68 = var51.isVarArgsParameter(var63);
    boolean var69 = var63.isEmpty();
    boolean var70 = var49.hasChild(var63);
    boolean var71 = var63.isTypeOf();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var72 = com.google.javascript.rhino.IR.and(var9, var63);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test292() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test292"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = var4.copyInformationFrom(var6);
    boolean var8 = var7.isTypeOf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test293() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test293"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var1 = com.google.javascript.rhino.ScriptRuntime.getMessage0("ECMASCRIPT3");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test294() {}
//   public void test294() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test294"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     boolean var5 = var2.canPropertyBeDefined(var3, "EMPTY\n");
//     java.util.List var6 = null;
//     com.google.javascript.rhino.Node var7 = var2.createParametersWithVarArgs(var6);
// 
//   }

  public void test295() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test295"); }


    int var1 = com.google.javascript.jscomp.NodeUtil.getInverseOperator(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));

  }

  public void test296() {}
//   public void test296() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test296"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     com.google.javascript.jscomp.CompilerOptions.LanguageMode var3 = var1.languageMode();
// 
//   }

  public void test297() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test297"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var5 = var2.useSourceInfoIfMissingFrom(var4);
    boolean var6 = var4.isSetterDef();
    com.google.javascript.rhino.Node[] var7 = new com.google.javascript.rhino.Node[] { var4};
    com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(100, var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.script(var7);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test298() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test298"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var5 = var2.useSourceInfoIfMissingFrom(var4);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.eq(var4, var7);
    var8.setSourceEncodedPosition(100);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var15 = var12.useSourceInfoIfMissingFrom(var14);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.eq(var14, var17);
    com.google.javascript.rhino.Node var19 = var14.cloneNode();
    boolean var20 = var19.isOr();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var25 = var22.useSourceInfoIfMissingFrom(var24);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.eq(var24, var27);
    com.google.javascript.rhino.Node var29 = var24.cloneNode();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.or(var19, var29);
    com.google.javascript.rhino.Node var31 = var8.useSourceInfoFromForTree(var19);
    com.google.javascript.rhino.Node var32 = var8.removeFirstChild();
    com.google.javascript.rhino.Node var33 = new com.google.javascript.rhino.Node(1, var32);
    boolean var34 = var32.isFunction();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test299() {}
//   public void test299() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test299"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     boolean var2 = var1.isTypeCheckingEnabled();
// 
//   }

  public void test300() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test300"); }


    java.lang.Object var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var2 = com.google.javascript.rhino.ScriptRuntime.getMessage1("NUMBER 10.0\n", var1);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test301() {}
//   public void test301() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test301"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     com.google.javascript.jscomp.Compiler.IntermediateState var3 = var1.getState();
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1, var4);
//     com.google.javascript.jscomp.JSSourceFile var6 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var7 = new com.google.javascript.jscomp.JSSourceFile[] { var6};
//     com.google.javascript.jscomp.JSSourceFile var8 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var9 = new com.google.javascript.jscomp.JSSourceFile[] { var8};
//     com.google.javascript.jscomp.CompilerOptions var10 = new com.google.javascript.jscomp.CompilerOptions();
//     var10.setCrossModuleCodeMotion(false);
//     com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var13 = null;
//     var10.setAnonymousFunctionNaming(var13);
//     var10.setExtractPrototypeMemberDeclarations(true);
//     var10.setRemoveClosureAsserts(false);
//     var10.setAliasExternals(false);
//     var10.setRewriteFunctionExpressions(true);
//     var10.setSyntheticBlockEndMarker("{1459695149}");
//     com.google.javascript.jscomp.Result var25 = var1.compile(var7, var9, var10);
// 
//   }

  public void test302() {}
//   public void test302() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test302"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var1 = new com.google.javascript.jscomp.SourceFile("hi!");
//     java.lang.String var2 = var1.toString();
//     java.lang.String var4 = var1.getLine(0);
// 
//   }

  public void test303() {}
//   public void test303() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test303"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setTweakToNumberLiteral("", 1);
//     var0.setInlineVariables(false);
//     com.google.javascript.jscomp.CompilerOptions.TracerMode var6 = var0.getTracerMode();
//     var0.setPrintInputDelimiter(false);
//     var0.setCheckMissingGetCssNameBlacklist("");
//     var0.setCollapseObjectLiterals(false);
//     var0.setLooseTypes(true);
//     com.google.javascript.jscomp.CodingConvention var15 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var16 = new com.google.javascript.jscomp.ClosureCodingConvention(var15);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var17 = null;
//     com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var18 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var16, var17);
//     com.google.javascript.jscomp.ClosureCodingConvention var19 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var16);
//     com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var24 = var21.useSourceInfoIfMissingFrom(var23);
//     com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.eq(var23, var26);
//     com.google.javascript.rhino.Node var28 = var23.cloneNode();
//     boolean var29 = var28.isOr();
//     com.google.javascript.rhino.jstype.StaticSourceFile var30 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var28);
//     boolean var31 = var28.isDec();
//     boolean var32 = var28.isFor();
//     boolean var33 = var16.isVarArgsParameter(var28);
//     var0.setCodingConvention((com.google.javascript.jscomp.CodingConvention)var16);
//     com.google.javascript.jscomp.CheckLevel var35 = null;
//     var0.setCheckGlobalThisLevel(var35);
//     java.util.List var37 = null;
//     var0.setManageClosureDependencies(var37);
// 
//   }

  public void test304() {}
//   public void test304() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test304"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     com.google.javascript.jscomp.JSModule var4 = var3.getModule();
//     var3.removeRequire("");
// 
//   }

  public void test305() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test305"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
    java.io.PrintStream var3 = null;
    com.google.javascript.jscomp.PrintStreamErrorManager var4 = new com.google.javascript.jscomp.PrintStreamErrorManager((com.google.javascript.jscomp.MessageFormatter)var2, var3);
    java.io.PrintStream var5 = null;
    com.google.javascript.jscomp.PrintStreamErrorManager var6 = new com.google.javascript.jscomp.PrintStreamErrorManager((com.google.javascript.jscomp.MessageFormatter)var2, var5);
    com.google.javascript.jscomp.deps.JsFileParser var7 = new com.google.javascript.jscomp.deps.JsFileParser((com.google.javascript.jscomp.ErrorManager)var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.deps.DependencyInfo var10 = var7.parseFile("", "function (): {909579166}");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }

  }

  public void test306() {}
//   public void test306() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test306"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
//     var2.setCrossModuleCodeMotion(false);
//     var2.setLabelRenaming(true);
//     java.util.Set var7 = null;
//     var2.setStripTypePrefixes(var7);
//     var1.initOptions(var2);
//     boolean var10 = var1.acceptConstKeyword();
//     com.google.javascript.jscomp.CodingConvention var11 = var1.getCodingConvention();
//     com.google.javascript.jscomp.Compiler.IntermediateState var12 = var1.getState();
//     java.nio.charset.Charset var14 = null;
//     com.google.javascript.jscomp.SourceFile var15 = com.google.javascript.jscomp.SourceFile.fromFile("NUMBER 10.0", var14);
//     com.google.javascript.jscomp.Region var17 = var15.getRegion(100);
//     var15.setOriginalPath("NUMBER 10.0\n");
//     java.lang.String var20 = var15.getOriginalPath();
//     com.google.javascript.jscomp.JsAst var21 = new com.google.javascript.jscomp.JsAst(var15);
//     com.google.javascript.rhino.InputId var22 = var21.getInputId();
//     java.lang.String var23 = var22.getIdName();
//     com.google.javascript.jscomp.CompilerInput var24 = var1.getInput(var22);
// 
//   }

  public void test307() {}
//   public void test307() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test307"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     double var2 = var1.getProgress();
//     var1.normalize();
// 
//   }

  public void test308() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test308"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var1 = com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.valueOf("{1125981799}");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test309() {}
//   public void test309() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test309"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.pos(var0);
// 
//   }

  public void test310() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test310"); }


    com.google.javascript.jscomp.CodingConvention var0 = null;
    com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = null;
    com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var3 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var1, var2);
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var8 = var5.useSourceInfoIfMissingFrom(var7);
    boolean var9 = var7.isSetterDef();
    boolean var10 = var7.isNoSideEffectsCall();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var15 = var12.useSourceInfoIfMissingFrom(var14);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.eq(var14, var17);
    com.google.javascript.rhino.Node var19 = var14.cloneNode();
    boolean var20 = var19.isOr();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var25 = var22.useSourceInfoIfMissingFrom(var24);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.eq(var24, var27);
    com.google.javascript.rhino.Node var29 = var24.cloneNode();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.or(var19, var29);
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.voidNode(var30);
    com.google.javascript.rhino.Node var32 = var7.srcref(var30);
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var37 = var34.useSourceInfoIfMissingFrom(var36);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.exprResult(var37);
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.block(var38);
    com.google.javascript.rhino.InputId var40 = null;
    var38.setInputId(var40);
    java.lang.String var42 = var1.extractClassNameIfRequire(var32, var38);
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var47 = var44.useSourceInfoIfMissingFrom(var46);
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.eq(var46, var49);
    com.google.javascript.rhino.Node var51 = var46.cloneNode();
    boolean var52 = var51.isOr();
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var56 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var57 = var54.useSourceInfoIfMissingFrom(var56);
    com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.eq(var56, var59);
    com.google.javascript.rhino.Node var61 = var56.cloneNode();
    com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.or(var51, var61);
    com.google.javascript.rhino.Node var64 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var67 = var64.useSourceInfoIfMissingFrom(var66);
    com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var70 = var67.copyInformationFrom(var69);
    com.google.javascript.rhino.Node var71 = var51.srcrefTree(var69);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var72 = com.google.javascript.rhino.IR.or(var38, var71);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test311() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test311"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    com.google.javascript.rhino.Node var8 = var3.cloneNode();
    boolean var9 = var3.isDelProp();
    boolean var10 = var3.isIf();
    java.lang.String var11 = var3.toString();
    boolean var12 = var3.isArrayLit();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.NodeUtil.getRootOfQualifiedName(var3);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "NUMBER 10.0"+ "'", var11.equals("NUMBER 10.0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test312() {}
//   public void test312() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test312"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.Compiler.IntermediateState var2 = var1.getState();
//     com.google.javascript.jscomp.PassConfig var3 = null;
//     var1.setPassConfig(var3);
// 
//   }

  public void test313() {}
//   public void test313() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test313"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     boolean var5 = var2.canPropertyBeDefined(var3, "hi!");
//     boolean var7 = var2.hasNamespace("");
//     com.google.javascript.rhino.jstype.FunctionBuilder var8 = new com.google.javascript.rhino.jstype.FunctionBuilder(var2);
//     com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var9 = null;
//     var2.setResolveMode(var9);
//     com.google.javascript.rhino.ErrorReporter var12 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12, true);
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     boolean var17 = var14.canPropertyBeDefined(var15, "hi!");
//     boolean var19 = var14.hasNamespace("");
//     com.google.javascript.rhino.ErrorReporter var20 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20, true);
//     com.google.javascript.rhino.jstype.ObjectType var23 = var22.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var24 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24, true);
//     com.google.javascript.rhino.jstype.ObjectType var27 = var26.createAnonymousObjectType();
//     boolean var28 = var27.isUnknownType();
//     boolean var29 = var23.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var27);
//     boolean var30 = var27.isFunctionPrototypeType();
//     var14.resolveTypesInScope((com.google.javascript.rhino.jstype.StaticScope)var27);
//     com.google.javascript.rhino.Node var32 = var27.getRootNode();
//     java.lang.Iterable var33 = var27.getCtorImplementedInterfaces();
//     var2.registerPropertyOnType("module$", (com.google.javascript.rhino.jstype.JSType)var27);
//     com.google.javascript.rhino.ErrorReporter var35 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var35, true);
//     com.google.javascript.rhino.ErrorReporter var38 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38, true);
//     com.google.javascript.rhino.jstype.ObjectType var41 = var40.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var42 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var42, true);
//     com.google.javascript.rhino.jstype.ObjectType var45 = var44.createAnonymousObjectType();
//     boolean var46 = var45.isUnknownType();
//     boolean var47 = var41.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var45);
//     boolean var48 = var45.isFunctionPrototypeType();
//     var45.clearCachedValues();
//     com.google.javascript.rhino.jstype.ObjectType var50 = var45.dereference();
//     com.google.javascript.rhino.jstype.JSType[] var51 = new com.google.javascript.rhino.jstype.JSType[] { var50};
//     com.google.javascript.rhino.jstype.JSType var52 = var37.createUnionType(var51);
//     com.google.javascript.rhino.ErrorReporter var53 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var53, true);
//     com.google.javascript.rhino.jstype.JSType var56 = null;
//     boolean var58 = var55.canPropertyBeDefined(var56, "hi!");
//     boolean var60 = var55.hasNamespace("");
//     com.google.javascript.rhino.jstype.FunctionBuilder var61 = new com.google.javascript.rhino.jstype.FunctionBuilder(var55);
//     com.google.javascript.rhino.jstype.FunctionBuilder var63 = var61.withName("NUMBER 10.0\n");
//     com.google.javascript.rhino.ErrorReporter var64 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var64, true);
//     com.google.javascript.rhino.jstype.ObjectType var67 = var66.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var68 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var68, true);
//     com.google.javascript.rhino.jstype.ObjectType var71 = var70.createAnonymousObjectType();
//     boolean var72 = var71.isUnknownType();
//     boolean var73 = var67.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var71);
//     boolean var74 = var71.isFunctionPrototypeType();
//     com.google.javascript.rhino.jstype.FunctionBuilder var76 = var63.withReturnType((com.google.javascript.rhino.jstype.JSType)var71, true);
//     com.google.javascript.rhino.Node var78 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var80 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var81 = var78.useSourceInfoIfMissingFrom(var80);
//     com.google.javascript.rhino.Node var83 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var84 = com.google.javascript.rhino.IR.eq(var80, var83);
//     com.google.javascript.rhino.Node var85 = var80.cloneNode();
//     boolean var86 = var85.isOr();
//     com.google.javascript.rhino.jstype.StaticSourceFile var87 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var85);
//     boolean var88 = var85.isDec();
//     boolean var89 = var85.isFor();
//     boolean var90 = var85.isNoSideEffectsCall();
//     com.google.javascript.rhino.jstype.FunctionType var91 = var37.createFunctionType((com.google.javascript.rhino.jstype.JSType)var71, var85);
//     java.util.List var92 = null;
//     com.google.javascript.rhino.jstype.FunctionType var93 = var2.createFunctionType((com.google.javascript.rhino.jstype.JSType)var71, var92);
// 
//   }

  public void test314() {}
//   public void test314() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test314"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     com.google.javascript.jscomp.Compiler.IntermediateState var3 = var1.getState();
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1, var4);
//     boolean var6 = var1.isIdeMode();
// 
//   }

  public void test315() {}
//   public void test315() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test315"); }
// 
// 
//     java.io.File var0 = null;
//     java.nio.charset.Charset var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromFile(var0, var1);
// 
//   }

  public void test316() {}
//   public void test316() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test316"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.exprResult(var4);
//     com.google.javascript.rhino.Node var6 = null;
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.and(var4, var6);
// 
//   }

  public void test317() {}
//   public void test317() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test317"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = null;
//     com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var3 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var1, var2);
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var8 = var5.useSourceInfoIfMissingFrom(var7);
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.eq(var7, var10);
//     var11.setSourceEncodedPosition(100);
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var18 = var15.useSourceInfoIfMissingFrom(var17);
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.eq(var17, var20);
//     com.google.javascript.rhino.Node var22 = var17.cloneNode();
//     boolean var23 = var22.isOr();
//     com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var28 = var25.useSourceInfoIfMissingFrom(var27);
//     com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.eq(var27, var30);
//     com.google.javascript.rhino.Node var32 = var27.cloneNode();
//     com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.or(var22, var32);
//     com.google.javascript.rhino.Node var34 = var11.useSourceInfoFromForTree(var22);
//     com.google.javascript.rhino.Node var35 = var11.removeFirstChild();
//     com.google.javascript.jscomp.CodingConvention var36 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var37 = new com.google.javascript.jscomp.ClosureCodingConvention(var36);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var38 = null;
//     com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var39 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var37, var38);
//     com.google.javascript.jscomp.ClosureCodingConvention var40 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var37);
//     com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var45 = var42.useSourceInfoIfMissingFrom(var44);
//     com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.eq(var44, var47);
//     com.google.javascript.rhino.Node var49 = var44.cloneNode();
//     boolean var50 = var49.isOr();
//     com.google.javascript.rhino.jstype.StaticSourceFile var51 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var49);
//     boolean var52 = var49.isDec();
//     boolean var53 = var49.isFor();
//     boolean var54 = var37.isVarArgsParameter(var49);
//     boolean var55 = var49.isEmpty();
//     boolean var56 = var35.hasChild(var49);
//     com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var61 = var58.useSourceInfoIfMissingFrom(var60);
//     com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var64 = com.google.javascript.rhino.IR.eq(var60, var63);
//     com.google.javascript.rhino.Node var65 = var60.cloneNode();
//     boolean var66 = var65.isOr();
//     com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var71 = var68.useSourceInfoIfMissingFrom(var70);
//     com.google.javascript.rhino.Node var73 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var74 = com.google.javascript.rhino.IR.eq(var70, var73);
//     com.google.javascript.rhino.Node var75 = var70.cloneNode();
//     com.google.javascript.rhino.Node var76 = com.google.javascript.rhino.IR.or(var65, var75);
//     int var77 = var65.getCharno();
//     java.lang.String var78 = var1.extractClassNameIfRequire(var35, var65);
//     java.lang.String var79 = var1.getGlobalObject();
//     com.google.javascript.rhino.Node var81 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode((com.google.javascript.jscomp.CodingConvention)var1, "InputId: NUMBER 10.0");
// 
//   }

  public void test318() {}
//   public void test318() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test318"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     com.google.javascript.jscomp.Compiler.IntermediateState var3 = var1.getState();
//     var1.normalize();
// 
//   }

  public void test319() {}
//   public void test319() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test319"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     boolean var5 = var2.canPropertyBeDefined(var3, "hi!");
//     boolean var7 = var2.hasNamespace("");
//     com.google.javascript.rhino.ErrorReporter var8 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8, true);
//     com.google.javascript.rhino.jstype.ObjectType var11 = var10.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var12 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12, true);
//     com.google.javascript.rhino.jstype.ObjectType var15 = var14.createAnonymousObjectType();
//     boolean var16 = var15.isUnknownType();
//     boolean var17 = var11.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var15);
//     boolean var18 = var15.isFunctionPrototypeType();
//     var2.resolveTypesInScope((com.google.javascript.rhino.jstype.StaticScope)var15);
//     boolean var21 = var2.hasNamespace("goog.exportSymbol");
//     com.google.javascript.rhino.jstype.JSTypeNative var22 = null;
//     com.google.javascript.rhino.jstype.JSType var23 = var2.getNativeType(var22);
// 
//   }

  public void test320() {}
//   public void test320() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test320"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
//     var2.setCrossModuleCodeMotion(false);
//     var2.setLabelRenaming(true);
//     java.util.Set var7 = null;
//     var2.setStripTypePrefixes(var7);
//     var1.initOptions(var2);
//     boolean var10 = var1.acceptConstKeyword();
//     com.google.javascript.jscomp.CodingConvention var11 = var1.getCodingConvention();
//     var1.rebuildInputsFromModules();
// 
//   }

  public void test321() {}
//   public void test321() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test321"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     com.google.javascript.jscomp.Compiler.IntermediateState var3 = var1.getState();
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1, var4);
//     com.google.javascript.jscomp.CheckLevel var9 = null;
//     com.google.javascript.jscomp.DiagnosticType var12 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
//     com.google.javascript.jscomp.DiagnosticType var18 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
//     java.lang.String[] var20 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var21 = com.google.javascript.jscomp.JSError.make("", 1, 39, var18, var20);
//     com.google.javascript.jscomp.JSError var22 = com.google.javascript.jscomp.JSError.make("hi!", 100, 100, var9, var12, var20);
//     java.lang.String var23 = var5.formatWarning(var22);
// 
//   }

  public void test322() {}
//   public void test322() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test322"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.Compiler.IntermediateState var2 = var1.getState();
//     var1.optimize();
// 
//   }

  public void test323() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test323"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setTweakToNumberLiteral("", 1);
    java.util.Set var4 = null;
    var0.setStripTypePrefixes(var4);
    var0.disableRuntimeTypeCheck();
    var0.setAliasAllStrings(true);

  }

  public void test324() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test324"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    var2.setCrossModuleCodeMotion(false);
    var2.setLabelRenaming(true);
    java.util.Set var7 = null;
    var2.setStripTypePrefixes(var7);
    var1.initOptions(var2);
    boolean var10 = var1.acceptConstKeyword();
    com.google.javascript.jscomp.CodingConvention var11 = var1.getCodingConvention();
    int var12 = var1.getWarningCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test325() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test325"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.CompilationLevel var1 = com.google.javascript.jscomp.CompilationLevel.valueOf("NUMBER 10.0");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test326() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test326"); }


    java.lang.String var1 = com.google.javascript.rhino.ScriptRuntime.escapeString("module$Node tree inequality:\nTree1:\nNUMBER 10.0\n\n\nTree2:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree1: NUMBER 10.0\n\n\nSubtree2: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "module$Node tree inequality:\\nTree1:\\nNUMBER 10.0\\n\\n\\nTree2:\\nEQ\\n    NUMBER 10.0\\n    NUMBER 10.0\\n\\n\\nSubtree1: NUMBER 10.0\\n\\n\\nSubtree2: EQ\\n    NUMBER 10.0\\n    NUMBER 10.0\\n"+ "'", var1.equals("module$Node tree inequality:\\nTree1:\\nNUMBER 10.0\\n\\n\\nTree2:\\nEQ\\n    NUMBER 10.0\\n    NUMBER 10.0\\n\\n\\nSubtree1: NUMBER 10.0\\n\\n\\nSubtree2: EQ\\n    NUMBER 10.0\\n    NUMBER 10.0\\n"));

  }

  public void test327() {}
//   public void test327() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test327"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
//     var2.setCrossModuleCodeMotion(false);
//     var2.setLabelRenaming(true);
//     java.util.Set var7 = null;
//     var2.setStripTypePrefixes(var7);
//     var1.initOptions(var2);
//     boolean var10 = var1.acceptConstKeyword();
//     com.google.javascript.jscomp.CodingConvention var11 = var1.getCodingConvention();
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var12 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var13 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1, var12);
//     com.google.javascript.jscomp.JSError var14 = null;
//     var1.report(var14);
// 
//   }

  public void test328() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test328"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.jstype.ObjectType var3 = var2.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4, true);
    com.google.javascript.rhino.jstype.ObjectType var7 = var6.createAnonymousObjectType();
    boolean var8 = var7.isUnknownType();
    boolean var9 = var3.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var7);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10, true);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    boolean var15 = var12.canPropertyBeDefined(var13, "hi!");
    boolean var17 = var12.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var18 = new com.google.javascript.rhino.jstype.FunctionBuilder(var12);
    com.google.javascript.rhino.jstype.FunctionBuilder var20 = var18.withName("NUMBER 10.0\n");
    com.google.javascript.rhino.Node var21 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var22 = var20.withSourceNode(var21);
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23, true);
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26, true);
    com.google.javascript.rhino.jstype.ObjectType var29 = var28.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var30 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30, true);
    com.google.javascript.rhino.jstype.ObjectType var33 = var32.createAnonymousObjectType();
    boolean var34 = var33.isUnknownType();
    boolean var35 = var29.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var33);
    boolean var36 = var33.isFunctionPrototypeType();
    var33.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var38 = var33.dereference();
    com.google.javascript.rhino.jstype.JSType[] var39 = new com.google.javascript.rhino.jstype.JSType[] { var38};
    com.google.javascript.rhino.jstype.JSType var40 = var25.createUnionType(var39);
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41, true);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    boolean var46 = var43.canPropertyBeDefined(var44, "hi!");
    boolean var48 = var43.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var49 = new com.google.javascript.rhino.jstype.FunctionBuilder(var43);
    com.google.javascript.rhino.jstype.FunctionBuilder var51 = var49.withName("NUMBER 10.0\n");
    com.google.javascript.rhino.ErrorReporter var52 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var52, true);
    com.google.javascript.rhino.jstype.ObjectType var55 = var54.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var56 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var56, true);
    com.google.javascript.rhino.jstype.ObjectType var59 = var58.createAnonymousObjectType();
    boolean var60 = var59.isUnknownType();
    boolean var61 = var55.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var59);
    boolean var62 = var59.isFunctionPrototypeType();
    com.google.javascript.rhino.jstype.FunctionBuilder var64 = var51.withReturnType((com.google.javascript.rhino.jstype.JSType)var59, true);
    com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var69 = var66.useSourceInfoIfMissingFrom(var68);
    com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var72 = com.google.javascript.rhino.IR.eq(var68, var71);
    com.google.javascript.rhino.Node var73 = var68.cloneNode();
    boolean var74 = var73.isOr();
    com.google.javascript.rhino.jstype.StaticSourceFile var75 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var73);
    boolean var76 = var73.isDec();
    boolean var77 = var73.isFor();
    boolean var78 = var73.isNoSideEffectsCall();
    com.google.javascript.rhino.jstype.FunctionType var79 = var25.createFunctionType((com.google.javascript.rhino.jstype.JSType)var59, var73);
    int var80 = var79.getExtendedInterfacesCount();
    boolean var81 = var79.isReturnTypeInferred();
    boolean var82 = var79.isOrdinaryFunction();
    int var83 = var79.getMaxArguments();
    com.google.javascript.rhino.jstype.FunctionBuilder var84 = var20.withReturnType((com.google.javascript.rhino.jstype.JSType)var79);
    boolean var85 = com.google.javascript.rhino.jstype.JSType.isEquivalent((com.google.javascript.rhino.jstype.JSType)var7, (com.google.javascript.rhino.jstype.JSType)var79);
    boolean var87 = var7.isPropertyInExterns("hi!");
    com.google.javascript.rhino.JSDocInfo var88 = var7.getJSDocInfo();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);

  }

  public void test329() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test329"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setSourceMapOutputPath("hi!");
    var0.setReplaceStringsPlaceholderToken("hi!");
    var0.setIdeMode(false);
    var0.setColorizeErrorOutput(false);
    var0.setCrossModuleCodeMotion(false);

  }

  public void test330() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test330"); }


    java.util.logging.Level var0 = null;
    com.google.javascript.jscomp.Compiler.setLoggingLevel(var0);

  }

  public void test331() {}
//   public void test331() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test331"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = null;
//     com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var3 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var1, var2);
//     com.google.javascript.jscomp.ClosureCodingConvention var4 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var1);
//     com.google.javascript.rhino.Node var5 = null;
//     java.lang.String var6 = var1.getSingletonGetterClassName(var5);
// 
//   }

  public void test332() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test332"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var5 = var2.useSourceInfoIfMissingFrom(var4);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.exprResult(var5);
    var6.setLength(10);
    com.google.javascript.jscomp.CheckLevel var9 = null;
    com.google.javascript.jscomp.CheckLevel var13 = null;
    com.google.javascript.jscomp.DiagnosticType var16 = com.google.javascript.jscomp.DiagnosticType.warning("{505847021}", "{505847021}");
    com.google.javascript.jscomp.DiagnosticType var22 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
    java.lang.String[] var24 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var25 = com.google.javascript.jscomp.JSError.make("", 1, 39, var22, var24);
    com.google.javascript.jscomp.ShowByPathWarningsGuard var26 = new com.google.javascript.jscomp.ShowByPathWarningsGuard(var24);
    com.google.javascript.jscomp.JSError var27 = com.google.javascript.jscomp.JSError.make("Node tree inequality:\nTree1:\nNUMBER 10.0\n\n\nTree2:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree1: NUMBER 10.0\n\n\nSubtree2: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n", (-1), 10, var13, var16, var24);
    java.lang.String[] var29 = new java.lang.String[] { "null(null)"};
    com.google.javascript.jscomp.JSError var30 = com.google.javascript.jscomp.JSError.make("hi!", var6, var9, var16, var29);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.NodeUtil.newExpr(var6);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test333() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test333"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setSourceMapOutputPath("hi!");
    var0.setIdeMode(false);
    java.util.Set var5 = null;
    var0.setReplaceStringsReservedStrings(var5);
    var0.setDebugFunctionSideEffectsPath("hi!");
    var0.setCollapseObjectLiterals(true);
    var0.setOptimizeReturns(false);
    var0.setLineLengthThreshold(0);

  }

  public void test334() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test334"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3, true);
    com.google.javascript.rhino.jstype.ObjectType var6 = var5.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var7 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7, true);
    com.google.javascript.rhino.jstype.ObjectType var10 = var9.createAnonymousObjectType();
    boolean var11 = var10.isUnknownType();
    boolean var12 = var6.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var10);
    boolean var13 = var10.isFunctionPrototypeType();
    var10.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var15 = var10.dereference();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var15};
    com.google.javascript.rhino.jstype.JSType var17 = var2.createUnionType(var16);
    com.google.javascript.rhino.ErrorReporter var18 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18, true);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    boolean var23 = var20.canPropertyBeDefined(var21, "hi!");
    boolean var25 = var20.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var26 = new com.google.javascript.rhino.jstype.FunctionBuilder(var20);
    com.google.javascript.rhino.jstype.FunctionBuilder var28 = var26.withName("NUMBER 10.0\n");
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29, true);
    com.google.javascript.rhino.jstype.ObjectType var32 = var31.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33, true);
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.createAnonymousObjectType();
    boolean var37 = var36.isUnknownType();
    boolean var38 = var32.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var36);
    boolean var39 = var36.isFunctionPrototypeType();
    com.google.javascript.rhino.jstype.FunctionBuilder var41 = var28.withReturnType((com.google.javascript.rhino.jstype.JSType)var36, true);
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var46 = var43.useSourceInfoIfMissingFrom(var45);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.eq(var45, var48);
    com.google.javascript.rhino.Node var50 = var45.cloneNode();
    boolean var51 = var50.isOr();
    com.google.javascript.rhino.jstype.StaticSourceFile var52 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var50);
    boolean var53 = var50.isDec();
    boolean var54 = var50.isFor();
    boolean var55 = var50.isNoSideEffectsCall();
    com.google.javascript.rhino.jstype.FunctionType var56 = var2.createFunctionType((com.google.javascript.rhino.jstype.JSType)var36, var50);
    com.google.javascript.rhino.jstype.ObjectType var57 = var56.getTypeOfThis();
    boolean var58 = var56.isReturnTypeInferred();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test335() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test335"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    var2.setCrossModuleCodeMotion(false);
    var2.setLabelRenaming(true);
    java.util.Set var7 = null;
    var2.setStripTypePrefixes(var7);
    var1.initOptions(var2);
    java.nio.charset.Charset var11 = null;
    com.google.javascript.jscomp.SourceFile var12 = com.google.javascript.jscomp.SourceFile.fromFile("NUMBER 10.0", var11);
    com.google.javascript.jscomp.Region var14 = var12.getRegion(100);
    java.lang.String var15 = var12.toString();
    com.google.javascript.rhino.Node var16 = var1.parse(var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.SymbolTable var17 = var1.buildKnownSymbolTable();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "NUMBER 10.0"+ "'", var15.equals("NUMBER 10.0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test336() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test336"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    com.google.javascript.rhino.Node var8 = var3.cloneNode();
    boolean var9 = var8.isOr();
    com.google.javascript.rhino.jstype.StaticSourceFile var10 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var8);
    boolean var11 = var8.isDec();
    boolean var12 = var8.isFor();
    boolean var13 = var8.isNoSideEffectsCall();
    boolean var14 = var8.isBlock();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test337() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test337"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var1 = com.google.javascript.rhino.ScriptRuntime.getMessage0("module$");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test338() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test338"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, false);
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3, true);
    com.google.javascript.rhino.jstype.JSType var6 = null;
    boolean var8 = var5.canPropertyBeDefined(var6, "hi!");
    boolean var10 = var5.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var11 = new com.google.javascript.rhino.jstype.FunctionBuilder(var5);
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12, true);
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15, true);
    com.google.javascript.rhino.jstype.ObjectType var18 = var17.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19, true);
    com.google.javascript.rhino.jstype.ObjectType var22 = var21.createAnonymousObjectType();
    boolean var23 = var22.isUnknownType();
    boolean var24 = var18.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var22);
    boolean var25 = var22.isFunctionPrototypeType();
    var22.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var27 = var22.dereference();
    com.google.javascript.rhino.jstype.JSType[] var28 = new com.google.javascript.rhino.jstype.JSType[] { var27};
    com.google.javascript.rhino.jstype.JSType var29 = var14.createUnionType(var28);
    com.google.javascript.rhino.ErrorReporter var30 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30, true);
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33, true);
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37, true);
    com.google.javascript.rhino.jstype.ObjectType var40 = var39.createAnonymousObjectType();
    boolean var41 = var40.isUnknownType();
    boolean var42 = var36.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var40);
    boolean var43 = var40.isFunctionPrototypeType();
    var40.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var45 = var40.dereference();
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.jstype.JSType var47 = var32.createUnionType(var46);
    com.google.javascript.rhino.jstype.FunctionType var48 = var5.createFunctionTypeWithVarArgs(var29, var46);
    boolean var49 = var29.isEnumElementType();
    com.google.javascript.rhino.jstype.JSType var50 = var2.createOptionalType(var29);
    com.google.javascript.rhino.JSDocInfo var51 = var50.getJSDocInfo();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);

  }

  public void test339() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test339"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    com.google.javascript.rhino.Node var8 = var3.cloneNode();
    boolean var9 = var8.isOr();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = var11.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.eq(var13, var16);
    com.google.javascript.rhino.Node var18 = var13.cloneNode();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.or(var8, var18);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = var21.useSourceInfoIfMissingFrom(var23);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var27 = var24.copyInformationFrom(var26);
    com.google.javascript.rhino.Node var28 = var8.srcrefTree(var26);
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var33 = var30.useSourceInfoIfMissingFrom(var32);
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.exprResult(var33);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.block(var34);
    com.google.javascript.rhino.Node var36 = var28.clonePropsFrom(var35);
    boolean var37 = var28.isParamList();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.throwNode(var28);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test340() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test340"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.exprResult(var4);
    com.google.javascript.rhino.Node var6 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.tryFinally(var5, var6);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test341() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test341"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var5 = var2.useSourceInfoIfMissingFrom(var4);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.eq(var4, var7);
    var7.setSourceEncodedPositionForTree(100);
    java.lang.Object var12 = var7.getProp(10);
    com.google.javascript.jscomp.CheckLevel var13 = null;
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.empty();
    com.google.javascript.jscomp.DiagnosticType var21 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
    java.lang.String[] var23 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var24 = com.google.javascript.jscomp.JSError.make("", 1, 39, var21, var23);
    com.google.javascript.jscomp.CheckLevel var28 = null;
    com.google.javascript.jscomp.DiagnosticType var31 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
    com.google.javascript.jscomp.DiagnosticType var37 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
    java.lang.String[] var39 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var40 = com.google.javascript.jscomp.JSError.make("", 1, 39, var37, var39);
    com.google.javascript.jscomp.JSError var41 = com.google.javascript.jscomp.JSError.make("hi!", 100, 100, var28, var31, var39);
    com.google.javascript.jscomp.JSError var42 = com.google.javascript.jscomp.JSError.make("NUMBER 10.0\n", var15, var21, var39);
    com.google.javascript.jscomp.DiagnosticType var48 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
    java.lang.String[] var50 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var51 = com.google.javascript.jscomp.JSError.make("", 1, 39, var48, var50);
    com.google.javascript.jscomp.JSError var52 = com.google.javascript.jscomp.JSError.make("{505847021}", var7, var13, var21, var50);
    boolean var53 = var7.isNoSideEffectsCall();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test342() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test342"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setCrossModuleCodeMotion(false);
    com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var3 = null;
    var0.setAnonymousFunctionNaming(var3);
    var0.setExtractPrototypeMemberDeclarations(true);
    var0.setRemoveTryCatchFinally(true);
    var0.setCheckCaja(false);

  }

  public void test343() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test343"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    boolean var5 = var2.canPropertyBeDefined(var3, "hi!");
    boolean var7 = var2.hasNamespace("");
    com.google.javascript.rhino.ErrorReporter var9 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var9, true);
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12, true);
    com.google.javascript.rhino.jstype.ObjectType var15 = var14.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var16 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16, true);
    com.google.javascript.rhino.jstype.ObjectType var19 = var18.createAnonymousObjectType();
    boolean var20 = var19.isUnknownType();
    boolean var21 = var15.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var19);
    boolean var22 = var19.isFunctionPrototypeType();
    var19.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var24 = var19.dereference();
    com.google.javascript.rhino.jstype.JSType[] var25 = new com.google.javascript.rhino.jstype.JSType[] { var24};
    com.google.javascript.rhino.jstype.JSType var26 = var11.createUnionType(var25);
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27, true);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    boolean var32 = var29.canPropertyBeDefined(var30, "hi!");
    boolean var34 = var29.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var35 = new com.google.javascript.rhino.jstype.FunctionBuilder(var29);
    com.google.javascript.rhino.jstype.FunctionBuilder var37 = var35.withName("NUMBER 10.0\n");
    com.google.javascript.rhino.ErrorReporter var38 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38, true);
    com.google.javascript.rhino.jstype.ObjectType var41 = var40.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var42 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var42, true);
    com.google.javascript.rhino.jstype.ObjectType var45 = var44.createAnonymousObjectType();
    boolean var46 = var45.isUnknownType();
    boolean var47 = var41.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var45);
    boolean var48 = var45.isFunctionPrototypeType();
    com.google.javascript.rhino.jstype.FunctionBuilder var50 = var37.withReturnType((com.google.javascript.rhino.jstype.JSType)var45, true);
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var55 = var52.useSourceInfoIfMissingFrom(var54);
    com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.eq(var54, var57);
    com.google.javascript.rhino.Node var59 = var54.cloneNode();
    boolean var60 = var59.isOr();
    com.google.javascript.rhino.jstype.StaticSourceFile var61 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var59);
    boolean var62 = var59.isDec();
    boolean var63 = var59.isFor();
    boolean var64 = var59.isNoSideEffectsCall();
    com.google.javascript.rhino.jstype.FunctionType var65 = var11.createFunctionType((com.google.javascript.rhino.jstype.JSType)var45, var59);
    var2.registerPropertyOnType("ECMASCRIPT3", (com.google.javascript.rhino.jstype.JSType)var65);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var67 = null;
    var2.setResolveMode(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test344() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test344"); }


    java.nio.charset.Charset var1 = null;
    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromFile("NUMBER 10.0", var1);
    com.google.javascript.jscomp.Region var4 = var2.getRegion(100);
    var2.setOriginalPath("NUMBER 10.0\n");
    java.lang.String var7 = var2.getOriginalPath();
    java.lang.String var9 = var2.getLine((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "NUMBER 10.0\n"+ "'", var7.equals("NUMBER 10.0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test345() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test345"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    java.lang.Object var6 = var4.getProp(10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.defaultCase(var4);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test346() {}
//   public void test346() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test346"); }
// 
// 
//     java.nio.charset.Charset var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromFile("NUMBER 10.0", var1);
//     com.google.javascript.jscomp.Region var4 = var2.getRegion(100);
//     var2.setOriginalPath("NUMBER 10.0\n");
//     java.lang.String var7 = var2.getOriginalPath();
//     com.google.javascript.jscomp.JsAst var8 = new com.google.javascript.jscomp.JsAst(var2);
//     java.io.PrintStream var9 = null;
//     com.google.javascript.jscomp.Compiler var10 = new com.google.javascript.jscomp.Compiler(var9);
//     com.google.javascript.jscomp.SourceMap var11 = var10.getSourceMap();
//     java.io.PrintStream var12 = null;
//     com.google.javascript.jscomp.Compiler var13 = new com.google.javascript.jscomp.Compiler(var12);
//     com.google.javascript.jscomp.LightweightMessageFormatter var14 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var13);
//     java.io.PrintStream var15 = null;
//     com.google.javascript.jscomp.PrintStreamErrorManager var16 = new com.google.javascript.jscomp.PrintStreamErrorManager((com.google.javascript.jscomp.MessageFormatter)var14, var15);
//     java.io.PrintStream var17 = null;
//     com.google.javascript.jscomp.PrintStreamErrorManager var18 = new com.google.javascript.jscomp.PrintStreamErrorManager((com.google.javascript.jscomp.MessageFormatter)var14, var17);
//     var10.setErrorManager((com.google.javascript.jscomp.ErrorManager)var18);
//     com.google.javascript.rhino.Node var20 = var8.getAstRoot((com.google.javascript.jscomp.AbstractCompiler)var10);
// 
//   }

  public void test347() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test347"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    boolean var5 = var2.canPropertyBeDefined(var3, "hi!");
    boolean var7 = var2.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var8 = new com.google.javascript.rhino.jstype.FunctionBuilder(var2);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var9 = null;
    var2.setResolveMode(var9);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11, true);
    com.google.javascript.rhino.jstype.ObjectType var14 = var13.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15, true);
    com.google.javascript.rhino.jstype.ObjectType var18 = var17.createAnonymousObjectType();
    boolean var19 = var18.isUnknownType();
    boolean var20 = var14.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var18);
    boolean var21 = var14.isBooleanValueType();
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22, true);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25, true);
    com.google.javascript.rhino.jstype.ObjectType var28 = var27.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29, true);
    com.google.javascript.rhino.jstype.ObjectType var32 = var31.createAnonymousObjectType();
    boolean var33 = var32.isUnknownType();
    boolean var34 = var28.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var32);
    boolean var35 = var32.isFunctionPrototypeType();
    var32.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var37 = var32.dereference();
    com.google.javascript.rhino.jstype.JSType[] var38 = new com.google.javascript.rhino.jstype.JSType[] { var37};
    com.google.javascript.rhino.jstype.JSType var39 = var24.createUnionType(var38);
    com.google.javascript.rhino.ErrorReporter var40 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40, true);
    com.google.javascript.rhino.jstype.JSType var43 = null;
    boolean var45 = var42.canPropertyBeDefined(var43, "hi!");
    boolean var47 = var42.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var48 = new com.google.javascript.rhino.jstype.FunctionBuilder(var42);
    com.google.javascript.rhino.jstype.FunctionBuilder var50 = var48.withName("NUMBER 10.0\n");
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51, true);
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var55 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var55, true);
    com.google.javascript.rhino.jstype.ObjectType var58 = var57.createAnonymousObjectType();
    boolean var59 = var58.isUnknownType();
    boolean var60 = var54.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var58);
    boolean var61 = var58.isFunctionPrototypeType();
    com.google.javascript.rhino.jstype.FunctionBuilder var63 = var50.withReturnType((com.google.javascript.rhino.jstype.JSType)var58, true);
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var68 = var65.useSourceInfoIfMissingFrom(var67);
    com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.eq(var67, var70);
    com.google.javascript.rhino.Node var72 = var67.cloneNode();
    boolean var73 = var72.isOr();
    com.google.javascript.rhino.jstype.StaticSourceFile var74 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var72);
    boolean var75 = var72.isDec();
    boolean var76 = var72.isFor();
    boolean var77 = var72.isNoSideEffectsCall();
    com.google.javascript.rhino.jstype.FunctionType var78 = var24.createFunctionType((com.google.javascript.rhino.jstype.JSType)var58, var72);
    boolean var79 = var14.differsFrom((com.google.javascript.rhino.jstype.JSType)var58);
    com.google.javascript.rhino.Node var81 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var83 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var84 = var81.useSourceInfoIfMissingFrom(var83);
    com.google.javascript.rhino.Node var86 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var88 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var89 = var86.useSourceInfoIfMissingFrom(var88);
    com.google.javascript.rhino.Node var90 = com.google.javascript.rhino.IR.exprResult(var89);
    java.lang.String var91 = var83.checkTreeEquals(var89);
    com.google.javascript.rhino.jstype.FunctionType var92 = var2.createFunctionType((com.google.javascript.rhino.jstype.JSType)var58, var89);
    int var94 = var89.getIntProp((-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var95 = com.google.javascript.rhino.IR.var(var89);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 0);

  }

  public void test348() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test348"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    var7.setSourceEncodedPosition(100);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = var11.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.eq(var13, var16);
    com.google.javascript.rhino.Node var18 = var13.cloneNode();
    boolean var19 = var18.isOr();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = var21.useSourceInfoIfMissingFrom(var23);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.eq(var23, var26);
    com.google.javascript.rhino.Node var28 = var23.cloneNode();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.or(var18, var28);
    com.google.javascript.rhino.Node var30 = var7.useSourceInfoFromForTree(var18);
    boolean var31 = var30.isScript();
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var36 = var33.useSourceInfoIfMissingFrom(var35);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.eq(var35, var38);
    com.google.javascript.rhino.Node var40 = var35.cloneNode();
    java.lang.String var41 = var30.checkTreeEquals(var40);
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var46 = var43.useSourceInfoIfMissingFrom(var45);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.eq(var45, var48);
    com.google.javascript.rhino.Node var50 = var45.cloneNode();
    boolean var51 = var50.isOr();
    com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var56 = var53.useSourceInfoIfMissingFrom(var55);
    com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.IR.eq(var55, var58);
    com.google.javascript.rhino.Node var60 = var55.cloneNode();
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.or(var50, var60);
    com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var66 = var63.useSourceInfoIfMissingFrom(var65);
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.IR.eq(var65, var68);
    var69.setSourceEncodedPosition(100);
    com.google.javascript.rhino.Node var73 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var75 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var76 = var73.useSourceInfoIfMissingFrom(var75);
    com.google.javascript.rhino.Node var78 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var79 = com.google.javascript.rhino.IR.eq(var75, var78);
    com.google.javascript.rhino.Node var80 = var75.cloneNode();
    boolean var81 = var80.isOr();
    com.google.javascript.rhino.Node var83 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var85 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var86 = var83.useSourceInfoIfMissingFrom(var85);
    com.google.javascript.rhino.Node var88 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var89 = com.google.javascript.rhino.IR.eq(var85, var88);
    com.google.javascript.rhino.Node var90 = var85.cloneNode();
    com.google.javascript.rhino.Node var91 = com.google.javascript.rhino.IR.or(var80, var90);
    com.google.javascript.rhino.Node var92 = var69.useSourceInfoFromForTree(var80);
    com.google.javascript.rhino.Node.AncestorIterable var93 = var92.getAncestors();
    java.lang.String var94 = var50.checkTreeEquals(var92);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var95 = com.google.javascript.rhino.IR.propdef(var30, var50);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "Node tree inequality:\nTree1:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nTree2:\nNUMBER 10.0\n\n\nSubtree1: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree2: NUMBER 10.0\n"+ "'", var41.equals("Node tree inequality:\nTree1:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nTree2:\nNUMBER 10.0\n\n\nSubtree1: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree2: NUMBER 10.0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 10.0\n\n\nTree2:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree1: NUMBER 10.0\n\n\nSubtree2: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n"+ "'", var94.equals("Node tree inequality:\nTree1:\nNUMBER 10.0\n\n\nTree2:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree1: NUMBER 10.0\n\n\nSubtree2: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n"));

  }

  public void test349() {}
//   public void test349() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test349"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
//     var2.setCrossModuleCodeMotion(false);
//     var2.setLabelRenaming(true);
//     java.util.Set var7 = null;
//     var2.setStripTypePrefixes(var7);
//     var1.initOptions(var2);
//     boolean var10 = var1.acceptConstKeyword();
//     com.google.javascript.jscomp.CodingConvention var11 = var1.getCodingConvention();
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var12 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var13 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1, var12);
//     com.google.javascript.jscomp.DiagnosticType var19 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
//     com.google.javascript.jscomp.DiagnosticType var25 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
//     java.lang.String[] var27 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var28 = com.google.javascript.jscomp.JSError.make("", 1, 39, var25, var27);
//     com.google.javascript.jscomp.ShowByPathWarningsGuard var29 = new com.google.javascript.jscomp.ShowByPathWarningsGuard(var27);
//     boolean var30 = var19.equals((java.lang.Object)var27);
//     com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var36 = var33.useSourceInfoIfMissingFrom(var35);
//     com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.exprResult(var36);
//     var37.setLength(10);
//     com.google.javascript.jscomp.CheckLevel var40 = null;
//     com.google.javascript.jscomp.CheckLevel var44 = null;
//     com.google.javascript.jscomp.DiagnosticType var47 = com.google.javascript.jscomp.DiagnosticType.warning("{505847021}", "{505847021}");
//     com.google.javascript.jscomp.DiagnosticType var53 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
//     java.lang.String[] var55 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var56 = com.google.javascript.jscomp.JSError.make("", 1, 39, var53, var55);
//     com.google.javascript.jscomp.ShowByPathWarningsGuard var57 = new com.google.javascript.jscomp.ShowByPathWarningsGuard(var55);
//     com.google.javascript.jscomp.JSError var58 = com.google.javascript.jscomp.JSError.make("Node tree inequality:\nTree1:\nNUMBER 10.0\n\n\nTree2:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree1: NUMBER 10.0\n\n\nSubtree2: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n", (-1), 10, var44, var47, var55);
//     java.lang.String[] var60 = new java.lang.String[] { "null(null)"};
//     com.google.javascript.jscomp.JSError var61 = com.google.javascript.jscomp.JSError.make("hi!", var37, var40, var47, var60);
//     com.google.javascript.jscomp.JSError var62 = com.google.javascript.jscomp.JSError.make("module$null(null)", 100, 39, var19, var60);
//     com.google.javascript.jscomp.CheckLevel var63 = var62.getDefaultLevel();
//     java.lang.String var64 = var13.formatWarning(var62);
// 
//   }

  public void test350() {}
//   public void test350() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test350"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = null;
//     com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var3 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var1, var2);
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var8 = var5.useSourceInfoIfMissingFrom(var7);
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.eq(var7, var10);
//     var11.setSourceEncodedPosition(100);
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var18 = var15.useSourceInfoIfMissingFrom(var17);
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.eq(var17, var20);
//     com.google.javascript.rhino.Node var22 = var17.cloneNode();
//     boolean var23 = var22.isOr();
//     com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var28 = var25.useSourceInfoIfMissingFrom(var27);
//     com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.eq(var27, var30);
//     com.google.javascript.rhino.Node var32 = var27.cloneNode();
//     com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.or(var22, var32);
//     com.google.javascript.rhino.Node var34 = var11.useSourceInfoFromForTree(var22);
//     com.google.javascript.rhino.Node var35 = var11.removeFirstChild();
//     com.google.javascript.jscomp.CodingConvention var36 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var37 = new com.google.javascript.jscomp.ClosureCodingConvention(var36);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var38 = null;
//     com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var39 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var37, var38);
//     com.google.javascript.jscomp.ClosureCodingConvention var40 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var37);
//     com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var45 = var42.useSourceInfoIfMissingFrom(var44);
//     com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.eq(var44, var47);
//     com.google.javascript.rhino.Node var49 = var44.cloneNode();
//     boolean var50 = var49.isOr();
//     com.google.javascript.rhino.jstype.StaticSourceFile var51 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var49);
//     boolean var52 = var49.isDec();
//     boolean var53 = var49.isFor();
//     boolean var54 = var37.isVarArgsParameter(var49);
//     boolean var55 = var49.isEmpty();
//     boolean var56 = var35.hasChild(var49);
//     com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var61 = var58.useSourceInfoIfMissingFrom(var60);
//     com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var64 = com.google.javascript.rhino.IR.eq(var60, var63);
//     com.google.javascript.rhino.Node var65 = var60.cloneNode();
//     boolean var66 = var65.isOr();
//     com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var71 = var68.useSourceInfoIfMissingFrom(var70);
//     com.google.javascript.rhino.Node var73 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var74 = com.google.javascript.rhino.IR.eq(var70, var73);
//     com.google.javascript.rhino.Node var75 = var70.cloneNode();
//     com.google.javascript.rhino.Node var76 = com.google.javascript.rhino.IR.or(var65, var75);
//     int var77 = var65.getCharno();
//     java.lang.String var78 = var1.extractClassNameIfRequire(var35, var65);
//     com.google.javascript.rhino.Node var80 = com.google.javascript.rhino.IR.number(10.0d);
//     boolean var81 = var80.isLabel();
//     com.google.javascript.rhino.Node var83 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var85 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var86 = var83.useSourceInfoIfMissingFrom(var85);
//     boolean var87 = var85.isFalse();
//     com.google.javascript.rhino.Node var88 = com.google.javascript.rhino.IR.sheq(var80, var85);
//     boolean var89 = var80.isTrue();
//     boolean var90 = var80.isNew();
//     var65.removeChild(var80);
// 
//   }

  public void test351() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test351"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    com.google.javascript.rhino.Node var8 = var3.cloneNode();
    boolean var9 = var8.isOr();
    com.google.javascript.rhino.jstype.StaticSourceFile var10 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var8);
    boolean var11 = var8.isDec();
    boolean var12 = var8.isBlock();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var17 = var14.useSourceInfoIfMissingFrom(var16);
    boolean var18 = var16.isOr();
    com.google.javascript.rhino.JSDocInfo var19 = var16.getJSDocInfo();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.var(var8, var16);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test352() {}
//   public void test352() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test352"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.JSModule var4 = var3.getModule();
//     com.google.javascript.jscomp.JSModule var5 = null;
//     var3.setModule(var5);
//     com.google.javascript.jscomp.JSModule var7 = var3.getModule();
//     var3.removeRequire("hi!");
// 
//   }

  public void test353() {}
//   public void test353() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test353"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
//     com.google.javascript.rhino.ErrorReporter var3 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3, true);
//     com.google.javascript.rhino.jstype.ObjectType var6 = var5.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var7 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7, true);
//     com.google.javascript.rhino.jstype.ObjectType var10 = var9.createAnonymousObjectType();
//     boolean var11 = var10.isUnknownType();
//     boolean var12 = var6.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var10);
//     boolean var13 = var10.isFunctionPrototypeType();
//     var10.clearCachedValues();
//     com.google.javascript.rhino.jstype.ObjectType var15 = var10.dereference();
//     com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var15};
//     com.google.javascript.rhino.jstype.JSType var17 = var2.createUnionType(var16);
//     com.google.javascript.rhino.ErrorReporter var18 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18, true);
//     com.google.javascript.rhino.jstype.JSType var21 = null;
//     boolean var23 = var20.canPropertyBeDefined(var21, "hi!");
//     boolean var25 = var20.hasNamespace("");
//     com.google.javascript.rhino.jstype.FunctionBuilder var26 = new com.google.javascript.rhino.jstype.FunctionBuilder(var20);
//     com.google.javascript.rhino.jstype.FunctionBuilder var28 = var26.withName("NUMBER 10.0\n");
//     com.google.javascript.rhino.ErrorReporter var29 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29, true);
//     com.google.javascript.rhino.jstype.ObjectType var32 = var31.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var33 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33, true);
//     com.google.javascript.rhino.jstype.ObjectType var36 = var35.createAnonymousObjectType();
//     boolean var37 = var36.isUnknownType();
//     boolean var38 = var32.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var36);
//     boolean var39 = var36.isFunctionPrototypeType();
//     com.google.javascript.rhino.jstype.FunctionBuilder var41 = var28.withReturnType((com.google.javascript.rhino.jstype.JSType)var36, true);
//     com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var46 = var43.useSourceInfoIfMissingFrom(var45);
//     com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.eq(var45, var48);
//     com.google.javascript.rhino.Node var50 = var45.cloneNode();
//     boolean var51 = var50.isOr();
//     com.google.javascript.rhino.jstype.StaticSourceFile var52 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var50);
//     boolean var53 = var50.isDec();
//     boolean var54 = var50.isFor();
//     boolean var55 = var50.isNoSideEffectsCall();
//     com.google.javascript.rhino.jstype.FunctionType var56 = var2.createFunctionType((com.google.javascript.rhino.jstype.JSType)var36, var50);
//     int var57 = var56.getExtendedInterfacesCount();
//     boolean var58 = var56.isReturnTypeInferred();
//     boolean var59 = var56.isOrdinaryFunction();
//     int var60 = var56.getMaxArguments();
//     com.google.javascript.rhino.jstype.ObjectType var61 = var56.getTypeOfThis();
//     java.util.List var62 = null;
//     var56.setImplementedInterfaces(var62);
// 
//   }

  public void test354() {}
//   public void test354() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test354"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = null;
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var6 = var3.useSourceInfoIfMissingFrom(var5);
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.eq(var5, var8);
//     com.google.javascript.rhino.Node var10 = var5.cloneNode();
//     boolean var11 = var10.isOr();
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var16 = var13.useSourceInfoIfMissingFrom(var15);
//     com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.eq(var15, var18);
//     com.google.javascript.rhino.Node var20 = var15.cloneNode();
//     com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.or(var10, var20);
//     boolean var22 = var21.isTry();
//     com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var27 = var24.useSourceInfoIfMissingFrom(var26);
//     com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var30 = var27.copyInformationFrom(var29);
//     com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.forNode(var0, var1, var21, var29);
// 
//   }

  public void test355() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test355"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
    boolean var2 = var1.recordImplicitCast();
    com.google.javascript.rhino.JSTypeExpression var4 = null;
    boolean var5 = var1.recordParameter("hi!", var4);
    boolean var6 = var1.recordJavaDispatch();
    boolean var7 = var1.recordConsistentIdGenerator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test356() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test356"); }


    java.lang.String var1 = com.google.javascript.rhino.ScriptRuntime.escapeString("module$null(null)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "module$null(null)"+ "'", var1.equals("module$null(null)"));

  }

  public void test357() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test357"); }


    com.google.javascript.jscomp.ShowByPathWarningsGuard.ShowType var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.ShowByPathWarningsGuard var2 = new com.google.javascript.jscomp.ShowByPathWarningsGuard("{1459695149}", var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test358() {}
//   public void test358() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test358"); }
// 
// 
//     java.io.InputStream var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromInputStream("NUMBER 10.0", var1);
// 
//   }

  public void test359() {}
//   public void test359() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test359"); }
// 
// 
//     java.nio.charset.Charset var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromFile("NUMBER 10.0", var1);
//     com.google.javascript.jscomp.Region var4 = var2.getRegion(100);
//     var2.setOriginalPath("NUMBER 10.0\n");
//     java.lang.String var7 = var2.getOriginalPath();
//     com.google.javascript.jscomp.JsAst var8 = new com.google.javascript.jscomp.JsAst(var2);
//     com.google.javascript.rhino.InputId var9 = var8.getInputId();
//     com.google.javascript.jscomp.CompilerInput var11 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var8, true);
//     var11.removeRequire("Node tree inequality:\nTree1:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nTree2:\nNUMBER 10.0\n\n\nSubtree1: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree2: NUMBER 10.0\n");
// 
//   }

  public void test360() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test360"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    boolean var5 = var2.canPropertyBeDefined(var3, "hi!");
    boolean var7 = var2.hasNamespace("");
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8, true);
    com.google.javascript.rhino.jstype.ObjectType var11 = var10.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12, true);
    com.google.javascript.rhino.jstype.ObjectType var15 = var14.createAnonymousObjectType();
    boolean var16 = var15.isUnknownType();
    boolean var17 = var11.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var15);
    boolean var18 = var15.isFunctionPrototypeType();
    var2.resolveTypesInScope((com.google.javascript.rhino.jstype.StaticScope)var15);
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20, true);
    com.google.javascript.rhino.jstype.ObjectType var23 = var22.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24, true);
    com.google.javascript.rhino.jstype.ObjectType var27 = var26.createAnonymousObjectType();
    boolean var28 = var27.isUnknownType();
    boolean var29 = var23.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var27);
    boolean var30 = var27.isFunctionPrototypeType();
    var27.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var32 = var27.dereference();
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33, true);
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36, true);
    com.google.javascript.rhino.jstype.ObjectType var39 = var38.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var40 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40, true);
    com.google.javascript.rhino.jstype.ObjectType var43 = var42.createAnonymousObjectType();
    boolean var44 = var43.isUnknownType();
    boolean var45 = var39.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var43);
    boolean var46 = var43.isFunctionPrototypeType();
    var43.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var48 = var43.dereference();
    com.google.javascript.rhino.jstype.JSType[] var49 = new com.google.javascript.rhino.jstype.JSType[] { var48};
    com.google.javascript.rhino.jstype.JSType var50 = var35.createUnionType(var49);
    com.google.javascript.rhino.jstype.FunctionType var51 = var2.createConstructorType((com.google.javascript.rhino.jstype.JSType)var27, var49);
    int var52 = var51.getExtendedInterfacesCount();
    com.google.javascript.rhino.JSDocInfo var54 = var51.getOwnPropertyJSDocInfo("NUMBER 10.0\n");
    com.google.javascript.rhino.jstype.JSType var56 = var51.getPropertyType("{1614250164}");
    com.google.javascript.rhino.jstype.ObjectType var57 = var51.getPrototype();
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58, true);
    com.google.javascript.rhino.jstype.ObjectType var61 = var60.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var62 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var62, true);
    com.google.javascript.rhino.jstype.ObjectType var65 = var64.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var66 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var68 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var66, true);
    com.google.javascript.rhino.jstype.ObjectType var69 = var68.createAnonymousObjectType();
    boolean var70 = var69.isUnknownType();
    boolean var71 = var65.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var69);
    com.google.javascript.rhino.jstype.JSType var72 = var60.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType)var65);
    boolean var73 = var65.isBooleanValueType();
    boolean var74 = var65.isNumber();
    com.google.javascript.rhino.jstype.JSType.TypePair var75 = var57.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType)var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test361() {}
//   public void test361() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test361"); }
// 
// 
//     java.io.Reader var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromReader("NUMBER 10.0", var1);
// 
//   }

  public void test362() {}
//   public void test362() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test362"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     com.google.javascript.jscomp.Compiler.IntermediateState var3 = var1.getState();
//     java.nio.charset.Charset var5 = null;
//     com.google.javascript.jscomp.SourceFile var6 = com.google.javascript.jscomp.SourceFile.fromFile("NUMBER 10.0", var5);
//     com.google.javascript.jscomp.Region var8 = var6.getRegion(100);
//     var6.setOriginalPath("NUMBER 10.0\n");
//     java.lang.String var11 = var6.getOriginalPath();
//     com.google.javascript.jscomp.JsAst var12 = new com.google.javascript.jscomp.JsAst(var6);
//     com.google.javascript.rhino.InputId var13 = var12.getInputId();
//     var1.addNewScript(var12);
// 
//   }

  public void test363() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test363"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3, true);
    com.google.javascript.rhino.jstype.ObjectType var6 = var5.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var7 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7, true);
    com.google.javascript.rhino.jstype.ObjectType var10 = var9.createAnonymousObjectType();
    boolean var11 = var10.isUnknownType();
    boolean var12 = var6.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var10);
    boolean var13 = var10.isFunctionPrototypeType();
    var10.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var15 = var10.dereference();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var15};
    com.google.javascript.rhino.jstype.JSType var17 = var2.createUnionType(var16);
    com.google.javascript.rhino.ErrorReporter var18 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18, true);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    boolean var23 = var20.canPropertyBeDefined(var21, "hi!");
    boolean var25 = var20.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var26 = new com.google.javascript.rhino.jstype.FunctionBuilder(var20);
    com.google.javascript.rhino.jstype.FunctionBuilder var28 = var26.withName("NUMBER 10.0\n");
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29, true);
    com.google.javascript.rhino.jstype.ObjectType var32 = var31.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33, true);
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.createAnonymousObjectType();
    boolean var37 = var36.isUnknownType();
    boolean var38 = var32.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var36);
    boolean var39 = var36.isFunctionPrototypeType();
    com.google.javascript.rhino.jstype.FunctionBuilder var41 = var28.withReturnType((com.google.javascript.rhino.jstype.JSType)var36, true);
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var46 = var43.useSourceInfoIfMissingFrom(var45);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.eq(var45, var48);
    com.google.javascript.rhino.Node var50 = var45.cloneNode();
    boolean var51 = var50.isOr();
    com.google.javascript.rhino.jstype.StaticSourceFile var52 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var50);
    boolean var53 = var50.isDec();
    boolean var54 = var50.isFor();
    boolean var55 = var50.isNoSideEffectsCall();
    com.google.javascript.rhino.jstype.FunctionType var56 = var2.createFunctionType((com.google.javascript.rhino.jstype.JSType)var36, var50);
    boolean var57 = var56.isReturnTypeInferred();
    boolean var58 = var56.hasInstanceType();
    com.google.javascript.rhino.jstype.FunctionType var59 = var56.toMaybeFunctionType();
    com.google.javascript.rhino.jstype.JSType var61 = var56.getPropertyType("NUMBER 10.0");
    com.google.javascript.rhino.jstype.JSType var62 = var61.unboxesTo();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);

  }

  public void test364() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test364"); }


    com.google.javascript.jscomp.ShowByPathWarningsGuard.ShowType var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.ShowByPathWarningsGuard var2 = new com.google.javascript.jscomp.ShowByPathWarningsGuard("NUMBER 10.0", var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test365() {}
//   public void test365() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test365"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setTweakToNumberLiteral("", 1);
//     var0.setInlineVariables(false);
//     com.google.javascript.jscomp.CompilerOptions.TracerMode var6 = var0.getTracerMode();
//     var0.setPrintInputDelimiter(false);
//     var0.setCheckMissingGetCssNameBlacklist("");
//     var0.setCollapseObjectLiterals(false);
//     var0.setLooseTypes(true);
//     com.google.javascript.jscomp.CodingConvention var15 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var16 = new com.google.javascript.jscomp.ClosureCodingConvention(var15);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var17 = null;
//     com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var18 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var16, var17);
//     com.google.javascript.jscomp.ClosureCodingConvention var19 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var16);
//     com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var24 = var21.useSourceInfoIfMissingFrom(var23);
//     com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.eq(var23, var26);
//     com.google.javascript.rhino.Node var28 = var23.cloneNode();
//     boolean var29 = var28.isOr();
//     com.google.javascript.rhino.jstype.StaticSourceFile var30 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var28);
//     boolean var31 = var28.isDec();
//     boolean var32 = var28.isFor();
//     boolean var33 = var16.isVarArgsParameter(var28);
//     var0.setCodingConvention((com.google.javascript.jscomp.CodingConvention)var16);
//     boolean var37 = var16.isExported("InputId: NUMBER 10.0", true);
// 
//   }

  public void test366() {}
//   public void test366() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test366"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = null;
//     com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var3 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var1, var2);
//     com.google.javascript.jscomp.ClosureCodingConvention var4 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var1);
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var9 = var6.useSourceInfoIfMissingFrom(var8);
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.eq(var8, var11);
//     com.google.javascript.rhino.Node var13 = var8.cloneNode();
//     boolean var14 = var13.isOr();
//     com.google.javascript.rhino.jstype.StaticSourceFile var15 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var13);
//     boolean var16 = var13.isDec();
//     boolean var17 = var13.isFor();
//     boolean var18 = var1.isVarArgsParameter(var13);
//     java.lang.String var19 = var1.getDelegateSuperclassName();
// 
//   }

  public void test367() {}
//   public void test367() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test367"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setCrossModuleCodeMotion(false);
//     com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var3 = null;
//     var0.setAnonymousFunctionNaming(var3);
//     var0.setExtractPrototypeMemberDeclarations(true);
//     var0.setRemoveClosureAsserts(false);
//     java.util.List var10 = null;
//     var0.setReplaceStringsConfiguration("DependencyInfo(relativePath='EMPTY\n', path='Node tree inequality:\nTree1:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nTree2:\nNUMBER 10.0\n\n\nSubtree1: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree2: NUMBER 10.0\n', provides=null, requires=null)", var10);
// 
//   }

  public void test368() {}
//   public void test368() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test368"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
//     boolean var3 = var1.isSuperClassReference("hi!");
//     com.google.javascript.jscomp.ClosureCodingConvention var4 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var1);
//     boolean var6 = var4.isExported("Node tree inequality:\nTree1:\nEXPR_RESULT\n    NUMBER 10.0\n\n\nTree2:\nCALL\n    EQ\n        NUMBER 10.0\n        NUMBER 10.0\n    OR\n        NUMBER 10.0\n        NUMBER 10.0\n\n\nSubtree1: EXPR_RESULT\n    NUMBER 10.0\n\n\nSubtree2: CALL\n    EQ\n        NUMBER 10.0\n        NUMBER 10.0\n    OR\n        NUMBER 10.0\n        NUMBER 10.0\n");
// 
//   }

  public void test369() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test369"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.WarningLevel var1 = com.google.javascript.jscomp.WarningLevel.valueOf("{723551193}");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test370() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test370"); }


    java.nio.charset.Charset var1 = null;
    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromFile("NUMBER 10.0", var1);
    com.google.javascript.jscomp.Region var4 = var2.getRegion(100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var6 = var2.getLineOffset(39);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test371() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test371"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    boolean var5 = var2.canPropertyBeDefined(var3, "hi!");
    boolean var7 = var2.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var8 = new com.google.javascript.rhino.jstype.FunctionBuilder(var2);
    com.google.javascript.rhino.jstype.FunctionType var9 = var8.build();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = var11.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.exprResult(var14);
    com.google.javascript.rhino.jstype.FunctionBuilder var16 = var8.withSourceNode(var14);
    com.google.javascript.rhino.jstype.FunctionBuilder var18 = var16.withTemplateName("function (): {909579166}");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.FunctionType var19 = var16.build();
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test372() {}
//   public void test372() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test372"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     boolean var5 = var2.canPropertyBeDefined(var3, "hi!");
//     boolean var7 = var2.hasNamespace("");
//     com.google.javascript.rhino.jstype.FunctionBuilder var8 = new com.google.javascript.rhino.jstype.FunctionBuilder(var2);
//     com.google.javascript.rhino.ErrorReporter var9 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var9, true);
//     com.google.javascript.rhino.ErrorReporter var12 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12, true);
//     com.google.javascript.rhino.jstype.ObjectType var15 = var14.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var16 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16, true);
//     com.google.javascript.rhino.jstype.ObjectType var19 = var18.createAnonymousObjectType();
//     boolean var20 = var19.isUnknownType();
//     boolean var21 = var15.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var19);
//     boolean var22 = var19.isFunctionPrototypeType();
//     var19.clearCachedValues();
//     com.google.javascript.rhino.jstype.ObjectType var24 = var19.dereference();
//     com.google.javascript.rhino.jstype.JSType[] var25 = new com.google.javascript.rhino.jstype.JSType[] { var24};
//     com.google.javascript.rhino.jstype.JSType var26 = var11.createUnionType(var25);
//     com.google.javascript.rhino.ErrorReporter var27 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27, true);
//     com.google.javascript.rhino.ErrorReporter var30 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30, true);
//     com.google.javascript.rhino.jstype.ObjectType var33 = var32.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var34 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34, true);
//     com.google.javascript.rhino.jstype.ObjectType var37 = var36.createAnonymousObjectType();
//     boolean var38 = var37.isUnknownType();
//     boolean var39 = var33.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var37);
//     boolean var40 = var37.isFunctionPrototypeType();
//     var37.clearCachedValues();
//     com.google.javascript.rhino.jstype.ObjectType var42 = var37.dereference();
//     com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
//     com.google.javascript.rhino.jstype.JSType var44 = var29.createUnionType(var43);
//     com.google.javascript.rhino.jstype.FunctionType var45 = var2.createFunctionTypeWithVarArgs(var26, var43);
//     com.google.javascript.rhino.jstype.JSType var46 = null;
//     com.google.javascript.rhino.jstype.JSType var47 = var2.createOptionalNullableType(var46);
// 
//   }

  public void test373() {}
//   public void test373() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test373"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setTweakToNumberLiteral("", 1);
//     var0.setInlineVariables(false);
//     com.google.javascript.jscomp.CompilerOptions.TracerMode var6 = var0.getTracerMode();
//     var0.setPrintInputDelimiter(false);
//     var0.setCheckMissingGetCssNameBlacklist("");
//     var0.setCollapseObjectLiterals(false);
//     var0.setLooseTypes(true);
//     com.google.javascript.jscomp.CodingConvention var15 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var16 = new com.google.javascript.jscomp.ClosureCodingConvention(var15);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var17 = null;
//     com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var18 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var16, var17);
//     com.google.javascript.jscomp.ClosureCodingConvention var19 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var16);
//     com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var24 = var21.useSourceInfoIfMissingFrom(var23);
//     com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.eq(var23, var26);
//     com.google.javascript.rhino.Node var28 = var23.cloneNode();
//     boolean var29 = var28.isOr();
//     com.google.javascript.rhino.jstype.StaticSourceFile var30 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var28);
//     boolean var31 = var28.isDec();
//     boolean var32 = var28.isFor();
//     boolean var33 = var16.isVarArgsParameter(var28);
//     var0.setCodingConvention((com.google.javascript.jscomp.CodingConvention)var16);
//     boolean var37 = var16.isExported("{1125981799}", false);
// 
//   }

  public void test374() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test374"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.jstype.ObjectType var3 = var2.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4, true);
    com.google.javascript.rhino.jstype.ObjectType var7 = var6.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8, true);
    com.google.javascript.rhino.jstype.ObjectType var11 = var10.createAnonymousObjectType();
    boolean var12 = var11.isUnknownType();
    boolean var13 = var7.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var11);
    com.google.javascript.rhino.jstype.JSType var14 = var2.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType)var7);
    boolean var15 = var7.isBooleanValueType();
    java.lang.String var16 = var7.getNormalizedReferenceName();
    boolean var17 = var7.isNumberObjectType();
    boolean var18 = var7.isNullType();
    boolean var19 = var7.canBeCalled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test375() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test375"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setCrossModuleCodeMotion(false);
    com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var3 = null;
    var0.setAnonymousFunctionNaming(var3);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var5 = var0.getTweakProcessing();
    com.google.javascript.jscomp.VariableRenamingPolicy var6 = null;
    com.google.javascript.jscomp.PropertyRenamingPolicy var7 = null;
    var0.setRenamingPolicy(var6, var7);
    var0.setReplaceStringsPlaceholderToken("NUMBER 10.0\n");
    var0.setRewriteFunctionExpressions(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test376() {}
//   public void test376() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test376"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     com.google.javascript.jscomp.Compiler.IntermediateState var3 = var1.getState();
//     double var4 = var1.getProgress();
//     java.util.List var5 = null;
//     java.util.List var6 = null;
//     com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
//     var7.setSourceMapOutputPath("hi!");
//     var7.setReplaceStringsPlaceholderToken("hi!");
//     var7.setIdeMode(false);
//     var1.<com.google.javascript.jscomp.SourceFile>initModules(var5, var6, var7);
// 
//   }

  public void test377() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test377"); }


    com.google.javascript.jscomp.CodingConvention var0 = null;
    com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2, true);
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5, true);
    com.google.javascript.rhino.jstype.ObjectType var8 = var7.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var9 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var9, true);
    com.google.javascript.rhino.jstype.ObjectType var12 = var11.createAnonymousObjectType();
    boolean var13 = var12.isUnknownType();
    boolean var14 = var8.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var12);
    boolean var15 = var12.isFunctionPrototypeType();
    var12.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var17 = var12.dereference();
    com.google.javascript.rhino.jstype.JSType[] var18 = new com.google.javascript.rhino.jstype.JSType[] { var17};
    com.google.javascript.rhino.jstype.JSType var19 = var4.createUnionType(var18);
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20, true);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    boolean var25 = var22.canPropertyBeDefined(var23, "hi!");
    boolean var27 = var22.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var28 = new com.google.javascript.rhino.jstype.FunctionBuilder(var22);
    com.google.javascript.rhino.jstype.FunctionBuilder var30 = var28.withName("NUMBER 10.0\n");
    com.google.javascript.rhino.ErrorReporter var31 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var31, true);
    com.google.javascript.rhino.jstype.ObjectType var34 = var33.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var35 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var35, true);
    com.google.javascript.rhino.jstype.ObjectType var38 = var37.createAnonymousObjectType();
    boolean var39 = var38.isUnknownType();
    boolean var40 = var34.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var38);
    boolean var41 = var38.isFunctionPrototypeType();
    com.google.javascript.rhino.jstype.FunctionBuilder var43 = var30.withReturnType((com.google.javascript.rhino.jstype.JSType)var38, true);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var48 = var45.useSourceInfoIfMissingFrom(var47);
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.eq(var47, var50);
    com.google.javascript.rhino.Node var52 = var47.cloneNode();
    boolean var53 = var52.isOr();
    com.google.javascript.rhino.jstype.StaticSourceFile var54 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var52);
    boolean var55 = var52.isDec();
    boolean var56 = var52.isFor();
    boolean var57 = var52.isNoSideEffectsCall();
    com.google.javascript.rhino.jstype.FunctionType var58 = var4.createFunctionType((com.google.javascript.rhino.jstype.JSType)var38, var52);
    com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var63 = var60.useSourceInfoIfMissingFrom(var62);
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.eq(var62, var65);
    com.google.javascript.rhino.Node var67 = var62.cloneNode();
    boolean var68 = var67.isOr();
    com.google.javascript.rhino.jstype.StaticSourceFile var69 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var67);
    boolean var70 = var67.isDec();
    boolean var71 = var67.isFor();
    java.lang.String var72 = var1.extractClassNameIfProvide(var52, var67);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var73 = com.google.javascript.rhino.IR.regexp(var52);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);

  }

  public void test378() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test378"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.block();
    boolean var1 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(var0);
    com.google.javascript.rhino.InputId var2 = var0.getInputId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test379() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test379"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setSourceMapOutputPath("hi!");
    var0.setReplaceStringsPlaceholderToken("hi!");
    var0.setCheckCaja(true);
    var0.setSummaryDetailLevel((-1));
    var0.setSpecializeInitialModule(false);
    var0.setReplaceIdGenerators(true);
    var0.setPrintInputDelimiter(false);

  }

  public void test380() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test380"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    boolean var5 = var3.isOr();
    int var6 = var3.getChildCount();
    int var7 = var3.getType();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var12 = var9.useSourceInfoIfMissingFrom(var11);
    boolean var13 = var11.isSetterDef();
    int var14 = var3.getIndexOfChild(var11);
    com.google.javascript.rhino.Node var15 = var3.getLastSibling();
    boolean var16 = var3.isThrow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test381() {}
//   public void test381() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test381"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
//     var2.setCrossModuleCodeMotion(false);
//     var2.setLabelRenaming(true);
//     java.util.Set var7 = null;
//     var2.setStripTypePrefixes(var7);
//     var1.initOptions(var2);
//     boolean var10 = var1.acceptConstKeyword();
//     com.google.javascript.jscomp.CodingConvention var11 = var1.getCodingConvention();
//     com.google.javascript.jscomp.Compiler.IntermediateState var12 = var1.getState();
//     java.util.List var13 = null;
//     java.util.List var14 = null;
//     com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
//     var15.setCrossModuleCodeMotion(false);
//     var15.setLabelRenaming(true);
//     java.util.Set var20 = null;
//     var15.setStripTypePrefixes(var20);
//     com.google.javascript.jscomp.Result var22 = var1.<com.google.javascript.jscomp.SourceFile,com.google.javascript.jscomp.SourceFile>compile(var13, var14, var15);
// 
//   }

  public void test382() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test382"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, false);
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3, true);
    com.google.javascript.rhino.jstype.JSType var6 = null;
    boolean var8 = var5.canPropertyBeDefined(var6, "hi!");
    boolean var10 = var5.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var11 = new com.google.javascript.rhino.jstype.FunctionBuilder(var5);
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12, true);
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15, true);
    com.google.javascript.rhino.jstype.ObjectType var18 = var17.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19, true);
    com.google.javascript.rhino.jstype.ObjectType var22 = var21.createAnonymousObjectType();
    boolean var23 = var22.isUnknownType();
    boolean var24 = var18.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var22);
    boolean var25 = var22.isFunctionPrototypeType();
    var22.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var27 = var22.dereference();
    com.google.javascript.rhino.jstype.JSType[] var28 = new com.google.javascript.rhino.jstype.JSType[] { var27};
    com.google.javascript.rhino.jstype.JSType var29 = var14.createUnionType(var28);
    com.google.javascript.rhino.ErrorReporter var30 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30, true);
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33, true);
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37, true);
    com.google.javascript.rhino.jstype.ObjectType var40 = var39.createAnonymousObjectType();
    boolean var41 = var40.isUnknownType();
    boolean var42 = var36.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var40);
    boolean var43 = var40.isFunctionPrototypeType();
    var40.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var45 = var40.dereference();
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.jstype.JSType var47 = var32.createUnionType(var46);
    com.google.javascript.rhino.jstype.FunctionType var48 = var5.createFunctionTypeWithVarArgs(var29, var46);
    boolean var49 = var29.isEnumElementType();
    com.google.javascript.rhino.jstype.JSType var50 = var2.createOptionalType(var29);
    var2.forwardDeclareType("InputId: NUMBER 10.0");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test383() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test383"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var2 = com.google.javascript.rhino.ScriptRuntime.escapeString("hi!", '4');
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }

  }

  public void test384() {}
//   public void test384() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test384"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     java.io.PrintStream var3 = null;
//     com.google.javascript.jscomp.PrintStreamErrorManager var4 = new com.google.javascript.jscomp.PrintStreamErrorManager((com.google.javascript.jscomp.MessageFormatter)var2, var3);
//     com.google.javascript.jscomp.DiagnosticType var10 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
//     java.lang.String[] var12 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var13 = com.google.javascript.jscomp.JSError.make("", 1, 39, var10, var12);
//     int var14 = var13.getNodeLength();
//     com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
//     var15.setSourceMapOutputPath("hi!");
//     var15.setIdeMode(false);
//     com.google.javascript.jscomp.CompilerOptions.LanguageMode var20 = var15.getLanguageIn();
//     boolean var21 = var13.equals((java.lang.Object)var15);
//     java.lang.String var22 = var2.formatError(var13);
// 
//   }

  public void test385() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test385"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var5 = var2.useSourceInfoIfMissingFrom(var4);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.eq(var4, var7);
    com.google.javascript.rhino.Node var9 = var4.cloneNode();
    boolean var10 = var9.isOr();
    com.google.javascript.rhino.Node[] var11 = new com.google.javascript.rhino.Node[] { var9};
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.arraylit(var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(31, var11, 39, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test386() {}
//   public void test386() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test386"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticType var5 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
//     java.lang.String[] var7 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var8 = com.google.javascript.jscomp.JSError.make("", 1, 39, var5, var7);
//     int var9 = var8.getNodeLength();
//     com.google.javascript.jscomp.CompilerOptions var10 = new com.google.javascript.jscomp.CompilerOptions();
//     var10.setSourceMapOutputPath("hi!");
//     var10.setIdeMode(false);
//     com.google.javascript.jscomp.CompilerOptions.LanguageMode var15 = var10.getLanguageIn();
//     boolean var16 = var8.equals((java.lang.Object)var10);
//     var10.setRewriteFunctionExpressions(false);
//     java.util.List var20 = null;
//     var10.setReplaceStringsConfiguration("EMPTY\n", var20);
// 
//   }

  public void test387() {}
//   public void test387() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test387"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = null;
//     com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var3 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var1, var2);
//     com.google.javascript.jscomp.ClosureCodingConvention var4 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var1);
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var9 = var6.useSourceInfoIfMissingFrom(var8);
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.eq(var8, var11);
//     com.google.javascript.rhino.Node var13 = var8.cloneNode();
//     boolean var14 = var13.isOr();
//     com.google.javascript.rhino.jstype.StaticSourceFile var15 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var13);
//     boolean var16 = var13.isDec();
//     boolean var17 = var13.isFor();
//     boolean var18 = var1.isVarArgsParameter(var13);
//     java.lang.String var19 = var1.getExportSymbolFunction();
//     boolean var21 = var1.isValidEnumKey("{1101839915}");
// 
//   }

  public void test388() {}
//   public void test388() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test388"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var5 = var2.useSourceInfoIfMissingFrom(var4);
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.eq(var4, var7);
//     com.google.javascript.rhino.Node var9 = var4.cloneNode();
//     boolean var10 = var9.isOr();
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var15 = var12.useSourceInfoIfMissingFrom(var14);
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.eq(var14, var17);
//     com.google.javascript.rhino.Node var19 = var14.cloneNode();
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.or(var9, var19);
//     boolean var21 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var20);
//     boolean var22 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(var20);
//     com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var27 = var24.useSourceInfoIfMissingFrom(var26);
//     com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.eq(var26, var29);
//     var29.setSourceEncodedPositionForTree(100);
//     java.lang.Object var34 = var29.getProp(10);
//     com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var39 = var36.useSourceInfoIfMissingFrom(var38);
//     com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.exprResult(var39);
//     boolean var41 = var39.isOptionalArg();
//     boolean var42 = var39.isSwitch();
//     com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.forNode(var0, var20, var29, var39);
// 
//   }

  public void test389() {}
//   public void test389() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test389"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = null;
//     com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var3 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var1, var2);
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var8 = var5.useSourceInfoIfMissingFrom(var7);
//     boolean var9 = var7.isSetterDef();
//     boolean var10 = var7.isNoSideEffectsCall();
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var15 = var12.useSourceInfoIfMissingFrom(var14);
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.eq(var14, var17);
//     com.google.javascript.rhino.Node var19 = var14.cloneNode();
//     boolean var20 = var19.isOr();
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var25 = var22.useSourceInfoIfMissingFrom(var24);
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.eq(var24, var27);
//     com.google.javascript.rhino.Node var29 = var24.cloneNode();
//     com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.or(var19, var29);
//     com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.voidNode(var30);
//     com.google.javascript.rhino.Node var32 = var7.srcref(var30);
//     com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var37 = var34.useSourceInfoIfMissingFrom(var36);
//     com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.exprResult(var37);
//     com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.block(var38);
//     com.google.javascript.rhino.InputId var40 = null;
//     var38.setInputId(var40);
//     java.lang.String var42 = var1.extractClassNameIfRequire(var32, var38);
//     com.google.javascript.rhino.Node var43 = null;
//     java.lang.String var44 = var1.getSingletonGetterClassName(var43);
// 
//   }

  public void test390() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test390"); }


    com.google.javascript.jscomp.CodingConvention var0 = null;
    com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    boolean var4 = var3.isLabel();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var9 = var6.useSourceInfoIfMissingFrom(var8);
    boolean var10 = var8.isFalse();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.sheq(var3, var8);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.Node.newString(0, "hi!");
    java.lang.String var15 = var1.extractClassNameIfRequire(var3, var14);
    boolean var16 = var14.isAssign();
    boolean var17 = var14.isCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test391() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test391"); }


    java.lang.String var2 = com.google.javascript.jscomp.ProcessCommonJSModules.toModuleName("{1101839915}", "hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "module${1101839915}"+ "'", var2.equals("module${1101839915}"));

  }

  public void test392() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test392"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    var2.setCrossModuleCodeMotion(false);
    var2.setLabelRenaming(true);
    java.util.Set var7 = null;
    var2.setStripTypePrefixes(var7);
    var1.initOptions(var2);
    boolean var10 = var1.acceptConstKeyword();
    com.google.javascript.jscomp.CodingConvention var11 = var1.getCodingConvention();
    com.google.javascript.jscomp.Compiler.IntermediateState var12 = var1.getState();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.check();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test393() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test393"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.disabled("", "function (): {909579166}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test394() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test394"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.exprResult(var4);
    boolean var6 = var4.isOptionalArg();
    boolean var7 = var4.isDo();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var12 = var9.useSourceInfoIfMissingFrom(var11);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var17 = var14.useSourceInfoIfMissingFrom(var16);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.exprResult(var17);
    java.lang.String var19 = var11.checkTreeEquals(var17);
    boolean var20 = var11.hasMoreThanOneChild();
    java.lang.String var21 = var11.getQualifiedName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.label(var4, var11);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test395() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test395"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    boolean var2 = var1.isLabel();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.Node.newString("{1459695149}", 0, 10);
    boolean var7 = var6.isAssign();
    com.google.javascript.rhino.Node var8 = var1.useSourceInfoIfMissingFrom(var6);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = var10.useSourceInfoIfMissingFrom(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.eq(var12, var15);
    com.google.javascript.rhino.Node var17 = var12.cloneNode();
    boolean var18 = var17.isOr();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var23 = var20.useSourceInfoIfMissingFrom(var22);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.eq(var22, var25);
    com.google.javascript.rhino.Node var27 = var22.cloneNode();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.or(var17, var27);
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.voidNode(var28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.tryCatch(var6, var29);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test396() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test396"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test397() {}
//   public void test397() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test397"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     com.google.javascript.jscomp.Compiler.IntermediateState var3 = var1.getState();
//     double var4 = var1.getProgress();
//     int var5 = var1.getWarningCount();
// 
//   }

  public void test398() {}
//   public void test398() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test398"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setSourceMapOutputPath("hi!");
//     var0.setIdeMode(false);
//     com.google.javascript.jscomp.CompilerOptions.LanguageMode var5 = var0.getLanguageIn();
//     var0.setRemoveUnusedLocalVars(true);
//     var0.setManageClosureDependencies(false);
//     com.google.javascript.jscomp.DependencyOptions var10 = null;
//     var0.setDependencyOptions(var10);
// 
//   }

  public void test399() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test399"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var3 = var1.recordTemplateTypeName("{723551193}");
    boolean var4 = var1.recordConsistentIdGenerator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test400() {}
//   public void test400() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test400"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setTweakToNumberLiteral("", 1);
//     java.util.Set var4 = null;
//     var0.setStripTypePrefixes(var4);
//     com.google.javascript.jscomp.DiagnosticGroup var6 = null;
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var8 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var6, var7);
//     var0.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var8);
//     com.google.javascript.jscomp.WarningsGuard[] var10 = new com.google.javascript.jscomp.WarningsGuard[] { var8};
//     com.google.javascript.jscomp.ComposeWarningsGuard var11 = new com.google.javascript.jscomp.ComposeWarningsGuard(var10);
//     com.google.javascript.jscomp.WarningsGuard[] var12 = new com.google.javascript.jscomp.WarningsGuard[] { var11};
//     com.google.javascript.jscomp.ComposeWarningsGuard var13 = new com.google.javascript.jscomp.ComposeWarningsGuard(var12);
//     com.google.javascript.jscomp.DiagnosticType var16 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
//     com.google.javascript.jscomp.DiagnosticType[] var17 = new com.google.javascript.jscomp.DiagnosticType[] { var16};
//     com.google.javascript.jscomp.DiagnosticGroup var18 = new com.google.javascript.jscomp.DiagnosticGroup(var17);
//     java.lang.Iterable var19 = var18.getTypes();
//     com.google.javascript.jscomp.DiagnosticGroup[] var20 = new com.google.javascript.jscomp.DiagnosticGroup[] { var18};
//     com.google.javascript.jscomp.DiagnosticGroup var21 = new com.google.javascript.jscomp.DiagnosticGroup(var20);
//     boolean var22 = var13.disables(var21);
// 
//   }

  public void test401() {}
//   public void test401() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test401"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
//     com.google.javascript.rhino.Node var8 = var3.cloneNode();
//     boolean var9 = var8.isOr();
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var14 = var11.useSourceInfoIfMissingFrom(var13);
//     com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.eq(var13, var16);
//     com.google.javascript.rhino.Node var18 = var13.cloneNode();
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.or(var8, var18);
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.voidNode(var19);
//     com.google.javascript.rhino.Node var21 = var20.getFirstChild();
//     com.google.javascript.rhino.Node var22 = var21.getLastSibling();
//     java.lang.Appendable var23 = null;
//     var21.appendStringTree(var23);
// 
//   }

  public void test402() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test402"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    com.google.javascript.rhino.Node var8 = var3.cloneNode();
    boolean var9 = var8.isOr();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = var11.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.eq(var13, var16);
    com.google.javascript.rhino.Node var18 = var13.cloneNode();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.or(var8, var18);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = var21.useSourceInfoIfMissingFrom(var23);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.eq(var23, var26);
    var27.setSourceEncodedPosition(100);
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var34 = var31.useSourceInfoIfMissingFrom(var33);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.eq(var33, var36);
    com.google.javascript.rhino.Node var38 = var33.cloneNode();
    boolean var39 = var38.isOr();
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var44 = var41.useSourceInfoIfMissingFrom(var43);
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.eq(var43, var46);
    com.google.javascript.rhino.Node var48 = var43.cloneNode();
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.or(var38, var48);
    com.google.javascript.rhino.Node var50 = var27.useSourceInfoFromForTree(var38);
    com.google.javascript.rhino.Node.AncestorIterable var51 = var50.getAncestors();
    java.lang.String var52 = var8.checkTreeEquals(var50);
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var56 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var57 = var54.useSourceInfoIfMissingFrom(var56);
    com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.eq(var56, var59);
    com.google.javascript.rhino.Node var61 = var56.cloneNode();
    boolean var62 = var61.isOr();
    com.google.javascript.rhino.Node var64 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var67 = var64.useSourceInfoIfMissingFrom(var66);
    com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.IR.eq(var66, var69);
    com.google.javascript.rhino.Node var71 = var66.cloneNode();
    com.google.javascript.rhino.Node var72 = com.google.javascript.rhino.IR.or(var61, var71);
    com.google.javascript.rhino.Node[] var73 = new com.google.javascript.rhino.Node[] { var72};
    com.google.javascript.rhino.Node var74 = com.google.javascript.rhino.IR.call(var50, var73);
    boolean var75 = var74.isEmpty();
    boolean var76 = var74.isBreak();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 10.0\n\n\nTree2:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree1: NUMBER 10.0\n\n\nSubtree2: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n"+ "'", var52.equals("Node tree inequality:\nTree1:\nNUMBER 10.0\n\n\nTree2:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree1: NUMBER 10.0\n\n\nSubtree2: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test403() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test403"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
    boolean var2 = var1.recordOverride();
    java.util.Set var3 = null;
    boolean var4 = var1.recordModifies(var3);
    boolean var6 = var1.recordFileOverview("hi!");
    boolean var7 = var1.isJavaDispatch();
    boolean var8 = var1.recordExterns();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test404() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test404"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3, true);
    com.google.javascript.rhino.jstype.ObjectType var6 = var5.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var7 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7, true);
    com.google.javascript.rhino.jstype.ObjectType var10 = var9.createAnonymousObjectType();
    boolean var11 = var10.isUnknownType();
    boolean var12 = var6.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var10);
    boolean var13 = var10.isFunctionPrototypeType();
    var10.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var15 = var10.dereference();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var15};
    com.google.javascript.rhino.jstype.JSType var17 = var2.createUnionType(var16);
    com.google.javascript.rhino.ErrorReporter var18 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18, true);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    boolean var23 = var20.canPropertyBeDefined(var21, "hi!");
    boolean var25 = var20.hasNamespace("");
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26, true);
    com.google.javascript.rhino.jstype.ObjectType var29 = var28.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var30 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30, true);
    com.google.javascript.rhino.jstype.ObjectType var33 = var32.createAnonymousObjectType();
    boolean var34 = var33.isUnknownType();
    boolean var35 = var29.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var33);
    boolean var36 = var33.isFunctionPrototypeType();
    var20.resolveTypesInScope((com.google.javascript.rhino.jstype.StaticScope)var33);
    com.google.javascript.rhino.ErrorReporter var38 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38, true);
    com.google.javascript.rhino.jstype.ObjectType var41 = var40.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var42 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var42, true);
    com.google.javascript.rhino.jstype.ObjectType var45 = var44.createAnonymousObjectType();
    boolean var46 = var45.isUnknownType();
    boolean var47 = var41.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var45);
    boolean var48 = var45.isFunctionPrototypeType();
    var45.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var50 = var45.dereference();
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51, true);
    com.google.javascript.rhino.ErrorReporter var54 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var54, true);
    com.google.javascript.rhino.jstype.ObjectType var57 = var56.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58, true);
    com.google.javascript.rhino.jstype.ObjectType var61 = var60.createAnonymousObjectType();
    boolean var62 = var61.isUnknownType();
    boolean var63 = var57.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var61);
    boolean var64 = var61.isFunctionPrototypeType();
    var61.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var66 = var61.dereference();
    com.google.javascript.rhino.jstype.JSType[] var67 = new com.google.javascript.rhino.jstype.JSType[] { var66};
    com.google.javascript.rhino.jstype.JSType var68 = var53.createUnionType(var67);
    com.google.javascript.rhino.jstype.FunctionType var69 = var20.createConstructorType((com.google.javascript.rhino.jstype.JSType)var45, var67);
    com.google.javascript.rhino.Node var70 = var2.createParametersWithVarArgs(var67);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var71 = null;
    var2.setResolveMode(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test405() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test405"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.JSTypeNative var1 = com.google.javascript.rhino.jstype.JSTypeNative.valueOf("");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test406() {}
//   public void test406() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test406"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
//     boolean var4 = var3.isLabel();
//     java.nio.charset.Charset var6 = null;
//     com.google.javascript.jscomp.SourceFile var7 = com.google.javascript.jscomp.SourceFile.fromFile("NUMBER 10.0", var6);
//     var3.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var7);
//     java.nio.charset.Charset var10 = null;
//     com.google.javascript.jscomp.SourceFile var11 = com.google.javascript.jscomp.SourceFile.fromFile("NUMBER 10.0", var10);
//     com.google.javascript.jscomp.Region var13 = var11.getRegion(100);
//     java.lang.String var14 = var11.toString();
//     com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
//     var15.setCrossModuleCodeMotion(false);
//     com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var18 = null;
//     var15.setAnonymousFunctionNaming(var18);
//     var15.setExtractPrototypeMemberDeclarations(true);
//     var15.setRemoveTryCatchFinally(true);
//     var15.setFoldConstants(false);
//     var15.setInlineGetters(false);
//     com.google.javascript.jscomp.Result var28 = var1.compile(var7, var11, var15);
//     java.util.Map var29 = var1.getInputsById();
//     java.nio.charset.Charset var31 = null;
//     com.google.javascript.jscomp.SourceFile var32 = com.google.javascript.jscomp.SourceFile.fromFile("NUMBER 10.0", var31);
//     com.google.javascript.jscomp.Region var34 = var32.getRegion(100);
//     var32.setOriginalPath("NUMBER 10.0\n");
//     java.lang.String var37 = var32.getOriginalPath();
//     com.google.javascript.jscomp.JsAst var38 = new com.google.javascript.jscomp.JsAst(var32);
//     com.google.javascript.rhino.InputId var39 = var38.getInputId();
//     com.google.javascript.jscomp.CompilerInput var41 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var38, true);
//     com.google.javascript.jscomp.SourceFile var42 = var38.getSourceFile();
//     com.google.javascript.jscomp.JSSourceFile[] var43 = null;
//     com.google.javascript.jscomp.CompilerOptions var44 = new com.google.javascript.jscomp.CompilerOptions();
//     var44.setSourceMapOutputPath("hi!");
//     var44.setReplaceStringsPlaceholderToken("hi!");
//     var44.setIdeMode(false);
//     var44.setColorizeErrorOutput(false);
//     com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
//     var53.setSourceMapOutputPath("hi!");
//     var53.setIdeMode(false);
//     com.google.javascript.jscomp.CompilerOptions.LanguageMode var58 = var53.getLanguageIn();
//     var44.setLanguageOut(var58);
//     var44.setRewriteNewDateGoogNow(false);
//     com.google.javascript.jscomp.Result var62 = var1.compile(var42, var43, var44);
// 
//   }

  public void test407() {}
//   public void test407() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test407"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.JSModule var4 = var3.getModule();
//     com.google.javascript.jscomp.JSModule var5 = null;
//     var3.setModule(var5);
//     java.io.PrintStream var7 = null;
//     com.google.javascript.jscomp.Compiler var8 = new com.google.javascript.jscomp.Compiler(var7);
//     com.google.javascript.jscomp.SourceMap var9 = var8.getSourceMap();
//     var8.disableThreads();
//     com.google.javascript.rhino.Node var11 = var3.getAstRoot((com.google.javascript.jscomp.AbstractCompiler)var8);
// 
//   }

  public void test408() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test408"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.jstype.ObjectType var3 = var2.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4, true);
    com.google.javascript.rhino.jstype.ObjectType var7 = var6.createAnonymousObjectType();
    boolean var8 = var7.isUnknownType();
    boolean var9 = var3.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var7);
    boolean var10 = var7.isFunctionPrototypeType();
    com.google.javascript.rhino.jstype.ObjectType var11 = com.google.javascript.rhino.jstype.ObjectType.cast((com.google.javascript.rhino.jstype.JSType)var7);
    boolean var13 = var11.hasOwnProperty("");
    boolean var14 = var11.isTemplateType();
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15, true);
    com.google.javascript.rhino.jstype.JSType var18 = null;
    boolean var20 = var17.canPropertyBeDefined(var18, "hi!");
    boolean var22 = var17.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var23 = new com.google.javascript.rhino.jstype.FunctionBuilder(var17);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var29 = var26.useSourceInfoIfMissingFrom(var28);
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.eq(var28, var31);
    com.google.javascript.rhino.Node var33 = var28.cloneNode();
    boolean var34 = var33.isOr();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var39 = var36.useSourceInfoIfMissingFrom(var38);
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.eq(var38, var41);
    com.google.javascript.rhino.Node var43 = var38.cloneNode();
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.or(var33, var43);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.voidNode(var44);
    com.google.javascript.rhino.Node var46 = var45.getFirstChild();
    com.google.javascript.rhino.Node var47 = var46.getLastSibling();
    com.google.javascript.rhino.ErrorReporter var48 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var48, true);
    com.google.javascript.rhino.jstype.ObjectType var51 = var50.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var52 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var52, true);
    com.google.javascript.rhino.jstype.ObjectType var55 = var54.createAnonymousObjectType();
    boolean var56 = var55.isUnknownType();
    boolean var57 = var51.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var55);
    boolean var58 = var55.isFunctionPrototypeType();
    var55.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var60 = var55.dereference();
    boolean var61 = var55.isFunctionPrototypeType();
    com.google.javascript.rhino.jstype.ObjectType var62 = var17.createObjectType("null(null)", var47, var55);
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var68 = var65.useSourceInfoIfMissingFrom(var67);
    com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.eq(var67, var70);
    com.google.javascript.rhino.Node var72 = var67.cloneNode();
    boolean var73 = var72.isOr();
    com.google.javascript.rhino.Node var75 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var78 = var75.useSourceInfoIfMissingFrom(var77);
    com.google.javascript.rhino.Node var80 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var81 = com.google.javascript.rhino.IR.eq(var77, var80);
    com.google.javascript.rhino.Node var82 = var77.cloneNode();
    com.google.javascript.rhino.Node var83 = com.google.javascript.rhino.IR.or(var72, var82);
    com.google.javascript.rhino.Node var84 = com.google.javascript.rhino.IR.voidNode(var83);
    com.google.javascript.rhino.ErrorReporter var85 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var86 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var85);
    com.google.javascript.rhino.ErrorReporter var87 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var89 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var87, true);
    com.google.javascript.rhino.jstype.ObjectType var90 = var89.createAnonymousObjectType();
    java.util.Collection var91 = var86.getDirectImplementors(var90);
    com.google.javascript.rhino.jstype.ObjectType var92 = var17.createObjectType("", var83, var90);
    var11.matchConstraint(var92);
    boolean var94 = var92.isResolved();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test409() {}
//   public void test409() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test409"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = null;
//     com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var3 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var1, var2);
//     java.lang.String var4 = var1.getDelegateSuperclassName();
// 
//   }

  public void test410() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test410"); }


    com.google.javascript.jscomp.CodingConvention var0 = null;
    com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = null;
    com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var3 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var1, var2);
    com.google.javascript.jscomp.ClosureCodingConvention var4 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var1);
    java.util.Collection var5 = var1.getAssertionFunctions();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var10 = var7.useSourceInfoIfMissingFrom(var9);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.eq(var9, var12);
    var13.setSourceEncodedPosition(100);
    boolean var16 = var1.isPrototypeAlias(var13);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var21 = var18.useSourceInfoIfMissingFrom(var20);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.eq(var20, var23);
    com.google.javascript.rhino.Node var25 = var20.cloneNode();
    boolean var26 = var25.isOr();
    com.google.javascript.rhino.Node[] var27 = new com.google.javascript.rhino.Node[] { var25};
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.arraylit(var27);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.newNode(var13, var27);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test411() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test411"); }


    java.nio.charset.Charset var1 = null;
    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromFile("NUMBER 10.0", var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var4 = var2.getLineOffset(100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test412() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test412"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var2 = com.google.javascript.rhino.ScriptRuntime.escapeString("", 'a');
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }

  }

  public void test413() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test413"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3, true);
    com.google.javascript.rhino.jstype.ObjectType var6 = var5.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var7 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7, true);
    com.google.javascript.rhino.jstype.ObjectType var10 = var9.createAnonymousObjectType();
    boolean var11 = var10.isUnknownType();
    boolean var12 = var6.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var10);
    boolean var13 = var10.isFunctionPrototypeType();
    var10.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var15 = var10.dereference();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var15};
    com.google.javascript.rhino.jstype.JSType var17 = var2.createUnionType(var16);
    com.google.javascript.rhino.ErrorReporter var18 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18, true);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    boolean var23 = var20.canPropertyBeDefined(var21, "hi!");
    boolean var25 = var20.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var26 = new com.google.javascript.rhino.jstype.FunctionBuilder(var20);
    com.google.javascript.rhino.jstype.FunctionBuilder var28 = var26.withName("NUMBER 10.0\n");
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29, true);
    com.google.javascript.rhino.jstype.ObjectType var32 = var31.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33, true);
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.createAnonymousObjectType();
    boolean var37 = var36.isUnknownType();
    boolean var38 = var32.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var36);
    boolean var39 = var36.isFunctionPrototypeType();
    com.google.javascript.rhino.jstype.FunctionBuilder var41 = var28.withReturnType((com.google.javascript.rhino.jstype.JSType)var36, true);
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var46 = var43.useSourceInfoIfMissingFrom(var45);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.eq(var45, var48);
    com.google.javascript.rhino.Node var50 = var45.cloneNode();
    boolean var51 = var50.isOr();
    com.google.javascript.rhino.jstype.StaticSourceFile var52 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var50);
    boolean var53 = var50.isDec();
    boolean var54 = var50.isFor();
    boolean var55 = var50.isNoSideEffectsCall();
    com.google.javascript.rhino.jstype.FunctionType var56 = var2.createFunctionType((com.google.javascript.rhino.jstype.JSType)var36, var50);
    boolean var57 = var56.isReturnTypeInferred();
    boolean var58 = var56.hasInstanceType();
    com.google.javascript.rhino.jstype.FunctionType var59 = var56.toMaybeFunctionType();
    com.google.javascript.rhino.jstype.JSType var61 = var56.getPropertyType("NUMBER 10.0");
    boolean var62 = var61.isFunctionType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test414() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test414"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    boolean var2 = var1.isLabel();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.Node.newString("{1459695149}", 0, 10);
    boolean var7 = var6.isAssign();
    com.google.javascript.rhino.Node var8 = var1.useSourceInfoIfMissingFrom(var6);
    com.google.javascript.rhino.Node var9 = var6.getLastSibling();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.returnNode(var9);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var15 = var12.useSourceInfoIfMissingFrom(var14);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.eq(var14, var17);
    com.google.javascript.rhino.Node var19 = var14.cloneNode();
    boolean var20 = var19.isOr();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var25 = var22.useSourceInfoIfMissingFrom(var24);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.eq(var24, var27);
    com.google.javascript.rhino.Node var29 = var24.cloneNode();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.or(var19, var29);
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var35 = var32.useSourceInfoIfMissingFrom(var34);
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.eq(var34, var37);
    var38.setSourceEncodedPosition(100);
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var45 = var42.useSourceInfoIfMissingFrom(var44);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.eq(var44, var47);
    com.google.javascript.rhino.Node var49 = var44.cloneNode();
    boolean var50 = var49.isOr();
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var55 = var52.useSourceInfoIfMissingFrom(var54);
    com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.eq(var54, var57);
    com.google.javascript.rhino.Node var59 = var54.cloneNode();
    com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.or(var49, var59);
    com.google.javascript.rhino.Node var61 = var38.useSourceInfoFromForTree(var49);
    com.google.javascript.rhino.Node.AncestorIterable var62 = var61.getAncestors();
    java.lang.String var63 = var19.checkTreeEquals(var61);
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var68 = var65.useSourceInfoIfMissingFrom(var67);
    com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.eq(var67, var70);
    com.google.javascript.rhino.Node var72 = var67.cloneNode();
    boolean var73 = var72.isOr();
    com.google.javascript.rhino.Node var75 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var78 = var75.useSourceInfoIfMissingFrom(var77);
    com.google.javascript.rhino.Node var80 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var81 = com.google.javascript.rhino.IR.eq(var77, var80);
    com.google.javascript.rhino.Node var82 = var77.cloneNode();
    com.google.javascript.rhino.Node var83 = com.google.javascript.rhino.IR.or(var72, var82);
    com.google.javascript.rhino.Node[] var84 = new com.google.javascript.rhino.Node[] { var83};
    com.google.javascript.rhino.Node var85 = com.google.javascript.rhino.IR.call(var61, var84);
    com.google.javascript.rhino.Node var87 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var89 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var90 = var87.useSourceInfoIfMissingFrom(var89);
    boolean var91 = var89.isFromExterns();
    java.lang.Iterable var92 = var89.children();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var10.addChildAfter(var85, var89);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 10.0\n\n\nTree2:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree1: NUMBER 10.0\n\n\nSubtree2: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n"+ "'", var63.equals("Node tree inequality:\nTree1:\nNUMBER 10.0\n\n\nTree2:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree1: NUMBER 10.0\n\n\nSubtree2: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test415() {}
//   public void test415() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test415"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     com.google.javascript.jscomp.Compiler.IntermediateState var3 = var1.getState();
//     java.util.List var4 = null;
//     com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var4, var5);
// 
//   }

  public void test416() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test416"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    boolean var5 = var2.canPropertyBeDefined(var3, "hi!");
    boolean var7 = var2.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var8 = new com.google.javascript.rhino.jstype.FunctionBuilder(var2);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = var11.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.eq(var13, var16);
    com.google.javascript.rhino.Node var18 = var13.cloneNode();
    boolean var19 = var18.isOr();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = var21.useSourceInfoIfMissingFrom(var23);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.eq(var23, var26);
    com.google.javascript.rhino.Node var28 = var23.cloneNode();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.or(var18, var28);
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.voidNode(var29);
    com.google.javascript.rhino.Node var31 = var30.getFirstChild();
    com.google.javascript.rhino.Node var32 = var31.getLastSibling();
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33, true);
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37, true);
    com.google.javascript.rhino.jstype.ObjectType var40 = var39.createAnonymousObjectType();
    boolean var41 = var40.isUnknownType();
    boolean var42 = var36.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var40);
    boolean var43 = var40.isFunctionPrototypeType();
    var40.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var45 = var40.dereference();
    boolean var46 = var40.isFunctionPrototypeType();
    com.google.javascript.rhino.jstype.ObjectType var47 = var2.createObjectType("null(null)", var32, var40);
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var53 = var50.useSourceInfoIfMissingFrom(var52);
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var56 = com.google.javascript.rhino.IR.eq(var52, var55);
    com.google.javascript.rhino.Node var57 = var52.cloneNode();
    boolean var58 = var57.isOr();
    com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var63 = var60.useSourceInfoIfMissingFrom(var62);
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.eq(var62, var65);
    com.google.javascript.rhino.Node var67 = var62.cloneNode();
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.or(var57, var67);
    com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.IR.voidNode(var68);
    com.google.javascript.rhino.ErrorReporter var70 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var70);
    com.google.javascript.rhino.ErrorReporter var72 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var74 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var72, true);
    com.google.javascript.rhino.jstype.ObjectType var75 = var74.createAnonymousObjectType();
    java.util.Collection var76 = var71.getDirectImplementors(var75);
    com.google.javascript.rhino.jstype.ObjectType var77 = var2.createObjectType("", var68, var75);
    com.google.javascript.rhino.Node var79 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var81 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var82 = var79.useSourceInfoIfMissingFrom(var81);
    com.google.javascript.rhino.Node var83 = com.google.javascript.rhino.IR.exprResult(var82);
    com.google.javascript.rhino.Node var84 = com.google.javascript.rhino.IR.block(var83);
    com.google.javascript.rhino.Node var85 = var83.getLastSibling();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var86 = com.google.javascript.rhino.IR.getprop(var68, var83);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test417() {}
//   public void test417() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test417"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = null;
//     com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var3 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var1, var2);
//     com.google.javascript.jscomp.ClosureCodingConvention var4 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var1);
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var9 = var6.useSourceInfoIfMissingFrom(var8);
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.eq(var8, var11);
//     com.google.javascript.rhino.Node var13 = var8.cloneNode();
//     boolean var14 = var13.isOr();
//     com.google.javascript.rhino.jstype.StaticSourceFile var15 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var13);
//     boolean var16 = var13.isDec();
//     boolean var17 = var13.isFor();
//     boolean var18 = var1.isVarArgsParameter(var13);
//     java.lang.String var19 = var1.getExportSymbolFunction();
//     com.google.javascript.rhino.Node var20 = null;
//     boolean var21 = var1.isPrototypeAlias(var20);
//     com.google.javascript.rhino.JSDocInfoBuilder var23 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
//     boolean var24 = var23.recordImplicitCast();
//     com.google.javascript.rhino.JSTypeExpression var26 = null;
//     boolean var27 = var23.recordParameter("hi!", var26);
//     boolean var28 = var23.isPopulated();
//     boolean var29 = var23.recordNoAlias();
//     boolean var30 = var23.recordNoAlias();
//     com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.paramList();
//     var23.markTypeNode(var31, 0, 100, 1, 1, true);
//     boolean var38 = var1.isOptionalParameter(var31);
//     com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var43 = var40.useSourceInfoIfMissingFrom(var42);
//     com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var46 = var43.copyInformationFrom(var45);
//     boolean var47 = var46.isOptionalArg();
//     boolean var48 = var46.isObjectLit();
//     java.lang.String var49 = var1.getSingletonGetterClassName(var46);
// 
//   }

  public void test418() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test418"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var5 = var2.useSourceInfoIfMissingFrom(var4);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.eq(var4, var7);
    com.google.javascript.rhino.Node var9 = var4.cloneNode();
    boolean var10 = var9.isOr();
    com.google.javascript.rhino.jstype.StaticSourceFile var11 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var9);
    boolean var12 = var9.isDec();
    var9.setVarArgs(true);
    com.google.javascript.rhino.Node var17 = new com.google.javascript.rhino.Node(0, var9, (-1), (-1));
    boolean var18 = var9.hasMoreThanOneChild();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test419() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test419"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.exprResult(var4);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.block(var5);
    var6.setIsSyntheticBlock(false);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.number(10.0d);
    boolean var11 = var10.isLabel();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.Node.newString("{1459695149}", 0, 10);
    boolean var16 = var15.isAssign();
    com.google.javascript.rhino.Node var17 = var10.useSourceInfoIfMissingFrom(var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.comma(var6, var17);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test420() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test420"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var5 = var2.useSourceInfoIfMissingFrom(var4);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.eq(var4, var7);
    com.google.javascript.rhino.Node var9 = var4.cloneNode();
    boolean var10 = var9.isOr();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var15 = var12.useSourceInfoIfMissingFrom(var14);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.eq(var14, var17);
    com.google.javascript.rhino.Node var19 = var14.cloneNode();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.or(var9, var19);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var25 = var22.useSourceInfoIfMissingFrom(var24);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.eq(var24, var27);
    var28.setSourceEncodedPosition(100);
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var35 = var32.useSourceInfoIfMissingFrom(var34);
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.eq(var34, var37);
    com.google.javascript.rhino.Node var39 = var34.cloneNode();
    boolean var40 = var39.isOr();
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var45 = var42.useSourceInfoIfMissingFrom(var44);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.eq(var44, var47);
    com.google.javascript.rhino.Node var49 = var44.cloneNode();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.or(var39, var49);
    com.google.javascript.rhino.Node var51 = var28.useSourceInfoFromForTree(var39);
    com.google.javascript.rhino.Node.AncestorIterable var52 = var51.getAncestors();
    java.lang.String var53 = var9.checkTreeEquals(var51);
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var58 = var55.useSourceInfoIfMissingFrom(var57);
    com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.eq(var57, var60);
    com.google.javascript.rhino.Node var62 = var57.cloneNode();
    boolean var63 = var62.isOr();
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var68 = var65.useSourceInfoIfMissingFrom(var67);
    com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.eq(var67, var70);
    com.google.javascript.rhino.Node var72 = var67.cloneNode();
    com.google.javascript.rhino.Node var73 = com.google.javascript.rhino.IR.or(var62, var72);
    com.google.javascript.rhino.Node[] var74 = new com.google.javascript.rhino.Node[] { var73};
    com.google.javascript.rhino.Node var75 = com.google.javascript.rhino.IR.call(var51, var74);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var76 = new com.google.javascript.rhino.Node(10, var74);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 10.0\n\n\nTree2:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree1: NUMBER 10.0\n\n\nSubtree2: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n"+ "'", var53.equals("Node tree inequality:\nTree1:\nNUMBER 10.0\n\n\nTree2:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree1: NUMBER 10.0\n\n\nSubtree2: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test421() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test421"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    boolean var5 = var2.canPropertyBeDefined(var3, "hi!");
    boolean var7 = var2.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var8 = new com.google.javascript.rhino.jstype.FunctionBuilder(var2);
    com.google.javascript.rhino.jstype.FunctionBuilder var10 = var8.withName("NUMBER 10.0\n");
    com.google.javascript.rhino.Node var11 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var12 = var10.withSourceNode(var11);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var17 = var14.useSourceInfoIfMissingFrom(var16);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.exprResult(var17);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var23 = var20.useSourceInfoIfMissingFrom(var22);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.eq(var22, var25);
    com.google.javascript.rhino.Node var27 = var22.cloneNode();
    boolean var28 = var27.isOr();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var33 = var30.useSourceInfoIfMissingFrom(var32);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.eq(var32, var35);
    com.google.javascript.rhino.Node var37 = var32.cloneNode();
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.or(var27, var37);
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var43 = var40.useSourceInfoIfMissingFrom(var42);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.eq(var42, var45);
    var46.setSourceEncodedPosition(100);
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var53 = var50.useSourceInfoIfMissingFrom(var52);
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var56 = com.google.javascript.rhino.IR.eq(var52, var55);
    com.google.javascript.rhino.Node var57 = var52.cloneNode();
    boolean var58 = var57.isOr();
    com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var63 = var60.useSourceInfoIfMissingFrom(var62);
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.eq(var62, var65);
    com.google.javascript.rhino.Node var67 = var62.cloneNode();
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.or(var57, var67);
    com.google.javascript.rhino.Node var69 = var46.useSourceInfoFromForTree(var57);
    com.google.javascript.rhino.Node.AncestorIterable var70 = var69.getAncestors();
    java.lang.String var71 = var27.checkTreeEquals(var69);
    com.google.javascript.rhino.Node var73 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var75 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var76 = var73.useSourceInfoIfMissingFrom(var75);
    com.google.javascript.rhino.Node var78 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var79 = com.google.javascript.rhino.IR.eq(var75, var78);
    com.google.javascript.rhino.Node var80 = var75.cloneNode();
    boolean var81 = var80.isOr();
    com.google.javascript.rhino.Node var83 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var85 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var86 = var83.useSourceInfoIfMissingFrom(var85);
    com.google.javascript.rhino.Node var88 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var89 = com.google.javascript.rhino.IR.eq(var85, var88);
    com.google.javascript.rhino.Node var90 = var85.cloneNode();
    com.google.javascript.rhino.Node var91 = com.google.javascript.rhino.IR.or(var80, var90);
    com.google.javascript.rhino.Node[] var92 = new com.google.javascript.rhino.Node[] { var91};
    com.google.javascript.rhino.Node var93 = com.google.javascript.rhino.IR.call(var69, var92);
    java.lang.String var94 = var18.checkTreeEquals(var93);
    com.google.javascript.rhino.Node var96 = com.google.javascript.rhino.IR.number(10.0d);
    boolean var97 = var96.isExprResult();
    com.google.javascript.rhino.Node var98 = var18.copyInformationFromForTree(var96);
    com.google.javascript.rhino.jstype.FunctionBuilder var99 = var12.withSourceNode(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 10.0\n\n\nTree2:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree1: NUMBER 10.0\n\n\nSubtree2: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n"+ "'", var71.equals("Node tree inequality:\nTree1:\nNUMBER 10.0\n\n\nTree2:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree1: NUMBER 10.0\n\n\nSubtree2: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "Node tree inequality:\nTree1:\nEXPR_RESULT\n    NUMBER 10.0\n\n\nTree2:\nCALL\n    EQ\n        NUMBER 10.0\n        NUMBER 10.0\n    OR\n        NUMBER 10.0\n        NUMBER 10.0\n\n\nSubtree1: EXPR_RESULT\n    NUMBER 10.0\n\n\nSubtree2: CALL\n    EQ\n        NUMBER 10.0\n        NUMBER 10.0\n    OR\n        NUMBER 10.0\n        NUMBER 10.0\n"+ "'", var94.equals("Node tree inequality:\nTree1:\nEXPR_RESULT\n    NUMBER 10.0\n\n\nTree2:\nCALL\n    EQ\n        NUMBER 10.0\n        NUMBER 10.0\n    OR\n        NUMBER 10.0\n        NUMBER 10.0\n\n\nSubtree1: EXPR_RESULT\n    NUMBER 10.0\n\n\nSubtree2: CALL\n    EQ\n        NUMBER 10.0\n        NUMBER 10.0\n    OR\n        NUMBER 10.0\n        NUMBER 10.0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test422() {}
//   public void test422() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test422"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
//     var7.setSourceEncodedPosition(100);
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var14 = var11.useSourceInfoIfMissingFrom(var13);
//     com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.eq(var13, var16);
//     com.google.javascript.rhino.Node var18 = var13.cloneNode();
//     boolean var19 = var18.isOr();
//     com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var24 = var21.useSourceInfoIfMissingFrom(var23);
//     com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.eq(var23, var26);
//     com.google.javascript.rhino.Node var28 = var23.cloneNode();
//     com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.or(var18, var28);
//     com.google.javascript.rhino.Node var30 = var7.useSourceInfoFromForTree(var18);
//     com.google.javascript.rhino.Node var31 = var7.removeFirstChild();
//     boolean var32 = var7.isTry();
//     com.google.javascript.rhino.Node.SideEffectFlags var33 = null;
//     var7.setSideEffectFlags(var33);
// 
//   }

  public void test423() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test423"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var2 = var0.getDirectedPredNodes(var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test424() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test424"); }


    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromCode("{505847021}", "{1459695149}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test425() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test425"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    boolean var5 = var2.canPropertyBeDefined(var3, "hi!");
    boolean var7 = var2.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var8 = new com.google.javascript.rhino.jstype.FunctionBuilder(var2);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = var11.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.eq(var13, var16);
    com.google.javascript.rhino.Node var18 = var13.cloneNode();
    boolean var19 = var18.isOr();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = var21.useSourceInfoIfMissingFrom(var23);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.eq(var23, var26);
    com.google.javascript.rhino.Node var28 = var23.cloneNode();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.or(var18, var28);
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.voidNode(var29);
    com.google.javascript.rhino.Node var31 = var30.getFirstChild();
    com.google.javascript.rhino.Node var32 = var31.getLastSibling();
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33, true);
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37, true);
    com.google.javascript.rhino.jstype.ObjectType var40 = var39.createAnonymousObjectType();
    boolean var41 = var40.isUnknownType();
    boolean var42 = var36.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var40);
    boolean var43 = var40.isFunctionPrototypeType();
    var40.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var45 = var40.dereference();
    boolean var46 = var40.isFunctionPrototypeType();
    com.google.javascript.rhino.jstype.ObjectType var47 = var2.createObjectType("null(null)", var32, var40);
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var53 = var50.useSourceInfoIfMissingFrom(var52);
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var56 = com.google.javascript.rhino.IR.eq(var52, var55);
    com.google.javascript.rhino.Node var57 = var52.cloneNode();
    boolean var58 = var57.isOr();
    com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var63 = var60.useSourceInfoIfMissingFrom(var62);
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.eq(var62, var65);
    com.google.javascript.rhino.Node var67 = var62.cloneNode();
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.or(var57, var67);
    com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.IR.voidNode(var68);
    com.google.javascript.rhino.ErrorReporter var70 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var70);
    com.google.javascript.rhino.ErrorReporter var72 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var74 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var72, true);
    com.google.javascript.rhino.jstype.ObjectType var75 = var74.createAnonymousObjectType();
    java.util.Collection var76 = var71.getDirectImplementors(var75);
    com.google.javascript.rhino.jstype.ObjectType var77 = var2.createObjectType("", var68, var75);
    com.google.javascript.rhino.jstype.JSType var78 = var77.autoboxesTo();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);

  }

  public void test426() {}
//   public void test426() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test426"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.JSModule var4 = var3.getModule();
//     com.google.javascript.jscomp.SourceAst var5 = var3.getAst();
//     com.google.javascript.jscomp.Region var7 = var3.getRegion(39);
// 
//   }

  public void test427() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test427"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setCrossModuleCodeMotion(false);
    com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var3 = null;
    var0.setAnonymousFunctionNaming(var3);
    var0.setExtractPrototypeMemberDeclarations(true);
    var0.setRemoveClosureAsserts(false);
    var0.setAliasExternals(false);
    var0.setCheckMissingGetCssNameBlacklist("NUMBER 10.0\n");

  }

  public void test428() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test428"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    var2.setCrossModuleCodeMotion(false);
    var2.setLabelRenaming(true);
    java.util.Set var7 = null;
    var2.setStripTypePrefixes(var7);
    var1.initOptions(var2);
    java.nio.charset.Charset var11 = null;
    com.google.javascript.jscomp.SourceFile var12 = com.google.javascript.jscomp.SourceFile.fromFile("NUMBER 10.0", var11);
    com.google.javascript.jscomp.Region var14 = var12.getRegion(100);
    java.lang.String var15 = var12.toString();
    com.google.javascript.rhino.Node var16 = var1.parse(var12);
    com.google.javascript.jscomp.CodingConvention var17 = var1.getCodingConvention();
    var1.disableThreads();
    com.google.javascript.jscomp.Compiler.CodeBuilder var19 = null;
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var25 = var22.useSourceInfoIfMissingFrom(var24);
    boolean var26 = var24.isSetterDef();
    boolean var27 = var24.isNoSideEffectsCall();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var32 = var29.useSourceInfoIfMissingFrom(var31);
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.eq(var31, var34);
    com.google.javascript.rhino.Node var36 = var31.cloneNode();
    boolean var37 = var36.isOr();
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var42 = var39.useSourceInfoIfMissingFrom(var41);
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.eq(var41, var44);
    com.google.javascript.rhino.Node var46 = var41.cloneNode();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.or(var36, var46);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.voidNode(var47);
    com.google.javascript.rhino.Node var49 = var24.srcref(var47);
    com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var54 = var51.useSourceInfoIfMissingFrom(var53);
    com.google.javascript.rhino.Node var56 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.IR.eq(var53, var56);
    com.google.javascript.rhino.Node var58 = var53.cloneNode();
    boolean var59 = var58.isOr();
    var47.addChildrenToFront(var58);
    com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var64 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var65 = var62.useSourceInfoIfMissingFrom(var64);
    com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.eq(var64, var67);
    com.google.javascript.rhino.Node var69 = var64.cloneNode();
    boolean var70 = var64.isDelProp();
    boolean var71 = var64.isIf();
    java.lang.String var72 = var64.toString();
    boolean var73 = var64.isArrayLit();
    com.google.javascript.rhino.Node var74 = var47.useSourceInfoFrom(var64);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.toSource(var19, 1, var64);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "NUMBER 10.0"+ "'", var15.equals("NUMBER 10.0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "NUMBER 10.0"+ "'", var72.equals("NUMBER 10.0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test429() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test429"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3, true);
    com.google.javascript.rhino.jstype.ObjectType var6 = var5.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var7 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7, true);
    com.google.javascript.rhino.jstype.ObjectType var10 = var9.createAnonymousObjectType();
    boolean var11 = var10.isUnknownType();
    boolean var12 = var6.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var10);
    boolean var13 = var10.isFunctionPrototypeType();
    var10.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var15 = var10.dereference();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var15};
    com.google.javascript.rhino.jstype.JSType var17 = var2.createUnionType(var16);
    com.google.javascript.rhino.ErrorReporter var18 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18, true);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    boolean var23 = var20.canPropertyBeDefined(var21, "hi!");
    boolean var25 = var20.hasNamespace("");
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26, true);
    com.google.javascript.rhino.jstype.ObjectType var29 = var28.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var30 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30, true);
    com.google.javascript.rhino.jstype.ObjectType var33 = var32.createAnonymousObjectType();
    boolean var34 = var33.isUnknownType();
    boolean var35 = var29.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var33);
    boolean var36 = var33.isFunctionPrototypeType();
    var20.resolveTypesInScope((com.google.javascript.rhino.jstype.StaticScope)var33);
    com.google.javascript.rhino.ErrorReporter var38 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38, true);
    com.google.javascript.rhino.jstype.ObjectType var41 = var40.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var42 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var42, true);
    com.google.javascript.rhino.jstype.ObjectType var45 = var44.createAnonymousObjectType();
    boolean var46 = var45.isUnknownType();
    boolean var47 = var41.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var45);
    boolean var48 = var45.isFunctionPrototypeType();
    var45.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var50 = var45.dereference();
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51, true);
    com.google.javascript.rhino.ErrorReporter var54 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var54, true);
    com.google.javascript.rhino.jstype.ObjectType var57 = var56.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58, true);
    com.google.javascript.rhino.jstype.ObjectType var61 = var60.createAnonymousObjectType();
    boolean var62 = var61.isUnknownType();
    boolean var63 = var57.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var61);
    boolean var64 = var61.isFunctionPrototypeType();
    var61.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var66 = var61.dereference();
    com.google.javascript.rhino.jstype.JSType[] var67 = new com.google.javascript.rhino.jstype.JSType[] { var66};
    com.google.javascript.rhino.jstype.JSType var68 = var53.createUnionType(var67);
    com.google.javascript.rhino.jstype.FunctionType var69 = var20.createConstructorType((com.google.javascript.rhino.jstype.JSType)var45, var67);
    com.google.javascript.rhino.Node var70 = var2.createParametersWithVarArgs(var67);
    boolean var71 = var70.isGetProp();
    var70.setOptionalArg(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var74 = com.google.javascript.rhino.IR.breakNode(var70);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test430() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test430"); }


    int var1 = com.google.javascript.jscomp.NodeUtil.getInverseOperator(39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));

  }

  public void test431() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test431"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3, true);
    com.google.javascript.rhino.jstype.ObjectType var6 = var5.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var7 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7, true);
    com.google.javascript.rhino.jstype.ObjectType var10 = var9.createAnonymousObjectType();
    boolean var11 = var10.isUnknownType();
    boolean var12 = var6.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var10);
    boolean var13 = var10.isFunctionPrototypeType();
    var10.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var15 = var10.dereference();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var15};
    com.google.javascript.rhino.jstype.JSType var17 = var2.createUnionType(var16);
    com.google.javascript.rhino.ErrorReporter var18 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18, true);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    boolean var23 = var20.canPropertyBeDefined(var21, "hi!");
    boolean var25 = var20.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var26 = new com.google.javascript.rhino.jstype.FunctionBuilder(var20);
    com.google.javascript.rhino.jstype.FunctionBuilder var28 = var26.withName("NUMBER 10.0\n");
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29, true);
    com.google.javascript.rhino.jstype.ObjectType var32 = var31.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33, true);
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.createAnonymousObjectType();
    boolean var37 = var36.isUnknownType();
    boolean var38 = var32.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var36);
    boolean var39 = var36.isFunctionPrototypeType();
    com.google.javascript.rhino.jstype.FunctionBuilder var41 = var28.withReturnType((com.google.javascript.rhino.jstype.JSType)var36, true);
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var46 = var43.useSourceInfoIfMissingFrom(var45);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.eq(var45, var48);
    com.google.javascript.rhino.Node var50 = var45.cloneNode();
    boolean var51 = var50.isOr();
    com.google.javascript.rhino.jstype.StaticSourceFile var52 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var50);
    boolean var53 = var50.isDec();
    boolean var54 = var50.isFor();
    boolean var55 = var50.isNoSideEffectsCall();
    com.google.javascript.rhino.jstype.FunctionType var56 = var2.createFunctionType((com.google.javascript.rhino.jstype.JSType)var36, var50);
    boolean var57 = var56.isReturnTypeInferred();
    boolean var58 = var56.hasInstanceType();
    boolean var60 = var56.isPropertyInExterns("Node tree inequality:\nTree1:\nNUMBER 10.0\n\n\nTree2:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree1: NUMBER 10.0\n\n\nSubtree2: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test432() {}
//   public void test432() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test432"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     com.google.javascript.jscomp.JSModule var4 = var3.getModule();
//     boolean var5 = var3.isExtern();
//     com.google.javascript.rhino.InputId var6 = null;
//     com.google.javascript.jscomp.CompilerInput var8 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var3, var6, true);
// 
//   }

  public void test433() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test433"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    com.google.javascript.rhino.Node var8 = var3.cloneNode();
    boolean var9 = var8.isOr();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = var11.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.eq(var13, var16);
    com.google.javascript.rhino.Node var18 = var13.cloneNode();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.or(var8, var18);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = var21.useSourceInfoIfMissingFrom(var23);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var27 = var24.copyInformationFrom(var26);
    com.google.javascript.rhino.Node var28 = var8.srcrefTree(var26);
    java.lang.Object var30 = null;
    var26.putProp(39, var30);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.JSDocInfo var32 = com.google.javascript.jscomp.NodeUtil.getFunctionJSDocInfo(var26);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test434() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test434"); }


    java.nio.charset.Charset var1 = null;
    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromFile("function (): {552562541}", var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test435() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test435"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    var7.setSourceEncodedPosition(100);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = var11.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.eq(var13, var16);
    com.google.javascript.rhino.Node var18 = var13.cloneNode();
    boolean var19 = var18.isOr();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = var21.useSourceInfoIfMissingFrom(var23);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.eq(var23, var26);
    com.google.javascript.rhino.Node var28 = var23.cloneNode();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.or(var18, var28);
    com.google.javascript.rhino.Node var30 = var7.useSourceInfoFromForTree(var18);
    boolean var31 = var30.isScript();
    boolean var32 = var30.isNoSideEffectsCall();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.var(var30);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test436() {}
//   public void test436() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test436"); }
// 
// 
//     java.util.List var2 = null;
//     java.util.List var3 = null;
//     com.google.javascript.jscomp.deps.SimpleDependencyInfo var4 = new com.google.javascript.jscomp.deps.SimpleDependencyInfo("", "hi!", var2, var3);
//     java.util.Collection var5 = var4.getRequires();
// 
//   }

  public void test437() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test437"); }


    boolean var1 = com.google.javascript.jscomp.NodeUtil.isValidSimpleName("module$Node tree inequality:\nTree1:\nNUMBER 10.0\n\n\nTree2:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree1: NUMBER 10.0\n\n\nSubtree2: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test438() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test438"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    var7.setSourceEncodedPosition(100);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = var11.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.eq(var13, var16);
    com.google.javascript.rhino.Node var18 = var13.cloneNode();
    boolean var19 = var18.isOr();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = var21.useSourceInfoIfMissingFrom(var23);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.eq(var23, var26);
    com.google.javascript.rhino.Node var28 = var23.cloneNode();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.or(var18, var28);
    com.google.javascript.rhino.Node var30 = var7.useSourceInfoFromForTree(var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.regexp(var30);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test439() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test439"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3, true);
    com.google.javascript.rhino.jstype.ObjectType var6 = var5.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var7 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7, true);
    com.google.javascript.rhino.jstype.ObjectType var10 = var9.createAnonymousObjectType();
    boolean var11 = var10.isUnknownType();
    boolean var12 = var6.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var10);
    boolean var13 = var10.isFunctionPrototypeType();
    var10.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var15 = var10.dereference();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var15};
    com.google.javascript.rhino.jstype.JSType var17 = var2.createUnionType(var16);
    boolean var19 = var2.isForwardDeclaredType("{1459695149}");
    java.lang.Iterable var21 = var2.getTypesWithProperty("TRUE\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test440() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test440"); }


    com.google.javascript.jscomp.CodingConvention var0 = null;
    com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = null;
    com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var3 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var1, var2);
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var8 = var5.useSourceInfoIfMissingFrom(var7);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.eq(var7, var10);
    var11.setSourceEncodedPosition(100);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var18 = var15.useSourceInfoIfMissingFrom(var17);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.eq(var17, var20);
    com.google.javascript.rhino.Node var22 = var17.cloneNode();
    boolean var23 = var22.isOr();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var28 = var25.useSourceInfoIfMissingFrom(var27);
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.eq(var27, var30);
    com.google.javascript.rhino.Node var32 = var27.cloneNode();
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.or(var22, var32);
    com.google.javascript.rhino.Node var34 = var11.useSourceInfoFromForTree(var22);
    com.google.javascript.rhino.Node var35 = var11.removeFirstChild();
    com.google.javascript.jscomp.CodingConvention var36 = null;
    com.google.javascript.jscomp.ClosureCodingConvention var37 = new com.google.javascript.jscomp.ClosureCodingConvention(var36);
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = null;
    com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var39 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var37, var38);
    com.google.javascript.jscomp.ClosureCodingConvention var40 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var37);
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var45 = var42.useSourceInfoIfMissingFrom(var44);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.eq(var44, var47);
    com.google.javascript.rhino.Node var49 = var44.cloneNode();
    boolean var50 = var49.isOr();
    com.google.javascript.rhino.jstype.StaticSourceFile var51 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var49);
    boolean var52 = var49.isDec();
    boolean var53 = var49.isFor();
    boolean var54 = var37.isVarArgsParameter(var49);
    boolean var55 = var49.isEmpty();
    boolean var56 = var35.hasChild(var49);
    com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var61 = var58.useSourceInfoIfMissingFrom(var60);
    com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var64 = com.google.javascript.rhino.IR.eq(var60, var63);
    com.google.javascript.rhino.Node var65 = var60.cloneNode();
    boolean var66 = var65.isOr();
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var71 = var68.useSourceInfoIfMissingFrom(var70);
    com.google.javascript.rhino.Node var73 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var74 = com.google.javascript.rhino.IR.eq(var70, var73);
    com.google.javascript.rhino.Node var75 = var70.cloneNode();
    com.google.javascript.rhino.Node var76 = com.google.javascript.rhino.IR.or(var65, var75);
    int var77 = var65.getCharno();
    java.lang.String var78 = var1.extractClassNameIfRequire(var35, var65);
    java.lang.String var79 = var1.getGlobalObject();
    java.lang.String var80 = var1.getGlobalObject();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "goog.global"+ "'", var79.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "goog.global"+ "'", var80.equals("goog.global"));

  }

  public void test441() {}
//   public void test441() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test441"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     com.google.javascript.jscomp.Compiler.IntermediateState var3 = var1.getState();
//     double var4 = var1.getProgress();
//     com.google.javascript.jscomp.SourceFile var8 = com.google.javascript.jscomp.SourceFile.fromCode("function (): {552562541}", "ECMASCRIPT3", "NUMBER 10.0");
//     com.google.javascript.jscomp.JsAst var9 = new com.google.javascript.jscomp.JsAst(var8);
//     var1.replaceScript(var9);
// 
//   }

  public void test442() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test442"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var1 = var0.getGraphvizNodes();
    java.util.Collection var2 = var0.getNodes();
    com.google.javascript.jscomp.CompilerOptions var3 = new com.google.javascript.jscomp.CompilerOptions();
    var3.setCrossModuleCodeMotion(false);
    com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var6 = null;
    var3.setAnonymousFunctionNaming(var6);
    var3.setExtractPrototypeMemberDeclarations(true);
    var3.setRemoveTryCatchFinally(true);
    var3.setSyntheticBlockStartMarker("hi!");
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var14 = var3.getLanguageIn();
    var3.enableRuntimeTypeCheck("hi!");
    byte[] var17 = null;
    var3.setInputVariableMapSerialized(var17);
    var3.setRuntimeTypeCheck(true);
    com.google.javascript.jscomp.CodingConvention var21 = var3.getCodingConvention();
    var3.setTweakToDoubleLiteral("NUMBER 10.0\n", 1.0d);
    com.google.javascript.jscomp.CompilerOptions var25 = new com.google.javascript.jscomp.CompilerOptions();
    var25.setSourceMapOutputPath("hi!");
    var25.setIdeMode(false);
    java.util.Set var30 = null;
    var25.setReplaceStringsReservedStrings(var30);
    var25.resetWarningsGuard();
    var25.setInputDelimiter("");
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var35 = var25.getLanguageOut();
    java.util.Set var36 = null;
    var25.setReplaceStringsReservedStrings(var36);
    var25.setRemoveUnusedPrototypeProperties(false);
    com.google.javascript.rhino.JSDocInfoBuilder var41 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.number(10.0d);
    var41.markTypeNode(var43, 10, 100, 100, 0, true);
    com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.number(10.0d);
    boolean var52 = var51.isDo();
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var56 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var57 = var54.useSourceInfoIfMissingFrom(var56);
    com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.eq(var56, var59);
    int var61 = var51.getIndexOfChild(var59);
    com.google.javascript.rhino.Node var62 = var43.useSourceInfoFrom(var59);
    com.google.javascript.rhino.JSDocInfo var63 = var62.getJSDocInfo();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.connectIfNotFound((java.lang.Object)var3, (java.lang.Object)false, (java.lang.Object)var62);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);

  }

  public void test443() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test443"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var9 = var6.useSourceInfoIfMissingFrom(var8);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.exprResult(var9);
    java.lang.String var11 = var3.checkTreeEquals(var9);
    boolean var12 = var3.hasMoreThanOneChild();
    java.lang.String var13 = var3.getQualifiedName();
    boolean var14 = var3.isGetElem();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test444() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test444"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.empty();
    com.google.javascript.jscomp.DiagnosticType var7 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
    java.lang.String[] var9 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var10 = com.google.javascript.jscomp.JSError.make("", 1, 39, var7, var9);
    com.google.javascript.jscomp.CheckLevel var14 = null;
    com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
    com.google.javascript.jscomp.DiagnosticType var23 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
    java.lang.String[] var25 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var26 = com.google.javascript.jscomp.JSError.make("", 1, 39, var23, var25);
    com.google.javascript.jscomp.JSError var27 = com.google.javascript.jscomp.JSError.make("hi!", 100, 100, var14, var17, var25);
    com.google.javascript.jscomp.JSError var28 = com.google.javascript.jscomp.JSError.make("NUMBER 10.0\n", var1, var7, var25);
    com.google.javascript.jscomp.DiagnosticType var34 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
    com.google.javascript.jscomp.DiagnosticType var40 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
    java.lang.String[] var42 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var43 = com.google.javascript.jscomp.JSError.make("", 1, 39, var40, var42);
    com.google.javascript.jscomp.ShowByPathWarningsGuard var44 = new com.google.javascript.jscomp.ShowByPathWarningsGuard(var42);
    boolean var45 = var34.equals((java.lang.Object)var42);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var51 = var48.useSourceInfoIfMissingFrom(var50);
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.exprResult(var51);
    var52.setLength(10);
    com.google.javascript.jscomp.CheckLevel var55 = null;
    com.google.javascript.jscomp.CheckLevel var59 = null;
    com.google.javascript.jscomp.DiagnosticType var62 = com.google.javascript.jscomp.DiagnosticType.warning("{505847021}", "{505847021}");
    com.google.javascript.jscomp.DiagnosticType var68 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
    java.lang.String[] var70 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var71 = com.google.javascript.jscomp.JSError.make("", 1, 39, var68, var70);
    com.google.javascript.jscomp.ShowByPathWarningsGuard var72 = new com.google.javascript.jscomp.ShowByPathWarningsGuard(var70);
    com.google.javascript.jscomp.JSError var73 = com.google.javascript.jscomp.JSError.make("Node tree inequality:\nTree1:\nNUMBER 10.0\n\n\nTree2:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree1: NUMBER 10.0\n\n\nSubtree2: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n", (-1), 10, var59, var62, var70);
    java.lang.String[] var75 = new java.lang.String[] { "null(null)"};
    com.google.javascript.jscomp.JSError var76 = com.google.javascript.jscomp.JSError.make("hi!", var52, var55, var62, var75);
    com.google.javascript.jscomp.JSError var77 = com.google.javascript.jscomp.JSError.make("module$null(null)", 100, 39, var34, var75);
    int var78 = var7.compareTo(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);

  }

  public void test445() {}
//   public void test445() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test445"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     boolean var5 = var2.canPropertyBeDefined(var3, "hi!");
//     boolean var7 = var2.hasNamespace("");
//     com.google.javascript.rhino.jstype.FunctionBuilder var8 = new com.google.javascript.rhino.jstype.FunctionBuilder(var2);
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var14 = var11.useSourceInfoIfMissingFrom(var13);
//     com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.eq(var13, var16);
//     com.google.javascript.rhino.Node var18 = var13.cloneNode();
//     boolean var19 = var18.isOr();
//     com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var24 = var21.useSourceInfoIfMissingFrom(var23);
//     com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.eq(var23, var26);
//     com.google.javascript.rhino.Node var28 = var23.cloneNode();
//     com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.or(var18, var28);
//     com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.voidNode(var29);
//     com.google.javascript.rhino.Node var31 = var30.getFirstChild();
//     com.google.javascript.rhino.Node var32 = var31.getLastSibling();
//     com.google.javascript.rhino.ErrorReporter var33 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33, true);
//     com.google.javascript.rhino.jstype.ObjectType var36 = var35.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var37 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37, true);
//     com.google.javascript.rhino.jstype.ObjectType var40 = var39.createAnonymousObjectType();
//     boolean var41 = var40.isUnknownType();
//     boolean var42 = var36.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var40);
//     boolean var43 = var40.isFunctionPrototypeType();
//     var40.clearCachedValues();
//     com.google.javascript.rhino.jstype.ObjectType var45 = var40.dereference();
//     boolean var46 = var40.isFunctionPrototypeType();
//     com.google.javascript.rhino.jstype.ObjectType var47 = var2.createObjectType("null(null)", var32, var40);
//     java.lang.Appendable var48 = null;
//     var32.appendStringTree(var48);
// 
//   }

  public void test446() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test446"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
    boolean var4 = var1.recordParameterDescription("NUMBER 10.0", "{505847021}");
    boolean var5 = var1.recordExterns();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test447() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test447"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3, true);
    com.google.javascript.rhino.jstype.ObjectType var6 = var5.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var7 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7, true);
    com.google.javascript.rhino.jstype.ObjectType var10 = var9.createAnonymousObjectType();
    boolean var11 = var10.isUnknownType();
    boolean var12 = var6.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var10);
    boolean var13 = var10.isFunctionPrototypeType();
    var10.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var15 = var10.dereference();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var15};
    com.google.javascript.rhino.jstype.JSType var17 = var2.createUnionType(var16);
    com.google.javascript.rhino.ErrorReporter var18 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18, true);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    boolean var23 = var20.canPropertyBeDefined(var21, "hi!");
    boolean var25 = var20.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var26 = new com.google.javascript.rhino.jstype.FunctionBuilder(var20);
    com.google.javascript.rhino.jstype.FunctionBuilder var28 = var26.withName("NUMBER 10.0\n");
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29, true);
    com.google.javascript.rhino.jstype.ObjectType var32 = var31.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33, true);
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.createAnonymousObjectType();
    boolean var37 = var36.isUnknownType();
    boolean var38 = var32.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var36);
    boolean var39 = var36.isFunctionPrototypeType();
    com.google.javascript.rhino.jstype.FunctionBuilder var41 = var28.withReturnType((com.google.javascript.rhino.jstype.JSType)var36, true);
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var46 = var43.useSourceInfoIfMissingFrom(var45);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.eq(var45, var48);
    com.google.javascript.rhino.Node var50 = var45.cloneNode();
    boolean var51 = var50.isOr();
    com.google.javascript.rhino.jstype.StaticSourceFile var52 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var50);
    boolean var53 = var50.isDec();
    boolean var54 = var50.isFor();
    boolean var55 = var50.isNoSideEffectsCall();
    com.google.javascript.rhino.jstype.FunctionType var56 = var2.createFunctionType((com.google.javascript.rhino.jstype.JSType)var36, var50);
    com.google.javascript.rhino.jstype.ObjectType var57 = var56.getTypeOfThis();
    java.lang.Iterable var58 = var56.getAllImplementedInterfaces();
    com.google.javascript.rhino.jstype.JSType var60 = var56.findPropertyType("Node tree inequality:\nTree1:\nNUMBER 10.0\n\n\nTree2:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree1: NUMBER 10.0\n\n\nSubtree2: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.FunctionType var61 = var56.getSuperClassConstructor();
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);

  }

  public void test448() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test448"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.paramList();
    boolean var2 = var0.getBooleanProp(1);
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = var4.useSourceInfoIfMissingFrom(var6);
    boolean var8 = var6.isSetterDef();
    boolean var9 = var6.isNoSideEffectsCall();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = var11.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.eq(var13, var16);
    com.google.javascript.rhino.Node var18 = var13.cloneNode();
    boolean var19 = var18.isOr();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = var21.useSourceInfoIfMissingFrom(var23);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.eq(var23, var26);
    com.google.javascript.rhino.Node var28 = var23.cloneNode();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.or(var18, var28);
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.voidNode(var29);
    com.google.javascript.rhino.Node var31 = var6.srcref(var29);
    com.google.javascript.rhino.Node var32 = var31.getParent();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var37 = var34.useSourceInfoIfMissingFrom(var36);
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.eq(var36, var39);
    var40.setSourceEncodedPosition(100);
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var47 = var44.useSourceInfoIfMissingFrom(var46);
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.eq(var46, var49);
    com.google.javascript.rhino.Node var51 = var46.cloneNode();
    boolean var52 = var51.isOr();
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var56 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var57 = var54.useSourceInfoIfMissingFrom(var56);
    com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.eq(var56, var59);
    com.google.javascript.rhino.Node var61 = var56.cloneNode();
    com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.or(var51, var61);
    com.google.javascript.rhino.Node var63 = var40.useSourceInfoFromForTree(var51);
    boolean var64 = var63.isScript();
    com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var69 = var66.useSourceInfoIfMissingFrom(var68);
    com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var72 = com.google.javascript.rhino.IR.eq(var68, var71);
    com.google.javascript.rhino.Node var73 = var68.cloneNode();
    java.lang.String var74 = var63.checkTreeEquals(var73);
    com.google.javascript.rhino.Node var75 = var31.copyInformationFromForTree(var63);
    com.google.javascript.jscomp.CodingConvention var76 = null;
    com.google.javascript.jscomp.ClosureCodingConvention var77 = new com.google.javascript.jscomp.ClosureCodingConvention(var76);
    com.google.javascript.rhino.Node var79 = com.google.javascript.rhino.IR.number(10.0d);
    boolean var80 = var79.isLabel();
    com.google.javascript.rhino.Node var82 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var84 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var85 = var82.useSourceInfoIfMissingFrom(var84);
    boolean var86 = var84.isFalse();
    com.google.javascript.rhino.Node var87 = com.google.javascript.rhino.IR.sheq(var79, var84);
    com.google.javascript.rhino.Node var90 = com.google.javascript.rhino.Node.newString(0, "hi!");
    java.lang.String var91 = var77.extractClassNameIfRequire(var79, var90);
    com.google.javascript.rhino.Node var92 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var93 = com.google.javascript.rhino.IR.forNode(var0, var75, var79, var92);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "Node tree inequality:\nTree1:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nTree2:\nNUMBER 10.0\n\n\nSubtree1: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree2: NUMBER 10.0\n"+ "'", var74.equals("Node tree inequality:\nTree1:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nTree2:\nNUMBER 10.0\n\n\nSubtree1: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree2: NUMBER 10.0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);

  }

  public void test449() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test449"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    var2.setCrossModuleCodeMotion(false);
    var2.setLabelRenaming(true);
    java.util.Set var7 = null;
    var2.setStripTypePrefixes(var7);
    var1.initOptions(var2);
    com.google.javascript.jscomp.JSError[] var10 = var1.getMessages();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var15 = var12.useSourceInfoIfMissingFrom(var14);
    boolean var16 = var14.isOr();
    int var17 = var14.getChildCount();
    int var18 = var14.getType();
    var14.setLineno(10);
    com.google.javascript.jscomp.NodeTraversal.Callback var21 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.NodeTraversal.traverse((com.google.javascript.jscomp.AbstractCompiler)var1, var14, var21);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 39);

  }

  public void test450() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test450"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.jstype.ObjectType var3 = var2.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4, true);
    com.google.javascript.rhino.jstype.ObjectType var7 = var6.createAnonymousObjectType();
    boolean var8 = var7.isUnknownType();
    boolean var9 = var3.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var7);
    boolean var10 = var3.isBooleanValueType();
    com.google.javascript.rhino.jstype.JSType var11 = var3.collapseUnion();
    boolean var12 = var3.isNumberObjectType();
    com.google.javascript.rhino.Node var13 = var3.getRootNode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test451() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test451"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    var2.setCrossModuleCodeMotion(false);
    var2.setLabelRenaming(true);
    java.util.Set var7 = null;
    var2.setStripTypePrefixes(var7);
    var1.initOptions(var2);
    com.google.javascript.jscomp.JSError[] var10 = var1.getMessages();
    com.google.javascript.jscomp.JSError var11 = null;
    com.google.javascript.jscomp.JSError[] var12 = new com.google.javascript.jscomp.JSError[] { var11};
    com.google.javascript.jscomp.JSError var13 = null;
    com.google.javascript.jscomp.JSError[] var14 = new com.google.javascript.jscomp.JSError[] { var13};
    com.google.javascript.jscomp.VariableMap var16 = null;
    com.google.javascript.jscomp.VariableMap var17 = null;
    com.google.javascript.jscomp.VariableMap var18 = null;
    com.google.javascript.jscomp.FunctionInformationMap var19 = null;
    com.google.javascript.jscomp.SourceMap var20 = null;
    com.google.javascript.jscomp.Result var22 = new com.google.javascript.jscomp.Result(var12, var14, "", var16, var17, var18, var19, var20, "");
    com.google.javascript.jscomp.VariableMap var24 = null;
    com.google.javascript.jscomp.VariableMap var25 = null;
    com.google.javascript.jscomp.VariableMap var26 = null;
    com.google.javascript.jscomp.FunctionInformationMap var27 = null;
    com.google.javascript.jscomp.SourceMap var28 = null;
    com.google.javascript.jscomp.Result var30 = new com.google.javascript.jscomp.Result(var10, var12, "module$Node tree inequality:\nTree1:\nNUMBER 10.0\n\n\nTree2:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree1: NUMBER 10.0\n\n\nSubtree2: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n", var24, var25, var26, var27, var28, "{1101839915}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test452() {}
//   public void test452() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test452"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
//     com.google.javascript.rhino.Node var8 = var3.cloneNode();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var13 = var10.useSourceInfoIfMissingFrom(var12);
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var18 = var15.useSourceInfoIfMissingFrom(var17);
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.exprResult(var18);
//     java.lang.String var20 = var12.checkTreeEquals(var18);
//     com.google.javascript.rhino.Node var21 = var3.srcref(var12);
//     boolean var22 = var21.isRegExp();
//     com.google.javascript.rhino.ErrorReporter var24 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24, true);
//     com.google.javascript.rhino.jstype.ObjectType var27 = var26.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var28 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28, true);
//     com.google.javascript.rhino.jstype.ObjectType var31 = var30.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var32 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var32, true);
//     com.google.javascript.rhino.jstype.ObjectType var35 = var34.createAnonymousObjectType();
//     boolean var36 = var35.isUnknownType();
//     boolean var37 = var31.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var35);
//     com.google.javascript.rhino.jstype.JSType var38 = var26.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType)var31);
//     boolean var39 = var31.isBooleanValueType();
//     java.lang.String var40 = var31.toDebugHashCodeString();
//     com.google.javascript.rhino.ErrorReporter var41 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41, true);
//     com.google.javascript.rhino.jstype.ObjectType var44 = var43.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var45 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45, true);
//     com.google.javascript.rhino.jstype.ObjectType var48 = var47.createAnonymousObjectType();
//     boolean var49 = var48.isUnknownType();
//     boolean var50 = var44.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var48);
//     boolean var51 = var48.isFunctionPrototypeType();
//     com.google.javascript.rhino.jstype.ObjectType var52 = com.google.javascript.rhino.jstype.ObjectType.cast((com.google.javascript.rhino.jstype.JSType)var48);
//     boolean var54 = var52.hasOwnProperty("");
//     boolean var55 = var52.isEnumElementType();
//     com.google.javascript.rhino.jstype.JSType.TypePair var56 = var31.getTypesUnderShallowEquality((com.google.javascript.rhino.jstype.JSType)var52);
//     var21.putProp(31, (java.lang.Object)var56);
//     com.google.javascript.rhino.JSDocInfoBuilder var59 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.number(10.0d);
//     var59.markTypeNode(var61, 10, 100, 100, 0, true);
//     // The following exception was thrown during execution.
//     // This behavior will recorded for regression testing.
//     try {
//       com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.assign(var21, var61);
//       fail("Expected exception of type java.lang.IllegalStateException");
//     } catch (java.lang.IllegalStateException e) {
//       // Expected exception.
//     }
//     
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var1);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var22 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var36 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var37 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var39 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var40 + "' != '" + "{1509498680}"+ "'", var40.equals("{1509498680}"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var49 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var50 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var51 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var54 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var55 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var61);
// 
//   }

  public void test453() {}
//   public void test453() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test453"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     com.google.javascript.jscomp.Compiler.IntermediateState var3 = var1.getState();
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1, var4);
//     boolean var6 = var1.acceptEcmaScript5();
// 
//   }

  public void test454() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test454"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setSourceMapOutputPath("hi!");
    var0.setIdeMode(false);
    java.util.Set var5 = null;
    var0.setReplaceStringsReservedStrings(var5);
    var0.setDebugFunctionSideEffectsPath("hi!");
    java.util.List var9 = null;
    var0.setReplaceStringsFunctionDescriptions(var9);
    com.google.javascript.jscomp.SourceMap.DetailLevel var11 = null;
    var0.setSourceMapDetailLevel(var11);
    var0.setReserveRawExports(false);

  }

  public void test455() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test455"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setTweakToNumberLiteral("", 1);
    java.util.Set var4 = null;
    var0.setStripTypePrefixes(var4);
    com.google.javascript.jscomp.VariableRenamingPolicy var6 = null;
    var0.setVariableRenaming(var6);
    com.google.javascript.jscomp.MessageBundle var8 = null;
    var0.setMessageBundle(var8);
    var0.setSourceMapOutputPath("function (): {552562541}");
    com.google.javascript.jscomp.CompilerOptions var12 = new com.google.javascript.jscomp.CompilerOptions();
    var12.setCrossModuleCodeMotion(false);
    com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var15 = null;
    var12.setAnonymousFunctionNaming(var15);
    var12.setExtractPrototypeMemberDeclarations(true);
    var12.setRemoveTryCatchFinally(true);
    var12.setFoldConstants(false);
    var12.setSourceMapOutputPath("NUMBER 10.0");
    var12.setCoalesceVariableNames(true);
    java.util.Set var27 = null;
    var12.setStripTypePrefixes(var27);
    com.google.javascript.jscomp.DiagnosticType var31 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
    com.google.javascript.jscomp.DiagnosticType[] var32 = new com.google.javascript.jscomp.DiagnosticType[] { var31};
    com.google.javascript.jscomp.DiagnosticGroup var33 = new com.google.javascript.jscomp.DiagnosticGroup(var32);
    java.lang.Iterable var34 = var33.getTypes();
    java.lang.String var35 = var33.toString();
    com.google.javascript.jscomp.CompilerOptions var36 = new com.google.javascript.jscomp.CompilerOptions();
    var36.setCrossModuleCodeMotion(false);
    com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var39 = null;
    var36.setAnonymousFunctionNaming(var39);
    var36.setExtractPrototypeMemberDeclarations(true);
    var36.setPropertyAffinity(false);
    com.google.javascript.jscomp.DiagnosticType var50 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
    com.google.javascript.jscomp.DiagnosticType var56 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
    java.lang.String[] var58 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var59 = com.google.javascript.jscomp.JSError.make("", 1, 39, var56, var58);
    com.google.javascript.jscomp.ShowByPathWarningsGuard var60 = new com.google.javascript.jscomp.ShowByPathWarningsGuard(var58);
    boolean var61 = var50.equals((java.lang.Object)var58);
    com.google.javascript.rhino.Node var64 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var67 = var64.useSourceInfoIfMissingFrom(var66);
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.exprResult(var67);
    var68.setLength(10);
    com.google.javascript.jscomp.CheckLevel var71 = null;
    com.google.javascript.jscomp.CheckLevel var75 = null;
    com.google.javascript.jscomp.DiagnosticType var78 = com.google.javascript.jscomp.DiagnosticType.warning("{505847021}", "{505847021}");
    com.google.javascript.jscomp.DiagnosticType var84 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
    java.lang.String[] var86 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var87 = com.google.javascript.jscomp.JSError.make("", 1, 39, var84, var86);
    com.google.javascript.jscomp.ShowByPathWarningsGuard var88 = new com.google.javascript.jscomp.ShowByPathWarningsGuard(var86);
    com.google.javascript.jscomp.JSError var89 = com.google.javascript.jscomp.JSError.make("Node tree inequality:\nTree1:\nNUMBER 10.0\n\n\nTree2:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree1: NUMBER 10.0\n\n\nSubtree2: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n", (-1), 10, var75, var78, var86);
    java.lang.String[] var91 = new java.lang.String[] { "null(null)"};
    com.google.javascript.jscomp.JSError var92 = com.google.javascript.jscomp.JSError.make("hi!", var68, var71, var78, var91);
    com.google.javascript.jscomp.JSError var93 = com.google.javascript.jscomp.JSError.make("module$null(null)", 100, 39, var50, var91);
    com.google.javascript.jscomp.CheckLevel var94 = var93.getDefaultLevel();
    var36.setCheckGlobalNamesLevel(var94);
    var12.setWarningLevel(var33, var94);
    var0.setCheckMissingGetCssNameLevel(var94);
    java.lang.String var98 = var94.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var98 + "' != '" + "OFF"+ "'", var98.equals("OFF"));

  }

  public void test456() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test456"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    boolean var5 = var2.canPropertyBeDefined(var3, "hi!");
    boolean var7 = var2.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var8 = new com.google.javascript.rhino.jstype.FunctionBuilder(var2);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = var11.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.eq(var13, var16);
    com.google.javascript.rhino.Node var18 = var13.cloneNode();
    boolean var19 = var18.isOr();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = var21.useSourceInfoIfMissingFrom(var23);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.eq(var23, var26);
    com.google.javascript.rhino.Node var28 = var23.cloneNode();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.or(var18, var28);
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.voidNode(var29);
    com.google.javascript.rhino.Node var31 = var30.getFirstChild();
    com.google.javascript.rhino.Node var32 = var31.getLastSibling();
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33, true);
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37, true);
    com.google.javascript.rhino.jstype.ObjectType var40 = var39.createAnonymousObjectType();
    boolean var41 = var40.isUnknownType();
    boolean var42 = var36.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var40);
    boolean var43 = var40.isFunctionPrototypeType();
    var40.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var45 = var40.dereference();
    boolean var46 = var40.isFunctionPrototypeType();
    com.google.javascript.rhino.jstype.ObjectType var47 = var2.createObjectType("null(null)", var32, var40);
    com.google.javascript.rhino.jstype.BooleanLiteralSet var48 = var47.getPossibleToBooleanOutcomes();
    int var49 = var48.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);

  }

  public void test457() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test457"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var2 = com.google.javascript.rhino.ScriptRuntime.escapeString("{1125981799}", '#');
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }

  }

  public void test458() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test458"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setCrossModuleCodeMotion(false);
    var0.setLabelRenaming(true);
    var0.setCollapseProperties(false);
    var0.setAliasKeywords(true);

  }

  public void test459() {}
//   public void test459() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test459"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     boolean var4 = var3.isExtern();
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var3, true);
// 
//   }

  public void test460() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test460"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3, true);
    com.google.javascript.rhino.jstype.ObjectType var6 = var5.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var7 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7, true);
    com.google.javascript.rhino.jstype.ObjectType var10 = var9.createAnonymousObjectType();
    boolean var11 = var10.isUnknownType();
    boolean var12 = var6.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var10);
    boolean var13 = var10.isFunctionPrototypeType();
    var10.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var15 = var10.dereference();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var15};
    com.google.javascript.rhino.jstype.JSType var17 = var2.createUnionType(var16);
    com.google.javascript.rhino.ErrorReporter var18 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18, true);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    boolean var23 = var20.canPropertyBeDefined(var21, "hi!");
    boolean var25 = var20.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var26 = new com.google.javascript.rhino.jstype.FunctionBuilder(var20);
    com.google.javascript.rhino.jstype.FunctionBuilder var28 = var26.withName("NUMBER 10.0\n");
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29, true);
    com.google.javascript.rhino.jstype.ObjectType var32 = var31.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33, true);
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.createAnonymousObjectType();
    boolean var37 = var36.isUnknownType();
    boolean var38 = var32.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var36);
    boolean var39 = var36.isFunctionPrototypeType();
    com.google.javascript.rhino.jstype.FunctionBuilder var41 = var28.withReturnType((com.google.javascript.rhino.jstype.JSType)var36, true);
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var46 = var43.useSourceInfoIfMissingFrom(var45);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.eq(var45, var48);
    com.google.javascript.rhino.Node var50 = var45.cloneNode();
    boolean var51 = var50.isOr();
    com.google.javascript.rhino.jstype.StaticSourceFile var52 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var50);
    boolean var53 = var50.isDec();
    boolean var54 = var50.isFor();
    boolean var55 = var50.isNoSideEffectsCall();
    com.google.javascript.rhino.jstype.FunctionType var56 = var2.createFunctionType((com.google.javascript.rhino.jstype.JSType)var36, var50);
    int var57 = var56.getExtendedInterfacesCount();
    boolean var58 = var56.isObject();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);

  }

  public void test461() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test461"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3, true);
    com.google.javascript.rhino.jstype.ObjectType var6 = var5.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var7 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7, true);
    com.google.javascript.rhino.jstype.ObjectType var10 = var9.createAnonymousObjectType();
    boolean var11 = var10.isUnknownType();
    boolean var12 = var6.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var10);
    boolean var13 = var10.isFunctionPrototypeType();
    var10.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var15 = var10.dereference();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var15};
    com.google.javascript.rhino.jstype.JSType var17 = var2.createUnionType(var16);
    com.google.javascript.rhino.ErrorReporter var18 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18, true);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    boolean var23 = var20.canPropertyBeDefined(var21, "hi!");
    boolean var25 = var20.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var26 = new com.google.javascript.rhino.jstype.FunctionBuilder(var20);
    com.google.javascript.rhino.jstype.FunctionBuilder var28 = var26.withName("NUMBER 10.0\n");
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29, true);
    com.google.javascript.rhino.jstype.ObjectType var32 = var31.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33, true);
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.createAnonymousObjectType();
    boolean var37 = var36.isUnknownType();
    boolean var38 = var32.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var36);
    boolean var39 = var36.isFunctionPrototypeType();
    com.google.javascript.rhino.jstype.FunctionBuilder var41 = var28.withReturnType((com.google.javascript.rhino.jstype.JSType)var36, true);
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var46 = var43.useSourceInfoIfMissingFrom(var45);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.eq(var45, var48);
    com.google.javascript.rhino.Node var50 = var45.cloneNode();
    boolean var51 = var50.isOr();
    com.google.javascript.rhino.jstype.StaticSourceFile var52 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var50);
    boolean var53 = var50.isDec();
    boolean var54 = var50.isFor();
    boolean var55 = var50.isNoSideEffectsCall();
    com.google.javascript.rhino.jstype.FunctionType var56 = var2.createFunctionType((com.google.javascript.rhino.jstype.JSType)var36, var50);
    boolean var57 = var56.isReturnTypeInferred();
    boolean var58 = var56.hasInstanceType();
    com.google.javascript.rhino.jstype.FunctionType var59 = var56.toMaybeFunctionType();
    com.google.javascript.rhino.ErrorReporter var60 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var60, true);
    com.google.javascript.rhino.jstype.ObjectType var63 = var62.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var64 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var64, true);
    com.google.javascript.rhino.jstype.ObjectType var67 = var66.createAnonymousObjectType();
    boolean var68 = var67.isUnknownType();
    boolean var69 = var63.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var67);
    boolean var70 = var67.isFunctionPrototypeType();
    com.google.javascript.rhino.jstype.JSType var71 = var59.getLeastSupertype((com.google.javascript.rhino.jstype.JSType)var67);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.ObjectType var72 = var59.getInstanceType();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test462() {}
//   public void test462() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test462"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setTweakToNumberLiteral("", 1);
//     java.util.Set var4 = null;
//     var0.setStripTypePrefixes(var4);
//     com.google.javascript.jscomp.DiagnosticGroup var6 = null;
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var8 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var6, var7);
//     var0.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var8);
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.empty();
//     com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
//     java.lang.String[] var19 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var20 = com.google.javascript.jscomp.JSError.make("", 1, 39, var17, var19);
//     com.google.javascript.jscomp.CheckLevel var24 = null;
//     com.google.javascript.jscomp.DiagnosticType var27 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
//     com.google.javascript.jscomp.DiagnosticType var33 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0", "NUMBER 10.0");
//     java.lang.String[] var35 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var36 = com.google.javascript.jscomp.JSError.make("", 1, 39, var33, var35);
//     com.google.javascript.jscomp.JSError var37 = com.google.javascript.jscomp.JSError.make("hi!", 100, 100, var24, var27, var35);
//     com.google.javascript.jscomp.JSError var38 = com.google.javascript.jscomp.JSError.make("NUMBER 10.0\n", var11, var17, var35);
//     com.google.javascript.jscomp.CheckLevel var39 = var8.level(var38);
// 
//   }

  public void test463() {}
//   public void test463() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test463"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
//     com.google.javascript.rhino.ErrorReporter var3 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3, true);
//     com.google.javascript.rhino.jstype.ObjectType var6 = var5.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var7 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7, true);
//     com.google.javascript.rhino.jstype.ObjectType var10 = var9.createAnonymousObjectType();
//     boolean var11 = var10.isUnknownType();
//     boolean var12 = var6.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var10);
//     boolean var13 = var10.isFunctionPrototypeType();
//     var10.clearCachedValues();
//     com.google.javascript.rhino.jstype.ObjectType var15 = var10.dereference();
//     com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var15};
//     com.google.javascript.rhino.jstype.JSType var17 = var2.createUnionType(var16);
//     com.google.javascript.rhino.ErrorReporter var18 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18, true);
//     com.google.javascript.rhino.jstype.JSType var21 = null;
//     boolean var23 = var20.canPropertyBeDefined(var21, "hi!");
//     boolean var25 = var20.hasNamespace("");
//     com.google.javascript.rhino.jstype.FunctionBuilder var26 = new com.google.javascript.rhino.jstype.FunctionBuilder(var20);
//     com.google.javascript.rhino.jstype.FunctionBuilder var28 = var26.withName("NUMBER 10.0\n");
//     com.google.javascript.rhino.ErrorReporter var29 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29, true);
//     com.google.javascript.rhino.jstype.ObjectType var32 = var31.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var33 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33, true);
//     com.google.javascript.rhino.jstype.ObjectType var36 = var35.createAnonymousObjectType();
//     boolean var37 = var36.isUnknownType();
//     boolean var38 = var32.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var36);
//     boolean var39 = var36.isFunctionPrototypeType();
//     com.google.javascript.rhino.jstype.FunctionBuilder var41 = var28.withReturnType((com.google.javascript.rhino.jstype.JSType)var36, true);
//     com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var46 = var43.useSourceInfoIfMissingFrom(var45);
//     com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.eq(var45, var48);
//     com.google.javascript.rhino.Node var50 = var45.cloneNode();
//     boolean var51 = var50.isOr();
//     com.google.javascript.rhino.jstype.StaticSourceFile var52 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var50);
//     boolean var53 = var50.isDec();
//     boolean var54 = var50.isFor();
//     boolean var55 = var50.isNoSideEffectsCall();
//     com.google.javascript.rhino.jstype.FunctionType var56 = var2.createFunctionType((com.google.javascript.rhino.jstype.JSType)var36, var50);
//     boolean var57 = var56.isReturnTypeInferred();
//     boolean var58 = var56.hasInstanceType();
//     com.google.javascript.rhino.jstype.FunctionType var59 = var56.toMaybeFunctionType();
//     com.google.javascript.rhino.jstype.JSType var61 = var56.getPropertyType("NUMBER 10.0");
//     com.google.javascript.rhino.jstype.Visitor var62 = null;
//     java.lang.Object var63 = var56.visit(var62);
// 
//   }

  public void test464() {}
//   public void test464() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test464"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
//     var6.setSourceEncodedPositionForTree(100);
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
//     boolean var12 = var11.isLabel();
//     var6.removeChild(var11);
// 
//   }

  public void test465() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test465"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("{723551193}");
    boolean var2 = var1.hasChildren();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test466() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test466"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    com.google.javascript.jscomp.CompilerOptions var1 = new com.google.javascript.jscomp.CompilerOptions();
    var1.setSourceMapOutputPath("hi!");
    var1.setIdeMode(false);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var6 = var1.getLanguageIn();
    var1.setClosurePass(false);
    var1.setRenamePrefix("hi!");
    var1.disableRuntimeTypeCheck();
    com.google.javascript.jscomp.CheckLevel var12 = null;
    var1.setCheckUnreachableCode(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.number(10.0d);
    boolean var16 = var15.isLabel();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var21 = var18.useSourceInfoIfMissingFrom(var20);
    boolean var22 = var20.isFalse();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.sheq(var15, var20);
    java.lang.Iterable var24 = var20.siblings();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var29 = var26.useSourceInfoIfMissingFrom(var28);
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.eq(var28, var31);
    com.google.javascript.rhino.Node var33 = var28.cloneNode();
    boolean var34 = var28.isDelProp();
    boolean var35 = var28.isIf();
    java.lang.String var36 = var28.toString();
    boolean var37 = var20.isEquivalentToTyped(var28);
    com.google.javascript.rhino.ErrorReporter var38 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38, true);
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41, true);
    com.google.javascript.rhino.jstype.ObjectType var44 = var43.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var45 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45, true);
    com.google.javascript.rhino.jstype.ObjectType var48 = var47.createAnonymousObjectType();
    boolean var49 = var48.isUnknownType();
    boolean var50 = var44.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var48);
    boolean var51 = var48.isFunctionPrototypeType();
    var48.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var53 = var48.dereference();
    com.google.javascript.rhino.jstype.JSType[] var54 = new com.google.javascript.rhino.jstype.JSType[] { var53};
    com.google.javascript.rhino.jstype.JSType var55 = var40.createUnionType(var54);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.connectIfNotFound((java.lang.Object)var12, (java.lang.Object)var37, (java.lang.Object)var40);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "NUMBER 10.0"+ "'", var36.equals("NUMBER 10.0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test467() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test467"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.thisNode();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var5 = var2.useSourceInfoIfMissingFrom(var4);
    boolean var6 = var4.isFalse();
    java.lang.String var7 = var4.toStringTree();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.and(var0, var4);
    boolean var9 = var0.isFalse();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "NUMBER 10.0\n"+ "'", var7.equals("NUMBER 10.0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test468() {}
//   public void test468() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test468"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     double var2 = var1.getProgress();
//     java.lang.String var5 = var1.getSourceLine("", 31);
// 
//   }

  public void test469() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test469"); }


    com.google.javascript.jscomp.SourceAst var1 = null;
    com.google.javascript.rhino.InputId var2 = null;
    com.google.javascript.jscomp.CompilerInput var4 = new com.google.javascript.jscomp.CompilerInput(var1, var2, true);
    com.google.javascript.jscomp.JSModule var5 = var4.getModule();
    com.google.javascript.jscomp.SourceAst var6 = var4.getAst();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var7 = com.google.javascript.rhino.ScriptRuntime.getMessage1("module$null(null)", (java.lang.Object)var4);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test470() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test470"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
    boolean var4 = var1.recordParameterDescription("NUMBER 10.0", "{505847021}");
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordReturnType(var5);
    boolean var7 = var1.recordExterns();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test471() {}
//   public void test471() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test471"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     com.google.javascript.jscomp.Compiler.IntermediateState var3 = var1.getState();
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1, var4);
//     com.google.javascript.jscomp.JSModule var6 = null;
//     java.lang.String var7 = var1.toSource(var6);
// 
//   }

  public void test472() {}
//   public void test472() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test472"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention(var0);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = null;
//     com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var3 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var1, var2);
//     com.google.javascript.jscomp.ClosureCodingConvention var4 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var1);
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var9 = var6.useSourceInfoIfMissingFrom(var8);
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.eq(var8, var11);
//     com.google.javascript.rhino.Node var13 = var8.cloneNode();
//     boolean var14 = var13.isOr();
//     com.google.javascript.rhino.jstype.StaticSourceFile var15 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var13);
//     boolean var16 = var13.isDec();
//     boolean var17 = var13.isFor();
//     boolean var18 = var1.isVarArgsParameter(var13);
//     java.lang.String var19 = var1.getExportSymbolFunction();
//     com.google.javascript.rhino.Node var20 = null;
//     boolean var21 = var1.isPrototypeAlias(var20);
//     com.google.javascript.rhino.JSDocInfoBuilder var23 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
//     boolean var24 = var23.recordImplicitCast();
//     com.google.javascript.rhino.JSTypeExpression var26 = null;
//     boolean var27 = var23.recordParameter("hi!", var26);
//     boolean var28 = var23.isPopulated();
//     boolean var29 = var23.recordNoAlias();
//     boolean var30 = var23.recordNoAlias();
//     com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.paramList();
//     var23.markTypeNode(var31, 0, 100, 1, 1, true);
//     boolean var38 = var1.isOptionalParameter(var31);
//     java.lang.String var39 = var1.getDelegateSuperclassName();
// 
//   }

  public void test473() {}
//   public void test473() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test473"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setSourceMapOutputPath("hi!");
//     var0.setReplaceStringsPlaceholderToken("hi!");
//     var0.setGroupVariableDeclarations(true);
//     var0.setInlineConstantVars(true);
//     com.google.javascript.jscomp.CompilerOptions.Reach var9 = null;
//     var0.setRemoveUnusedVariables(var9);
// 
//   }

  public void test474() {}
//   public void test474() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test474"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithEdgeAnnotations();
//     com.google.javascript.jscomp.CompilerOptions var1 = new com.google.javascript.jscomp.CompilerOptions();
//     var1.setTweakToNumberLiteral("", 1);
//     var1.setInlineVariables(false);
//     com.google.javascript.jscomp.CompilerOptions.TracerMode var7 = var1.getTracerMode();
//     var1.setPrintInputDelimiter(false);
//     var1.setCheckMissingGetCssNameBlacklist("");
//     var1.setCollapseObjectLiterals(false);
//     var1.setExtractPrototypeMemberDeclarations(true);
//     java.util.List var16 = var0.getNeighborNodes((java.lang.Object)var1);
// 
//   }

  public void test475() {}
//   public void test475() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test475"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     com.google.javascript.jscomp.JSModule var4 = var3.getModule();
//     boolean var5 = var3.isExtern();
//     java.lang.String var6 = var3.getName();
// 
//   }

  public void test476() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test476"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setTweakToNumberLiteral("", 1);
    var0.setInlineVariables(false);
    com.google.javascript.jscomp.CompilerOptions.TracerMode var6 = var0.getTracerMode();
    var0.setPrintInputDelimiter(false);
    var0.setCheckMissingGetCssNameBlacklist("");
    var0.setCollapseObjectLiterals(false);
    var0.setLooseTypes(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setSyntheticBlockEndMarker("{1459695149}");
    var0.setAliasStringsBlacklist("Node tree inequality:\nTree1:\nNUMBER 10.0\n\n\nTree2:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree1: NUMBER 10.0\n\n\nSubtree2: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n");
    var0.setDevirtualizePrototypeMethods(true);
    var0.setShadowVariables(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test477() {}
//   public void test477() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test477"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.JSModule var4 = var3.getModule();
//     com.google.javascript.jscomp.CompilerInput var5 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var3);
// 
//   }

  public void test478() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test478"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setTweakToNumberLiteral("", 1);
    var0.setInlineVariables(false);
    com.google.javascript.jscomp.CompilerOptions.TracerMode var6 = var0.getTracerMode();
    var0.setPrintInputDelimiter(false);
    var0.setCheckMissingGetCssNameBlacklist("");
    var0.setCollapseObjectLiterals(false);
    var0.setLooseTypes(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setCheckTypes(true);
    boolean var19 = var0.assumeClosuresOnlyCaptureReferences();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test479() {}
//   public void test479() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test479"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.exprResult(var4);
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.block(var5);
//     var6.setIsSyntheticBlock(false);
//     java.lang.Appendable var9 = null;
//     var6.appendStringTree(var9);
// 
//   }

  public void test480() {}
//   public void test480() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test480"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setCrossModuleCodeMotion(false);
//     com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var3 = null;
//     var0.setAnonymousFunctionNaming(var3);
//     var0.setExtractPrototypeMemberDeclarations(true);
//     var0.setRemoveTryCatchFinally(true);
//     var0.setFoldConstants(false);
//     com.google.javascript.jscomp.CompilerOptions.LanguageMode var11 = var0.getLanguageIn();
//     com.google.javascript.jscomp.CompilerOptions.Reach var12 = null;
//     var0.setInlineFunctions(var12);
// 
//   }

  public void test481() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test481"); }


    java.lang.String var1 = com.google.javascript.rhino.ScriptRuntime.escapeString("EQ 0");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "EQ 0"+ "'", var1.equals("EQ 0"));

  }

  public void test482() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test482"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.SourceMap var2 = var1.getSourceMap();
    com.google.javascript.jscomp.SourceFile var5 = com.google.javascript.jscomp.SourceFile.fromCode("Node tree inequality:\nTree1:\nNUMBER 10.0\n\n\nTree2:\nEQ\n    NUMBER 10.0\n    NUMBER 10.0\n\n\nSubtree1: NUMBER 10.0\n\n\nSubtree2: EQ\n    NUMBER 10.0\n    NUMBER 10.0\n", "{1125981799}");
    var5.setOriginalPath("{1358476415}");
    com.google.javascript.jscomp.SourceFile var9 = new com.google.javascript.jscomp.SourceFile("hi!");
    java.lang.String var10 = var9.toString();
    com.google.javascript.jscomp.CompilerOptions var11 = new com.google.javascript.jscomp.CompilerOptions();
    var11.setCrossModuleCodeMotion(false);
    com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var14 = null;
    var11.setAnonymousFunctionNaming(var14);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var16 = var11.getTweakProcessing();
    var11.setExternExportsPath("");
    var11.setIgnoreCajaProperties(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.Result var21 = var1.compile(var5, var9, var11);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test483() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test483"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.jstype.ObjectType var3 = var2.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4, true);
    com.google.javascript.rhino.jstype.ObjectType var7 = var6.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8, true);
    com.google.javascript.rhino.jstype.ObjectType var11 = var10.createAnonymousObjectType();
    boolean var12 = var11.isUnknownType();
    boolean var13 = var7.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var11);
    com.google.javascript.rhino.jstype.JSType var14 = var2.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType)var7);
    boolean var15 = var7.isBooleanValueType();
    java.lang.String var16 = var7.getNormalizedReferenceName();
    boolean var17 = var7.isNumberObjectType();
    boolean var18 = var7.isNullType();
    boolean var19 = var7.isString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test484() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test484"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setSourceMapOutputPath("hi!");
    var0.setIdeMode(false);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var5 = var0.getLanguageIn();
    var0.setRemoveUnusedLocalVars(true);
    var0.setGatherCssNames(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test485() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test485"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3, true);
    com.google.javascript.rhino.jstype.ObjectType var6 = var5.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var7 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7, true);
    com.google.javascript.rhino.jstype.ObjectType var10 = var9.createAnonymousObjectType();
    boolean var11 = var10.isUnknownType();
    boolean var12 = var6.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var10);
    boolean var13 = var10.isFunctionPrototypeType();
    var10.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var15 = var10.dereference();
    com.google.javascript.rhino.jstype.JSType[] var16 = new com.google.javascript.rhino.jstype.JSType[] { var15};
    com.google.javascript.rhino.jstype.JSType var17 = var2.createUnionType(var16);
    com.google.javascript.rhino.ErrorReporter var18 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18, true);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    boolean var23 = var20.canPropertyBeDefined(var21, "hi!");
    boolean var25 = var20.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var26 = new com.google.javascript.rhino.jstype.FunctionBuilder(var20);
    com.google.javascript.rhino.jstype.FunctionBuilder var28 = var26.withName("NUMBER 10.0\n");
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29, true);
    com.google.javascript.rhino.jstype.ObjectType var32 = var31.createAnonymousObjectType();
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33, true);
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.createAnonymousObjectType();
    boolean var37 = var36.isUnknownType();
    boolean var38 = var32.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var36);
    boolean var39 = var36.isFunctionPrototypeType();
    com.google.javascript.rhino.jstype.FunctionBuilder var41 = var28.withReturnType((com.google.javascript.rhino.jstype.JSType)var36, true);
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var46 = var43.useSourceInfoIfMissingFrom(var45);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.eq(var45, var48);
    com.google.javascript.rhino.Node var50 = var45.cloneNode();
    boolean var51 = var50.isOr();
    com.google.javascript.rhino.jstype.StaticSourceFile var52 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var50);
    boolean var53 = var50.isDec();
    boolean var54 = var50.isFor();
    boolean var55 = var50.isNoSideEffectsCall();
    com.google.javascript.rhino.jstype.FunctionType var56 = var2.createFunctionType((com.google.javascript.rhino.jstype.JSType)var36, var50);
    int var57 = var56.getExtendedInterfacesCount();
    boolean var58 = var56.matchesInt32Context();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.FunctionType var59 = var56.getSuperClassConstructor();
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test486() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test486"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setCrossModuleCodeMotion(false);
    com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var3 = null;
    var0.setAnonymousFunctionNaming(var3);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var5 = var0.getTweakProcessing();
    var0.setRemoveClosureAsserts(false);
    var0.setPropertyAffinity(true);
    var0.setCollapseAnonymousFunctions(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test487() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test487"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setCrossModuleCodeMotion(false);
    com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var3 = null;
    var0.setAnonymousFunctionNaming(var3);
    var0.setExtractPrototypeMemberDeclarations(true);
    boolean var7 = var0.assumeStrictThis();
    com.google.javascript.jscomp.CheckLevel var8 = null;
    var0.setCheckRequires(var8);
    var0.setAliasExternals(false);
    var0.setLabelRenaming(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test488() {}
//   public void test488() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test488"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setCrossModuleCodeMotion(false);
//     com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var3 = null;
//     var0.setAnonymousFunctionNaming(var3);
//     var0.setExtractPrototypeMemberDeclarations(true);
//     var0.setRemoveTryCatchFinally(true);
//     var0.setSyntheticBlockStartMarker("hi!");
//     com.google.javascript.jscomp.CompilerOptions.LanguageMode var11 = var0.getLanguageIn();
//     var0.enableRuntimeTypeCheck("hi!");
//     byte[] var14 = null;
//     var0.setInputVariableMapSerialized(var14);
//     var0.setRuntimeTypeCheck(true);
//     com.google.javascript.jscomp.CodingConvention var18 = var0.getCodingConvention();
//     var0.disableRuntimeTypeCheck();
//     com.google.javascript.jscomp.CompilerOptions.Reach var20 = null;
//     var0.setInlineFunctions(var20);
// 
//   }

  public void test489() {}
//   public void test489() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test489"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1);
//     com.google.javascript.jscomp.Compiler.IntermediateState var3 = var1.getState();
//     com.google.javascript.jscomp.Region var6 = var1.getSourceRegion("function (): {909579166}", 1);
// 
//   }

  public void test490() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test490"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    com.google.javascript.rhino.Node var8 = var3.cloneNode();
    boolean var9 = var3.isDelProp();
    boolean var10 = var3.isIf();
    java.lang.String var11 = var3.toString();
    com.google.javascript.rhino.InputId var12 = var3.getInputId();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.number(10.0d);
    boolean var15 = var14.isLabel();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var20 = var17.useSourceInfoIfMissingFrom(var19);
    boolean var21 = var19.isFalse();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.sheq(var14, var19);
    java.lang.Iterable var23 = var19.siblings();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var28 = var25.useSourceInfoIfMissingFrom(var27);
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.eq(var27, var30);
    com.google.javascript.rhino.Node var32 = var27.cloneNode();
    boolean var33 = var27.isDelProp();
    boolean var34 = var27.isIf();
    java.lang.String var35 = var27.toString();
    boolean var36 = var19.isEquivalentToTyped(var27);
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.block();
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var42 = var39.useSourceInfoIfMissingFrom(var41);
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var45 = var42.copyInformationFrom(var44);
    boolean var46 = var37.isEquivalentToTyped(var45);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.addChildrenAfter(var27, var37);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "NUMBER 10.0"+ "'", var11.equals("NUMBER 10.0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "NUMBER 10.0"+ "'", var35.equals("NUMBER 10.0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test491() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test491"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.eq(var3, var6);
    var7.setSourceEncodedPosition(100);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = var11.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.eq(var13, var16);
    com.google.javascript.rhino.Node var18 = var13.cloneNode();
    boolean var19 = var18.isOr();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = var21.useSourceInfoIfMissingFrom(var23);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.eq(var23, var26);
    com.google.javascript.rhino.Node var28 = var23.cloneNode();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.or(var18, var28);
    com.google.javascript.rhino.Node var30 = var7.useSourceInfoFromForTree(var18);
    com.google.javascript.rhino.Node var31 = var7.removeFirstChild();
    boolean var32 = var7.isTry();
    boolean var33 = var7.isQualifiedName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test492() {}
//   public void test492() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test492"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.rhino.InputId var4 = null;
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var3, var4, true);
// 
//   }

  public void test493() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test493"); }


    com.google.javascript.rhino.jstype.JSType var0 = null;
    com.google.javascript.rhino.jstype.FunctionType var1 = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test494() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test494"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setCrossModuleCodeMotion(false);
    boolean var3 = var0.isExternExportsEnabled();
    var0.setCheckTypes(false);
    var0.setPreferLineBreakAtEndOfFile(false);
    var0.setNameReferenceGraphPath("{1125981799}");
    var0.setExternExports(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test495() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test495"); }


    java.nio.charset.Charset var1 = null;
    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromFile("NUMBER 10.0", var1);
    com.google.javascript.jscomp.Region var4 = var2.getRegion(100);
    java.lang.String var5 = var2.toString();
    java.lang.String var7 = var2.getLine(10);
    boolean var8 = var2.isExtern();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "NUMBER 10.0"+ "'", var5.equals("NUMBER 10.0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test496() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test496"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    var2.setCrossModuleCodeMotion(false);
    var2.setLabelRenaming(true);
    java.util.Set var7 = null;
    var2.setStripTypePrefixes(var7);
    var1.initOptions(var2);
    java.nio.charset.Charset var11 = null;
    com.google.javascript.jscomp.SourceFile var12 = com.google.javascript.jscomp.SourceFile.fromFile("NUMBER 10.0", var11);
    com.google.javascript.jscomp.Region var14 = var12.getRegion(100);
    java.lang.String var15 = var12.toString();
    com.google.javascript.rhino.Node var16 = var1.parse(var12);
    com.google.javascript.jscomp.CodingConvention var17 = var1.getCodingConvention();
    com.google.javascript.jscomp.Compiler.CodeBuilder var18 = null;
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var24 = var21.useSourceInfoIfMissingFrom(var23);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.eq(var23, var26);
    var27.setSourceEncodedPosition(100);
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var34 = var31.useSourceInfoIfMissingFrom(var33);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.eq(var33, var36);
    com.google.javascript.rhino.Node var38 = var33.cloneNode();
    boolean var39 = var38.isOr();
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var44 = var41.useSourceInfoIfMissingFrom(var43);
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.eq(var43, var46);
    com.google.javascript.rhino.Node var48 = var43.cloneNode();
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.or(var38, var48);
    com.google.javascript.rhino.Node var50 = var27.useSourceInfoFromForTree(var38);
    com.google.javascript.rhino.Node var51 = var27.removeFirstChild();
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.throwNode(var27);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.toSource(var18, 31, var27);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "NUMBER 10.0"+ "'", var15.equals("NUMBER 10.0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test497() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test497"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.block();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var5 = var2.useSourceInfoIfMissingFrom(var4);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var8 = var5.copyInformationFrom(var7);
    boolean var9 = var0.isEquivalentToTyped(var8);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var14 = var11.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.eq(var13, var16);
    com.google.javascript.rhino.Node var18 = var16.cloneNode();
    var18.setCharno(0);
    com.google.javascript.jscomp.DiagnosticType var23 = com.google.javascript.jscomp.DiagnosticType.disabled("NUMBER 10.0\n", "NUMBER 10.0\n");
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var28 = var25.useSourceInfoIfMissingFrom(var27);
    boolean var29 = var27.isSetterDef();
    boolean var30 = var27.isNoSideEffectsCall();
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var35 = var32.useSourceInfoIfMissingFrom(var34);
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.eq(var34, var37);
    com.google.javascript.rhino.Node var39 = var34.cloneNode();
    boolean var40 = var39.isOr();
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var45 = var42.useSourceInfoIfMissingFrom(var44);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.eq(var44, var47);
    com.google.javascript.rhino.Node var49 = var44.cloneNode();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.or(var39, var49);
    com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.voidNode(var50);
    com.google.javascript.rhino.Node var52 = var27.srcref(var50);
    boolean var53 = var23.equals((java.lang.Object)var50);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.function(var0, var18, var50);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test498() {}
//   public void test498() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test498"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithEdgeAnnotations();
//     var0.pushNodeAnnotations();
//     com.google.javascript.rhino.ErrorReporter var2 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2, true);
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     boolean var7 = var4.canPropertyBeDefined(var5, "hi!");
//     boolean var9 = var4.hasNamespace("");
//     com.google.javascript.rhino.jstype.FunctionBuilder var10 = new com.google.javascript.rhino.jstype.FunctionBuilder(var4);
//     com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var11 = null;
//     var4.setResolveMode(var11);
//     com.google.javascript.rhino.ErrorReporter var13 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13, true);
//     com.google.javascript.rhino.jstype.ObjectType var16 = var15.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var17 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17, true);
//     com.google.javascript.rhino.jstype.ObjectType var20 = var19.createAnonymousObjectType();
//     boolean var21 = var20.isUnknownType();
//     boolean var22 = var16.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var20);
//     boolean var23 = var16.isBooleanValueType();
//     com.google.javascript.rhino.ErrorReporter var24 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24, true);
//     com.google.javascript.rhino.ErrorReporter var27 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27, true);
//     com.google.javascript.rhino.jstype.ObjectType var30 = var29.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var31 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var31, true);
//     com.google.javascript.rhino.jstype.ObjectType var34 = var33.createAnonymousObjectType();
//     boolean var35 = var34.isUnknownType();
//     boolean var36 = var30.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var34);
//     boolean var37 = var34.isFunctionPrototypeType();
//     var34.clearCachedValues();
//     com.google.javascript.rhino.jstype.ObjectType var39 = var34.dereference();
//     com.google.javascript.rhino.jstype.JSType[] var40 = new com.google.javascript.rhino.jstype.JSType[] { var39};
//     com.google.javascript.rhino.jstype.JSType var41 = var26.createUnionType(var40);
//     com.google.javascript.rhino.ErrorReporter var42 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var42, true);
//     com.google.javascript.rhino.jstype.JSType var45 = null;
//     boolean var47 = var44.canPropertyBeDefined(var45, "hi!");
//     boolean var49 = var44.hasNamespace("");
//     com.google.javascript.rhino.jstype.FunctionBuilder var50 = new com.google.javascript.rhino.jstype.FunctionBuilder(var44);
//     com.google.javascript.rhino.jstype.FunctionBuilder var52 = var50.withName("NUMBER 10.0\n");
//     com.google.javascript.rhino.ErrorReporter var53 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var53, true);
//     com.google.javascript.rhino.jstype.ObjectType var56 = var55.createAnonymousObjectType();
//     com.google.javascript.rhino.ErrorReporter var57 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var57, true);
//     com.google.javascript.rhino.jstype.ObjectType var60 = var59.createAnonymousObjectType();
//     boolean var61 = var60.isUnknownType();
//     boolean var62 = var56.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var60);
//     boolean var63 = var60.isFunctionPrototypeType();
//     com.google.javascript.rhino.jstype.FunctionBuilder var65 = var52.withReturnType((com.google.javascript.rhino.jstype.JSType)var60, true);
//     com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var70 = var67.useSourceInfoIfMissingFrom(var69);
//     com.google.javascript.rhino.Node var72 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var73 = com.google.javascript.rhino.IR.eq(var69, var72);
//     com.google.javascript.rhino.Node var74 = var69.cloneNode();
//     boolean var75 = var74.isOr();
//     com.google.javascript.rhino.jstype.StaticSourceFile var76 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var74);
//     boolean var77 = var74.isDec();
//     boolean var78 = var74.isFor();
//     boolean var79 = var74.isNoSideEffectsCall();
//     com.google.javascript.rhino.jstype.FunctionType var80 = var26.createFunctionType((com.google.javascript.rhino.jstype.JSType)var60, var74);
//     boolean var81 = var16.differsFrom((com.google.javascript.rhino.jstype.JSType)var60);
//     com.google.javascript.rhino.Node var83 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var85 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var86 = var83.useSourceInfoIfMissingFrom(var85);
//     com.google.javascript.rhino.Node var88 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var90 = com.google.javascript.rhino.IR.number(10.0d);
//     com.google.javascript.rhino.Node var91 = var88.useSourceInfoIfMissingFrom(var90);
//     com.google.javascript.rhino.Node var92 = com.google.javascript.rhino.IR.exprResult(var91);
//     java.lang.String var93 = var85.checkTreeEquals(var91);
//     com.google.javascript.rhino.jstype.FunctionType var94 = var4.createFunctionType((com.google.javascript.rhino.jstype.JSType)var60, var91);
//     boolean var95 = var91.isQualifiedName();
//     java.util.Iterator var96 = var0.getNeighborNodesIterator((java.lang.Object)var91);
// 
//   }

  public void test499() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test499"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    var2.setCrossModuleCodeMotion(false);
    var2.setLabelRenaming(true);
    java.util.Set var7 = null;
    var2.setStripTypePrefixes(var7);
    var1.initOptions(var2);
    boolean var10 = var1.acceptConstKeyword();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.check();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test500() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test500"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var4 = var1.useSourceInfoIfMissingFrom(var3);
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.exprResult(var4);
    boolean var6 = var4.isOptionalArg();
    boolean var7 = var4.isDo();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.number(10.0d);
    com.google.javascript.rhino.Node var12 = var9.useSourceInfoIfMissingFrom(var11);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.exprResult(var12);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.block(var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.and(var4, var14);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

}
