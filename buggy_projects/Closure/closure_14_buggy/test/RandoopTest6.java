
import junit.framework.*;

public class RandoopTest6 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test1"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var2 = var1.getNext();
    int var3 = var1.getSourceOffset();
    boolean var4 = var1.isAssign();
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var17 = var15.getBooleanProp((-1));
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    com.google.javascript.rhino.Node var24 = var21.removeFirstChild();
    com.google.javascript.rhino.Node var25 = var15.useSourceInfoFromForTree(var21);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.InputId var32 = com.google.javascript.jscomp.NodeUtil.getInputId(var29);
    com.google.javascript.rhino.jstype.JSType var33 = null;
    var29.setJSType(var33);
    boolean var35 = var29.isBlock();
    com.google.javascript.rhino.Node var36 = var29.getParent();
    boolean var37 = var29.isBreak();
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var40 = var39.getNext();
    com.google.javascript.rhino.InputId var41 = var39.getInputId();
    boolean var42 = var39.isGetProp();
    com.google.javascript.rhino.Node var43 = var29.clonePropsFrom(var39);
    com.google.javascript.rhino.Node var44 = new com.google.javascript.rhino.Node(0, var9, var15, var39);
    com.google.javascript.jscomp.ClosureCodingConvention var45 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var47 = var45.isConstantKey("2014/12/24 11:10");
    java.util.Collection var48 = var45.getAssertionFunctions();
    com.google.javascript.rhino.Node var52 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var53 = null;
    var52.setJSType(var53);
    boolean var55 = var52.isScript();
    com.google.javascript.rhino.Node var56 = var52.removeFirstChild();
    com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var60 = var59.isGetterDef();
    boolean var61 = var59.isAdd();
    com.google.javascript.rhino.Node var63 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var66 = var65.getNext();
    com.google.javascript.rhino.Node var67 = var63.srcrefTree(var65);
    boolean var68 = var65.isVarArgs();
    com.google.javascript.rhino.Node var70 = var65.getChildAtIndex(1);
    com.google.javascript.rhino.Node var72 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var74 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var75 = var74.getNext();
    com.google.javascript.rhino.Node var76 = var72.srcrefTree(var74);
    com.google.javascript.rhino.JSDocInfo var77 = var74.getJSDocInfo();
    com.google.javascript.rhino.Node var78 = var65.copyInformationFrom(var74);
    java.lang.String var79 = var78.toStringTree();
    com.google.javascript.rhino.Node var81 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var83 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var84 = var83.getNext();
    com.google.javascript.rhino.Node var85 = var81.srcrefTree(var83);
    boolean var87 = var83.getBooleanProp(100);
    int var88 = var83.getSideEffectFlags();
    boolean var89 = var83.isDefaultCase();
    com.google.javascript.rhino.Node var90 = new com.google.javascript.rhino.Node(1, var59, var78, var83);
    java.lang.String var91 = var45.extractClassNameIfProvide(var52, var83);
    com.google.javascript.rhino.Node var92 = var83.cloneNode();
    com.google.javascript.rhino.Node var93 = var44.copyInformationFrom(var83);
    com.google.javascript.rhino.Node var94 = var1.copyInformationFrom(var93);
    boolean var95 = var94.isNumber();
    boolean var96 = var94.isIf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var79.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);

  }

  public void test2() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test2"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var3 = var1.getBooleanProp((-1));
    var1.setSourceEncodedPosition(10);
    boolean var6 = var1.isContinue();
    boolean var7 = var1.isComma();
    boolean var8 = var1.isCase();
    com.google.javascript.rhino.Node var9 = var1.cloneTree();
    java.util.Collection var10 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test3() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test3"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    var18.unregisterPropertyOnType("Unversioned directory", var20);
    var18.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = var28.getNext();
    com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
    boolean var31 = var28.isVarArgs();
    boolean var32 = var28.isFor();
    boolean var33 = var28.isNumber();
    com.google.javascript.rhino.Node var34 = var28.getNext();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    com.google.javascript.rhino.Node var43 = var38.getChildAtIndex(1);
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.JSDocInfo var50 = var47.getJSDocInfo();
    com.google.javascript.rhino.Node var51 = var38.copyInformationFrom(var47);
    java.lang.Object var53 = null;
    var38.putProp(0, var53);
    com.google.javascript.rhino.JSTypeExpression var56 = new com.google.javascript.rhino.JSTypeExpression(var38, "()");
    com.google.javascript.rhino.jstype.StaticScope var57 = null;
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var59.unregisterPropertyOnType("Unversioned directory", var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    boolean var65 = var59.canPropertyBeDefined(var63, "BANG");
    com.google.javascript.rhino.jstype.JSType var66 = null;
    com.google.javascript.rhino.jstype.JSType[] var67 = new com.google.javascript.rhino.jstype.JSType[] { var66};
    com.google.javascript.rhino.Node var68 = var59.createParameters(var67);
    com.google.javascript.rhino.jstype.JSType var69 = var56.evaluate(var57, var59);
    com.google.javascript.rhino.jstype.JSType var70 = var69.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var71 = var70.dereference();
    boolean var72 = var70.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var73 = var18.createEnumType("STRING hi 0 [length: 2]\n", var28, var70);
    java.lang.String var74 = var73.getDisplayName();
    com.google.javascript.rhino.Node var75 = var73.getSource();
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.stringKey("hi!");
    boolean var78 = var10.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var73, var77);
    java.lang.String var79 = var73.getDisplayName();
    boolean var80 = var73.matchesStringContext();
    java.lang.Iterable var81 = var73.getCtorImplementedInterfaces();
    com.google.javascript.rhino.jstype.EnumElementType var82 = var73.toMaybeEnumElementType();
    com.google.javascript.rhino.jstype.ObjectType var83 = var73.getImplicitPrototype();
    java.util.Set var84 = var73.getPropertyNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var74.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var79.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test4() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test4"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var3 = var2.isGetterDef();
    boolean var4 = var2.isAdd();
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    boolean var11 = var8.isVarArgs();
    com.google.javascript.rhino.Node var13 = var8.getChildAtIndex(1);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.JSDocInfo var20 = var17.getJSDocInfo();
    com.google.javascript.rhino.Node var21 = var8.copyInformationFrom(var17);
    java.lang.String var22 = var21.toStringTree();
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    boolean var30 = var26.getBooleanProp(100);
    int var31 = var26.getSideEffectFlags();
    boolean var32 = var26.isDefaultCase();
    com.google.javascript.rhino.Node var33 = new com.google.javascript.rhino.Node(1, var2, var21, var26);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.name("null(null)");
    com.google.javascript.rhino.Node var36 = var2.copyInformationFrom(var35);
    var2.setQuotedString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var22.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test5() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test5"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.util.Collection var19 = var0.getIndirectlyDeclaredProperties();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    boolean var25 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var23);
    int var26 = var23.getLength();
    com.google.javascript.rhino.Node var27 = null;
    boolean var28 = var23.hasChild(var27);
    com.google.javascript.rhino.Node var29 = var21.useSourceInfoIfMissingFromForTree(var23);
    var23.setSourceFileForTesting("Unversioned directory");
    boolean var32 = var23.isWith();
    com.google.javascript.jscomp.CompilerOptions var33 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var34 = null;
    var33.setStripTypes(var34);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var36 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var37 = var36.getDirectedGraphNodes();
    java.util.List var38 = var36.getEdges();
    var33.setManageClosureDependencies(var38);
    boolean var40 = var33.isExternExportsEnabled();
    var33.setCheckCaja(false);
    var33.setGroupVariableDeclarations(true);
    java.util.Map var45 = var33.getDefineReplacements();
    var0.checkForCallingConventionDefiningCalls(var23, var45);
    boolean var48 = var0.isConstant("hi");
    java.lang.String var49 = var0.getAbstractMethodName();
    java.lang.String var50 = var0.getAbstractMethodName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "goog.abstractMethod"+ "'", var49.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "goog.abstractMethod"+ "'", var50.equals("goog.abstractMethod"));

  }

  public void test6() {}
//   public void test6() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test6"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     var1.unregisterPropertyOnType("Unversioned directory", var3);
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var8 = var7.getDependencies();
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
//     com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
//     boolean var11 = var10.hasAnyTemplateInternal();
//     java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
//     boolean var13 = var10.isEmptyType();
//     com.google.javascript.rhino.ErrorReporter var14 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     var15.unregisterPropertyOnType("Unversioned directory", var17);
//     com.google.javascript.rhino.jstype.JSType var19 = null;
//     com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var22 = var21.getDependencies();
//     com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
//     com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
//     boolean var26 = var24.removeProperty("null(null)");
//     var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
//     java.lang.String var28 = var10.getDisplayName();
//     com.google.javascript.rhino.JSDocInfo var29 = var10.getJSDocInfo();
//     com.google.javascript.rhino.jstype.ObjectType var30 = com.google.javascript.rhino.jstype.ObjectType.cast((com.google.javascript.rhino.jstype.JSType)var10);
//     com.google.javascript.rhino.jstype.Visitor var31 = null;
//     java.lang.Object var32 = var10.visit(var31);
// 
//   }

  public void test7() {}
//   public void test7() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test7"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var2 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
//     var1.forwardDeclareType("");
//     boolean var5 = var1.shouldTolerateUndefinedValues();
//     com.google.javascript.rhino.jstype.JSTypeNative var6 = null;
//     com.google.javascript.rhino.jstype.FunctionType var7 = var1.getNativeFunctionType(var6);
// 
//   }

  public void test8() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test8"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.Node.newString(1, "goog.abstractMethod");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test9() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test9"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    boolean var4 = var1.recordNoShadow();
    boolean var6 = var1.recordReturnDescription("()");
    boolean var8 = var1.recordFileOverview("{proxy:{1743833346}}");
    boolean var9 = var1.recordJavaDispatch();
    boolean var10 = var1.shouldParseDocumentation();
    boolean var12 = var1.addAuthor("INHERITED");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test10() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test10"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var6 = null;
    var5.setStripTypes(var6);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var9 = var8.getDirectedGraphNodes();
    java.util.List var10 = var8.getEdges();
    var5.setManageClosureDependencies(var10);
    boolean var12 = var5.isExternExportsEnabled();
    var5.setCheckCaja(false);
    var5.setRemoveUnusedPrototypeProperties(true);
    var5.setRemoveClosureAsserts(false);
    com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var21 = var20.recordExpose();
    boolean var23 = var20.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
    com.google.javascript.rhino.InputId var30 = com.google.javascript.jscomp.NodeUtil.getInputId(var27);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var27.setJSType(var31);
    com.google.javascript.rhino.JSDocInfo var33 = var20.build(var27);
    java.util.Collection var34 = var33.getAuthors();
    com.google.common.collect.ImmutableList var35 = var33.getTemplateTypeNames();
    var5.setSourceMapLocationMappings((java.util.List)var35);
    com.google.javascript.rhino.JSDocInfoBuilder var38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var39 = var38.recordExpose();
    boolean var41 = var38.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = var45.getNext();
    com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
    com.google.javascript.rhino.InputId var48 = com.google.javascript.jscomp.NodeUtil.getInputId(var45);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    var45.setJSType(var49);
    com.google.javascript.rhino.JSDocInfo var51 = var38.build(var45);
    java.lang.String var52 = var51.getFileOverview();
    java.util.Set var53 = var51.getModifies();
    java.util.List var54 = var51.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var55 = var51.getType();
    java.util.List var56 = var51.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var57 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var58 = null;
    var57.setStripTypes(var58);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var60 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var61 = var60.getDirectedGraphNodes();
    java.util.List var62 = var60.getEdges();
    var57.setManageClosureDependencies(var62);
    var57.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var68 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var69 = var68.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var70 = new com.google.javascript.jscomp.ComposeWarningsGuard(var69);
    com.google.javascript.jscomp.JSError var71 = null;
    com.google.javascript.jscomp.CheckLevel var72 = var70.level(var71);
    var57.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var70);
    var3.<com.google.javascript.jscomp.SourceFile>initModules((java.util.List)var35, var56, var57);
    com.google.javascript.jscomp.JSModule[] var75 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection)var56);
    com.google.javascript.jscomp.JSModuleGraph var76 = new com.google.javascript.jscomp.JSModuleGraph(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test11() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test11"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    java.lang.Iterable var2 = var1.siblings();
    var1.setCharno(1);
    java.lang.Iterable var5 = var1.siblings();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test12() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test12"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.isVarArgs();
    boolean var8 = var4.isOptionalArg();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(0, var4, var9);
    var9.setSourceEncodedPositionForTree(0);
    boolean var13 = var9.isBreak();
    java.lang.String var14 = var9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "RETURN 0"+ "'", var14.equals("RETURN 0"));

  }

  public void test13() {}
//   public void test13() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test13"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setChainCalls(true);
//     java.util.logging.Logger var3 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var4 = new com.google.javascript.jscomp.LoggerErrorManager(var3);
//     var0.setErrorHandler((com.google.javascript.jscomp.ErrorHandler)var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var4);
//     com.google.javascript.jscomp.JSSourceFile var7 = null;
//     com.google.javascript.jscomp.JSModule var9 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var10 = var9.getDependencies();
//     com.google.javascript.jscomp.ComposeWarningsGuard var11 = new com.google.javascript.jscomp.ComposeWarningsGuard(var10);
//     com.google.javascript.jscomp.JSModule[] var12 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection)var10);
//     com.google.javascript.jscomp.JSModuleGraph var13 = new com.google.javascript.jscomp.JSModuleGraph(var12);
//     com.google.javascript.jscomp.JSModuleGraph var14 = new com.google.javascript.jscomp.JSModuleGraph(var12);
//     com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var16 = null;
//     var15.setStripTypes(var16);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var19 = var18.getDirectedGraphNodes();
//     java.util.List var20 = var18.getEdges();
//     var15.setManageClosureDependencies(var20);
//     boolean var22 = var15.isExternExportsEnabled();
//     var15.setCheckCaja(false);
//     java.util.Set var25 = null;
//     var15.setReplaceStringsReservedStrings(var25);
//     com.google.javascript.jscomp.VariableRenamingPolicy var27 = null;
//     var15.setVariableRenaming(var27);
//     var15.setDefineToNumberLiteral("()", 306);
//     com.google.javascript.jscomp.Result var32 = var6.compile(var7, var12, var15);
// 
//   }

  public void test14() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test14"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setSourceMapOutputPath("()");
    var0.setSourceMapOutputPath("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    var0.setTightenTypes(false);
    com.google.javascript.jscomp.CompilerOptions var17 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var18 = null;
    var17.setStripTypes(var18);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var21 = var20.getDirectedGraphNodes();
    java.util.List var22 = var20.getEdges();
    var17.setManageClosureDependencies(var22);
    boolean var24 = var17.isExternExportsEnabled();
    var17.setCheckCaja(false);
    java.util.Set var27 = null;
    var17.setReplaceStringsReservedStrings(var27);
    com.google.javascript.rhino.JSDocInfoBuilder var30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var31 = var30.recordExpose();
    boolean var33 = var30.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    com.google.javascript.rhino.Node var39 = var35.srcrefTree(var37);
    com.google.javascript.rhino.InputId var40 = com.google.javascript.jscomp.NodeUtil.getInputId(var37);
    com.google.javascript.rhino.jstype.JSType var41 = null;
    var37.setJSType(var41);
    com.google.javascript.rhino.JSDocInfo var43 = var30.build(var37);
    java.lang.String var44 = var43.getFileOverview();
    java.util.Set var45 = var43.getModifies();
    var17.setReplaceStringsReservedStrings(var45);
    var0.setStripTypes(var45);
    var0.setSyntheticBlockEndMarker("function (): {1096500211}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test15() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test15"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    java.lang.String var57 = var56.getDisplayName();
    com.google.javascript.rhino.Node var58 = var56.getSource();
    com.google.javascript.rhino.ErrorReporter var59 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var59);
    com.google.javascript.rhino.jstype.JSType var62 = null;
    var60.unregisterPropertyOnType("Unversioned directory", var62);
    com.google.javascript.rhino.jstype.JSType var64 = null;
    com.google.javascript.jscomp.JSModule var66 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var67 = var66.getDependencies();
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.block(var67);
    com.google.javascript.rhino.jstype.FunctionType var69 = var60.createFunctionTypeWithVarArgs(var64, var67);
    boolean var70 = var69.hasAnyTemplateInternal();
    java.lang.Iterable var71 = var69.getAllExtendedInterfaces();
    boolean var72 = var56.isSubtype((com.google.javascript.rhino.jstype.JSType)var69);
    com.google.javascript.rhino.jstype.JSType var73 = var69.collapseUnion();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var57.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test16() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test16"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    com.google.javascript.rhino.JSTypeExpression var7 = null;
    boolean var9 = var1.recordThrowDescription(var7, "");
    com.google.javascript.rhino.JSDocInfoBuilder var11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var12 = var11.recordExpose();
    boolean var14 = var11.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    com.google.javascript.rhino.InputId var21 = com.google.javascript.jscomp.NodeUtil.getInputId(var18);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var18.setJSType(var22);
    com.google.javascript.rhino.JSDocInfo var24 = var11.build(var18);
    java.lang.String var25 = var24.getFileOverview();
    java.util.Set var26 = var24.getModifies();
    boolean var27 = var1.recordSuppressions(var26);
    boolean var28 = var1.recordInterface();
    boolean var30 = var1.hasParameter("");
    boolean var32 = var1.recordMeaning("(LABEL_NAME hi!)");
    boolean var33 = var1.recordInterface();
    var1.recordOriginalCommentString("module$ERROR");
    boolean var37 = var1.recordVersion("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);

  }

  public void test17() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test17"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    boolean var17 = var12.isRegExp();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test18() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test18"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var7.setJSType(var8);
    boolean var10 = var7.isScript();
    com.google.javascript.rhino.Node var11 = var7.removeFirstChild();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var15 = var14.isGetterDef();
    boolean var16 = var14.isAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    java.lang.String var34 = var33.toStringTree();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var42 = var38.getBooleanProp(100);
    int var43 = var38.getSideEffectFlags();
    boolean var44 = var38.isDefaultCase();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, var14, var33, var38);
    java.lang.String var46 = var0.extractClassNameIfProvide(var7, var38);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var49 = var48.isGetterDef();
    java.lang.String var53 = var48.toString(true, false, false);
    java.lang.Iterable var54 = var48.children();
    com.google.javascript.jscomp.CompilerOptions var55 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var56 = null;
    var55.setStripTypes(var56);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var58 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var59 = var58.getDirectedGraphNodes();
    java.util.List var60 = var58.getEdges();
    var55.setManageClosureDependencies(var60);
    boolean var62 = var55.isExternExportsEnabled();
    var55.setCheckCaja(false);
    var55.setGroupVariableDeclarations(true);
    java.util.Map var67 = var55.getDefineReplacements();
    var0.checkForCallingConventionDefiningCalls(var48, var67);
    java.lang.Object var70 = null;
    var48.putProp(0, var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var34.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "LABEL_NAME hi!"+ "'", var53.equals("LABEL_NAME hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test19() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test19"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    var3.reportCodeChange();
    com.google.javascript.jscomp.Scope var6 = var3.getTopScope();
    com.google.javascript.jscomp.JSError[] var7 = var3.getWarnings();
    com.google.javascript.jscomp.Result var8 = var3.getResult();
    com.google.javascript.jscomp.JSError[] var9 = var3.getErrors();
    com.google.javascript.jscomp.Region var12 = var3.getSourceRegion("function (): {489015863}", 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test20() {}
//   public void test20() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test20"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getDependencies();
//     com.google.javascript.jscomp.SourceAst var3 = null;
//     com.google.javascript.rhino.InputId var4 = null;
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3, var4, true);
//     com.google.javascript.jscomp.JSModule var7 = var6.getModule();
//     var1.add(var6);
//     com.google.javascript.jscomp.SourceFile var10 = com.google.javascript.jscomp.SourceFile.fromFile("()");
//     var1.addFirst(var10);
//     java.util.Set var12 = var1.getAllDependencies();
//     var1.removeAll();
//     com.google.javascript.jscomp.SourceAst var14 = null;
//     com.google.javascript.rhino.InputId var15 = null;
//     com.google.javascript.jscomp.CompilerInput var17 = new com.google.javascript.jscomp.CompilerInput(var14, var15, true);
//     com.google.javascript.jscomp.CompilerInput var20 = new com.google.javascript.jscomp.CompilerInput(var14, "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", false);
//     var1.addFirst(var20);
//     boolean var22 = var20.isExtern();
//     com.google.javascript.jscomp.SourceAst var23 = var20.getSourceAst();
//     java.lang.String var24 = var20.toString();
//     boolean var25 = var20.isExtern();
//     com.google.javascript.jscomp.JSModule var26 = var20.getModule();
//     java.lang.String var27 = var20.getCode();
// 
//   }

  public void test21() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test21"); }


    com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    int var5 = var3.getLineOfOffset(2);
    com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3);
    com.google.javascript.jscomp.SourceAst var7 = var6.getAst();
    com.google.javascript.jscomp.MessageFormatter var8 = null;
    java.util.logging.Logger var9 = null;
    com.google.javascript.jscomp.LoggerErrorManager var10 = new com.google.javascript.jscomp.LoggerErrorManager(var8, var9);
    com.google.javascript.jscomp.Compiler var11 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var10);
    com.google.javascript.jscomp.Scope var12 = var11.getTopScope();
    var11.reportCodeChange();
    com.google.javascript.jscomp.Scope var14 = var11.getTopScope();
    com.google.javascript.jscomp.JSError[] var15 = var11.getWarnings();
    java.lang.String var16 = var11.getAstDotGraph();
    java.lang.String var17 = var11.getAstDotGraph();
    var6.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var11);
    com.google.javascript.jscomp.SourceFile var19 = var6.getSourceFile();
    boolean var20 = var6.isExtern();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + ""+ "'", var16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + ""+ "'", var17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test22() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test22"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    java.util.Set var69 = var31.getPropertyNames();
    java.lang.Iterable var70 = var31.getOwnImplementedInterfaces();
    boolean var71 = var31.isConstructor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test23() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test23"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setRemoveUnusedVars(false);
    var0.setPrettyPrint(false);
    var0.setOptimizeReturns(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test24() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test24"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    boolean var57 = var56.matchesStringContext();
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var59.unregisterPropertyOnType("Unversioned directory", var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    com.google.javascript.jscomp.JSModule var65 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var66 = var65.getDependencies();
    com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.block(var66);
    com.google.javascript.rhino.jstype.FunctionType var68 = var59.createFunctionTypeWithVarArgs(var63, var66);
    boolean var69 = var68.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType.TypePair var70 = var56.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType)var68);
    boolean var72 = var56.isPropertyInExterns("goog.exportSymbol");
    boolean var73 = var56.isOrdinaryFunction();
    com.google.javascript.rhino.jstype.EnumElementType var74 = var56.getElementsType();
    com.google.javascript.rhino.jstype.JSType var75 = var56.getIndexType();
    com.google.javascript.rhino.jstype.EnumType var76 = var56.toMaybeEnumType();
    boolean var77 = var56.isInterface();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);

  }

  public void test25() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test25"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setRemoveUnusedLocalVars(false);
    var0.setCommonJSModulePathPrefix("null(null)");
    var0.setNameReferenceReportPath("");
    var0.setRemoveUnusedPrototypePropertiesInExterns(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test26() {}
//   public void test26() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test26"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = null;
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.propdef(var0, var1);
// 
//   }

  public void test27() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test27"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = var2.getNext();
    int var4 = var2.getSourceOffset();
    com.google.javascript.rhino.Node var5 = var2.cloneNode();
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    int var9 = var7.getSourceOffset();
    boolean var10 = var7.isAssignAdd();
    int var11 = var5.getIndexOfChild(var7);
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.InputId var15 = var13.getInputId();
    com.google.javascript.rhino.Node var16 = var5.useSourceInfoFrom(var13);
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    boolean var25 = var21.isOptionalArg();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var27 = new com.google.javascript.rhino.Node(0, var21, var26);
    boolean var28 = var26.isQualifiedName();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    com.google.javascript.rhino.Node var32 = new com.google.javascript.rhino.Node(153, var5, var29, 153, 1);
    boolean var33 = var5.isStringKey();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test28() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test28"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.isVarArgs();
    boolean var8 = var4.isOptionalArg();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(0, var4, var9);
    boolean var11 = var9.isInc();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.returnNode();
    boolean var13 = var12.isReturn();
    java.lang.String var14 = var9.checkTreeEquals(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.nullNode();
    boolean var16 = var15.isCatch();
    boolean var17 = var15.isWith();
    boolean var18 = var15.isBlock();
    com.google.javascript.rhino.Node[] var19 = new com.google.javascript.rhino.Node[] { var15};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.newNode(var9, var19);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test29() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test29"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var5 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var6 = var1.getErrorReporter();
    var1.incrementGeneration();
    com.google.javascript.rhino.JSDocInfoBuilder var9 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var10 = var9.recordExpose();
    boolean var12 = var9.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = var16.getNext();
    com.google.javascript.rhino.Node var18 = var14.srcrefTree(var16);
    com.google.javascript.rhino.InputId var19 = com.google.javascript.jscomp.NodeUtil.getInputId(var16);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    var16.setJSType(var20);
    com.google.javascript.rhino.JSDocInfo var22 = var9.build(var16);
    java.lang.String var23 = var22.getFileOverview();
    java.util.Set var24 = var22.getModifies();
    java.util.List var25 = var22.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var26 = var22.getType();
    java.util.List var27 = var22.getImplementedInterfaces();
    var1.setTemplateTypeNames(var27);
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    com.google.javascript.rhino.jstype.JSType var32 = null;
    var30.unregisterPropertyOnType("Unversioned directory", var32);
    var30.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var40 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = var40.getNext();
    com.google.javascript.rhino.Node var42 = var38.srcrefTree(var40);
    boolean var43 = var40.isVarArgs();
    boolean var44 = var40.isFor();
    boolean var45 = var40.isNumber();
    com.google.javascript.rhino.Node var46 = var40.getNext();
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    com.google.javascript.rhino.Node var52 = var48.srcrefTree(var50);
    boolean var53 = var50.isVarArgs();
    com.google.javascript.rhino.Node var55 = var50.getChildAtIndex(1);
    com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var60 = var59.getNext();
    com.google.javascript.rhino.Node var61 = var57.srcrefTree(var59);
    com.google.javascript.rhino.JSDocInfo var62 = var59.getJSDocInfo();
    com.google.javascript.rhino.Node var63 = var50.copyInformationFrom(var59);
    java.lang.Object var65 = null;
    var50.putProp(0, var65);
    com.google.javascript.rhino.JSTypeExpression var68 = new com.google.javascript.rhino.JSTypeExpression(var50, "()");
    com.google.javascript.rhino.jstype.StaticScope var69 = null;
    com.google.javascript.rhino.ErrorReporter var70 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var70);
    com.google.javascript.rhino.jstype.JSType var73 = null;
    var71.unregisterPropertyOnType("Unversioned directory", var73);
    com.google.javascript.rhino.jstype.JSType var75 = null;
    boolean var77 = var71.canPropertyBeDefined(var75, "BANG");
    com.google.javascript.rhino.jstype.JSType var78 = null;
    com.google.javascript.rhino.jstype.JSType[] var79 = new com.google.javascript.rhino.jstype.JSType[] { var78};
    com.google.javascript.rhino.Node var80 = var71.createParameters(var79);
    com.google.javascript.rhino.jstype.JSType var81 = var68.evaluate(var69, var71);
    com.google.javascript.rhino.jstype.JSType var82 = var81.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var83 = var82.dereference();
    boolean var84 = var82.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var85 = var30.createEnumType("STRING hi 0 [length: 2]\n", var40, var82);
    com.google.javascript.rhino.JSDocInfo var86 = var85.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var87 = var85.getElementsType();
    com.google.javascript.rhino.jstype.JSType var88 = null;
    boolean var89 = var87.isEquivalentTo(var88);
    boolean var90 = var87.matchesStringContext();
    boolean var91 = var87.canBeCalled();
    com.google.javascript.rhino.jstype.JSType var92 = var1.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType)var87);
    boolean var93 = var87.matchesNumberContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);

  }

  public void test30() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test30"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var18 = var14.hasType();
    var14.setDeprecated(false);
    java.util.Collection var21 = var14.getMarkers();
    java.util.Collection var22 = var14.getMarkers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test31() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test31"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    var0.setAliasKeywords(false);
    com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var5 = null;
    var0.setAliasTransformationHandler(var5);
    com.google.javascript.rhino.ErrorReporter var7 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    var8.unregisterPropertyOnType("Unversioned directory", var10);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    com.google.javascript.jscomp.JSModule var14 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var15 = var14.getDependencies();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.block(var15);
    com.google.javascript.rhino.jstype.FunctionType var17 = var8.createFunctionTypeWithVarArgs(var12, var15);
    var0.setReplaceStringsFunctionDescriptions(var15);
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var20.unregisterPropertyOnType("Unversioned directory", var22);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    com.google.javascript.jscomp.JSModule var26 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var27 = var26.getDependencies();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.block(var27);
    com.google.javascript.rhino.jstype.FunctionType var29 = var20.createFunctionTypeWithVarArgs(var24, var27);
    boolean var30 = var29.hasAnyTemplateInternal();
    java.lang.Iterable var31 = var29.getAllExtendedInterfaces();
    boolean var32 = var29.isEmptyType();
    java.util.Set var33 = var29.getOwnPropertyNames();
    var0.setExtraAnnotationNames(var33);
    com.google.javascript.jscomp.JSModule[] var35 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection)var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test32() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test32"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var7 = null;
    var6.setResolveMode(var7);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var9 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var6);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var10 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var6);
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
    boolean var17 = var14.isVarArgs();
    com.google.javascript.rhino.Node var19 = var14.getChildAtIndex(1);
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
    com.google.javascript.rhino.JSDocInfo var26 = var23.getJSDocInfo();
    com.google.javascript.rhino.Node var27 = var14.copyInformationFrom(var23);
    java.lang.Object var29 = null;
    var14.putProp(0, var29);
    com.google.javascript.rhino.JSTypeExpression var32 = new com.google.javascript.rhino.JSTypeExpression(var14, "()");
    com.google.javascript.rhino.jstype.StaticScope var33 = null;
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    com.google.javascript.rhino.jstype.JSType var37 = null;
    var35.unregisterPropertyOnType("Unversioned directory", var37);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    boolean var41 = var35.canPropertyBeDefined(var39, "BANG");
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.Node var44 = var35.createParameters(var43);
    com.google.javascript.rhino.jstype.JSType var45 = var32.evaluate(var33, var35);
    com.google.javascript.rhino.jstype.JSType var46 = var45.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var47 = var46.dereference();
    java.util.Collection var48 = var6.getDirectImplementors(var47);
    com.google.javascript.rhino.jstype.JSType var53 = var1.getType((com.google.javascript.rhino.jstype.StaticScope)var47, "hi!", "BANG 0\n    STRING hi 0 [length: 2]\n", 10, 10);
    com.google.javascript.rhino.ErrorReporter var54 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var54);
    com.google.javascript.rhino.jstype.JSType var57 = null;
    var55.unregisterPropertyOnType("Unversioned directory", var57);
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.jscomp.JSModule var61 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var62 = var61.getDependencies();
    com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.block(var62);
    com.google.javascript.rhino.jstype.FunctionType var64 = var55.createFunctionTypeWithVarArgs(var59, var62);
    boolean var66 = var64.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var67 = var64.toMaybeEnumType();
    var1.resolveTypesInScope((com.google.javascript.rhino.jstype.StaticScope)var64);
    com.google.javascript.rhino.jstype.FunctionBuilder var69 = new com.google.javascript.rhino.jstype.FunctionBuilder(var1);
    com.google.javascript.rhino.jstype.ObjectType var70 = var1.createAnonymousObjectType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test33() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test33"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var11 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var12 = var11.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var13 = new com.google.javascript.jscomp.ComposeWarningsGuard(var12);
    com.google.javascript.jscomp.JSError var14 = null;
    com.google.javascript.jscomp.CheckLevel var15 = var13.level(var14);
    var0.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var13);
    com.google.javascript.jscomp.DiagnosticType var19 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var21 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var22 = com.google.javascript.jscomp.JSError.make(var19, var21);
    int var23 = var22.getCharno();
    int var24 = var22.getLineNumber();
    com.google.javascript.jscomp.CheckLevel var25 = var13.level(var22);
    com.google.javascript.jscomp.CompilerOptions var26 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var27 = null;
    var26.setStripTypes(var27);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var29 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var30 = var29.getDirectedGraphNodes();
    java.util.List var31 = var29.getEdges();
    var26.setManageClosureDependencies(var31);
    var26.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var37 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var38 = var37.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var39 = new com.google.javascript.jscomp.ComposeWarningsGuard(var38);
    com.google.javascript.jscomp.JSError var40 = null;
    com.google.javascript.jscomp.CheckLevel var41 = var39.level(var40);
    var26.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var39);
    com.google.javascript.jscomp.DiagnosticType var45 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var47 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var48 = com.google.javascript.jscomp.JSError.make(var45, var47);
    int var49 = var48.getCharno();
    int var50 = var48.getLineNumber();
    com.google.javascript.jscomp.CheckLevel var51 = var39.level(var48);
    com.google.javascript.jscomp.DiagnosticType var54 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var56 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var57 = com.google.javascript.jscomp.JSError.make(var54, var56);
    int var58 = var57.getCharno();
    com.google.javascript.jscomp.CheckLevel var59 = var57.getDefaultLevel();
    com.google.javascript.jscomp.CheckLevel var60 = var39.level(var57);
    com.google.javascript.jscomp.CheckLevel var61 = var13.level(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);

  }

  public void test34() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test34"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    boolean var10 = var5.isScript();
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    boolean var18 = var15.isVarArgs();
    boolean var19 = var15.isArrayLit();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var22 = var21.isGetterDef();
    var21.putIntProp((-1), 10);
    var15.addChildrenToFront(var21);
    int var27 = var21.getLength();
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
    com.google.javascript.rhino.Node var34 = var31.removeFirstChild();
    com.google.javascript.rhino.Node var35 = var21.useSourceInfoFromForTree(var31);
    boolean var36 = var21.isDebugger();
    var21.setType(0);
    var5.putProp(2, (java.lang.Object)var21);
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("BANG");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.sub(var21, var41);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test35() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test35"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setTransformAMDToCJSModules(false);
    var0.setInlineConstantVars(true);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var14 = var0.getLanguageIn();
    com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var16 = null;
    var15.setStripTypes(var16);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var19 = var18.getDirectedGraphNodes();
    java.util.List var20 = var18.getEdges();
    var15.setManageClosureDependencies(var20);
    var15.setDevirtualizePrototypeMethods(true);
    var15.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions var26 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var27 = null;
    var26.setBrokenClosureRequiresLevel(var27);
    var26.setLocale("");
    var26.setLineBreak(false);
    com.google.javascript.jscomp.CompilerOptions var33 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var34 = null;
    var33.setStripTypes(var34);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var36 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var37 = var36.getDirectedGraphNodes();
    java.util.List var38 = var36.getEdges();
    var33.setManageClosureDependencies(var38);
    boolean var40 = var33.isExternExportsEnabled();
    var33.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var45 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var47 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var48 = com.google.javascript.jscomp.JSError.make(var45, var47);
    int var49 = var48.getCharno();
    com.google.javascript.jscomp.CheckLevel var50 = var48.getDefaultLevel();
    var33.setReportUnknownTypes(var50);
    var26.setBrokenClosureRequiresLevel(var50);
    var15.setCheckUnreachableCode(var50);
    var0.setReportUnknownTypes(var50);
    com.google.javascript.jscomp.JSModule var56 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var57 = var56.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var58 = new com.google.javascript.jscomp.ComposeWarningsGuard(var57);
    com.google.javascript.jscomp.DiagnosticGroup var59 = null;
    boolean var60 = var58.enables(var59);
    var0.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var58);
    var0.setLabelRenaming(true);
    var0.setInlineConstantVars(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test36() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test36"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.nullNode();
    java.util.Set var1 = var0.getDirectives();
    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.NodeUtil.newExpr(var0);
    boolean var3 = var2.isNull();
    boolean var4 = var2.isNE();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setString("module$InputId: InputId: ");
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test37() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test37"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newNumber(0.0d, 153, 153);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test38() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test38"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getDependencies();
    int var3 = var1.getDepth();
    var1.clearAsts();
    com.google.javascript.rhino.JSDocInfoBuilder var6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var7 = var6.recordExpose();
    boolean var8 = var6.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var10 = null;
    boolean var11 = var6.recordParameter("Unversioned directory", var10);
    com.google.javascript.rhino.JSTypeExpression var12 = null;
    boolean var14 = var6.recordThrowDescription(var12, "");
    com.google.javascript.jscomp.SourceFile var19 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    var6.markName("", (com.google.javascript.rhino.jstype.StaticSourceFile)var19, 0, 0);
    java.io.Reader var23 = var19.getCodeReader();
    var1.add(var19);
    int var25 = var1.getDepth();
    com.google.javascript.jscomp.Compiler var26 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var27 = var26.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var28 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var26);
    com.google.javascript.jscomp.ErrorManager var29 = var26.getErrorManager();
    var1.sortInputsByDeps(var26);
    boolean var31 = var26.hasErrors();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var26.check();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + ""+ "'", var27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test39() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test39"); }


    com.google.javascript.jscomp.AstValidator var0 = new com.google.javascript.jscomp.AstValidator();
    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    com.google.javascript.rhino.JSDocInfo var7 = var4.getJSDocInfo();
    boolean var8 = var4.isSwitch();
    boolean var9 = var4.isIf();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var13 = var11.getBooleanProp((-1));
    var11.setSourceEncodedPosition(10);
    boolean var16 = var11.isContinue();
    boolean var17 = var11.isComma();
    boolean var18 = var11.isCase();
    com.google.javascript.rhino.Node var19 = var11.cloneTree();
    com.google.javascript.rhino.Node var20 = var4.useSourceInfoIfMissingFromForTree(var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.validateExpression(var11);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test40() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test40"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.continueNode();
    boolean var1 = var0.isCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test41() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test41"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.resetWarningsGuard();
    var0.setMarkAsCompiled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test42() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test42"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var12 = null;
    var0.setSourceMapDetailLevel(var12);
    var0.setCollapseAnonymousFunctions(false);
    var0.setClosurePass(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test43() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test43"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var3 = var1.getBooleanProp((-1));
    var1.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var7 = new com.google.javascript.rhino.JSTypeExpression(var1, "goog.abstractMethod");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.NodeUtil.newExpr(var1);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test44() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test44"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    com.google.javascript.rhino.JSTypeExpression var7 = null;
    boolean var9 = var1.recordThrowDescription(var7, "");
    com.google.javascript.rhino.JSDocInfoBuilder var11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var12 = var11.recordExpose();
    boolean var14 = var11.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    com.google.javascript.rhino.InputId var21 = com.google.javascript.jscomp.NodeUtil.getInputId(var18);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var18.setJSType(var22);
    com.google.javascript.rhino.JSDocInfo var24 = var11.build(var18);
    java.lang.String var25 = var24.getFileOverview();
    java.util.Set var26 = var24.getModifies();
    boolean var27 = var1.recordSuppressions(var26);
    boolean var28 = var1.recordInterface();
    boolean var30 = var1.hasParameter("");
    boolean var32 = var1.recordMeaning("(LABEL_NAME hi!)");
    boolean var33 = var1.recordHiddenness();
    boolean var34 = var1.recordJavaDispatch();
    boolean var36 = var1.recordVersion("module$ERROR");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);

  }

  public void test45() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test45"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var15 = var13.recordExterns();
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    boolean var22 = var19.isVarArgs();
    boolean var23 = var19.isArrayLit();
    com.google.javascript.rhino.Node var24 = var19.getNext();
    var13.markTypeNode(var19, 10, 100, 0, 0, false);
    com.google.javascript.rhino.JSDocInfoBuilder var32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var33 = var32.recordExpose();
    boolean var34 = var32.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var36 = null;
    boolean var37 = var32.recordParameter("Unversioned directory", var36);
    com.google.javascript.rhino.JSTypeExpression var38 = null;
    boolean var40 = var32.recordThrowDescription(var38, "");
    com.google.javascript.rhino.JSDocInfoBuilder var42 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var43 = var42.recordExpose();
    boolean var45 = var42.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = var49.getNext();
    com.google.javascript.rhino.Node var51 = var47.srcrefTree(var49);
    com.google.javascript.rhino.InputId var52 = com.google.javascript.jscomp.NodeUtil.getInputId(var49);
    com.google.javascript.rhino.jstype.JSType var53 = null;
    var49.setJSType(var53);
    com.google.javascript.rhino.JSDocInfo var55 = var42.build(var49);
    java.lang.String var56 = var55.getFileOverview();
    java.util.Set var57 = var55.getModifies();
    boolean var58 = var32.recordSuppressions(var57);
    boolean var59 = var13.recordModifies(var57);
    var0.setStripNamePrefixes(var57);
    var0.setManageClosureDependencies(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);

  }

  public void test46() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test46"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var17 = var14.hasParameter("LABEL_NAME hi!");
    com.google.javascript.rhino.JSDocInfo.Visibility var18 = var14.getVisibility();
    boolean var19 = var14.isIdGenerator();
    boolean var20 = var14.hasEnumParameterType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test47() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test47"); }


    com.google.javascript.rhino.jstype.TernaryValue var1 = com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test48() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test48"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setTransformAMDToCJSModules(false);
    var0.setAmbiguateProperties(false);
    boolean var14 = var0.assumeStrictThis();
    var0.setMoveFunctionDeclarations(false);
    com.google.javascript.jscomp.PropertyRenamingPolicy var17 = null;
    var0.setPropertyRenaming(var17);
    var0.setUnaliasableGlobals("goog.exportProperty");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test49() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test49"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    java.lang.String var59 = var58.getReferenceName();
    boolean var60 = var58.isObject();
    com.google.javascript.rhino.jstype.FunctionType var61 = var58.getConstructor();
    boolean var62 = var58.matchesNumberContext();
    com.google.javascript.rhino.jstype.ObjectType.Property var64 = var58.getSlot("goog.exportSymbol");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var59.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);

  }

  public void test50() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test50"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    var0.setManageClosureDependencies(var13);
    var0.setRemoveClosureAsserts(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setAmbiguateProperties(true);
    var0.setGroupVariableDeclarations(true);
    var0.enableRuntimeTypeCheck("goog.abstractMethod");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test51() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test51"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    boolean var16 = var10.isEnumElementType();
    boolean var17 = var10.isEnumElementType();
    boolean var19 = var10.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    boolean var20 = var10.isStringValueType();
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    var23.unregisterPropertyOnType("Unversioned directory", var25);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.jscomp.JSModule var29 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var30 = var29.getDependencies();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.block(var30);
    com.google.javascript.rhino.jstype.FunctionType var32 = var23.createFunctionTypeWithVarArgs(var27, var30);
    boolean var34 = var32.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var35 = var32.toMaybeEnumType();
    boolean var36 = var32.isNumber();
    java.lang.Iterable var37 = var32.getImplementedInterfaces();
    com.google.javascript.jscomp.ClosureCodingConvention var38 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var40 = var38.isConstantKey("2014/12/24 11:10");
    java.util.Collection var41 = var38.getAssertionFunctions();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    var45.setJSType(var46);
    boolean var48 = var45.isScript();
    com.google.javascript.rhino.Node var49 = var45.removeFirstChild();
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var53 = var52.isGetterDef();
    boolean var54 = var52.isAdd();
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isVarArgs();
    com.google.javascript.rhino.Node var63 = var58.getChildAtIndex(1);
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.JSDocInfo var70 = var67.getJSDocInfo();
    com.google.javascript.rhino.Node var71 = var58.copyInformationFrom(var67);
    java.lang.String var72 = var71.toStringTree();
    com.google.javascript.rhino.Node var74 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var76 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var77 = var76.getNext();
    com.google.javascript.rhino.Node var78 = var74.srcrefTree(var76);
    boolean var80 = var76.getBooleanProp(100);
    int var81 = var76.getSideEffectFlags();
    boolean var82 = var76.isDefaultCase();
    com.google.javascript.rhino.Node var83 = new com.google.javascript.rhino.Node(1, var52, var71, var76);
    java.lang.String var84 = var38.extractClassNameIfProvide(var45, var76);
    com.google.javascript.rhino.Node var86 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var87 = var86.isGetterDef();
    boolean var88 = var86.isNE();
    boolean var89 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var86);
    com.google.javascript.rhino.Node var90 = var45.clonePropsFrom(var86);
    boolean var91 = var10.defineDeclaredProperty("BANG 0\n    STRING hi 0 [length: 2]\n", (com.google.javascript.rhino.jstype.JSType)var32, var86);
    boolean var92 = var32.hasInstanceType();
    com.google.javascript.rhino.Node var93 = var32.getSource();
    com.google.javascript.rhino.jstype.ObjectType var94 = var32.getTypeOfThis();
    com.google.javascript.rhino.jstype.ObjectType var95 = var94.getParentScope();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var72.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);

  }

  public void test52() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test52"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setInlineLocalVariables(false);
    var0.setFoldConstants(false);
    var0.setAssumeStrictThis(false);
    boolean var15 = var0.assumeStrictThis();
    var0.setOutputCharset("\u001B[35mWARNING\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var19 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    var19.clearEdgeAnnotations();
    java.lang.Iterable var21 = var19.getDirectedGraphNodes();
    java.util.List var22 = var19.getEdges();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var23 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithEdgeAnnotations();
    com.google.javascript.jscomp.ClosureCodingConvention var24 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var26 = var24.isConstantKey("2014/12/24 11:10");
    java.util.Collection var27 = var24.getAssertionFunctions();
    boolean var29 = var24.isConstant("Unversioned directory");
    com.google.javascript.jscomp.graph.GraphNode var30 = var23.createNode((java.lang.Object)var29);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var31 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var33 = var31.hasNode((java.lang.Object)1);
    com.google.javascript.rhino.JSDocInfoBuilder var35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var36 = var35.recordExpose();
    boolean var38 = var35.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var40 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var43 = var42.getNext();
    com.google.javascript.rhino.Node var44 = var40.srcrefTree(var42);
    com.google.javascript.rhino.InputId var45 = com.google.javascript.jscomp.NodeUtil.getInputId(var42);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    var42.setJSType(var46);
    com.google.javascript.rhino.JSDocInfo var48 = var35.build(var42);
    java.lang.String var49 = var48.getFileOverview();
    java.util.Set var50 = var48.getModifies();
    java.util.List var51 = var48.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var52 = var48.getType();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var53 = var31.createDirectedGraphNode((java.lang.Object)var48);
    java.util.List var54 = var23.getNeighborNodes(var53);
    java.util.List var55 = var19.getNeighborNodes(var53);
    var19.clearEdgeAnnotations();
    java.util.List var57 = var19.getEdges();
    var0.setReplaceStringsConfiguration("BANG 0 [source_file: Unversioned directory]", var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test53() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test53"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    var1.removeAll();
    java.lang.String var3 = var1.getName();
    com.google.javascript.jscomp.SourceAst var4 = null;
    com.google.javascript.rhino.InputId var5 = null;
    com.google.javascript.jscomp.CompilerInput var7 = new com.google.javascript.jscomp.CompilerInput(var4, var5, true);
    com.google.javascript.jscomp.SourceAst var8 = var7.getAst();
    com.google.javascript.jscomp.JSModule var9 = null;
    var7.setModule(var9);
    com.google.javascript.jscomp.SourceAst var11 = var7.getSourceAst();
    com.google.javascript.jscomp.SourceAst var12 = var7.getSourceAst();
    com.google.javascript.jscomp.JSModule var14 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var15 = var14.getDependencies();
    com.google.javascript.jscomp.SourceAst var16 = null;
    com.google.javascript.rhino.InputId var17 = null;
    com.google.javascript.jscomp.CompilerInput var19 = new com.google.javascript.jscomp.CompilerInput(var16, var17, true);
    com.google.javascript.jscomp.JSModule var20 = var19.getModule();
    var14.add(var19);
    com.google.javascript.jscomp.SourceFile var23 = com.google.javascript.jscomp.SourceFile.fromFile("()");
    var14.addFirst(var23);
    java.util.Set var25 = var14.getAllDependencies();
    var14.removeAll();
    com.google.javascript.jscomp.SourceAst var27 = null;
    com.google.javascript.rhino.InputId var28 = null;
    com.google.javascript.jscomp.CompilerInput var30 = new com.google.javascript.jscomp.CompilerInput(var27, var28, true);
    com.google.javascript.jscomp.CompilerInput var33 = new com.google.javascript.jscomp.CompilerInput(var27, "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", false);
    var14.addFirst(var33);
    com.google.javascript.jscomp.SourceAst var35 = null;
    com.google.javascript.rhino.InputId var36 = null;
    com.google.javascript.jscomp.CompilerInput var38 = new com.google.javascript.jscomp.CompilerInput(var35, var36, true);
    com.google.javascript.jscomp.SourceAst var39 = var38.getAst();
    com.google.javascript.jscomp.JSModule var40 = null;
    var38.setModule(var40);
    var14.add(var38);
    var7.setModule(var14);
    com.google.javascript.jscomp.SourceFile var47 = com.google.javascript.jscomp.SourceFile.fromCode("2014/12/24 11:10", "null(null)", "STRING hi 0 [length: 2]\n");
    var14.add(var47);
    var1.addFirst(var47);
    com.google.javascript.jscomp.MessageFormatter var50 = null;
    java.util.logging.Logger var51 = null;
    com.google.javascript.jscomp.LoggerErrorManager var52 = new com.google.javascript.jscomp.LoggerErrorManager(var50, var51);
    com.google.javascript.jscomp.Compiler var53 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var52);
    int var54 = var53.getWarningCount();
    var1.sortInputsByDeps(var53);
    boolean var56 = var53.isIdeMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Unversioned directory"+ "'", var3.equals("Unversioned directory"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test54() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test54"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.JSError[] var4 = var3.getMessages();
    com.google.javascript.jscomp.Region var7 = var3.getSourceRegion("2014/12/24 11:10", 0);
    com.google.javascript.jscomp.Scope var8 = var3.getTopScope();
    double var9 = var3.getProgress();
    com.google.javascript.jscomp.CompilerOptions var10 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var11 = null;
    var10.setStripTypes(var11);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var13 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var14 = var13.getDirectedGraphNodes();
    java.util.List var15 = var13.getEdges();
    var10.setManageClosureDependencies(var15);
    boolean var17 = var10.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var18 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var19 = null;
    var18.setStripTypes(var19);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var22 = var21.getDirectedGraphNodes();
    java.util.List var23 = var21.getEdges();
    var18.setManageClosureDependencies(var23);
    var10.setManageClosureDependencies(var23);
    var10.setRemoveClosureAsserts(true);
    var10.setDebugFunctionSideEffectsPath("STRING hi 0 [length: 2]\n");
    var10.setRemoveClosureAsserts(true);
    com.google.common.collect.Multimap var32 = null;
    var10.setCustomPasses(var32);
    com.google.javascript.jscomp.DefaultPassConfig var34 = new com.google.javascript.jscomp.DefaultPassConfig(var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.setPassConfig((com.google.javascript.jscomp.PassConfig)var34);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test55() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test55"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    java.io.PrintStream var5 = null;
    com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler(var5);
    com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var8 = null;
    var7.setStripTypes(var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var11 = var10.getDirectedGraphNodes();
    java.util.List var12 = var10.getEdges();
    var7.setManageClosureDependencies(var12);
    com.google.javascript.rhino.JSDocInfoBuilder var15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var16 = var15.recordExpose();
    boolean var18 = var15.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.InputId var25 = com.google.javascript.jscomp.NodeUtil.getInputId(var22);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var22.setJSType(var26);
    com.google.javascript.rhino.JSDocInfo var28 = var15.build(var22);
    java.lang.String var29 = var28.getFileOverview();
    java.util.Set var30 = var28.getModifies();
    java.util.List var31 = var28.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var32 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var33 = null;
    var32.setStripTypes(var33);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var36 = var35.getDirectedGraphNodes();
    java.util.List var37 = var35.getEdges();
    var32.setManageClosureDependencies(var37);
    var32.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var32.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var44 = null;
    var32.setSourceMapDetailLevel(var44);
    var6.<com.google.javascript.jscomp.SourceFile>initModules(var12, var31, var32);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.block(var31);
    com.google.javascript.jscomp.CompilerOptions var48 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var49 = null;
    var48.setStripTypes(var49);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var52 = var51.getDirectedGraphNodes();
    java.util.List var53 = var51.getEdges();
    var48.setManageClosureDependencies(var53);
    boolean var55 = var48.isExternExportsEnabled();
    var48.setCheckCaja(false);
    var48.setRemoveUnusedPrototypeProperties(true);
    var48.setRemoveClosureAsserts(false);
    com.google.javascript.rhino.JSDocInfoBuilder var63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var64 = var63.recordExpose();
    boolean var66 = var63.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var68 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var70 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var71 = var70.getNext();
    com.google.javascript.rhino.Node var72 = var68.srcrefTree(var70);
    com.google.javascript.rhino.InputId var73 = com.google.javascript.jscomp.NodeUtil.getInputId(var70);
    com.google.javascript.rhino.jstype.JSType var74 = null;
    var70.setJSType(var74);
    com.google.javascript.rhino.JSDocInfo var76 = var63.build(var70);
    java.util.Collection var77 = var76.getAuthors();
    com.google.common.collect.ImmutableList var78 = var76.getTemplateTypeNames();
    var48.setSourceMapLocationMappings((java.util.List)var78);
    com.google.javascript.jscomp.CompilerOptions var80 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var81 = null;
    var80.setStripTypes(var81);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var83 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var84 = var83.getDirectedGraphNodes();
    java.util.List var85 = var83.getEdges();
    var80.setManageClosureDependencies(var85);
    var80.setDevirtualizePrototypeMethods(true);
    var80.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var91 = var80.getTweakProcessing();
    boolean var92 = var80.getInferTypes();
    var3.<com.google.javascript.jscomp.SourceFile>initModules(var31, (java.util.List)var78, var80);
    var80.setAliasKeywords(false);
    var80.setOutputCharset("BANG 0");
    var80.setCollapseProperties(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test56() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test56"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var5 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var6 = var1.getErrorReporter();
    var1.incrementGeneration();
    com.google.javascript.rhino.jstype.JSTypeNative[] var8 = com.google.javascript.rhino.jstype.JSTypeNative.values();
    com.google.javascript.rhino.jstype.JSType var9 = var1.createUnionType(var8);
    var1.clearTemplateTypeNames();
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
    boolean var17 = var14.isVarArgs();
    com.google.javascript.rhino.Node var19 = var14.getChildAtIndex(1);
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
    com.google.javascript.rhino.JSDocInfo var26 = var23.getJSDocInfo();
    com.google.javascript.rhino.Node var27 = var14.copyInformationFrom(var23);
    java.lang.Object var29 = null;
    var14.putProp(0, var29);
    com.google.javascript.rhino.JSTypeExpression var32 = new com.google.javascript.rhino.JSTypeExpression(var14, "()");
    com.google.javascript.rhino.jstype.StaticScope var33 = null;
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    com.google.javascript.rhino.jstype.JSType var37 = null;
    var35.unregisterPropertyOnType("Unversioned directory", var37);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    boolean var41 = var35.canPropertyBeDefined(var39, "BANG");
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.Node var44 = var35.createParameters(var43);
    com.google.javascript.rhino.jstype.JSType var45 = var32.evaluate(var33, var35);
    com.google.javascript.rhino.jstype.JSType var46 = var45.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var47 = var46.dereference();
    boolean var48 = var47.isUnknownType();
    com.google.javascript.rhino.jstype.JSType var49 = var47.getParameterType();
    com.google.javascript.rhino.jstype.ObjectType var50 = var47.dereference();
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var53 = null;
    var52.setResolveMode(var53);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var55 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var52);
    com.google.javascript.rhino.ErrorReporter var56 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var56);
    com.google.javascript.rhino.jstype.JSType var59 = null;
    var57.unregisterPropertyOnType("Unversioned directory", var59);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    com.google.javascript.jscomp.JSModule var63 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var64 = var63.getDependencies();
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.block(var64);
    com.google.javascript.rhino.jstype.FunctionType var66 = var57.createFunctionTypeWithVarArgs(var61, var64);
    boolean var67 = var66.hasAnyTemplateInternal();
    java.lang.Iterable var68 = var66.getAllExtendedInterfaces();
    boolean var69 = var66.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var70 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var70);
    com.google.javascript.rhino.jstype.JSType var73 = null;
    var71.unregisterPropertyOnType("Unversioned directory", var73);
    com.google.javascript.rhino.jstype.JSType var75 = null;
    com.google.javascript.jscomp.JSModule var77 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var78 = var77.getDependencies();
    com.google.javascript.rhino.Node var79 = com.google.javascript.rhino.IR.block(var78);
    com.google.javascript.rhino.jstype.FunctionType var80 = var71.createFunctionTypeWithVarArgs(var75, var78);
    boolean var82 = var80.removeProperty("null(null)");
    var66.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var80);
    com.google.javascript.rhino.jstype.JSType var85 = var52.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType)var80, "hi!");
    boolean var86 = var80.matchesInt32Context();
    var80.clearCachedValues();
    com.google.javascript.jscomp.JSModule var89 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var90 = var89.getDependencies();
    com.google.javascript.rhino.Node var91 = com.google.javascript.rhino.IR.block(var90);
    com.google.javascript.rhino.jstype.JSType var92 = var1.createFunctionTypeWithVarArgs(var50, (com.google.javascript.rhino.jstype.JSType)var80, var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test57() {}
//   public void test57() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test57"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.ErrorReporter var3 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     var4.unregisterPropertyOnType("Unversioned directory", var6);
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.jscomp.JSModule var10 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var11 = var10.getDependencies();
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.block(var11);
//     com.google.javascript.rhino.jstype.FunctionType var13 = var4.createFunctionTypeWithVarArgs(var8, var11);
//     com.google.javascript.rhino.ErrorReporter var14 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var16 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var15);
//     com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var21 = var20.getNext();
//     com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
//     boolean var23 = var20.isVarArgs();
//     com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var30 = var29.getNext();
//     com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
//     com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
//     com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
//     java.lang.Object var35 = null;
//     var20.putProp(0, var35);
//     com.google.javascript.rhino.JSTypeExpression var38 = new com.google.javascript.rhino.JSTypeExpression(var20, "()");
//     com.google.javascript.rhino.jstype.StaticScope var39 = null;
//     com.google.javascript.rhino.ErrorReporter var40 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40);
//     com.google.javascript.rhino.jstype.JSType var43 = null;
//     var41.unregisterPropertyOnType("Unversioned directory", var43);
//     com.google.javascript.rhino.jstype.JSType var45 = null;
//     boolean var47 = var41.canPropertyBeDefined(var45, "BANG");
//     com.google.javascript.rhino.jstype.JSType var48 = null;
//     com.google.javascript.rhino.jstype.JSType[] var49 = new com.google.javascript.rhino.jstype.JSType[] { var48};
//     com.google.javascript.rhino.Node var50 = var41.createParameters(var49);
//     com.google.javascript.rhino.jstype.JSType var51 = var38.evaluate(var39, var41);
//     boolean var52 = var16.addVarArgs(var51);
//     boolean var53 = var51.isEnumElementType();
//     com.google.javascript.rhino.ErrorReporter var54 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var54);
//     com.google.javascript.rhino.jstype.JSType var57 = null;
//     var55.unregisterPropertyOnType("Unversioned directory", var57);
//     com.google.javascript.rhino.jstype.JSType var59 = null;
//     boolean var61 = var55.canPropertyBeDefined(var59, "BANG");
//     com.google.javascript.rhino.jstype.JSType var62 = null;
//     com.google.javascript.rhino.jstype.JSType[] var63 = new com.google.javascript.rhino.jstype.JSType[] { var62};
//     com.google.javascript.rhino.Node var64 = var55.createParameters(var63);
//     com.google.javascript.rhino.jstype.FunctionType var65 = var4.createConstructorType(var51, var63);
//     com.google.javascript.rhino.jstype.JSType var67 = var65.getPropertyType("");
//     boolean var68 = var1.declareType("(module$2014$12$24 11:10)", var67);
//     com.google.javascript.rhino.jstype.JSType var73 = var1.createNamedType("module$", "()", (-1), 154);
//     com.google.javascript.rhino.ErrorReporter var74 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var75 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var74);
//     com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var76 = null;
//     var75.setResolveMode(var76);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var78 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var75);
//     com.google.javascript.rhino.jstype.ObjectType var79 = var75.createAnonymousObjectType();
//     com.google.javascript.rhino.jstype.EnumElementType var80 = var79.toMaybeEnumElementType();
//     boolean var81 = var79.isEnumElementType();
//     com.google.javascript.rhino.jstype.JSType var82 = null;
//     com.google.javascript.rhino.jstype.ParameterizedType var83 = var1.createParameterizedType(var79, var82);
//     com.google.javascript.rhino.jstype.ParameterizedType var84 = var83.toMaybeParameterizedType();
//     boolean var85 = var83.hasAnyTemplateInternal();
// 
//   }

  public void test58() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test58"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    var0.setReserveRawExports(false);
    var0.setReserveRawExports(true);
    var0.setAppNameStr("(InputId: )");
    com.google.javascript.jscomp.DiagnosticGroup var18 = null;
    com.google.javascript.jscomp.CheckLevel var19 = null;
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var20 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var18, var19);
    java.lang.String var21 = var20.toString();
    var0.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var20);
    com.google.javascript.rhino.JSDocInfoBuilder var24 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var25 = var24.recordExpose();
    boolean var27 = var24.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
    com.google.javascript.rhino.InputId var34 = com.google.javascript.jscomp.NodeUtil.getInputId(var31);
    com.google.javascript.rhino.jstype.JSType var35 = null;
    var31.setJSType(var35);
    com.google.javascript.rhino.JSDocInfo var37 = var24.build(var31);
    java.lang.String var38 = var37.getFileOverview();
    boolean var39 = var37.hasFileOverview();
    boolean var40 = var37.hasReturnType();
    boolean var42 = var37.hasParameter("BANG 0\n    STRING hi 0 [length: 2]\n");
    var37.setLicense("goog.abstractMethod");
    boolean var45 = var37.isExport();
    java.util.Set var46 = var37.getSuppressions();
    var0.setStripNameSuffixes(var46);
    var0.setInlineGetters(false);
    boolean var50 = var0.assumeClosuresOnlyCaptureReferences();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "null(null)"+ "'", var21.equals("null(null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test59() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test59"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.JSError[] var4 = var3.getMessages();
    com.google.javascript.rhino.JSDocInfoBuilder var6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var7 = var6.recordExpose();
    boolean var9 = var6.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    com.google.javascript.rhino.InputId var16 = com.google.javascript.jscomp.NodeUtil.getInputId(var13);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var13.setJSType(var17);
    com.google.javascript.rhino.JSDocInfo var19 = var6.build(var13);
    java.util.List var20 = var19.getThrownTypes();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var22 = var21.getDirectedGraphNodes();
    var21.clearNodeAnnotations();
    java.util.List var24 = var21.getGraphvizEdges();
    com.google.javascript.jscomp.CompilerOptions var25 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var26 = null;
    var25.setStripTypes(var26);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var29 = var28.getDirectedGraphNodes();
    java.util.List var30 = var28.getEdges();
    var25.setManageClosureDependencies(var30);
    var25.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var25.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var37 = null;
    var25.setSourceMapDetailLevel(var37);
    com.google.javascript.jscomp.CodingConvention var39 = var25.getCodingConvention();
    var25.setMarkNoSideEffectCalls(false);
    var3.<com.google.javascript.jscomp.SourceFile,com.google.javascript.jscomp.SourceFile>init(var20, var24, var25);
    int var43 = var3.getWarningCount();
    com.google.javascript.jscomp.SourceFile var46 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "()");
    java.lang.String var48 = var46.getLine((-1));
    com.google.javascript.rhino.Node var49 = var3.parse(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "()"+ "'", var48.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test60() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test60"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    java.lang.String var57 = var56.getDisplayName();
    com.google.javascript.rhino.Node var58 = var56.getSource();
    boolean var59 = var56.isOrdinaryFunction();
    com.google.javascript.rhino.jstype.EnumElementType var60 = var56.getElementsType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var57.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test61() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test61"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.isUnknownType();
    com.google.javascript.rhino.jstype.ObjectType.Property var71 = var31.getSlot("hi!");
    java.lang.String var72 = var31.getNormalizedReferenceName();
    java.util.List var73 = var31.getSubTypes();
    boolean var74 = var31.hasCachedValues();
    boolean var75 = var31.matchesNumberContext();
    boolean var76 = var31.isRecordType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test62() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test62"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var13 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    com.google.javascript.rhino.Node var22 = var17.getChildAtIndex(1);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
    com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var26);
    java.lang.Object var32 = null;
    var17.putProp(0, var32);
    com.google.javascript.rhino.JSTypeExpression var35 = new com.google.javascript.rhino.JSTypeExpression(var17, "()");
    com.google.javascript.rhino.jstype.StaticScope var36 = null;
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    var38.unregisterPropertyOnType("Unversioned directory", var40);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    boolean var44 = var38.canPropertyBeDefined(var42, "BANG");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.Node var47 = var38.createParameters(var46);
    com.google.javascript.rhino.jstype.JSType var48 = var35.evaluate(var36, var38);
    boolean var49 = var13.addVarArgs(var48);
    boolean var50 = var48.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    var52.unregisterPropertyOnType("Unversioned directory", var54);
    com.google.javascript.rhino.jstype.JSType var56 = null;
    boolean var58 = var52.canPropertyBeDefined(var56, "BANG");
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.rhino.jstype.JSType[] var60 = new com.google.javascript.rhino.jstype.JSType[] { var59};
    com.google.javascript.rhino.Node var61 = var52.createParameters(var60);
    com.google.javascript.rhino.jstype.FunctionType var62 = var1.createConstructorType(var48, var60);
    com.google.javascript.rhino.Node var63 = var62.getParametersNode();
    java.lang.Iterable var64 = var62.getOwnImplementedInterfaces();
    com.google.javascript.rhino.JSDocInfo var65 = var62.getJSDocInfo();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);

  }

  public void test63() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test63"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    boolean var6 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var4);
    int var7 = var4.getLength();
    com.google.javascript.rhino.Node var8 = null;
    boolean var9 = var4.hasChild(var8);
    com.google.javascript.rhino.Node var10 = var2.useSourceInfoIfMissingFromForTree(var4);
    com.google.javascript.jscomp.CodingConvention.Bind var12 = var0.describeFunctionBind(var2, false);
    java.lang.String var13 = var0.getExportPropertyFunction();
    com.google.javascript.jscomp.GoogleCodingConvention var14 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    java.lang.String var15 = var0.getAbstractMethodName();
    java.lang.String var16 = var0.getDelegateSuperclassName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "goog.exportProperty"+ "'", var13.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "goog.abstractMethod"+ "'", var15.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test64() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test64"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var11 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var12 = var11.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var13 = new com.google.javascript.jscomp.ComposeWarningsGuard(var12);
    com.google.javascript.jscomp.JSError var14 = null;
    com.google.javascript.jscomp.CheckLevel var15 = var13.level(var14);
    var0.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var13);
    var0.setNameReferenceGraphPath("goog.exportSymbol");
    com.google.javascript.jscomp.CheckLevel var20 = null;
    com.google.javascript.jscomp.DiagnosticType var22 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var20, "Unversioned directory");
    com.google.javascript.jscomp.DiagnosticType[] var23 = new com.google.javascript.jscomp.DiagnosticType[] { var22};
    com.google.javascript.jscomp.DiagnosticGroup var24 = new com.google.javascript.jscomp.DiagnosticGroup(var23);
    com.google.javascript.jscomp.CompilerOptions var25 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var26 = null;
    var25.setStripTypes(var26);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var29 = var28.getDirectedGraphNodes();
    java.util.List var30 = var28.getEdges();
    var25.setManageClosureDependencies(var30);
    boolean var32 = var25.isExternExportsEnabled();
    var25.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var37 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var39 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var40 = com.google.javascript.jscomp.JSError.make(var37, var39);
    int var41 = var40.getCharno();
    com.google.javascript.jscomp.CheckLevel var42 = var40.getDefaultLevel();
    var25.setReportUnknownTypes(var42);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var44 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var24, var42);
    var0.setReportMissingOverride(var42);
    var0.setRemoveUnusedVars(false);
    var0.setRemoveUnusedPrototypePropertiesInExterns(false);
    com.google.common.collect.Multimap var50 = null;
    var0.setCustomPasses(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test65() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test65"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setShadowVariables(false);
    com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var14 = null;
    var13.setStripTypes(var14);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var16 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var17 = var16.getDirectedGraphNodes();
    java.util.List var18 = var16.getEdges();
    var13.setManageClosureDependencies(var18);
    boolean var20 = var13.isExternExportsEnabled();
    var13.setCheckCaja(false);
    java.util.Set var23 = null;
    var13.setReplaceStringsReservedStrings(var23);
    com.google.javascript.rhino.JSDocInfoBuilder var26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var27 = var26.recordExpose();
    boolean var29 = var26.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = var33.getNext();
    com.google.javascript.rhino.Node var35 = var31.srcrefTree(var33);
    com.google.javascript.rhino.InputId var36 = com.google.javascript.jscomp.NodeUtil.getInputId(var33);
    com.google.javascript.rhino.jstype.JSType var37 = null;
    var33.setJSType(var37);
    com.google.javascript.rhino.JSDocInfo var39 = var26.build(var33);
    java.lang.String var40 = var39.getFileOverview();
    java.util.Set var41 = var39.getModifies();
    var13.setReplaceStringsReservedStrings(var41);
    var13.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var47 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var49 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var50 = com.google.javascript.jscomp.JSError.make(var47, var49);
    int var51 = var50.getCharno();
    com.google.javascript.jscomp.CheckLevel var52 = var50.getDefaultLevel();
    var13.setCheckGlobalThisLevel(var52);
    var0.setCheckMissingGetCssNameLevel(var52);
    var0.setDefineToNumberLiteral("(LABEL_NAME hi!)", 10);
    var0.setExternExports(false);
    var0.setExternExportsPath("");
    var0.setOptimizeParameters(false);
    com.google.javascript.jscomp.CompilerOptions var65 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var66 = null;
    var65.setStripTypes(var66);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var68 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var69 = var68.getDirectedGraphNodes();
    java.util.List var70 = var68.getEdges();
    var65.setManageClosureDependencies(var70);
    boolean var72 = var65.isExternExportsEnabled();
    var65.setManageClosureDependencies(true);
    com.google.javascript.jscomp.CompilerOptions var75 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var76 = null;
    var75.setStripTypes(var76);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var78 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var79 = var78.getDirectedGraphNodes();
    java.util.List var80 = var78.getEdges();
    var75.setManageClosureDependencies(var80);
    boolean var82 = var75.isExternExportsEnabled();
    var75.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var87 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var89 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var90 = com.google.javascript.jscomp.JSError.make(var87, var89);
    int var91 = var90.getCharno();
    com.google.javascript.jscomp.CheckLevel var92 = var90.getDefaultLevel();
    var75.setReportUnknownTypes(var92);
    var65.setCheckUnreachableCode(var92);
    com.google.javascript.jscomp.DiagnosticType var96 = com.google.javascript.jscomp.DiagnosticType.make("function (): {1883749358}", var92, "goog.exportProperty");
    var0.setCheckMissingReturn(var92);
    var0.setCheckControlStructures(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test66() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test66"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var3 = var1.getBooleanProp((-1));
    var1.setSourceEncodedPosition(10);
    boolean var6 = var1.isContinue();
    boolean var7 = var1.isComma();
    boolean var8 = var1.isCase();
    com.google.javascript.rhino.Node var9 = var1.cloneTree();
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
    com.google.javascript.rhino.JSDocInfo var17 = var14.getJSDocInfo();
    boolean var18 = var14.isSwitch();
    boolean var19 = var14.isIf();
    com.google.javascript.rhino.Node[] var20 = new com.google.javascript.rhino.Node[] { var14};
    com.google.javascript.rhino.Node var23 = new com.google.javascript.rhino.Node(0, var20, 3, 2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.call(var1, var20);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test67() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test67"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.warning("JSDocInfo", "module$2014$12$24 11:10");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test68() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test68"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    var0.setReplaceStringsReservedStrings(var28);
    var0.setChainCalls(true);
    var0.setGenerateExports(false);
    var0.setRuntimeTypeCheckLogFunction("function (): {1263056885}");
    var0.setCollapseObjectLiterals(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test69() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test69"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    boolean var16 = var10.isEnumElementType();
    boolean var17 = var10.isEnumElementType();
    boolean var19 = var10.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    boolean var20 = var10.isNoObjectType();
    java.lang.Iterable var21 = var10.getOwnImplementedInterfaces();
    boolean var22 = var10.isUnionType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test70() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test70"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    boolean var17 = var3.isVoid();
    boolean var18 = var3.isGetElem();
    java.util.Set var19 = var3.getDirectives();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test71() {}
//   public void test71() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test71"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     boolean var2 = var0.hasNode((java.lang.Object)1);
//     java.util.List var3 = var0.getGraphvizEdges();
//     java.lang.Iterable var4 = var0.getDirectedGraphNodes();
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var6 = var5.getAstDotGraph();
//     com.google.javascript.jscomp.LightweightMessageFormatter var7 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
//     com.google.javascript.jscomp.LightweightMessageFormatter var8 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
//     boolean var9 = var0.hasNode((java.lang.Object)var5);
//     double var10 = var5.getProgress();
//     com.google.javascript.jscomp.Scope var11 = var5.getTopScope();
//     java.util.Map var12 = var5.getInputsById();
// 
//   }

  public void test72() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test72"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.thisNode();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var5 = var4.hasOneChild();
    com.google.javascript.rhino.Node var9 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.returnNode();
    boolean var11 = var10.isArrayLit();
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    boolean var18 = var15.isVarArgs();
    boolean var19 = var15.isOptionalArg();
    com.google.javascript.rhino.Node var22 = new com.google.javascript.rhino.Node(0, var4, var9, var10, var15, 1, 100);
    int var23 = var15.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var0.useSourceInfoFromForTree(var15);
    var0.setOptionalArg(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test73() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test73"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    com.google.javascript.jscomp.GoogleCodingConvention var33 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    boolean var35 = var33.isConstant("module$2014$12$24 11:10");
    boolean var38 = var33.isExported("Unversioned directory", false);
    boolean var40 = var33.isConstantKey("function (): {540092593}");
    boolean var42 = var33.isPrivate("LABEL_NAME hi!");
    boolean var44 = var33.isConstant("LABEL_NAME hi!");
    boolean var46 = var33.isPrivate("goog.abstractMethod");
    boolean var48 = var33.isConstantKey("Node tree inequality:\nTree1:\nSTRING_KEY Unversioned directory 0 [length: 2]\n\n\nTree2:\nBANG 0\n    STRING hi 0 [length: 2]\n\n\nSubtree1: STRING_KEY Unversioned directory 0 [length: 2]\n\n\nSubtree2: BANG 0\n    STRING hi 0 [length: 2]\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test74() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test74"); }


    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString(0, "(LABEL_NAME hi!)", 0, (-1));
    boolean var5 = var4.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(var4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test75() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test75"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    var18.unregisterPropertyOnType("Unversioned directory", var20);
    var18.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = var28.getNext();
    com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
    boolean var31 = var28.isVarArgs();
    boolean var32 = var28.isFor();
    boolean var33 = var28.isNumber();
    com.google.javascript.rhino.Node var34 = var28.getNext();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    com.google.javascript.rhino.Node var43 = var38.getChildAtIndex(1);
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.JSDocInfo var50 = var47.getJSDocInfo();
    com.google.javascript.rhino.Node var51 = var38.copyInformationFrom(var47);
    java.lang.Object var53 = null;
    var38.putProp(0, var53);
    com.google.javascript.rhino.JSTypeExpression var56 = new com.google.javascript.rhino.JSTypeExpression(var38, "()");
    com.google.javascript.rhino.jstype.StaticScope var57 = null;
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var59.unregisterPropertyOnType("Unversioned directory", var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    boolean var65 = var59.canPropertyBeDefined(var63, "BANG");
    com.google.javascript.rhino.jstype.JSType var66 = null;
    com.google.javascript.rhino.jstype.JSType[] var67 = new com.google.javascript.rhino.jstype.JSType[] { var66};
    com.google.javascript.rhino.Node var68 = var59.createParameters(var67);
    com.google.javascript.rhino.jstype.JSType var69 = var56.evaluate(var57, var59);
    com.google.javascript.rhino.jstype.JSType var70 = var69.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var71 = var70.dereference();
    boolean var72 = var70.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var73 = var18.createEnumType("STRING hi 0 [length: 2]\n", var28, var70);
    java.lang.String var74 = var73.getDisplayName();
    com.google.javascript.rhino.Node var75 = var73.getSource();
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.stringKey("hi!");
    boolean var78 = var10.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var73, var77);
    boolean var79 = var73.isDateType();
    boolean var80 = var73.matchesNumberContext();
    com.google.javascript.rhino.Node var83 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var85 = var83.getBooleanProp((-1));
    com.google.javascript.rhino.Node var87 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var89 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var90 = var89.getNext();
    com.google.javascript.rhino.Node var91 = var87.srcrefTree(var89);
    com.google.javascript.rhino.Node var92 = var89.removeFirstChild();
    com.google.javascript.rhino.Node var93 = var83.useSourceInfoFromForTree(var89);
    boolean var94 = var73.defineElement("", var89);
    java.lang.String var95 = var73.getDisplayName();
    java.lang.String var96 = var73.toString();
    boolean var97 = var73.matchesStringContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var74.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var95.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "enum{STRING hi 0 [length: 2]\n}"+ "'", var96.equals("enum{STRING hi 0 [length: 2]\n}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == true);

  }

  public void test76() {}
//   public void test76() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test76"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
//     com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
//     com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var8 = null;
//     var7.setStripTypes(var8);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var11 = var10.getDirectedGraphNodes();
//     java.util.List var12 = var10.getEdges();
//     var7.setManageClosureDependencies(var12);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.script(var12);
//     var6.traverseRoots(var12);
//     com.google.javascript.rhino.Node var16 = var6.getEnclosingFunction();
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.continueNode();
//     com.google.javascript.jscomp.DiagnosticType var20 = com.google.javascript.jscomp.DiagnosticType.disabled("(LABEL_NAME hi!)", "()");
//     com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var26 = var25.getNext();
//     boolean var27 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var25);
//     int var28 = var25.getLength();
//     com.google.javascript.rhino.Node var29 = null;
//     boolean var30 = var25.hasChild(var29);
//     com.google.javascript.rhino.Node var31 = var23.useSourceInfoIfMissingFromForTree(var25);
//     var25.setSourceFileForTesting("Unversioned directory");
//     boolean var34 = var25.isWith();
//     com.google.javascript.rhino.jstype.StaticSourceFile var35 = var25.getStaticSourceFile();
//     com.google.javascript.jscomp.DiagnosticType var38 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
//     com.google.javascript.jscomp.MessageFormatter var39 = null;
//     java.util.logging.Logger var40 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var41 = new com.google.javascript.jscomp.LoggerErrorManager(var39, var40);
//     com.google.javascript.jscomp.Compiler var42 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var41);
//     com.google.javascript.jscomp.Scope var43 = var42.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var44 = null;
//     com.google.javascript.jscomp.NodeTraversal var45 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var42, var44);
//     com.google.javascript.jscomp.Scope var46 = var45.getScope();
//     com.google.javascript.rhino.Node var47 = null;
//     com.google.javascript.jscomp.DiagnosticType var50 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var52 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var53 = com.google.javascript.jscomp.JSError.make(var50, var52);
//     com.google.javascript.jscomp.DiagnosticType var54 = var53.getType();
//     java.lang.String[] var56 = new java.lang.String[] { "LABEL_NAME hi!"};
//     com.google.javascript.jscomp.JSError var57 = var45.makeError(var47, var54, var56);
//     com.google.javascript.jscomp.JSError var58 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var25, var38, var56);
//     var6.report(var17, var20, var56);
//     java.lang.String var60 = var6.getSourceName();
//     com.google.javascript.jscomp.Compiler var61 = var6.getCompiler();
//     boolean var62 = var61.acceptConstKeyword();
// 
//   }

  public void test77() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test77"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    java.lang.String var4 = var0.getAbstractMethodName();
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(0, var9, var14);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var16 = var0.getClassesDefinedByCall(var9);
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var19 = null;
    var18.setResolveMode(var19);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var21 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var18);
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var24 = null;
    var23.setResolveMode(var24);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var26 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var23);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var27 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var23);
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
    boolean var34 = var31.isVarArgs();
    com.google.javascript.rhino.Node var36 = var31.getChildAtIndex(1);
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var40 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = var40.getNext();
    com.google.javascript.rhino.Node var42 = var38.srcrefTree(var40);
    com.google.javascript.rhino.JSDocInfo var43 = var40.getJSDocInfo();
    com.google.javascript.rhino.Node var44 = var31.copyInformationFrom(var40);
    java.lang.Object var46 = null;
    var31.putProp(0, var46);
    com.google.javascript.rhino.JSTypeExpression var49 = new com.google.javascript.rhino.JSTypeExpression(var31, "()");
    com.google.javascript.rhino.jstype.StaticScope var50 = null;
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    var52.unregisterPropertyOnType("Unversioned directory", var54);
    com.google.javascript.rhino.jstype.JSType var56 = null;
    boolean var58 = var52.canPropertyBeDefined(var56, "BANG");
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.rhino.jstype.JSType[] var60 = new com.google.javascript.rhino.jstype.JSType[] { var59};
    com.google.javascript.rhino.Node var61 = var52.createParameters(var60);
    com.google.javascript.rhino.jstype.JSType var62 = var49.evaluate(var50, var52);
    com.google.javascript.rhino.jstype.JSType var63 = var62.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var64 = var63.dereference();
    java.util.Collection var65 = var23.getDirectImplementors(var64);
    com.google.javascript.rhino.jstype.JSType var70 = var18.getType((com.google.javascript.rhino.jstype.StaticScope)var64, "hi!", "BANG 0\n    STRING hi 0 [length: 2]\n", 10, 10);
    var18.identifyNonNullableName("STRING hi 0 [length: 2]\n");
    var18.clearTemplateTypeNames();
    com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var74 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var0, var18);
    com.google.javascript.rhino.ErrorReporter var75 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var76 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var75);
    com.google.javascript.rhino.jstype.JSType var78 = null;
    var76.unregisterPropertyOnType("Unversioned directory", var78);
    com.google.javascript.rhino.jstype.JSType var80 = null;
    com.google.javascript.jscomp.JSModule var82 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var83 = var82.getDependencies();
    com.google.javascript.rhino.Node var84 = com.google.javascript.rhino.IR.block(var83);
    com.google.javascript.rhino.jstype.FunctionType var85 = var76.createFunctionTypeWithVarArgs(var80, var83);
    boolean var87 = var85.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var88 = var85.toMaybeEnumType();
    boolean var89 = var85.isNumber();
    var85.clearCachedValues();
    boolean var91 = var85.hasDisplayName();
    java.lang.Iterable var92 = var85.getExtendedInterfaces();
    com.google.javascript.rhino.jstype.ObjectType var93 = var85.getPrototype();
    com.google.javascript.rhino.jstype.JSType var94 = var18.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType)var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "goog.abstractMethod"+ "'", var4.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test78() {}
//   public void test78() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test78"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = null;
//     com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.nullNode();
//     boolean var3 = var2.isHook();
//     boolean var4 = var1.isInlinableFunction(var2);
// 
//   }

  public void test79() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test79"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setNameAnonymousFunctionsOnly(false);
    var0.setCollapseProperties(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test80() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test80"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    com.google.javascript.jscomp.MessageFormatter var4 = null;
    java.util.logging.Logger var5 = null;
    com.google.javascript.jscomp.LoggerErrorManager var6 = new com.google.javascript.jscomp.LoggerErrorManager(var4, var5);
    com.google.javascript.jscomp.Compiler var7 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var6);
    com.google.javascript.jscomp.Scope var8 = var7.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var9 = null;
    com.google.javascript.jscomp.NodeTraversal var10 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var7, var9);
    com.google.javascript.jscomp.CompilerOptions var11 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var12 = null;
    var11.setStripTypes(var12);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var14 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var15 = var14.getDirectedGraphNodes();
    java.util.List var16 = var14.getEdges();
    var11.setManageClosureDependencies(var16);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.script(var16);
    var10.traverseRoots(var16);
    com.google.javascript.rhino.Node var20 = var10.getEnclosingFunction();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.continueNode();
    com.google.javascript.jscomp.DiagnosticType var24 = com.google.javascript.jscomp.DiagnosticType.disabled("(LABEL_NAME hi!)", "()");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    boolean var31 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var29);
    int var32 = var29.getLength();
    com.google.javascript.rhino.Node var33 = null;
    boolean var34 = var29.hasChild(var33);
    com.google.javascript.rhino.Node var35 = var27.useSourceInfoIfMissingFromForTree(var29);
    var29.setSourceFileForTesting("Unversioned directory");
    boolean var38 = var29.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var39 = var29.getStaticSourceFile();
    com.google.javascript.jscomp.DiagnosticType var42 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
    com.google.javascript.jscomp.MessageFormatter var43 = null;
    java.util.logging.Logger var44 = null;
    com.google.javascript.jscomp.LoggerErrorManager var45 = new com.google.javascript.jscomp.LoggerErrorManager(var43, var44);
    com.google.javascript.jscomp.Compiler var46 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var45);
    com.google.javascript.jscomp.Scope var47 = var46.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var48 = null;
    com.google.javascript.jscomp.NodeTraversal var49 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var46, var48);
    com.google.javascript.jscomp.Scope var50 = var49.getScope();
    com.google.javascript.rhino.Node var51 = null;
    com.google.javascript.jscomp.DiagnosticType var54 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var56 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var57 = com.google.javascript.jscomp.JSError.make(var54, var56);
    com.google.javascript.jscomp.DiagnosticType var58 = var57.getType();
    java.lang.String[] var60 = new java.lang.String[] { "LABEL_NAME hi!"};
    com.google.javascript.jscomp.JSError var61 = var49.makeError(var51, var58, var60);
    com.google.javascript.jscomp.JSError var62 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var29, var42, var60);
    var10.report(var21, var24, var60);
    java.lang.String var67 = var21.toString(false, true, false);
    com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var71 = var69.getBooleanProp((-1));
    com.google.javascript.rhino.Node var73 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var75 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var76 = var75.getNext();
    com.google.javascript.rhino.Node var77 = var73.srcrefTree(var75);
    com.google.javascript.rhino.Node var78 = var75.removeFirstChild();
    com.google.javascript.rhino.Node var79 = var69.useSourceInfoFromForTree(var75);
    var79.setLength(2);
    com.google.javascript.rhino.Node var83 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var84 = var83.getNext();
    boolean var85 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var83);
    java.lang.String var86 = var79.checkTreeEquals(var83);
    boolean var87 = var83.isEmpty();
    java.lang.String var88 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var83);
    java.lang.String var89 = var0.extractClassNameIfProvide(var21, var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "CONTINUE"+ "'", var67.equals("CONTINUE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "Node tree inequality:\nTree1:\nSTRING_KEY Unversioned directory 0 [length: 2]\n\n\nTree2:\nBANG 0\n    STRING hi 0 [length: 2]\n\n\nSubtree1: STRING_KEY Unversioned directory 0 [length: 2]\n\n\nSubtree2: BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var86.equals("Node tree inequality:\nTree1:\nSTRING_KEY Unversioned directory 0 [length: 2]\n\n\nTree2:\nBANG 0\n    STRING hi 0 [length: 2]\n\n\nSubtree1: STRING_KEY Unversioned directory 0 [length: 2]\n\n\nSubtree2: BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);

  }

  public void test81() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test81"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasCachedValues();
    java.util.Set var12 = var10.getPropertyNames();
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    var14.unregisterPropertyOnType("Unversioned directory", var16);
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.jscomp.JSModule var20 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var21 = var20.getDependencies();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.block(var21);
    com.google.javascript.rhino.jstype.FunctionType var23 = var14.createFunctionTypeWithVarArgs(var18, var21);
    boolean var24 = var23.hasAnyTemplateInternal();
    java.lang.Iterable var25 = var23.getAllExtendedInterfaces();
    boolean var26 = var23.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var28 = var23.getOwnSlot("(LABEL_NAME hi!)");
    boolean var29 = var23.isEnumElementType();
    boolean var30 = var23.isEnumElementType();
    var10.matchConstraint((com.google.javascript.rhino.jstype.ObjectType)var23);
    com.google.javascript.rhino.jstype.ObjectType var32 = var10.getTypeOfThis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test82() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test82"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var2 = var1.getNext();
    int var3 = var1.getSourceOffset();
    com.google.javascript.rhino.Node var4 = var1.cloneNode();
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = var6.getNext();
    int var8 = var6.getSourceOffset();
    com.google.javascript.rhino.Node var9 = var6.cloneNode();
    var4.addChildrenToFront(var9);
    boolean var11 = var4.isDebugger();
    boolean var12 = var4.isThis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test83() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test83"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getType();
    int var19 = var14.getParameterCount();
    com.google.javascript.rhino.Node var20 = var14.getAssociatedNode();
    boolean var21 = var14.hasType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test84() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test84"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    com.google.javascript.rhino.JSDocInfoBuilder var16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var17 = var16.recordExpose();
    boolean var18 = var16.recordExterns();
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isVarArgs();
    boolean var26 = var22.isArrayLit();
    com.google.javascript.rhino.Node var27 = var22.getNext();
    var16.markTypeNode(var22, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    com.google.javascript.rhino.Node var39 = var35.srcrefTree(var37);
    boolean var40 = var37.isVarArgs();
    com.google.javascript.rhino.Node var42 = var37.getChildAtIndex(1);
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = var46.getNext();
    com.google.javascript.rhino.Node var48 = var44.srcrefTree(var46);
    com.google.javascript.rhino.JSDocInfo var49 = var46.getJSDocInfo();
    com.google.javascript.rhino.Node var50 = var37.copyInformationFrom(var46);
    java.lang.Object var52 = null;
    var37.putProp(0, var52);
    com.google.javascript.rhino.JSTypeExpression var55 = new com.google.javascript.rhino.JSTypeExpression(var37, "()");
    com.google.javascript.rhino.JSTypeExpression var56 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var55);
    boolean var57 = var16.recordBaseType(var55);
    boolean var58 = var1.recordTypedef(var55);
    boolean var59 = var1.shouldParseDocumentation();
    var1.markName("", 153, 154);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);

  }

  public void test85() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test85"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var1 = var0.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0);
    com.google.javascript.jscomp.DiagnosticType var5 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var7 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var8 = com.google.javascript.jscomp.JSError.make(var5, var7);
    int var9 = var8.getCharno();
    com.google.javascript.jscomp.CheckLevel var10 = var8.getDefaultLevel();
    java.lang.String var11 = var2.formatError(var8);
    com.google.javascript.rhino.Node var13 = null;
    com.google.javascript.jscomp.CheckLevel var15 = null;
    com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var15, "");
    com.google.javascript.jscomp.CheckLevel var19 = null;
    com.google.javascript.jscomp.DiagnosticType var21 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var19, "");
    int var22 = var17.compareTo(var21);
    java.lang.String[] var24 = new java.lang.String[] { "(module$2014$12$24 11:10)"};
    com.google.javascript.jscomp.JSError var25 = com.google.javascript.jscomp.JSError.make("goog.abstractMethod", var13, var21, var24);
    java.lang.String var26 = var2.formatWarning(var25);
    int var27 = var25.getLineNumber();
    java.lang.String var28 = var25.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var11.equals("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "goog.abstractMethod: WARNING - \n"+ "'", var26.equals("goog.abstractMethod: WARNING - \n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Unversioned directory.  at goog.abstractMethod line (unknown line) : (unknown column)"+ "'", var28.equals("Unversioned directory.  at goog.abstractMethod line (unknown line) : (unknown column)"));

  }

  public void test86() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test86"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    java.lang.Object var58 = var11.getProp(2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);

  }

  public void test87() {}
//   public void test87() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test87"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     var1.unregisterPropertyOnType("Unversioned directory", var3);
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var8 = var7.getDependencies();
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
//     com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
//     boolean var12 = var10.removeProperty("null(null)");
//     java.lang.String var13 = var10.toDebugHashCodeString();
//     boolean var14 = var10.isTemplateType();
//     com.google.javascript.rhino.JSDocInfoBuilder var16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var17 = var16.recordExpose();
//     boolean var19 = var16.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var24 = var23.getNext();
//     com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
//     com.google.javascript.rhino.InputId var26 = com.google.javascript.jscomp.NodeUtil.getInputId(var23);
//     com.google.javascript.rhino.jstype.JSType var27 = null;
//     var23.setJSType(var27);
//     com.google.javascript.rhino.JSDocInfo var29 = var16.build(var23);
//     java.lang.String var30 = var29.getFileOverview();
//     boolean var31 = var29.hasFileOverview();
//     boolean var32 = var29.hasReturnType();
//     boolean var33 = var29.hasType();
//     boolean var34 = var29.shouldPreserveTry();
//     java.lang.String var35 = var29.getOriginalCommentString();
//     boolean var36 = var29.isConstant();
//     var10.setJSDocInfo(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "function (): {1529715975}"+ "'", var13.equals("function (): {1529715975}"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var17 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var19 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var31 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var32 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var33 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var34 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var36 == false);
// 
//   }

  public void test88() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test88"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    boolean var16 = var10.isEnumElementType();
    boolean var17 = var10.isEnumElementType();
    boolean var19 = var10.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    boolean var20 = var10.isNoObjectType();
    java.lang.Iterable var21 = var10.getOwnImplementedInterfaces();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.ObjectType var22 = var10.getInstanceType();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test89() {}
//   public void test89() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test89"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
//     com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
//     com.google.javascript.rhino.Node var2 = null;
//     com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var7 = var6.getNext();
//     com.google.javascript.rhino.Node var8 = var4.srcrefTree(var6);
//     com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var14 = var13.getNext();
//     com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
//     boolean var16 = var13.isVarArgs();
//     boolean var17 = var13.isOptionalArg();
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
//     boolean var21 = var19.getBooleanProp((-1));
//     com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var26 = var25.getNext();
//     com.google.javascript.rhino.Node var27 = var23.srcrefTree(var25);
//     com.google.javascript.rhino.Node var28 = var25.removeFirstChild();
//     com.google.javascript.rhino.Node var29 = var19.useSourceInfoFromForTree(var25);
//     com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var34 = var33.getNext();
//     com.google.javascript.rhino.Node var35 = var31.srcrefTree(var33);
//     com.google.javascript.rhino.InputId var36 = com.google.javascript.jscomp.NodeUtil.getInputId(var33);
//     com.google.javascript.rhino.jstype.JSType var37 = null;
//     var33.setJSType(var37);
//     boolean var39 = var33.isBlock();
//     com.google.javascript.rhino.Node var40 = var33.getParent();
//     boolean var41 = var33.isBreak();
//     com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var44 = var43.getNext();
//     com.google.javascript.rhino.InputId var45 = var43.getInputId();
//     boolean var46 = var43.isGetProp();
//     com.google.javascript.rhino.Node var47 = var33.clonePropsFrom(var43);
//     com.google.javascript.rhino.Node var48 = new com.google.javascript.rhino.Node(0, var13, var19, var43);
//     com.google.javascript.rhino.Node var49 = var6.useSourceInfoFromForTree(var13);
//     var1.process(var2, var49);
// 
//   }

  public void test90() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test90"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var3 = new com.google.javascript.jscomp.ComposeWarningsGuard(var2);
    com.google.javascript.jscomp.DiagnosticGroup var4 = null;
    boolean var5 = var3.enables(var4);
    com.google.javascript.jscomp.JSError var6 = null;
    com.google.javascript.jscomp.CheckLevel var7 = var3.level(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test91() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test91"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    boolean var11 = var8.isVarArgs();
    com.google.javascript.rhino.Node var13 = var8.getChildAtIndex(1);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.JSDocInfo var20 = var17.getJSDocInfo();
    com.google.javascript.rhino.Node var21 = var8.copyInformationFrom(var17);
    java.lang.Object var23 = null;
    var8.putProp(0, var23);
    com.google.javascript.rhino.JSTypeExpression var26 = new com.google.javascript.rhino.JSTypeExpression(var8, "()");
    com.google.javascript.rhino.jstype.StaticScope var27 = null;
    com.google.javascript.rhino.ErrorReporter var28 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var29.unregisterPropertyOnType("Unversioned directory", var31);
    com.google.javascript.rhino.jstype.JSType var33 = null;
    boolean var35 = var29.canPropertyBeDefined(var33, "BANG");
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var36};
    com.google.javascript.rhino.Node var38 = var29.createParameters(var37);
    com.google.javascript.rhino.jstype.JSType var39 = var26.evaluate(var27, var29);
    com.google.javascript.rhino.ErrorReporter var40 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var42 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var41);
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = var46.getNext();
    com.google.javascript.rhino.Node var48 = var44.srcrefTree(var46);
    boolean var49 = var46.isVarArgs();
    com.google.javascript.rhino.Node var51 = var46.getChildAtIndex(1);
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = var55.getNext();
    com.google.javascript.rhino.Node var57 = var53.srcrefTree(var55);
    com.google.javascript.rhino.JSDocInfo var58 = var55.getJSDocInfo();
    com.google.javascript.rhino.Node var59 = var46.copyInformationFrom(var55);
    java.lang.Object var61 = null;
    var46.putProp(0, var61);
    com.google.javascript.rhino.JSTypeExpression var64 = new com.google.javascript.rhino.JSTypeExpression(var46, "()");
    com.google.javascript.rhino.jstype.StaticScope var65 = null;
    com.google.javascript.rhino.ErrorReporter var66 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var66);
    com.google.javascript.rhino.jstype.JSType var69 = null;
    var67.unregisterPropertyOnType("Unversioned directory", var69);
    com.google.javascript.rhino.jstype.JSType var71 = null;
    boolean var73 = var67.canPropertyBeDefined(var71, "BANG");
    com.google.javascript.rhino.jstype.JSType var74 = null;
    com.google.javascript.rhino.jstype.JSType[] var75 = new com.google.javascript.rhino.jstype.JSType[] { var74};
    com.google.javascript.rhino.Node var76 = var67.createParameters(var75);
    com.google.javascript.rhino.jstype.JSType var77 = var64.evaluate(var65, var67);
    boolean var78 = var42.addVarArgs(var77);
    com.google.javascript.rhino.jstype.JSType var79 = var39.getLeastSupertype(var77);
    var1.registerPropertyOnType("BANG 0\n    STRING hi 0 [length: 2]\n", var39);
    com.google.javascript.rhino.jstype.ObjectType var81 = com.google.javascript.rhino.jstype.ObjectType.cast(var39);
    boolean var82 = var39.isUnknownType();
    com.google.javascript.rhino.jstype.JSType var83 = var39.autoboxesTo();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);

  }

  public void test92() {}
//   public void test92() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test92"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getAst();
//     com.google.javascript.rhino.JSDocInfoBuilder var6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var7 = var6.recordExpose();
//     boolean var8 = var6.recordExterns();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var13 = var12.getNext();
//     com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
//     boolean var15 = var12.isVarArgs();
//     boolean var16 = var12.isArrayLit();
//     com.google.javascript.rhino.Node var17 = var12.getNext();
//     var6.markTypeNode(var12, 10, 100, 0, 0, false);
//     com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var28 = var27.getNext();
//     com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
//     boolean var30 = var27.isVarArgs();
//     com.google.javascript.rhino.Node var32 = var27.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var37 = var36.getNext();
//     com.google.javascript.rhino.Node var38 = var34.srcrefTree(var36);
//     com.google.javascript.rhino.JSDocInfo var39 = var36.getJSDocInfo();
//     com.google.javascript.rhino.Node var40 = var27.copyInformationFrom(var36);
//     java.lang.Object var42 = null;
//     var27.putProp(0, var42);
//     com.google.javascript.rhino.JSTypeExpression var45 = new com.google.javascript.rhino.JSTypeExpression(var27, "()");
//     com.google.javascript.rhino.JSTypeExpression var46 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var45);
//     boolean var47 = var6.recordBaseType(var45);
//     com.google.javascript.jscomp.MessageFormatter var48 = null;
//     java.util.logging.Logger var49 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var50 = new com.google.javascript.jscomp.LoggerErrorManager(var48, var49);
//     com.google.javascript.jscomp.Compiler var51 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var50);
//     boolean var52 = var45.equals((java.lang.Object)var51);
//     var51.reportCodeChange();
//     com.google.javascript.rhino.Node var54 = var3.getAstRoot((com.google.javascript.jscomp.AbstractCompiler)var51);
// 
//   }

  public void test93() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test93"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
    com.google.javascript.rhino.jstype.JSType var18 = null;
    var16.unregisterPropertyOnType("Unversioned directory", var18);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.jscomp.JSModule var22 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var23 = var22.getDependencies();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.block(var23);
    com.google.javascript.rhino.jstype.FunctionType var25 = var16.createFunctionTypeWithVarArgs(var20, var23);
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var28 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var27);
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    boolean var35 = var32.isVarArgs();
    com.google.javascript.rhino.Node var37 = var32.getChildAtIndex(1);
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
    com.google.javascript.rhino.JSDocInfo var44 = var41.getJSDocInfo();
    com.google.javascript.rhino.Node var45 = var32.copyInformationFrom(var41);
    java.lang.Object var47 = null;
    var32.putProp(0, var47);
    com.google.javascript.rhino.JSTypeExpression var50 = new com.google.javascript.rhino.JSTypeExpression(var32, "()");
    com.google.javascript.rhino.jstype.StaticScope var51 = null;
    com.google.javascript.rhino.ErrorReporter var52 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var52);
    com.google.javascript.rhino.jstype.JSType var55 = null;
    var53.unregisterPropertyOnType("Unversioned directory", var55);
    com.google.javascript.rhino.jstype.JSType var57 = null;
    boolean var59 = var53.canPropertyBeDefined(var57, "BANG");
    com.google.javascript.rhino.jstype.JSType var60 = null;
    com.google.javascript.rhino.jstype.JSType[] var61 = new com.google.javascript.rhino.jstype.JSType[] { var60};
    com.google.javascript.rhino.Node var62 = var53.createParameters(var61);
    com.google.javascript.rhino.jstype.JSType var63 = var50.evaluate(var51, var53);
    boolean var64 = var28.addVarArgs(var63);
    boolean var65 = var63.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var66 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var66);
    com.google.javascript.rhino.jstype.JSType var69 = null;
    var67.unregisterPropertyOnType("Unversioned directory", var69);
    com.google.javascript.rhino.jstype.JSType var71 = null;
    boolean var73 = var67.canPropertyBeDefined(var71, "BANG");
    com.google.javascript.rhino.jstype.JSType var74 = null;
    com.google.javascript.rhino.jstype.JSType[] var75 = new com.google.javascript.rhino.jstype.JSType[] { var74};
    com.google.javascript.rhino.Node var76 = var67.createParameters(var75);
    com.google.javascript.rhino.jstype.FunctionType var77 = var16.createConstructorType(var63, var75);
    com.google.javascript.rhino.jstype.JSType var79 = var77.getPropertyType("");
    com.google.javascript.rhino.Node var81 = com.google.javascript.rhino.IR.name("Unversioned directory");
    boolean var82 = var10.defineSynthesizedProperty("BANG 0\n    STRING hi 0 [length: 2]\n", var79, var81);
    com.google.javascript.rhino.jstype.JSType var83 = var10.getReturnType();
    com.google.javascript.rhino.Node var84 = var10.getParametersNode();
    com.google.javascript.rhino.jstype.TemplateType var85 = com.google.javascript.rhino.jstype.JSType.toMaybeTemplateType((com.google.javascript.rhino.jstype.JSType)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);

  }

  public void test94() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test94"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    boolean var7 = var1.canPropertyBeDefined(var5, "BANG");
    java.lang.Iterable var9 = var1.getEachReferenceTypeWithProperty("Unversioned directory");
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    boolean var21 = var20.hasAnyTemplateInternal();
    java.lang.Iterable var22 = var20.getAllExtendedInterfaces();
    boolean var23 = var20.isEmptyType();
    java.util.Set var24 = var20.getOwnPropertyNames();
    com.google.javascript.rhino.jstype.JSType var25 = var1.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType)var20);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var26 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    var28.unregisterPropertyOnType("Unversioned directory", var30);
    var28.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    boolean var42 = var38.isFor();
    boolean var43 = var38.isNumber();
    com.google.javascript.rhino.Node var44 = var38.getNext();
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = var48.getNext();
    com.google.javascript.rhino.Node var50 = var46.srcrefTree(var48);
    boolean var51 = var48.isVarArgs();
    com.google.javascript.rhino.Node var53 = var48.getChildAtIndex(1);
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = var57.getNext();
    com.google.javascript.rhino.Node var59 = var55.srcrefTree(var57);
    com.google.javascript.rhino.JSDocInfo var60 = var57.getJSDocInfo();
    com.google.javascript.rhino.Node var61 = var48.copyInformationFrom(var57);
    java.lang.Object var63 = null;
    var48.putProp(0, var63);
    com.google.javascript.rhino.JSTypeExpression var66 = new com.google.javascript.rhino.JSTypeExpression(var48, "()");
    com.google.javascript.rhino.jstype.StaticScope var67 = null;
    com.google.javascript.rhino.ErrorReporter var68 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var69 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var68);
    com.google.javascript.rhino.jstype.JSType var71 = null;
    var69.unregisterPropertyOnType("Unversioned directory", var71);
    com.google.javascript.rhino.jstype.JSType var73 = null;
    boolean var75 = var69.canPropertyBeDefined(var73, "BANG");
    com.google.javascript.rhino.jstype.JSType var76 = null;
    com.google.javascript.rhino.jstype.JSType[] var77 = new com.google.javascript.rhino.jstype.JSType[] { var76};
    com.google.javascript.rhino.Node var78 = var69.createParameters(var77);
    com.google.javascript.rhino.jstype.JSType var79 = var66.evaluate(var67, var69);
    com.google.javascript.rhino.jstype.JSType var80 = var79.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var81 = var80.dereference();
    boolean var82 = var80.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var83 = var28.createEnumType("STRING hi 0 [length: 2]\n", var38, var80);
    com.google.javascript.rhino.JSDocInfo var84 = var83.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var85 = var83.getElementsType();
    boolean var86 = var85.isNominalType();
    java.lang.String var87 = var85.toString();
    java.lang.String var88 = var85.getReferenceName();
    com.google.javascript.rhino.jstype.JSType var89 = var85.autoboxesTo();
    boolean var91 = var85.hasProperty("function (): {1509650176}");
    boolean var92 = var26.addVarArgs((com.google.javascript.rhino.jstype.JSType)var85);
    java.lang.String var93 = var85.getDisplayName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var87.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var88.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var93.equals("STRING hi 0 [length: 2]\n"));

  }

  public void test95() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test95"); }


    com.google.javascript.jscomp.DependencyOptions var0 = new com.google.javascript.jscomp.DependencyOptions();
    com.google.javascript.jscomp.DependencyOptions var2 = var0.setDependencySorting(false);
    com.google.javascript.jscomp.DependencyOptions var4 = var2.setDependencyPruning(true);
    com.google.javascript.jscomp.DependencyOptions var6 = var4.setDependencySorting(true);
    com.google.javascript.jscomp.DependencyOptions var8 = var4.setDependencySorting(true);
    com.google.javascript.jscomp.DependencyOptions var10 = var4.setDependencySorting(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test96() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test96"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.hasAnyTemplateInternal();
    var31.clearResolved();
    boolean var71 = var31.isReturnTypeInferred();
    boolean var72 = var31.canBeCalled();
    boolean var73 = var31.isNullable();
    com.google.javascript.rhino.jstype.ObjectType var74 = var31.getPrototype();
    boolean var75 = var31.canBeCalled();
    boolean var76 = var31.isNoResolvedType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test97() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test97"); }


    java.util.logging.Logger var0 = null;
    com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
    com.google.javascript.jscomp.CheckLevel var2 = null;
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var4 = var3.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var3);
    com.google.javascript.jscomp.DiagnosticType var8 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var10 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var11 = com.google.javascript.jscomp.JSError.make(var8, var10);
    int var12 = var11.getCharno();
    com.google.javascript.jscomp.CheckLevel var13 = var11.getDefaultLevel();
    java.lang.String var14 = var5.formatError(var11);
    com.google.javascript.rhino.Node var16 = null;
    com.google.javascript.jscomp.CheckLevel var18 = null;
    com.google.javascript.jscomp.DiagnosticType var20 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var18, "");
    com.google.javascript.jscomp.CheckLevel var22 = null;
    com.google.javascript.jscomp.DiagnosticType var24 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var22, "");
    int var25 = var20.compareTo(var24);
    java.lang.String[] var27 = new java.lang.String[] { "(module$2014$12$24 11:10)"};
    com.google.javascript.jscomp.JSError var28 = com.google.javascript.jscomp.JSError.make("goog.abstractMethod", var16, var24, var27);
    java.lang.String var29 = var5.formatWarning(var28);
    int var30 = var28.getNodeLength();
    var1.report(var2, var28);
    int var32 = var1.getErrorCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var14.equals("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "goog.abstractMethod: WARNING - \n"+ "'", var29.equals("goog.abstractMethod: WARNING - \n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);

  }

  public void test98() {}
//   public void test98() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test98"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     java.io.PrintStream var5 = null;
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler(var5);
//     com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var8 = null;
//     var7.setStripTypes(var8);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var11 = var10.getDirectedGraphNodes();
//     java.util.List var12 = var10.getEdges();
//     var7.setManageClosureDependencies(var12);
//     com.google.javascript.rhino.JSDocInfoBuilder var15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var16 = var15.recordExpose();
//     boolean var18 = var15.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var23 = var22.getNext();
//     com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
//     com.google.javascript.rhino.InputId var25 = com.google.javascript.jscomp.NodeUtil.getInputId(var22);
//     com.google.javascript.rhino.jstype.JSType var26 = null;
//     var22.setJSType(var26);
//     com.google.javascript.rhino.JSDocInfo var28 = var15.build(var22);
//     java.lang.String var29 = var28.getFileOverview();
//     java.util.Set var30 = var28.getModifies();
//     java.util.List var31 = var28.getImplementedInterfaces();
//     com.google.javascript.jscomp.CompilerOptions var32 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var33 = null;
//     var32.setStripTypes(var33);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var36 = var35.getDirectedGraphNodes();
//     java.util.List var37 = var35.getEdges();
//     var32.setManageClosureDependencies(var37);
//     var32.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     var32.setColorizeErrorOutput(true);
//     com.google.javascript.jscomp.SourceMap.DetailLevel var44 = null;
//     var32.setSourceMapDetailLevel(var44);
//     var6.<com.google.javascript.jscomp.SourceFile>initModules(var12, var31, var32);
//     com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.block(var31);
//     com.google.javascript.jscomp.CompilerOptions var48 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var49 = null;
//     var48.setStripTypes(var49);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var52 = var51.getDirectedGraphNodes();
//     java.util.List var53 = var51.getEdges();
//     var48.setManageClosureDependencies(var53);
//     boolean var55 = var48.isExternExportsEnabled();
//     var48.setCheckCaja(false);
//     var48.setRemoveUnusedPrototypeProperties(true);
//     var48.setRemoveClosureAsserts(false);
//     com.google.javascript.rhino.JSDocInfoBuilder var63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var64 = var63.recordExpose();
//     boolean var66 = var63.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var68 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var70 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var71 = var70.getNext();
//     com.google.javascript.rhino.Node var72 = var68.srcrefTree(var70);
//     com.google.javascript.rhino.InputId var73 = com.google.javascript.jscomp.NodeUtil.getInputId(var70);
//     com.google.javascript.rhino.jstype.JSType var74 = null;
//     var70.setJSType(var74);
//     com.google.javascript.rhino.JSDocInfo var76 = var63.build(var70);
//     java.util.Collection var77 = var76.getAuthors();
//     com.google.common.collect.ImmutableList var78 = var76.getTemplateTypeNames();
//     var48.setSourceMapLocationMappings((java.util.List)var78);
//     com.google.javascript.jscomp.CompilerOptions var80 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var81 = null;
//     var80.setStripTypes(var81);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var83 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var84 = var83.getDirectedGraphNodes();
//     java.util.List var85 = var83.getEdges();
//     var80.setManageClosureDependencies(var85);
//     var80.setDevirtualizePrototypeMethods(true);
//     var80.setInlineLocalVariables(false);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var91 = var80.getTweakProcessing();
//     boolean var92 = var80.getInferTypes();
//     var3.<com.google.javascript.jscomp.SourceFile>initModules(var31, (java.util.List)var78, var80);
//     byte[] var94 = null;
//     var80.setInputVariableMapSerialized(var94);
//     com.google.javascript.jscomp.WarningsGuard var96 = null;
//     var80.addWarningsGuard(var96);
// 
//   }

  public void test99() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test99"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    boolean var16 = var10.isEnumElementType();
    boolean var17 = var10.isEnumElementType();
    boolean var19 = var10.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    boolean var20 = var10.isStringValueType();
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    var23.unregisterPropertyOnType("Unversioned directory", var25);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.jscomp.JSModule var29 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var30 = var29.getDependencies();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.block(var30);
    com.google.javascript.rhino.jstype.FunctionType var32 = var23.createFunctionTypeWithVarArgs(var27, var30);
    boolean var34 = var32.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var35 = var32.toMaybeEnumType();
    boolean var36 = var32.isNumber();
    java.lang.Iterable var37 = var32.getImplementedInterfaces();
    com.google.javascript.jscomp.ClosureCodingConvention var38 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var40 = var38.isConstantKey("2014/12/24 11:10");
    java.util.Collection var41 = var38.getAssertionFunctions();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    var45.setJSType(var46);
    boolean var48 = var45.isScript();
    com.google.javascript.rhino.Node var49 = var45.removeFirstChild();
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var53 = var52.isGetterDef();
    boolean var54 = var52.isAdd();
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isVarArgs();
    com.google.javascript.rhino.Node var63 = var58.getChildAtIndex(1);
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.JSDocInfo var70 = var67.getJSDocInfo();
    com.google.javascript.rhino.Node var71 = var58.copyInformationFrom(var67);
    java.lang.String var72 = var71.toStringTree();
    com.google.javascript.rhino.Node var74 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var76 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var77 = var76.getNext();
    com.google.javascript.rhino.Node var78 = var74.srcrefTree(var76);
    boolean var80 = var76.getBooleanProp(100);
    int var81 = var76.getSideEffectFlags();
    boolean var82 = var76.isDefaultCase();
    com.google.javascript.rhino.Node var83 = new com.google.javascript.rhino.Node(1, var52, var71, var76);
    java.lang.String var84 = var38.extractClassNameIfProvide(var45, var76);
    com.google.javascript.rhino.Node var86 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var87 = var86.isGetterDef();
    boolean var88 = var86.isNE();
    boolean var89 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var86);
    com.google.javascript.rhino.Node var90 = var45.clonePropsFrom(var86);
    boolean var91 = var10.defineDeclaredProperty("BANG 0\n    STRING hi 0 [length: 2]\n", (com.google.javascript.rhino.jstype.JSType)var32, var86);
    com.google.javascript.rhino.jstype.ObjectType var92 = var10.getParentScope();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var72.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test100() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test100"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.nullNode();
    var0.setVarArgs(false);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.pos(var0);
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    var8.setCharno(153);
    com.google.javascript.rhino.Node[] var16 = new com.google.javascript.rhino.Node[] { var8};
    com.google.javascript.rhino.Node var17 = new com.google.javascript.rhino.Node(100, var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.newNode(var0, var16);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test101() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test101"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.isUnknownType();
    com.google.javascript.rhino.jstype.ObjectType.Property var71 = var31.getSlot("hi!");
    java.lang.String var72 = var31.getNormalizedReferenceName();
    java.util.List var73 = var31.getSubTypes();
    com.google.javascript.rhino.jstype.ObjectType var74 = var31.toObjectType();
    com.google.javascript.rhino.jstype.ObjectType var76 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(var74, "function (): ?");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);

  }

  public void test102() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test102"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var1.isString();
    boolean var7 = var1.isNE();
    java.lang.String var8 = com.google.javascript.jscomp.NodeUtil.getSourceName(var1);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
    var9.setSourceFileForTesting("null(null)");
    boolean var12 = var9.isDo();
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = var16.getNext();
    com.google.javascript.rhino.Node var18 = var14.srcrefTree(var16);
    com.google.javascript.rhino.Node var19 = var16.removeFirstChild();
    com.google.javascript.rhino.Node.AncestorIterable var20 = var19.getAncestors();
    var9.addChildrenToFront(var19);
    int var22 = var9.getSourcePosition();
    com.google.javascript.rhino.Node var23 = var1.useSourceInfoIfMissingFrom(var9);
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
    boolean var30 = var27.isOr();
    boolean var31 = var27.isExprResult();
    com.google.javascript.rhino.Node var32 = var1.copyInformationFrom(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test103() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test103"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var8 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var0, var7);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    boolean var21 = var20.hasAnyTemplateInternal();
    java.lang.Iterable var22 = var20.getAllExtendedInterfaces();
    boolean var23 = var20.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var25 = var20.getOwnSlot("(LABEL_NAME hi!)");
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    var28.unregisterPropertyOnType("Unversioned directory", var30);
    var28.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    boolean var42 = var38.isFor();
    boolean var43 = var38.isNumber();
    com.google.javascript.rhino.Node var44 = var38.getNext();
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = var48.getNext();
    com.google.javascript.rhino.Node var50 = var46.srcrefTree(var48);
    boolean var51 = var48.isVarArgs();
    com.google.javascript.rhino.Node var53 = var48.getChildAtIndex(1);
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = var57.getNext();
    com.google.javascript.rhino.Node var59 = var55.srcrefTree(var57);
    com.google.javascript.rhino.JSDocInfo var60 = var57.getJSDocInfo();
    com.google.javascript.rhino.Node var61 = var48.copyInformationFrom(var57);
    java.lang.Object var63 = null;
    var48.putProp(0, var63);
    com.google.javascript.rhino.JSTypeExpression var66 = new com.google.javascript.rhino.JSTypeExpression(var48, "()");
    com.google.javascript.rhino.jstype.StaticScope var67 = null;
    com.google.javascript.rhino.ErrorReporter var68 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var69 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var68);
    com.google.javascript.rhino.jstype.JSType var71 = null;
    var69.unregisterPropertyOnType("Unversioned directory", var71);
    com.google.javascript.rhino.jstype.JSType var73 = null;
    boolean var75 = var69.canPropertyBeDefined(var73, "BANG");
    com.google.javascript.rhino.jstype.JSType var76 = null;
    com.google.javascript.rhino.jstype.JSType[] var77 = new com.google.javascript.rhino.jstype.JSType[] { var76};
    com.google.javascript.rhino.Node var78 = var69.createParameters(var77);
    com.google.javascript.rhino.jstype.JSType var79 = var66.evaluate(var67, var69);
    com.google.javascript.rhino.jstype.JSType var80 = var79.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var81 = var80.dereference();
    boolean var82 = var80.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var83 = var28.createEnumType("STRING hi 0 [length: 2]\n", var38, var80);
    java.lang.String var84 = var83.getDisplayName();
    com.google.javascript.rhino.Node var85 = var83.getSource();
    com.google.javascript.rhino.Node var87 = com.google.javascript.rhino.IR.stringKey("hi!");
    boolean var88 = var20.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var83, var87);
    boolean var89 = var83.isDateType();
    com.google.javascript.rhino.jstype.ObjectType var90 = var83.getImplicitPrototype();
    com.google.javascript.rhino.jstype.ObjectType var91 = var83.getImplicitPrototype();
    boolean var92 = var83.matchesNumberContext();
    com.google.javascript.rhino.jstype.ObjectType var93 = var83.getImplicitPrototype();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.overwriteDeclaredType("STRING hi 0 [length: 2]\n", (com.google.javascript.rhino.jstype.JSType)var83);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var84.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test104() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test104"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var12 = var10.removeProperty("null(null)");
    boolean var13 = var10.isUnionType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test105() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test105"); }


    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString(2, "hi!", (-1), (-1));
    java.lang.Iterable var5 = var4.siblings();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test106() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test106"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setChainCalls(true);
    var0.setTweakToDoubleLiteral("hi!", 0.0d);
    boolean var6 = var0.isRemoveUnusedClassProperties();
    var0.setGenerateExports(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test107() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test107"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var2 = var1.isGetterDef();
    boolean var3 = var1.isGetProp();
    com.google.javascript.rhino.Node var4 = var1.getLastSibling();
    var1.putBooleanProp(154, false);
    boolean var8 = var1.isCatch();
    boolean var9 = var1.isTry();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.voidNode(var1);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test108() {}
//   public void test108() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test108"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getAst();
//     com.google.javascript.jscomp.JSModule var5 = null;
//     var3.setModule(var5);
//     com.google.javascript.jscomp.SourceAst var7 = var3.getSourceAst();
//     com.google.javascript.jscomp.SourceAst var8 = var3.getSourceAst();
//     com.google.javascript.jscomp.JSModule var10 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var11 = var10.getProvides();
//     com.google.javascript.jscomp.CompilerInput var13 = var10.getByName("()");
//     com.google.javascript.jscomp.SourceAst var14 = null;
//     com.google.javascript.rhino.InputId var15 = null;
//     com.google.javascript.jscomp.CompilerInput var17 = new com.google.javascript.jscomp.CompilerInput(var14, var15, true);
//     com.google.javascript.jscomp.SourceAst var18 = var17.getAst();
//     var10.add(var17);
//     var3.setModule(var10);
//     com.google.javascript.rhino.InputId var22 = new com.google.javascript.rhino.InputId("RETURN");
//     com.google.javascript.jscomp.CompilerInput var24 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var3, var22, true);
// 
//   }

  public void test109() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test109"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    com.google.javascript.jscomp.ClosureCodingConvention var17 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var18 = null;
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isOr();
    java.lang.String var26 = var17.extractClassNameIfRequire(var18, var22);
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    var28.unregisterPropertyOnType("Unversioned directory", var30);
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.jscomp.JSModule var34 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var35 = var34.getDependencies();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.block(var35);
    com.google.javascript.rhino.jstype.FunctionType var37 = var28.createFunctionTypeWithVarArgs(var32, var35);
    com.google.javascript.rhino.ErrorReporter var38 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
    com.google.javascript.rhino.jstype.JSType var41 = null;
    var39.unregisterPropertyOnType("Unversioned directory", var41);
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.jscomp.JSModule var45 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var46 = var45.getDependencies();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.block(var46);
    com.google.javascript.rhino.jstype.FunctionType var48 = var39.createFunctionTypeWithVarArgs(var43, var46);
    boolean var49 = var48.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var51 = var50.getDirectedGraphNodes();
    java.lang.Iterable var52 = var50.getDirectedGraphNodes();
    java.util.List var53 = var50.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var54 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var55 = null;
    var54.setStripTypes(var55);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var57 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var58 = var57.getDirectedGraphNodes();
    java.util.List var59 = var57.getEdges();
    var54.setManageClosureDependencies(var59);
    boolean var61 = var54.isExternExportsEnabled();
    var54.setCheckCaja(false);
    java.util.Set var64 = null;
    var54.setReplaceStringsReservedStrings(var64);
    var54.setAliasAllStrings(true);
    var54.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var70 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var71 = null;
    var70.setStripTypes(var71);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var73 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var74 = var73.getDirectedGraphNodes();
    java.util.List var75 = var73.getEdges();
    var70.setManageClosureDependencies(var75);
    boolean var77 = var70.isExternExportsEnabled();
    var70.setCheckCaja(false);
    var70.setGroupVariableDeclarations(true);
    java.util.Map var82 = var70.getDefineReplacements();
    var54.setPropertyInvalidationErrors(var82);
    var17.defineDelegateProxyPrototypeProperties(var28, (com.google.javascript.rhino.jstype.StaticScope)var48, var53, var82);
    boolean var85 = var48.canBeCalled();
    boolean var86 = var48.isUnknownType();
    com.google.javascript.rhino.jstype.ObjectType.Property var88 = var48.getSlot("hi!");
    var3.setJSType((com.google.javascript.rhino.jstype.JSType)var48);
    boolean var90 = var48.isReturnTypeInferred();
    com.google.javascript.rhino.jstype.ParameterizedType var91 = com.google.javascript.rhino.jstype.JSType.toMaybeParameterizedType((com.google.javascript.rhino.jstype.JSType)var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);

  }

  public void test110() {}
//   public void test110() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test110"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
//     com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
//     boolean var7 = var6.hasScope();
//     com.google.javascript.jscomp.CompilerInput var8 = var6.getInput();
// 
//   }

  public void test111() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test111"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    var1.clearTemplateTypeNames();
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    var9.unregisterPropertyOnType("Unversioned directory", var11);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    com.google.javascript.jscomp.JSModule var15 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var16 = var15.getDependencies();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.block(var16);
    com.google.javascript.rhino.jstype.FunctionType var18 = var9.createFunctionTypeWithVarArgs(var13, var16);
    boolean var20 = var18.removeProperty("null(null)");
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var24 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var23);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var26.unregisterPropertyOnType("Unversioned directory", var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    boolean var32 = var26.canPropertyBeDefined(var30, "BANG");
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
    com.google.javascript.rhino.Node var35 = var26.createParameters(var34);
    boolean var36 = var24.addRequiredParams(var34);
    com.google.javascript.rhino.jstype.FunctionType var37 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var18, false, var34);
    boolean var38 = var37.isInstanceType();
    com.google.javascript.rhino.jstype.ParameterizedType var39 = var37.toMaybeParameterizedType();
    com.google.javascript.rhino.jstype.FunctionType var40 = var37.cloneWithoutArrowType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test112() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test112"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    var0.setReplaceStringsReservedStrings(var28);
    var0.setChainCalls(true);
    boolean var32 = var0.shouldColorizeErrorOutput();
    var0.setMarkNoSideEffectCalls(false);
    var0.setDebugFunctionSideEffectsPath("function (): {869482344}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test113() {}
//   public void test113() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test113"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     boolean var2 = var0.hasNode((java.lang.Object)1);
//     java.util.List var3 = var0.getGraphvizEdges();
//     java.lang.Iterable var4 = var0.getDirectedGraphNodes();
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var6 = var5.getAstDotGraph();
//     com.google.javascript.jscomp.LightweightMessageFormatter var7 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
//     com.google.javascript.jscomp.LightweightMessageFormatter var8 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
//     boolean var9 = var0.hasNode((java.lang.Object)var5);
//     java.util.List var10 = var0.getEdges();
//     com.google.javascript.rhino.InputId var12 = new com.google.javascript.rhino.InputId("(hi)");
//     java.util.List var13 = var0.getNeighborNodes((java.lang.Object)var12);
// 
//   }

  public void test114() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test114"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var7.setJSType(var8);
    boolean var10 = var7.isScript();
    com.google.javascript.rhino.Node var11 = var7.removeFirstChild();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var15 = var14.isGetterDef();
    boolean var16 = var14.isAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    java.lang.String var34 = var33.toStringTree();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var42 = var38.getBooleanProp(100);
    int var43 = var38.getSideEffectFlags();
    boolean var44 = var38.isDefaultCase();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, var14, var33, var38);
    java.lang.String var46 = var0.extractClassNameIfProvide(var7, var38);
    java.lang.String var47 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var7);
    com.google.javascript.rhino.Node[] var48 = new com.google.javascript.rhino.Node[] { var7};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.paramList(var48);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var34.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test115() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test115"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var19 = var14.hasParameter("BANG 0\n    STRING hi 0 [length: 2]\n");
    var14.setLicense("goog.abstractMethod");
    java.util.List var22 = var14.getThrownTypes();
    com.google.javascript.rhino.JSTypeExpression var23 = var14.getBaseType();
    com.google.javascript.rhino.JSTypeExpression var25 = var14.getParameterType("InputId: InputId: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test116() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test116"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    boolean var4 = var1.recordNoShadow();
    boolean var6 = var1.recordReturnDescription("()");
    boolean var8 = var1.recordDeprecationReason("BANG");
    com.google.javascript.rhino.JSDocInfoBuilder var11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var12 = var11.recordExpose();
    boolean var13 = var11.recordExterns();
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    boolean var21 = var17.isArrayLit();
    com.google.javascript.rhino.Node var22 = var17.getNext();
    var11.markTypeNode(var17, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    boolean var35 = var32.isVarArgs();
    com.google.javascript.rhino.Node var37 = var32.getChildAtIndex(1);
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
    com.google.javascript.rhino.JSDocInfo var44 = var41.getJSDocInfo();
    com.google.javascript.rhino.Node var45 = var32.copyInformationFrom(var41);
    java.lang.Object var47 = null;
    var32.putProp(0, var47);
    com.google.javascript.rhino.JSTypeExpression var50 = new com.google.javascript.rhino.JSTypeExpression(var32, "()");
    com.google.javascript.rhino.JSTypeExpression var51 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var50);
    boolean var52 = var11.recordBaseType(var50);
    com.google.javascript.jscomp.MessageFormatter var53 = null;
    java.util.logging.Logger var54 = null;
    com.google.javascript.jscomp.LoggerErrorManager var55 = new com.google.javascript.jscomp.LoggerErrorManager(var53, var54);
    com.google.javascript.jscomp.Compiler var56 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var55);
    boolean var57 = var50.equals((java.lang.Object)var56);
    boolean var58 = var1.recordParameter("BANG 0 [source_file: Unversioned directory]\n", var50);
    com.google.javascript.rhino.JSDocInfoBuilder var60 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var61 = var60.recordExpose();
    boolean var63 = var60.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.InputId var70 = com.google.javascript.jscomp.NodeUtil.getInputId(var67);
    com.google.javascript.rhino.jstype.JSType var71 = null;
    var67.setJSType(var71);
    com.google.javascript.rhino.JSDocInfo var73 = var60.build(var67);
    java.lang.String var74 = var73.getFileOverview();
    boolean var75 = var73.hasFileOverview();
    boolean var76 = var73.hasReturnType();
    com.google.javascript.rhino.JSTypeExpression var77 = var73.getType();
    int var78 = var73.getParameterCount();
    com.google.javascript.rhino.Node var79 = var73.getAssociatedNode();
    com.google.javascript.rhino.Node var81 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var83 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var84 = var83.getNext();
    com.google.javascript.rhino.Node var85 = var81.srcrefTree(var83);
    com.google.javascript.rhino.InputId var86 = com.google.javascript.jscomp.NodeUtil.getInputId(var83);
    com.google.javascript.rhino.jstype.JSType var87 = null;
    var83.setJSType(var87);
    boolean var89 = var83.isBlock();
    com.google.javascript.rhino.Node var90 = var83.getNext();
    boolean var91 = var83.isFromExterns();
    var73.setAssociatedNode(var83);
    com.google.javascript.rhino.JSDocInfo.Visibility var93 = var73.getVisibility();
    boolean var94 = var1.recordVisibility(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == true);

  }

  public void test117() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test117"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    var18.unregisterPropertyOnType("Unversioned directory", var20);
    var18.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = var28.getNext();
    com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
    boolean var31 = var28.isVarArgs();
    boolean var32 = var28.isFor();
    boolean var33 = var28.isNumber();
    com.google.javascript.rhino.Node var34 = var28.getNext();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    com.google.javascript.rhino.Node var43 = var38.getChildAtIndex(1);
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.JSDocInfo var50 = var47.getJSDocInfo();
    com.google.javascript.rhino.Node var51 = var38.copyInformationFrom(var47);
    java.lang.Object var53 = null;
    var38.putProp(0, var53);
    com.google.javascript.rhino.JSTypeExpression var56 = new com.google.javascript.rhino.JSTypeExpression(var38, "()");
    com.google.javascript.rhino.jstype.StaticScope var57 = null;
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var59.unregisterPropertyOnType("Unversioned directory", var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    boolean var65 = var59.canPropertyBeDefined(var63, "BANG");
    com.google.javascript.rhino.jstype.JSType var66 = null;
    com.google.javascript.rhino.jstype.JSType[] var67 = new com.google.javascript.rhino.jstype.JSType[] { var66};
    com.google.javascript.rhino.Node var68 = var59.createParameters(var67);
    com.google.javascript.rhino.jstype.JSType var69 = var56.evaluate(var57, var59);
    com.google.javascript.rhino.jstype.JSType var70 = var69.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var71 = var70.dereference();
    boolean var72 = var70.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var73 = var18.createEnumType("STRING hi 0 [length: 2]\n", var28, var70);
    java.lang.String var74 = var73.getDisplayName();
    com.google.javascript.rhino.Node var75 = var73.getSource();
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.stringKey("hi!");
    boolean var78 = var10.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var73, var77);
    boolean var79 = var73.isDateType();
    boolean var80 = var73.matchesNumberContext();
    com.google.javascript.rhino.Node var81 = var73.getSource();
    java.util.Set var82 = var73.getElements();
    com.google.javascript.rhino.jstype.ParameterizedType var83 = var73.toMaybeParameterizedType();
    java.lang.String var84 = var73.getDisplayName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var74.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var84.equals("STRING hi 0 [length: 2]\n"));

  }

  public void test118() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test118"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    java.lang.String var57 = var56.getDisplayName();
    com.google.javascript.rhino.Node var58 = var56.getSource();
    com.google.javascript.rhino.ErrorReporter var59 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var59);
    com.google.javascript.rhino.jstype.JSType var62 = null;
    var60.unregisterPropertyOnType("Unversioned directory", var62);
    com.google.javascript.rhino.jstype.JSType var64 = null;
    com.google.javascript.jscomp.JSModule var66 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var67 = var66.getDependencies();
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.block(var67);
    com.google.javascript.rhino.jstype.FunctionType var69 = var60.createFunctionTypeWithVarArgs(var64, var67);
    boolean var70 = var69.hasAnyTemplateInternal();
    java.lang.Iterable var71 = var69.getAllExtendedInterfaces();
    boolean var72 = var56.isSubtype((com.google.javascript.rhino.jstype.JSType)var69);
    com.google.javascript.rhino.Node var73 = var69.getParametersNode();
    boolean var74 = var69.isNumber();
    boolean var75 = var69.isGlobalThisType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var57.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test119() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test119"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.Node.newString(1, "enum{STRING hi 0 [length: 2]\n}");
    boolean var3 = var2.isNoSideEffectsCall();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test120() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test120"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    boolean var62 = var58.isPropertyTypeInferred("");
    com.google.javascript.rhino.jstype.EnumElementType var63 = var58.toMaybeEnumElementType();
    com.google.javascript.rhino.jstype.FunctionType var64 = var58.getConstructor();
    com.google.javascript.rhino.jstype.JSType var66 = var58.findPropertyType("function (): {1292906510}");
    com.google.javascript.rhino.jstype.ObjectType var67 = var58.getImplicitPrototype();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);

  }

  public void test121() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test121"); }


    com.google.javascript.jscomp.DependencyOptions var0 = new com.google.javascript.jscomp.DependencyOptions();
    com.google.javascript.jscomp.DependencyOptions var2 = var0.setDependencySorting(false);
    com.google.javascript.jscomp.DependencyOptions var4 = var2.setMoocherDropping(true);
    com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var6 = null;
    var5.setStripTypes(var6);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var9 = var8.getDirectedGraphNodes();
    java.util.List var10 = var8.getEdges();
    var5.setManageClosureDependencies(var10);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.script(var10);
    com.google.javascript.jscomp.DependencyOptions var13 = var2.setEntryPoints((java.util.Collection)var10);
    com.google.javascript.jscomp.DependencyOptions var15 = var13.setDependencyPruning(false);
    com.google.javascript.jscomp.DependencyOptions var17 = var15.setDependencySorting(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test122() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test122"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setShadowVariables(false);
    com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var14 = null;
    var13.setStripTypes(var14);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var16 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var17 = var16.getDirectedGraphNodes();
    java.util.List var18 = var16.getEdges();
    var13.setManageClosureDependencies(var18);
    boolean var20 = var13.isExternExportsEnabled();
    var13.setCollapsePropertiesOnExternTypes(false);
    var13.setTransformAMDToCJSModules(false);
    var13.setInlineConstantVars(true);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var27 = var13.getLanguageIn();
    com.google.javascript.jscomp.CompilerOptions var28 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var29 = null;
    var28.setStripTypes(var29);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var31 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var32 = var31.getDirectedGraphNodes();
    java.util.List var33 = var31.getEdges();
    var28.setManageClosureDependencies(var33);
    var28.setDevirtualizePrototypeMethods(true);
    var28.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions var39 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var40 = null;
    var39.setBrokenClosureRequiresLevel(var40);
    var39.setLocale("");
    var39.setLineBreak(false);
    com.google.javascript.jscomp.CompilerOptions var46 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var47 = null;
    var46.setStripTypes(var47);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var49 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var50 = var49.getDirectedGraphNodes();
    java.util.List var51 = var49.getEdges();
    var46.setManageClosureDependencies(var51);
    boolean var53 = var46.isExternExportsEnabled();
    var46.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var58 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var60 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var61 = com.google.javascript.jscomp.JSError.make(var58, var60);
    int var62 = var61.getCharno();
    com.google.javascript.jscomp.CheckLevel var63 = var61.getDefaultLevel();
    var46.setReportUnknownTypes(var63);
    var39.setBrokenClosureRequiresLevel(var63);
    var28.setCheckUnreachableCode(var63);
    var13.setReportUnknownTypes(var63);
    var0.setCheckProvides(var63);
    var0.setDeadAssignmentElimination(false);
    var0.setCommonJSModulePathPrefix("function (): {1852005172}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test123() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test123"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var12 = null;
    var0.setSourceMapDetailLevel(var12);
    var0.setCollapseAnonymousFunctions(false);
    boolean var16 = var0.getInferTypes();
    var0.setMarkAsCompiled(false);
    var0.setDeadAssignmentElimination(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test124() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test124"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.isVarArgs();
    boolean var8 = var4.isOptionalArg();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(0, var4, var9);
    var9.setSourceEncodedPositionForTree(0);
    com.google.javascript.rhino.Node var13 = var9.cloneNode();
    boolean var14 = var9.isNumber();
    var9.detachChildren();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.not(var9);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test125() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test125"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var3 = null;
    var2.setStripTypes(var3);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var6 = var5.getDirectedGraphNodes();
    java.util.List var7 = var5.getEdges();
    var2.setManageClosureDependencies(var7);
    com.google.javascript.rhino.JSDocInfoBuilder var10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var11 = var10.recordExpose();
    boolean var13 = var10.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.InputId var20 = com.google.javascript.jscomp.NodeUtil.getInputId(var17);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    var17.setJSType(var21);
    com.google.javascript.rhino.JSDocInfo var23 = var10.build(var17);
    java.lang.String var24 = var23.getFileOverview();
    java.util.Set var25 = var23.getModifies();
    java.util.List var26 = var23.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var27 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var28 = null;
    var27.setStripTypes(var28);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var31 = var30.getDirectedGraphNodes();
    java.util.List var32 = var30.getEdges();
    var27.setManageClosureDependencies(var32);
    var27.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var27.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var39 = null;
    var27.setSourceMapDetailLevel(var39);
    var1.<com.google.javascript.jscomp.SourceFile>initModules(var7, var26, var27);
    var27.setNameReferenceGraphPath("InputId: ");
    var27.setProcessObjectPropertyString(false);
    com.google.javascript.jscomp.CompilerOptions var47 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var48 = null;
    var47.setStripTypes(var48);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var51 = var50.getDirectedGraphNodes();
    java.util.List var52 = var50.getEdges();
    var47.setManageClosureDependencies(var52);
    var47.setDevirtualizePrototypeMethods(true);
    var47.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions var58 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var59 = null;
    var58.setBrokenClosureRequiresLevel(var59);
    var58.setLocale("");
    var58.setLineBreak(false);
    com.google.javascript.jscomp.CompilerOptions var65 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var66 = null;
    var65.setStripTypes(var66);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var68 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var69 = var68.getDirectedGraphNodes();
    java.util.List var70 = var68.getEdges();
    var65.setManageClosureDependencies(var70);
    boolean var72 = var65.isExternExportsEnabled();
    var65.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var77 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var79 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var80 = com.google.javascript.jscomp.JSError.make(var77, var79);
    int var81 = var80.getCharno();
    com.google.javascript.jscomp.CheckLevel var82 = var80.getDefaultLevel();
    var65.setReportUnknownTypes(var82);
    var58.setBrokenClosureRequiresLevel(var82);
    var47.setCheckUnreachableCode(var82);
    boolean var87 = var82.equals((java.lang.Object)(byte)10);
    com.google.javascript.jscomp.DiagnosticType var89 = com.google.javascript.jscomp.DiagnosticType.make("", var82, "OFF");
    java.lang.Class var90 = var82.getDeclaringClass();
    int var91 = var82.ordinal();
    var27.setCheckMissingGetCssNameLevel(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 0);

  }

  public void test126() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test126"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    boolean var62 = var58.isPropertyTypeInferred("");
    com.google.javascript.rhino.jstype.EnumElementType var63 = var58.toMaybeEnumElementType();
    com.google.javascript.rhino.jstype.JSType var64 = var58.autoboxesTo();
    int var65 = var58.getPropertiesCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2147483647);

  }

  public void test127() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test127"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    boolean var15 = var1.shouldParseDocumentation();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test128() {}
//   public void test128() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test128"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getDependencies();
//     com.google.javascript.jscomp.SourceAst var3 = null;
//     com.google.javascript.rhino.InputId var4 = null;
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3, var4, true);
//     com.google.javascript.jscomp.JSModule var7 = var6.getModule();
//     var1.add(var6);
//     var6.clearAst();
// 
//   }

  public void test129() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test129"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var38 = null;
    var37.setResolveMode(var38);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var40 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var37);
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var43 = null;
    var42.setResolveMode(var43);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var45 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var42);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var46 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var42);
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    com.google.javascript.rhino.Node var52 = var48.srcrefTree(var50);
    boolean var53 = var50.isVarArgs();
    com.google.javascript.rhino.Node var55 = var50.getChildAtIndex(1);
    com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var60 = var59.getNext();
    com.google.javascript.rhino.Node var61 = var57.srcrefTree(var59);
    com.google.javascript.rhino.JSDocInfo var62 = var59.getJSDocInfo();
    com.google.javascript.rhino.Node var63 = var50.copyInformationFrom(var59);
    java.lang.Object var65 = null;
    var50.putProp(0, var65);
    com.google.javascript.rhino.JSTypeExpression var68 = new com.google.javascript.rhino.JSTypeExpression(var50, "()");
    com.google.javascript.rhino.jstype.StaticScope var69 = null;
    com.google.javascript.rhino.ErrorReporter var70 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var70);
    com.google.javascript.rhino.jstype.JSType var73 = null;
    var71.unregisterPropertyOnType("Unversioned directory", var73);
    com.google.javascript.rhino.jstype.JSType var75 = null;
    boolean var77 = var71.canPropertyBeDefined(var75, "BANG");
    com.google.javascript.rhino.jstype.JSType var78 = null;
    com.google.javascript.rhino.jstype.JSType[] var79 = new com.google.javascript.rhino.jstype.JSType[] { var78};
    com.google.javascript.rhino.Node var80 = var71.createParameters(var79);
    com.google.javascript.rhino.jstype.JSType var81 = var68.evaluate(var69, var71);
    com.google.javascript.rhino.jstype.JSType var82 = var81.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var83 = var82.dereference();
    java.util.Collection var84 = var42.getDirectImplementors(var83);
    com.google.javascript.rhino.jstype.JSType var89 = var37.getType((com.google.javascript.rhino.jstype.StaticScope)var83, "hi!", "BANG 0\n    STRING hi 0 [length: 2]\n", 10, 10);
    boolean var90 = var24.declareType("goog.abstractMethod", (com.google.javascript.rhino.jstype.JSType)var83);
    boolean var91 = var83.isConstructor();
    boolean var92 = var83.isArrayType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test130() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test130"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    boolean var5 = var1.recordConsistentIdGenerator();
    boolean var6 = var1.recordNoSideEffects();
    boolean var7 = var1.recordInterface();
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    int var11 = var9.getSourceOffset();
    com.google.javascript.rhino.Node var12 = var9.removeFirstChild();
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = var16.getNext();
    boolean var18 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var16);
    int var19 = var16.getLength();
    com.google.javascript.rhino.Node var20 = null;
    boolean var21 = var16.hasChild(var20);
    com.google.javascript.rhino.Node var22 = var14.useSourceInfoIfMissingFromForTree(var16);
    var16.setSourceFileForTesting("Unversioned directory");
    boolean var25 = var16.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var26 = var16.getStaticSourceFile();
    com.google.javascript.rhino.Node var27 = var9.srcref(var16);
    boolean var28 = var16.isLocalResultCall();
    var1.markTypeNode(var16, 100, 0, 2, 21, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test131() {}
//   public void test131() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test131"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
//     com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
//     com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var7 = var6.getNext();
//     com.google.javascript.rhino.Node var8 = var4.srcrefTree(var6);
//     boolean var9 = var6.isVarArgs();
//     boolean var10 = var6.isOptionalArg();
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var12 = new com.google.javascript.rhino.Node(0, var6, var11);
//     var11.setSourceEncodedPositionForTree(0);
//     boolean var15 = var11.isHook();
//     boolean var16 = var11.isDefaultCase();
//     var1.validateCodeRoot(var11);
// 
//   }

  public void test132() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test132"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.JSDocInfo var6 = var3.getJSDocInfo();
    boolean var7 = var3.isScript();
    boolean var8 = var3.isLocalResultCall();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var9 = var3.getString();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test133() {}
//   public void test133() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test133"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     int var2 = var1.getErrorCount();
//     var1.setTypedPercent(10.0d);
//     double var5 = var1.getTypedPercent();
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     int var7 = var6.getErrorCount();
//     boolean var8 = var6.isIdeMode();
// 
//   }

  public void test134() {}
//   public void test134() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test134"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticGroup[] var1 = null;
//     com.google.javascript.jscomp.DiagnosticGroup var2 = new com.google.javascript.jscomp.DiagnosticGroup("hi!: BANG 0\n    STRING hi 0 [length: 2]\n", var1);
// 
//   }

  public void test135() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test135"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    boolean var16 = var10.isEnumElementType();
    boolean var17 = var10.isEnumElementType();
    boolean var19 = var10.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    boolean var20 = var10.isStringValueType();
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    var23.unregisterPropertyOnType("Unversioned directory", var25);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.jscomp.JSModule var29 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var30 = var29.getDependencies();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.block(var30);
    com.google.javascript.rhino.jstype.FunctionType var32 = var23.createFunctionTypeWithVarArgs(var27, var30);
    boolean var34 = var32.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var35 = var32.toMaybeEnumType();
    boolean var36 = var32.isNumber();
    java.lang.Iterable var37 = var32.getImplementedInterfaces();
    com.google.javascript.jscomp.ClosureCodingConvention var38 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var40 = var38.isConstantKey("2014/12/24 11:10");
    java.util.Collection var41 = var38.getAssertionFunctions();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    var45.setJSType(var46);
    boolean var48 = var45.isScript();
    com.google.javascript.rhino.Node var49 = var45.removeFirstChild();
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var53 = var52.isGetterDef();
    boolean var54 = var52.isAdd();
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isVarArgs();
    com.google.javascript.rhino.Node var63 = var58.getChildAtIndex(1);
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.JSDocInfo var70 = var67.getJSDocInfo();
    com.google.javascript.rhino.Node var71 = var58.copyInformationFrom(var67);
    java.lang.String var72 = var71.toStringTree();
    com.google.javascript.rhino.Node var74 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var76 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var77 = var76.getNext();
    com.google.javascript.rhino.Node var78 = var74.srcrefTree(var76);
    boolean var80 = var76.getBooleanProp(100);
    int var81 = var76.getSideEffectFlags();
    boolean var82 = var76.isDefaultCase();
    com.google.javascript.rhino.Node var83 = new com.google.javascript.rhino.Node(1, var52, var71, var76);
    java.lang.String var84 = var38.extractClassNameIfProvide(var45, var76);
    com.google.javascript.rhino.Node var86 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var87 = var86.isGetterDef();
    boolean var88 = var86.isNE();
    boolean var89 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var86);
    com.google.javascript.rhino.Node var90 = var45.clonePropsFrom(var86);
    boolean var91 = var10.defineDeclaredProperty("BANG 0\n    STRING hi 0 [length: 2]\n", (com.google.javascript.rhino.jstype.JSType)var32, var86);
    boolean var92 = var32.hasInstanceType();
    com.google.javascript.rhino.Node var93 = var32.getSource();
    boolean var94 = var32.isFunctionPrototypeType();
    boolean var95 = var32.canBeCalled();
    int var96 = var32.getMinArguments();
    boolean var97 = var32.isString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var72.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test136() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test136"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var1 = null;
    var0.setBrokenClosureRequiresLevel(var1);
    var0.setLocale("");
    com.google.javascript.rhino.JSDocInfoBuilder var6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var7 = var6.recordExpose();
    boolean var8 = var6.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var10 = null;
    boolean var11 = var6.recordParameter("Unversioned directory", var10);
    com.google.javascript.rhino.JSTypeExpression var12 = null;
    boolean var14 = var6.recordThrowDescription(var12, "");
    com.google.javascript.rhino.JSDocInfoBuilder var16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var17 = var16.recordExpose();
    boolean var19 = var16.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
    com.google.javascript.rhino.InputId var26 = com.google.javascript.jscomp.NodeUtil.getInputId(var23);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    var23.setJSType(var27);
    com.google.javascript.rhino.JSDocInfo var29 = var16.build(var23);
    java.lang.String var30 = var29.getFileOverview();
    java.util.Set var31 = var29.getModifies();
    boolean var32 = var6.recordSuppressions(var31);
    var0.setAliasableStrings(var31);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var34 = var0.getLanguageIn();
    var0.setOutputJsStringUsage(false);
    var0.setOptimizeCalls(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test137() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test137"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    com.google.javascript.rhino.jstype.JSType var35 = var34.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.dereference();
    boolean var37 = var36.isUnknownType();
    java.util.Set var38 = var36.getOwnPropertyNames();
    boolean var39 = var36.isNullType();
    boolean var40 = var36.isDateType();
    com.google.javascript.rhino.jstype.ObjectType var41 = var36.dereference();
    boolean var42 = var41.isNativeObjectType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test138() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test138"); }


    com.google.javascript.jscomp.SourceFile.Generator var1 = null;
    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromGenerator("module$", var1);
    java.lang.String var3 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "module$"+ "'", var3.equals("module$"));

  }

  public void test139() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test139"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.isVarArgs();
    boolean var8 = var4.isOptionalArg();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(0, var4, var9);
    boolean var11 = var10.isContinue();
    var10.putIntProp(0, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test140() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test140"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isVarArgs();
    boolean var11 = var7.isArrayLit();
    com.google.javascript.rhino.Node var12 = var7.getNext();
    var1.markTypeNode(var7, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isVarArgs();
    com.google.javascript.rhino.Node var27 = var22.getChildAtIndex(1);
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
    com.google.javascript.rhino.JSDocInfo var34 = var31.getJSDocInfo();
    com.google.javascript.rhino.Node var35 = var22.copyInformationFrom(var31);
    java.lang.Object var37 = null;
    var22.putProp(0, var37);
    com.google.javascript.rhino.JSTypeExpression var40 = new com.google.javascript.rhino.JSTypeExpression(var22, "()");
    com.google.javascript.rhino.JSTypeExpression var41 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var40);
    boolean var42 = var1.recordBaseType(var40);
    com.google.javascript.jscomp.MessageFormatter var43 = null;
    java.util.logging.Logger var44 = null;
    com.google.javascript.jscomp.LoggerErrorManager var45 = new com.google.javascript.jscomp.LoggerErrorManager(var43, var44);
    com.google.javascript.jscomp.Compiler var46 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var45);
    boolean var47 = var40.equals((java.lang.Object)var46);
    java.lang.String var48 = var46.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var49 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var50 = null;
    var49.setStripTypes(var50);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var52 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var53 = var52.getDirectedGraphNodes();
    java.util.List var54 = var52.getEdges();
    var49.setManageClosureDependencies(var54);
    var49.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var49.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var61 = null;
    var49.setSourceMapDetailLevel(var61);
    com.google.javascript.jscomp.CodingConvention var63 = var49.getCodingConvention();
    var49.setDefineToBooleanLiteral("", true);
    var46.initOptions(var49);
    var49.setRemoveUnusedPrototypeProperties(false);
    java.lang.Object var70 = var49.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + ""+ "'", var48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test141() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test141"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isVarArgs();
    boolean var11 = var7.isArrayLit();
    com.google.javascript.rhino.Node var12 = var7.getNext();
    var1.markTypeNode(var7, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isVarArgs();
    com.google.javascript.rhino.Node var27 = var22.getChildAtIndex(1);
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
    com.google.javascript.rhino.JSDocInfo var34 = var31.getJSDocInfo();
    com.google.javascript.rhino.Node var35 = var22.copyInformationFrom(var31);
    java.lang.Object var37 = null;
    var22.putProp(0, var37);
    com.google.javascript.rhino.JSTypeExpression var40 = new com.google.javascript.rhino.JSTypeExpression(var22, "()");
    com.google.javascript.rhino.JSTypeExpression var41 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var40);
    boolean var42 = var1.recordBaseType(var40);
    com.google.javascript.jscomp.MessageFormatter var43 = null;
    java.util.logging.Logger var44 = null;
    com.google.javascript.jscomp.LoggerErrorManager var45 = new com.google.javascript.jscomp.LoggerErrorManager(var43, var44);
    com.google.javascript.jscomp.Compiler var46 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var45);
    boolean var47 = var40.equals((java.lang.Object)var46);
    com.google.javascript.jscomp.Region var50 = var46.getSourceRegion("", 0);
    double var51 = var46.getProgress();
    com.google.javascript.jscomp.Compiler.IntermediateState var52 = var46.getState();
    com.google.javascript.rhino.Node var53 = var46.getRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);

  }

  public void test142() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test142"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    java.lang.String var61 = var58.getReferenceName();
    com.google.javascript.rhino.ErrorReporter var62 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var62);
    com.google.javascript.rhino.jstype.JSType var65 = null;
    var63.unregisterPropertyOnType("Unversioned directory", var65);
    com.google.javascript.rhino.jstype.JSType var67 = null;
    com.google.javascript.jscomp.JSModule var69 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var70 = var69.getDependencies();
    com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.block(var70);
    com.google.javascript.rhino.jstype.FunctionType var72 = var63.createFunctionTypeWithVarArgs(var67, var70);
    boolean var73 = var72.hasAnyTemplateInternal();
    java.lang.Iterable var74 = var72.getAllExtendedInterfaces();
    boolean var75 = var72.isNominalConstructor();
    boolean var76 = var58.isSubtype((com.google.javascript.rhino.jstype.JSType)var72);
    com.google.javascript.rhino.jstype.ObjectType var77 = var58.dereference();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var61.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test143() {}
//   public void test143() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test143"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
//     com.google.javascript.rhino.jstype.JSType var4 = var2.getType("");
//     com.google.javascript.rhino.jstype.JSTypeNative var5 = null;
//     com.google.javascript.rhino.jstype.FunctionType var6 = var2.getNativeFunctionType(var5);
// 
//   }

  public void test144() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test144"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    java.lang.Object var3 = var1.getProp(153);
    boolean var4 = var1.isVar();
    com.google.javascript.rhino.InputId var6 = new com.google.javascript.rhino.InputId("{proxy:{1743833346}}");
    java.lang.String var7 = var6.getIdName();
    var1.setInputId(var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.pos(var1);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "{proxy:{1743833346}}"+ "'", var7.equals("{proxy:{1743833346}}"));

  }

  public void test145() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test145"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    boolean var4 = var1.recordNoShadow();
    boolean var6 = var1.recordReturnDescription("()");
    boolean var8 = var1.recordDeprecationReason("BANG");
    com.google.javascript.rhino.JSDocInfoBuilder var11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var12 = var11.recordExpose();
    boolean var13 = var11.recordExterns();
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    boolean var21 = var17.isArrayLit();
    com.google.javascript.rhino.Node var22 = var17.getNext();
    var11.markTypeNode(var17, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    boolean var35 = var32.isVarArgs();
    com.google.javascript.rhino.Node var37 = var32.getChildAtIndex(1);
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
    com.google.javascript.rhino.JSDocInfo var44 = var41.getJSDocInfo();
    com.google.javascript.rhino.Node var45 = var32.copyInformationFrom(var41);
    java.lang.Object var47 = null;
    var32.putProp(0, var47);
    com.google.javascript.rhino.JSTypeExpression var50 = new com.google.javascript.rhino.JSTypeExpression(var32, "()");
    com.google.javascript.rhino.JSTypeExpression var51 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var50);
    boolean var52 = var11.recordBaseType(var50);
    com.google.javascript.jscomp.MessageFormatter var53 = null;
    java.util.logging.Logger var54 = null;
    com.google.javascript.jscomp.LoggerErrorManager var55 = new com.google.javascript.jscomp.LoggerErrorManager(var53, var54);
    com.google.javascript.jscomp.Compiler var56 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var55);
    boolean var57 = var50.equals((java.lang.Object)var56);
    boolean var58 = var1.recordParameter("BANG 0 [source_file: Unversioned directory]\n", var50);
    com.google.javascript.rhino.Node var59 = var50.getRoot();
    boolean var60 = var59.isVarArgs();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test146() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test146"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    boolean var57 = var56.matchesStringContext();
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var59.unregisterPropertyOnType("Unversioned directory", var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    com.google.javascript.jscomp.JSModule var65 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var66 = var65.getDependencies();
    com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.block(var66);
    com.google.javascript.rhino.jstype.FunctionType var68 = var59.createFunctionTypeWithVarArgs(var63, var66);
    boolean var69 = var68.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType.TypePair var70 = var56.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType)var68);
    com.google.javascript.rhino.Node var71 = var56.getSource();
    com.google.javascript.rhino.jstype.ObjectType var72 = var56.getParentScope();
    com.google.javascript.rhino.JSDocInfoBuilder var74 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var75 = var74.recordExpose();
    boolean var77 = var74.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var79 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var81 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var82 = var81.getNext();
    com.google.javascript.rhino.Node var83 = var79.srcrefTree(var81);
    com.google.javascript.rhino.InputId var84 = com.google.javascript.jscomp.NodeUtil.getInputId(var81);
    com.google.javascript.rhino.jstype.JSType var85 = null;
    var81.setJSType(var85);
    com.google.javascript.rhino.JSDocInfo var87 = var74.build(var81);
    java.lang.String var88 = var87.getFileOverview();
    boolean var89 = var87.hasType();
    boolean var90 = var72.equals((java.lang.Object)var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);

  }

  public void test147() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test147"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.isUnknownType();
    com.google.javascript.rhino.jstype.ObjectType.Property var71 = var31.getSlot("hi!");
    java.lang.String var72 = var31.getNormalizedReferenceName();
    java.util.List var73 = var31.getSubTypes();
    com.google.javascript.rhino.jstype.ObjectType var74 = var31.toObjectType();
    boolean var76 = var31.removeProperty("function (): {1096500211}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test148() {}
//   public void test148() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test148"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setChainCalls(true);
//     java.util.logging.Logger var3 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var4 = new com.google.javascript.jscomp.LoggerErrorManager(var3);
//     var0.setErrorHandler((com.google.javascript.jscomp.ErrorHandler)var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var4);
//     boolean var7 = var6.isIdeMode();
// 
//   }

  public void test149() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test149"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    int var4 = var2.getErrorCount();
    int var5 = var2.getErrorCount();
    double var6 = var2.getTypedPercent();
    com.google.javascript.jscomp.JSError[] var7 = var2.getErrors();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test150() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test150"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.returnNode();
    var0.setSourceFileForTesting("null(null)");
    boolean var3 = var0.isDo();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    com.google.javascript.rhino.Node var10 = var7.removeFirstChild();
    com.google.javascript.rhino.Node.AncestorIterable var11 = var10.getAncestors();
    var0.addChildrenToFront(var10);
    int var13 = var0.getSourcePosition();
    java.lang.String var14 = com.google.javascript.jscomp.NodeUtil.getSourceName(var0);
    com.google.javascript.rhino.Node var15 = var0.getParent();
    java.lang.Object var17 = null;
    var0.putProp(3, var17);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.nullNode();
    java.util.Set var20 = var19.getDirectives();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.NodeUtil.newExpr(var19);
    boolean var22 = var21.isNull();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.regexp(var0, var21);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "null(null)"+ "'", var14.equals("null(null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test151() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test151"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Set var16 = var14.getModifies();
    java.util.List var17 = var14.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getType();
    java.lang.String var19 = var14.getOriginalCommentString();
    boolean var20 = var14.hasEnumParameterType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test152() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test152"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isVarArgs();
    boolean var11 = var7.isArrayLit();
    com.google.javascript.rhino.Node var12 = var7.getNext();
    var1.markTypeNode(var7, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isVarArgs();
    com.google.javascript.rhino.Node var27 = var22.getChildAtIndex(1);
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
    com.google.javascript.rhino.JSDocInfo var34 = var31.getJSDocInfo();
    com.google.javascript.rhino.Node var35 = var22.copyInformationFrom(var31);
    java.lang.Object var37 = null;
    var22.putProp(0, var37);
    com.google.javascript.rhino.JSTypeExpression var40 = new com.google.javascript.rhino.JSTypeExpression(var22, "()");
    com.google.javascript.rhino.JSTypeExpression var41 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var40);
    boolean var42 = var1.recordBaseType(var40);
    com.google.javascript.jscomp.MessageFormatter var43 = null;
    java.util.logging.Logger var44 = null;
    com.google.javascript.jscomp.LoggerErrorManager var45 = new com.google.javascript.jscomp.LoggerErrorManager(var43, var44);
    com.google.javascript.jscomp.Compiler var46 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var45);
    boolean var47 = var40.equals((java.lang.Object)var46);
    java.lang.String var48 = var46.getAstDotGraph();
    com.google.javascript.jscomp.CompilerOptions var49 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var50 = null;
    var49.setStripTypes(var50);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var52 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var53 = var52.getDirectedGraphNodes();
    java.util.List var54 = var52.getEdges();
    var49.setManageClosureDependencies(var54);
    var49.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var49.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var61 = null;
    var49.setSourceMapDetailLevel(var61);
    com.google.javascript.jscomp.CodingConvention var63 = var49.getCodingConvention();
    var49.setDefineToBooleanLiteral("", true);
    var46.initOptions(var49);
    com.google.javascript.jscomp.NodeTraversal.Callback var68 = null;
    com.google.javascript.jscomp.NodeTraversal var69 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var46, var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + ""+ "'", var48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);

  }

  public void test153() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test153"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    boolean var62 = var58.isPropertyTypeInferred("");
    com.google.javascript.rhino.jstype.EnumElementType var63 = var58.toMaybeEnumElementType();
    boolean var64 = var58.hasReferenceName();
    boolean var65 = var58.isObject();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);

  }

  public void test154() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test154"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("OFF");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test155() {}
//   public void test155() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test155"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal var5 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var4);
//     java.lang.String var6 = var3.toSource();
// 
//   }

  public void test156() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test156"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var1 = com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.valueOf("null(null)");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test157() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test157"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.jstype.JSType var8 = var1.getType("2014/12/24 11:10");
    com.google.javascript.rhino.ErrorReporter var9 = var1.getErrorReporter();
    com.google.javascript.jscomp.ClosureCodingConvention var10 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var11 = null;
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    boolean var18 = var15.isOr();
    java.lang.String var19 = var10.extractClassNameIfRequire(var11, var15);
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var21.unregisterPropertyOnType("Unversioned directory", var23);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    com.google.javascript.jscomp.JSModule var27 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var28 = var27.getDependencies();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.block(var28);
    com.google.javascript.rhino.jstype.FunctionType var30 = var21.createFunctionTypeWithVarArgs(var25, var28);
    com.google.javascript.rhino.ErrorReporter var31 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var31);
    com.google.javascript.rhino.jstype.JSType var34 = null;
    var32.unregisterPropertyOnType("Unversioned directory", var34);
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.jscomp.JSModule var38 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var39 = var38.getDependencies();
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.block(var39);
    com.google.javascript.rhino.jstype.FunctionType var41 = var32.createFunctionTypeWithVarArgs(var36, var39);
    boolean var42 = var41.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var43 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var44 = var43.getDirectedGraphNodes();
    java.lang.Iterable var45 = var43.getDirectedGraphNodes();
    java.util.List var46 = var43.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var47 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var48 = null;
    var47.setStripTypes(var48);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var51 = var50.getDirectedGraphNodes();
    java.util.List var52 = var50.getEdges();
    var47.setManageClosureDependencies(var52);
    boolean var54 = var47.isExternExportsEnabled();
    var47.setCheckCaja(false);
    java.util.Set var57 = null;
    var47.setReplaceStringsReservedStrings(var57);
    var47.setAliasAllStrings(true);
    var47.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var63 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var64 = null;
    var63.setStripTypes(var64);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var66 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var67 = var66.getDirectedGraphNodes();
    java.util.List var68 = var66.getEdges();
    var63.setManageClosureDependencies(var68);
    boolean var70 = var63.isExternExportsEnabled();
    var63.setCheckCaja(false);
    var63.setGroupVariableDeclarations(true);
    java.util.Map var75 = var63.getDefineReplacements();
    var47.setPropertyInvalidationErrors(var75);
    var10.defineDelegateProxyPrototypeProperties(var21, (com.google.javascript.rhino.jstype.StaticScope)var41, var46, var75);
    var1.resolveTypesInScope((com.google.javascript.rhino.jstype.StaticScope)var41);
    com.google.javascript.rhino.JSDocInfo var79 = var41.getJSDocInfo();
    com.google.javascript.rhino.jstype.FunctionType var80 = var41.toMaybeFunctionType();
    int var81 = var80.getExtendedInterfacesCount();
    java.lang.Iterable var82 = var80.getExtendedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test158() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test158"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var13 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    com.google.javascript.rhino.Node var22 = var17.getChildAtIndex(1);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
    com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var26);
    java.lang.Object var32 = null;
    var17.putProp(0, var32);
    com.google.javascript.rhino.JSTypeExpression var35 = new com.google.javascript.rhino.JSTypeExpression(var17, "()");
    com.google.javascript.rhino.jstype.StaticScope var36 = null;
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    var38.unregisterPropertyOnType("Unversioned directory", var40);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    boolean var44 = var38.canPropertyBeDefined(var42, "BANG");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.Node var47 = var38.createParameters(var46);
    com.google.javascript.rhino.jstype.JSType var48 = var35.evaluate(var36, var38);
    boolean var49 = var13.addVarArgs(var48);
    boolean var50 = var48.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    var52.unregisterPropertyOnType("Unversioned directory", var54);
    com.google.javascript.rhino.jstype.JSType var56 = null;
    boolean var58 = var52.canPropertyBeDefined(var56, "BANG");
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.rhino.jstype.JSType[] var60 = new com.google.javascript.rhino.jstype.JSType[] { var59};
    com.google.javascript.rhino.Node var61 = var52.createParameters(var60);
    com.google.javascript.rhino.jstype.FunctionType var62 = var1.createConstructorType(var48, var60);
    com.google.javascript.rhino.jstype.JSType var64 = var62.getPropertyType("");
    com.google.javascript.jscomp.CompilerOptions var65 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var66 = null;
    var65.setStripTypes(var66);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var68 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var69 = var68.getDirectedGraphNodes();
    java.util.List var70 = var68.getEdges();
    var65.setManageClosureDependencies(var70);
    var65.setDevirtualizePrototypeMethods(true);
    var65.setCollapsePropertiesOnExternTypes(false);
    var65.setRemoveUnusedLocalVars(false);
    com.google.javascript.rhino.JSDocInfoBuilder var79 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var80 = var79.recordExpose();
    boolean var82 = var79.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var84 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var86 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var87 = var86.getNext();
    com.google.javascript.rhino.Node var88 = var84.srcrefTree(var86);
    com.google.javascript.rhino.InputId var89 = com.google.javascript.jscomp.NodeUtil.getInputId(var86);
    com.google.javascript.rhino.jstype.JSType var90 = null;
    var86.setJSType(var90);
    com.google.javascript.rhino.JSDocInfo var92 = var79.build(var86);
    java.lang.String var93 = var92.getFileOverview();
    java.util.Set var94 = var92.getModifies();
    java.util.List var95 = var92.getImplementedInterfaces();
    var65.setSourceMapLocationMappings(var95);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var62.setExtendedInterfaces(var95);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test159() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test159"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    var0.clearNodeAnnotations();
    com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var4 = var2.isConstantKey("2014/12/24 11:10");
    java.util.Collection var5 = var2.getAssertionFunctions();
    boolean var7 = var2.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isOptionalArg();
    java.lang.String var19 = var11.toString(false, false, true);
    java.util.List var20 = var2.identifyTypeDeclarationCall(var11);
    java.lang.String var21 = var2.getDelegateSuperclassName();
    java.lang.String var22 = var2.getDelegateSuperclassName();
    boolean var24 = var2.isSuperClassReference("");
    boolean var26 = var2.isSuperClassReference("(STRING hi 0 [length: 2]\n)");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
    com.google.javascript.rhino.JSDocInfo var34 = var31.getJSDocInfo();
    boolean var35 = var31.isWhile();
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var40 = var39.getNext();
    com.google.javascript.rhino.Node var41 = var37.srcrefTree(var39);
    int var42 = var41.getSourceOffset();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node((-1), var31, var41, 3, 2);
    boolean var46 = var2.isVarArgsParameter(var41);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.falseNode();
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var50 = var47.copyInformationFrom(var49);
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = var55.getNext();
    com.google.javascript.rhino.Node var57 = var53.srcrefTree(var55);
    boolean var58 = var55.isVarArgs();
    boolean var59 = var55.isOptionalArg();
    com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var61 = new com.google.javascript.rhino.Node(0, var55, var60);
    boolean var62 = var55.isNE();
    java.lang.String var63 = var2.extractClassNameIfRequire(var47, var55);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var64 = var0.getNodeDegree((java.lang.Object)var2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "BANG"+ "'", var19.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);

  }

  public void test160() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test160"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.script(var5);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.paramList(var5);
    boolean var9 = var8.hasOneChild();
    boolean var10 = var8.isAssignAdd();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test161() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test161"); }


    com.google.javascript.rhino.jstype.JSType var1 = null;
    com.google.javascript.rhino.jstype.SimpleSlot var3 = new com.google.javascript.rhino.jstype.SimpleSlot("", var1, false);
    com.google.javascript.rhino.jstype.JSType var4 = var3.getType();
    com.google.javascript.rhino.jstype.JSType var5 = var3.getType();
    com.google.javascript.rhino.jstype.JSType var6 = var3.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test162() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test162"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType var70 = var31.collapseUnion();
    boolean var71 = var31.matchesInt32Context();
    com.google.javascript.rhino.jstype.JSType var72 = var31.getReturnType();
    boolean var73 = var31.isNumberObjectType();
    boolean var74 = var31.isVoidType();
    com.google.javascript.rhino.jstype.ObjectType var75 = var31.getTypeOfThis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test163() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test163"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    var3.unregisterPropertyOnType("Unversioned directory", var5);
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.jscomp.JSModule var9 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var10 = var9.getDependencies();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.block(var10);
    com.google.javascript.rhino.jstype.FunctionType var12 = var3.createFunctionTypeWithVarArgs(var7, var10);
    boolean var14 = var12.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.FunctionBuilder var15 = var1.withInferredReturnType((com.google.javascript.rhino.jstype.JSType)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test164() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test164"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    var1.clearTemplateTypeNames();
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    var9.unregisterPropertyOnType("Unversioned directory", var11);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    com.google.javascript.jscomp.JSModule var15 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var16 = var15.getDependencies();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.block(var16);
    com.google.javascript.rhino.jstype.FunctionType var18 = var9.createFunctionTypeWithVarArgs(var13, var16);
    boolean var20 = var18.removeProperty("null(null)");
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var24 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var23);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var26.unregisterPropertyOnType("Unversioned directory", var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    boolean var32 = var26.canPropertyBeDefined(var30, "BANG");
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
    com.google.javascript.rhino.Node var35 = var26.createParameters(var34);
    boolean var36 = var24.addRequiredParams(var34);
    com.google.javascript.rhino.jstype.FunctionType var37 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var18, false, var34);
    boolean var38 = var18.isAllType();
    com.google.javascript.rhino.jstype.ObjectType.Property var40 = var18.getOwnSlot("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);

  }

  public void test165() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test165"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var4 = null;
    boolean var6 = var1.recordThrowDescription(var4, "()");
    com.google.javascript.rhino.JSTypeExpression var7 = null;
    boolean var9 = var1.recordThrowDescription(var7, "BANG 0");
    boolean var10 = var1.recordConstructor();
    boolean var11 = var1.recordInterface();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test166() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test166"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    com.google.javascript.rhino.JSTypeExpression var15 = var14.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test167() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test167"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    var0.pushEdgeAnnotations();
    java.lang.Iterable var3 = var0.getDirectedGraphNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var6 = var5.recordExpose();
    boolean var8 = var5.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.InputId var15 = com.google.javascript.jscomp.NodeUtil.getInputId(var12);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    var12.setJSType(var16);
    com.google.javascript.rhino.JSDocInfo var18 = var5.build(var12);
    java.lang.String var19 = var18.getFileOverview();
    java.util.Set var20 = var18.getModifies();
    java.util.List var21 = var18.getImplementedInterfaces();
    com.google.javascript.jscomp.graph.GraphNode var22 = var0.getNode((java.lang.Object)var18);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.Node var29 = var26.removeFirstChild();
    var29.setQuotedString();
    boolean var31 = var0.hasNode((java.lang.Object)var29);
    boolean var32 = var29.isExprResult();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.defaultCase(var29);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test168() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test168"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    java.util.Set var14 = var10.getOwnPropertyNames();
    boolean var15 = var10.isEmptyType();
    boolean var16 = var10.isNominalType();
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    var18.unregisterPropertyOnType("Unversioned directory", var20);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    com.google.javascript.jscomp.JSModule var24 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var25 = var24.getDependencies();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.block(var25);
    com.google.javascript.rhino.jstype.FunctionType var27 = var18.createFunctionTypeWithVarArgs(var22, var25);
    com.google.javascript.rhino.ErrorReporter var28 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var30 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var29);
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = var34.getNext();
    com.google.javascript.rhino.Node var36 = var32.srcrefTree(var34);
    boolean var37 = var34.isVarArgs();
    com.google.javascript.rhino.Node var39 = var34.getChildAtIndex(1);
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var44 = var43.getNext();
    com.google.javascript.rhino.Node var45 = var41.srcrefTree(var43);
    com.google.javascript.rhino.JSDocInfo var46 = var43.getJSDocInfo();
    com.google.javascript.rhino.Node var47 = var34.copyInformationFrom(var43);
    java.lang.Object var49 = null;
    var34.putProp(0, var49);
    com.google.javascript.rhino.JSTypeExpression var52 = new com.google.javascript.rhino.JSTypeExpression(var34, "()");
    com.google.javascript.rhino.jstype.StaticScope var53 = null;
    com.google.javascript.rhino.ErrorReporter var54 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var54);
    com.google.javascript.rhino.jstype.JSType var57 = null;
    var55.unregisterPropertyOnType("Unversioned directory", var57);
    com.google.javascript.rhino.jstype.JSType var59 = null;
    boolean var61 = var55.canPropertyBeDefined(var59, "BANG");
    com.google.javascript.rhino.jstype.JSType var62 = null;
    com.google.javascript.rhino.jstype.JSType[] var63 = new com.google.javascript.rhino.jstype.JSType[] { var62};
    com.google.javascript.rhino.Node var64 = var55.createParameters(var63);
    com.google.javascript.rhino.jstype.JSType var65 = var52.evaluate(var53, var55);
    boolean var66 = var30.addVarArgs(var65);
    boolean var67 = var65.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var68 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var69 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var68);
    com.google.javascript.rhino.jstype.JSType var71 = null;
    var69.unregisterPropertyOnType("Unversioned directory", var71);
    com.google.javascript.rhino.jstype.JSType var73 = null;
    boolean var75 = var69.canPropertyBeDefined(var73, "BANG");
    com.google.javascript.rhino.jstype.JSType var76 = null;
    com.google.javascript.rhino.jstype.JSType[] var77 = new com.google.javascript.rhino.jstype.JSType[] { var76};
    com.google.javascript.rhino.Node var78 = var69.createParameters(var77);
    com.google.javascript.rhino.jstype.FunctionType var79 = var18.createConstructorType(var65, var77);
    com.google.javascript.rhino.jstype.JSType var81 = var79.getPropertyType("");
    boolean var82 = var79.matchesNumberContext();
    com.google.javascript.rhino.jstype.JSType var83 = null;
    boolean var84 = var79.isEquivalentTo(var83);
    java.util.Set var85 = var79.getOwnPropertyNames();
    boolean var86 = var10.hasEqualCallType(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);

  }

  public void test169() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test169"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.returnNode();
    boolean var1 = var0.isArrayLit();
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    int var6 = var4.getSourceOffset();
    com.google.javascript.rhino.Node var7 = var4.cloneNode();
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    int var11 = var9.getSourceOffset();
    boolean var12 = var9.isAssignAdd();
    int var13 = var7.getIndexOfChild(var9);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.InputId var17 = var15.getInputId();
    com.google.javascript.rhino.Node var18 = var7.useSourceInfoFrom(var15);
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
    boolean var26 = var23.isVarArgs();
    boolean var27 = var23.isOptionalArg();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var29 = new com.google.javascript.rhino.Node(0, var23, var28);
    boolean var30 = var28.isQualifiedName();
    com.google.javascript.rhino.Node var31 = var28.cloneNode();
    com.google.javascript.rhino.Node var34 = new com.google.javascript.rhino.Node(153, var7, var31, 153, 1);
    boolean var35 = var0.isEquivalentToTyped(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);

  }

  public void test170() {}
//   public void test170() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test170"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = null;
//     com.google.javascript.jscomp.GoogleCodingConvention var1 = new com.google.javascript.jscomp.GoogleCodingConvention(var0);
//     java.lang.String var2 = var1.getAbstractMethodName();
// 
//   }

  public void test171() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test171"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var2 = var1.getNext();
    boolean var3 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var1);
    boolean var4 = var1.isTry();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test172() {}
//   public void test172() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test172"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
//     com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
//     com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var8 = null;
//     var7.setStripTypes(var8);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var11 = var10.getDirectedGraphNodes();
//     java.util.List var12 = var10.getEdges();
//     var7.setManageClosureDependencies(var12);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.script(var12);
//     var6.traverseRoots(var12);
//     boolean var16 = var6.hasScope();
//     int var17 = var6.getLineNumber();
//     boolean var18 = var6.hasScope();
//     com.google.javascript.jscomp.Compiler var19 = var6.getCompiler();
//     com.google.javascript.rhino.Node var20 = var6.getScopeRoot();
// 
//   }

  public void test173() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test173"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.wasEmptyNode();
    com.google.javascript.rhino.JSDocInfoBuilder var8 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var9 = var8.recordExpose();
    boolean var11 = var8.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    com.google.javascript.rhino.InputId var18 = com.google.javascript.jscomp.NodeUtil.getInputId(var15);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    var15.setJSType(var19);
    com.google.javascript.rhino.JSDocInfo var21 = var8.build(var15);
    java.lang.String var22 = var21.getFileOverview();
    java.util.Set var23 = var21.getModifies();
    java.util.List var24 = var21.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var25 = var21.getType();
    boolean var26 = var21.isConsistentIdGenerator();
    java.lang.String var27 = var21.getDeprecationReason();
    var3.setJSDocInfo(var21);
    boolean var29 = var21.hasModifies();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "2014/12/24 11:10"+ "'", var27.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test174() {}
//   public void test174() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test174"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     boolean var2 = var0.hasNode((java.lang.Object)1);
//     var0.pushNodeAnnotations();
//     com.google.javascript.jscomp.CompilerOptions var4 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var5 = null;
//     var4.setStripTypes(var5);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var7 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var8 = var7.getDirectedGraphNodes();
//     java.util.List var9 = var7.getEdges();
//     var4.setManageClosureDependencies(var9);
//     boolean var11 = var4.isExternExportsEnabled();
//     var4.setCheckCaja(false);
//     var4.setTightenTypes(false);
//     var4.enableRuntimeTypeCheck("module$2014$12$24 11:10");
//     var4.setSkipAllPasses(true);
//     java.util.List var20 = var0.getNeighborNodes((java.lang.Object)true);
// 
//   }

  public void test175() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test175"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("");
    com.google.javascript.jscomp.CompilerInput var3 = var1.getByName("module$InputId: InputId: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test176() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test176"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var2 = var1.isGetterDef();
    boolean var3 = var1.isGetProp();
    int var4 = var1.getType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 153);

  }

  public void test177() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test177"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    boolean var7 = var1.recordNoSideEffects();
    boolean var8 = var1.recordNoSideEffects();
    boolean var9 = var1.recordConstancy();
    com.google.javascript.rhino.JSDocInfoBuilder var11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var12 = var11.recordExpose();
    boolean var14 = var11.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    com.google.javascript.rhino.InputId var21 = com.google.javascript.jscomp.NodeUtil.getInputId(var18);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var18.setJSType(var22);
    com.google.javascript.rhino.JSDocInfo var24 = var11.build(var18);
    com.google.javascript.rhino.JSDocInfoBuilder var26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var27 = var26.recordExpose();
    boolean var28 = var26.recordExterns();
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    boolean var35 = var32.isVarArgs();
    boolean var36 = var32.isArrayLit();
    com.google.javascript.rhino.Node var37 = var32.getNext();
    var26.markTypeNode(var32, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    boolean var50 = var47.isVarArgs();
    com.google.javascript.rhino.Node var52 = var47.getChildAtIndex(1);
    com.google.javascript.rhino.Node var54 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var57 = var56.getNext();
    com.google.javascript.rhino.Node var58 = var54.srcrefTree(var56);
    com.google.javascript.rhino.JSDocInfo var59 = var56.getJSDocInfo();
    com.google.javascript.rhino.Node var60 = var47.copyInformationFrom(var56);
    java.lang.Object var62 = null;
    var47.putProp(0, var62);
    com.google.javascript.rhino.JSTypeExpression var65 = new com.google.javascript.rhino.JSTypeExpression(var47, "()");
    com.google.javascript.rhino.JSTypeExpression var66 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var65);
    boolean var67 = var26.recordBaseType(var65);
    boolean var68 = var11.recordTypedef(var65);
    boolean var69 = var65.isVarArgs();
    boolean var70 = var1.recordThrowType(var65);
    boolean var72 = var1.addReference("(hi)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);

  }

  public void test178() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test178"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var7 = var5.getBooleanProp((-1));
    var5.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var11 = new com.google.javascript.rhino.JSTypeExpression(var5, "goog.abstractMethod");
    boolean var12 = var0.isPrototypeAlias(var5);
    java.lang.String var13 = var0.getAbstractMethodName();
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    com.google.javascript.rhino.Node var22 = var17.getChildAtIndex(1);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
    com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var26);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast var31 = var0.getObjectLiteralCast(var17);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "goog.abstractMethod"+ "'", var13.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test179() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test179"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var19 = var14.hasParameter("BANG 0\n    STRING hi 0 [length: 2]\n");
    var14.setLicense("goog.abstractMethod");
    boolean var22 = var14.isConstant();
    boolean var24 = var14.hasDescriptionForParameter("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    java.lang.String var25 = var14.getLicense();
    java.lang.String var26 = var14.getBlockDescription();
    boolean var27 = var14.isOverride();
    boolean var28 = var14.hasBaseType();
    java.lang.String var29 = var14.getFileOverview();
    boolean var30 = var14.hasModifies();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "goog.abstractMethod"+ "'", var25.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test180() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test180"); }


    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.Node.newString(2, "hi!", (-1), (-1));
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    boolean var10 = var9.hasChildren();
    boolean var11 = var5.hasChild(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    boolean var19 = var15.getBooleanProp(100);
    int var20 = var15.getSideEffectFlags();
    boolean var21 = var15.isCall();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.labelName("ECMASCRIPT3");
    com.google.javascript.rhino.Node var26 = new com.google.javascript.rhino.Node((-1), var9, var15, var23, 0, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test181() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test181"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.disabled("", "DiagnosticGroup<hi!>");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test182() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test182"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    java.lang.String var61 = var58.getReferenceName();
    boolean var62 = var58.matchesObjectContext();
    com.google.javascript.rhino.jstype.JSType var64 = var58.getPropertyType("function (): {2142004661}");
    java.lang.Iterable var65 = var58.getCtorImplementedInterfaces();
    com.google.javascript.rhino.jstype.ObjectType.Property var67 = var58.getSlot("{proxy:{1743833346}}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var61.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);

  }

  public void test183() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test183"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setChainCalls(true);
    var0.setGenerateExports(true);
    com.google.javascript.jscomp.DiagnosticGroup var5 = null;
    com.google.javascript.jscomp.CompilerOptions var6 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var7 = null;
    var6.setStripTypes(var7);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var9 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var10 = var9.getDirectedGraphNodes();
    java.util.List var11 = var9.getEdges();
    var6.setManageClosureDependencies(var11);
    boolean var13 = var6.isExternExportsEnabled();
    var6.setCheckCaja(false);
    java.util.Set var16 = null;
    var6.setReplaceStringsReservedStrings(var16);
    com.google.javascript.rhino.JSDocInfoBuilder var19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var20 = var19.recordExpose();
    boolean var22 = var19.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.InputId var29 = com.google.javascript.jscomp.NodeUtil.getInputId(var26);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    var26.setJSType(var30);
    com.google.javascript.rhino.JSDocInfo var32 = var19.build(var26);
    java.lang.String var33 = var32.getFileOverview();
    java.util.Set var34 = var32.getModifies();
    var6.setReplaceStringsReservedStrings(var34);
    var6.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var40 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var42 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var43 = com.google.javascript.jscomp.JSError.make(var40, var42);
    int var44 = var43.getCharno();
    com.google.javascript.jscomp.CheckLevel var45 = var43.getDefaultLevel();
    var6.setCheckGlobalThisLevel(var45);
    com.google.javascript.jscomp.CompilerOptions var47 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var48 = null;
    var47.setStripTypes(var48);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var51 = var50.getDirectedGraphNodes();
    java.util.List var52 = var50.getEdges();
    var47.setManageClosureDependencies(var52);
    boolean var54 = var47.isExternExportsEnabled();
    var47.setCheckCaja(false);
    java.util.Set var57 = null;
    var47.setReplaceStringsReservedStrings(var57);
    com.google.javascript.rhino.JSDocInfoBuilder var60 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var61 = var60.recordExpose();
    boolean var63 = var60.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.InputId var70 = com.google.javascript.jscomp.NodeUtil.getInputId(var67);
    com.google.javascript.rhino.jstype.JSType var71 = null;
    var67.setJSType(var71);
    com.google.javascript.rhino.JSDocInfo var73 = var60.build(var67);
    java.lang.String var74 = var73.getFileOverview();
    java.util.Set var75 = var73.getModifies();
    var47.setReplaceStringsReservedStrings(var75);
    var47.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var81 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var83 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var84 = com.google.javascript.jscomp.JSError.make(var81, var83);
    int var85 = var84.getCharno();
    com.google.javascript.jscomp.CheckLevel var86 = var84.getDefaultLevel();
    var47.setCheckGlobalThisLevel(var86);
    var6.setBrokenClosureRequiresLevel(var86);
    var0.setWarningLevel(var5, var86);
    var0.setReplaceStringsPlaceholderToken("BANG 0 [source_file: Unversioned directory]\n");
    var0.setCheckCaja(false);
    var0.setSyntheticBlockEndMarker("BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setNameReferenceGraphPath("BANG 0 [source_file: Unversioned directory]\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test184() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test184"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    boolean var15 = var8.isTry();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test185() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test185"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    boolean var57 = var56.matchesStringContext();
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var59.unregisterPropertyOnType("Unversioned directory", var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    com.google.javascript.jscomp.JSModule var65 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var66 = var65.getDependencies();
    com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.block(var66);
    com.google.javascript.rhino.jstype.FunctionType var68 = var59.createFunctionTypeWithVarArgs(var63, var66);
    boolean var69 = var68.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType.TypePair var70 = var56.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType)var68);
    boolean var72 = var56.isPropertyInExterns("goog.exportSymbol");
    boolean var73 = var56.isOrdinaryFunction();
    boolean var74 = var56.isInterface();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);

  }

  public void test186() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test186"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    boolean var26 = var24.removeProperty("null(null)");
    var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
    int var28 = var24.getExtendedInterfacesCount();
    java.util.Set var29 = var24.getOwnPropertyNames();
    java.lang.Iterable var30 = var24.getCtorImplementedInterfaces();
    com.google.javascript.rhino.ErrorReporter var31 = null;
    com.google.javascript.rhino.jstype.StaticScope var32 = null;
    com.google.javascript.rhino.jstype.JSType var33 = var24.resolve(var31, var32);
    com.google.javascript.rhino.jstype.JSType var34 = var24.getIndexType();
    boolean var35 = var24.isNativeObjectType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test187() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test187"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    var1.clearTemplateTypeNames();
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    var9.unregisterPropertyOnType("Unversioned directory", var11);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    com.google.javascript.jscomp.JSModule var15 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var16 = var15.getDependencies();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.block(var16);
    com.google.javascript.rhino.jstype.FunctionType var18 = var9.createFunctionTypeWithVarArgs(var13, var16);
    boolean var20 = var18.removeProperty("null(null)");
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var24 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var23);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var26.unregisterPropertyOnType("Unversioned directory", var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    boolean var32 = var26.canPropertyBeDefined(var30, "BANG");
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
    com.google.javascript.rhino.Node var35 = var26.createParameters(var34);
    boolean var36 = var24.addRequiredParams(var34);
    com.google.javascript.rhino.jstype.FunctionType var37 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var18, false, var34);
    boolean var38 = var37.isInstanceType();
    com.google.javascript.rhino.jstype.ParameterizedType var39 = var37.toMaybeParameterizedType();
    com.google.javascript.rhino.Node var40 = null;
    var37.setSource(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);

  }

  public void test188() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test188"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    com.google.javascript.rhino.jstype.JSType var35 = var34.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.dereference();
    boolean var37 = var36.isUnknownType();
    java.util.Set var38 = var36.getOwnPropertyNames();
    boolean var39 = var36.isNullType();
    com.google.javascript.rhino.jstype.ObjectType var40 = var36.dereference();
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    var42.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = var52.getNext();
    com.google.javascript.rhino.Node var54 = var50.srcrefTree(var52);
    boolean var55 = var52.isVarArgs();
    boolean var56 = var52.isFor();
    boolean var57 = var52.isNumber();
    com.google.javascript.rhino.Node var58 = var52.getNext();
    com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var62 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var63 = var62.getNext();
    com.google.javascript.rhino.Node var64 = var60.srcrefTree(var62);
    boolean var65 = var62.isVarArgs();
    com.google.javascript.rhino.Node var67 = var62.getChildAtIndex(1);
    com.google.javascript.rhino.Node var69 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var71 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var72 = var71.getNext();
    com.google.javascript.rhino.Node var73 = var69.srcrefTree(var71);
    com.google.javascript.rhino.JSDocInfo var74 = var71.getJSDocInfo();
    com.google.javascript.rhino.Node var75 = var62.copyInformationFrom(var71);
    java.lang.Object var77 = null;
    var62.putProp(0, var77);
    com.google.javascript.rhino.JSTypeExpression var80 = new com.google.javascript.rhino.JSTypeExpression(var62, "()");
    com.google.javascript.rhino.jstype.StaticScope var81 = null;
    com.google.javascript.rhino.ErrorReporter var82 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var83 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var82);
    com.google.javascript.rhino.jstype.JSType var85 = null;
    var83.unregisterPropertyOnType("Unversioned directory", var85);
    com.google.javascript.rhino.jstype.JSType var87 = null;
    boolean var89 = var83.canPropertyBeDefined(var87, "BANG");
    com.google.javascript.rhino.jstype.JSType var90 = null;
    com.google.javascript.rhino.jstype.JSType[] var91 = new com.google.javascript.rhino.jstype.JSType[] { var90};
    com.google.javascript.rhino.Node var92 = var83.createParameters(var91);
    com.google.javascript.rhino.jstype.JSType var93 = var80.evaluate(var81, var83);
    com.google.javascript.rhino.jstype.JSType var94 = var93.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var95 = var94.dereference();
    boolean var96 = var94.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var97 = var42.createEnumType("STRING hi 0 [length: 2]\n", var52, var94);
    com.google.javascript.rhino.jstype.BooleanLiteralSet var98 = var97.getPossibleToBooleanOutcomes();
    com.google.javascript.rhino.jstype.JSType.TypePair var99 = var40.getTypesUnderShallowEquality((com.google.javascript.rhino.jstype.JSType)var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test189() {}
//   public void test189() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test189"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getProvides();
//     java.util.List var3 = var1.getRequires();
//     java.util.Set var4 = var1.getAllDependencies();
//     java.lang.String var5 = var1.toString();
//     com.google.javascript.jscomp.SourceFile var6 = null;
//     var1.addFirst(var6);
// 
//   }

  public void test190() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test190"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    boolean var10 = var5.isScript();
    java.lang.Iterable var11 = var5.siblings();
    int var12 = var5.getLineno();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test191() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test191"); }


    long var1 = com.google.javascript.rhino.ScriptRuntime.testUint32String("InputId: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1L));

  }

  public void test192() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test192"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var12 = null;
    var0.setSourceMapDetailLevel(var12);
    var0.setCollapseAnonymousFunctions(false);
    var0.setRemoveDeadCode(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test193() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test193"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var2 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = var6.getNext();
    com.google.javascript.rhino.Node var8 = var4.srcrefTree(var6);
    boolean var9 = var6.isVarArgs();
    com.google.javascript.rhino.Node var11 = var6.getChildAtIndex(1);
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    com.google.javascript.rhino.JSDocInfo var18 = var15.getJSDocInfo();
    com.google.javascript.rhino.Node var19 = var6.copyInformationFrom(var15);
    java.lang.Object var21 = null;
    var6.putProp(0, var21);
    com.google.javascript.rhino.JSTypeExpression var24 = new com.google.javascript.rhino.JSTypeExpression(var6, "()");
    com.google.javascript.rhino.jstype.StaticScope var25 = null;
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
    com.google.javascript.rhino.jstype.JSType var29 = null;
    var27.unregisterPropertyOnType("Unversioned directory", var29);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    boolean var33 = var27.canPropertyBeDefined(var31, "BANG");
    com.google.javascript.rhino.jstype.JSType var34 = null;
    com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var34};
    com.google.javascript.rhino.Node var36 = var27.createParameters(var35);
    com.google.javascript.rhino.jstype.JSType var37 = var24.evaluate(var25, var27);
    boolean var38 = var2.addVarArgs(var37);
    com.google.javascript.jscomp.ClosureCodingConvention var39 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var41 = var39.isConstantKey("2014/12/24 11:10");
    java.util.Collection var42 = var39.getAssertionFunctions();
    boolean var44 = var39.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = var48.getNext();
    com.google.javascript.rhino.Node var50 = var46.srcrefTree(var48);
    boolean var51 = var48.isVarArgs();
    boolean var52 = var48.isOptionalArg();
    java.lang.String var56 = var48.toString(false, false, true);
    java.util.List var57 = var39.identifyTypeDeclarationCall(var48);
    java.lang.String var58 = var39.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var61 = var60.getNext();
    int var62 = var60.getSourceOffset();
    com.google.javascript.rhino.Node var63 = var60.cloneNode();
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var66 = var65.getNext();
    int var67 = var65.getSourceOffset();
    com.google.javascript.rhino.Node var68 = var65.cloneNode();
    var63.addChildrenToFront(var68);
    com.google.javascript.jscomp.CodingConvention.Bind var71 = var39.describeFunctionBind(var63, true);
    com.google.javascript.rhino.Node var72 = var2.newOptionalParameterFromNode(var63);
    java.lang.Iterable var73 = var63.siblings();
    boolean var74 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "BANG"+ "'", var56.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);

  }

  public void test194() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test194"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    java.lang.String var59 = var58.getReferenceName();
    boolean var60 = var58.isEnumElementType();
    boolean var61 = var58.isNullable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var59.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);

  }

  public void test195() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test195"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var13 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    com.google.javascript.rhino.Node var22 = var17.getChildAtIndex(1);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
    com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var26);
    java.lang.Object var32 = null;
    var17.putProp(0, var32);
    com.google.javascript.rhino.JSTypeExpression var35 = new com.google.javascript.rhino.JSTypeExpression(var17, "()");
    com.google.javascript.rhino.jstype.StaticScope var36 = null;
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    var38.unregisterPropertyOnType("Unversioned directory", var40);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    boolean var44 = var38.canPropertyBeDefined(var42, "BANG");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.Node var47 = var38.createParameters(var46);
    com.google.javascript.rhino.jstype.JSType var48 = var35.evaluate(var36, var38);
    boolean var49 = var13.addVarArgs(var48);
    boolean var50 = var48.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    var52.unregisterPropertyOnType("Unversioned directory", var54);
    com.google.javascript.rhino.jstype.JSType var56 = null;
    boolean var58 = var52.canPropertyBeDefined(var56, "BANG");
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.rhino.jstype.JSType[] var60 = new com.google.javascript.rhino.jstype.JSType[] { var59};
    com.google.javascript.rhino.Node var61 = var52.createParameters(var60);
    com.google.javascript.rhino.jstype.FunctionType var62 = var1.createConstructorType(var48, var60);
    com.google.javascript.rhino.jstype.JSType var64 = var62.getPropertyType("");
    boolean var65 = var62.isStringObjectType();
    com.google.javascript.rhino.jstype.FunctionType var66 = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType((com.google.javascript.rhino.jstype.JSType)var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test196() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test196"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    boolean var9 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var7);
    int var10 = var7.getLength();
    com.google.javascript.rhino.Node var11 = null;
    boolean var12 = var7.hasChild(var11);
    com.google.javascript.rhino.Node var13 = var5.useSourceInfoIfMissingFromForTree(var7);
    var7.setSourceFileForTesting("Unversioned directory");
    boolean var16 = var7.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var17 = var7.getStaticSourceFile();
    com.google.javascript.jscomp.DiagnosticType var20 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
    com.google.javascript.jscomp.MessageFormatter var21 = null;
    java.util.logging.Logger var22 = null;
    com.google.javascript.jscomp.LoggerErrorManager var23 = new com.google.javascript.jscomp.LoggerErrorManager(var21, var22);
    com.google.javascript.jscomp.Compiler var24 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var23);
    com.google.javascript.jscomp.Scope var25 = var24.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var26 = null;
    com.google.javascript.jscomp.NodeTraversal var27 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var24, var26);
    com.google.javascript.jscomp.Scope var28 = var27.getScope();
    com.google.javascript.rhino.Node var29 = null;
    com.google.javascript.jscomp.DiagnosticType var32 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var34 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var35 = com.google.javascript.jscomp.JSError.make(var32, var34);
    com.google.javascript.jscomp.DiagnosticType var36 = var35.getType();
    java.lang.String[] var38 = new java.lang.String[] { "LABEL_NAME hi!"};
    com.google.javascript.jscomp.JSError var39 = var27.makeError(var29, var36, var38);
    com.google.javascript.jscomp.JSError var40 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var7, var20, var38);
    com.google.javascript.jscomp.JSError var41 = com.google.javascript.jscomp.JSError.make(var2, var38);
    com.google.javascript.jscomp.CompilerOptions var42 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var43 = null;
    var42.setStripTypes(var43);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var45 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var46 = var45.getDirectedGraphNodes();
    java.util.List var47 = var45.getEdges();
    var42.setManageClosureDependencies(var47);
    boolean var49 = var42.isExternExportsEnabled();
    var42.setManageClosureDependencies(true);
    com.google.javascript.jscomp.CompilerOptions var52 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var53 = null;
    var52.setStripTypes(var53);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var55 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var56 = var55.getDirectedGraphNodes();
    java.util.List var57 = var55.getEdges();
    var52.setManageClosureDependencies(var57);
    boolean var59 = var52.isExternExportsEnabled();
    var52.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var64 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var66 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var67 = com.google.javascript.jscomp.JSError.make(var64, var66);
    int var68 = var67.getCharno();
    com.google.javascript.jscomp.CheckLevel var69 = var67.getDefaultLevel();
    var52.setReportUnknownTypes(var69);
    var42.setCheckUnreachableCode(var69);
    com.google.javascript.jscomp.Compiler var72 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var73 = var72.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var74 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var72);
    com.google.javascript.jscomp.DiagnosticType var77 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var79 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var80 = com.google.javascript.jscomp.JSError.make(var77, var79);
    int var81 = var80.getCharno();
    com.google.javascript.jscomp.CheckLevel var82 = var80.getDefaultLevel();
    java.lang.String var83 = var74.formatError(var80);
    var74.setColorize(true);
    java.lang.String var86 = var41.format(var69, (com.google.javascript.jscomp.MessageFormatter)var74);
    com.google.javascript.jscomp.CheckLevel var87 = var41.getDefaultLevel();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + ""+ "'", var73.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var83.equals("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var86.equals("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test197() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test197"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineLocalVariables(false);
    var0.setDevirtualizePrototypeMethods(false);
    com.google.javascript.jscomp.PropertyRenamingPolicy var5 = null;
    var0.setPropertyRenaming(var5);
    var0.setDefineToBooleanLiteral("", true);

  }

  public void test198() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test198"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var2 = var1.isGetterDef();
    boolean var3 = var1.isNE();
    boolean var4 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var1);
    boolean var5 = var1.isQualifiedName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test199() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test199"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var1 = null;
    var0.setBrokenClosureRequiresLevel(var1);
    var0.setLocale("");
    com.google.javascript.rhino.JSDocInfoBuilder var6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var7 = var6.recordExpose();
    boolean var8 = var6.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var10 = null;
    boolean var11 = var6.recordParameter("Unversioned directory", var10);
    com.google.javascript.rhino.JSTypeExpression var12 = null;
    boolean var14 = var6.recordThrowDescription(var12, "");
    com.google.javascript.rhino.JSDocInfoBuilder var16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var17 = var16.recordExpose();
    boolean var19 = var16.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
    com.google.javascript.rhino.InputId var26 = com.google.javascript.jscomp.NodeUtil.getInputId(var23);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    var23.setJSType(var27);
    com.google.javascript.rhino.JSDocInfo var29 = var16.build(var23);
    java.lang.String var30 = var29.getFileOverview();
    java.util.Set var31 = var29.getModifies();
    boolean var32 = var6.recordSuppressions(var31);
    var0.setAliasableStrings(var31);
    com.google.javascript.jscomp.CompilerOptions var35 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var36 = null;
    var35.setStripTypes(var36);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var38 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var39 = var38.getDirectedGraphNodes();
    java.util.List var40 = var38.getEdges();
    var35.setManageClosureDependencies(var40);
    boolean var42 = var35.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var43 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var44 = null;
    var43.setStripTypes(var44);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var46 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var47 = var46.getDirectedGraphNodes();
    java.util.List var48 = var46.getEdges();
    var43.setManageClosureDependencies(var48);
    var35.setManageClosureDependencies(var48);
    var0.setReplaceStringsConfiguration("hi", var48);
    var0.setAliasAllStrings(true);
    var0.setCollapseProperties(true);
    var0.setCheckCaja(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test200() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test200"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.JSError[] var4 = var3.getMessages();
    com.google.javascript.jscomp.Region var7 = var3.getSourceRegion("2014/12/24 11:10", 0);
    com.google.javascript.jscomp.Scope var8 = var3.getTopScope();
    int var9 = var3.getWarningCount();
    var3.disableThreads();
    com.google.javascript.rhino.Node var14 = new com.google.javascript.rhino.Node(0, 2, (-1));
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    boolean var21 = var18.isVarArgs();
    boolean var22 = var18.isArrayLit();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var25 = var24.isGetterDef();
    var24.putIntProp((-1), 10);
    var18.addChildrenToFront(var24);
    boolean var30 = var24.hasChildren();
    com.google.javascript.jscomp.SourceFile var34 = com.google.javascript.jscomp.SourceFile.fromCode("2014/12/24 11:10", "null(null)", "STRING hi 0 [length: 2]\n");
    int var36 = var34.getColumnOfOffset(306);
    var24.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var34);
    var14.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var34);
    com.google.javascript.jscomp.NodeTraversal.Callback var39 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.NodeTraversal.traverse((com.google.javascript.jscomp.AbstractCompiler)var3, var14, var39);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 306);

  }

  public void test201() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test201"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.warning("STRING hi 0 [length: 2]", "function (): {1852005172}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test202() {}
//   public void test202() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test202"); }
// 
// 
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString(0, "hi!");
//     boolean var4 = var3.hasOneChild();
//     com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(1, 0, 100);
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
//     boolean var10 = var9.isArrayLit();
//     com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var15 = var14.getNext();
//     com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
//     boolean var17 = var14.isVarArgs();
//     boolean var18 = var14.isOptionalArg();
//     com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(0, var3, var8, var9, var14, 1, 100);
//     java.lang.String var22 = var9.getQualifiedName();
//     boolean var23 = var9.isHook();
//     int var24 = var9.getSourceOffset();
//     com.google.javascript.rhino.Node var25 = null;
//     var9.addChildrenToBack(var25);
// 
//   }

  public void test203() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test203"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setInlineLocalVariables(false);
    var0.setLineBreak(false);
    com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var14 = null;
    var13.setStripTypes(var14);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var16 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var17 = var16.getDirectedGraphNodes();
    java.util.List var18 = var16.getEdges();
    var13.setManageClosureDependencies(var18);
    boolean var20 = var13.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var21 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var22 = null;
    var21.setStripTypes(var22);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var24 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var25 = var24.getDirectedGraphNodes();
    java.util.List var26 = var24.getEdges();
    var21.setManageClosureDependencies(var26);
    var13.setManageClosureDependencies(var26);
    var13.setRemoveClosureAsserts(true);
    var13.setCheckMissingGetCssNameBlacklist("Unversioned directory");
    com.google.javascript.jscomp.CompilerOptions var33 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var34 = null;
    var33.setBrokenClosureRequiresLevel(var34);
    var33.setLocale("");
    var33.setLineBreak(false);
    com.google.javascript.jscomp.CompilerOptions var40 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var41 = null;
    var40.setStripTypes(var41);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var43 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var44 = var43.getDirectedGraphNodes();
    java.util.List var45 = var43.getEdges();
    var40.setManageClosureDependencies(var45);
    boolean var47 = var40.isExternExportsEnabled();
    var40.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var52 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var54 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var55 = com.google.javascript.jscomp.JSError.make(var52, var54);
    int var56 = var55.getCharno();
    com.google.javascript.jscomp.CheckLevel var57 = var55.getDefaultLevel();
    var40.setReportUnknownTypes(var57);
    var33.setBrokenClosureRequiresLevel(var57);
    var13.setCheckMissingGetCssNameLevel(var57);
    var0.setCheckUnreachableCode(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test204() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test204"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
    com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
    com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var8 = null;
    var7.setStripTypes(var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var11 = var10.getDirectedGraphNodes();
    java.util.List var12 = var10.getEdges();
    var7.setManageClosureDependencies(var12);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.script(var12);
    var6.traverseRoots(var12);
    boolean var16 = var6.hasScope();
    int var17 = var6.getLineNumber();
    boolean var18 = var6.hasScope();
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var24.isGetterDef();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var30 = var29.hasOneChild();
    com.google.javascript.rhino.Node var34 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.returnNode();
    boolean var36 = var35.isArrayLit();
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var40 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = var40.getNext();
    com.google.javascript.rhino.Node var42 = var38.srcrefTree(var40);
    boolean var43 = var40.isVarArgs();
    boolean var44 = var40.isOptionalArg();
    com.google.javascript.rhino.Node var47 = new com.google.javascript.rhino.Node(0, var29, var34, var35, var40, 1, 100);
    java.lang.String var48 = var35.getQualifiedName();
    boolean var49 = var35.isHook();
    int var50 = var35.getSourceOffset();
    var35.removeProp(1);
    com.google.javascript.rhino.Node var53 = var24.useSourceInfoFrom(var35);
    boolean var54 = var53.isLabelName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.traverse(var53);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test205() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test205"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setTransformAMDToCJSModules(false);
    var0.setRuntimeTypeCheck(false);
    var0.setRemoveAbstractMethods(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test206() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test206"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionParamBuilder var1 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var0);
    boolean var2 = var1.hasVarArgs();
    boolean var3 = var1.hasVarArgs();
    com.google.javascript.rhino.Node var4 = var1.build();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.neg(var4);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test207() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test207"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    com.google.javascript.rhino.ErrorReporter var16 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var18 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var17);
    var17.forwardDeclareType("");
    com.google.javascript.jscomp.JSModule var22 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var23 = var22.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var24 = new com.google.javascript.jscomp.ComposeWarningsGuard(var23);
    com.google.javascript.jscomp.JSModule[] var25 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection)var23);
    var17.setTemplateTypeNames(var23);
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    var28.unregisterPropertyOnType("Unversioned directory", var30);
    var28.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    boolean var42 = var38.isFor();
    boolean var43 = var38.isNumber();
    com.google.javascript.rhino.Node var44 = var38.getNext();
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = var48.getNext();
    com.google.javascript.rhino.Node var50 = var46.srcrefTree(var48);
    boolean var51 = var48.isVarArgs();
    com.google.javascript.rhino.Node var53 = var48.getChildAtIndex(1);
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = var57.getNext();
    com.google.javascript.rhino.Node var59 = var55.srcrefTree(var57);
    com.google.javascript.rhino.JSDocInfo var60 = var57.getJSDocInfo();
    com.google.javascript.rhino.Node var61 = var48.copyInformationFrom(var57);
    java.lang.Object var63 = null;
    var48.putProp(0, var63);
    com.google.javascript.rhino.JSTypeExpression var66 = new com.google.javascript.rhino.JSTypeExpression(var48, "()");
    com.google.javascript.rhino.jstype.StaticScope var67 = null;
    com.google.javascript.rhino.ErrorReporter var68 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var69 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var68);
    com.google.javascript.rhino.jstype.JSType var71 = null;
    var69.unregisterPropertyOnType("Unversioned directory", var71);
    com.google.javascript.rhino.jstype.JSType var73 = null;
    boolean var75 = var69.canPropertyBeDefined(var73, "BANG");
    com.google.javascript.rhino.jstype.JSType var76 = null;
    com.google.javascript.rhino.jstype.JSType[] var77 = new com.google.javascript.rhino.jstype.JSType[] { var76};
    com.google.javascript.rhino.Node var78 = var69.createParameters(var77);
    com.google.javascript.rhino.jstype.JSType var79 = var66.evaluate(var67, var69);
    com.google.javascript.rhino.jstype.JSType var80 = var79.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var81 = var80.dereference();
    boolean var82 = var80.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var83 = var28.createEnumType("STRING hi 0 [length: 2]\n", var38, var80);
    boolean var84 = var83.matchesStringContext();
    com.google.javascript.rhino.jstype.JSType var85 = var17.createNullableType((com.google.javascript.rhino.jstype.JSType)var83);
    com.google.javascript.rhino.jstype.JSType var86 = var10.getGreatestSubtype((com.google.javascript.rhino.jstype.JSType)var83);
    boolean var87 = var10.isResolved();
    var10.clearCachedValues();
    boolean var89 = var10.hasCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var90 = var10.getTypeOfThis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test208() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test208"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var17 = var14.hasParameter("LABEL_NAME hi!");
    com.google.javascript.rhino.JSDocInfo.Visibility var18 = var14.getVisibility();
    boolean var19 = var14.isIdGenerator();
    int var20 = var14.getImplementedInterfaceCount();
    boolean var21 = var14.isOverride();
    java.util.Collection var22 = var14.getAuthors();
    boolean var23 = var14.containsDeclaration();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test209() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test209"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    boolean var26 = var24.removeProperty("null(null)");
    var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
    java.lang.String var28 = var10.getDisplayName();
    com.google.javascript.rhino.JSDocInfo var29 = var10.getJSDocInfo();
    com.google.javascript.rhino.jstype.ObjectType var30 = com.google.javascript.rhino.jstype.ObjectType.cast((com.google.javascript.rhino.jstype.JSType)var10);
    boolean var31 = var30.isUnknownType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test210() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test210"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    boolean var4 = var1.recordNoShadow();
    boolean var6 = var1.recordReturnDescription("()");
    boolean var8 = var1.recordDeprecationReason("BANG");
    com.google.javascript.rhino.JSDocInfoBuilder var11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var12 = var11.recordExpose();
    boolean var13 = var11.recordExterns();
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    boolean var21 = var17.isArrayLit();
    com.google.javascript.rhino.Node var22 = var17.getNext();
    var11.markTypeNode(var17, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    boolean var35 = var32.isVarArgs();
    com.google.javascript.rhino.Node var37 = var32.getChildAtIndex(1);
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
    com.google.javascript.rhino.JSDocInfo var44 = var41.getJSDocInfo();
    com.google.javascript.rhino.Node var45 = var32.copyInformationFrom(var41);
    java.lang.Object var47 = null;
    var32.putProp(0, var47);
    com.google.javascript.rhino.JSTypeExpression var50 = new com.google.javascript.rhino.JSTypeExpression(var32, "()");
    com.google.javascript.rhino.JSTypeExpression var51 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var50);
    boolean var52 = var11.recordBaseType(var50);
    com.google.javascript.jscomp.MessageFormatter var53 = null;
    java.util.logging.Logger var54 = null;
    com.google.javascript.jscomp.LoggerErrorManager var55 = new com.google.javascript.jscomp.LoggerErrorManager(var53, var54);
    com.google.javascript.jscomp.Compiler var56 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var55);
    boolean var57 = var50.equals((java.lang.Object)var56);
    boolean var58 = var1.recordParameter("BANG 0 [source_file: Unversioned directory]\n", var50);
    boolean var59 = var1.isDescriptionRecorded();
    boolean var60 = var1.recordOverride();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);

  }

  public void test211() {}
//   public void test211() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test211"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getDependencies();
//     com.google.javascript.jscomp.SourceAst var3 = null;
//     com.google.javascript.rhino.InputId var4 = null;
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3, var4, true);
//     com.google.javascript.jscomp.JSModule var7 = var6.getModule();
//     var1.add(var6);
//     com.google.javascript.jscomp.MessageFormatter var9 = null;
//     java.util.logging.Logger var10 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var11 = new com.google.javascript.jscomp.LoggerErrorManager(var9, var10);
//     com.google.javascript.jscomp.Compiler var12 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var11);
//     com.google.javascript.jscomp.Scope var13 = var12.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var14 = null;
//     com.google.javascript.jscomp.NodeTraversal var15 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var12, var14);
//     var6.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var12);
//     com.google.javascript.jscomp.JSSourceFile var17 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var18 = new com.google.javascript.jscomp.JSSourceFile[] { var17};
//     com.google.javascript.jscomp.JSSourceFile var19 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var20 = new com.google.javascript.jscomp.JSSourceFile[] { var19};
//     java.io.PrintStream var21 = null;
//     com.google.javascript.jscomp.Compiler var22 = new com.google.javascript.jscomp.Compiler(var21);
//     com.google.javascript.jscomp.CompilerOptions var23 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var24 = null;
//     var23.setStripTypes(var24);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var26 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var27 = var26.getDirectedGraphNodes();
//     java.util.List var28 = var26.getEdges();
//     var23.setManageClosureDependencies(var28);
//     com.google.javascript.rhino.JSDocInfoBuilder var31 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var32 = var31.recordExpose();
//     boolean var34 = var31.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var39 = var38.getNext();
//     com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
//     com.google.javascript.rhino.InputId var41 = com.google.javascript.jscomp.NodeUtil.getInputId(var38);
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     var38.setJSType(var42);
//     com.google.javascript.rhino.JSDocInfo var44 = var31.build(var38);
//     java.lang.String var45 = var44.getFileOverview();
//     java.util.Set var46 = var44.getModifies();
//     java.util.List var47 = var44.getImplementedInterfaces();
//     com.google.javascript.jscomp.CompilerOptions var48 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var49 = null;
//     var48.setStripTypes(var49);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var52 = var51.getDirectedGraphNodes();
//     java.util.List var53 = var51.getEdges();
//     var48.setManageClosureDependencies(var53);
//     var48.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     var48.setColorizeErrorOutput(true);
//     com.google.javascript.jscomp.SourceMap.DetailLevel var60 = null;
//     var48.setSourceMapDetailLevel(var60);
//     var22.<com.google.javascript.jscomp.SourceFile>initModules(var28, var47, var48);
//     var48.setInlineFunctions(true);
//     var48.setCheckMissingGetCssNameBlacklist("function (): {1263056885}");
//     var12.init(var18, var20, var48);
// 
//   }

  public void test212() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test212"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Set var16 = var14.getModifies();
    java.util.List var17 = var14.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getType();
    java.util.List var19 = var14.getImplementedInterfaces();
    boolean var20 = var14.hasEnumParameterType();
    boolean var21 = var14.isInterface();
    boolean var22 = var14.isNoSideEffects();
    com.google.javascript.rhino.JSTypeExpression var24 = var14.getParameterType("{proxy:{1241367186}}");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test213() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test213"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.Node.newString("goog.global");
    boolean var2 = var1.isAdd();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test214() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test214"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    java.util.Collection var33 = var0.getIndirectlyDeclaredProperties();
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var36 = null;
    var35.setResolveMode(var36);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var38 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var35);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var39 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var35);
    com.google.javascript.rhino.ErrorReporter var40 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40);
    com.google.javascript.rhino.jstype.JSType var43 = null;
    var41.unregisterPropertyOnType("Unversioned directory", var43);
    com.google.javascript.rhino.jstype.JSType var45 = null;
    boolean var47 = var41.canPropertyBeDefined(var45, "BANG");
    com.google.javascript.rhino.jstype.JSType var48 = null;
    com.google.javascript.rhino.jstype.JSType[] var49 = new com.google.javascript.rhino.jstype.JSType[] { var48};
    com.google.javascript.rhino.Node var50 = var41.createParameters(var49);
    boolean var51 = var39.addRequiredParams(var49);
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = var55.getNext();
    com.google.javascript.rhino.Node var57 = var53.srcrefTree(var55);
    boolean var58 = var55.isVarArgs();
    com.google.javascript.rhino.Node var60 = var55.getChildAtIndex(1);
    com.google.javascript.rhino.Node var62 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var64 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var65 = var64.getNext();
    com.google.javascript.rhino.Node var66 = var62.srcrefTree(var64);
    com.google.javascript.rhino.JSDocInfo var67 = var64.getJSDocInfo();
    com.google.javascript.rhino.Node var68 = var55.copyInformationFrom(var64);
    boolean var69 = var55.isVoid();
    com.google.javascript.rhino.Node var70 = var39.newParameterFromNode(var55);
    java.util.List var71 = var0.identifyTypeDeclarationCall(var55);
    com.google.javascript.rhino.Node var73 = com.google.javascript.rhino.IR.string("LABEL_NAME hi!");
    boolean var74 = var73.wasEmptyNode();
    boolean var75 = var0.isPrototypeAlias(var73);
    java.lang.String var76 = var73.getQualifiedName();
    com.google.javascript.rhino.Node var77 = var73.removeFirstChild();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);

  }

  public void test215() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test215"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.CheckLevel var1 = com.google.javascript.jscomp.CheckLevel.valueOf("module$InputId: InputId: ");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test216() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test216"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setReserveRawExports(true);
    com.google.javascript.jscomp.VariableRenamingPolicy var12 = null;
    com.google.javascript.jscomp.PropertyRenamingPolicy var13 = null;
    var0.setRenamingPolicy(var12, var13);
    var0.setManageClosureDependencies(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test217() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test217"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(0.0d);
    com.google.javascript.rhino.JSDocInfoBuilder var3 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var4 = var3.recordExpose();
    boolean var6 = var3.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = var10.getNext();
    com.google.javascript.rhino.Node var12 = var8.srcrefTree(var10);
    com.google.javascript.rhino.InputId var13 = com.google.javascript.jscomp.NodeUtil.getInputId(var10);
    com.google.javascript.rhino.jstype.JSType var14 = null;
    var10.setJSType(var14);
    com.google.javascript.rhino.JSDocInfo var16 = var3.build(var10);
    java.util.List var17 = var16.getThrownTypes();
    java.lang.String var18 = var16.getDeprecationReason();
    java.lang.String var19 = var16.getReturnDescription();
    boolean var20 = var16.isImplicitCast();
    var1.setJSDocInfo(var16);
    com.google.javascript.rhino.Node var22 = var16.getAssociatedNode();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.falseNode();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var26 = var23.copyInformationFrom(var25);
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.string("STRING hi 0 [length: 2]\n");
    boolean var29 = var28.isGetProp();
    boolean var30 = var26.isEquivalentTo(var28);
    boolean var31 = var22.isEquivalentTo(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "2014/12/24 11:10"+ "'", var18.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test218() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test218"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var7 = null;
    var6.setResolveMode(var7);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var9 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var6);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var10 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var6);
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
    boolean var17 = var14.isVarArgs();
    com.google.javascript.rhino.Node var19 = var14.getChildAtIndex(1);
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
    com.google.javascript.rhino.JSDocInfo var26 = var23.getJSDocInfo();
    com.google.javascript.rhino.Node var27 = var14.copyInformationFrom(var23);
    java.lang.Object var29 = null;
    var14.putProp(0, var29);
    com.google.javascript.rhino.JSTypeExpression var32 = new com.google.javascript.rhino.JSTypeExpression(var14, "()");
    com.google.javascript.rhino.jstype.StaticScope var33 = null;
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    com.google.javascript.rhino.jstype.JSType var37 = null;
    var35.unregisterPropertyOnType("Unversioned directory", var37);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    boolean var41 = var35.canPropertyBeDefined(var39, "BANG");
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.Node var44 = var35.createParameters(var43);
    com.google.javascript.rhino.jstype.JSType var45 = var32.evaluate(var33, var35);
    com.google.javascript.rhino.jstype.JSType var46 = var45.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var47 = var46.dereference();
    java.util.Collection var48 = var6.getDirectImplementors(var47);
    com.google.javascript.rhino.jstype.JSType var53 = var1.getType((com.google.javascript.rhino.jstype.StaticScope)var47, "hi!", "BANG 0\n    STRING hi 0 [length: 2]\n", 10, 10);
    boolean var54 = var47.isRecordType();
    boolean var55 = var47.isParameterizedType();
    boolean var56 = var47.canBeCalled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);

  }

  public void test219() {}
//   public void test219() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test219"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     var1.unregisterPropertyOnType("Unversioned directory", var3);
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.rhino.ErrorReporter var6 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
//     com.google.javascript.rhino.ErrorReporter var8 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
//     com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var10 = null;
//     var9.setResolveMode(var10);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var12 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var9);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var13 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var9);
//     com.google.javascript.rhino.ErrorReporter var14 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     var15.unregisterPropertyOnType("Unversioned directory", var17);
//     com.google.javascript.rhino.jstype.JSType var19 = null;
//     boolean var21 = var15.canPropertyBeDefined(var19, "BANG");
//     com.google.javascript.rhino.jstype.JSType var22 = null;
//     com.google.javascript.rhino.jstype.JSType[] var23 = new com.google.javascript.rhino.jstype.JSType[] { var22};
//     com.google.javascript.rhino.Node var24 = var15.createParameters(var23);
//     boolean var25 = var13.addRequiredParams(var23);
//     com.google.javascript.rhino.Node var26 = var7.createParameters(var23);
//     com.google.javascript.rhino.jstype.FunctionType var27 = var1.createConstructorTypeWithVarArgs(var5, var23);
// 
//   }

  public void test220() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test220"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Set var16 = var14.getModifies();
    java.util.List var17 = var14.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getType();
    boolean var19 = var14.containsDeclaration();
    com.google.javascript.rhino.JSDocInfo.Visibility var20 = null;
    var14.setVisibility(var20);
    boolean var22 = var14.isNoTypeCheck();
    java.util.Collection var23 = var14.getTypeNodes();
    boolean var24 = var14.isExpose();
    int var25 = var14.getParameterCount();
    boolean var26 = var14.isHidden();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test221() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test221"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasType();
    com.google.javascript.rhino.JSTypeExpression var17 = var14.getEnumParameterType();
    java.util.List var18 = var14.getImplementedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test222() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test222"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var3 = null;
    var2.setStripTypes(var3);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var6 = var5.getDirectedGraphNodes();
    java.util.List var7 = var5.getEdges();
    var2.setManageClosureDependencies(var7);
    com.google.javascript.rhino.JSDocInfoBuilder var10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var11 = var10.recordExpose();
    boolean var13 = var10.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.InputId var20 = com.google.javascript.jscomp.NodeUtil.getInputId(var17);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    var17.setJSType(var21);
    com.google.javascript.rhino.JSDocInfo var23 = var10.build(var17);
    java.lang.String var24 = var23.getFileOverview();
    java.util.Set var25 = var23.getModifies();
    java.util.List var26 = var23.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var27 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var28 = null;
    var27.setStripTypes(var28);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var31 = var30.getDirectedGraphNodes();
    java.util.List var32 = var30.getEdges();
    var27.setManageClosureDependencies(var32);
    var27.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var27.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var39 = null;
    var27.setSourceMapDetailLevel(var39);
    var1.<com.google.javascript.jscomp.SourceFile>initModules(var7, var26, var27);
    var27.setPrintInputDelimiter(false);
    var27.setRemoveUnusedPrototypePropertiesInExterns(true);
    var27.setInstrumentationTemplate("(InputId: )");
    var27.setProcessCommonJSModules(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test223() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test223"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.wasEmptyNode();
    com.google.javascript.rhino.JSDocInfoBuilder var9 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var10 = var9.recordExpose();
    boolean var12 = var9.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = var16.getNext();
    com.google.javascript.rhino.Node var18 = var14.srcrefTree(var16);
    com.google.javascript.rhino.InputId var19 = com.google.javascript.jscomp.NodeUtil.getInputId(var16);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    var16.setJSType(var20);
    com.google.javascript.rhino.JSDocInfo var22 = var9.build(var16);
    java.lang.String var23 = var22.getFileOverview();
    java.util.Set var24 = var22.getModifies();
    java.util.List var25 = var22.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var26 = var22.getType();
    boolean var27 = var22.isConsistentIdGenerator();
    java.lang.String var28 = var22.getDeprecationReason();
    var4.setJSDocInfo(var22);
    boolean var30 = var4.isCatch();
    com.google.javascript.rhino.Node[] var31 = new com.google.javascript.rhino.Node[] { var4};
    com.google.javascript.rhino.Node var32 = new com.google.javascript.rhino.Node(154, var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.objectlit(var31);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "2014/12/24 11:10"+ "'", var28.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test224() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test224"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setNameAnonymousFunctionsOnly(false);
    com.google.javascript.jscomp.CheckLevel var9 = null;
    var0.setCheckGlobalThisLevel(var9);
    com.google.javascript.jscomp.CheckLevel var11 = null;
    var0.setCheckProvides(var11);
    var0.setOutputJsStringUsage(false);
    var0.setCheckSuspiciousCode(true);
    var0.setCrossModuleMethodMotion(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test225() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test225"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var4 = null;
    boolean var6 = var1.recordThrowDescription(var4, "()");
    var1.markName("BANG 0\n    STRING hi 0 [length: 2]\n", (-1), (-1));
    boolean var13 = var1.recordParameterDescription("function (): {1292906510}", "\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    com.google.javascript.rhino.JSDocInfoBuilder var15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var16 = var15.recordExpose();
    boolean var18 = var15.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.InputId var25 = com.google.javascript.jscomp.NodeUtil.getInputId(var22);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var22.setJSType(var26);
    com.google.javascript.rhino.JSDocInfo var28 = var15.build(var22);
    java.lang.String var29 = var28.getFileOverview();
    boolean var30 = var28.hasFileOverview();
    boolean var31 = var28.hasReturnType();
    boolean var33 = var28.hasParameter("BANG 0\n    STRING hi 0 [length: 2]\n");
    var28.setLicense("goog.abstractMethod");
    boolean var36 = var28.isConstant();
    boolean var38 = var28.hasDescriptionForParameter("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    java.lang.String var39 = var28.getLicense();
    java.lang.String var40 = var28.getBlockDescription();
    java.util.Set var41 = var28.getModifies();
    boolean var42 = var1.recordModifies(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "goog.abstractMethod"+ "'", var39.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);

  }

  public void test226() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test226"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    var0.setManageClosureDependencies(var13);
    var0.setCrossModuleCodeMotion(true);
    com.google.javascript.jscomp.CompilerOptions var18 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var19 = null;
    var18.setStripTypes(var19);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var22 = var21.getDirectedGraphNodes();
    java.util.List var23 = var21.getEdges();
    var18.setManageClosureDependencies(var23);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.script(var23);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.paramList(var23);
    var0.setManageClosureDependencies(var23);
    var0.setOptimizeReturns(true);
    var0.setDefineToStringLiteral("function (): ?", "function (): {565834337}");
    var0.setOutputCharset("JSDocInfo");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test227() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test227"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getProvides();
    com.google.javascript.jscomp.CompilerInput var4 = var1.getByName("()");
    com.google.javascript.jscomp.SourceAst var5 = null;
    com.google.javascript.rhino.InputId var6 = null;
    com.google.javascript.jscomp.CompilerInput var8 = new com.google.javascript.jscomp.CompilerInput(var5, var6, true);
    com.google.javascript.jscomp.SourceAst var9 = var8.getAst();
    var1.add(var8);
    com.google.javascript.jscomp.JSModule var12 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var13 = var12.getProvides();
    java.util.List var14 = var12.getInputs();
    int var15 = var12.getDepth();
    var1.addDependency(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));

  }

  public void test228() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test228"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    java.lang.String var61 = var58.getReferenceName();
    com.google.javascript.rhino.ErrorReporter var62 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var62);
    com.google.javascript.rhino.jstype.JSType var65 = null;
    var63.unregisterPropertyOnType("Unversioned directory", var65);
    com.google.javascript.rhino.jstype.JSType var67 = null;
    com.google.javascript.jscomp.JSModule var69 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var70 = var69.getDependencies();
    com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.block(var70);
    com.google.javascript.rhino.jstype.FunctionType var72 = var63.createFunctionTypeWithVarArgs(var67, var70);
    boolean var73 = var72.hasAnyTemplateInternal();
    java.lang.Iterable var74 = var72.getAllExtendedInterfaces();
    boolean var75 = var72.isNominalConstructor();
    boolean var76 = var58.isSubtype((com.google.javascript.rhino.jstype.JSType)var72);
    boolean var78 = var58.isPropertyTypeDeclared("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    boolean var79 = var58.isRecordType();
    com.google.javascript.rhino.jstype.JSType var81 = var58.findPropertyType("(STRING hi 0 [length: 2]\n)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var61.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test229() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test229"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var3 = null;
    var2.setStripTypes(var3);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var6 = var5.getDirectedGraphNodes();
    java.util.List var7 = var5.getEdges();
    var2.setManageClosureDependencies(var7);
    com.google.javascript.rhino.JSDocInfoBuilder var10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var11 = var10.recordExpose();
    boolean var13 = var10.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.InputId var20 = com.google.javascript.jscomp.NodeUtil.getInputId(var17);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    var17.setJSType(var21);
    com.google.javascript.rhino.JSDocInfo var23 = var10.build(var17);
    java.lang.String var24 = var23.getFileOverview();
    java.util.Set var25 = var23.getModifies();
    java.util.List var26 = var23.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var27 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var28 = null;
    var27.setStripTypes(var28);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var31 = var30.getDirectedGraphNodes();
    java.util.List var32 = var30.getEdges();
    var27.setManageClosureDependencies(var32);
    var27.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var27.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var39 = null;
    var27.setSourceMapDetailLevel(var39);
    var1.<com.google.javascript.jscomp.SourceFile>initModules(var7, var26, var27);
    var27.setInlineFunctions(true);
    var27.setDefineToStringLiteral("{proxy:{1612771089}}", "CONTINUE");
    var27.setAcceptConstKeyword(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test230() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test230"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var2 = var1.getNext();
    int var3 = var1.getSourceOffset();
    boolean var4 = var1.isNE();
    java.lang.String var5 = com.google.javascript.jscomp.NodeUtil.getSourceName(var1);
    com.google.javascript.rhino.Node var6 = var1.cloneTree();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.var(var6);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test231() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test231"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var38 = null;
    var37.setResolveMode(var38);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var40 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var37);
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var43 = null;
    var42.setResolveMode(var43);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var45 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var42);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var46 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var42);
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    com.google.javascript.rhino.Node var52 = var48.srcrefTree(var50);
    boolean var53 = var50.isVarArgs();
    com.google.javascript.rhino.Node var55 = var50.getChildAtIndex(1);
    com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var60 = var59.getNext();
    com.google.javascript.rhino.Node var61 = var57.srcrefTree(var59);
    com.google.javascript.rhino.JSDocInfo var62 = var59.getJSDocInfo();
    com.google.javascript.rhino.Node var63 = var50.copyInformationFrom(var59);
    java.lang.Object var65 = null;
    var50.putProp(0, var65);
    com.google.javascript.rhino.JSTypeExpression var68 = new com.google.javascript.rhino.JSTypeExpression(var50, "()");
    com.google.javascript.rhino.jstype.StaticScope var69 = null;
    com.google.javascript.rhino.ErrorReporter var70 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var70);
    com.google.javascript.rhino.jstype.JSType var73 = null;
    var71.unregisterPropertyOnType("Unversioned directory", var73);
    com.google.javascript.rhino.jstype.JSType var75 = null;
    boolean var77 = var71.canPropertyBeDefined(var75, "BANG");
    com.google.javascript.rhino.jstype.JSType var78 = null;
    com.google.javascript.rhino.jstype.JSType[] var79 = new com.google.javascript.rhino.jstype.JSType[] { var78};
    com.google.javascript.rhino.Node var80 = var71.createParameters(var79);
    com.google.javascript.rhino.jstype.JSType var81 = var68.evaluate(var69, var71);
    com.google.javascript.rhino.jstype.JSType var82 = var81.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var83 = var82.dereference();
    java.util.Collection var84 = var42.getDirectImplementors(var83);
    com.google.javascript.rhino.jstype.JSType var89 = var37.getType((com.google.javascript.rhino.jstype.StaticScope)var83, "hi!", "BANG 0\n    STRING hi 0 [length: 2]\n", 10, 10);
    boolean var90 = var24.declareType("goog.abstractMethod", (com.google.javascript.rhino.jstype.JSType)var83);
    com.google.javascript.rhino.jstype.JSTypeNative[] var91 = com.google.javascript.rhino.jstype.JSTypeNative.values();
    com.google.javascript.rhino.jstype.JSType var92 = var24.createUnionType(var91);
    com.google.javascript.rhino.jstype.JSType var94 = var24.getType("Node tree inequality:\nTree1:\nSTRING_KEY Unversioned directory 0 [length: 2]\n\n\nTree2:\nBANG 0\n    STRING hi 0 [length: 2]\n\n\nSubtree1: STRING_KEY Unversioned directory 0 [length: 2]\n\n\nSubtree2: BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.rhino.jstype.JSType var99 = var24.createNamedType("module$ERROR _ (InputId: )\n", "{proxy:{165630172}}", 2147483647, 154);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test232() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test232"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
    com.google.javascript.rhino.jstype.FunctionBuilder var3 = var1.setIsConstructor(true);
    com.google.javascript.rhino.jstype.FunctionBuilder var4 = var1.forConstructor();
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var7 = var1.withReturnType(var5, true);
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    com.google.javascript.rhino.Node var16 = var11.getChildAtIndex(1);
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.JSDocInfo var23 = var20.getJSDocInfo();
    com.google.javascript.rhino.Node var24 = var11.copyInformationFrom(var20);
    java.lang.Object var26 = null;
    var11.putProp(0, var26);
    com.google.javascript.rhino.JSTypeExpression var29 = new com.google.javascript.rhino.JSTypeExpression(var11, "()");
    com.google.javascript.rhino.jstype.StaticScope var30 = null;
    com.google.javascript.rhino.ErrorReporter var31 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var31);
    com.google.javascript.rhino.jstype.JSType var34 = null;
    var32.unregisterPropertyOnType("Unversioned directory", var34);
    com.google.javascript.rhino.jstype.JSType var36 = null;
    boolean var38 = var32.canPropertyBeDefined(var36, "BANG");
    com.google.javascript.rhino.jstype.JSType var39 = null;
    com.google.javascript.rhino.jstype.JSType[] var40 = new com.google.javascript.rhino.jstype.JSType[] { var39};
    com.google.javascript.rhino.Node var41 = var32.createParameters(var40);
    com.google.javascript.rhino.jstype.JSType var42 = var29.evaluate(var30, var32);
    com.google.javascript.rhino.jstype.JSType var43 = var42.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var44 = var43.dereference();
    boolean var45 = var44.isUnknownType();
    java.util.Set var46 = var44.getOwnPropertyNames();
    boolean var47 = var44.isNullType();
    boolean var48 = var44.isDateType();
    java.lang.String var49 = var44.toAnnotationString();
    com.google.javascript.rhino.jstype.FunctionBuilder var51 = var7.withReturnType((com.google.javascript.rhino.jstype.JSType)var44, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "hi"+ "'", var49.equals("hi"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test233() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test233"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    var0.setManageClosureDependencies(var13);
    var0.setRemoveClosureAsserts(true);
    var0.setDebugFunctionSideEffectsPath("STRING hi 0 [length: 2]\n");
    var0.setRemoveClosureAsserts(true);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var22 = var0.getLanguageOut();
    var0.setInlineLocalFunctions(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test234() {}
//   public void test234() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test234"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getProvides();
//     com.google.javascript.jscomp.CompilerInput var4 = var1.getByName("()");
//     com.google.javascript.jscomp.SourceAst var5 = null;
//     com.google.javascript.rhino.InputId var6 = null;
//     com.google.javascript.jscomp.CompilerInput var8 = new com.google.javascript.jscomp.CompilerInput(var5, var6, true);
//     com.google.javascript.jscomp.SourceAst var9 = var8.getAst();
//     var1.add(var8);
//     com.google.javascript.jscomp.MessageFormatter var11 = null;
//     java.util.logging.Logger var12 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var13 = new com.google.javascript.jscomp.LoggerErrorManager(var11, var12);
//     com.google.javascript.jscomp.Compiler var14 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var13);
//     com.google.javascript.jscomp.JSError[] var15 = var14.getMessages();
//     com.google.javascript.jscomp.Region var18 = var14.getSourceRegion("2014/12/24 11:10", 0);
//     com.google.javascript.jscomp.Scope var19 = var14.getTopScope();
//     int var20 = var14.getWarningCount();
//     com.google.javascript.rhino.Node var21 = var8.getAstRoot((com.google.javascript.jscomp.AbstractCompiler)var14);
// 
//   }

  public void test235() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test235"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var13 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    com.google.javascript.rhino.Node var22 = var17.getChildAtIndex(1);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
    com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var26);
    java.lang.Object var32 = null;
    var17.putProp(0, var32);
    com.google.javascript.rhino.JSTypeExpression var35 = new com.google.javascript.rhino.JSTypeExpression(var17, "()");
    com.google.javascript.rhino.jstype.StaticScope var36 = null;
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    var38.unregisterPropertyOnType("Unversioned directory", var40);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    boolean var44 = var38.canPropertyBeDefined(var42, "BANG");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.Node var47 = var38.createParameters(var46);
    com.google.javascript.rhino.jstype.JSType var48 = var35.evaluate(var36, var38);
    boolean var49 = var13.addVarArgs(var48);
    boolean var50 = var48.isEnumElementType();
    boolean var51 = var48.isNullable();
    boolean var52 = var48.matchesNumberContext();
    boolean var53 = var10.differsFrom(var48);
    com.google.javascript.rhino.ErrorReporter var54 = null;
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isVarArgs();
    com.google.javascript.rhino.Node var63 = var58.getChildAtIndex(1);
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.JSDocInfo var70 = var67.getJSDocInfo();
    com.google.javascript.rhino.Node var71 = var58.copyInformationFrom(var67);
    java.lang.Object var73 = null;
    var58.putProp(0, var73);
    com.google.javascript.rhino.JSTypeExpression var76 = new com.google.javascript.rhino.JSTypeExpression(var58, "()");
    com.google.javascript.rhino.jstype.StaticScope var77 = null;
    com.google.javascript.rhino.ErrorReporter var78 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var79 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var78);
    com.google.javascript.rhino.jstype.JSType var81 = null;
    var79.unregisterPropertyOnType("Unversioned directory", var81);
    com.google.javascript.rhino.jstype.JSType var83 = null;
    boolean var85 = var79.canPropertyBeDefined(var83, "BANG");
    com.google.javascript.rhino.jstype.JSType var86 = null;
    com.google.javascript.rhino.jstype.JSType[] var87 = new com.google.javascript.rhino.jstype.JSType[] { var86};
    com.google.javascript.rhino.Node var88 = var79.createParameters(var87);
    com.google.javascript.rhino.jstype.JSType var89 = var76.evaluate(var77, var79);
    com.google.javascript.rhino.jstype.JSType var90 = var89.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var91 = var90.dereference();
    boolean var92 = var91.isUnknownType();
    com.google.javascript.rhino.jstype.JSType var93 = var91.getParameterType();
    boolean var95 = var91.hasOwnProperty("WARNING - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    com.google.javascript.rhino.jstype.JSType var96 = var10.resolve(var54, (com.google.javascript.rhino.jstype.StaticScope)var91);
    com.google.javascript.rhino.jstype.TemplateType var97 = com.google.javascript.rhino.jstype.JSType.toMaybeTemplateType((com.google.javascript.rhino.jstype.JSType)var10);
    int var98 = var10.getMaxArguments();
    com.google.javascript.rhino.jstype.UnionType var99 = var10.toMaybeUnionType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var99);

  }

  public void test236() {}
//   public void test236() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test236"); }
// 
// 
//     com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(1, 0, 100);
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newNumber(1.0d, 0, 10);
//     int var8 = var3.getIndexOfChild(var7);
//     com.google.javascript.rhino.Node var9 = null;
//     boolean var10 = var7.isEquivalentTo(var9);
// 
//   }

  public void test237() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test237"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    var0.setAliasAllStrings(true);
    com.google.javascript.jscomp.CheckLevel var15 = null;
    com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var15, "Unversioned directory");
    com.google.javascript.jscomp.DiagnosticType[] var18 = new com.google.javascript.jscomp.DiagnosticType[] { var17};
    com.google.javascript.jscomp.DiagnosticGroup var19 = new com.google.javascript.jscomp.DiagnosticGroup(var18);
    com.google.javascript.jscomp.CompilerOptions var20 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var21 = null;
    var20.setStripTypes(var21);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var23 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var24 = var23.getDirectedGraphNodes();
    java.util.List var25 = var23.getEdges();
    var20.setManageClosureDependencies(var25);
    boolean var27 = var20.isExternExportsEnabled();
    var20.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var32 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var34 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var35 = com.google.javascript.jscomp.JSError.make(var32, var34);
    int var36 = var35.getCharno();
    com.google.javascript.jscomp.CheckLevel var37 = var35.getDefaultLevel();
    var20.setReportUnknownTypes(var37);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var39 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var19, var37);
    com.google.javascript.jscomp.DiagnosticType var42 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var44 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var45 = com.google.javascript.jscomp.JSError.make(var42, var44);
    com.google.javascript.jscomp.CheckLevel var46 = var39.level(var45);
    com.google.javascript.jscomp.CompilerOptions var47 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var48 = null;
    var47.setBrokenClosureRequiresLevel(var48);
    var47.setLocale("");
    var47.setLineBreak(false);
    com.google.javascript.jscomp.CompilerOptions var54 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var55 = null;
    var54.setStripTypes(var55);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var57 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var58 = var57.getDirectedGraphNodes();
    java.util.List var59 = var57.getEdges();
    var54.setManageClosureDependencies(var59);
    boolean var61 = var54.isExternExportsEnabled();
    var54.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var66 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var68 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var69 = com.google.javascript.jscomp.JSError.make(var66, var68);
    int var70 = var69.getCharno();
    com.google.javascript.jscomp.CheckLevel var71 = var69.getDefaultLevel();
    var54.setReportUnknownTypes(var71);
    var47.setBrokenClosureRequiresLevel(var71);
    int var74 = var71.ordinal();
    com.google.javascript.jscomp.Compiler var75 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var76 = var75.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var77 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var75);
    com.google.javascript.jscomp.LightweightMessageFormatter var78 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var75);
    var78.setColorize(false);
    java.lang.String var81 = var45.format(var71, (com.google.javascript.jscomp.MessageFormatter)var78);
    var0.setBrokenClosureRequiresLevel(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + ""+ "'", var76.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var81.equals("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"));

  }

  public void test238() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test238"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.block();
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isVarArgs();
    boolean var9 = var5.isArrayLit();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var12 = var11.isGetterDef();
    var11.putIntProp((-1), 10);
    var5.addChildrenToFront(var11);
    int var17 = var11.getLength();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    com.google.javascript.rhino.Node var24 = var21.removeFirstChild();
    com.google.javascript.rhino.Node var25 = var11.useSourceInfoFromForTree(var21);
    var21.putIntProp(0, 3);
    com.google.javascript.rhino.Node var31 = new com.google.javascript.rhino.Node((-1), var1, var21, 1, (-19));
    boolean var32 = var31.isExprResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test239() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test239"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var18 = var14.hasType();
    boolean var19 = var14.shouldPreserveTry();
    com.google.javascript.rhino.JSDocInfo.Visibility var20 = var14.getVisibility();
    boolean var21 = var14.shouldPreserveTry();
    java.util.List var22 = var14.getExtendedInterfaces();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.script(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test240() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test240"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var3 = var1.getBooleanProp((-1));
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    com.google.javascript.rhino.Node var10 = var7.removeFirstChild();
    com.google.javascript.rhino.Node var11 = var1.useSourceInfoFromForTree(var7);
    var11.setLength(2);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    boolean var17 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var15);
    java.lang.String var18 = var11.checkTreeEquals(var15);
    boolean var19 = var15.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.breakNode(var15);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "Node tree inequality:\nTree1:\nSTRING_KEY Unversioned directory 0 [length: 2]\n\n\nTree2:\nBANG 0\n    STRING hi 0 [length: 2]\n\n\nSubtree1: STRING_KEY Unversioned directory 0 [length: 2]\n\n\nSubtree2: BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var18.equals("Node tree inequality:\nTree1:\nSTRING_KEY Unversioned directory 0 [length: 2]\n\n\nTree2:\nBANG 0\n    STRING hi 0 [length: 2]\n\n\nSubtree1: STRING_KEY Unversioned directory 0 [length: 2]\n\n\nSubtree2: BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test241() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test241"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.error("{proxy:{165630172}}", "hi!: Unversioned directory");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test242() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test242"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var18 = var14.hasType();
    boolean var19 = var14.shouldPreserveTry();
    com.google.javascript.rhino.JSDocInfo.Visibility var20 = var14.getVisibility();
    boolean var21 = var14.shouldPreserveTry();
    java.util.List var22 = var14.getExtendedInterfaces();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    boolean var24 = var23.isOnlyModifiesThisCall();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test243() {}
//   public void test243() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test243"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getDependencies();
//     com.google.javascript.jscomp.SourceAst var3 = null;
//     com.google.javascript.rhino.InputId var4 = null;
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3, var4, true);
//     com.google.javascript.jscomp.JSModule var7 = var6.getModule();
//     var1.add(var6);
//     com.google.javascript.jscomp.MessageFormatter var9 = null;
//     java.util.logging.Logger var10 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var11 = new com.google.javascript.jscomp.LoggerErrorManager(var9, var10);
//     com.google.javascript.jscomp.Compiler var12 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var11);
//     com.google.javascript.jscomp.Scope var13 = var12.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var14 = null;
//     com.google.javascript.jscomp.NodeTraversal var15 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var12, var14);
//     var6.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var12);
//     com.google.javascript.jscomp.SourceFile var20 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
//     int var22 = var20.getLineOfOffset(2);
//     com.google.javascript.jscomp.CompilerInput var23 = new com.google.javascript.jscomp.CompilerInput(var20);
//     java.io.Reader var24 = var20.getCodeReader();
//     var20.clearCachedSource();
//     com.google.javascript.jscomp.JsAst var26 = new com.google.javascript.jscomp.JsAst(var20);
//     var12.addNewScript(var26);
// 
//   }

  public void test244() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test244"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var4 = null;
    boolean var6 = var1.recordThrowDescription(var4, "()");
    boolean var8 = var1.recordFileOverview("BANG 0\n    STRING hi 0 [length: 2]\n");
    boolean var9 = var1.recordConsistentIdGenerator();
    boolean var12 = var1.recordParameterDescription("LABEL_NAME hi!", "(LABEL_NAME hi!)");
    boolean var14 = var1.addAuthor("(LABEL_NAME hi!)");
    boolean var16 = var1.addReference("{413092455}");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test245() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test245"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setRemoveUnusedPrototypeProperties(true);
    java.util.Map var12 = null;
    var0.setDefineReplacements(var12);
    com.google.javascript.jscomp.CssRenamingMap var14 = null;
    var0.setCssRenamingMap(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test246() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test246"); }


    java.util.logging.Logger var0 = null;
    com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
    int var2 = var1.getErrorCount();
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
    com.google.javascript.jscomp.JSModule var5 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var6 = var5.getDependencies();
    com.google.javascript.jscomp.SourceAst var7 = null;
    com.google.javascript.rhino.InputId var8 = null;
    com.google.javascript.jscomp.CompilerInput var10 = new com.google.javascript.jscomp.CompilerInput(var7, var8, true);
    com.google.javascript.jscomp.JSModule var11 = var10.getModule();
    var5.add(var10);
    com.google.javascript.jscomp.SourceFile var14 = com.google.javascript.jscomp.SourceFile.fromFile("()");
    var5.addFirst(var14);
    java.util.Set var16 = var5.getAllDependencies();
    var5.removeAll();
    com.google.javascript.jscomp.MessageFormatter var18 = null;
    java.util.logging.Logger var19 = null;
    com.google.javascript.jscomp.LoggerErrorManager var20 = new com.google.javascript.jscomp.LoggerErrorManager(var18, var19);
    com.google.javascript.jscomp.Compiler var21 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var20);
    int var22 = var21.getErrorCount();
    var5.sortInputsByDeps(var21);
    com.google.javascript.rhino.JSDocInfoBuilder var25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var26 = var25.recordExpose();
    boolean var27 = var25.recordExterns();
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
    boolean var34 = var31.isVarArgs();
    boolean var35 = var31.isArrayLit();
    com.google.javascript.rhino.Node var36 = var31.getNext();
    var25.markTypeNode(var31, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = var46.getNext();
    com.google.javascript.rhino.Node var48 = var44.srcrefTree(var46);
    boolean var49 = var46.isVarArgs();
    com.google.javascript.rhino.Node var51 = var46.getChildAtIndex(1);
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = var55.getNext();
    com.google.javascript.rhino.Node var57 = var53.srcrefTree(var55);
    com.google.javascript.rhino.JSDocInfo var58 = var55.getJSDocInfo();
    com.google.javascript.rhino.Node var59 = var46.copyInformationFrom(var55);
    java.lang.Object var61 = null;
    var46.putProp(0, var61);
    com.google.javascript.rhino.JSTypeExpression var64 = new com.google.javascript.rhino.JSTypeExpression(var46, "()");
    com.google.javascript.rhino.JSTypeExpression var65 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var64);
    boolean var66 = var25.recordBaseType(var64);
    com.google.javascript.jscomp.MessageFormatter var67 = null;
    java.util.logging.Logger var68 = null;
    com.google.javascript.jscomp.LoggerErrorManager var69 = new com.google.javascript.jscomp.LoggerErrorManager(var67, var68);
    com.google.javascript.jscomp.Compiler var70 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var69);
    boolean var71 = var64.equals((java.lang.Object)var70);
    com.google.javascript.jscomp.Region var74 = var70.getSourceRegion("", 0);
    double var75 = var70.getProgress();
    com.google.javascript.jscomp.Compiler.IntermediateState var76 = var70.getState();
    var21.setState(var76);
    var3.setState(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test247() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test247"); }


    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromCode("()", "LABEL_NAME hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var4 = var2.getLineOffset(2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test248() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test248"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var7 = var3.getBooleanProp(100);
    boolean var8 = var3.isRegExp();
    boolean var9 = var3.hasChildren();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test249() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test249"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var4 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var5 = com.google.javascript.jscomp.JSError.make(var2, var4);
    com.google.javascript.jscomp.DiagnosticType var6 = var5.getType();
    int var7 = var5.getNodeLength();
    com.google.javascript.jscomp.CheckLevel var8 = var5.getDefaultLevel();
    int var9 = var5.getCharno();
    java.lang.String var10 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!. BANG 0\n    STRING hi 0 [length: 2]\n at (unknown source) line (unknown line) : (unknown column)"+ "'", var10.equals("hi!. BANG 0\n    STRING hi 0 [length: 2]\n at (unknown source) line (unknown line) : (unknown column)"));

  }

  public void test250() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test250"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    com.google.javascript.jscomp.JSModule var3 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var4 = var3.getProvides();
    com.google.javascript.jscomp.CompilerInput var6 = var3.getByName("()");
    com.google.javascript.jscomp.SourceAst var7 = null;
    com.google.javascript.rhino.InputId var8 = null;
    com.google.javascript.jscomp.CompilerInput var10 = new com.google.javascript.jscomp.CompilerInput(var7, var8, true);
    com.google.javascript.jscomp.SourceAst var11 = var10.getAst();
    var3.add(var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.add(var10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test251() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test251"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var7 = var5.getBooleanProp((-1));
    var5.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var11 = new com.google.javascript.rhino.JSTypeExpression(var5, "goog.abstractMethod");
    boolean var12 = var0.isPrototypeAlias(var5);
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode((com.google.javascript.jscomp.CodingConvention)var0, "");
    boolean var15 = var14.isSyntheticBlock();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test252() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test252"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var12 = var10.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var13 = var10.toMaybeEnumType();
    boolean var14 = var10.isNumber();
    com.google.javascript.rhino.jstype.ObjectType.Property var16 = var10.getSlot("hi!: BANG 0\n    STRING hi 0 [length: 2]\n");
    java.util.Set var17 = var10.getPropertyNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test253() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test253"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isVarArgs();
    boolean var11 = var7.isArrayLit();
    com.google.javascript.rhino.Node var12 = var7.getNext();
    var1.markTypeNode(var7, 10, 100, 0, 0, false);
    boolean var19 = var7.isIn();
    com.google.javascript.jscomp.ClosureCodingConvention var20 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = var24.getNext();
    boolean var26 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var24);
    int var27 = var24.getLength();
    com.google.javascript.rhino.Node var28 = null;
    boolean var29 = var24.hasChild(var28);
    com.google.javascript.rhino.Node var30 = var22.useSourceInfoIfMissingFromForTree(var24);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var20.describeFunctionBind(var22, false);
    int var33 = var22.getSourcePosition();
    boolean var34 = var22.isTrue();
    boolean var35 = var22.isVar();
    boolean var36 = var7.isEquivalentTo(var22);
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var40 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = var40.getNext();
    com.google.javascript.rhino.Node var42 = var38.srcrefTree(var40);
    com.google.javascript.rhino.InputId var43 = com.google.javascript.jscomp.NodeUtil.getInputId(var40);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var40.setJSType(var44);
    boolean var46 = var40.isBlock();
    com.google.javascript.rhino.Node var47 = var40.getParent();
    boolean var48 = var40.isBreak();
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    com.google.javascript.rhino.InputId var52 = var50.getInputId();
    boolean var53 = var50.isGetProp();
    com.google.javascript.rhino.Node var54 = var40.clonePropsFrom(var50);
    boolean var55 = var40.isGetterDef();
    com.google.javascript.rhino.Node var56 = var40.getFirstChild();
    com.google.javascript.jscomp.ClosureCodingConvention var57 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var59 = var57.isConstantKey("2014/12/24 11:10");
    java.util.Collection var60 = var57.getAssertionFunctions();
    java.lang.String var61 = var57.getAbstractMethodName();
    com.google.javascript.rhino.Node var64 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var66 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = var66.getNext();
    com.google.javascript.rhino.Node var68 = var64.srcrefTree(var66);
    boolean var69 = var66.isVarArgs();
    boolean var70 = var66.isOptionalArg();
    com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var72 = new com.google.javascript.rhino.Node(0, var66, var71);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var73 = var57.getClassesDefinedByCall(var66);
    com.google.javascript.jscomp.ClosureCodingConvention var74 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var76 = var74.isConstantKey("2014/12/24 11:10");
    java.util.Collection var77 = var74.getAssertionFunctions();
    boolean var79 = var74.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var81 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var83 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var84 = var83.getNext();
    com.google.javascript.rhino.Node var85 = var81.srcrefTree(var83);
    boolean var86 = var83.isVarArgs();
    boolean var87 = var83.isOptionalArg();
    java.lang.String var91 = var83.toString(false, false, true);
    java.util.List var92 = var74.identifyTypeDeclarationCall(var83);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var93 = var57.getClassesDefinedByCall(var83);
    com.google.javascript.rhino.Node var94 = com.google.javascript.rhino.IR.empty();
    com.google.javascript.rhino.Node var95 = var94.cloneTree();
    boolean var96 = var94.isVar();
    boolean var97 = var94.isAssignAdd();
    com.google.javascript.rhino.Node var98 = var83.srcref(var94);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var22.addChildrenAfter(var56, var98);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "goog.abstractMethod"+ "'", var61.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "BANG"+ "'", var91.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test254() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test254"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isArrayLit();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var10 = var9.isGetterDef();
    var9.putIntProp((-1), 10);
    var3.addChildrenToFront(var9);
    int var15 = var9.getLength();
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    com.google.javascript.rhino.Node var22 = var19.removeFirstChild();
    com.google.javascript.rhino.Node var23 = var9.useSourceInfoFromForTree(var19);
    var23.setVarArgs(false);
    var23.setLength(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test255() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test255"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var2 = var1.isGetterDef();
    boolean var3 = var1.isNE();
    boolean var4 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var1);
    com.google.javascript.rhino.Node var5 = var1.cloneTree();
    boolean var6 = var1.isDo();
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = var10.getNext();
    com.google.javascript.rhino.Node var12 = var8.srcrefTree(var10);
    boolean var13 = var10.isVarArgs();
    com.google.javascript.rhino.Node var15 = var10.getChildAtIndex(1);
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    com.google.javascript.rhino.JSDocInfo var22 = var19.getJSDocInfo();
    com.google.javascript.rhino.Node var23 = var10.copyInformationFrom(var19);
    java.lang.Object var25 = null;
    var10.putProp(0, var25);
    com.google.javascript.rhino.JSTypeExpression var28 = new com.google.javascript.rhino.JSTypeExpression(var10, "()");
    com.google.javascript.rhino.Node var29 = var28.getRoot();
    int var30 = var1.getIndexOfChild(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));

  }

  public void test256() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test256"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    int var9 = var7.getSourceOffset();
    boolean var10 = var7.isTypeOf();
    boolean var11 = var0.isVarArgsParameter(var7);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var15 = var13.recordExterns();
    boolean var16 = var13.recordNoShadow();
    boolean var18 = var13.recordReturnDescription("()");
    boolean var20 = var13.recordDeprecationReason("BANG");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = var25.getNext();
    com.google.javascript.rhino.Node var27 = var23.srcrefTree(var25);
    boolean var28 = var25.isVarArgs();
    boolean var29 = var25.isOptionalArg();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var31 = new com.google.javascript.rhino.Node(0, var25, var30);
    var30.setSourceEncodedPositionForTree(0);
    com.google.javascript.rhino.Node var34 = var30.cloneNode();
    var13.markTypeNode(var34, 10, 1, 100, 2, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.var(var7, var34);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test257() {}
//   public void test257() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test257"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var2 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
//     com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var7 = var6.getNext();
//     com.google.javascript.rhino.Node var8 = var4.srcrefTree(var6);
//     boolean var9 = var6.isVarArgs();
//     com.google.javascript.rhino.Node var11 = var6.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var16 = var15.getNext();
//     com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
//     com.google.javascript.rhino.JSDocInfo var18 = var15.getJSDocInfo();
//     com.google.javascript.rhino.Node var19 = var6.copyInformationFrom(var15);
//     java.lang.Object var21 = null;
//     var6.putProp(0, var21);
//     com.google.javascript.rhino.JSTypeExpression var24 = new com.google.javascript.rhino.JSTypeExpression(var6, "()");
//     com.google.javascript.rhino.jstype.StaticScope var25 = null;
//     com.google.javascript.rhino.ErrorReporter var26 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
//     com.google.javascript.rhino.jstype.JSType var29 = null;
//     var27.unregisterPropertyOnType("Unversioned directory", var29);
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     boolean var33 = var27.canPropertyBeDefined(var31, "BANG");
//     com.google.javascript.rhino.jstype.JSType var34 = null;
//     com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var34};
//     com.google.javascript.rhino.Node var36 = var27.createParameters(var35);
//     com.google.javascript.rhino.jstype.JSType var37 = var24.evaluate(var25, var27);
//     boolean var38 = var2.addVarArgs(var37);
//     com.google.javascript.jscomp.ClosureCodingConvention var39 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var41 = var39.isConstantKey("2014/12/24 11:10");
//     java.util.Collection var42 = var39.getAssertionFunctions();
//     boolean var44 = var39.isConstant("Unversioned directory");
//     com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var49 = var48.getNext();
//     com.google.javascript.rhino.Node var50 = var46.srcrefTree(var48);
//     boolean var51 = var48.isVarArgs();
//     boolean var52 = var48.isOptionalArg();
//     java.lang.String var56 = var48.toString(false, false, true);
//     java.util.List var57 = var39.identifyTypeDeclarationCall(var48);
//     java.lang.String var58 = var39.getDelegateSuperclassName();
//     com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var61 = var60.getNext();
//     int var62 = var60.getSourceOffset();
//     com.google.javascript.rhino.Node var63 = var60.cloneNode();
//     com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var66 = var65.getNext();
//     int var67 = var65.getSourceOffset();
//     com.google.javascript.rhino.Node var68 = var65.cloneNode();
//     var63.addChildrenToFront(var68);
//     com.google.javascript.jscomp.CodingConvention.Bind var71 = var39.describeFunctionBind(var63, true);
//     com.google.javascript.rhino.Node var72 = var2.newOptionalParameterFromNode(var63);
//     com.google.javascript.rhino.Node var74 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var75 = var74.getNext();
//     boolean var76 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var74);
//     com.google.javascript.rhino.Node var77 = var2.newOptionalParameterFromNode(var74);
//     com.google.javascript.rhino.Node var78 = null;
//     com.google.javascript.rhino.Node var79 = var2.newOptionalParameterFromNode(var78);
// 
//   }

  public void test258() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test258"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    var0.setManageClosureDependencies(var13);
    var0.setRemoveClosureAsserts(true);
    boolean var18 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var19 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var20 = null;
    var19.setBrokenClosureRequiresLevel(var20);
    var19.setLocale("");
    com.google.javascript.rhino.JSDocInfoBuilder var25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var26 = var25.recordExpose();
    boolean var27 = var25.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var29 = null;
    boolean var30 = var25.recordParameter("Unversioned directory", var29);
    com.google.javascript.rhino.JSTypeExpression var31 = null;
    boolean var33 = var25.recordThrowDescription(var31, "");
    com.google.javascript.rhino.JSDocInfoBuilder var35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var36 = var35.recordExpose();
    boolean var38 = var35.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var40 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var43 = var42.getNext();
    com.google.javascript.rhino.Node var44 = var40.srcrefTree(var42);
    com.google.javascript.rhino.InputId var45 = com.google.javascript.jscomp.NodeUtil.getInputId(var42);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    var42.setJSType(var46);
    com.google.javascript.rhino.JSDocInfo var48 = var35.build(var42);
    java.lang.String var49 = var48.getFileOverview();
    java.util.Set var50 = var48.getModifies();
    boolean var51 = var25.recordSuppressions(var50);
    var19.setAliasableStrings(var50);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var53 = var19.getLanguageIn();
    int var54 = var53.ordinal();
    var0.setLanguageOut(var53);
    var0.setMarkNoSideEffectCalls(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);

  }

  public void test259() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test259"); }


    com.google.javascript.jscomp.AstValidator var0 = new com.google.javascript.jscomp.AstValidator();
    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.thisNode();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var6 = var5.hasOneChild();
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.returnNode();
    boolean var12 = var11.isArrayLit();
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = var16.getNext();
    com.google.javascript.rhino.Node var18 = var14.srcrefTree(var16);
    boolean var19 = var16.isVarArgs();
    boolean var20 = var16.isOptionalArg();
    com.google.javascript.rhino.Node var23 = new com.google.javascript.rhino.Node(0, var5, var10, var11, var16, 1, 100);
    int var24 = var16.getSourceOffset();
    com.google.javascript.rhino.Node var25 = var1.useSourceInfoFromForTree(var16);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    boolean var33 = var30.isVarArgs();
    boolean var34 = var30.isOptionalArg();
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var36 = new com.google.javascript.rhino.Node(0, var30, var35);
    boolean var37 = var35.isQualifiedName();
    com.google.javascript.rhino.Node var38 = var35.cloneNode();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.process(var25, var38);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test260() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test260"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
    com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
    boolean var7 = var6.hasScope();
    com.google.javascript.jscomp.JSModule var9 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var10 = var9.getDependencies();
    int var11 = var9.getDepth();
    java.util.List var12 = var9.getRequires();
    var6.traverseRoots(var12);
    boolean var14 = var6.hasScope();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test261() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test261"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isArrayLit();
    com.google.javascript.rhino.Node var8 = var3.getNext();
    int var9 = var3.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 306);

  }

  public void test262() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test262"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var3 = var1.getBooleanProp((-1));
    var1.setSourceEncodedPosition(10);
    boolean var6 = var1.isContinue();
    boolean var7 = var1.isComma();
    boolean var8 = var1.isCase();
    com.google.javascript.rhino.Node var9 = var1.cloneTree();
    boolean var10 = var1.hasOneChild();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test263() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test263"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    int var16 = var8.getIntProp(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.neg(var8);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);

  }

  public void test264() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test264"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("LABEL_NAME hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var5 = var4.hasOneChild();
    com.google.javascript.rhino.jstype.StaticSourceFile var6 = var4.getStaticSourceFile();
    boolean var7 = var4.isNull();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.and(var1, var4);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test265() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test265"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    com.google.javascript.rhino.jstype.JSType var35 = var34.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.dereference();
    boolean var37 = var36.isUnknownType();
    java.util.Set var38 = var36.getOwnPropertyNames();
    boolean var39 = var36.isNullType();
    boolean var40 = var36.isDateType();
    java.lang.String var41 = var36.toAnnotationString();
    var36.clearCachedValues();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi"+ "'", var41.equals("hi"));

  }

  public void test266() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test266"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
    com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
    com.google.javascript.rhino.JSDocInfoBuilder var8 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var9 = var8.recordExpose();
    boolean var11 = var8.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    com.google.javascript.rhino.InputId var18 = com.google.javascript.jscomp.NodeUtil.getInputId(var15);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    var15.setJSType(var19);
    com.google.javascript.rhino.JSDocInfo var21 = var8.build(var15);
    java.lang.String var22 = var21.getFileOverview();
    com.google.javascript.rhino.JSDocInfo.Visibility var23 = null;
    var21.setVisibility(var23);
    boolean var25 = var21.isDeprecated();
    java.util.List var26 = var21.getExtendedInterfaces();
    var6.traverseRoots(var26);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var29 = var28.getDirectedGraphNodes();
    java.util.List var30 = var28.getEdges();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.paramList(var30);
    var6.traverseRoots(var30);
    boolean var33 = var6.hasScope();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test267() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test267"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setGroupVariableDeclarations(true);
    java.util.Map var12 = var0.getDefineReplacements();
    com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var13 = null;
    var0.setAnonymousFunctionNaming(var13);
    var0.setInlineLocalVariables(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test268() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test268"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    boolean var7 = var1.recordNoSideEffects();
    boolean var8 = var1.recordNoSideEffects();
    boolean var9 = var1.recordConstancy();
    com.google.javascript.rhino.JSDocInfoBuilder var11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var12 = var11.recordExpose();
    boolean var14 = var11.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    com.google.javascript.rhino.InputId var21 = com.google.javascript.jscomp.NodeUtil.getInputId(var18);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var18.setJSType(var22);
    com.google.javascript.rhino.JSDocInfo var24 = var11.build(var18);
    com.google.javascript.rhino.JSDocInfoBuilder var26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var27 = var26.recordExpose();
    boolean var28 = var26.recordExterns();
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    boolean var35 = var32.isVarArgs();
    boolean var36 = var32.isArrayLit();
    com.google.javascript.rhino.Node var37 = var32.getNext();
    var26.markTypeNode(var32, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    boolean var50 = var47.isVarArgs();
    com.google.javascript.rhino.Node var52 = var47.getChildAtIndex(1);
    com.google.javascript.rhino.Node var54 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var57 = var56.getNext();
    com.google.javascript.rhino.Node var58 = var54.srcrefTree(var56);
    com.google.javascript.rhino.JSDocInfo var59 = var56.getJSDocInfo();
    com.google.javascript.rhino.Node var60 = var47.copyInformationFrom(var56);
    java.lang.Object var62 = null;
    var47.putProp(0, var62);
    com.google.javascript.rhino.JSTypeExpression var65 = new com.google.javascript.rhino.JSTypeExpression(var47, "()");
    com.google.javascript.rhino.JSTypeExpression var66 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var65);
    boolean var67 = var26.recordBaseType(var65);
    boolean var68 = var11.recordTypedef(var65);
    boolean var69 = var65.isVarArgs();
    boolean var70 = var1.recordThrowType(var65);
    boolean var72 = var1.recordReturnDescription("function (): {944163309}");
    boolean var74 = var1.recordVersion("(OFF)");
    com.google.javascript.rhino.Node var76 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var77 = var76.isGetterDef();
    java.lang.String var81 = var76.toString(true, false, false);
    com.google.javascript.rhino.JSTypeExpression var83 = new com.google.javascript.rhino.JSTypeExpression(var76, "module$BANG 0 [source_file: Unversioned directory]\n");
    boolean var84 = var1.recordType(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "LABEL_NAME hi!"+ "'", var81.equals("LABEL_NAME hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);

  }

  public void test269() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test269"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.Node var6 = var3.removeFirstChild();
    var6.setQuotedString();
    com.google.javascript.rhino.Node var8 = var6.removeChildren();
    boolean var9 = var6.isOr();
    com.google.javascript.rhino.Node var11 = var6.getAncestor(153);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test270() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test270"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("BANG");
    var1.setOptionalArg(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test271() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test271"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    java.util.List var2 = var0.getEdges();
    var0.pushEdgeAnnotations();
    com.google.javascript.rhino.JSDocInfoBuilder var5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var6 = var0.getDirectedPredNodes((java.lang.Object)var5);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test272() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test272"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    boolean var26 = var24.removeProperty("null(null)");
    var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
    int var28 = var24.getExtendedInterfacesCount();
    java.util.Set var29 = var24.getOwnPropertyNames();
    java.lang.Iterable var30 = var24.getCtorImplementedInterfaces();
    com.google.javascript.rhino.jstype.JSType var31 = var24.getReturnType();
    boolean var32 = var24.isInterface();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test273() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test273"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isVarArgs();
    boolean var11 = var7.isArrayLit();
    com.google.javascript.rhino.Node var12 = var7.getNext();
    var1.markTypeNode(var7, 10, 100, 0, 0, false);
    boolean var19 = var7.isIn();
    com.google.javascript.jscomp.ClosureCodingConvention var20 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = var24.getNext();
    boolean var26 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var24);
    int var27 = var24.getLength();
    com.google.javascript.rhino.Node var28 = null;
    boolean var29 = var24.hasChild(var28);
    com.google.javascript.rhino.Node var30 = var22.useSourceInfoIfMissingFromForTree(var24);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var20.describeFunctionBind(var22, false);
    int var33 = var22.getSourcePosition();
    boolean var34 = var22.isTrue();
    boolean var35 = var22.isVar();
    boolean var36 = var7.isEquivalentTo(var22);
    boolean var37 = var7.isOnlyModifiesThisCall();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test274() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test274"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var7 = null;
    var6.setResolveMode(var7);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var9 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var6);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var10 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var6);
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
    boolean var17 = var14.isVarArgs();
    com.google.javascript.rhino.Node var19 = var14.getChildAtIndex(1);
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
    com.google.javascript.rhino.JSDocInfo var26 = var23.getJSDocInfo();
    com.google.javascript.rhino.Node var27 = var14.copyInformationFrom(var23);
    java.lang.Object var29 = null;
    var14.putProp(0, var29);
    com.google.javascript.rhino.JSTypeExpression var32 = new com.google.javascript.rhino.JSTypeExpression(var14, "()");
    com.google.javascript.rhino.jstype.StaticScope var33 = null;
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    com.google.javascript.rhino.jstype.JSType var37 = null;
    var35.unregisterPropertyOnType("Unversioned directory", var37);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    boolean var41 = var35.canPropertyBeDefined(var39, "BANG");
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.Node var44 = var35.createParameters(var43);
    com.google.javascript.rhino.jstype.JSType var45 = var32.evaluate(var33, var35);
    com.google.javascript.rhino.jstype.JSType var46 = var45.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var47 = var46.dereference();
    java.util.Collection var48 = var6.getDirectImplementors(var47);
    com.google.javascript.rhino.jstype.JSType var53 = var1.getType((com.google.javascript.rhino.jstype.StaticScope)var47, "hi!", "BANG 0\n    STRING hi 0 [length: 2]\n", 10, 10);
    boolean var54 = var47.isUnknownType();
    com.google.javascript.rhino.jstype.JSType var55 = var47.collapseUnion();
    boolean var56 = var55.isEnumElementType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test275() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test275"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    com.google.javascript.rhino.JSTypeExpression var7 = null;
    boolean var9 = var1.recordThrowDescription(var7, "");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    boolean var16 = var13.isVarArgs();
    com.google.javascript.rhino.Node var18 = var13.getChildAtIndex(1);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.JSDocInfo var25 = var22.getJSDocInfo();
    com.google.javascript.rhino.Node var26 = var13.copyInformationFrom(var22);
    java.lang.Object var28 = null;
    var13.putProp(0, var28);
    com.google.javascript.rhino.JSTypeExpression var31 = new com.google.javascript.rhino.JSTypeExpression(var13, "()");
    com.google.javascript.rhino.JSTypeExpression var32 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var31);
    com.google.javascript.rhino.Node var33 = var31.getRoot();
    boolean var34 = var1.recordImplementedInterface(var31);
    boolean var35 = var1.isJavaDispatch();
    boolean var37 = var1.addAuthor("BANG");
    com.google.javascript.jscomp.SourceFile var42 = com.google.javascript.jscomp.SourceFile.fromCode("2014/12/24 11:10", "null(null)", "STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.Region var44 = var42.getRegion(0);
    java.io.Reader var45 = var42.getCodeReader();
    var1.markName("(LABEL_NAME hi!)", (com.google.javascript.rhino.jstype.StaticSourceFile)var42, 0, 154);
    boolean var50 = var1.recordBlockDescription("hi!");
    com.google.javascript.rhino.JSDocInfoBuilder var52 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var53 = var52.recordExpose();
    boolean var55 = var52.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var60 = var59.getNext();
    com.google.javascript.rhino.Node var61 = var57.srcrefTree(var59);
    com.google.javascript.rhino.InputId var62 = com.google.javascript.jscomp.NodeUtil.getInputId(var59);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    var59.setJSType(var63);
    com.google.javascript.rhino.JSDocInfo var65 = var52.build(var59);
    java.lang.String var66 = var65.getFileOverview();
    boolean var67 = var65.hasFileOverview();
    boolean var68 = var65.hasReturnType();
    com.google.javascript.rhino.JSTypeExpression var69 = var65.getType();
    int var70 = var65.getParameterCount();
    com.google.javascript.rhino.Node var71 = var65.getAssociatedNode();
    com.google.javascript.rhino.Node var73 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var75 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var76 = var75.getNext();
    com.google.javascript.rhino.Node var77 = var73.srcrefTree(var75);
    com.google.javascript.rhino.InputId var78 = com.google.javascript.jscomp.NodeUtil.getInputId(var75);
    com.google.javascript.rhino.jstype.JSType var79 = null;
    var75.setJSType(var79);
    boolean var81 = var75.isBlock();
    com.google.javascript.rhino.Node var82 = var75.getNext();
    boolean var83 = var75.isFromExterns();
    var65.setAssociatedNode(var75);
    com.google.javascript.rhino.JSDocInfo.Visibility var85 = var65.getVisibility();
    boolean var86 = var1.recordVisibility(var85);
    boolean var87 = var1.recordNoShadow();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);

  }

  public void test276() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test276"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getType();
    int var19 = var14.getParameterCount();
    java.lang.String var20 = var14.getLendsName();
    boolean var21 = var14.isOverride();
    boolean var22 = var14.isConsistentIdGenerator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test277() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test277"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isOptionalArg();
    java.lang.String var11 = var3.toString(false, false, true);
    boolean var12 = var3.isFromExterns();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.labelName("hi!");
    var3.addChildToFront(var14);
    boolean var16 = var3.isScript();
    boolean var17 = var3.isScript();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "BANG"+ "'", var11.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test278() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test278"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setOptimizeArgumentsArray(false);
    var0.setCheckTypes(true);
    var0.setRemoveAbstractMethods(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test279() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test279"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    boolean var5 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var3);
    int var6 = var3.getLength();
    com.google.javascript.rhino.Node var7 = null;
    boolean var8 = var3.hasChild(var7);
    com.google.javascript.rhino.Node var9 = var1.useSourceInfoIfMissingFromForTree(var3);
    com.google.javascript.rhino.InputId var10 = var3.getInputId();
    boolean var11 = var3.isDebugger();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test280() {}
//   public void test280() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test280"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     int var4 = var3.getErrorCount();
//     com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var6 = null;
//     var5.setStripTypes(var6);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var9 = var8.getDirectedGraphNodes();
//     java.util.List var10 = var8.getEdges();
//     var5.setManageClosureDependencies(var10);
//     boolean var12 = var5.isExternExportsEnabled();
//     var5.setCheckCaja(false);
//     java.util.Set var15 = null;
//     var5.setReplaceStringsReservedStrings(var15);
//     var5.setAliasAllStrings(true);
//     com.google.javascript.jscomp.CompilerOptions.TracerMode var19 = null;
//     var5.setTracerMode(var19);
//     com.google.javascript.jscomp.JSModule var23 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var24 = var23.getProvides();
//     java.util.List var25 = var23.getRequires();
//     com.google.javascript.jscomp.SourceAst var26 = null;
//     com.google.javascript.rhino.InputId var27 = null;
//     com.google.javascript.jscomp.CompilerInput var29 = new com.google.javascript.jscomp.CompilerInput(var26, var27, true);
//     com.google.javascript.jscomp.JSModule var30 = var29.getModule();
//     var23.addFirst(var29);
//     java.util.List var32 = var23.getProvides();
//     var5.setReplaceStringsConfiguration("2014/12/24 11:10", var32);
//     var3.initOptions(var5);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     boolean var37 = var35.hasNode((java.lang.Object)1);
//     java.util.List var38 = var35.getGraphvizEdges();
//     java.lang.Iterable var39 = var35.getDirectedGraphNodes();
//     com.google.javascript.jscomp.Compiler var40 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var41 = var40.getAstDotGraph();
//     com.google.javascript.jscomp.LightweightMessageFormatter var42 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var40);
//     com.google.javascript.jscomp.LightweightMessageFormatter var43 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var40);
//     boolean var44 = var35.hasNode((java.lang.Object)var40);
//     java.util.List var45 = var35.getEdges();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var46 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     boolean var48 = var46.hasNode((java.lang.Object)1);
//     java.util.List var49 = var46.getGraphvizEdges();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.Collection var51 = var50.getNodes();
//     com.google.javascript.rhino.jstype.TernaryValue var53 = com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(154);
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var54 = var50.createDirectedGraphNode((java.lang.Object)var53);
//     java.util.List var55 = var46.getDirectedPredNodes(var54);
//     com.google.javascript.jscomp.CompilerOptions var56 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.CheckLevel var57 = null;
//     var56.setBrokenClosureRequiresLevel(var57);
//     var56.setDefineToBooleanLiteral("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", false);
//     var56.setCommonJSModulePathPrefix("(InputId: )");
//     var56.setInlineFunctions(true);
//     var56.setTweakToDoubleLiteral("function (): {565834337}", 10.0d);
//     com.google.javascript.jscomp.Result var69 = var3.<com.google.javascript.jscomp.SourceFile,com.google.javascript.jscomp.SourceFile>compile(var45, var55, var56);
// 
//   }

  public void test281() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test281"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var1 = var0.getGraphvizEdges();
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var4 = var3.isGetterDef();
    boolean var5 = var3.isAdd();
    boolean var6 = var3.isWith();
    com.google.javascript.rhino.ErrorReporter var7 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    var8.unregisterPropertyOnType("Unversioned directory", var10);
    var8.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    boolean var21 = var18.isVarArgs();
    boolean var22 = var18.isFor();
    boolean var23 = var18.isNumber();
    com.google.javascript.rhino.Node var24 = var18.getNext();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = var28.getNext();
    com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
    boolean var31 = var28.isVarArgs();
    com.google.javascript.rhino.Node var33 = var28.getChildAtIndex(1);
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    com.google.javascript.rhino.Node var39 = var35.srcrefTree(var37);
    com.google.javascript.rhino.JSDocInfo var40 = var37.getJSDocInfo();
    com.google.javascript.rhino.Node var41 = var28.copyInformationFrom(var37);
    java.lang.Object var43 = null;
    var28.putProp(0, var43);
    com.google.javascript.rhino.JSTypeExpression var46 = new com.google.javascript.rhino.JSTypeExpression(var28, "()");
    com.google.javascript.rhino.jstype.StaticScope var47 = null;
    com.google.javascript.rhino.ErrorReporter var48 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var48);
    com.google.javascript.rhino.jstype.JSType var51 = null;
    var49.unregisterPropertyOnType("Unversioned directory", var51);
    com.google.javascript.rhino.jstype.JSType var53 = null;
    boolean var55 = var49.canPropertyBeDefined(var53, "BANG");
    com.google.javascript.rhino.jstype.JSType var56 = null;
    com.google.javascript.rhino.jstype.JSType[] var57 = new com.google.javascript.rhino.jstype.JSType[] { var56};
    com.google.javascript.rhino.Node var58 = var49.createParameters(var57);
    com.google.javascript.rhino.jstype.JSType var59 = var46.evaluate(var47, var49);
    com.google.javascript.rhino.jstype.JSType var60 = var59.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var61 = var60.dereference();
    boolean var62 = var60.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var63 = var8.createEnumType("STRING hi 0 [length: 2]\n", var18, var60);
    com.google.javascript.rhino.JSDocInfo var64 = var63.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var65 = var63.getElementsType();
    java.lang.String var66 = var65.getReferenceName();
    boolean var67 = var65.isEnumElementType();
    com.google.javascript.rhino.jstype.EnumElementType var68 = var65.toMaybeEnumElementType();
    com.google.javascript.rhino.jstype.JSType var70 = var65.findPropertyType("CONTINUE");
    com.google.javascript.rhino.JSDocInfoBuilder var72 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var73 = var72.recordExpose();
    boolean var75 = var72.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var77 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var79 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var80 = var79.getNext();
    com.google.javascript.rhino.Node var81 = var77.srcrefTree(var79);
    com.google.javascript.rhino.InputId var82 = com.google.javascript.jscomp.NodeUtil.getInputId(var79);
    com.google.javascript.rhino.jstype.JSType var83 = null;
    var79.setJSType(var83);
    com.google.javascript.rhino.JSDocInfo var85 = var72.build(var79);
    java.util.List var86 = var85.getThrownTypes();
    com.google.javascript.rhino.Node var88 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var90 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var91 = var90.getNext();
    com.google.javascript.rhino.Node var92 = var88.srcrefTree(var90);
    boolean var93 = var90.isOr();
    var85.setAssociatedNode(var90);
    java.util.Set var95 = var85.getParameterNames();
    java.util.Collection var96 = var85.getAuthors();
    java.lang.String var97 = var85.getVersion();
    boolean var98 = var85.hasEnumParameterType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.connect((java.lang.Object)var6, (java.lang.Object)var65, (java.lang.Object)var98);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var66.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);

  }

  public void test282() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test282"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.shouldParseDocumentation();
    boolean var5 = var1.recordParameterDescription("InputId: InputId: ", "\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    boolean var7 = var1.addReference("()");
    var1.markName("hi!: BANG 0\n    STRING hi 0 [length: 2]\n", (-1), (-19));
    boolean var12 = var1.recordDeprecated();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test283() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test283"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.shouldParseDocumentation();
    boolean var3 = var1.recordConstructor();
    boolean var4 = var1.recordNoTypeCheck();
    java.util.Set var5 = null;
    boolean var6 = var1.recordModifies(var5);
    boolean var7 = var1.recordConsistentIdGenerator();
    boolean var8 = var1.recordNoTypeCheck();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test284() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test284"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.isVarArgs();
    boolean var8 = var4.isOptionalArg();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(0, var4, var9);
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
    boolean var17 = var12.isString();
    com.google.javascript.rhino.Node var18 = var10.useSourceInfoFromForTree(var12);
    var10.setCharno(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test285() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test285"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    int var16 = var8.getIntProp(0);
    boolean var17 = var8.isDec();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test286() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test286"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var13 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    com.google.javascript.rhino.Node var22 = var17.getChildAtIndex(1);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
    com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var26);
    java.lang.Object var32 = null;
    var17.putProp(0, var32);
    com.google.javascript.rhino.JSTypeExpression var35 = new com.google.javascript.rhino.JSTypeExpression(var17, "()");
    com.google.javascript.rhino.jstype.StaticScope var36 = null;
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    var38.unregisterPropertyOnType("Unversioned directory", var40);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    boolean var44 = var38.canPropertyBeDefined(var42, "BANG");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.Node var47 = var38.createParameters(var46);
    com.google.javascript.rhino.jstype.JSType var48 = var35.evaluate(var36, var38);
    boolean var49 = var13.addVarArgs(var48);
    boolean var50 = var48.isEnumElementType();
    boolean var51 = var48.isNullable();
    boolean var52 = var48.matchesNumberContext();
    boolean var53 = var10.differsFrom(var48);
    com.google.javascript.jscomp.CompilerOptions var54 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var55 = null;
    var54.setStripTypes(var55);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var57 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var58 = var57.getDirectedGraphNodes();
    java.util.List var59 = var57.getEdges();
    var54.setManageClosureDependencies(var59);
    boolean var61 = var54.isExternExportsEnabled();
    var54.setCollapsePropertiesOnExternTypes(false);
    var54.setNameAnonymousFunctionsOnly(true);
    var54.setRuntimeTypeCheck(true);
    com.google.javascript.rhino.JSDocInfoBuilder var70 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var71 = var70.recordExpose();
    boolean var73 = var70.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var75 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var77 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var78 = var77.getNext();
    com.google.javascript.rhino.Node var79 = var75.srcrefTree(var77);
    com.google.javascript.rhino.InputId var80 = com.google.javascript.jscomp.NodeUtil.getInputId(var77);
    com.google.javascript.rhino.jstype.JSType var81 = null;
    var77.setJSType(var81);
    com.google.javascript.rhino.JSDocInfo var83 = var70.build(var77);
    java.lang.String var84 = var83.getFileOverview();
    boolean var85 = var83.hasFileOverview();
    boolean var86 = var83.hasReturnType();
    boolean var87 = var83.hasType();
    boolean var88 = var83.isHidden();
    boolean var89 = var83.isInterface();
    com.google.common.collect.ImmutableList var90 = var83.getTemplateTypeNames();
    var54.setReplaceStringsConfiguration("STRING hi 0 [length: 2]\n", (java.util.List)var90);
    var10.setImplementedInterfaces((java.util.List)var90);
    boolean var93 = var10.isNullable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);

  }

  public void test287() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test287"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    java.util.List var2 = var0.getEdges();
    java.util.List var3 = var0.getGraphvizNodes();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var6 = var4.hasNode((java.lang.Object)1);
    java.util.List var7 = var4.getGraphvizEdges();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.Collection var9 = var8.getNodes();
    com.google.javascript.rhino.jstype.TernaryValue var11 = com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(154);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var12 = var8.createDirectedGraphNode((java.lang.Object)var11);
    java.util.List var13 = var4.getDirectedPredNodes(var12);
    java.util.List var14 = var0.getDirectedPredNodes(var12);
    com.google.javascript.jscomp.graph.SubGraph var15 = var0.newSubGraph();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test288() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test288"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.JSError[] var4 = var3.getMessages();
    com.google.javascript.jscomp.Region var7 = var3.getSourceRegion("2014/12/24 11:10", 0);
    com.google.javascript.jscomp.Scope var8 = var3.getTopScope();
    com.google.javascript.jscomp.MessageFormatter var9 = null;
    java.util.logging.Logger var10 = null;
    com.google.javascript.jscomp.LoggerErrorManager var11 = new com.google.javascript.jscomp.LoggerErrorManager(var9, var10);
    com.google.javascript.jscomp.Compiler var12 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var11);
    com.google.javascript.jscomp.JSError[] var13 = var12.getMessages();
    com.google.javascript.rhino.Node var14 = var12.getRoot();
    com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var16 = null;
    var15.setStripTypes(var16);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var19 = var18.getDirectedGraphNodes();
    java.util.List var20 = var18.getEdges();
    var15.setManageClosureDependencies(var20);
    boolean var22 = var15.isExternExportsEnabled();
    var15.setCheckCaja(false);
    var15.setRemoveUnusedPrototypeProperties(true);
    var15.setCheckTypes(false);
    var15.setMoveFunctionDeclarations(true);
    com.google.javascript.jscomp.DefaultPassConfig var31 = new com.google.javascript.jscomp.DefaultPassConfig(var15);
    var12.setPassConfig((com.google.javascript.jscomp.PassConfig)var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.setPassConfig((com.google.javascript.jscomp.PassConfig)var31);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test289() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test289"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    java.lang.String var61 = var58.getReferenceName();
    boolean var62 = var58.isObject();
    boolean var63 = var58.canBeCalled();
    boolean var64 = var58.canBeCalled();
    boolean var65 = var58.matchesNumberContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var61.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);

  }

  public void test290() {}
//   public void test290() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test290"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
//     com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
//     com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var8 = null;
//     var7.setStripTypes(var8);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var11 = var10.getDirectedGraphNodes();
//     java.util.List var12 = var10.getEdges();
//     var7.setManageClosureDependencies(var12);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.script(var12);
//     var6.traverseRoots(var12);
//     com.google.javascript.rhino.Node var16 = var6.getEnclosingFunction();
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.continueNode();
//     com.google.javascript.jscomp.DiagnosticType var20 = com.google.javascript.jscomp.DiagnosticType.disabled("(LABEL_NAME hi!)", "()");
//     com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var26 = var25.getNext();
//     boolean var27 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var25);
//     int var28 = var25.getLength();
//     com.google.javascript.rhino.Node var29 = null;
//     boolean var30 = var25.hasChild(var29);
//     com.google.javascript.rhino.Node var31 = var23.useSourceInfoIfMissingFromForTree(var25);
//     var25.setSourceFileForTesting("Unversioned directory");
//     boolean var34 = var25.isWith();
//     com.google.javascript.rhino.jstype.StaticSourceFile var35 = var25.getStaticSourceFile();
//     com.google.javascript.jscomp.DiagnosticType var38 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
//     com.google.javascript.jscomp.MessageFormatter var39 = null;
//     java.util.logging.Logger var40 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var41 = new com.google.javascript.jscomp.LoggerErrorManager(var39, var40);
//     com.google.javascript.jscomp.Compiler var42 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var41);
//     com.google.javascript.jscomp.Scope var43 = var42.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var44 = null;
//     com.google.javascript.jscomp.NodeTraversal var45 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var42, var44);
//     com.google.javascript.jscomp.Scope var46 = var45.getScope();
//     com.google.javascript.rhino.Node var47 = null;
//     com.google.javascript.jscomp.DiagnosticType var50 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var52 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var53 = com.google.javascript.jscomp.JSError.make(var50, var52);
//     com.google.javascript.jscomp.DiagnosticType var54 = var53.getType();
//     java.lang.String[] var56 = new java.lang.String[] { "LABEL_NAME hi!"};
//     com.google.javascript.jscomp.JSError var57 = var45.makeError(var47, var54, var56);
//     com.google.javascript.jscomp.JSError var58 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var25, var38, var56);
//     var6.report(var17, var20, var56);
//     java.lang.String var60 = var6.getSourceName();
//     com.google.javascript.rhino.Node var61 = var6.getScopeRoot();
// 
//   }

  public void test291() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test291"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    var1.clearTemplateTypeNames();
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    var9.unregisterPropertyOnType("Unversioned directory", var11);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    com.google.javascript.jscomp.JSModule var15 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var16 = var15.getDependencies();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.block(var16);
    com.google.javascript.rhino.jstype.FunctionType var18 = var9.createFunctionTypeWithVarArgs(var13, var16);
    boolean var20 = var18.removeProperty("null(null)");
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var24 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var23);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var26.unregisterPropertyOnType("Unversioned directory", var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    boolean var32 = var26.canPropertyBeDefined(var30, "BANG");
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
    com.google.javascript.rhino.Node var35 = var26.createParameters(var34);
    boolean var36 = var24.addRequiredParams(var34);
    com.google.javascript.rhino.jstype.FunctionType var37 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var18, false, var34);
    boolean var38 = var37.isInstanceType();
    com.google.javascript.rhino.jstype.ParameterizedType var39 = var37.toMaybeParameterizedType();
    boolean var40 = var37.isParameterizedType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test292() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test292"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setProtectHiddenSideEffects(true);
    var0.setLineLengthThreshold((-19));
    com.google.javascript.jscomp.CompilerOptions var14 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var15 = null;
    var14.setStripTypes(var15);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var18 = var17.getDirectedGraphNodes();
    java.util.List var19 = var17.getEdges();
    var14.setManageClosureDependencies(var19);
    var14.setDevirtualizePrototypeMethods(true);
    var14.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var25 = var14.getTweakProcessing();
    var14.setCollapseVariableDeclarations(false);
    var14.setCommonJSModulePathPrefix("function (): {540092593}");
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var30 = var14.getLanguageIn();
    var0.setLanguageIn(var30);
    com.google.javascript.jscomp.CompilerOptions var33 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var34 = null;
    var33.setStripTypes(var34);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var36 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var37 = var36.getDirectedGraphNodes();
    java.util.List var38 = var36.getEdges();
    var33.setManageClosureDependencies(var38);
    var33.setDevirtualizePrototypeMethods(true);
    var33.setCollapsePropertiesOnExternTypes(false);
    var33.setShadowVariables(false);
    com.google.javascript.jscomp.MessageFormatter var46 = null;
    java.util.logging.Logger var47 = null;
    com.google.javascript.jscomp.LoggerErrorManager var48 = new com.google.javascript.jscomp.LoggerErrorManager(var46, var47);
    com.google.javascript.jscomp.Compiler var49 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var48);
    com.google.javascript.jscomp.Scope var50 = var49.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var51 = null;
    com.google.javascript.jscomp.NodeTraversal var52 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var49, var51);
    boolean var53 = var52.hasScope();
    com.google.javascript.jscomp.JSModule var55 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var56 = var55.getDependencies();
    int var57 = var55.getDepth();
    java.util.List var58 = var55.getRequires();
    var52.traverseRoots(var58);
    var33.setSourceMapLocationMappings(var58);
    var0.setReplaceStringsConfiguration("module$InputId: ", var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test293() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test293"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    java.lang.String var19 = var14.getDescriptionForParameter("");
    boolean var20 = var14.hasEnumParameterType();
    boolean var21 = var14.isJavaDispatch();
    boolean var22 = var14.hasThisType();
    boolean var23 = var14.isHidden();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test294() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test294"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
    com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
    com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var8 = null;
    var7.setStripTypes(var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var11 = var10.getDirectedGraphNodes();
    java.util.List var12 = var10.getEdges();
    var7.setManageClosureDependencies(var12);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.script(var12);
    var6.traverseRoots(var12);
    boolean var16 = var6.hasScope();
    com.google.javascript.rhino.Node var17 = var6.getEnclosingFunction();
    com.google.javascript.jscomp.Compiler var18 = var6.getCompiler();
    boolean var19 = var6.hasScope();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test295() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test295"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    java.util.List var2 = var0.getEdges();
    java.util.List var3 = var0.getGraphvizNodes();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.InputId var7 = var5.getInputId();
    boolean var8 = var5.isGetProp();
    com.google.javascript.rhino.ErrorReporter var9 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var9);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var10.unregisterPropertyOnType("Unversioned directory", var12);
    var10.identifyNonNullableName("2014/12/24 11:10");
    var10.clearTemplateTypeNames();
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    var18.unregisterPropertyOnType("Unversioned directory", var20);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    com.google.javascript.jscomp.JSModule var24 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var25 = var24.getDependencies();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.block(var25);
    com.google.javascript.rhino.jstype.FunctionType var27 = var18.createFunctionTypeWithVarArgs(var22, var25);
    boolean var29 = var27.removeProperty("null(null)");
    com.google.javascript.rhino.ErrorReporter var31 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var31);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var33 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var32);
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    com.google.javascript.rhino.jstype.JSType var37 = null;
    var35.unregisterPropertyOnType("Unversioned directory", var37);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    boolean var41 = var35.canPropertyBeDefined(var39, "BANG");
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.Node var44 = var35.createParameters(var43);
    boolean var45 = var33.addRequiredParams(var43);
    com.google.javascript.rhino.jstype.FunctionType var46 = var10.createConstructorType((com.google.javascript.rhino.jstype.JSType)var27, false, var43);
    boolean var47 = var27.isOrdinaryFunction();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var48 = var0.isConnected((java.lang.Object)var8, (java.lang.Object)var47);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);

  }

  public void test296() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test296"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var11 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var12 = var11.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var13 = new com.google.javascript.jscomp.ComposeWarningsGuard(var12);
    com.google.javascript.jscomp.JSError var14 = null;
    com.google.javascript.jscomp.CheckLevel var15 = var13.level(var14);
    var0.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var13);
    com.google.javascript.jscomp.DiagnosticType var19 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var21 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var22 = com.google.javascript.jscomp.JSError.make(var19, var21);
    int var23 = var22.getCharno();
    int var24 = var22.getLineNumber();
    com.google.javascript.jscomp.CheckLevel var25 = var13.level(var22);
    int var26 = var22.getNodeSourceOffset();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));

  }

  public void test297() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test297"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    boolean var9 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var7);
    int var10 = var7.getLength();
    boolean var11 = var7.isInstanceOf();
    boolean var12 = var7.isName();
    com.google.javascript.jscomp.ClosureCodingConvention var13 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var14 = null;
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    boolean var21 = var18.isOr();
    java.lang.String var22 = var13.extractClassNameIfRequire(var14, var18);
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.jscomp.JSModule var30 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var31 = var30.getDependencies();
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.block(var31);
    com.google.javascript.rhino.jstype.FunctionType var33 = var24.createFunctionTypeWithVarArgs(var28, var31);
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    com.google.javascript.rhino.jstype.JSType var37 = null;
    var35.unregisterPropertyOnType("Unversioned directory", var37);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    com.google.javascript.jscomp.JSModule var41 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var42 = var41.getDependencies();
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.block(var42);
    com.google.javascript.rhino.jstype.FunctionType var44 = var35.createFunctionTypeWithVarArgs(var39, var42);
    boolean var45 = var44.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var46 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var47 = var46.getDirectedGraphNodes();
    java.lang.Iterable var48 = var46.getDirectedGraphNodes();
    java.util.List var49 = var46.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var50 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var51 = null;
    var50.setStripTypes(var51);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var53 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var54 = var53.getDirectedGraphNodes();
    java.util.List var55 = var53.getEdges();
    var50.setManageClosureDependencies(var55);
    boolean var57 = var50.isExternExportsEnabled();
    var50.setCheckCaja(false);
    java.util.Set var60 = null;
    var50.setReplaceStringsReservedStrings(var60);
    var50.setAliasAllStrings(true);
    var50.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var66 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var67 = null;
    var66.setStripTypes(var67);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var69 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var70 = var69.getDirectedGraphNodes();
    java.util.List var71 = var69.getEdges();
    var66.setManageClosureDependencies(var71);
    boolean var73 = var66.isExternExportsEnabled();
    var66.setCheckCaja(false);
    var66.setGroupVariableDeclarations(true);
    java.util.Map var78 = var66.getDefineReplacements();
    var50.setPropertyInvalidationErrors(var78);
    var13.defineDelegateProxyPrototypeProperties(var24, (com.google.javascript.rhino.jstype.StaticScope)var44, var49, var78);
    boolean var81 = var44.canBeCalled();
    com.google.javascript.rhino.jstype.ObjectType var83 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var44, "BANG");
    com.google.javascript.rhino.jstype.FunctionType var84 = var44.toMaybeFunctionType();
    com.google.javascript.rhino.jstype.ObjectType var85 = var1.createObjectType("()", var7, (com.google.javascript.rhino.jstype.ObjectType)var44);
    int var86 = var7.getSourceOffset();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == (-1));

  }

  public void test298() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test298"); }


    com.google.javascript.rhino.jstype.JSType var1 = null;
    com.google.javascript.rhino.jstype.SimpleSlot var3 = new com.google.javascript.rhino.jstype.SimpleSlot("Unversioned directory", var1, false);
    com.google.javascript.rhino.jstype.StaticReference var4 = var3.getDeclaration();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test299() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test299"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var19 = var14.hasParameter("BANG 0\n    STRING hi 0 [length: 2]\n");
    var14.setLicense("goog.abstractMethod");
    boolean var22 = var14.isConstant();
    boolean var24 = var14.hasDescriptionForParameter("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    java.lang.String var25 = var14.getLicense();
    java.lang.String var26 = var14.getBlockDescription();
    boolean var27 = var14.isOverride();
    boolean var28 = var14.hasThisType();
    java.lang.String var29 = var14.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "goog.abstractMethod"+ "'", var25.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "JSDocInfo"+ "'", var29.equals("JSDocInfo"));

  }

  public void test300() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test300"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    com.google.javascript.jscomp.GoogleCodingConvention var33 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    boolean var35 = var33.isConstant("module$2014$12$24 11:10");
    boolean var38 = var33.isExported("Unversioned directory", false);
    boolean var40 = var33.isConstantKey("function (): {540092593}");
    boolean var42 = var33.isPrivate("LABEL_NAME hi!");
    boolean var44 = var33.isPrivate("");
    boolean var46 = var33.isValidEnumKey("");
    java.lang.String var47 = var33.getGlobalObject();
    boolean var49 = var33.isPrivate("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "goog.global"+ "'", var47.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test301() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test301"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getDependencies();
    com.google.javascript.jscomp.SourceAst var3 = null;
    com.google.javascript.rhino.InputId var4 = null;
    com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3, var4, true);
    com.google.javascript.jscomp.JSModule var7 = var6.getModule();
    var1.add(var6);
    com.google.javascript.jscomp.SourceFile var10 = com.google.javascript.jscomp.SourceFile.fromFile("()");
    var1.addFirst(var10);
    java.util.Set var12 = var1.getAllDependencies();
    var1.removeAll();
    com.google.javascript.jscomp.MessageFormatter var14 = null;
    java.util.logging.Logger var15 = null;
    com.google.javascript.jscomp.LoggerErrorManager var16 = new com.google.javascript.jscomp.LoggerErrorManager(var14, var15);
    com.google.javascript.jscomp.Compiler var17 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var16);
    int var18 = var17.getErrorCount();
    var1.sortInputsByDeps(var17);
    java.util.List var20 = var1.getRequires();
    java.io.PrintStream var21 = null;
    com.google.javascript.jscomp.Compiler var22 = new com.google.javascript.jscomp.Compiler(var21);
    com.google.javascript.jscomp.CompilerOptions var23 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var24 = null;
    var23.setStripTypes(var24);
    var23.setAliasKeywords(false);
    com.google.javascript.jscomp.DefaultPassConfig var28 = new com.google.javascript.jscomp.DefaultPassConfig(var23);
    var22.setPassConfig((com.google.javascript.jscomp.PassConfig)var28);
    com.google.javascript.jscomp.MessageFormatter var30 = null;
    java.util.logging.Logger var31 = null;
    com.google.javascript.jscomp.LoggerErrorManager var32 = new com.google.javascript.jscomp.LoggerErrorManager(var30, var31);
    com.google.javascript.jscomp.Compiler var33 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var32);
    com.google.javascript.jscomp.JSModule var35 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var36 = var35.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var37 = new com.google.javascript.jscomp.ComposeWarningsGuard(var36);
    com.google.javascript.jscomp.JSModule var39 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var40 = var39.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var41 = new com.google.javascript.jscomp.ComposeWarningsGuard(var40);
    com.google.javascript.jscomp.CompilerOptions var42 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var43 = null;
    var42.setStripTypes(var43);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var45 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var46 = var45.getDirectedGraphNodes();
    java.util.List var47 = var45.getEdges();
    var42.setManageClosureDependencies(var47);
    boolean var49 = var42.isExternExportsEnabled();
    var42.setCollapsePropertiesOnExternTypes(false);
    var33.<com.google.javascript.jscomp.SourceFile>initModules(var36, var40, var42);
    com.google.javascript.jscomp.NodeTraversal.Callback var53 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var22, var40, var53);
    var1.sortInputsByDeps(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test302() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test302"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var7 = null;
    var6.setResolveMode(var7);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var9 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var6);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var10 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var6);
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
    boolean var17 = var14.isVarArgs();
    com.google.javascript.rhino.Node var19 = var14.getChildAtIndex(1);
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
    com.google.javascript.rhino.JSDocInfo var26 = var23.getJSDocInfo();
    com.google.javascript.rhino.Node var27 = var14.copyInformationFrom(var23);
    java.lang.Object var29 = null;
    var14.putProp(0, var29);
    com.google.javascript.rhino.JSTypeExpression var32 = new com.google.javascript.rhino.JSTypeExpression(var14, "()");
    com.google.javascript.rhino.jstype.StaticScope var33 = null;
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    com.google.javascript.rhino.jstype.JSType var37 = null;
    var35.unregisterPropertyOnType("Unversioned directory", var37);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    boolean var41 = var35.canPropertyBeDefined(var39, "BANG");
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.Node var44 = var35.createParameters(var43);
    com.google.javascript.rhino.jstype.JSType var45 = var32.evaluate(var33, var35);
    com.google.javascript.rhino.jstype.JSType var46 = var45.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var47 = var46.dereference();
    java.util.Collection var48 = var6.getDirectImplementors(var47);
    com.google.javascript.rhino.jstype.JSType var53 = var1.getType((com.google.javascript.rhino.jstype.StaticScope)var47, "hi!", "BANG 0\n    STRING hi 0 [length: 2]\n", 10, 10);
    boolean var54 = var47.matchesInt32Context();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);

  }

  public void test303() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test303"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var13 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    com.google.javascript.rhino.Node var22 = var17.getChildAtIndex(1);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
    com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var26);
    java.lang.Object var32 = null;
    var17.putProp(0, var32);
    com.google.javascript.rhino.JSTypeExpression var35 = new com.google.javascript.rhino.JSTypeExpression(var17, "()");
    com.google.javascript.rhino.jstype.StaticScope var36 = null;
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    var38.unregisterPropertyOnType("Unversioned directory", var40);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    boolean var44 = var38.canPropertyBeDefined(var42, "BANG");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.Node var47 = var38.createParameters(var46);
    com.google.javascript.rhino.jstype.JSType var48 = var35.evaluate(var36, var38);
    boolean var49 = var13.addVarArgs(var48);
    boolean var50 = var48.isOrdinaryFunction();
    boolean var51 = var48.isResolved();
    boolean var53 = var1.canPropertyBeDefined(var48, "{proxy:{1612771089}}");
    com.google.javascript.rhino.jstype.JSTypeNative[] var54 = com.google.javascript.rhino.jstype.JSTypeNative.values();
    com.google.javascript.rhino.jstype.JSType var55 = var1.createUnionType(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test304() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test304"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var12 = var10.hasOwnProperty("STRING hi 0 [length: 2]");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.FunctionType var13 = var10.cloneWithoutArrowType();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test305() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test305"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setTransformAMDToCJSModules(false);
    var0.setRuntimeTypeCheck(false);
    var0.setLooseTypes(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test306() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test306"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setSourceMapOutputPath("()");
    var0.setExternExports(true);
    var0.setPreferLineBreakAtEndOfFile(true);
    var0.setRewriteNewDateGoogNow(false);
    var0.setDeadAssignmentElimination(false);
    var0.setShadowVariables(false);
    com.google.javascript.rhino.JSDocInfoBuilder var25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var26 = var25.recordExpose();
    boolean var28 = var25.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    com.google.javascript.rhino.InputId var35 = com.google.javascript.jscomp.NodeUtil.getInputId(var32);
    com.google.javascript.rhino.jstype.JSType var36 = null;
    var32.setJSType(var36);
    com.google.javascript.rhino.JSDocInfo var38 = var25.build(var32);
    java.lang.String var39 = var38.getFileOverview();
    java.util.Set var40 = var38.getModifies();
    java.util.List var41 = var38.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var42 = var38.getType();
    boolean var43 = var38.isConsistentIdGenerator();
    java.lang.String var44 = var38.getDeprecationReason();
    java.util.List var45 = var38.getThrownTypes();
    var0.setReplaceStringsConfiguration("Node tree inequality:\nTree1:\nSTRING_KEY Unversioned directory 0 [length: 2]\n\n\nTree2:\nBANG 0\n    STRING hi 0 [length: 2]\n\n\nSubtree1: STRING_KEY Unversioned directory 0 [length: 2]\n\n\nSubtree2: BANG 0\n    STRING hi 0 [length: 2]\n", var45);
    var0.setRuntimeTypeCheckLogFunction("module$ERROR");
    var0.enableRuntimeTypeCheck("RETURN 0");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "2014/12/24 11:10"+ "'", var44.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test307() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test307"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getDependencies();
    int var3 = var1.getDepth();
    java.util.Set var4 = var1.getAllDependencies();
    boolean var6 = var1.removeByName("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test308() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test308"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.jstype.ObjectType var5 = var1.createAnonymousObjectType();
    com.google.javascript.rhino.jstype.ObjectType var6 = var1.createAnonymousObjectType();
    com.google.javascript.rhino.jstype.JSType var11 = var1.createNamedType("function (): {1852005172}", "function (): {1529715975}", 100, 3);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    boolean var19 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var17);
    int var20 = var17.getLength();
    com.google.javascript.rhino.Node var21 = null;
    boolean var22 = var17.hasChild(var21);
    com.google.javascript.rhino.Node var23 = var15.useSourceInfoIfMissingFromForTree(var17);
    var17.setSourceFileForTesting("Unversioned directory");
    boolean var26 = var17.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var27 = var17.getStaticSourceFile();
    com.google.javascript.jscomp.DiagnosticType var30 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
    com.google.javascript.jscomp.MessageFormatter var31 = null;
    java.util.logging.Logger var32 = null;
    com.google.javascript.jscomp.LoggerErrorManager var33 = new com.google.javascript.jscomp.LoggerErrorManager(var31, var32);
    com.google.javascript.jscomp.Compiler var34 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var33);
    com.google.javascript.jscomp.Scope var35 = var34.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var36 = null;
    com.google.javascript.jscomp.NodeTraversal var37 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var34, var36);
    com.google.javascript.jscomp.Scope var38 = var37.getScope();
    com.google.javascript.rhino.Node var39 = null;
    com.google.javascript.jscomp.DiagnosticType var42 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var44 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var45 = com.google.javascript.jscomp.JSError.make(var42, var44);
    com.google.javascript.jscomp.DiagnosticType var46 = var45.getType();
    java.lang.String[] var48 = new java.lang.String[] { "LABEL_NAME hi!"};
    com.google.javascript.jscomp.JSError var49 = var37.makeError(var39, var46, var48);
    com.google.javascript.jscomp.JSError var50 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var17, var30, var48);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.FunctionType var51 = var1.createInterfaceType("function (): {944163309}", var17);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test309() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test309"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType var70 = var31.collapseUnion();
    boolean var71 = var31.matchesInt32Context();
    com.google.javascript.rhino.jstype.JSType var72 = var31.getReturnType();
    com.google.javascript.rhino.jstype.JSType var74 = var31.findPropertyType("{proxy:{599688852}}");
    boolean var75 = var31.isFunctionPrototypeType();
    java.lang.String var76 = var31.getNormalizedReferenceName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);

  }

  public void test310() {}
//   public void test310() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test310"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var5 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var6 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var3, var5);
//     com.google.javascript.jscomp.JSError[] var7 = var3.getWarnings();
//     com.google.javascript.jscomp.SourceFile var9 = com.google.javascript.jscomp.SourceFile.fromFile("InputId: ");
//     com.google.javascript.jscomp.Region var11 = var9.getRegion(10);
//     var9.setOriginalPath("(module$2014$12$24 11:10)");
//     com.google.javascript.jscomp.JsAst var14 = new com.google.javascript.jscomp.JsAst(var9);
//     var3.replaceScript(var14);
// 
//   }

  public void test311() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test311"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var4 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var5 = com.google.javascript.jscomp.JSError.make(var2, var4);
    com.google.javascript.jscomp.DiagnosticType var6 = var5.getType();
    int var7 = var5.getNodeLength();
    com.google.javascript.jscomp.CheckLevel var8 = var5.getDefaultLevel();
    com.google.javascript.jscomp.CheckLevel var9 = var5.getDefaultLevel();
    com.google.javascript.jscomp.DiagnosticType var10 = var5.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test312() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test312"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    var1.clearNamedTypes();
    com.google.javascript.rhino.Node var9 = new com.google.javascript.rhino.Node(0, 2, (-1));
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    boolean var21 = var20.hasAnyTemplateInternal();
    java.lang.Iterable var22 = var20.getAllExtendedInterfaces();
    boolean var23 = var20.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    var25.unregisterPropertyOnType("Unversioned directory", var27);
    com.google.javascript.rhino.jstype.JSType var29 = null;
    com.google.javascript.jscomp.JSModule var31 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var32 = var31.getDependencies();
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.block(var32);
    com.google.javascript.rhino.jstype.FunctionType var34 = var25.createFunctionTypeWithVarArgs(var29, var32);
    boolean var36 = var34.removeProperty("null(null)");
    var20.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var34);
    java.lang.String var38 = var20.getDisplayName();
    com.google.javascript.rhino.JSDocInfo var39 = var20.getJSDocInfo();
    com.google.javascript.rhino.jstype.JSType var40 = var20.getReturnType();
    var9.setJSType(var40);
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = var45.getNext();
    com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
    boolean var48 = var45.isVarArgs();
    com.google.javascript.rhino.Node var50 = var45.getChildAtIndex(1);
    com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var54 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = var54.getNext();
    com.google.javascript.rhino.Node var56 = var52.srcrefTree(var54);
    com.google.javascript.rhino.JSDocInfo var57 = var54.getJSDocInfo();
    com.google.javascript.rhino.Node var58 = var45.copyInformationFrom(var54);
    java.lang.Object var60 = null;
    var45.putProp(0, var60);
    com.google.javascript.rhino.JSTypeExpression var63 = new com.google.javascript.rhino.JSTypeExpression(var45, "()");
    com.google.javascript.rhino.jstype.StaticScope var64 = null;
    com.google.javascript.rhino.ErrorReporter var65 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var65);
    com.google.javascript.rhino.jstype.JSType var68 = null;
    var66.unregisterPropertyOnType("Unversioned directory", var68);
    com.google.javascript.rhino.jstype.JSType var70 = null;
    boolean var72 = var66.canPropertyBeDefined(var70, "BANG");
    com.google.javascript.rhino.jstype.JSType var73 = null;
    com.google.javascript.rhino.jstype.JSType[] var74 = new com.google.javascript.rhino.jstype.JSType[] { var73};
    com.google.javascript.rhino.Node var75 = var66.createParameters(var74);
    com.google.javascript.rhino.jstype.JSType var76 = var63.evaluate(var64, var66);
    com.google.javascript.rhino.jstype.JSType var77 = var76.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var78 = var77.dereference();
    boolean var79 = var78.isUnknownType();
    com.google.javascript.rhino.jstype.JSType var80 = var78.getParameterType();
    boolean var82 = var78.hasOwnProperty("WARNING - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    boolean var83 = var78.isNominalConstructor();
    com.google.javascript.rhino.jstype.EnumType var84 = var1.createEnumType("function (): {176541993}", var9, (com.google.javascript.rhino.jstype.JSType)var78);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var85 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test313() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test313"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    var0.pushEdgeAnnotations();
    java.lang.Iterable var3 = var0.getDirectedGraphNodes();
    com.google.javascript.jscomp.CheckLevel var5 = null;
    com.google.javascript.jscomp.DiagnosticType var7 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var5, "Unversioned directory");
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var8 = var0.getDirectedGraphNode((java.lang.Object)"hi!");
    java.util.Collection var9 = var0.getNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var12 = var11.recordExpose();
    boolean var14 = var11.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    com.google.javascript.rhino.InputId var21 = com.google.javascript.jscomp.NodeUtil.getInputId(var18);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var18.setJSType(var22);
    com.google.javascript.rhino.JSDocInfo var24 = var11.build(var18);
    java.util.List var25 = var24.getThrownTypes();
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    boolean var32 = var29.isOr();
    var24.setAssociatedNode(var29);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var34 = var0.getDirectedGraphNode((java.lang.Object)var24);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var36 = var35.getDirectedGraphNodes();
    java.lang.Iterable var37 = var35.getDirectedGraphNodes();
    var35.pushEdgeAnnotations();
    java.lang.String var39 = var35.getName();
    java.util.List var40 = var35.getEdges();
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.returnNode();
    var41.setSourceFileForTesting("null(null)");
    boolean var44 = var41.isDo();
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = var48.getNext();
    com.google.javascript.rhino.Node var50 = var46.srcrefTree(var48);
    com.google.javascript.rhino.Node var51 = var48.removeFirstChild();
    com.google.javascript.rhino.Node.AncestorIterable var52 = var51.getAncestors();
    var41.addChildrenToFront(var51);
    int var54 = var41.getSourcePosition();
    java.lang.String var55 = com.google.javascript.jscomp.NodeUtil.getSourceName(var41);
    com.google.javascript.rhino.Node var56 = var41.getParent();
    java.lang.Object var58 = null;
    var41.putProp(3, var58);
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.name("STRING hi 0 [length: 2]\n");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var62 = var0.isConnectedInDirection((java.lang.Object)var35, var58, (java.lang.Object)var61);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "LinkedGraph"+ "'", var39.equals("LinkedGraph"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "null(null)"+ "'", var55.equals("null(null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test314() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test314"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.wasEmptyNode();
    com.google.javascript.rhino.JSDocInfoBuilder var9 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var10 = var9.recordExpose();
    boolean var12 = var9.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = var16.getNext();
    com.google.javascript.rhino.Node var18 = var14.srcrefTree(var16);
    com.google.javascript.rhino.InputId var19 = com.google.javascript.jscomp.NodeUtil.getInputId(var16);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    var16.setJSType(var20);
    com.google.javascript.rhino.JSDocInfo var22 = var9.build(var16);
    java.lang.String var23 = var22.getFileOverview();
    java.util.Set var24 = var22.getModifies();
    java.util.List var25 = var22.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var26 = var22.getType();
    boolean var27 = var22.isConsistentIdGenerator();
    java.lang.String var28 = var22.getDeprecationReason();
    var4.setJSDocInfo(var22);
    boolean var30 = var4.isCatch();
    com.google.javascript.rhino.Node[] var31 = new com.google.javascript.rhino.Node[] { var4};
    com.google.javascript.rhino.Node var32 = new com.google.javascript.rhino.Node(154, var31);
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.name("Unversioned directory.  at goog.abstractMethod line (unknown line) : (unknown column)");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var35 = var32.getChildBefore(var34);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "2014/12/24 11:10"+ "'", var28.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test315() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test315"); }


    com.google.javascript.jscomp.CheckLevel var1 = null;
    com.google.javascript.jscomp.DiagnosticType var3 = com.google.javascript.jscomp.DiagnosticType.make("goog.abstractMethod", var1, "null(null)");
    java.lang.String var4 = var3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "goog.abstractMethod: null(null)"+ "'", var4.equals("goog.abstractMethod: null(null)"));

  }

  public void test316() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test316"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.List var15 = var14.getThrownTypes();
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    boolean var22 = var19.isOr();
    var14.setAssociatedNode(var19);
    java.util.Set var24 = var14.getParameterNames();
    java.util.List var25 = var14.getImplementedInterfaces();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.script(var25);
    int var27 = var26.getChildCount();
    var26.setType(154);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);

  }

  public void test317() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test317"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setChainCalls(true);
    var0.setGenerateExports(true);
    com.google.javascript.jscomp.DiagnosticGroup var5 = null;
    com.google.javascript.jscomp.CompilerOptions var6 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var7 = null;
    var6.setStripTypes(var7);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var9 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var10 = var9.getDirectedGraphNodes();
    java.util.List var11 = var9.getEdges();
    var6.setManageClosureDependencies(var11);
    boolean var13 = var6.isExternExportsEnabled();
    var6.setCheckCaja(false);
    java.util.Set var16 = null;
    var6.setReplaceStringsReservedStrings(var16);
    com.google.javascript.rhino.JSDocInfoBuilder var19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var20 = var19.recordExpose();
    boolean var22 = var19.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.InputId var29 = com.google.javascript.jscomp.NodeUtil.getInputId(var26);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    var26.setJSType(var30);
    com.google.javascript.rhino.JSDocInfo var32 = var19.build(var26);
    java.lang.String var33 = var32.getFileOverview();
    java.util.Set var34 = var32.getModifies();
    var6.setReplaceStringsReservedStrings(var34);
    var6.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var40 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var42 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var43 = com.google.javascript.jscomp.JSError.make(var40, var42);
    int var44 = var43.getCharno();
    com.google.javascript.jscomp.CheckLevel var45 = var43.getDefaultLevel();
    var6.setCheckGlobalThisLevel(var45);
    com.google.javascript.jscomp.CompilerOptions var47 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var48 = null;
    var47.setStripTypes(var48);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var51 = var50.getDirectedGraphNodes();
    java.util.List var52 = var50.getEdges();
    var47.setManageClosureDependencies(var52);
    boolean var54 = var47.isExternExportsEnabled();
    var47.setCheckCaja(false);
    java.util.Set var57 = null;
    var47.setReplaceStringsReservedStrings(var57);
    com.google.javascript.rhino.JSDocInfoBuilder var60 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var61 = var60.recordExpose();
    boolean var63 = var60.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.InputId var70 = com.google.javascript.jscomp.NodeUtil.getInputId(var67);
    com.google.javascript.rhino.jstype.JSType var71 = null;
    var67.setJSType(var71);
    com.google.javascript.rhino.JSDocInfo var73 = var60.build(var67);
    java.lang.String var74 = var73.getFileOverview();
    java.util.Set var75 = var73.getModifies();
    var47.setReplaceStringsReservedStrings(var75);
    var47.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var81 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var83 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var84 = com.google.javascript.jscomp.JSError.make(var81, var83);
    int var85 = var84.getCharno();
    com.google.javascript.jscomp.CheckLevel var86 = var84.getDefaultLevel();
    var47.setCheckGlobalThisLevel(var86);
    var6.setBrokenClosureRequiresLevel(var86);
    var0.setWarningLevel(var5, var86);
    var0.setReplaceStringsPlaceholderToken("BANG 0 [source_file: Unversioned directory]\n");
    var0.setCheckCaja(false);
    boolean var94 = var0.shouldColorizeErrorOutput();
    var0.setCheckSuspiciousCode(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test318() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test318"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    var18.unregisterPropertyOnType("Unversioned directory", var20);
    var18.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = var28.getNext();
    com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
    boolean var31 = var28.isVarArgs();
    boolean var32 = var28.isFor();
    boolean var33 = var28.isNumber();
    com.google.javascript.rhino.Node var34 = var28.getNext();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    com.google.javascript.rhino.Node var43 = var38.getChildAtIndex(1);
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.JSDocInfo var50 = var47.getJSDocInfo();
    com.google.javascript.rhino.Node var51 = var38.copyInformationFrom(var47);
    java.lang.Object var53 = null;
    var38.putProp(0, var53);
    com.google.javascript.rhino.JSTypeExpression var56 = new com.google.javascript.rhino.JSTypeExpression(var38, "()");
    com.google.javascript.rhino.jstype.StaticScope var57 = null;
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var59.unregisterPropertyOnType("Unversioned directory", var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    boolean var65 = var59.canPropertyBeDefined(var63, "BANG");
    com.google.javascript.rhino.jstype.JSType var66 = null;
    com.google.javascript.rhino.jstype.JSType[] var67 = new com.google.javascript.rhino.jstype.JSType[] { var66};
    com.google.javascript.rhino.Node var68 = var59.createParameters(var67);
    com.google.javascript.rhino.jstype.JSType var69 = var56.evaluate(var57, var59);
    com.google.javascript.rhino.jstype.JSType var70 = var69.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var71 = var70.dereference();
    boolean var72 = var70.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var73 = var18.createEnumType("STRING hi 0 [length: 2]\n", var28, var70);
    java.lang.String var74 = var73.getDisplayName();
    com.google.javascript.rhino.Node var75 = var73.getSource();
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.stringKey("hi!");
    boolean var78 = var10.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var73, var77);
    boolean var79 = var73.isDateType();
    boolean var80 = var73.matchesStringContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var74.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);

  }

  public void test319() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test319"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setShadowVariables(false);
    com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var14 = null;
    var13.setStripTypes(var14);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var16 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var17 = var16.getDirectedGraphNodes();
    java.util.List var18 = var16.getEdges();
    var13.setManageClosureDependencies(var18);
    boolean var20 = var13.isExternExportsEnabled();
    var13.setCheckCaja(false);
    java.util.Set var23 = null;
    var13.setReplaceStringsReservedStrings(var23);
    com.google.javascript.rhino.JSDocInfoBuilder var26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var27 = var26.recordExpose();
    boolean var29 = var26.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = var33.getNext();
    com.google.javascript.rhino.Node var35 = var31.srcrefTree(var33);
    com.google.javascript.rhino.InputId var36 = com.google.javascript.jscomp.NodeUtil.getInputId(var33);
    com.google.javascript.rhino.jstype.JSType var37 = null;
    var33.setJSType(var37);
    com.google.javascript.rhino.JSDocInfo var39 = var26.build(var33);
    java.lang.String var40 = var39.getFileOverview();
    java.util.Set var41 = var39.getModifies();
    var13.setReplaceStringsReservedStrings(var41);
    var13.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var47 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var49 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var50 = com.google.javascript.jscomp.JSError.make(var47, var49);
    int var51 = var50.getCharno();
    com.google.javascript.jscomp.CheckLevel var52 = var50.getDefaultLevel();
    var13.setCheckGlobalThisLevel(var52);
    var0.setCheckMissingGetCssNameLevel(var52);
    var0.setDefineToNumberLiteral("(LABEL_NAME hi!)", 10);
    var0.setExternExports(false);
    com.google.common.collect.Multimap var60 = null;
    var0.setCustomPasses(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test320() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test320"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    boolean var7 = var1.canPropertyBeDefined(var5, "BANG");
    java.lang.Iterable var9 = var1.getEachReferenceTypeWithProperty("Unversioned directory");
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    boolean var21 = var20.hasAnyTemplateInternal();
    java.lang.Iterable var22 = var20.getAllExtendedInterfaces();
    boolean var23 = var20.isEmptyType();
    java.util.Set var24 = var20.getOwnPropertyNames();
    com.google.javascript.rhino.jstype.JSType var25 = var1.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType)var20);
    com.google.javascript.rhino.jstype.FunctionBuilder var26 = new com.google.javascript.rhino.jstype.FunctionBuilder(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test321() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test321"); }


    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString(2, "hi!", (-1), (-1));
    com.google.javascript.jscomp.JSModule var6 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var7 = var6.getDependencies();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.block(var7);
    boolean var9 = var8.hasChildren();
    boolean var10 = var4.hasChild(var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.voidNode(var4);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test322() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test322"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var2 = var1.isGetterDef();
    boolean var3 = var1.isNE();
    boolean var4 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var1);
    com.google.javascript.rhino.Node var5 = var1.cloneTree();
    boolean var6 = var1.isObjectLit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test323() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test323"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.JSDocInfoBuilder var2 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var3 = var2.recordExpose();
    boolean var5 = var2.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    com.google.javascript.rhino.InputId var12 = com.google.javascript.jscomp.NodeUtil.getInputId(var9);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var9.setJSType(var13);
    com.google.javascript.rhino.JSDocInfo var15 = var2.build(var9);
    java.lang.String var16 = var15.getFileOverview();
    java.util.Set var17 = var15.getModifies();
    java.util.List var18 = var15.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var19 = var15.getType();
    boolean var20 = var15.containsDeclaration();
    com.google.javascript.rhino.JSDocInfo.Visibility var21 = null;
    var15.setVisibility(var21);
    com.google.javascript.rhino.Node var23 = var15.getAssociatedNode();
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var24 = var0.getClassesDefinedByCall(var23);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var26.unregisterPropertyOnType("Unversioned directory", var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.jscomp.JSModule var32 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var33 = var32.getDependencies();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.block(var33);
    com.google.javascript.rhino.jstype.FunctionType var35 = var26.createFunctionTypeWithVarArgs(var30, var33);
    boolean var36 = var35.hasAnyTemplateInternal();
    java.lang.Iterable var37 = var35.getAllExtendedInterfaces();
    boolean var38 = var35.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var40 = var35.getOwnSlot("(LABEL_NAME hi!)");
    boolean var41 = var35.isEnumElementType();
    boolean var42 = var35.isEnumElementType();
    boolean var44 = var35.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    var35.clearCachedValues();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    var47.unregisterPropertyOnType("Unversioned directory", var49);
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.jscomp.JSModule var53 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var54 = var53.getDependencies();
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.block(var54);
    com.google.javascript.rhino.jstype.FunctionType var56 = var47.createFunctionTypeWithVarArgs(var51, var54);
    boolean var57 = var56.hasAnyTemplateInternal();
    java.lang.Iterable var58 = var56.getAllExtendedInterfaces();
    java.lang.Iterable var59 = var56.getCtorImplementedInterfaces();
    com.google.javascript.jscomp.CodingConvention.SubclassType var60 = null;
    var0.applySubclassRelationship(var35, var56, var60);
    boolean var64 = var0.isExported("", false);
    boolean var66 = var0.isSuperClassReference("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test324() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test324"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setSourceMapOutputPath("()");
    var0.setExternExports(true);
    var0.setPreferLineBreakAtEndOfFile(true);
    var0.resetWarningsGuard();
    com.google.javascript.jscomp.VariableRenamingPolicy var18 = null;
    com.google.javascript.jscomp.PropertyRenamingPolicy var19 = null;
    var0.setRenamingPolicy(var18, var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test325() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test325"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var7 = null;
    var6.setResolveMode(var7);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var9 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var6);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var10 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var6);
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
    boolean var17 = var14.isVarArgs();
    com.google.javascript.rhino.Node var19 = var14.getChildAtIndex(1);
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
    com.google.javascript.rhino.JSDocInfo var26 = var23.getJSDocInfo();
    com.google.javascript.rhino.Node var27 = var14.copyInformationFrom(var23);
    java.lang.Object var29 = null;
    var14.putProp(0, var29);
    com.google.javascript.rhino.JSTypeExpression var32 = new com.google.javascript.rhino.JSTypeExpression(var14, "()");
    com.google.javascript.rhino.jstype.StaticScope var33 = null;
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    com.google.javascript.rhino.jstype.JSType var37 = null;
    var35.unregisterPropertyOnType("Unversioned directory", var37);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    boolean var41 = var35.canPropertyBeDefined(var39, "BANG");
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.Node var44 = var35.createParameters(var43);
    com.google.javascript.rhino.jstype.JSType var45 = var32.evaluate(var33, var35);
    com.google.javascript.rhino.jstype.JSType var46 = var45.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var47 = var46.dereference();
    java.util.Collection var48 = var6.getDirectImplementors(var47);
    com.google.javascript.rhino.jstype.JSType var53 = var1.getType((com.google.javascript.rhino.jstype.StaticScope)var47, "hi!", "BANG 0\n    STRING hi 0 [length: 2]\n", 10, 10);
    var1.identifyNonNullableName("STRING hi 0 [length: 2]\n");
    com.google.javascript.rhino.jstype.JSType var57 = var1.getType("INHERITED");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);

  }

  public void test326() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test326"); }


    com.google.javascript.jscomp.AstValidator var0 = new com.google.javascript.jscomp.AstValidator();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("Unversioned directory");
    com.google.javascript.rhino.jstype.StaticSourceFile var3 = null;
    var2.setStaticSourceFile(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.validateScript(var2);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test327() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test327"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setTransformAMDToCJSModules(false);
    var0.setInlineConstantVars(true);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var14 = var0.getLanguageIn();
    var0.setOptimizeCalls(true);
    var0.setAliasStringsBlacklist("function (): {1883749358}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test328() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test328"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isVarArgs();
    boolean var11 = var7.isArrayLit();
    com.google.javascript.rhino.Node var12 = var7.getNext();
    var1.markTypeNode(var7, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isVarArgs();
    com.google.javascript.rhino.Node var27 = var22.getChildAtIndex(1);
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
    com.google.javascript.rhino.JSDocInfo var34 = var31.getJSDocInfo();
    com.google.javascript.rhino.Node var35 = var22.copyInformationFrom(var31);
    java.lang.Object var37 = null;
    var22.putProp(0, var37);
    com.google.javascript.rhino.JSTypeExpression var40 = new com.google.javascript.rhino.JSTypeExpression(var22, "()");
    com.google.javascript.rhino.JSTypeExpression var41 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var40);
    boolean var42 = var1.recordBaseType(var40);
    boolean var43 = var1.shouldParseDocumentation();
    com.google.javascript.rhino.JSDocInfoBuilder var45 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var46 = var45.recordExpose();
    boolean var48 = var45.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = var52.getNext();
    com.google.javascript.rhino.Node var54 = var50.srcrefTree(var52);
    com.google.javascript.rhino.InputId var55 = com.google.javascript.jscomp.NodeUtil.getInputId(var52);
    com.google.javascript.rhino.jstype.JSType var56 = null;
    var52.setJSType(var56);
    com.google.javascript.rhino.JSDocInfo var58 = var45.build(var52);
    java.util.Collection var59 = var58.getAuthors();
    java.util.Set var60 = var58.getModifies();
    boolean var61 = var1.recordModifies(var60);
    boolean var62 = var1.recordDeprecated();
    boolean var63 = var1.recordNoAlias();
    boolean var65 = var1.recordDeprecationReason("function (): {1883749358}");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);

  }

  public void test329() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test329"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setManageClosureDependencies(true);
    com.google.javascript.jscomp.CompilerOptions var10 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var11 = null;
    var10.setStripTypes(var11);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var13 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var14 = var13.getDirectedGraphNodes();
    java.util.List var15 = var13.getEdges();
    var10.setManageClosureDependencies(var15);
    boolean var17 = var10.isExternExportsEnabled();
    var10.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var22 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var24 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var25 = com.google.javascript.jscomp.JSError.make(var22, var24);
    int var26 = var25.getCharno();
    com.google.javascript.jscomp.CheckLevel var27 = var25.getDefaultLevel();
    var10.setReportUnknownTypes(var27);
    var0.setCheckUnreachableCode(var27);
    var0.setAcceptConstKeyword(true);
    com.google.javascript.rhino.JSDocInfoBuilder var33 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var34 = var33.recordExpose();
    boolean var36 = var33.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var40 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = var40.getNext();
    com.google.javascript.rhino.Node var42 = var38.srcrefTree(var40);
    com.google.javascript.rhino.InputId var43 = com.google.javascript.jscomp.NodeUtil.getInputId(var40);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var40.setJSType(var44);
    com.google.javascript.rhino.JSDocInfo var46 = var33.build(var40);
    java.util.Collection var47 = var46.getAuthors();
    com.google.common.collect.ImmutableList var48 = var46.getTemplateTypeNames();
    java.util.Set var49 = var46.getModifies();
    var0.setStripTypes(var49);
    com.google.javascript.jscomp.CompilerOptions var51 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var52 = null;
    var51.setStripTypes(var52);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var54 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var55 = var54.getDirectedGraphNodes();
    java.util.List var56 = var54.getEdges();
    var51.setManageClosureDependencies(var56);
    boolean var58 = var51.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var59 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var60 = null;
    var59.setStripTypes(var60);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var62 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var63 = var62.getDirectedGraphNodes();
    java.util.List var64 = var62.getEdges();
    var59.setManageClosureDependencies(var64);
    var51.setManageClosureDependencies(var64);
    var51.setRemoveClosureAsserts(true);
    java.util.Map var69 = var51.getTweakReplacements();
    var0.setTweakReplacements(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test330() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test330"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    boolean var60 = var58.canBeCalled();
    com.google.javascript.rhino.jstype.JSType var61 = null;
    boolean var62 = var58.isEquivalentTo(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test331() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test331"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isSuperClassReference("function (): {1883749358}");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test332() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test332"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.PropertyRenamingPolicy var1 = com.google.javascript.jscomp.PropertyRenamingPolicy.valueOf("ERROR - (InputId: )\n");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test333() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test333"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("goog.abstractMethod");
    int var3 = var1.getIntProp(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test334() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test334"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    boolean var2 = var1.shouldTolerateUndefinedValues();
    boolean var3 = var1.shouldTolerateUndefinedValues();
    var1.resetForTypeCheck();
    com.google.javascript.rhino.ErrorReporter var5 = var1.getErrorReporter();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test335() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test335"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.trueNode();
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var3 = null;
    var2.setStripTypes(var3);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var6 = var5.getDirectedGraphNodes();
    java.util.List var7 = var5.getEdges();
    var2.setManageClosureDependencies(var7);
    var2.setDevirtualizePrototypeMethods(true);
    var2.setCollapsePropertiesOnExternTypes(false);
    var2.setShadowVariables(false);
    com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var16 = null;
    var15.setStripTypes(var16);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var19 = var18.getDirectedGraphNodes();
    java.util.List var20 = var18.getEdges();
    var15.setManageClosureDependencies(var20);
    boolean var22 = var15.isExternExportsEnabled();
    var15.setCheckCaja(false);
    java.util.Set var25 = null;
    var15.setReplaceStringsReservedStrings(var25);
    com.google.javascript.rhino.JSDocInfoBuilder var28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var29 = var28.recordExpose();
    boolean var31 = var28.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var36 = var35.getNext();
    com.google.javascript.rhino.Node var37 = var33.srcrefTree(var35);
    com.google.javascript.rhino.InputId var38 = com.google.javascript.jscomp.NodeUtil.getInputId(var35);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    var35.setJSType(var39);
    com.google.javascript.rhino.JSDocInfo var41 = var28.build(var35);
    java.lang.String var42 = var41.getFileOverview();
    java.util.Set var43 = var41.getModifies();
    var15.setReplaceStringsReservedStrings(var43);
    var15.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var49 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var51 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var52 = com.google.javascript.jscomp.JSError.make(var49, var51);
    int var53 = var52.getCharno();
    com.google.javascript.jscomp.CheckLevel var54 = var52.getDefaultLevel();
    var15.setCheckGlobalThisLevel(var54);
    var2.setCheckMissingGetCssNameLevel(var54);
    com.google.javascript.jscomp.DiagnosticType var59 = com.google.javascript.jscomp.DiagnosticType.error("STRING hi 0 [length: 2]\n", "RETURN");
    com.google.javascript.rhino.Node var62 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var64 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var65 = var64.getNext();
    boolean var66 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var64);
    int var67 = var64.getLength();
    com.google.javascript.rhino.Node var68 = null;
    boolean var69 = var64.hasChild(var68);
    com.google.javascript.rhino.Node var70 = var62.useSourceInfoIfMissingFromForTree(var64);
    var64.setSourceFileForTesting("Unversioned directory");
    boolean var73 = var64.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var74 = var64.getStaticSourceFile();
    com.google.javascript.jscomp.DiagnosticType var77 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
    com.google.javascript.jscomp.MessageFormatter var78 = null;
    java.util.logging.Logger var79 = null;
    com.google.javascript.jscomp.LoggerErrorManager var80 = new com.google.javascript.jscomp.LoggerErrorManager(var78, var79);
    com.google.javascript.jscomp.Compiler var81 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var80);
    com.google.javascript.jscomp.Scope var82 = var81.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var83 = null;
    com.google.javascript.jscomp.NodeTraversal var84 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var81, var83);
    com.google.javascript.jscomp.Scope var85 = var84.getScope();
    com.google.javascript.rhino.Node var86 = null;
    com.google.javascript.jscomp.DiagnosticType var89 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var91 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var92 = com.google.javascript.jscomp.JSError.make(var89, var91);
    com.google.javascript.jscomp.DiagnosticType var93 = var92.getType();
    java.lang.String[] var95 = new java.lang.String[] { "LABEL_NAME hi!"};
    com.google.javascript.jscomp.JSError var96 = var84.makeError(var86, var93, var95);
    com.google.javascript.jscomp.JSError var97 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var64, var77, var95);
    com.google.javascript.jscomp.JSError var98 = com.google.javascript.jscomp.JSError.make("", var1, var54, var59, var95);
    boolean var99 = var1.isVarArgs();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == false);

  }

  public void test336() {}
//   public void test336() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test336"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.JSError[] var4 = var3.getMessages();
//     com.google.javascript.jscomp.Region var7 = var3.getSourceRegion("2014/12/24 11:10", 0);
//     var3.disableThreads();
//     com.google.javascript.jscomp.LightweightMessageFormatter var9 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var3);
//     boolean var10 = var3.isTypeCheckingEnabled();
// 
//   }

  public void test337() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test337"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.thisNode();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var5 = var4.hasOneChild();
    com.google.javascript.rhino.Node var9 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.returnNode();
    boolean var11 = var10.isArrayLit();
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    boolean var18 = var15.isVarArgs();
    boolean var19 = var15.isOptionalArg();
    com.google.javascript.rhino.Node var22 = new com.google.javascript.rhino.Node(0, var4, var9, var10, var15, 1, 100);
    int var23 = var15.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var0.useSourceInfoFromForTree(var15);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var28 = var26.getBooleanProp((-1));
    var26.setSourceEncodedPosition(10);
    com.google.javascript.rhino.Node var31 = var24.copyInformationFrom(var26);
    boolean var32 = var24.isVarArgs();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test338() {}
//   public void test338() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test338"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     var3.reportCodeChange();
//     com.google.javascript.jscomp.Scope var6 = var3.getTopScope();
//     com.google.javascript.jscomp.Compiler.IntermediateState var7 = var3.getState();
//     com.google.javascript.jscomp.Scope var8 = var3.getTopScope();
//     com.google.javascript.jscomp.SourceFile var12 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
//     int var14 = var12.getLineOfOffset(2);
//     com.google.javascript.jscomp.CompilerInput var15 = new com.google.javascript.jscomp.CompilerInput(var12);
//     java.io.Reader var16 = var12.getCodeReader();
//     var12.clearCachedSource();
//     com.google.javascript.jscomp.JsAst var18 = new com.google.javascript.jscomp.JsAst(var12);
//     com.google.javascript.rhino.InputId var19 = var18.getInputId();
//     com.google.javascript.rhino.Node var23 = new com.google.javascript.rhino.Node(1, 0, 100);
//     com.google.javascript.rhino.jstype.JSType var24 = null;
//     var23.setJSType(var24);
//     boolean var26 = var23.isScript();
//     com.google.javascript.jscomp.SourceFile var30 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
//     int var32 = var30.getLineOfOffset(2);
//     var23.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var30);
//     com.google.javascript.jscomp.CompilerInput var34 = new com.google.javascript.jscomp.CompilerInput(var30);
//     var18.setSourceFile(var30);
//     com.google.javascript.jscomp.SourceFile var36 = var18.getSourceFile();
//     com.google.javascript.jscomp.SourceFile var40 = com.google.javascript.jscomp.SourceFile.fromCode("2014/12/24 11:10", "null(null)", "STRING hi 0 [length: 2]\n");
//     int var42 = var40.getColumnOfOffset(306);
//     com.google.javascript.jscomp.CompilerOptions var43 = null;
//     com.google.javascript.jscomp.Result var44 = var3.compile(var36, var40, var43);
// 
//   }

  public void test339() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test339"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    boolean var4 = var1.recordNoShadow();
    boolean var6 = var1.recordReturnDescription("()");
    boolean var8 = var1.recordDeprecationReason("BANG");
    com.google.javascript.rhino.JSDocInfoBuilder var11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var12 = var11.recordExpose();
    boolean var13 = var11.recordExterns();
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    boolean var21 = var17.isArrayLit();
    com.google.javascript.rhino.Node var22 = var17.getNext();
    var11.markTypeNode(var17, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    boolean var35 = var32.isVarArgs();
    com.google.javascript.rhino.Node var37 = var32.getChildAtIndex(1);
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
    com.google.javascript.rhino.JSDocInfo var44 = var41.getJSDocInfo();
    com.google.javascript.rhino.Node var45 = var32.copyInformationFrom(var41);
    java.lang.Object var47 = null;
    var32.putProp(0, var47);
    com.google.javascript.rhino.JSTypeExpression var50 = new com.google.javascript.rhino.JSTypeExpression(var32, "()");
    com.google.javascript.rhino.JSTypeExpression var51 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var50);
    boolean var52 = var11.recordBaseType(var50);
    com.google.javascript.jscomp.MessageFormatter var53 = null;
    java.util.logging.Logger var54 = null;
    com.google.javascript.jscomp.LoggerErrorManager var55 = new com.google.javascript.jscomp.LoggerErrorManager(var53, var54);
    com.google.javascript.jscomp.Compiler var56 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var55);
    boolean var57 = var50.equals((java.lang.Object)var56);
    boolean var58 = var1.recordParameter("BANG 0 [source_file: Unversioned directory]\n", var50);
    com.google.javascript.rhino.Node var59 = var50.getRoot();
    java.lang.String var60 = var59.toStringTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var60.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));

  }

  public void test340() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test340"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    com.google.javascript.rhino.Node var17 = var10.getPropertyNode("function (): ?");
    boolean var19 = var10.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    com.google.javascript.rhino.jstype.JSType var20 = var10.getParameterType();
    boolean var21 = var10.isNullType();
    com.google.javascript.rhino.Node var22 = var10.getParametersNode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test341() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test341"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
    com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
    com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var8 = null;
    var7.setStripTypes(var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var11 = var10.getDirectedGraphNodes();
    java.util.List var12 = var10.getEdges();
    var7.setManageClosureDependencies(var12);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.script(var12);
    var6.traverseRoots(var12);
    com.google.javascript.rhino.Node var16 = var6.getEnclosingFunction();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.continueNode();
    com.google.javascript.jscomp.DiagnosticType var20 = com.google.javascript.jscomp.DiagnosticType.disabled("(LABEL_NAME hi!)", "()");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = var25.getNext();
    boolean var27 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var25);
    int var28 = var25.getLength();
    com.google.javascript.rhino.Node var29 = null;
    boolean var30 = var25.hasChild(var29);
    com.google.javascript.rhino.Node var31 = var23.useSourceInfoIfMissingFromForTree(var25);
    var25.setSourceFileForTesting("Unversioned directory");
    boolean var34 = var25.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var35 = var25.getStaticSourceFile();
    com.google.javascript.jscomp.DiagnosticType var38 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
    com.google.javascript.jscomp.MessageFormatter var39 = null;
    java.util.logging.Logger var40 = null;
    com.google.javascript.jscomp.LoggerErrorManager var41 = new com.google.javascript.jscomp.LoggerErrorManager(var39, var40);
    com.google.javascript.jscomp.Compiler var42 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var41);
    com.google.javascript.jscomp.Scope var43 = var42.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var44 = null;
    com.google.javascript.jscomp.NodeTraversal var45 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var42, var44);
    com.google.javascript.jscomp.Scope var46 = var45.getScope();
    com.google.javascript.rhino.Node var47 = null;
    com.google.javascript.jscomp.DiagnosticType var50 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var52 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var53 = com.google.javascript.jscomp.JSError.make(var50, var52);
    com.google.javascript.jscomp.DiagnosticType var54 = var53.getType();
    java.lang.String[] var56 = new java.lang.String[] { "LABEL_NAME hi!"};
    com.google.javascript.jscomp.JSError var57 = var45.makeError(var47, var54, var56);
    com.google.javascript.jscomp.JSError var58 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var25, var38, var56);
    var6.report(var17, var20, var56);
    java.lang.String var60 = var6.getSourceName();
    com.google.javascript.jscomp.Compiler var61 = var6.getCompiler();
    com.google.javascript.rhino.JSDocInfoBuilder var63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var64 = var63.recordExpose();
    boolean var66 = var63.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var68 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var70 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var71 = var70.getNext();
    com.google.javascript.rhino.Node var72 = var68.srcrefTree(var70);
    com.google.javascript.rhino.InputId var73 = com.google.javascript.jscomp.NodeUtil.getInputId(var70);
    com.google.javascript.rhino.jstype.JSType var74 = null;
    var70.setJSType(var74);
    com.google.javascript.rhino.JSDocInfo var76 = var63.build(var70);
    java.lang.String var77 = var76.getFileOverview();
    boolean var78 = var76.hasFileOverview();
    boolean var79 = var76.hasReturnType();
    boolean var80 = var76.hasType();
    boolean var81 = var76.isHidden();
    boolean var82 = var76.isInterface();
    com.google.common.collect.ImmutableList var83 = var76.getTemplateTypeNames();
    var6.traverseRoots((java.util.List)var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + ""+ "'", var60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test342() {}
//   public void test342() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test342"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal var5 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var4);
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var6 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var7 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var3, var6);
//     com.google.javascript.rhino.Node var8 = var3.getRoot();
//     com.google.javascript.jscomp.SourceFile var12 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
//     int var14 = var12.getLineOfOffset(2);
//     com.google.javascript.jscomp.CompilerInput var15 = new com.google.javascript.jscomp.CompilerInput(var12);
//     java.io.Reader var16 = var12.getCodeReader();
//     var12.clearCachedSource();
//     com.google.javascript.jscomp.JSSourceFile var18 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var19 = new com.google.javascript.jscomp.JSSourceFile[] { var18};
//     com.google.javascript.jscomp.MessageFormatter var20 = null;
//     java.util.logging.Logger var21 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var22 = new com.google.javascript.jscomp.LoggerErrorManager(var20, var21);
//     com.google.javascript.jscomp.Compiler var23 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var22);
//     com.google.javascript.jscomp.JSError[] var24 = var23.getMessages();
//     com.google.javascript.rhino.JSDocInfoBuilder var26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var27 = var26.recordExpose();
//     boolean var29 = var26.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var34 = var33.getNext();
//     com.google.javascript.rhino.Node var35 = var31.srcrefTree(var33);
//     com.google.javascript.rhino.InputId var36 = com.google.javascript.jscomp.NodeUtil.getInputId(var33);
//     com.google.javascript.rhino.jstype.JSType var37 = null;
//     var33.setJSType(var37);
//     com.google.javascript.rhino.JSDocInfo var39 = var26.build(var33);
//     java.util.List var40 = var39.getThrownTypes();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var41 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var42 = var41.getDirectedGraphNodes();
//     var41.clearNodeAnnotations();
//     java.util.List var44 = var41.getGraphvizEdges();
//     com.google.javascript.jscomp.CompilerOptions var45 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var46 = null;
//     var45.setStripTypes(var46);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var48 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var49 = var48.getDirectedGraphNodes();
//     java.util.List var50 = var48.getEdges();
//     var45.setManageClosureDependencies(var50);
//     var45.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     var45.setColorizeErrorOutput(true);
//     com.google.javascript.jscomp.SourceMap.DetailLevel var57 = null;
//     var45.setSourceMapDetailLevel(var57);
//     com.google.javascript.jscomp.CodingConvention var59 = var45.getCodingConvention();
//     var45.setMarkNoSideEffectCalls(false);
//     var23.<com.google.javascript.jscomp.SourceFile,com.google.javascript.jscomp.SourceFile>init(var40, var44, var45);
//     com.google.javascript.jscomp.Result var63 = var3.compile(var12, var19, var45);
// 
//   }

  public void test343() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test343"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    java.io.PrintStream var5 = null;
    com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler(var5);
    com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var8 = null;
    var7.setStripTypes(var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var11 = var10.getDirectedGraphNodes();
    java.util.List var12 = var10.getEdges();
    var7.setManageClosureDependencies(var12);
    com.google.javascript.rhino.JSDocInfoBuilder var15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var16 = var15.recordExpose();
    boolean var18 = var15.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.InputId var25 = com.google.javascript.jscomp.NodeUtil.getInputId(var22);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var22.setJSType(var26);
    com.google.javascript.rhino.JSDocInfo var28 = var15.build(var22);
    java.lang.String var29 = var28.getFileOverview();
    java.util.Set var30 = var28.getModifies();
    java.util.List var31 = var28.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var32 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var33 = null;
    var32.setStripTypes(var33);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var36 = var35.getDirectedGraphNodes();
    java.util.List var37 = var35.getEdges();
    var32.setManageClosureDependencies(var37);
    var32.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var32.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var44 = null;
    var32.setSourceMapDetailLevel(var44);
    var6.<com.google.javascript.jscomp.SourceFile>initModules(var12, var31, var32);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.block(var31);
    com.google.javascript.jscomp.CompilerOptions var48 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var49 = null;
    var48.setStripTypes(var49);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var52 = var51.getDirectedGraphNodes();
    java.util.List var53 = var51.getEdges();
    var48.setManageClosureDependencies(var53);
    boolean var55 = var48.isExternExportsEnabled();
    var48.setCheckCaja(false);
    var48.setRemoveUnusedPrototypeProperties(true);
    var48.setRemoveClosureAsserts(false);
    com.google.javascript.rhino.JSDocInfoBuilder var63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var64 = var63.recordExpose();
    boolean var66 = var63.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var68 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var70 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var71 = var70.getNext();
    com.google.javascript.rhino.Node var72 = var68.srcrefTree(var70);
    com.google.javascript.rhino.InputId var73 = com.google.javascript.jscomp.NodeUtil.getInputId(var70);
    com.google.javascript.rhino.jstype.JSType var74 = null;
    var70.setJSType(var74);
    com.google.javascript.rhino.JSDocInfo var76 = var63.build(var70);
    java.util.Collection var77 = var76.getAuthors();
    com.google.common.collect.ImmutableList var78 = var76.getTemplateTypeNames();
    var48.setSourceMapLocationMappings((java.util.List)var78);
    com.google.javascript.jscomp.CompilerOptions var80 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var81 = null;
    var80.setStripTypes(var81);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var83 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var84 = var83.getDirectedGraphNodes();
    java.util.List var85 = var83.getEdges();
    var80.setManageClosureDependencies(var85);
    var80.setDevirtualizePrototypeMethods(true);
    var80.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var91 = var80.getTweakProcessing();
    boolean var92 = var80.getInferTypes();
    var3.<com.google.javascript.jscomp.SourceFile>initModules(var31, (java.util.List)var78, var80);
    com.google.javascript.jscomp.CodingConvention var94 = var3.getCodingConvention();
    java.lang.String var97 = var3.getSourceLine("goog.abstractMethod", 3);
    boolean var98 = var3.isTypeCheckingEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);

  }

  public void test344() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test344"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var3 = var2.isGetterDef();
    boolean var4 = var2.isNE();
    boolean var5 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var2);
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    java.lang.Iterable var8 = var7.siblings();
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    boolean var15 = var12.isVarArgs();
    boolean var16 = var12.isArrayLit();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    boolean var34 = var12.hasChild(var29);
    boolean var35 = var29.isNot();
    int var36 = var29.getChildCount();
    com.google.javascript.rhino.Node var39 = new com.google.javascript.rhino.Node(10, var2, var7, var29, 153, 10);
    boolean var40 = var7.isNew();
    boolean var41 = var7.isVar();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test345() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test345"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.warning("()", "(InputId: )");
    com.google.javascript.jscomp.DiagnosticType var5 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var7 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var8 = com.google.javascript.jscomp.JSError.make(var5, var7);
    com.google.javascript.jscomp.JSError var9 = com.google.javascript.jscomp.JSError.make(var2, var7);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.Node.newNumber(0.0d);
    boolean var12 = var9.equals((java.lang.Object)var11);
    int var13 = var9.getCharno();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));

  }

  public void test346() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test346"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.jstype.JSType var8 = var1.getType("2014/12/24 11:10");
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var9 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var10 = var9.getDirectedGraphNodes();
    var9.pushEdgeAnnotations();
    java.lang.Iterable var12 = var9.getDirectedGraphNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var15 = var14.recordExpose();
    boolean var17 = var14.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    com.google.javascript.rhino.InputId var24 = com.google.javascript.jscomp.NodeUtil.getInputId(var21);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    var21.setJSType(var25);
    com.google.javascript.rhino.JSDocInfo var27 = var14.build(var21);
    java.lang.String var28 = var27.getFileOverview();
    java.util.Set var29 = var27.getModifies();
    java.util.List var30 = var27.getImplementedInterfaces();
    com.google.javascript.jscomp.graph.GraphNode var31 = var9.getNode((java.lang.Object)var27);
    com.google.javascript.jscomp.JSModule var33 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var34 = var33.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var35 = new com.google.javascript.jscomp.ComposeWarningsGuard(var34);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var36 = var9.getDirectedGraphNode((java.lang.Object)var35);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var37 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    var37.clearNodeAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var39 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var41 = var39.hasNode((java.lang.Object)1);
    com.google.javascript.rhino.JSDocInfoBuilder var43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var44 = var43.recordExpose();
    boolean var46 = var43.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    com.google.javascript.rhino.Node var52 = var48.srcrefTree(var50);
    com.google.javascript.rhino.InputId var53 = com.google.javascript.jscomp.NodeUtil.getInputId(var50);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    var50.setJSType(var54);
    com.google.javascript.rhino.JSDocInfo var56 = var43.build(var50);
    java.lang.String var57 = var56.getFileOverview();
    java.util.Set var58 = var56.getModifies();
    java.util.List var59 = var56.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var60 = var56.getType();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var61 = var39.createDirectedGraphNode((java.lang.Object)var56);
    java.util.List var62 = var37.getDirectedSuccNodes(var61);
    java.util.List var63 = var9.getDirectedPredNodes(var61);
    var1.setTemplateTypeNames(var63);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var65 = null;
    var1.setResolveMode(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test347() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test347"); }


    com.google.javascript.jscomp.parsing.Config.LanguageMode var1 = null;
    com.google.javascript.jscomp.CompilerOptions var3 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var4 = null;
    var3.setStripTypes(var4);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var6 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var7 = var6.getDirectedGraphNodes();
    java.util.List var8 = var6.getEdges();
    var3.setManageClosureDependencies(var8);
    var3.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var3.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var15 = null;
    var3.setSourceMapDetailLevel(var15);
    var3.setCollapseAnonymousFunctions(false);
    com.google.javascript.jscomp.CompilerOptions var19 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var20 = null;
    var19.setStripTypes(var20);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var22 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var23 = var22.getDirectedGraphNodes();
    java.util.List var24 = var22.getEdges();
    var19.setManageClosureDependencies(var24);
    boolean var26 = var19.isExternExportsEnabled();
    var19.setCheckCaja(false);
    java.util.Set var29 = null;
    var19.setReplaceStringsReservedStrings(var29);
    com.google.javascript.rhino.JSDocInfoBuilder var32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var33 = var32.recordExpose();
    boolean var34 = var32.recordExterns();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    boolean var42 = var38.isArrayLit();
    com.google.javascript.rhino.Node var43 = var38.getNext();
    var32.markTypeNode(var38, 10, 100, 0, 0, false);
    com.google.javascript.rhino.JSDocInfoBuilder var51 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var52 = var51.recordExpose();
    boolean var53 = var51.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var55 = null;
    boolean var56 = var51.recordParameter("Unversioned directory", var55);
    com.google.javascript.rhino.JSTypeExpression var57 = null;
    boolean var59 = var51.recordThrowDescription(var57, "");
    com.google.javascript.rhino.JSDocInfoBuilder var61 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var62 = var61.recordExpose();
    boolean var64 = var61.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var66 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var69 = var68.getNext();
    com.google.javascript.rhino.Node var70 = var66.srcrefTree(var68);
    com.google.javascript.rhino.InputId var71 = com.google.javascript.jscomp.NodeUtil.getInputId(var68);
    com.google.javascript.rhino.jstype.JSType var72 = null;
    var68.setJSType(var72);
    com.google.javascript.rhino.JSDocInfo var74 = var61.build(var68);
    java.lang.String var75 = var74.getFileOverview();
    java.util.Set var76 = var74.getModifies();
    boolean var77 = var51.recordSuppressions(var76);
    boolean var78 = var32.recordModifies(var76);
    var19.setStripNamePrefixes(var76);
    var3.setIdGenerators(var76);
    com.google.javascript.jscomp.parsing.Config var81 = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(false, var1, false, var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test348() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test348"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    com.google.javascript.rhino.InputId var7 = com.google.javascript.jscomp.NodeUtil.getInputId(var4);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var4.setJSType(var8);
    var4.setCharno(153);
    com.google.javascript.rhino.Node[] var12 = new com.google.javascript.rhino.Node[] { var4};
    com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(100, var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.paramList(var12);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test349() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test349"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    boolean var6 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var4);
    int var7 = var4.getLength();
    com.google.javascript.rhino.Node var8 = null;
    boolean var9 = var4.hasChild(var8);
    com.google.javascript.rhino.Node var10 = var2.useSourceInfoIfMissingFromForTree(var4);
    com.google.javascript.jscomp.CodingConvention.Bind var12 = var0.describeFunctionBind(var2, false);
    java.lang.String var13 = var0.getDelegateSuperclassName();
    com.google.javascript.jscomp.ClosureCodingConvention var14 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var16 = var14.isConstantKey("2014/12/24 11:10");
    java.util.Collection var17 = var14.getAssertionFunctions();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var21 = var19.getBooleanProp((-1));
    var19.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var25 = new com.google.javascript.rhino.JSTypeExpression(var19, "goog.abstractMethod");
    boolean var26 = var14.isPrototypeAlias(var19);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode((com.google.javascript.jscomp.CodingConvention)var14, "");
    boolean var29 = var28.isContinue();
    com.google.javascript.jscomp.CompilerOptions var30 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var31 = null;
    var30.setStripTypes(var31);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.util.List var35 = var33.getEdges();
    var30.setManageClosureDependencies(var35);
    var30.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var30.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.CompilerOptions var42 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var43 = null;
    var42.setStripTypes(var43);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var45 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var46 = var45.getDirectedGraphNodes();
    java.util.List var47 = var45.getEdges();
    var42.setManageClosureDependencies(var47);
    boolean var49 = var42.isExternExportsEnabled();
    var42.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var54 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var56 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var57 = com.google.javascript.jscomp.JSError.make(var54, var56);
    int var58 = var57.getCharno();
    com.google.javascript.jscomp.CheckLevel var59 = var57.getDefaultLevel();
    var42.setReportUnknownTypes(var59);
    var42.setAmbiguateProperties(true);
    com.google.javascript.rhino.JSDocInfoBuilder var64 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var65 = var64.recordExpose();
    boolean var67 = var64.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var69 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var71 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var72 = var71.getNext();
    com.google.javascript.rhino.Node var73 = var69.srcrefTree(var71);
    com.google.javascript.rhino.InputId var74 = com.google.javascript.jscomp.NodeUtil.getInputId(var71);
    com.google.javascript.rhino.jstype.JSType var75 = null;
    var71.setJSType(var75);
    com.google.javascript.rhino.JSDocInfo var77 = var64.build(var71);
    java.lang.String var78 = var77.getFileOverview();
    com.google.javascript.rhino.JSTypeExpression var79 = var77.getType();
    java.util.Set var80 = var77.getSuppressions();
    var42.setStripTypePrefixes(var80);
    var42.setRewriteFunctionExpressions(false);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var84 = var42.getLanguageIn();
    java.util.Map var85 = var42.getDefineReplacements();
    var30.setDefineReplacements(var85);
    var0.checkForCallingConventionDefiningCalls(var28, var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test350() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test350"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.jstype.JSType var4 = var2.getType("");
    com.google.javascript.rhino.jstype.FunctionBuilder var5 = new com.google.javascript.rhino.jstype.FunctionBuilder(var2);
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var7.unregisterPropertyOnType("Unversioned directory", var9);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    com.google.javascript.jscomp.JSModule var13 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var14 = var13.getDependencies();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.block(var14);
    com.google.javascript.rhino.jstype.FunctionType var16 = var7.createFunctionTypeWithVarArgs(var11, var14);
    boolean var17 = var16.hasAnyTemplateInternal();
    java.lang.Iterable var18 = var16.getAllExtendedInterfaces();
    boolean var19 = var16.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var21.unregisterPropertyOnType("Unversioned directory", var23);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    com.google.javascript.jscomp.JSModule var27 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var28 = var27.getDependencies();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.block(var28);
    com.google.javascript.rhino.jstype.FunctionType var30 = var21.createFunctionTypeWithVarArgs(var25, var28);
    boolean var32 = var30.removeProperty("null(null)");
    var16.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var30);
    int var34 = var30.getExtendedInterfacesCount();
    java.util.Set var35 = var30.getOwnPropertyNames();
    boolean var36 = var30.isConstructor();
    boolean var37 = var30.isAllType();
    com.google.javascript.rhino.jstype.FunctionBuilder var38 = var5.withReturnType((com.google.javascript.rhino.jstype.JSType)var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test351() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test351"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.JSTypeExpression var22 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var21);
    com.google.javascript.rhino.Node var23 = var21.getRoot();
    boolean var24 = var23.isVar();
    com.google.javascript.jscomp.ClosureCodingConvention var25 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var27 = var25.isConstantKey("2014/12/24 11:10");
    java.util.Collection var28 = var25.getAssertionFunctions();
    boolean var30 = var25.isConstant("Unversioned directory");
    boolean var32 = var25.isSuperClassReference("goog.abstractMethod");
    com.google.javascript.rhino.Node var36 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var37 = null;
    var36.setJSType(var37);
    boolean var39 = var36.isScript();
    com.google.javascript.rhino.Node var40 = var36.removeFirstChild();
    com.google.javascript.jscomp.CodingConvention.DelegateRelationship var41 = var25.getDelegateRelationship(var36);
    com.google.javascript.jscomp.ClosureCodingConvention var42 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var25);
    com.google.javascript.jscomp.GoogleCodingConvention var43 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var25);
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = var45.getNext();
    int var47 = var45.getSourceOffset();
    com.google.javascript.rhino.Node var48 = var45.cloneNode();
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    int var52 = var50.getSourceOffset();
    com.google.javascript.rhino.Node var53 = var50.cloneNode();
    var48.addChildrenToFront(var53);
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    com.google.javascript.rhino.InputId var61 = com.google.javascript.jscomp.NodeUtil.getInputId(var58);
    com.google.javascript.rhino.Node var62 = var48.useSourceInfoFrom(var58);
    com.google.javascript.jscomp.ClosureCodingConvention var63 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var65 = var63.isConstantKey("2014/12/24 11:10");
    java.util.Collection var66 = var63.getAssertionFunctions();
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var70 = var68.getBooleanProp((-1));
    var68.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var74 = new com.google.javascript.rhino.JSTypeExpression(var68, "goog.abstractMethod");
    boolean var75 = var63.isPrototypeAlias(var68);
    com.google.javascript.rhino.Node var77 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode((com.google.javascript.jscomp.CodingConvention)var63, "");
    com.google.javascript.rhino.Node var78 = var58.useSourceInfoIfMissingFrom(var77);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var79 = var78.getJsDocBuilderForNode();
    com.google.javascript.jscomp.CodingConvention.Bind var81 = var25.describeFunctionBind(var78, false);
    var78.setWasEmptyNode(false);
    var23.addChildrenToBack(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);

  }

  public void test352() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test352"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getDependencies();
    int var3 = var1.getDepth();
    var1.clearAsts();
    com.google.javascript.rhino.JSDocInfoBuilder var6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var7 = var6.recordExpose();
    boolean var8 = var6.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var10 = null;
    boolean var11 = var6.recordParameter("Unversioned directory", var10);
    com.google.javascript.rhino.JSTypeExpression var12 = null;
    boolean var14 = var6.recordThrowDescription(var12, "");
    com.google.javascript.jscomp.SourceFile var19 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    var6.markName("", (com.google.javascript.rhino.jstype.StaticSourceFile)var19, 0, 0);
    java.io.Reader var23 = var19.getCodeReader();
    var1.add(var19);
    int var25 = var1.getDepth();
    com.google.javascript.jscomp.Compiler var26 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var27 = var26.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var28 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var26);
    com.google.javascript.jscomp.ErrorManager var29 = var26.getErrorManager();
    var1.sortInputsByDeps(var26);
    java.util.List var31 = var1.getDependencies();
    com.google.javascript.jscomp.SourceFile var35 = com.google.javascript.jscomp.SourceFile.fromCode("2014/12/24 11:10", "null(null)", "STRING hi 0 [length: 2]\n");
    int var37 = var35.getColumnOfOffset(10);
    var1.addFirst(var35);
    com.google.javascript.jscomp.SourceFile var42 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    int var44 = var42.getLineOfOffset(2);
    java.lang.String var45 = var42.toString();
    var1.addFirst(var42);
    var42.clearCachedSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + ""+ "'", var27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "goog.abstractMethod"+ "'", var45.equals("goog.abstractMethod"));

  }

  public void test353() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test353"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    var0.setReplaceStringsReservedStrings(var28);
    var0.setGroupVariableDeclarations(false);
    var0.setRemoveTryCatchFinally(false);
    var0.setMoveFunctionDeclarations(true);
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    var37.setDevirtualizePrototypeMethods(true);
    var37.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions var48 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var49 = null;
    var48.setBrokenClosureRequiresLevel(var49);
    var48.setLocale("");
    var48.setLineBreak(false);
    com.google.javascript.jscomp.CompilerOptions var55 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var56 = null;
    var55.setStripTypes(var56);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var58 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var59 = var58.getDirectedGraphNodes();
    java.util.List var60 = var58.getEdges();
    var55.setManageClosureDependencies(var60);
    boolean var62 = var55.isExternExportsEnabled();
    var55.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var67 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var69 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var70 = com.google.javascript.jscomp.JSError.make(var67, var69);
    int var71 = var70.getCharno();
    com.google.javascript.jscomp.CheckLevel var72 = var70.getDefaultLevel();
    var55.setReportUnknownTypes(var72);
    var48.setBrokenClosureRequiresLevel(var72);
    var37.setCheckUnreachableCode(var72);
    boolean var77 = var72.equals((java.lang.Object)(byte)10);
    com.google.javascript.jscomp.DiagnosticType var79 = com.google.javascript.jscomp.DiagnosticType.make("", var72, "OFF");
    var0.setCheckRequires(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test354() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test354"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    var18.unregisterPropertyOnType("Unversioned directory", var20);
    var18.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = var28.getNext();
    com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
    boolean var31 = var28.isVarArgs();
    boolean var32 = var28.isFor();
    boolean var33 = var28.isNumber();
    com.google.javascript.rhino.Node var34 = var28.getNext();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    com.google.javascript.rhino.Node var43 = var38.getChildAtIndex(1);
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.JSDocInfo var50 = var47.getJSDocInfo();
    com.google.javascript.rhino.Node var51 = var38.copyInformationFrom(var47);
    java.lang.Object var53 = null;
    var38.putProp(0, var53);
    com.google.javascript.rhino.JSTypeExpression var56 = new com.google.javascript.rhino.JSTypeExpression(var38, "()");
    com.google.javascript.rhino.jstype.StaticScope var57 = null;
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var59.unregisterPropertyOnType("Unversioned directory", var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    boolean var65 = var59.canPropertyBeDefined(var63, "BANG");
    com.google.javascript.rhino.jstype.JSType var66 = null;
    com.google.javascript.rhino.jstype.JSType[] var67 = new com.google.javascript.rhino.jstype.JSType[] { var66};
    com.google.javascript.rhino.Node var68 = var59.createParameters(var67);
    com.google.javascript.rhino.jstype.JSType var69 = var56.evaluate(var57, var59);
    com.google.javascript.rhino.jstype.JSType var70 = var69.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var71 = var70.dereference();
    boolean var72 = var70.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var73 = var18.createEnumType("STRING hi 0 [length: 2]\n", var28, var70);
    java.lang.String var74 = var73.getDisplayName();
    com.google.javascript.rhino.Node var75 = var73.getSource();
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.stringKey("hi!");
    boolean var78 = var10.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var73, var77);
    java.lang.String var79 = var73.getDisplayName();
    boolean var80 = var73.matchesObjectContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var74.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var79.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);

  }

  public void test355() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test355"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.List var15 = var14.getThrownTypes();
    com.google.javascript.rhino.JSTypeExpression var16 = var14.getEnumParameterType();
    boolean var17 = var14.isNoTypeCheck();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test356() {}
//   public void test356() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test356"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var3 = null;
//     var2.setStripTypes(var3);
//     var2.setAliasKeywords(false);
//     com.google.javascript.jscomp.DefaultPassConfig var7 = new com.google.javascript.jscomp.DefaultPassConfig(var2);
//     var1.setPassConfig((com.google.javascript.jscomp.PassConfig)var7);
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var9 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var10 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var1, var9);
//     com.google.javascript.jscomp.CompilerOptions var11 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var12 = null;
//     var11.setStripTypes(var12);
//     var11.setAliasKeywords(false);
//     com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var16 = null;
//     var11.setAliasTransformationHandler(var16);
//     com.google.javascript.rhino.ErrorReporter var18 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18);
//     com.google.javascript.rhino.jstype.JSType var21 = null;
//     var19.unregisterPropertyOnType("Unversioned directory", var21);
//     com.google.javascript.rhino.jstype.JSType var23 = null;
//     com.google.javascript.jscomp.JSModule var25 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var26 = var25.getDependencies();
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.block(var26);
//     com.google.javascript.rhino.jstype.FunctionType var28 = var19.createFunctionTypeWithVarArgs(var23, var26);
//     var11.setReplaceStringsFunctionDescriptions(var26);
//     java.util.List var30 = null;
//     com.google.javascript.jscomp.CompilerOptions var31 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var32 = null;
//     var31.setStripTypes(var32);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var35 = var34.getDirectedGraphNodes();
//     java.util.List var36 = var34.getEdges();
//     var31.setManageClosureDependencies(var36);
//     var31.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     var31.setColorizeErrorOutput(true);
//     var31.setRemoveDeadCode(true);
//     var31.setCoalesceVariableNames(true);
//     com.google.javascript.jscomp.Result var47 = var1.<com.google.javascript.jscomp.SourceFile>compileModules(var26, var30, var31);
// 
//   }

  public void test357() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test357"); }


    com.google.javascript.rhino.InputId var1 = new com.google.javascript.rhino.InputId("CONTINUE");

  }

  public void test358() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test358"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var21.unregisterPropertyOnType("Unversioned directory", var23);
    var21.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.jstype.StaticScope var27 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var29 = var28.getDirectedGraphNodes();
    java.util.List var30 = var28.getEdges();
    com.google.javascript.jscomp.CompilerOptions var31 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var32 = null;
    var31.setStripTypes(var32);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var35 = var34.getDirectedGraphNodes();
    java.util.List var36 = var34.getEdges();
    var31.setManageClosureDependencies(var36);
    boolean var38 = var31.isExternExportsEnabled();
    var31.setCheckCaja(false);
    var31.setGroupVariableDeclarations(true);
    java.util.Map var43 = var31.getDefineReplacements();
    var0.defineDelegateProxyPrototypeProperties(var21, var27, var30, var43);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var45 = null;
    var21.setResolveMode(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test359() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test359"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setSourceMapOutputPath("()");
    var0.setExternExports(true);
    com.google.javascript.jscomp.CheckLevel var15 = null;
    var0.setReportMissingOverride(var15);
    var0.setNameAnonymousFunctionsOnly(true);
    var0.setPreferLineBreakAtEndOfFile(false);
    var0.setPreferLineBreakAtEndOfFile(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test360() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test360"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    var1.clearTemplateTypeNames();
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    var9.unregisterPropertyOnType("Unversioned directory", var11);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    com.google.javascript.jscomp.JSModule var15 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var16 = var15.getDependencies();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.block(var16);
    com.google.javascript.rhino.jstype.FunctionType var18 = var9.createFunctionTypeWithVarArgs(var13, var16);
    boolean var19 = var18.hasCachedValues();
    boolean var20 = var18.isFunctionPrototypeType();
    com.google.javascript.rhino.jstype.JSType var25 = var1.getType((com.google.javascript.rhino.jstype.StaticScope)var18, "2014/12/24 11:10", "{proxy:{599688852}}", 10, 0);
    boolean var26 = var18.isArrayType();
    com.google.javascript.rhino.JSDocInfoBuilder var28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var29 = var28.recordExpose();
    boolean var31 = var28.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var36 = var35.getNext();
    com.google.javascript.rhino.Node var37 = var33.srcrefTree(var35);
    com.google.javascript.rhino.InputId var38 = com.google.javascript.jscomp.NodeUtil.getInputId(var35);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    var35.setJSType(var39);
    com.google.javascript.rhino.JSDocInfo var41 = var28.build(var35);
    java.lang.String var42 = var41.getFileOverview();
    boolean var43 = var41.hasFileOverview();
    boolean var44 = var41.hasReturnType();
    com.google.javascript.rhino.JSTypeExpression var45 = var41.getType();
    int var46 = var41.getParameterCount();
    com.google.javascript.rhino.JSTypeExpression var48 = var41.getParameterType("CONTINUE");
    boolean var49 = var41.isDeprecated();
    boolean var50 = var41.hasModifies();
    var18.setJSDocInfo(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test361() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test361"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = var10.getNext();
    com.google.javascript.rhino.Node var12 = var8.srcrefTree(var10);
    boolean var13 = var10.isVarArgs();
    boolean var14 = var10.isOptionalArg();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var18 = var16.getBooleanProp((-1));
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.Node var25 = var22.removeFirstChild();
    com.google.javascript.rhino.Node var26 = var16.useSourceInfoFromForTree(var22);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.InputId var33 = com.google.javascript.jscomp.NodeUtil.getInputId(var30);
    com.google.javascript.rhino.jstype.JSType var34 = null;
    var30.setJSType(var34);
    boolean var36 = var30.isBlock();
    com.google.javascript.rhino.Node var37 = var30.getParent();
    boolean var38 = var30.isBreak();
    com.google.javascript.rhino.Node var40 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = var40.getNext();
    com.google.javascript.rhino.InputId var42 = var40.getInputId();
    boolean var43 = var40.isGetProp();
    com.google.javascript.rhino.Node var44 = var30.clonePropsFrom(var40);
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(0, var10, var16, var40);
    com.google.javascript.rhino.Node var46 = var3.useSourceInfoFromForTree(var10);
    boolean var47 = var46.isRegExp();
    boolean var48 = var46.isFromExterns();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test362() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test362"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    boolean var10 = var5.isScript();
    com.google.javascript.rhino.Node var11 = var5.getFirstChild();
    boolean var12 = var5.isExprResult();
    com.google.javascript.rhino.JSDocInfoBuilder var14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var15 = var14.recordExpose();
    boolean var17 = var14.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    com.google.javascript.rhino.InputId var24 = com.google.javascript.jscomp.NodeUtil.getInputId(var21);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    var21.setJSType(var25);
    com.google.javascript.rhino.JSDocInfo var27 = var14.build(var21);
    com.google.javascript.rhino.JSTypeExpression var28 = var27.getTypedefType();
    var5.setJSDocInfo(var27);
    var27.setLicense("BANG 0 [source_file: Unversioned directory]");
    boolean var32 = var27.hasTypedefType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test363() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test363"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var13 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    com.google.javascript.rhino.Node var22 = var17.getChildAtIndex(1);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
    com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var26);
    java.lang.Object var32 = null;
    var17.putProp(0, var32);
    com.google.javascript.rhino.JSTypeExpression var35 = new com.google.javascript.rhino.JSTypeExpression(var17, "()");
    com.google.javascript.rhino.jstype.StaticScope var36 = null;
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    var38.unregisterPropertyOnType("Unversioned directory", var40);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    boolean var44 = var38.canPropertyBeDefined(var42, "BANG");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.Node var47 = var38.createParameters(var46);
    com.google.javascript.rhino.jstype.JSType var48 = var35.evaluate(var36, var38);
    boolean var49 = var13.addVarArgs(var48);
    boolean var50 = var48.isEnumElementType();
    boolean var51 = var48.isNullable();
    boolean var52 = var48.matchesNumberContext();
    boolean var53 = var10.differsFrom(var48);
    com.google.javascript.rhino.ErrorReporter var54 = null;
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isVarArgs();
    com.google.javascript.rhino.Node var63 = var58.getChildAtIndex(1);
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.JSDocInfo var70 = var67.getJSDocInfo();
    com.google.javascript.rhino.Node var71 = var58.copyInformationFrom(var67);
    java.lang.Object var73 = null;
    var58.putProp(0, var73);
    com.google.javascript.rhino.JSTypeExpression var76 = new com.google.javascript.rhino.JSTypeExpression(var58, "()");
    com.google.javascript.rhino.jstype.StaticScope var77 = null;
    com.google.javascript.rhino.ErrorReporter var78 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var79 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var78);
    com.google.javascript.rhino.jstype.JSType var81 = null;
    var79.unregisterPropertyOnType("Unversioned directory", var81);
    com.google.javascript.rhino.jstype.JSType var83 = null;
    boolean var85 = var79.canPropertyBeDefined(var83, "BANG");
    com.google.javascript.rhino.jstype.JSType var86 = null;
    com.google.javascript.rhino.jstype.JSType[] var87 = new com.google.javascript.rhino.jstype.JSType[] { var86};
    com.google.javascript.rhino.Node var88 = var79.createParameters(var87);
    com.google.javascript.rhino.jstype.JSType var89 = var76.evaluate(var77, var79);
    com.google.javascript.rhino.jstype.JSType var90 = var89.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var91 = var90.dereference();
    boolean var92 = var91.isUnknownType();
    com.google.javascript.rhino.jstype.JSType var93 = var91.getParameterType();
    boolean var95 = var91.hasOwnProperty("WARNING - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    com.google.javascript.rhino.jstype.JSType var96 = var10.resolve(var54, (com.google.javascript.rhino.jstype.StaticScope)var91);
    boolean var97 = var10.isConstructor();
    java.lang.Iterable var98 = var10.getAllExtendedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test364() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test364"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var5.isGetterDef();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var11 = var10.hasOneChild();
    com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.returnNode();
    boolean var17 = var16.isArrayLit();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    boolean var25 = var21.isOptionalArg();
    com.google.javascript.rhino.Node var28 = new com.google.javascript.rhino.Node(0, var10, var15, var16, var21, 1, 100);
    java.lang.String var29 = var16.getQualifiedName();
    boolean var30 = var16.isHook();
    int var31 = var16.getSourceOffset();
    var16.removeProp(1);
    com.google.javascript.rhino.Node var34 = var5.useSourceInfoFrom(var16);
    boolean var35 = var34.isLabelName();
    com.google.javascript.rhino.Node.AncestorIterable var36 = var34.getAncestors();
    var34.setIsSyntheticBlock(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test365() {}
//   public void test365() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test365"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     boolean var2 = var0.hasNode((java.lang.Object)1);
//     java.util.List var3 = var0.getGraphvizEdges();
//     java.lang.Iterable var4 = var0.getDirectedGraphNodes();
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var6 = var5.getAstDotGraph();
//     com.google.javascript.jscomp.LightweightMessageFormatter var7 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
//     com.google.javascript.jscomp.LightweightMessageFormatter var8 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
//     boolean var9 = var0.hasNode((java.lang.Object)var5);
//     double var10 = var5.getProgress();
//     com.google.javascript.jscomp.ErrorManager var11 = var5.getErrorManager();
//     com.google.javascript.jscomp.JSError[] var12 = var5.getWarnings();
//     com.google.javascript.jscomp.JSError[] var13 = var5.getWarnings();
//     boolean var14 = var5.acceptEcmaScript5();
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var15 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var16 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5, var15);
//     com.google.javascript.jscomp.LightweightMessageFormatter var17 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
//     com.google.javascript.jscomp.JSSourceFile var18 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var19 = new com.google.javascript.jscomp.JSSourceFile[] { var18};
//     com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var22 = var21.getDependencies();
//     com.google.javascript.jscomp.ComposeWarningsGuard var23 = new com.google.javascript.jscomp.ComposeWarningsGuard(var22);
//     com.google.javascript.jscomp.JSModule[] var24 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection)var22);
//     com.google.javascript.jscomp.JSModuleGraph var25 = new com.google.javascript.jscomp.JSModuleGraph(var24);
//     com.google.javascript.jscomp.JSModuleGraph var26 = new com.google.javascript.jscomp.JSModuleGraph(var24);
//     com.google.javascript.jscomp.CompilerOptions var27 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var28 = null;
//     var27.setStripTypes(var28);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var31 = var30.getDirectedGraphNodes();
//     java.util.List var32 = var30.getEdges();
//     var27.setManageClosureDependencies(var32);
//     var27.setDevirtualizePrototypeMethods(true);
//     var27.setCollapsePropertiesOnExternTypes(false);
//     var27.setSourceMapOutputPath("()");
//     var27.setExternExports(true);
//     var27.setTweakToNumberLiteral("INHERITED", (-1));
//     com.google.javascript.jscomp.Result var45 = var5.compile(var19, var24, var27);
// 
//   }

  public void test366() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test366"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    var0.setAliasKeywords(false);
    com.google.javascript.jscomp.DefaultPassConfig var5 = new com.google.javascript.jscomp.DefaultPassConfig(var0);
    var0.setTweakToDoubleLiteral("module$2014$12$24 11:10", 0.0d);
    var0.setUnaliasableGlobals("function (): {1852005172}");
    var0.setCheckMissingGetCssNameBlacklist("");

  }

  public void test367() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test367"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var1 = null;
    var0.setBrokenClosureRequiresLevel(var1);
    var0.setLocale("");
    var0.setLineBreak(false);
    var0.setNameReferenceGraphPath("hi!");
    var0.setInlineLocalVariables(false);
    var0.setMarkNoSideEffectCalls(true);
    var0.setInlineGetters(false);

  }

  public void test368() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test368"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    java.lang.String var61 = var58.getReferenceName();
    boolean var62 = var58.canBeCalled();
    com.google.javascript.rhino.jstype.FunctionType var63 = var58.getConstructor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var61.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);

  }

  public void test369() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test369"); }


    java.lang.String var1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("JSDocInfo");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(JSDocInfo)"+ "'", var1.equals("(JSDocInfo)"));

  }

  public void test370() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test370"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var35 = null;
    var34.setResolveMode(var35);
    com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var37 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var0, var34);
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var40 = var39.isGetterDef();
    boolean var41 = var39.isGetProp();
    com.google.javascript.rhino.Node var42 = var39.getLastSibling();
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = var44.getNext();
    boolean var46 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var44);
    int var47 = var44.getLength();
    boolean var48 = var44.isInstanceOf();
    boolean var49 = var44.isName();
    com.google.javascript.rhino.Node var50 = var42.useSourceInfoIfMissingFrom(var44);
    com.google.javascript.jscomp.CodingConvention.Bind var52 = var0.describeFunctionBind(var44, false);
    com.google.javascript.rhino.Node var54 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = var54.getNext();
    com.google.javascript.rhino.InputId var56 = var54.getInputId();
    var54.setIsSyntheticBlock(false);
    com.google.javascript.rhino.InputId var59 = com.google.javascript.jscomp.NodeUtil.getInputId(var54);
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.string("RETURN");
    java.lang.String var62 = var0.extractClassNameIfProvide(var54, var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);

  }

  public void test371() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test371"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    com.google.javascript.rhino.JSTypeExpression var15 = var14.getTypedefType();
    java.util.Collection var16 = var14.getTypeNodes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test372() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test372"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    com.google.javascript.rhino.JSDocInfo.Visibility var16 = null;
    var14.setVisibility(var16);
    boolean var18 = var14.isDeprecated();
    com.google.javascript.rhino.JSTypeExpression var19 = var14.getTypedefType();
    boolean var20 = var14.isConstant();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test373() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test373"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var3 = var1.getBooleanProp((-1));
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    com.google.javascript.rhino.Node var10 = var7.removeFirstChild();
    com.google.javascript.rhino.Node var11 = var1.useSourceInfoFromForTree(var7);
    boolean var12 = var7.isDec();
    java.lang.String var16 = var7.toString(false, false, true);
    boolean var17 = var7.isOr();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "BANG"+ "'", var16.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test374() {}
//   public void test374() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test374"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     var3.reportCodeChange();
//     com.google.javascript.jscomp.Scope var6 = var3.getTopScope();
//     com.google.javascript.jscomp.Compiler.IntermediateState var7 = var3.getState();
//     com.google.javascript.jscomp.Scope var8 = var3.getTopScope();
//     var3.reportCodeChange();
//     var3.parse();
// 
//   }

  public void test375() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test375"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var11 = var0.getTweakProcessing();
    var0.setConvertToDottedProperties(false);
    var0.setAliasKeywords(false);
    com.google.javascript.jscomp.CompilerOptions var16 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var17 = null;
    var16.setStripTypes(var17);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var19 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var20 = var19.getDirectedGraphNodes();
    java.util.List var21 = var19.getEdges();
    var16.setManageClosureDependencies(var21);
    boolean var23 = var16.isExternExportsEnabled();
    var16.setCheckCaja(false);
    java.util.Set var26 = null;
    var16.setReplaceStringsReservedStrings(var26);
    com.google.javascript.rhino.JSDocInfoBuilder var29 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var30 = var29.recordExpose();
    boolean var32 = var29.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = var36.getNext();
    com.google.javascript.rhino.Node var38 = var34.srcrefTree(var36);
    com.google.javascript.rhino.InputId var39 = com.google.javascript.jscomp.NodeUtil.getInputId(var36);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    var36.setJSType(var40);
    com.google.javascript.rhino.JSDocInfo var42 = var29.build(var36);
    java.lang.String var43 = var42.getFileOverview();
    java.util.Set var44 = var42.getModifies();
    var16.setReplaceStringsReservedStrings(var44);
    var16.setGroupVariableDeclarations(false);
    var16.setInferTypes(true);
    var16.setInlineProperties(false);
    java.util.Map var52 = var16.getDefineReplacements();
    var0.setPropertyInvalidationErrors(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test376() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test376"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.isVarArgs();
    boolean var8 = var4.isOptionalArg();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(0, var4, var9);
    boolean var11 = var9.isQualifiedName();
    boolean var12 = var9.isAnd();
    com.google.javascript.rhino.jstype.StaticSourceFile var13 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var9);
    com.google.javascript.rhino.JSDocInfoBuilder var15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var16 = var15.recordExpose();
    boolean var18 = var15.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.InputId var25 = com.google.javascript.jscomp.NodeUtil.getInputId(var22);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var22.setJSType(var26);
    com.google.javascript.rhino.JSDocInfo var28 = var15.build(var22);
    java.lang.String var29 = var28.getFileOverview();
    java.util.Set var30 = var28.getModifies();
    java.util.List var31 = var28.getImplementedInterfaces();
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.block(var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.ifNode(var9, var32);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test377() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test377"); }


    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString(0, "(LABEL_NAME hi!)", 0, (-1));
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var17 = var15.getBooleanProp((-1));
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    com.google.javascript.rhino.Node var24 = var21.removeFirstChild();
    com.google.javascript.rhino.Node var25 = var15.useSourceInfoFromForTree(var21);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.InputId var32 = com.google.javascript.jscomp.NodeUtil.getInputId(var29);
    com.google.javascript.rhino.jstype.JSType var33 = null;
    var29.setJSType(var33);
    boolean var35 = var29.isBlock();
    com.google.javascript.rhino.Node var36 = var29.getParent();
    boolean var37 = var29.isBreak();
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var40 = var39.getNext();
    com.google.javascript.rhino.InputId var41 = var39.getInputId();
    boolean var42 = var39.isGetProp();
    com.google.javascript.rhino.Node var43 = var29.clonePropsFrom(var39);
    com.google.javascript.rhino.Node var44 = new com.google.javascript.rhino.Node(0, var9, var15, var39);
    com.google.javascript.jscomp.ClosureCodingConvention var45 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var47 = var45.isConstantKey("2014/12/24 11:10");
    java.util.Collection var48 = var45.getAssertionFunctions();
    com.google.javascript.rhino.Node var52 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var53 = null;
    var52.setJSType(var53);
    boolean var55 = var52.isScript();
    com.google.javascript.rhino.Node var56 = var52.removeFirstChild();
    com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var60 = var59.isGetterDef();
    boolean var61 = var59.isAdd();
    com.google.javascript.rhino.Node var63 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var66 = var65.getNext();
    com.google.javascript.rhino.Node var67 = var63.srcrefTree(var65);
    boolean var68 = var65.isVarArgs();
    com.google.javascript.rhino.Node var70 = var65.getChildAtIndex(1);
    com.google.javascript.rhino.Node var72 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var74 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var75 = var74.getNext();
    com.google.javascript.rhino.Node var76 = var72.srcrefTree(var74);
    com.google.javascript.rhino.JSDocInfo var77 = var74.getJSDocInfo();
    com.google.javascript.rhino.Node var78 = var65.copyInformationFrom(var74);
    java.lang.String var79 = var78.toStringTree();
    com.google.javascript.rhino.Node var81 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var83 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var84 = var83.getNext();
    com.google.javascript.rhino.Node var85 = var81.srcrefTree(var83);
    boolean var87 = var83.getBooleanProp(100);
    int var88 = var83.getSideEffectFlags();
    boolean var89 = var83.isDefaultCase();
    com.google.javascript.rhino.Node var90 = new com.google.javascript.rhino.Node(1, var59, var78, var83);
    java.lang.String var91 = var45.extractClassNameIfProvide(var52, var83);
    com.google.javascript.rhino.Node var92 = var83.cloneNode();
    com.google.javascript.rhino.Node var93 = var44.copyInformationFrom(var83);
    boolean var94 = var4.isEquivalentToTyped(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var79.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test378() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test378"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var4 = null;
    boolean var6 = var1.recordThrowDescription(var4, "()");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = var10.getNext();
    com.google.javascript.rhino.Node var12 = var8.srcrefTree(var10);
    boolean var13 = var10.isVarArgs();
    com.google.javascript.rhino.Node var15 = var10.getChildAtIndex(1);
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    com.google.javascript.rhino.JSDocInfo var22 = var19.getJSDocInfo();
    com.google.javascript.rhino.Node var23 = var10.copyInformationFrom(var19);
    java.lang.Object var25 = null;
    var10.putProp(0, var25);
    com.google.javascript.rhino.JSTypeExpression var28 = new com.google.javascript.rhino.JSTypeExpression(var10, "()");
    boolean var29 = var1.recordEnumParameterType(var28);
    boolean var31 = var1.recordFileOverview("");
    boolean var32 = var1.recordNoTypeCheck();
    boolean var35 = var1.recordParameterDescription("module$2014$12$24 11:10", "goog.exportProperty");
    com.google.javascript.jscomp.JSModule var37 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var38 = var37.getDependencies();
    var37.removeAll();
    com.google.javascript.jscomp.JSModule var41 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    var41.removeAll();
    var37.addDependency(var41);
    java.util.List var44 = var37.getInputs();
    java.lang.String var45 = var37.getName();
    java.util.List var46 = var37.getRequires();
    boolean var47 = var1.recordTemplateTypeNames(var46);
    com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = var51.getNext();
    com.google.javascript.rhino.Node var53 = var49.srcrefTree(var51);
    com.google.javascript.rhino.jstype.JSType var54 = var51.getJSType();
    com.google.javascript.rhino.JSDocInfo var55 = var1.build(var51);
    com.google.javascript.rhino.JSTypeExpression var56 = null;
    boolean var57 = var1.recordExtendedInterface(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Unversioned directory"+ "'", var45.equals("Unversioned directory"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);

  }

  public void test379() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test379"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var4 = var1.recordParameterDescription("Unversioned directory", "2014/12/24 11:10");
    var1.markText("(InputId: )", 100, 1, 3, 1);
    com.google.javascript.rhino.JSDocInfoBuilder var12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var13 = var12.recordExpose();
    boolean var15 = var12.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    com.google.javascript.rhino.InputId var22 = com.google.javascript.jscomp.NodeUtil.getInputId(var19);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var19.setJSType(var23);
    com.google.javascript.rhino.JSDocInfo var25 = var12.build(var19);
    java.lang.String var26 = var25.getFileOverview();
    java.util.Set var27 = var25.getModifies();
    boolean var28 = var1.recordModifies(var27);
    boolean var29 = var1.isDescriptionRecorded();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test380() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test380"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isArrayLit();
    com.google.javascript.rhino.Node var8 = var3.getNext();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var12 = var10.getBooleanProp((-1));
    var10.setSourceEncodedPosition(10);
    boolean var15 = var10.isContinue();
    boolean var16 = var10.isComma();
    com.google.javascript.rhino.Node var17 = var3.useSourceInfoFrom(var10);
    java.lang.String var18 = var3.getSourceFileName();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.thisNode();
    int var21 = var20.getLineno();
    boolean var22 = var20.isSetterDef();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.forIn(var3, var19, var20);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test381() {}
//   public void test381() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test381"); }
// 
// 
//     java.io.InputStream var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromInputStream("ERROR", var1);
// 
//   }

  public void test382() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test382"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasType();
    boolean var17 = var14.isInterface();
    com.google.javascript.rhino.JSDocInfoBuilder var19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var20 = var19.recordExpose();
    boolean var22 = var19.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.InputId var29 = com.google.javascript.jscomp.NodeUtil.getInputId(var26);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    var26.setJSType(var30);
    com.google.javascript.rhino.JSDocInfo var32 = var19.build(var26);
    java.lang.String var33 = var32.getFileOverview();
    boolean var34 = var32.hasFileOverview();
    boolean var35 = var32.hasReturnType();
    boolean var36 = var32.hasType();
    boolean var37 = var32.shouldPreserveTry();
    com.google.javascript.rhino.JSDocInfo.Visibility var38 = var32.getVisibility();
    var14.setVisibility(var38);
    boolean var40 = var14.isConstant();
    java.lang.String var41 = var14.getDescription();
    com.google.javascript.rhino.JSTypeExpression var42 = var14.getReturnType();
    var14.setDeprecated(true);
    boolean var45 = var14.isNoAlias();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test383() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test383"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isVarArgs();
    boolean var11 = var7.isArrayLit();
    com.google.javascript.rhino.Node var12 = var7.getNext();
    var1.markTypeNode(var7, 10, 100, 0, 0, false);
    com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var21 = var20.recordExpose();
    boolean var22 = var20.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var24 = null;
    boolean var25 = var20.recordParameter("Unversioned directory", var24);
    com.google.javascript.rhino.JSTypeExpression var26 = null;
    boolean var28 = var20.recordThrowDescription(var26, "");
    com.google.javascript.rhino.JSDocInfoBuilder var30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var31 = var30.recordExpose();
    boolean var33 = var30.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    com.google.javascript.rhino.Node var39 = var35.srcrefTree(var37);
    com.google.javascript.rhino.InputId var40 = com.google.javascript.jscomp.NodeUtil.getInputId(var37);
    com.google.javascript.rhino.jstype.JSType var41 = null;
    var37.setJSType(var41);
    com.google.javascript.rhino.JSDocInfo var43 = var30.build(var37);
    java.lang.String var44 = var43.getFileOverview();
    java.util.Set var45 = var43.getModifies();
    boolean var46 = var20.recordSuppressions(var45);
    boolean var47 = var1.recordModifies(var45);
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var51 = var49.getBooleanProp((-1));
    var49.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var55 = new com.google.javascript.rhino.JSTypeExpression(var49, "goog.abstractMethod");
    boolean var57 = var1.recordThrowDescription(var55, "STRING hi 0 [length: 2]\n");
    boolean var58 = var1.recordExterns();
    var1.recordOriginalCommentString("(2014/12/24 11:10)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test384() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test384"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    com.google.javascript.rhino.JSTypeExpression var2 = null;
    boolean var3 = var1.recordTypedef(var2);
    com.google.javascript.rhino.JSDocInfoBuilder var5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var6 = var5.recordExpose();
    boolean var7 = var5.recordExterns();
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isArrayLit();
    com.google.javascript.rhino.Node var16 = var11.getNext();
    var5.markTypeNode(var11, 10, 100, 0, 0, false);
    boolean var23 = var5.recordConsistentIdGenerator();
    com.google.javascript.rhino.JSDocInfoBuilder var25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var26 = var25.recordExpose();
    boolean var28 = var25.recordDeprecationReason("2014/12/24 11:10");
    boolean var29 = var25.recordConsistentIdGenerator();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var33 = var31.getBooleanProp((-1));
    var31.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var37 = new com.google.javascript.rhino.JSTypeExpression(var31, "goog.abstractMethod");
    boolean var38 = var25.recordThrowType(var37);
    boolean var39 = var5.recordType(var37);
    boolean var40 = var5.recordDeprecated();
    com.google.javascript.rhino.JSDocInfoBuilder var42 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var45 = var42.recordParameterDescription("Unversioned directory", "2014/12/24 11:10");
    var42.markText("(InputId: )", 100, 1, 3, 1);
    com.google.javascript.rhino.JSDocInfoBuilder var53 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var54 = var53.recordExpose();
    boolean var55 = var53.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var56 = null;
    boolean var58 = var53.recordThrowDescription(var56, "()");
    com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var62 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var63 = var62.getNext();
    com.google.javascript.rhino.Node var64 = var60.srcrefTree(var62);
    boolean var65 = var62.isVarArgs();
    com.google.javascript.rhino.Node var67 = var62.getChildAtIndex(1);
    com.google.javascript.rhino.Node var69 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var71 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var72 = var71.getNext();
    com.google.javascript.rhino.Node var73 = var69.srcrefTree(var71);
    com.google.javascript.rhino.JSDocInfo var74 = var71.getJSDocInfo();
    com.google.javascript.rhino.Node var75 = var62.copyInformationFrom(var71);
    java.lang.Object var77 = null;
    var62.putProp(0, var77);
    com.google.javascript.rhino.JSTypeExpression var80 = new com.google.javascript.rhino.JSTypeExpression(var62, "()");
    boolean var81 = var53.recordEnumParameterType(var80);
    boolean var82 = var42.recordImplementedInterface(var80);
    boolean var83 = var5.recordTypedef(var80);
    boolean var84 = var1.recordType(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);

  }

  public void test385() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test385"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isObject();
    boolean var60 = var58.hasReferenceName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);

  }

  public void test386() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test386"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var6.unregisterPropertyOnType("Unversioned directory", var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.jscomp.JSModule var12 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var13 = var12.getDependencies();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.block(var13);
    com.google.javascript.rhino.jstype.FunctionType var15 = var6.createFunctionTypeWithVarArgs(var10, var13);
    boolean var16 = var15.hasAnyTemplateInternal();
    java.lang.Iterable var17 = var15.getAllExtendedInterfaces();
    boolean var18 = var15.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var20.unregisterPropertyOnType("Unversioned directory", var22);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    com.google.javascript.jscomp.JSModule var26 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var27 = var26.getDependencies();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.block(var27);
    com.google.javascript.rhino.jstype.FunctionType var29 = var20.createFunctionTypeWithVarArgs(var24, var27);
    boolean var31 = var29.removeProperty("null(null)");
    var15.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var29);
    com.google.javascript.rhino.jstype.JSType var34 = var1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType)var29, "hi!");
    boolean var35 = var29.matchesInt32Context();
    var29.clearCachedValues();
    boolean var37 = var29.isNominalConstructor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test387() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test387"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setChainCalls(true);
    var0.setTweakToDoubleLiteral("hi!", 0.0d);
    boolean var6 = var0.isRemoveUnusedClassProperties();
    var0.setDeadAssignmentElimination(false);
    var0.setReserveRawExports(false);
    var0.setRewriteNewDateGoogNow(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test388() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test388"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    var0.pushEdgeAnnotations();
    java.lang.Iterable var3 = var0.getDirectedGraphNodes();
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = var6.getNext();
    boolean var8 = var6.isName();
    com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(10, var6, (-19), 306);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var12 = var0.getDirectedSuccNodes((java.lang.Object)var6);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test389() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test389"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    var0.pushEdgeAnnotations();
    java.lang.Iterable var3 = var0.getDirectedGraphNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var6 = var5.recordExpose();
    boolean var8 = var5.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.InputId var15 = com.google.javascript.jscomp.NodeUtil.getInputId(var12);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    var12.setJSType(var16);
    com.google.javascript.rhino.JSDocInfo var18 = var5.build(var12);
    java.lang.String var19 = var18.getFileOverview();
    java.util.Set var20 = var18.getModifies();
    java.util.List var21 = var18.getImplementedInterfaces();
    com.google.javascript.jscomp.graph.GraphNode var22 = var0.getNode((java.lang.Object)var18);
    com.google.javascript.jscomp.JSModule var24 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var25 = var24.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var26 = new com.google.javascript.jscomp.ComposeWarningsGuard(var25);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var27 = var0.getDirectedGraphNode((java.lang.Object)var26);
    com.google.javascript.jscomp.MessageFormatter var28 = null;
    java.util.logging.Logger var29 = null;
    com.google.javascript.jscomp.LoggerErrorManager var30 = new com.google.javascript.jscomp.LoggerErrorManager(var28, var29);
    com.google.javascript.jscomp.Compiler var31 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var30);
    com.google.javascript.jscomp.JSModule var33 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var34 = var33.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var35 = new com.google.javascript.jscomp.ComposeWarningsGuard(var34);
    com.google.javascript.jscomp.JSModule var37 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var38 = var37.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var39 = new com.google.javascript.jscomp.ComposeWarningsGuard(var38);
    com.google.javascript.jscomp.CompilerOptions var40 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var41 = null;
    var40.setStripTypes(var41);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var43 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var44 = var43.getDirectedGraphNodes();
    java.util.List var45 = var43.getEdges();
    var40.setManageClosureDependencies(var45);
    boolean var47 = var40.isExternExportsEnabled();
    var40.setCollapsePropertiesOnExternTypes(false);
    var31.<com.google.javascript.jscomp.SourceFile>initModules(var34, var38, var40);
    var40.setAliasKeywords(true);
    var40.setNameReferenceGraphPath("module$2014$12$24 11:10");
    var40.setClosurePass(true);
    var40.setInlineVariables(true);
    com.google.javascript.jscomp.CheckLevel var61 = null;
    com.google.javascript.jscomp.DiagnosticType var63 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var61, "Unversioned directory");
    com.google.javascript.jscomp.DiagnosticType[] var64 = new com.google.javascript.jscomp.DiagnosticType[] { var63};
    com.google.javascript.jscomp.DiagnosticGroup var65 = new com.google.javascript.jscomp.DiagnosticGroup(var64);
    com.google.javascript.jscomp.CompilerOptions var66 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var67 = null;
    var66.setStripTypes(var67);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var69 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var70 = var69.getDirectedGraphNodes();
    java.util.List var71 = var69.getEdges();
    var66.setManageClosureDependencies(var71);
    boolean var73 = var66.isExternExportsEnabled();
    var66.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var78 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var80 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var81 = com.google.javascript.jscomp.JSError.make(var78, var80);
    int var82 = var81.getCharno();
    com.google.javascript.jscomp.CheckLevel var83 = var81.getDefaultLevel();
    var66.setReportUnknownTypes(var83);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var85 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var65, var83);
    java.lang.String var86 = var65.toString();
    com.google.javascript.jscomp.DiagnosticGroup[] var87 = new com.google.javascript.jscomp.DiagnosticGroup[] { var65};
    com.google.javascript.jscomp.DiagnosticGroup var88 = new com.google.javascript.jscomp.DiagnosticGroup("hi!", var87);
    com.google.javascript.jscomp.CheckLevel var89 = null;
    var40.setWarningLevel(var88, var89);
    boolean var91 = var26.enables(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);

  }

  public void test390() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test390"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    boolean var6 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var4);
    int var7 = var4.getLength();
    com.google.javascript.rhino.Node var8 = null;
    boolean var9 = var4.hasChild(var8);
    com.google.javascript.rhino.Node var10 = var2.useSourceInfoIfMissingFromForTree(var4);
    com.google.javascript.jscomp.CodingConvention.Bind var12 = var0.describeFunctionBind(var2, false);
    java.lang.String var13 = var0.getExportPropertyFunction();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.jscomp.CodingConvention.Bind var16 = var0.describeFunctionBind(var15);
    com.google.javascript.rhino.InputId var18 = new com.google.javascript.rhino.InputId("");
    com.google.javascript.jscomp.ClosureCodingConvention var19 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var21 = var19.isConstantKey("2014/12/24 11:10");
    java.lang.String var22 = var19.getAbstractMethodName();
    boolean var23 = var18.equals((java.lang.Object)var22);
    java.lang.String var24 = var18.toString();
    java.lang.String var25 = var18.getIdName();
    var15.setInputId(var18);
    java.lang.String var27 = var18.toString();
    com.google.javascript.rhino.ErrorReporter var28 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var30 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var29);
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = var34.getNext();
    com.google.javascript.rhino.Node var36 = var32.srcrefTree(var34);
    boolean var37 = var34.isVarArgs();
    com.google.javascript.rhino.Node var39 = var34.getChildAtIndex(1);
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var44 = var43.getNext();
    com.google.javascript.rhino.Node var45 = var41.srcrefTree(var43);
    com.google.javascript.rhino.JSDocInfo var46 = var43.getJSDocInfo();
    com.google.javascript.rhino.Node var47 = var34.copyInformationFrom(var43);
    java.lang.Object var49 = null;
    var34.putProp(0, var49);
    com.google.javascript.rhino.JSTypeExpression var52 = new com.google.javascript.rhino.JSTypeExpression(var34, "()");
    com.google.javascript.rhino.jstype.StaticScope var53 = null;
    com.google.javascript.rhino.ErrorReporter var54 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var54);
    com.google.javascript.rhino.jstype.JSType var57 = null;
    var55.unregisterPropertyOnType("Unversioned directory", var57);
    com.google.javascript.rhino.jstype.JSType var59 = null;
    boolean var61 = var55.canPropertyBeDefined(var59, "BANG");
    com.google.javascript.rhino.jstype.JSType var62 = null;
    com.google.javascript.rhino.jstype.JSType[] var63 = new com.google.javascript.rhino.jstype.JSType[] { var62};
    com.google.javascript.rhino.Node var64 = var55.createParameters(var63);
    com.google.javascript.rhino.jstype.JSType var65 = var52.evaluate(var53, var55);
    boolean var66 = var30.addVarArgs(var65);
    boolean var67 = var65.isEnumElementType();
    boolean var68 = var65.isNullable();
    boolean var69 = var18.equals((java.lang.Object)var65);
    boolean var70 = var65.matchesInt32Context();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "goog.exportProperty"+ "'", var13.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "goog.abstractMethod"+ "'", var22.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "InputId: "+ "'", var24.equals("InputId: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "InputId: "+ "'", var27.equals("InputId: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);

  }

  public void test391() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test391"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var3 = null;
    var2.setStripTypes(var3);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var6 = var5.getDirectedGraphNodes();
    java.util.List var7 = var5.getEdges();
    var2.setManageClosureDependencies(var7);
    com.google.javascript.rhino.JSDocInfoBuilder var10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var11 = var10.recordExpose();
    boolean var13 = var10.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.InputId var20 = com.google.javascript.jscomp.NodeUtil.getInputId(var17);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    var17.setJSType(var21);
    com.google.javascript.rhino.JSDocInfo var23 = var10.build(var17);
    java.lang.String var24 = var23.getFileOverview();
    java.util.Set var25 = var23.getModifies();
    java.util.List var26 = var23.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var27 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var28 = null;
    var27.setStripTypes(var28);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var31 = var30.getDirectedGraphNodes();
    java.util.List var32 = var30.getEdges();
    var27.setManageClosureDependencies(var32);
    var27.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var27.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var39 = null;
    var27.setSourceMapDetailLevel(var39);
    var1.<com.google.javascript.jscomp.SourceFile>initModules(var7, var26, var27);
    var27.setPrintInputDelimiter(false);
    var27.setRemoveUnusedPrototypePropertiesInExterns(true);
    var27.setInstrumentationTemplate("(InputId: )");
    com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var48 = null;
    var27.setAnonymousFunctionNaming(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test392() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test392"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, false);
    com.google.javascript.jscomp.ClosureCodingConvention var3 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.JSDocInfoBuilder var5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var6 = var5.recordExpose();
    boolean var8 = var5.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.InputId var15 = com.google.javascript.jscomp.NodeUtil.getInputId(var12);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    var12.setJSType(var16);
    com.google.javascript.rhino.JSDocInfo var18 = var5.build(var12);
    java.lang.String var19 = var18.getFileOverview();
    java.util.Set var20 = var18.getModifies();
    java.util.List var21 = var18.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var22 = var18.getType();
    boolean var23 = var18.containsDeclaration();
    com.google.javascript.rhino.JSDocInfo.Visibility var24 = null;
    var18.setVisibility(var24);
    com.google.javascript.rhino.Node var26 = var18.getAssociatedNode();
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var27 = var3.getClassesDefinedByCall(var26);
    com.google.javascript.rhino.ErrorReporter var28 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var29.unregisterPropertyOnType("Unversioned directory", var31);
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.jscomp.JSModule var35 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var36 = var35.getDependencies();
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.block(var36);
    com.google.javascript.rhino.jstype.FunctionType var38 = var29.createFunctionTypeWithVarArgs(var33, var36);
    boolean var39 = var38.hasAnyTemplateInternal();
    java.lang.Iterable var40 = var38.getAllExtendedInterfaces();
    boolean var41 = var38.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var43 = var38.getOwnSlot("(LABEL_NAME hi!)");
    boolean var44 = var38.isEnumElementType();
    boolean var45 = var38.isEnumElementType();
    boolean var47 = var38.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    var38.clearCachedValues();
    com.google.javascript.rhino.ErrorReporter var49 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var49);
    com.google.javascript.rhino.jstype.JSType var52 = null;
    var50.unregisterPropertyOnType("Unversioned directory", var52);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    com.google.javascript.jscomp.JSModule var56 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var57 = var56.getDependencies();
    com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.block(var57);
    com.google.javascript.rhino.jstype.FunctionType var59 = var50.createFunctionTypeWithVarArgs(var54, var57);
    boolean var60 = var59.hasAnyTemplateInternal();
    java.lang.Iterable var61 = var59.getAllExtendedInterfaces();
    java.lang.Iterable var62 = var59.getCtorImplementedInterfaces();
    com.google.javascript.jscomp.CodingConvention.SubclassType var63 = null;
    var3.applySubclassRelationship(var38, var59, var63);
    boolean var65 = var38.canBeCalled();
    com.google.javascript.rhino.jstype.ObjectType var66 = var2.createObjectType((com.google.javascript.rhino.jstype.ObjectType)var38);
    com.google.javascript.rhino.jstype.TemplateType var67 = var66.toMaybeTemplateType();
    java.util.Set var68 = var66.getOwnPropertyNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test393() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test393"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var1 = null;
    var0.setBrokenClosureRequiresLevel(var1);
    var0.setLocale("");
    var0.setInlineProperties(false);

  }

  public void test394() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test394"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getProvides();
    java.util.List var3 = var1.getInputs();
    com.google.javascript.jscomp.JSModule var5 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var6 = var5.getProvides();
    java.util.List var7 = var5.getRequires();
    java.util.Set var8 = var5.getAllDependencies();
    java.lang.String var9 = var5.toString();
    var1.addDependency(var5);
    com.google.javascript.rhino.Node var14 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    var14.setJSType(var15);
    boolean var17 = var14.isScript();
    com.google.javascript.jscomp.SourceFile var21 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    int var23 = var21.getLineOfOffset(2);
    var14.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var21);
    com.google.javascript.jscomp.CompilerInput var25 = new com.google.javascript.jscomp.CompilerInput(var21);
    com.google.javascript.jscomp.JSModule var27 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var28 = var27.getDependencies();
    com.google.javascript.jscomp.SourceAst var29 = null;
    com.google.javascript.rhino.InputId var30 = null;
    com.google.javascript.jscomp.CompilerInput var32 = new com.google.javascript.jscomp.CompilerInput(var29, var30, true);
    com.google.javascript.jscomp.JSModule var33 = var32.getModule();
    var27.add(var32);
    com.google.javascript.jscomp.SourceFile var36 = com.google.javascript.jscomp.SourceFile.fromFile("()");
    var27.addFirst(var36);
    java.util.Set var38 = var27.getAllDependencies();
    var27.removeAll();
    com.google.javascript.jscomp.SourceAst var40 = null;
    com.google.javascript.rhino.InputId var41 = null;
    com.google.javascript.jscomp.CompilerInput var43 = new com.google.javascript.jscomp.CompilerInput(var40, var41, true);
    com.google.javascript.jscomp.CompilerInput var46 = new com.google.javascript.jscomp.CompilerInput(var40, "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", false);
    var27.addFirst(var46);
    boolean var48 = var46.isExtern();
    com.google.javascript.jscomp.SourceAst var49 = var46.getSourceAst();
    java.lang.String var50 = var46.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.addAfter(var25, var46);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Unversioned directory"+ "'", var9.equals("Unversioned directory"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var50.equals("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"));

  }

  public void test395() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test395"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.jstype.ObjectType var5 = var1.createAnonymousObjectType();
    com.google.javascript.rhino.jstype.EnumElementType var6 = var5.toMaybeEnumElementType();
    boolean var7 = var5.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    var9.unregisterPropertyOnType("Unversioned directory", var11);
    var9.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    boolean var22 = var19.isVarArgs();
    boolean var23 = var19.isFor();
    boolean var24 = var19.isNumber();
    com.google.javascript.rhino.Node var25 = var19.getNext();
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    boolean var32 = var29.isVarArgs();
    com.google.javascript.rhino.Node var34 = var29.getChildAtIndex(1);
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    com.google.javascript.rhino.JSDocInfo var41 = var38.getJSDocInfo();
    com.google.javascript.rhino.Node var42 = var29.copyInformationFrom(var38);
    java.lang.Object var44 = null;
    var29.putProp(0, var44);
    com.google.javascript.rhino.JSTypeExpression var47 = new com.google.javascript.rhino.JSTypeExpression(var29, "()");
    com.google.javascript.rhino.jstype.StaticScope var48 = null;
    com.google.javascript.rhino.ErrorReporter var49 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var49);
    com.google.javascript.rhino.jstype.JSType var52 = null;
    var50.unregisterPropertyOnType("Unversioned directory", var52);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    boolean var56 = var50.canPropertyBeDefined(var54, "BANG");
    com.google.javascript.rhino.jstype.JSType var57 = null;
    com.google.javascript.rhino.jstype.JSType[] var58 = new com.google.javascript.rhino.jstype.JSType[] { var57};
    com.google.javascript.rhino.Node var59 = var50.createParameters(var58);
    com.google.javascript.rhino.jstype.JSType var60 = var47.evaluate(var48, var50);
    com.google.javascript.rhino.jstype.JSType var61 = var60.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var62 = var61.dereference();
    boolean var63 = var61.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var64 = var9.createEnumType("STRING hi 0 [length: 2]\n", var19, var61);
    boolean var65 = var64.matchesStringContext();
    com.google.javascript.rhino.ErrorReporter var66 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var66);
    com.google.javascript.rhino.jstype.JSType var69 = null;
    var67.unregisterPropertyOnType("Unversioned directory", var69);
    com.google.javascript.rhino.jstype.JSType var71 = null;
    com.google.javascript.jscomp.JSModule var73 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var74 = var73.getDependencies();
    com.google.javascript.rhino.Node var75 = com.google.javascript.rhino.IR.block(var74);
    com.google.javascript.rhino.jstype.FunctionType var76 = var67.createFunctionTypeWithVarArgs(var71, var74);
    boolean var77 = var76.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType.TypePair var78 = var64.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType)var76);
    boolean var80 = var64.isPropertyInExterns("goog.exportSymbol");
    com.google.javascript.rhino.jstype.EnumType var81 = var64.toMaybeEnumType();
    com.google.javascript.rhino.jstype.JSType.TypePair var82 = var5.getTypesUnderInequality((com.google.javascript.rhino.jstype.JSType)var81);
    boolean var83 = var5.isNullType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test396() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test396"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.falseNode();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var3 = var0.copyInformationFrom(var2);
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.string("STRING hi 0 [length: 2]\n");
    boolean var6 = var5.isGetProp();
    boolean var7 = var3.isEquivalentTo(var5);
    int var8 = var3.getSourcePosition();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));

  }

  public void test397() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test397"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getProvides();
    java.util.List var3 = var1.getRequires();
    java.util.Set var4 = var1.getAllDependencies();
    java.util.Set var5 = var1.getThisAndAllDependencies();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test398() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test398"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var18 = var14.hasType();
    boolean var19 = var14.shouldPreserveTry();
    java.lang.String var20 = var14.getOriginalCommentString();
    boolean var21 = var14.hasTypedefType();
    java.util.List var22 = var14.getExtendedInterfaces();
    java.lang.String var23 = var14.getVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test399() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test399"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setTransformAMDToCJSModules(false);
    var0.setAmbiguateProperties(false);
    boolean var14 = var0.assumeStrictThis();
    var0.setGenerateExports(false);
    var0.setDebugFunctionSideEffectsPath("function (): {2060974850}");
    com.google.javascript.jscomp.CompilerOptions var19 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var20 = null;
    var19.setStripTypes(var20);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var22 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var23 = var22.getDirectedGraphNodes();
    java.util.List var24 = var22.getEdges();
    var19.setManageClosureDependencies(var24);
    boolean var26 = var19.isExternExportsEnabled();
    var19.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var31 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var33 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var34 = com.google.javascript.jscomp.JSError.make(var31, var33);
    int var35 = var34.getCharno();
    com.google.javascript.jscomp.CheckLevel var36 = var34.getDefaultLevel();
    var19.setReportUnknownTypes(var36);
    var0.setCheckRequires(var36);
    com.google.javascript.jscomp.DefaultPassConfig var39 = new com.google.javascript.jscomp.DefaultPassConfig(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test400() {}
//   public void test400() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test400"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.JSError[] var4 = var3.getErrors();
//     var3.disableThreads();
//     com.google.javascript.jscomp.CompilerOptions var6 = new com.google.javascript.jscomp.CompilerOptions();
//     var6.setChainCalls(true);
//     java.util.logging.Logger var9 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var10 = new com.google.javascript.jscomp.LoggerErrorManager(var9);
//     var6.setErrorHandler((com.google.javascript.jscomp.ErrorHandler)var10);
//     com.google.javascript.jscomp.CompilerOptions var12 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var13 = null;
//     var12.setStripTypes(var13);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var15 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var16 = var15.getDirectedGraphNodes();
//     java.util.List var17 = var15.getEdges();
//     var12.setManageClosureDependencies(var17);
//     var12.setDevirtualizePrototypeMethods(true);
//     var12.setCollapsePropertiesOnExternTypes(false);
//     var12.setShadowVariables(false);
//     com.google.javascript.jscomp.CompilerOptions var25 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var26 = null;
//     var25.setStripTypes(var26);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var29 = var28.getDirectedGraphNodes();
//     java.util.List var30 = var28.getEdges();
//     var25.setManageClosureDependencies(var30);
//     boolean var32 = var25.isExternExportsEnabled();
//     var25.setCheckCaja(false);
//     java.util.Set var35 = null;
//     var25.setReplaceStringsReservedStrings(var35);
//     com.google.javascript.rhino.JSDocInfoBuilder var38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var39 = var38.recordExpose();
//     boolean var41 = var38.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var46 = var45.getNext();
//     com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
//     com.google.javascript.rhino.InputId var48 = com.google.javascript.jscomp.NodeUtil.getInputId(var45);
//     com.google.javascript.rhino.jstype.JSType var49 = null;
//     var45.setJSType(var49);
//     com.google.javascript.rhino.JSDocInfo var51 = var38.build(var45);
//     java.lang.String var52 = var51.getFileOverview();
//     java.util.Set var53 = var51.getModifies();
//     var25.setReplaceStringsReservedStrings(var53);
//     var25.setUnaliasableGlobals("");
//     com.google.javascript.jscomp.DiagnosticType var59 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var61 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var62 = com.google.javascript.jscomp.JSError.make(var59, var61);
//     int var63 = var62.getCharno();
//     com.google.javascript.jscomp.CheckLevel var64 = var62.getDefaultLevel();
//     var25.setCheckGlobalThisLevel(var64);
//     var12.setCheckMissingGetCssNameLevel(var64);
//     com.google.javascript.jscomp.MessageFormatter var67 = null;
//     java.util.logging.Logger var68 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var69 = new com.google.javascript.jscomp.LoggerErrorManager(var67, var68);
//     com.google.javascript.jscomp.Compiler var70 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var69);
//     com.google.javascript.jscomp.Scope var71 = var70.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var72 = null;
//     com.google.javascript.jscomp.NodeTraversal var73 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var70, var72);
//     com.google.javascript.jscomp.Scope var74 = var73.getScope();
//     com.google.javascript.rhino.Node var75 = null;
//     com.google.javascript.jscomp.DiagnosticType var78 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var80 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var81 = com.google.javascript.jscomp.JSError.make(var78, var80);
//     com.google.javascript.jscomp.DiagnosticType var82 = var81.getType();
//     java.lang.String[] var84 = new java.lang.String[] { "LABEL_NAME hi!"};
//     com.google.javascript.jscomp.JSError var85 = var73.makeError(var75, var82, var84);
//     var10.report(var64, var85);
//     var3.setErrorManager((com.google.javascript.jscomp.ErrorManager)var10);
//     boolean var88 = var3.acceptConstKeyword();
// 
//   }

  public void test401() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test401"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var5 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var7.unregisterPropertyOnType("Unversioned directory", var9);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    boolean var13 = var7.canPropertyBeDefined(var11, "BANG");
    com.google.javascript.rhino.jstype.JSType var14 = null;
    com.google.javascript.rhino.jstype.JSType[] var15 = new com.google.javascript.rhino.jstype.JSType[] { var14};
    com.google.javascript.rhino.Node var16 = var7.createParameters(var15);
    boolean var17 = var5.addRequiredParams(var15);
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    boolean var25 = var21.isOptionalArg();
    java.lang.String var29 = var21.toString(false, false, true);
    com.google.javascript.rhino.Node var30 = var5.newOptionalParameterFromNode(var21);
    com.google.javascript.rhino.JSDocInfoBuilder var32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var33 = var32.recordExpose();
    boolean var34 = var32.recordExterns();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    boolean var42 = var38.isArrayLit();
    com.google.javascript.rhino.Node var43 = var38.getNext();
    var32.markTypeNode(var38, 10, 100, 0, 0, false);
    boolean var50 = var38.isCall();
    com.google.javascript.rhino.Node var51 = var5.newParameterFromNode(var38);
    boolean var52 = var38.isOr();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "BANG"+ "'", var29.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);

  }

  public void test402() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test402"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var7.setJSType(var8);
    boolean var10 = var7.isScript();
    com.google.javascript.rhino.Node var11 = var7.removeFirstChild();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var15 = var14.isGetterDef();
    boolean var16 = var14.isAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    java.lang.String var34 = var33.toStringTree();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var42 = var38.getBooleanProp(100);
    int var43 = var38.getSideEffectFlags();
    boolean var44 = var38.isDefaultCase();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, var14, var33, var38);
    java.lang.String var46 = var0.extractClassNameIfProvide(var7, var38);
    java.util.Collection var47 = var0.getAssertionFunctions();
    java.lang.String var48 = var0.getGlobalObject();
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode((com.google.javascript.jscomp.CodingConvention)var0, "");
    com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var54 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = var54.getNext();
    com.google.javascript.rhino.Node var56 = var52.srcrefTree(var54);
    com.google.javascript.rhino.JSDocInfo var57 = var54.getJSDocInfo();
    boolean var58 = var54.isSwitch();
    boolean var59 = var54.isIf();
    var50.addChildToBack(var54);
    com.google.javascript.rhino.Node var62 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var63 = var62.getNext();
    int var64 = var62.getSourceOffset();
    boolean var65 = var62.isNE();
    java.lang.String var66 = com.google.javascript.jscomp.NodeUtil.getSourceName(var62);
    com.google.javascript.rhino.Node var67 = var62.cloneTree();
    com.google.javascript.rhino.Node var69 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var70 = var69.getNext();
    int var71 = var69.getSourceOffset();
    com.google.javascript.rhino.Node var72 = var69.cloneNode();
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var73 = var72.getJsDocBuilderForNode();
    boolean var74 = var72.isAnd();
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.Node.newString((-19), "(2014/12/24 11:10)");
    com.google.javascript.rhino.Node var78 = null;
    var72.addChildrenAfter(var77, var78);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var54.addChildBefore(var62, var78);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var34.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "goog.global"+ "'", var48.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test403() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test403"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    com.google.javascript.rhino.JSTypeExpression var7 = null;
    boolean var9 = var1.recordThrowDescription(var7, "");
    com.google.javascript.rhino.JSDocInfoBuilder var11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var12 = var11.recordExpose();
    boolean var14 = var11.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    com.google.javascript.rhino.InputId var21 = com.google.javascript.jscomp.NodeUtil.getInputId(var18);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var18.setJSType(var22);
    com.google.javascript.rhino.JSDocInfo var24 = var11.build(var18);
    java.lang.String var25 = var24.getFileOverview();
    java.util.Set var26 = var24.getModifies();
    boolean var27 = var1.recordSuppressions(var26);
    boolean var28 = var1.recordInterface();
    boolean var30 = var1.hasParameter("");
    boolean var32 = var1.recordMeaning("(LABEL_NAME hi!)");
    boolean var33 = var1.recordInterface();
    boolean var34 = var1.recordNoSideEffects();
    boolean var35 = var1.recordNoTypeCheck();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);

  }

  public void test404() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test404"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.CheckLevel var3 = null;
    com.google.javascript.jscomp.Compiler var4 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var5 = var4.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var6 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var4);
    com.google.javascript.jscomp.DiagnosticType var9 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var11 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var12 = com.google.javascript.jscomp.JSError.make(var9, var11);
    int var13 = var12.getCharno();
    com.google.javascript.jscomp.CheckLevel var14 = var12.getDefaultLevel();
    java.lang.String var15 = var6.formatError(var12);
    int var16 = var12.getLineNumber();
    var2.report(var3, var12);
    com.google.javascript.jscomp.CompilerOptions var18 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var19 = null;
    var18.setStripTypes(var19);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var22 = var21.getDirectedGraphNodes();
    java.util.List var23 = var21.getEdges();
    var18.setManageClosureDependencies(var23);
    boolean var25 = var18.isExternExportsEnabled();
    var18.setCheckCaja(false);
    java.util.Set var28 = null;
    var18.setReplaceStringsReservedStrings(var28);
    var18.setReserveRawExports(false);
    var18.setReserveRawExports(true);
    com.google.javascript.jscomp.DefaultPassConfig var34 = new com.google.javascript.jscomp.DefaultPassConfig(var18);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var35 = var18.getLanguageIn();
    boolean var36 = var12.equals((java.lang.Object)var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var15.equals("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test405() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test405"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    com.google.javascript.rhino.Node var17 = var10.getPropertyNode("function (): ?");
    boolean var19 = var10.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    boolean var20 = var10.isNumberObjectType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test406() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test406"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setShadowVariables(false);
    com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var14 = null;
    var13.setStripTypes(var14);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var16 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var17 = var16.getDirectedGraphNodes();
    java.util.List var18 = var16.getEdges();
    var13.setManageClosureDependencies(var18);
    boolean var20 = var13.isExternExportsEnabled();
    var13.setCheckCaja(false);
    java.util.Set var23 = null;
    var13.setReplaceStringsReservedStrings(var23);
    com.google.javascript.rhino.JSDocInfoBuilder var26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var27 = var26.recordExpose();
    boolean var29 = var26.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = var33.getNext();
    com.google.javascript.rhino.Node var35 = var31.srcrefTree(var33);
    com.google.javascript.rhino.InputId var36 = com.google.javascript.jscomp.NodeUtil.getInputId(var33);
    com.google.javascript.rhino.jstype.JSType var37 = null;
    var33.setJSType(var37);
    com.google.javascript.rhino.JSDocInfo var39 = var26.build(var33);
    java.lang.String var40 = var39.getFileOverview();
    java.util.Set var41 = var39.getModifies();
    var13.setReplaceStringsReservedStrings(var41);
    var13.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var47 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var49 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var50 = com.google.javascript.jscomp.JSError.make(var47, var49);
    int var51 = var50.getCharno();
    com.google.javascript.jscomp.CheckLevel var52 = var50.getDefaultLevel();
    var13.setCheckGlobalThisLevel(var52);
    var0.setCheckMissingGetCssNameLevel(var52);
    var0.setCommonJSModulePathPrefix("CONTINUE");
    var0.setChainCalls(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test407() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test407"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
    com.google.javascript.rhino.jstype.FunctionBuilder var3 = var1.setIsConstructor(true);
    com.google.javascript.rhino.jstype.FunctionBuilder var4 = var3.forConstructor();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString(0, "hi!");
    var7.setVarArgs(false);
    com.google.javascript.rhino.jstype.FunctionBuilder var10 = var4.withSourceNode(var7);
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
    boolean var17 = var14.isVarArgs();
    com.google.javascript.rhino.Node var19 = var14.getChildAtIndex(1);
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
    com.google.javascript.rhino.JSDocInfo var26 = var23.getJSDocInfo();
    com.google.javascript.rhino.Node var27 = var14.copyInformationFrom(var23);
    java.lang.Object var29 = null;
    var14.putProp(0, var29);
    com.google.javascript.rhino.JSTypeExpression var32 = new com.google.javascript.rhino.JSTypeExpression(var14, "()");
    com.google.javascript.rhino.jstype.StaticScope var33 = null;
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    com.google.javascript.rhino.jstype.JSType var37 = null;
    var35.unregisterPropertyOnType("Unversioned directory", var37);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    boolean var41 = var35.canPropertyBeDefined(var39, "BANG");
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.Node var44 = var35.createParameters(var43);
    com.google.javascript.rhino.jstype.JSType var45 = var32.evaluate(var33, var35);
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var48 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var47);
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = var52.getNext();
    com.google.javascript.rhino.Node var54 = var50.srcrefTree(var52);
    boolean var55 = var52.isVarArgs();
    com.google.javascript.rhino.Node var57 = var52.getChildAtIndex(1);
    com.google.javascript.rhino.Node var59 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var61 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var62 = var61.getNext();
    com.google.javascript.rhino.Node var63 = var59.srcrefTree(var61);
    com.google.javascript.rhino.JSDocInfo var64 = var61.getJSDocInfo();
    com.google.javascript.rhino.Node var65 = var52.copyInformationFrom(var61);
    java.lang.Object var67 = null;
    var52.putProp(0, var67);
    com.google.javascript.rhino.JSTypeExpression var70 = new com.google.javascript.rhino.JSTypeExpression(var52, "()");
    com.google.javascript.rhino.jstype.StaticScope var71 = null;
    com.google.javascript.rhino.ErrorReporter var72 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var73 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var72);
    com.google.javascript.rhino.jstype.JSType var75 = null;
    var73.unregisterPropertyOnType("Unversioned directory", var75);
    com.google.javascript.rhino.jstype.JSType var77 = null;
    boolean var79 = var73.canPropertyBeDefined(var77, "BANG");
    com.google.javascript.rhino.jstype.JSType var80 = null;
    com.google.javascript.rhino.jstype.JSType[] var81 = new com.google.javascript.rhino.jstype.JSType[] { var80};
    com.google.javascript.rhino.Node var82 = var73.createParameters(var81);
    com.google.javascript.rhino.jstype.JSType var83 = var70.evaluate(var71, var73);
    boolean var84 = var48.addVarArgs(var83);
    com.google.javascript.rhino.jstype.JSType var85 = var45.getLeastSupertype(var83);
    boolean var86 = var85.isObject();
    boolean var87 = var85.isNoType();
    com.google.javascript.rhino.jstype.JSType var89 = var85.findPropertyType("BANG");
    boolean var90 = var89.isNominalConstructor();
    com.google.javascript.rhino.jstype.FunctionBuilder var91 = var10.withReturnType(var89);
    com.google.javascript.rhino.jstype.FunctionBuilder var93 = var91.setIsConstructor(true);
    com.google.javascript.rhino.Node var94 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var95 = var93.withParamsNode(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test408() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test408"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.JSError[] var4 = var3.getMessages();
    com.google.javascript.jscomp.Region var7 = var3.getSourceRegion("2014/12/24 11:10", 0);
    com.google.javascript.jscomp.Scope var8 = var3.getTopScope();
    int var9 = var3.getErrorCount();
    com.google.javascript.jscomp.NodeTraversal.Callback var10 = null;
    com.google.javascript.jscomp.NodeTraversal var11 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var10);
    com.google.javascript.jscomp.Scope var12 = var11.getScope();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test409() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test409"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var18 = var14.hasType();
    var14.setDeprecated(false);
    boolean var21 = var14.isInterface();
    java.lang.String var22 = var14.getSourceName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test410() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test410"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("function (): {1883749358}");
    com.google.javascript.rhino.jstype.JSType var2 = var1.getJSType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test411() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test411"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setTightenTypes(false);
    var0.enableRuntimeTypeCheck("module$2014$12$24 11:10");
    com.google.javascript.jscomp.SourceMap.DetailLevel var14 = null;
    var0.setSourceMapDetailLevel(var14);
    var0.setManageClosureDependencies(false);
    var0.setRenamePrefixNamespace("Unversioned directory.  at goog.abstractMethod line (unknown line) : (unknown column)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test412() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test412"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setRemoveUnusedLocalVars(false);
    com.google.javascript.rhino.JSDocInfoBuilder var14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var15 = var14.recordExpose();
    boolean var17 = var14.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    com.google.javascript.rhino.InputId var24 = com.google.javascript.jscomp.NodeUtil.getInputId(var21);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    var21.setJSType(var25);
    com.google.javascript.rhino.JSDocInfo var27 = var14.build(var21);
    java.lang.String var28 = var27.getFileOverview();
    java.util.Set var29 = var27.getModifies();
    java.util.List var30 = var27.getImplementedInterfaces();
    var0.setSourceMapLocationMappings(var30);
    var0.setCheckControlStructures(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test413() {}
//   public void test413() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test413"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     com.google.javascript.jscomp.Result var5 = var3.getResult();
//     var3.parse();
// 
//   }

  public void test414() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test414"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setTransformAMDToCJSModules(false);
    var0.setAmbiguateProperties(false);
    boolean var14 = var0.assumeStrictThis();
    com.google.javascript.jscomp.CompilerOptions.TracerMode var15 = var0.getTracerMode();
    var0.setInlineLocalFunctions(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test415() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test415"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isVarArgs();
    boolean var11 = var7.isArrayLit();
    com.google.javascript.rhino.Node var12 = var7.getNext();
    var1.markTypeNode(var7, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isVarArgs();
    com.google.javascript.rhino.Node var27 = var22.getChildAtIndex(1);
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
    com.google.javascript.rhino.JSDocInfo var34 = var31.getJSDocInfo();
    com.google.javascript.rhino.Node var35 = var22.copyInformationFrom(var31);
    java.lang.Object var37 = null;
    var22.putProp(0, var37);
    com.google.javascript.rhino.JSTypeExpression var40 = new com.google.javascript.rhino.JSTypeExpression(var22, "()");
    com.google.javascript.rhino.JSTypeExpression var41 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var40);
    boolean var42 = var1.recordBaseType(var40);
    com.google.javascript.jscomp.MessageFormatter var43 = null;
    java.util.logging.Logger var44 = null;
    com.google.javascript.jscomp.LoggerErrorManager var45 = new com.google.javascript.jscomp.LoggerErrorManager(var43, var44);
    com.google.javascript.jscomp.Compiler var46 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var45);
    boolean var47 = var40.equals((java.lang.Object)var46);
    java.lang.String var48 = var46.getAstDotGraph();
    com.google.javascript.jscomp.Compiler var49 = new com.google.javascript.jscomp.Compiler();
    var49.reportCodeChange();
    com.google.javascript.jscomp.Compiler.IntermediateState var51 = var49.getState();
    var46.setState(var51);
    com.google.javascript.jscomp.Result var53 = var46.getResult();
    java.lang.String var54 = var46.getAstDotGraph();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + ""+ "'", var48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + ""+ "'", var54.equals(""));

  }

  public void test416() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test416"); }


    com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    int var5 = var3.getLineOfOffset(2);
    com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3);
    java.io.Reader var7 = var3.getCodeReader();
    var3.clearCachedSource();
    com.google.javascript.jscomp.JsAst var9 = new com.google.javascript.jscomp.JsAst(var3);
    com.google.javascript.rhino.InputId var10 = var9.getInputId();
    com.google.javascript.rhino.Node var14 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    var14.setJSType(var15);
    boolean var17 = var14.isScript();
    com.google.javascript.jscomp.SourceFile var21 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    int var23 = var21.getLineOfOffset(2);
    var14.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var21);
    com.google.javascript.jscomp.CompilerInput var25 = new com.google.javascript.jscomp.CompilerInput(var21);
    var9.setSourceFile(var21);
    com.google.javascript.jscomp.SourceFile var27 = var9.getSourceFile();
    java.lang.String var29 = var27.getLine((-19));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "()"+ "'", var29.equals("()"));

  }

  public void test417() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test417"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getType();
    int var19 = var14.getParameterCount();
    java.lang.String var20 = var14.getLendsName();
    com.google.common.collect.ImmutableList var21 = var14.getTemplateTypeNames();
    java.lang.String var22 = var14.getVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test418() {}
//   public void test418() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test418"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
//     com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
//     com.google.javascript.jscomp.Scope var7 = var6.getScope();
//     com.google.javascript.rhino.Node var8 = null;
//     com.google.javascript.jscomp.DiagnosticType var11 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var13 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var14 = com.google.javascript.jscomp.JSError.make(var11, var13);
//     com.google.javascript.jscomp.DiagnosticType var15 = var14.getType();
//     java.lang.String[] var17 = new java.lang.String[] { "LABEL_NAME hi!"};
//     com.google.javascript.jscomp.JSError var18 = var6.makeError(var8, var15, var17);
//     com.google.javascript.jscomp.Scope var19 = var6.getScope();
//     com.google.javascript.jscomp.Compiler var20 = var6.getCompiler();
//     com.google.javascript.jscomp.Scope var21 = var20.getTopScope();
//     boolean var22 = var20.hasErrors();
// 
//   }

  public void test419() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test419"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.disabled("function (): {1263056885}", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.DiagnosticType[] var3 = new com.google.javascript.jscomp.DiagnosticType[] { var2};
    com.google.javascript.jscomp.DiagnosticGroup var4 = new com.google.javascript.jscomp.DiagnosticGroup(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test420() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test420"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Collection var16 = var14.getAuthors();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test421() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test421"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    var0.setManageClosureDependencies(var13);
    var0.setCrossModuleCodeMotion(true);
    com.google.javascript.jscomp.CompilerOptions var18 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var19 = null;
    var18.setStripTypes(var19);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var22 = var21.getDirectedGraphNodes();
    java.util.List var23 = var21.getEdges();
    var18.setManageClosureDependencies(var23);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.script(var23);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.paramList(var23);
    var0.setManageClosureDependencies(var23);
    var0.skipAllCompilerPasses();
    com.google.javascript.jscomp.ClosureCodingConvention var29 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var31 = var29.isConstantKey("2014/12/24 11:10");
    java.util.Collection var32 = var29.getAssertionFunctions();
    boolean var34 = var29.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    boolean var42 = var38.isOptionalArg();
    java.lang.String var46 = var38.toString(false, false, true);
    java.util.List var47 = var29.identifyTypeDeclarationCall(var38);
    java.lang.String var48 = var29.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    int var52 = var50.getSourceOffset();
    com.google.javascript.rhino.Node var53 = var50.cloneNode();
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = var55.getNext();
    int var57 = var55.getSourceOffset();
    com.google.javascript.rhino.Node var58 = var55.cloneNode();
    var53.addChildrenToFront(var58);
    com.google.javascript.jscomp.CodingConvention.Bind var61 = var29.describeFunctionBind(var53, true);
    com.google.javascript.jscomp.GoogleCodingConvention var62 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var29);
    boolean var64 = var62.isConstant("module$2014$12$24 11:10");
    boolean var67 = var62.isExported("Unversioned directory", false);
    boolean var69 = var62.isConstantKey("function (): {540092593}");
    boolean var71 = var62.isPrivate("LABEL_NAME hi!");
    boolean var74 = var62.isExported("module$2014$12$24 11:10", false);
    var0.setCodingConvention((com.google.javascript.jscomp.CodingConvention)var62);
    boolean var77 = var62.isValidEnumKey("RETURN 0");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "BANG"+ "'", var46.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);

  }

  public void test422() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test422"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    boolean var6 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var4);
    int var7 = var4.getLength();
    com.google.javascript.rhino.Node var8 = null;
    boolean var9 = var4.hasChild(var8);
    com.google.javascript.rhino.Node var10 = var2.useSourceInfoIfMissingFromForTree(var4);
    com.google.javascript.jscomp.CodingConvention.Bind var12 = var0.describeFunctionBind(var2, false);
    java.lang.String var13 = var0.getExportPropertyFunction();
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    com.google.javascript.rhino.JSDocInfo var21 = var18.getJSDocInfo();
    boolean var22 = var18.isWhile();
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    int var29 = var28.getSourceOffset();
    com.google.javascript.rhino.Node var32 = new com.google.javascript.rhino.Node((-1), var18, var28, 3, 2);
    com.google.javascript.jscomp.CodingConvention.Bind var33 = var0.describeFunctionBind(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "goog.exportProperty"+ "'", var13.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }

  public void test423() {}
//   public void test423() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test423"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var6 = var5.getNext();
//     com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
//     boolean var8 = var5.isVarArgs();
//     com.google.javascript.rhino.Node var10 = var5.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var15 = var14.getNext();
//     com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
//     com.google.javascript.rhino.JSDocInfo var17 = var14.getJSDocInfo();
//     com.google.javascript.rhino.Node var18 = var5.copyInformationFrom(var14);
//     com.google.javascript.rhino.Node[] var19 = new com.google.javascript.rhino.Node[] { var5};
//     com.google.javascript.rhino.Node var22 = new com.google.javascript.rhino.Node((-1), var19, 10, 0);
//     com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.call(var0, var19);
// 
//   }

  public void test424() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test424"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var17 = var14.hasParameter("LABEL_NAME hi!");
    com.google.javascript.rhino.JSDocInfo.Visibility var18 = var14.getVisibility();
    boolean var19 = var14.isNoSideEffects();
    boolean var20 = var14.isNoAlias();
    java.util.Set var21 = var14.getParameterNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test425() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test425"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var2 = var1.getNext();
    int var3 = var1.getSourceOffset();
    boolean var4 = var1.isAnd();
    com.google.javascript.rhino.Node var5 = var1.getLastSibling();
    java.lang.String var6 = var1.toStringTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var6.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));

  }

  public void test426() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test426"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    boolean var26 = var24.removeProperty("null(null)");
    var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
    int var28 = var24.getExtendedInterfacesCount();
    java.util.Set var29 = var24.getOwnPropertyNames();
    java.lang.Iterable var30 = var24.getCtorImplementedInterfaces();
    com.google.javascript.rhino.ErrorReporter var31 = null;
    com.google.javascript.rhino.jstype.StaticScope var32 = null;
    com.google.javascript.rhino.jstype.JSType var33 = var24.resolve(var31, var32);
    com.google.javascript.rhino.jstype.EnumElementType var34 = var24.toMaybeEnumElementType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);

  }

  public void test427() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test427"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    var0.setDefineToBooleanLiteral("BANG", false);
    var0.disableRuntimeTypeCheck();
    var0.setPrettyPrint(false);
    var0.setComputeFunctionSideEffects(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test428() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test428"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.nullNode();
    java.util.Set var1 = var0.getDirectives();
    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.NodeUtil.newExpr(var0);
    com.google.javascript.rhino.Node var3 = var2.cloneTree();
    boolean var5 = var2.getBooleanProp(2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test429() {}
//   public void test429() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test429"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     var1.unregisterPropertyOnType("Unversioned directory", var3);
//     var1.identifyNonNullableName("2014/12/24 11:10");
//     com.google.javascript.rhino.jstype.JSType var8 = var1.getType("2014/12/24 11:10");
//     com.google.javascript.rhino.ErrorReporter var9 = var1.getErrorReporter();
//     com.google.javascript.jscomp.ClosureCodingConvention var10 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var11 = null;
//     com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var16 = var15.getNext();
//     com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
//     boolean var18 = var15.isOr();
//     java.lang.String var19 = var10.extractClassNameIfRequire(var11, var15);
//     com.google.javascript.rhino.ErrorReporter var20 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
//     com.google.javascript.rhino.jstype.JSType var23 = null;
//     var21.unregisterPropertyOnType("Unversioned directory", var23);
//     com.google.javascript.rhino.jstype.JSType var25 = null;
//     com.google.javascript.jscomp.JSModule var27 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var28 = var27.getDependencies();
//     com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.block(var28);
//     com.google.javascript.rhino.jstype.FunctionType var30 = var21.createFunctionTypeWithVarArgs(var25, var28);
//     com.google.javascript.rhino.ErrorReporter var31 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var31);
//     com.google.javascript.rhino.jstype.JSType var34 = null;
//     var32.unregisterPropertyOnType("Unversioned directory", var34);
//     com.google.javascript.rhino.jstype.JSType var36 = null;
//     com.google.javascript.jscomp.JSModule var38 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var39 = var38.getDependencies();
//     com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.block(var39);
//     com.google.javascript.rhino.jstype.FunctionType var41 = var32.createFunctionTypeWithVarArgs(var36, var39);
//     boolean var42 = var41.hasAnyTemplateInternal();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var43 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var44 = var43.getDirectedGraphNodes();
//     java.lang.Iterable var45 = var43.getDirectedGraphNodes();
//     java.util.List var46 = var43.getGraphvizNodes();
//     com.google.javascript.jscomp.CompilerOptions var47 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var48 = null;
//     var47.setStripTypes(var48);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var51 = var50.getDirectedGraphNodes();
//     java.util.List var52 = var50.getEdges();
//     var47.setManageClosureDependencies(var52);
//     boolean var54 = var47.isExternExportsEnabled();
//     var47.setCheckCaja(false);
//     java.util.Set var57 = null;
//     var47.setReplaceStringsReservedStrings(var57);
//     var47.setAliasAllStrings(true);
//     var47.setAliasableGlobals("STRING hi 0 [length: 2]\n");
//     com.google.javascript.jscomp.CompilerOptions var63 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var64 = null;
//     var63.setStripTypes(var64);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var66 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var67 = var66.getDirectedGraphNodes();
//     java.util.List var68 = var66.getEdges();
//     var63.setManageClosureDependencies(var68);
//     boolean var70 = var63.isExternExportsEnabled();
//     var63.setCheckCaja(false);
//     var63.setGroupVariableDeclarations(true);
//     java.util.Map var75 = var63.getDefineReplacements();
//     var47.setPropertyInvalidationErrors(var75);
//     var10.defineDelegateProxyPrototypeProperties(var21, (com.google.javascript.rhino.jstype.StaticScope)var41, var46, var75);
//     var1.resolveTypesInScope((com.google.javascript.rhino.jstype.StaticScope)var41);
//     com.google.javascript.rhino.JSDocInfo var79 = var41.getJSDocInfo();
//     java.lang.String var80 = var41.toDebugHashCodeString();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var18 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var42 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var45);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var54 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var66);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var67);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var68);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var70 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var75);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var79);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var80 + "' != '" + "function (): {895662728}"+ "'", var80.equals("function (): {895662728}"));
// 
//   }

  public void test430() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test430"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    var0.pushEdgeAnnotations();
    java.lang.Iterable var3 = var0.getDirectedGraphNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var6 = var5.recordExpose();
    boolean var8 = var5.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.InputId var15 = com.google.javascript.jscomp.NodeUtil.getInputId(var12);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    var12.setJSType(var16);
    com.google.javascript.rhino.JSDocInfo var18 = var5.build(var12);
    java.lang.String var19 = var18.getFileOverview();
    java.util.Set var20 = var18.getModifies();
    java.util.List var21 = var18.getImplementedInterfaces();
    com.google.javascript.jscomp.graph.GraphNode var22 = var0.getNode((java.lang.Object)var18);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.Node var29 = var26.removeFirstChild();
    var29.setQuotedString();
    boolean var31 = var0.hasNode((java.lang.Object)var29);
    java.util.List var32 = var0.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var33 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var34 = null;
    var33.setStripTypes(var34);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var36 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var37 = var36.getDirectedGraphNodes();
    java.util.List var38 = var36.getEdges();
    var33.setManageClosureDependencies(var38);
    boolean var40 = var33.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var41 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var42 = null;
    var41.setStripTypes(var42);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var44 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var45 = var44.getDirectedGraphNodes();
    java.util.List var46 = var44.getEdges();
    var41.setManageClosureDependencies(var46);
    var33.setManageClosureDependencies(var46);
    var33.setRemoveClosureAsserts(true);
    boolean var51 = var33.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var52 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var53 = null;
    var52.setBrokenClosureRequiresLevel(var53);
    var52.setLocale("");
    com.google.javascript.rhino.JSDocInfoBuilder var58 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var59 = var58.recordExpose();
    boolean var60 = var58.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var62 = null;
    boolean var63 = var58.recordParameter("Unversioned directory", var62);
    com.google.javascript.rhino.JSTypeExpression var64 = null;
    boolean var66 = var58.recordThrowDescription(var64, "");
    com.google.javascript.rhino.JSDocInfoBuilder var68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var69 = var68.recordExpose();
    boolean var71 = var68.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var73 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var75 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var76 = var75.getNext();
    com.google.javascript.rhino.Node var77 = var73.srcrefTree(var75);
    com.google.javascript.rhino.InputId var78 = com.google.javascript.jscomp.NodeUtil.getInputId(var75);
    com.google.javascript.rhino.jstype.JSType var79 = null;
    var75.setJSType(var79);
    com.google.javascript.rhino.JSDocInfo var81 = var68.build(var75);
    java.lang.String var82 = var81.getFileOverview();
    java.util.Set var83 = var81.getModifies();
    boolean var84 = var58.recordSuppressions(var83);
    var52.setAliasableStrings(var83);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var86 = var52.getLanguageIn();
    int var87 = var86.ordinal();
    var33.setLanguageOut(var86);
    com.google.javascript.jscomp.graph.GraphNode var89 = var0.getNode((java.lang.Object)var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);

  }

  public void test431() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test431"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var12 = null;
    var0.setSourceMapDetailLevel(var12);
    com.google.javascript.jscomp.CodingConvention var14 = var0.getCodingConvention();
    var0.setMarkNoSideEffectCalls(false);
    var0.setLooseTypes(true);
    com.google.javascript.jscomp.MessageBundle var19 = null;
    var0.setMessageBundle(var19);
    var0.setShadowVariables(false);
    var0.setTweakToDoubleLiteral("function (): {944163309}", (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test432() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test432"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var3 = var2.isGetterDef();
    boolean var4 = var2.isNE();
    boolean var5 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var2);
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    java.lang.Iterable var8 = var7.siblings();
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    boolean var15 = var12.isVarArgs();
    boolean var16 = var12.isArrayLit();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    boolean var34 = var12.hasChild(var29);
    boolean var35 = var29.isNot();
    int var36 = var29.getChildCount();
    com.google.javascript.rhino.Node var39 = new com.google.javascript.rhino.Node(10, var2, var7, var29, 153, 10);
    boolean var40 = var7.isNew();
    boolean var41 = var7.isInstanceOf();
    com.google.javascript.rhino.Node var43 = var7.getAncestor(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test433() {}
//   public void test433() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test433"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var1 = null;
//     var0.setStripTypes(var1);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var4 = var3.getDirectedGraphNodes();
//     java.util.List var5 = var3.getEdges();
//     var0.setManageClosureDependencies(var5);
//     boolean var7 = var0.isExternExportsEnabled();
//     var0.setCheckCaja(false);
//     var0.resetWarningsGuard();
//     var0.setDevirtualizePrototypeMethods(false);
//     com.google.javascript.jscomp.CompilerOptions.Reach var13 = null;
//     var0.setInlineFunctions(var13);
// 
//   }

  public void test434() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test434"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Set var16 = var14.getModifies();
    java.util.List var17 = var14.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getType();
    boolean var19 = var14.containsDeclaration();
    com.google.javascript.rhino.JSDocInfo.Visibility var20 = null;
    var14.setVisibility(var20);
    com.google.javascript.rhino.Node var22 = var14.getAssociatedNode();
    java.lang.String var23 = var14.getMeaning();
    boolean var24 = var14.isInterface();
    boolean var25 = var14.isJavaDispatch();
    boolean var26 = var14.hasThisType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test435() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test435"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.Collection var15 = var14.getAuthors();
    com.google.common.collect.ImmutableList var16 = var14.getTemplateTypeNames();
    java.util.Set var17 = var14.getModifies();
    boolean var19 = var14.hasParameterType("CONTINUE");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test436() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test436"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.stringKey("function (): {1883749358}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test437() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test437"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    com.google.javascript.rhino.Node var4 = null;
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    boolean var11 = var8.isVarArgs();
    boolean var12 = var8.isArrayLit();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var15 = var14.isGetterDef();
    var14.putIntProp((-1), 10);
    var8.addChildrenToFront(var14);
    boolean var20 = var14.isNot();
    int var21 = var14.getSideEffectFlags();
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    var23.unregisterPropertyOnType("Unversioned directory", var25);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.jscomp.JSModule var29 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var30 = var29.getDependencies();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.block(var30);
    com.google.javascript.rhino.jstype.FunctionType var32 = var23.createFunctionTypeWithVarArgs(var27, var30);
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var35 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var34);
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var40 = var39.getNext();
    com.google.javascript.rhino.Node var41 = var37.srcrefTree(var39);
    boolean var42 = var39.isVarArgs();
    com.google.javascript.rhino.Node var44 = var39.getChildAtIndex(1);
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = var48.getNext();
    com.google.javascript.rhino.Node var50 = var46.srcrefTree(var48);
    com.google.javascript.rhino.JSDocInfo var51 = var48.getJSDocInfo();
    com.google.javascript.rhino.Node var52 = var39.copyInformationFrom(var48);
    java.lang.Object var54 = null;
    var39.putProp(0, var54);
    com.google.javascript.rhino.JSTypeExpression var57 = new com.google.javascript.rhino.JSTypeExpression(var39, "()");
    com.google.javascript.rhino.jstype.StaticScope var58 = null;
    com.google.javascript.rhino.ErrorReporter var59 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var59);
    com.google.javascript.rhino.jstype.JSType var62 = null;
    var60.unregisterPropertyOnType("Unversioned directory", var62);
    com.google.javascript.rhino.jstype.JSType var64 = null;
    boolean var66 = var60.canPropertyBeDefined(var64, "BANG");
    com.google.javascript.rhino.jstype.JSType var67 = null;
    com.google.javascript.rhino.jstype.JSType[] var68 = new com.google.javascript.rhino.jstype.JSType[] { var67};
    com.google.javascript.rhino.Node var69 = var60.createParameters(var68);
    com.google.javascript.rhino.jstype.JSType var70 = var57.evaluate(var58, var60);
    boolean var71 = var35.addVarArgs(var70);
    boolean var72 = var70.isEnumElementType();
    boolean var73 = var70.isNullable();
    boolean var74 = var70.matchesNumberContext();
    boolean var75 = var32.differsFrom(var70);
    var14.setJSType((com.google.javascript.rhino.jstype.JSType)var32);
    java.lang.String var77 = var0.extractClassNameIfRequire(var4, var14);
    boolean var79 = var0.isConstant("(STRING hi 0 [length: 2]\n)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);

  }

  public void test438() {}
//   public void test438() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test438"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
//     com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
//     com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var8 = null;
//     var7.setStripTypes(var8);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var11 = var10.getDirectedGraphNodes();
//     java.util.List var12 = var10.getEdges();
//     var7.setManageClosureDependencies(var12);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.script(var12);
//     var6.traverseRoots(var12);
//     boolean var16 = var6.hasScope();
//     com.google.javascript.rhino.Node var17 = var6.getEnclosingFunction();
//     com.google.javascript.jscomp.Compiler var18 = var6.getCompiler();
//     com.google.javascript.jscomp.CompilerOptions var19 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var20 = null;
//     var19.setStripTypes(var20);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var22 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var23 = var22.getDirectedGraphNodes();
//     java.util.List var24 = var22.getEdges();
//     var19.setManageClosureDependencies(var24);
//     var19.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     var19.setColorizeErrorOutput(true);
//     var19.setCoalesceVariableNames(false);
//     com.google.javascript.rhino.JSDocInfoBuilder var34 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var35 = var34.recordExpose();
//     boolean var37 = var34.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var42 = var41.getNext();
//     com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
//     com.google.javascript.rhino.InputId var44 = com.google.javascript.jscomp.NodeUtil.getInputId(var41);
//     com.google.javascript.rhino.jstype.JSType var45 = null;
//     var41.setJSType(var45);
//     com.google.javascript.rhino.JSDocInfo var47 = var34.build(var41);
//     java.util.List var48 = var47.getThrownTypes();
//     com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var53 = var52.getNext();
//     com.google.javascript.rhino.Node var54 = var50.srcrefTree(var52);
//     boolean var55 = var52.isOr();
//     var47.setAssociatedNode(var52);
//     java.util.Set var57 = var47.getParameterNames();
//     java.util.Collection var58 = var47.getAuthors();
//     java.lang.String var59 = var47.getVersion();
//     java.util.List var60 = var47.getThrownTypes();
//     var19.setSourceMapLocationMappings(var60);
//     java.util.List var62 = null;
//     com.google.javascript.jscomp.CompilerOptions var63 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var64 = null;
//     var63.setStripTypes(var64);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var66 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var67 = var66.getDirectedGraphNodes();
//     java.util.List var68 = var66.getEdges();
//     var63.setManageClosureDependencies(var68);
//     var63.setDevirtualizePrototypeMethods(true);
//     var63.setInlineLocalVariables(false);
//     var63.setFoldConstants(false);
//     var63.setAssumeStrictThis(false);
//     var63.setShadowVariables(false);
//     var18.<com.google.javascript.jscomp.SourceFile>initModules(var60, var62, var63);
// 
//   }

  public void test439() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test439"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setRemoveUnusedPrototypeProperties(true);
    var0.setSyntheticBlockEndMarker("RETURN");
    com.google.javascript.jscomp.VariableRenamingPolicy var14 = null;
    com.google.javascript.jscomp.PropertyRenamingPolicy var16 = com.google.javascript.jscomp.PropertyRenamingPolicy.valueOf("OFF");
    var0.setRenamingPolicy(var14, var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test440() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test440"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setRemoveUnusedPrototypeProperties(true);
    var0.setRemoveClosureAsserts(false);
    com.google.javascript.rhino.JSDocInfoBuilder var15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var16 = var15.recordExpose();
    boolean var18 = var15.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.InputId var25 = com.google.javascript.jscomp.NodeUtil.getInputId(var22);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var22.setJSType(var26);
    com.google.javascript.rhino.JSDocInfo var28 = var15.build(var22);
    java.util.Collection var29 = var28.getAuthors();
    com.google.common.collect.ImmutableList var30 = var28.getTemplateTypeNames();
    var0.setSourceMapLocationMappings((java.util.List)var30);
    com.google.javascript.jscomp.SourceMap.Format var32 = null;
    var0.setSourceMapFormat(var32);
    var0.setDefineToNumberLiteral("module$", 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test441() {}
//   public void test441() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test441"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var2 = var0.isConstantKey("2014/12/24 11:10");
//     java.util.Collection var3 = var0.getAssertionFunctions();
//     boolean var5 = var0.isConstant("Unversioned directory");
//     com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var10 = var9.getNext();
//     com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
//     boolean var12 = var9.isVarArgs();
//     boolean var13 = var9.isOptionalArg();
//     java.lang.String var17 = var9.toString(false, false, true);
//     java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
//     java.lang.String var19 = var0.getDelegateSuperclassName();
//     com.google.javascript.rhino.ErrorReporter var20 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
//     com.google.javascript.rhino.jstype.JSType var23 = null;
//     var21.unregisterPropertyOnType("Unversioned directory", var23);
//     var21.identifyNonNullableName("2014/12/24 11:10");
//     com.google.javascript.rhino.jstype.StaticScope var27 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var29 = var28.getDirectedGraphNodes();
//     java.util.List var30 = var28.getEdges();
//     com.google.javascript.jscomp.CompilerOptions var31 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var32 = null;
//     var31.setStripTypes(var32);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var35 = var34.getDirectedGraphNodes();
//     java.util.List var36 = var34.getEdges();
//     var31.setManageClosureDependencies(var36);
//     boolean var38 = var31.isExternExportsEnabled();
//     var31.setCheckCaja(false);
//     var31.setGroupVariableDeclarations(true);
//     java.util.Map var43 = var31.getDefineReplacements();
//     var0.defineDelegateProxyPrototypeProperties(var21, var27, var30, var43);
//     com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var49 = var48.getNext();
//     com.google.javascript.rhino.Node var50 = var46.srcrefTree(var48);
//     boolean var51 = var48.isVarArgs();
//     boolean var52 = var48.isArrayLit();
//     com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.labelName("hi!");
//     boolean var55 = var54.isGetterDef();
//     var54.putIntProp((-1), 10);
//     var48.addChildrenToFront(var54);
//     int var60 = var54.getLength();
//     com.google.javascript.rhino.Node var62 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var64 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var65 = var64.getNext();
//     com.google.javascript.rhino.Node var66 = var62.srcrefTree(var64);
//     com.google.javascript.rhino.Node var67 = var64.removeFirstChild();
//     com.google.javascript.rhino.Node var68 = var54.useSourceInfoFromForTree(var64);
//     boolean var69 = var54.isDebugger();
//     var54.setType(0);
//     java.lang.String var72 = var0.getSingletonGetterClassName(var54);
// 
//   }

  public void test442() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test442"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isArrayLit();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var10 = var9.isGetterDef();
    var9.putIntProp((-1), 10);
    var3.addChildrenToFront(var9);
    boolean var15 = var9.isNot();
    int var16 = var9.getSideEffectFlags();
    boolean var17 = var9.isAdd();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.JSDocInfo var18 = com.google.javascript.jscomp.NodeUtil.getFunctionJSDocInfo(var9);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test443() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test443"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setInlineLocalVariables(false);
    var0.setFoldConstants(false);
    var0.setAssumeStrictThis(false);
    boolean var15 = var0.assumeStrictThis();
    com.google.javascript.jscomp.SourceMap.Format var16 = null;
    var0.setSourceMapFormat(var16);
    var0.setOutputJsStringUsage(false);
    var0.setOptimizeReturns(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test444() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test444"); }


    com.google.javascript.jscomp.SourceFile var5 = com.google.javascript.jscomp.SourceFile.fromCode("2014/12/24 11:10", "null(null)", "STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.Region var7 = var5.getRegion(0);
    java.io.Reader var8 = var5.getCodeReader();
    com.google.javascript.jscomp.SourceFile var9 = com.google.javascript.jscomp.SourceFile.fromReader("BANG 0", var8);
    com.google.javascript.jscomp.SourceFile var10 = com.google.javascript.jscomp.SourceFile.fromReader("goog.abstractMethod: null(null)", var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test445() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test445"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setManageClosureDependencies(true);
    boolean var10 = var0.shouldColorizeErrorOutput();
    com.google.common.collect.Multimap var11 = null;
    var0.setCustomPasses(var11);
    var0.setPrettyPrint(false);
    com.google.javascript.jscomp.VariableRenamingPolicy var15 = null;
    var0.setVariableRenaming(var15);
    var0.setDevirtualizePrototypeMethods(false);
    var0.setAliasableGlobals("null(null)");
    var0.setGroupVariableDeclarations(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test446() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test446"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var21.unregisterPropertyOnType("Unversioned directory", var23);
    var21.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.jstype.StaticScope var27 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var29 = var28.getDirectedGraphNodes();
    java.util.List var30 = var28.getEdges();
    com.google.javascript.jscomp.CompilerOptions var31 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var32 = null;
    var31.setStripTypes(var32);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var35 = var34.getDirectedGraphNodes();
    java.util.List var36 = var34.getEdges();
    var31.setManageClosureDependencies(var36);
    boolean var38 = var31.isExternExportsEnabled();
    var31.setCheckCaja(false);
    var31.setGroupVariableDeclarations(true);
    java.util.Map var43 = var31.getDefineReplacements();
    var0.defineDelegateProxyPrototypeProperties(var21, var27, var30, var43);
    com.google.javascript.rhino.ErrorReporter var45 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
    com.google.javascript.rhino.jstype.JSType var48 = null;
    var46.unregisterPropertyOnType("Unversioned directory", var48);
    var46.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var52 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var0, var46);
    com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.IR.empty();
    com.google.javascript.rhino.Node var54 = var53.cloneTree();
    boolean var55 = var53.isVar();
    boolean var56 = var53.isAssignAdd();
    com.google.javascript.jscomp.type.FlowScope var57 = null;
    com.google.javascript.jscomp.type.FlowScope var59 = var52.getPreciserScopeKnowingConditionOutcome(var53, var57, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var53.setSideEffectFlags(306);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);

  }

  public void test447() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test447"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getType();
    int var19 = var14.getParameterCount();
    com.google.javascript.rhino.Node var20 = var14.getAssociatedNode();
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = var24.getNext();
    com.google.javascript.rhino.Node var26 = var22.srcrefTree(var24);
    com.google.javascript.rhino.InputId var27 = com.google.javascript.jscomp.NodeUtil.getInputId(var24);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var24.setJSType(var28);
    boolean var30 = var24.isBlock();
    com.google.javascript.rhino.Node var31 = var24.getNext();
    boolean var32 = var24.isFromExterns();
    var14.setAssociatedNode(var24);
    com.google.javascript.rhino.JSTypeExpression var34 = var14.getTypedefType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);

  }

  public void test448() {}
//   public void test448() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test448"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
//     com.google.javascript.rhino.jstype.FunctionBuilder var3 = var1.setIsConstructor(true);
//     com.google.javascript.rhino.jstype.FunctionBuilder var4 = var3.forConstructor();
//     com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var9 = var8.getNext();
//     com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
//     boolean var11 = var8.isVarArgs();
//     com.google.javascript.rhino.Node var13 = var8.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var18 = var17.getNext();
//     com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
//     com.google.javascript.rhino.JSDocInfo var20 = var17.getJSDocInfo();
//     com.google.javascript.rhino.Node var21 = var8.copyInformationFrom(var17);
//     com.google.javascript.jscomp.ClosureCodingConvention var22 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var23 = null;
//     com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var28 = var27.getNext();
//     com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
//     boolean var30 = var27.isOr();
//     java.lang.String var31 = var22.extractClassNameIfRequire(var23, var27);
//     com.google.javascript.rhino.ErrorReporter var32 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var32);
//     com.google.javascript.rhino.jstype.JSType var35 = null;
//     var33.unregisterPropertyOnType("Unversioned directory", var35);
//     com.google.javascript.rhino.jstype.JSType var37 = null;
//     com.google.javascript.jscomp.JSModule var39 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var40 = var39.getDependencies();
//     com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.block(var40);
//     com.google.javascript.rhino.jstype.FunctionType var42 = var33.createFunctionTypeWithVarArgs(var37, var40);
//     com.google.javascript.rhino.ErrorReporter var43 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var43);
//     com.google.javascript.rhino.jstype.JSType var46 = null;
//     var44.unregisterPropertyOnType("Unversioned directory", var46);
//     com.google.javascript.rhino.jstype.JSType var48 = null;
//     com.google.javascript.jscomp.JSModule var50 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var51 = var50.getDependencies();
//     com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.block(var51);
//     com.google.javascript.rhino.jstype.FunctionType var53 = var44.createFunctionTypeWithVarArgs(var48, var51);
//     boolean var54 = var53.hasAnyTemplateInternal();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var55 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var56 = var55.getDirectedGraphNodes();
//     java.lang.Iterable var57 = var55.getDirectedGraphNodes();
//     java.util.List var58 = var55.getGraphvizNodes();
//     com.google.javascript.jscomp.CompilerOptions var59 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var60 = null;
//     var59.setStripTypes(var60);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var62 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var63 = var62.getDirectedGraphNodes();
//     java.util.List var64 = var62.getEdges();
//     var59.setManageClosureDependencies(var64);
//     boolean var66 = var59.isExternExportsEnabled();
//     var59.setCheckCaja(false);
//     java.util.Set var69 = null;
//     var59.setReplaceStringsReservedStrings(var69);
//     var59.setAliasAllStrings(true);
//     var59.setAliasableGlobals("STRING hi 0 [length: 2]\n");
//     com.google.javascript.jscomp.CompilerOptions var75 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var76 = null;
//     var75.setStripTypes(var76);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var78 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var79 = var78.getDirectedGraphNodes();
//     java.util.List var80 = var78.getEdges();
//     var75.setManageClosureDependencies(var80);
//     boolean var82 = var75.isExternExportsEnabled();
//     var75.setCheckCaja(false);
//     var75.setGroupVariableDeclarations(true);
//     java.util.Map var87 = var75.getDefineReplacements();
//     var59.setPropertyInvalidationErrors(var87);
//     var22.defineDelegateProxyPrototypeProperties(var33, (com.google.javascript.rhino.jstype.StaticScope)var53, var58, var87);
//     boolean var90 = var53.canBeCalled();
//     boolean var91 = var53.isUnknownType();
//     com.google.javascript.rhino.jstype.ObjectType.Property var93 = var53.getSlot("hi!");
//     var8.setJSType((com.google.javascript.rhino.jstype.JSType)var53);
//     java.lang.Iterable var95 = var53.getOwnImplementedInterfaces();
//     com.google.javascript.rhino.jstype.FunctionBuilder var96 = var4.withReturnType((com.google.javascript.rhino.jstype.JSType)var53);
//     com.google.javascript.rhino.jstype.Visitor var97 = null;
//     java.lang.Object var98 = var53.visit(var97);
// 
//   }

  public void test449() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test449"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.hasAnyTemplateInternal();
    boolean var70 = var31.isConstructor();
    com.google.javascript.rhino.JSDocInfoBuilder var72 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var73 = var72.recordExpose();
    boolean var75 = var72.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var77 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var79 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var80 = var79.getNext();
    com.google.javascript.rhino.Node var81 = var77.srcrefTree(var79);
    com.google.javascript.rhino.InputId var82 = com.google.javascript.jscomp.NodeUtil.getInputId(var79);
    com.google.javascript.rhino.jstype.JSType var83 = null;
    var79.setJSType(var83);
    com.google.javascript.rhino.JSDocInfo var85 = var72.build(var79);
    java.lang.String var86 = var85.getFileOverview();
    java.util.Set var87 = var85.getModifies();
    java.util.List var88 = var85.getImplementedInterfaces();
    var31.setImplementedInterfaces(var88);
    com.google.javascript.jscomp.ComposeWarningsGuard var90 = new com.google.javascript.jscomp.ComposeWarningsGuard(var88);
    com.google.javascript.jscomp.deps.SortedDependencies var91 = new com.google.javascript.jscomp.deps.SortedDependencies(var88);
    java.util.List var92 = var91.getSortedList();
    java.util.List var93 = var91.getSortedList();
    java.util.List var94 = var91.getInputsWithoutProvides();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test450() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test450"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
    com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
    com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var8 = null;
    var7.setStripTypes(var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var11 = var10.getDirectedGraphNodes();
    java.util.List var12 = var10.getEdges();
    var7.setManageClosureDependencies(var12);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.script(var12);
    var6.traverseRoots(var12);
    com.google.javascript.rhino.Node var16 = var6.getEnclosingFunction();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.continueNode();
    com.google.javascript.jscomp.DiagnosticType var20 = com.google.javascript.jscomp.DiagnosticType.disabled("(LABEL_NAME hi!)", "()");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = var25.getNext();
    boolean var27 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var25);
    int var28 = var25.getLength();
    com.google.javascript.rhino.Node var29 = null;
    boolean var30 = var25.hasChild(var29);
    com.google.javascript.rhino.Node var31 = var23.useSourceInfoIfMissingFromForTree(var25);
    var25.setSourceFileForTesting("Unversioned directory");
    boolean var34 = var25.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var35 = var25.getStaticSourceFile();
    com.google.javascript.jscomp.DiagnosticType var38 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
    com.google.javascript.jscomp.MessageFormatter var39 = null;
    java.util.logging.Logger var40 = null;
    com.google.javascript.jscomp.LoggerErrorManager var41 = new com.google.javascript.jscomp.LoggerErrorManager(var39, var40);
    com.google.javascript.jscomp.Compiler var42 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var41);
    com.google.javascript.jscomp.Scope var43 = var42.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var44 = null;
    com.google.javascript.jscomp.NodeTraversal var45 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var42, var44);
    com.google.javascript.jscomp.Scope var46 = var45.getScope();
    com.google.javascript.rhino.Node var47 = null;
    com.google.javascript.jscomp.DiagnosticType var50 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var52 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var53 = com.google.javascript.jscomp.JSError.make(var50, var52);
    com.google.javascript.jscomp.DiagnosticType var54 = var53.getType();
    java.lang.String[] var56 = new java.lang.String[] { "LABEL_NAME hi!"};
    com.google.javascript.jscomp.JSError var57 = var45.makeError(var47, var54, var56);
    com.google.javascript.jscomp.JSError var58 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var25, var38, var56);
    var6.report(var17, var20, var56);
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var63 = var61.getBooleanProp((-1));
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.Node var70 = var67.removeFirstChild();
    com.google.javascript.rhino.Node var71 = var61.useSourceInfoFromForTree(var67);
    boolean var72 = var67.isDec();
    java.lang.String var73 = var17.checkTreeEquals(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "Node tree inequality:\nTree1:\nCONTINUE\n\n\nTree2:\nBANG 0\n\n\nSubtree1: CONTINUE\n\n\nSubtree2: BANG 0\n"+ "'", var73.equals("Node tree inequality:\nTree1:\nCONTINUE\n\n\nTree2:\nBANG 0\n\n\nSubtree1: CONTINUE\n\n\nSubtree2: BANG 0\n"));

  }

  public void test451() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test451"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setAliasExternals(false);
    var0.setExportTestFunctions(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test452() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test452"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    boolean var7 = var1.canPropertyBeDefined(var5, "BANG");
    java.lang.Iterable var9 = var1.getEachReferenceTypeWithProperty("Unversioned directory");
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    boolean var21 = var20.hasAnyTemplateInternal();
    java.lang.Iterable var22 = var20.getAllExtendedInterfaces();
    boolean var23 = var20.isEmptyType();
    java.util.Set var24 = var20.getOwnPropertyNames();
    com.google.javascript.rhino.jstype.JSType var25 = var1.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType)var20);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var26 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    var28.unregisterPropertyOnType("Unversioned directory", var30);
    var28.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    boolean var42 = var38.isFor();
    boolean var43 = var38.isNumber();
    com.google.javascript.rhino.Node var44 = var38.getNext();
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = var48.getNext();
    com.google.javascript.rhino.Node var50 = var46.srcrefTree(var48);
    boolean var51 = var48.isVarArgs();
    com.google.javascript.rhino.Node var53 = var48.getChildAtIndex(1);
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = var57.getNext();
    com.google.javascript.rhino.Node var59 = var55.srcrefTree(var57);
    com.google.javascript.rhino.JSDocInfo var60 = var57.getJSDocInfo();
    com.google.javascript.rhino.Node var61 = var48.copyInformationFrom(var57);
    java.lang.Object var63 = null;
    var48.putProp(0, var63);
    com.google.javascript.rhino.JSTypeExpression var66 = new com.google.javascript.rhino.JSTypeExpression(var48, "()");
    com.google.javascript.rhino.jstype.StaticScope var67 = null;
    com.google.javascript.rhino.ErrorReporter var68 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var69 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var68);
    com.google.javascript.rhino.jstype.JSType var71 = null;
    var69.unregisterPropertyOnType("Unversioned directory", var71);
    com.google.javascript.rhino.jstype.JSType var73 = null;
    boolean var75 = var69.canPropertyBeDefined(var73, "BANG");
    com.google.javascript.rhino.jstype.JSType var76 = null;
    com.google.javascript.rhino.jstype.JSType[] var77 = new com.google.javascript.rhino.jstype.JSType[] { var76};
    com.google.javascript.rhino.Node var78 = var69.createParameters(var77);
    com.google.javascript.rhino.jstype.JSType var79 = var66.evaluate(var67, var69);
    com.google.javascript.rhino.jstype.JSType var80 = var79.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var81 = var80.dereference();
    boolean var82 = var80.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var83 = var28.createEnumType("STRING hi 0 [length: 2]\n", var38, var80);
    com.google.javascript.rhino.JSDocInfo var84 = var83.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var85 = var83.getElementsType();
    boolean var86 = var85.isNominalType();
    java.lang.String var87 = var85.toString();
    java.lang.String var88 = var85.getReferenceName();
    com.google.javascript.rhino.jstype.JSType var89 = var85.autoboxesTo();
    boolean var91 = var85.hasProperty("function (): {1509650176}");
    boolean var92 = var26.addVarArgs((com.google.javascript.rhino.jstype.JSType)var85);
    com.google.javascript.rhino.Node var93 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var94 = var26.newOptionalParameterFromNode(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var87.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var88.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test453() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test453"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var19 = var14.hasParameter("BANG 0\n    STRING hi 0 [length: 2]\n");
    var14.setLicense("goog.abstractMethod");
    boolean var22 = var14.isConstant();
    var14.setLicense("BANG 0\n    STRING hi 0 [length: 2]\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test454() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test454"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.isUnknownType();
    com.google.javascript.rhino.jstype.ObjectType.Property var71 = var31.getSlot("hi!");
    java.lang.String var72 = var31.getNormalizedReferenceName();
    com.google.javascript.rhino.Node var73 = var31.getSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);

  }

  public void test455() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test455"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var2 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = var6.getNext();
    com.google.javascript.rhino.Node var8 = var4.srcrefTree(var6);
    boolean var9 = var6.isVarArgs();
    com.google.javascript.rhino.Node var11 = var6.getChildAtIndex(1);
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    com.google.javascript.rhino.JSDocInfo var18 = var15.getJSDocInfo();
    com.google.javascript.rhino.Node var19 = var6.copyInformationFrom(var15);
    java.lang.Object var21 = null;
    var6.putProp(0, var21);
    com.google.javascript.rhino.JSTypeExpression var24 = new com.google.javascript.rhino.JSTypeExpression(var6, "()");
    com.google.javascript.rhino.jstype.StaticScope var25 = null;
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
    com.google.javascript.rhino.jstype.JSType var29 = null;
    var27.unregisterPropertyOnType("Unversioned directory", var29);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    boolean var33 = var27.canPropertyBeDefined(var31, "BANG");
    com.google.javascript.rhino.jstype.JSType var34 = null;
    com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var34};
    com.google.javascript.rhino.Node var36 = var27.createParameters(var35);
    com.google.javascript.rhino.jstype.JSType var37 = var24.evaluate(var25, var27);
    boolean var38 = var2.addVarArgs(var37);
    boolean var39 = var37.isEnumElementType();
    boolean var40 = var37.isNumber();
    com.google.javascript.rhino.Node var42 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = var44.getNext();
    com.google.javascript.rhino.Node var46 = var42.srcrefTree(var44);
    boolean var47 = var44.isVarArgs();
    com.google.javascript.rhino.Node var49 = var44.getChildAtIndex(1);
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var54 = var53.getNext();
    com.google.javascript.rhino.Node var55 = var51.srcrefTree(var53);
    com.google.javascript.rhino.JSDocInfo var56 = var53.getJSDocInfo();
    com.google.javascript.rhino.Node var57 = var44.copyInformationFrom(var53);
    java.lang.Object var59 = null;
    var44.putProp(0, var59);
    com.google.javascript.rhino.JSTypeExpression var62 = new com.google.javascript.rhino.JSTypeExpression(var44, "()");
    com.google.javascript.rhino.jstype.StaticScope var63 = null;
    com.google.javascript.rhino.ErrorReporter var64 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var64);
    com.google.javascript.rhino.jstype.JSType var67 = null;
    var65.unregisterPropertyOnType("Unversioned directory", var67);
    com.google.javascript.rhino.jstype.JSType var69 = null;
    boolean var71 = var65.canPropertyBeDefined(var69, "BANG");
    com.google.javascript.rhino.jstype.JSType var72 = null;
    com.google.javascript.rhino.jstype.JSType[] var73 = new com.google.javascript.rhino.jstype.JSType[] { var72};
    com.google.javascript.rhino.Node var74 = var65.createParameters(var73);
    com.google.javascript.rhino.jstype.JSType var75 = var62.evaluate(var63, var65);
    com.google.javascript.rhino.jstype.JSType var76 = var75.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.JSType.TypePair var77 = var37.getTypesUnderShallowEquality(var76);
    boolean var78 = var76.isNumber();
    boolean var79 = var76.isBooleanObjectType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);

  }

  public void test456() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test456"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.List var15 = var14.getThrownTypes();
    java.lang.String var16 = var14.getDeprecationReason();
    java.lang.String var17 = var14.getReturnDescription();
    boolean var18 = var14.isNoSideEffects();
    com.google.javascript.rhino.JSDocInfo.Visibility var19 = var14.getVisibility();
    com.google.javascript.rhino.JSTypeExpression var20 = var14.getTypedefType();
    boolean var22 = var14.hasParameter("BANG");
    com.google.common.collect.ImmutableList var23 = var14.getTemplateTypeNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "2014/12/24 11:10"+ "'", var16.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test457() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test457"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    com.google.javascript.jscomp.JSModule var9 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var10 = var9.getDependencies();
    var9.removeAll();
    com.google.javascript.jscomp.JSModule var13 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    var13.removeAll();
    var9.addDependency(var13);
    java.util.List var16 = var9.getInputs();
    var0.setReplaceStringsConfiguration("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n", var16);
    var0.setInlineLocalVariables(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test458() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test458"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var4 = null;
    boolean var6 = var1.recordThrowDescription(var4, "()");
    boolean var8 = var1.recordFileOverview("BANG 0\n    STRING hi 0 [length: 2]\n");
    boolean var9 = var1.recordInterface();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test459() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test459"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    java.lang.String var61 = var58.getReferenceName();
    boolean var62 = var58.isObject();
    boolean var64 = var58.hasProperty("function (): {2074444175}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var61.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);

  }

  public void test460() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test460"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var2 = var1.getNext();
    boolean var3 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var1);
    int var4 = var1.getLength();
    boolean var5 = var1.isInstanceOf();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.returnNode();
    var6.setSourceFileForTesting("null(null)");
    com.google.javascript.rhino.Node var9 = var6.cloneNode();
    var1.addChildToFront(var6);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.JSType var14 = null;
    var12.unregisterPropertyOnType("Unversioned directory", var14);
    var12.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isVarArgs();
    boolean var26 = var22.isFor();
    boolean var27 = var22.isNumber();
    com.google.javascript.rhino.Node var28 = var22.getNext();
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    boolean var35 = var32.isVarArgs();
    com.google.javascript.rhino.Node var37 = var32.getChildAtIndex(1);
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
    com.google.javascript.rhino.JSDocInfo var44 = var41.getJSDocInfo();
    com.google.javascript.rhino.Node var45 = var32.copyInformationFrom(var41);
    java.lang.Object var47 = null;
    var32.putProp(0, var47);
    com.google.javascript.rhino.JSTypeExpression var50 = new com.google.javascript.rhino.JSTypeExpression(var32, "()");
    com.google.javascript.rhino.jstype.StaticScope var51 = null;
    com.google.javascript.rhino.ErrorReporter var52 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var52);
    com.google.javascript.rhino.jstype.JSType var55 = null;
    var53.unregisterPropertyOnType("Unversioned directory", var55);
    com.google.javascript.rhino.jstype.JSType var57 = null;
    boolean var59 = var53.canPropertyBeDefined(var57, "BANG");
    com.google.javascript.rhino.jstype.JSType var60 = null;
    com.google.javascript.rhino.jstype.JSType[] var61 = new com.google.javascript.rhino.jstype.JSType[] { var60};
    com.google.javascript.rhino.Node var62 = var53.createParameters(var61);
    com.google.javascript.rhino.jstype.JSType var63 = var50.evaluate(var51, var53);
    com.google.javascript.rhino.jstype.JSType var64 = var63.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var65 = var64.dereference();
    boolean var66 = var64.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var67 = var12.createEnumType("STRING hi 0 [length: 2]\n", var22, var64);
    boolean var68 = var67.matchesStringContext();
    com.google.javascript.rhino.ErrorReporter var69 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var69);
    com.google.javascript.rhino.jstype.JSType var72 = null;
    var70.unregisterPropertyOnType("Unversioned directory", var72);
    com.google.javascript.rhino.jstype.JSType var74 = null;
    com.google.javascript.jscomp.JSModule var76 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var77 = var76.getDependencies();
    com.google.javascript.rhino.Node var78 = com.google.javascript.rhino.IR.block(var77);
    com.google.javascript.rhino.jstype.FunctionType var79 = var70.createFunctionTypeWithVarArgs(var74, var77);
    boolean var80 = var79.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType.TypePair var81 = var67.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType)var79);
    com.google.javascript.rhino.Node var82 = var67.getSource();
    boolean var83 = var6.hasChild(var82);
    boolean var84 = var6.isThrow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);

  }

  public void test461() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test461"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    var24.setCharno(100);
    com.google.javascript.rhino.Node var35 = var24.getLastSibling();
    boolean var36 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test462() {}
//   public void test462() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test462"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var2 = var0.isConstantKey("2014/12/24 11:10");
//     java.util.Collection var3 = var0.getAssertionFunctions();
//     boolean var5 = var0.isConstant("Unversioned directory");
//     com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var10 = var9.getNext();
//     com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
//     boolean var12 = var9.isVarArgs();
//     boolean var13 = var9.isOptionalArg();
//     java.lang.String var17 = var9.toString(false, false, true);
//     java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
//     java.lang.String var19 = var0.getDelegateSuperclassName();
//     com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var22 = var21.getNext();
//     int var23 = var21.getSourceOffset();
//     com.google.javascript.rhino.Node var24 = var21.cloneNode();
//     com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var27 = var26.getNext();
//     int var28 = var26.getSourceOffset();
//     com.google.javascript.rhino.Node var29 = var26.cloneNode();
//     var24.addChildrenToFront(var29);
//     com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
//     java.util.Collection var33 = var0.getIndirectlyDeclaredProperties();
//     java.lang.String var34 = var0.getGlobalObject();
//     com.google.javascript.rhino.Node var35 = null;
//     boolean var36 = var0.isPropertyTestFunction(var35);
// 
//   }

  public void test463() {}
//   public void test463() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test463"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getDependencies();
//     com.google.javascript.jscomp.SourceAst var3 = null;
//     com.google.javascript.rhino.InputId var4 = null;
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3, var4, true);
//     com.google.javascript.jscomp.JSModule var7 = var6.getModule();
//     var1.add(var6);
//     com.google.javascript.jscomp.SourceFile var10 = com.google.javascript.jscomp.SourceFile.fromFile("()");
//     var1.addFirst(var10);
//     java.util.Set var12 = var1.getAllDependencies();
//     var1.removeAll();
//     com.google.javascript.jscomp.SourceAst var14 = null;
//     com.google.javascript.rhino.InputId var15 = null;
//     com.google.javascript.jscomp.CompilerInput var17 = new com.google.javascript.jscomp.CompilerInput(var14, var15, true);
//     com.google.javascript.jscomp.CompilerInput var20 = new com.google.javascript.jscomp.CompilerInput(var14, "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", false);
//     var1.addFirst(var20);
//     com.google.javascript.jscomp.SourceAst var22 = null;
//     com.google.javascript.rhino.InputId var23 = null;
//     com.google.javascript.jscomp.CompilerInput var25 = new com.google.javascript.jscomp.CompilerInput(var22, var23, true);
//     com.google.javascript.jscomp.SourceAst var26 = var25.getAst();
//     com.google.javascript.jscomp.JSModule var27 = null;
//     var25.setModule(var27);
//     var1.add(var25);
//     var25.removeRequire("");
// 
//   }

  public void test464() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test464"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var2 = var0.hasNode((java.lang.Object)1);
    com.google.javascript.rhino.JSDocInfoBuilder var4 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var5 = var4.recordExpose();
    boolean var7 = var4.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    com.google.javascript.rhino.InputId var14 = com.google.javascript.jscomp.NodeUtil.getInputId(var11);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    var11.setJSType(var15);
    com.google.javascript.rhino.JSDocInfo var17 = var4.build(var11);
    java.lang.String var18 = var17.getFileOverview();
    java.util.Set var19 = var17.getModifies();
    java.util.List var20 = var17.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var21 = var17.getType();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var22 = var0.createDirectedGraphNode((java.lang.Object)var17);
    java.lang.Object var23 = null;
    com.google.javascript.jscomp.graph.GraphNode var24 = var0.getNode(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test465() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test465"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.JSTypeNative var1 = com.google.javascript.rhino.jstype.JSTypeNative.valueOf("module$ERROR");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test466() {}
//   public void test466() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test466"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var3 = var1.isConstantKey("2014/12/24 11:10");
//     java.util.Collection var4 = var1.getAssertionFunctions();
//     boolean var6 = var1.isConstant("Unversioned directory");
//     com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var11 = var10.getNext();
//     com.google.javascript.rhino.Node var12 = var8.srcrefTree(var10);
//     boolean var13 = var10.isVarArgs();
//     boolean var14 = var10.isOptionalArg();
//     java.lang.String var18 = var10.toString(false, false, true);
//     java.util.List var19 = var1.identifyTypeDeclarationCall(var10);
//     java.lang.String var20 = var1.getDelegateSuperclassName();
//     com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var23 = var22.getNext();
//     int var24 = var22.getSourceOffset();
//     com.google.javascript.rhino.Node var25 = var22.cloneNode();
//     com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var28 = var27.getNext();
//     int var29 = var27.getSourceOffset();
//     com.google.javascript.rhino.Node var30 = var27.cloneNode();
//     var25.addChildrenToFront(var30);
//     com.google.javascript.jscomp.CodingConvention.Bind var33 = var1.describeFunctionBind(var25, true);
//     int var34 = var25.getChildCount();
//     com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.labelName("hi!");
//     boolean var37 = var36.isGetterDef();
//     java.lang.String var41 = var36.toString(true, false, false);
//     com.google.javascript.rhino.JSTypeExpression var43 = new com.google.javascript.rhino.JSTypeExpression(var36, "module$BANG 0 [source_file: Unversioned directory]\n");
//     com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var48 = var47.getNext();
//     com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
//     com.google.javascript.rhino.Node var50 = var47.removeFirstChild();
//     var50.setQuotedString();
//     com.google.javascript.rhino.Node var52 = var50.removeChildren();
//     boolean var53 = var50.isCatch();
//     com.google.javascript.jscomp.ClosureCodingConvention var54 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var59 = var58.getNext();
//     boolean var60 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var58);
//     int var61 = var58.getLength();
//     com.google.javascript.rhino.Node var62 = null;
//     boolean var63 = var58.hasChild(var62);
//     com.google.javascript.rhino.Node var64 = var56.useSourceInfoIfMissingFromForTree(var58);
//     com.google.javascript.jscomp.CodingConvention.Bind var66 = var54.describeFunctionBind(var56, false);
//     com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.labelName("hi!");
//     boolean var69 = var54.isVarArgsParameter(var68);
//     com.google.javascript.rhino.Node var72 = new com.google.javascript.rhino.Node((-1), var25, var36, var50, var68, 153, (-19));
//     com.google.javascript.rhino.Node var75 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var77 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var78 = var77.getNext();
//     com.google.javascript.rhino.Node var79 = var75.srcrefTree(var77);
//     com.google.javascript.rhino.InputId var80 = com.google.javascript.jscomp.NodeUtil.getInputId(var77);
//     com.google.javascript.rhino.jstype.JSType var81 = null;
//     var77.setJSType(var81);
//     var77.setCharno(153);
//     com.google.javascript.rhino.Node[] var85 = new com.google.javascript.rhino.Node[] { var77};
//     com.google.javascript.rhino.Node var86 = new com.google.javascript.rhino.Node(100, var85);
//     var68.removeChild(var86);
// 
//   }

  public void test467() {}
//   public void test467() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test467"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     var3.reportCodeChange();
//     com.google.javascript.jscomp.Scope var6 = var3.getTopScope();
//     com.google.javascript.jscomp.JSError[] var7 = var3.getWarnings();
//     com.google.javascript.jscomp.Result var8 = var3.getResult();
//     com.google.javascript.jscomp.JSSourceFile[] var9 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
//     var10.clearEdgeAnnotations();
//     java.lang.Iterable var12 = var10.getDirectedGraphNodes();
//     java.util.List var13 = var10.getEdges();
//     com.google.javascript.jscomp.JSModule[] var14 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection)var13);
//     com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var16 = null;
//     var15.setStripTypes(var16);
//     var15.setAliasKeywords(false);
//     com.google.javascript.jscomp.DefaultPassConfig var20 = new com.google.javascript.jscomp.DefaultPassConfig(var15);
//     var15.setCollapseVariableDeclarations(true);
//     com.google.javascript.jscomp.Result var23 = var3.compile(var9, var14, var15);
// 
//   }

  public void test468() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test468"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.List var15 = var14.getThrownTypes();
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    boolean var22 = var19.isOr();
    var14.setAssociatedNode(var19);
    java.util.Set var24 = var14.getParameterNames();
    java.util.List var25 = var14.getImplementedInterfaces();
    int var26 = var14.getImplementedInterfaceCount();
    boolean var27 = var14.isDeprecated();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test469() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test469"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var4 = null;
    boolean var6 = var1.recordThrowDescription(var4, "()");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = var10.getNext();
    com.google.javascript.rhino.Node var12 = var8.srcrefTree(var10);
    boolean var13 = var10.isVarArgs();
    com.google.javascript.rhino.Node var15 = var10.getChildAtIndex(1);
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    com.google.javascript.rhino.JSDocInfo var22 = var19.getJSDocInfo();
    com.google.javascript.rhino.Node var23 = var10.copyInformationFrom(var19);
    java.lang.Object var25 = null;
    var10.putProp(0, var25);
    com.google.javascript.rhino.JSTypeExpression var28 = new com.google.javascript.rhino.JSTypeExpression(var10, "()");
    boolean var29 = var1.recordEnumParameterType(var28);
    com.google.javascript.rhino.JSDocInfoBuilder var32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var33 = var32.recordExpose();
    boolean var34 = var32.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var36 = null;
    boolean var37 = var32.recordParameter("Unversioned directory", var36);
    com.google.javascript.rhino.JSTypeExpression var38 = null;
    boolean var40 = var32.recordThrowDescription(var38, "");
    com.google.javascript.jscomp.SourceFile var45 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    var32.markName("", (com.google.javascript.rhino.jstype.StaticSourceFile)var45, 0, 0);
    var1.markName("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n", (com.google.javascript.rhino.jstype.StaticSourceFile)var45, 0, 3);
    var45.setOriginalPath("(hi)");
    java.lang.String var54 = var45.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "goog.abstractMethod"+ "'", var54.equals("goog.abstractMethod"));

  }

  public void test470() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test470"); }


    com.google.javascript.rhino.jstype.JSType var0 = null;
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var3 = null;
    var2.setResolveMode(var3);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var5 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var2);
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var7.unregisterPropertyOnType("Unversioned directory", var9);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    com.google.javascript.jscomp.JSModule var13 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var14 = var13.getDependencies();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.block(var14);
    com.google.javascript.rhino.jstype.FunctionType var16 = var7.createFunctionTypeWithVarArgs(var11, var14);
    boolean var17 = var16.hasAnyTemplateInternal();
    java.lang.Iterable var18 = var16.getAllExtendedInterfaces();
    boolean var19 = var16.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var21.unregisterPropertyOnType("Unversioned directory", var23);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    com.google.javascript.jscomp.JSModule var27 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var28 = var27.getDependencies();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.block(var28);
    com.google.javascript.rhino.jstype.FunctionType var30 = var21.createFunctionTypeWithVarArgs(var25, var28);
    boolean var32 = var30.removeProperty("null(null)");
    var16.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var30);
    com.google.javascript.rhino.jstype.JSType var35 = var2.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType)var30, "hi!");
    boolean var36 = var30.matchesInt32Context();
    var30.clearCachedValues();
    boolean var38 = com.google.javascript.rhino.jstype.JSType.isEquivalent(var0, (com.google.javascript.rhino.jstype.JSType)var30);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var39 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var41 = var39.hasNode((java.lang.Object)1);
    com.google.javascript.rhino.JSDocInfoBuilder var43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var44 = var43.recordExpose();
    boolean var46 = var43.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    com.google.javascript.rhino.Node var52 = var48.srcrefTree(var50);
    com.google.javascript.rhino.InputId var53 = com.google.javascript.jscomp.NodeUtil.getInputId(var50);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    var50.setJSType(var54);
    com.google.javascript.rhino.JSDocInfo var56 = var43.build(var50);
    java.lang.String var57 = var56.getFileOverview();
    java.util.Set var58 = var56.getModifies();
    java.util.List var59 = var56.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var60 = var56.getType();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var61 = var39.createDirectedGraphNode((java.lang.Object)var56);
    boolean var62 = var56.isConsistentIdGenerator();
    java.lang.String var63 = var56.getDescription();
    var30.setJSDocInfo(var56);
    com.google.javascript.rhino.jstype.ObjectType var65 = var30.getTypeOfThis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test471() {}
//   public void test471() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test471"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var2 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
//     var1.forwardDeclareType("");
//     boolean var5 = var1.shouldTolerateUndefinedValues();
//     com.google.javascript.rhino.jstype.JSType var7 = var1.getType("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
//     com.google.javascript.rhino.ErrorReporter var8 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
//     com.google.javascript.rhino.jstype.JSType var11 = null;
//     var9.unregisterPropertyOnType("Unversioned directory", var11);
//     com.google.javascript.rhino.jstype.JSType var13 = null;
//     com.google.javascript.jscomp.JSModule var15 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var16 = var15.getDependencies();
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.block(var16);
//     com.google.javascript.rhino.jstype.FunctionType var18 = var9.createFunctionTypeWithVarArgs(var13, var16);
//     boolean var19 = var18.hasAnyTemplateInternal();
//     java.lang.Iterable var20 = var18.getAllExtendedInterfaces();
//     boolean var21 = var18.isEmptyType();
//     com.google.javascript.rhino.ErrorReporter var22 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
//     com.google.javascript.rhino.jstype.JSType var25 = null;
//     var23.unregisterPropertyOnType("Unversioned directory", var25);
//     com.google.javascript.rhino.jstype.JSType var27 = null;
//     com.google.javascript.jscomp.JSModule var29 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var30 = var29.getDependencies();
//     com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.block(var30);
//     com.google.javascript.rhino.jstype.FunctionType var32 = var23.createFunctionTypeWithVarArgs(var27, var30);
//     boolean var34 = var32.removeProperty("null(null)");
//     var18.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var32);
//     java.lang.String var36 = var18.getDisplayName();
//     com.google.javascript.rhino.JSDocInfo var37 = var18.getJSDocInfo();
//     boolean var38 = var18.isRecordType();
//     java.lang.Iterable var39 = var18.getParameters();
//     com.google.javascript.rhino.ErrorReporter var40 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40);
//     com.google.javascript.rhino.ErrorReporter var42 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var42);
//     com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var44 = null;
//     var43.setResolveMode(var44);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var46 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var43);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var47 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var43);
//     com.google.javascript.rhino.ErrorReporter var48 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var48);
//     com.google.javascript.rhino.jstype.JSType var51 = null;
//     var49.unregisterPropertyOnType("Unversioned directory", var51);
//     com.google.javascript.rhino.jstype.JSType var53 = null;
//     boolean var55 = var49.canPropertyBeDefined(var53, "BANG");
//     com.google.javascript.rhino.jstype.JSType var56 = null;
//     com.google.javascript.rhino.jstype.JSType[] var57 = new com.google.javascript.rhino.jstype.JSType[] { var56};
//     com.google.javascript.rhino.Node var58 = var49.createParameters(var57);
//     boolean var59 = var47.addRequiredParams(var57);
//     com.google.javascript.rhino.Node var60 = var41.createParameters(var57);
//     com.google.javascript.rhino.jstype.FunctionType var61 = var1.createFunctionTypeWithVarArgs((com.google.javascript.rhino.jstype.JSType)var18, var57);
// 
//   }

  public void test472() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test472"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    var0.setReplaceStringsReservedStrings(var28);
    var0.setChainCalls(true);
    var0.setGenerateExports(false);
    var0.setAliasKeywords(true);
    var0.setNameReferenceGraphPath("hi!");
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
    boolean var44 = var41.isVarArgs();
    com.google.javascript.rhino.Node var46 = var41.getChildAtIndex(1);
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    com.google.javascript.rhino.Node var52 = var48.srcrefTree(var50);
    com.google.javascript.rhino.JSDocInfo var53 = var50.getJSDocInfo();
    com.google.javascript.rhino.Node var54 = var41.copyInformationFrom(var50);
    com.google.javascript.jscomp.CompilerOptions var55 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var56 = null;
    var55.setStripTypes(var56);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var58 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var59 = var58.getDirectedGraphNodes();
    java.util.List var60 = var58.getEdges();
    var55.setManageClosureDependencies(var60);
    boolean var62 = var55.isExternExportsEnabled();
    var55.setCheckCaja(false);
    java.util.Set var65 = null;
    var55.setReplaceStringsReservedStrings(var65);
    com.google.javascript.rhino.JSDocInfoBuilder var68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var69 = var68.recordExpose();
    boolean var71 = var68.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var73 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var75 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var76 = var75.getNext();
    com.google.javascript.rhino.Node var77 = var73.srcrefTree(var75);
    com.google.javascript.rhino.InputId var78 = com.google.javascript.jscomp.NodeUtil.getInputId(var75);
    com.google.javascript.rhino.jstype.JSType var79 = null;
    var75.setJSType(var79);
    com.google.javascript.rhino.JSDocInfo var81 = var68.build(var75);
    java.lang.String var82 = var81.getFileOverview();
    java.util.Set var83 = var81.getModifies();
    var55.setReplaceStringsReservedStrings(var83);
    var41.setDirectives(var83);
    var0.setAliasableStrings(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test473() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test473"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.Collection var1 = var0.getNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var3 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var4 = var3.recordExpose();
    boolean var6 = var3.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = var10.getNext();
    com.google.javascript.rhino.Node var12 = var8.srcrefTree(var10);
    com.google.javascript.rhino.InputId var13 = com.google.javascript.jscomp.NodeUtil.getInputId(var10);
    com.google.javascript.rhino.jstype.JSType var14 = null;
    var10.setJSType(var14);
    com.google.javascript.rhino.JSDocInfo var16 = var3.build(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var19 = var18.recordExpose();
    boolean var20 = var18.recordExterns();
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = var24.getNext();
    com.google.javascript.rhino.Node var26 = var22.srcrefTree(var24);
    boolean var27 = var24.isVarArgs();
    boolean var28 = var24.isArrayLit();
    com.google.javascript.rhino.Node var29 = var24.getNext();
    var18.markTypeNode(var24, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var40 = var39.getNext();
    com.google.javascript.rhino.Node var41 = var37.srcrefTree(var39);
    boolean var42 = var39.isVarArgs();
    com.google.javascript.rhino.Node var44 = var39.getChildAtIndex(1);
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = var48.getNext();
    com.google.javascript.rhino.Node var50 = var46.srcrefTree(var48);
    com.google.javascript.rhino.JSDocInfo var51 = var48.getJSDocInfo();
    com.google.javascript.rhino.Node var52 = var39.copyInformationFrom(var48);
    java.lang.Object var54 = null;
    var39.putProp(0, var54);
    com.google.javascript.rhino.JSTypeExpression var57 = new com.google.javascript.rhino.JSTypeExpression(var39, "()");
    com.google.javascript.rhino.JSTypeExpression var58 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var57);
    boolean var59 = var18.recordBaseType(var57);
    boolean var60 = var3.recordTypedef(var57);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var61 = var0.getDirectedGraphNode((java.lang.Object)var57);
    com.google.javascript.rhino.Node var62 = var57.getRoot();
    java.lang.String var63 = var62.getQualifiedName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);

  }

  public void test474() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test474"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var21.unregisterPropertyOnType("Unversioned directory", var23);
    var21.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.jstype.StaticScope var27 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var29 = var28.getDirectedGraphNodes();
    java.util.List var30 = var28.getEdges();
    com.google.javascript.jscomp.CompilerOptions var31 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var32 = null;
    var31.setStripTypes(var32);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var35 = var34.getDirectedGraphNodes();
    java.util.List var36 = var34.getEdges();
    var31.setManageClosureDependencies(var36);
    boolean var38 = var31.isExternExportsEnabled();
    var31.setCheckCaja(false);
    var31.setGroupVariableDeclarations(true);
    java.util.Map var43 = var31.getDefineReplacements();
    var0.defineDelegateProxyPrototypeProperties(var21, var27, var30, var43);
    com.google.javascript.rhino.ErrorReporter var45 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var47 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var46);
    com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = var51.getNext();
    com.google.javascript.rhino.Node var53 = var49.srcrefTree(var51);
    boolean var54 = var51.isVarArgs();
    com.google.javascript.rhino.Node var56 = var51.getChildAtIndex(1);
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var61 = var60.getNext();
    com.google.javascript.rhino.Node var62 = var58.srcrefTree(var60);
    com.google.javascript.rhino.JSDocInfo var63 = var60.getJSDocInfo();
    com.google.javascript.rhino.Node var64 = var51.copyInformationFrom(var60);
    java.lang.Object var66 = null;
    var51.putProp(0, var66);
    com.google.javascript.rhino.JSTypeExpression var69 = new com.google.javascript.rhino.JSTypeExpression(var51, "()");
    com.google.javascript.rhino.jstype.StaticScope var70 = null;
    com.google.javascript.rhino.ErrorReporter var71 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var72 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var71);
    com.google.javascript.rhino.jstype.JSType var74 = null;
    var72.unregisterPropertyOnType("Unversioned directory", var74);
    com.google.javascript.rhino.jstype.JSType var76 = null;
    boolean var78 = var72.canPropertyBeDefined(var76, "BANG");
    com.google.javascript.rhino.jstype.JSType var79 = null;
    com.google.javascript.rhino.jstype.JSType[] var80 = new com.google.javascript.rhino.jstype.JSType[] { var79};
    com.google.javascript.rhino.Node var81 = var72.createParameters(var80);
    com.google.javascript.rhino.jstype.JSType var82 = var69.evaluate(var70, var72);
    boolean var83 = var47.addVarArgs(var82);
    boolean var84 = var82.isOrdinaryFunction();
    com.google.javascript.rhino.jstype.ObjectType var85 = var82.dereference();
    java.util.Collection var86 = var21.getDirectImplementors(var85);
    boolean var87 = var85.matchesNumberContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);

  }

  public void test475() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test475"); }


    com.google.javascript.rhino.JSDocInfoBuilder var2 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var3 = var2.recordExpose();
    boolean var5 = var2.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    com.google.javascript.rhino.InputId var12 = com.google.javascript.jscomp.NodeUtil.getInputId(var9);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var9.setJSType(var13);
    com.google.javascript.rhino.JSDocInfo var15 = var2.build(var9);
    java.lang.String var16 = var15.getFileOverview();
    java.util.Set var17 = var15.getModifies();
    java.util.List var18 = var15.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var19 = var15.getType();
    java.util.List var20 = var15.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var21 = var15.getReturnType();
    java.lang.String var22 = var15.getMeaning();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var23 = com.google.javascript.rhino.ScriptRuntime.getMessage1("module$ERROR", (java.lang.Object)var15);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test476() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test476"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.VariableRenamingPolicy var1 = com.google.javascript.jscomp.VariableRenamingPolicy.valueOf("hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test477() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test477"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    boolean var26 = var24.removeProperty("null(null)");
    var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
    int var28 = var24.getExtendedInterfacesCount();
    java.util.Set var29 = var24.getOwnPropertyNames();
    java.lang.Iterable var30 = var24.getCtorImplementedInterfaces();
    com.google.javascript.rhino.jstype.BooleanLiteralSet var31 = var24.getPossibleToBooleanOutcomes();
    boolean var33 = var24.hasOwnProperty("hi!");
    var24.clearCachedValues();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test478() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test478"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.wasEmptyNode();
    com.google.javascript.rhino.JSDocInfoBuilder var10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var11 = var10.recordExpose();
    boolean var13 = var10.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.InputId var20 = com.google.javascript.jscomp.NodeUtil.getInputId(var17);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    var17.setJSType(var21);
    com.google.javascript.rhino.JSDocInfo var23 = var10.build(var17);
    java.lang.String var24 = var23.getFileOverview();
    java.util.Set var25 = var23.getModifies();
    java.util.List var26 = var23.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var27 = var23.getType();
    boolean var28 = var23.isConsistentIdGenerator();
    java.lang.String var29 = var23.getDeprecationReason();
    var5.setJSDocInfo(var23);
    boolean var31 = var5.isCatch();
    com.google.javascript.rhino.Node[] var32 = new com.google.javascript.rhino.Node[] { var5};
    com.google.javascript.rhino.Node var33 = new com.google.javascript.rhino.Node(154, var32);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var36 = new com.google.javascript.rhino.Node(0, var32, 21, 3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "2014/12/24 11:10"+ "'", var29.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test479() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test479"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var4 = null;
    boolean var6 = var1.recordThrowDescription(var4, "()");
    boolean var8 = var1.recordFileOverview("BANG 0\n    STRING hi 0 [length: 2]\n");
    boolean var9 = var1.recordConsistentIdGenerator();
    boolean var12 = var1.recordParameterDescription("LABEL_NAME hi!", "(LABEL_NAME hi!)");
    boolean var13 = var1.recordPreserveTry();
    boolean var14 = var1.recordExport();
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    boolean var22 = var19.isVarArgs();
    boolean var23 = var19.isOptionalArg();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var25 = new com.google.javascript.rhino.Node(0, var19, var24);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    boolean var32 = var29.isVarArgs();
    boolean var33 = var29.isArrayLit();
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var36 = var35.isGetterDef();
    var35.putIntProp((-1), 10);
    var29.addChildrenToFront(var35);
    boolean var41 = var29.isDec();
    var25.addChildToBack(var29);
    com.google.javascript.rhino.JSDocInfo var43 = var1.build(var25);
    boolean var44 = var43.hasReturnType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test480() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test480"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getType();
    int var19 = var14.getParameterCount();
    java.lang.String var20 = var14.getLendsName();
    java.util.Set var21 = var14.getSuppressions();
    com.google.javascript.rhino.JSDocInfo.Visibility var22 = var14.getVisibility();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test481() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test481"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.hasAnyTemplateInternal();
    boolean var70 = var31.isConstructor();
    com.google.javascript.rhino.JSDocInfoBuilder var72 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var73 = var72.recordExpose();
    boolean var75 = var72.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var77 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var79 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var80 = var79.getNext();
    com.google.javascript.rhino.Node var81 = var77.srcrefTree(var79);
    com.google.javascript.rhino.InputId var82 = com.google.javascript.jscomp.NodeUtil.getInputId(var79);
    com.google.javascript.rhino.jstype.JSType var83 = null;
    var79.setJSType(var83);
    com.google.javascript.rhino.JSDocInfo var85 = var72.build(var79);
    java.lang.String var86 = var85.getFileOverview();
    java.util.Set var87 = var85.getModifies();
    java.util.List var88 = var85.getImplementedInterfaces();
    var31.setImplementedInterfaces(var88);
    com.google.javascript.rhino.jstype.FunctionType var90 = var31.toMaybeFunctionType();
    com.google.javascript.rhino.Node var91 = var31.getRootNode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);

  }

  public void test482() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test482"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    var0.setReserveRawExports(false);
    var0.setReserveRawExports(true);
    var0.setAppNameStr("(InputId: )");
    com.google.javascript.jscomp.DiagnosticGroup var18 = null;
    com.google.javascript.jscomp.CheckLevel var19 = null;
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var20 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var18, var19);
    java.lang.String var21 = var20.toString();
    var0.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var20);
    com.google.javascript.rhino.JSDocInfoBuilder var24 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var25 = var24.recordExpose();
    boolean var27 = var24.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
    com.google.javascript.rhino.InputId var34 = com.google.javascript.jscomp.NodeUtil.getInputId(var31);
    com.google.javascript.rhino.jstype.JSType var35 = null;
    var31.setJSType(var35);
    com.google.javascript.rhino.JSDocInfo var37 = var24.build(var31);
    java.lang.String var38 = var37.getFileOverview();
    boolean var39 = var37.hasFileOverview();
    boolean var40 = var37.hasReturnType();
    boolean var42 = var37.hasParameter("BANG 0\n    STRING hi 0 [length: 2]\n");
    var37.setLicense("goog.abstractMethod");
    boolean var45 = var37.isExport();
    java.util.Set var46 = var37.getSuppressions();
    var0.setStripNameSuffixes(var46);
    var0.setConvertToDottedProperties(false);
    var0.setSkipAllPasses(false);
    var0.setCoalesceVariableNames(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "null(null)"+ "'", var21.equals("null(null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test483() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test483"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setChainCalls(true);
    var0.setTweakToDoubleLiteral("hi!", 0.0d);
    boolean var6 = var0.isRemoveUnusedClassProperties();
    var0.setDisambiguateProperties(true);
    var0.setTweakToBooleanLiteral("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", true);
    var0.setNameReferenceGraphPath("BANG");
    var0.setGeneratePseudoNames(true);
    var0.setRecordFunctionInformation(true);
    var0.setOptimizeReturns(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test484() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test484"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var6 = null;
    var5.setStripTypes(var6);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var9 = var8.getDirectedGraphNodes();
    java.util.List var10 = var8.getEdges();
    var5.setManageClosureDependencies(var10);
    boolean var12 = var5.isExternExportsEnabled();
    var5.setCheckCaja(false);
    var5.setRemoveUnusedPrototypeProperties(true);
    var5.setRemoveClosureAsserts(false);
    com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var21 = var20.recordExpose();
    boolean var23 = var20.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
    com.google.javascript.rhino.InputId var30 = com.google.javascript.jscomp.NodeUtil.getInputId(var27);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var27.setJSType(var31);
    com.google.javascript.rhino.JSDocInfo var33 = var20.build(var27);
    java.util.Collection var34 = var33.getAuthors();
    com.google.common.collect.ImmutableList var35 = var33.getTemplateTypeNames();
    var5.setSourceMapLocationMappings((java.util.List)var35);
    com.google.javascript.rhino.JSDocInfoBuilder var38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var39 = var38.recordExpose();
    boolean var41 = var38.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = var45.getNext();
    com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
    com.google.javascript.rhino.InputId var48 = com.google.javascript.jscomp.NodeUtil.getInputId(var45);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    var45.setJSType(var49);
    com.google.javascript.rhino.JSDocInfo var51 = var38.build(var45);
    java.lang.String var52 = var51.getFileOverview();
    java.util.Set var53 = var51.getModifies();
    java.util.List var54 = var51.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var55 = var51.getType();
    java.util.List var56 = var51.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var57 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var58 = null;
    var57.setStripTypes(var58);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var60 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var61 = var60.getDirectedGraphNodes();
    java.util.List var62 = var60.getEdges();
    var57.setManageClosureDependencies(var62);
    var57.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var68 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var69 = var68.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var70 = new com.google.javascript.jscomp.ComposeWarningsGuard(var69);
    com.google.javascript.jscomp.JSError var71 = null;
    com.google.javascript.jscomp.CheckLevel var72 = var70.level(var71);
    var57.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var70);
    var3.<com.google.javascript.jscomp.SourceFile>initModules((java.util.List)var35, var56, var57);
    com.google.javascript.rhino.JSDocInfoBuilder var76 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var77 = var76.recordExpose();
    boolean var79 = var76.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var81 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var83 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var84 = var83.getNext();
    com.google.javascript.rhino.Node var85 = var81.srcrefTree(var83);
    com.google.javascript.rhino.InputId var86 = com.google.javascript.jscomp.NodeUtil.getInputId(var83);
    com.google.javascript.rhino.jstype.JSType var87 = null;
    var83.setJSType(var87);
    com.google.javascript.rhino.JSDocInfo var89 = var76.build(var83);
    java.lang.String var90 = var89.getFileOverview();
    java.util.Set var91 = var89.getModifies();
    java.util.List var92 = var89.getImplementedInterfaces();
    com.google.javascript.rhino.Node var93 = com.google.javascript.rhino.IR.block(var92);
    com.google.javascript.jscomp.NodeTraversal.Callback var94 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var3, var92, var94);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var96 = var3.languageMode();
    boolean var97 = var3.hasErrors();
    java.lang.String var98 = var3.toSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var98 + "' != '" + ""+ "'", var98.equals(""));

  }

  public void test485() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test485"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    var1.clearNamedTypes();
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var7 = null;
    var6.setResolveMode(var7);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var9 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var6);
    com.google.javascript.rhino.jstype.ObjectType var10 = var6.createAnonymousObjectType();
    com.google.javascript.rhino.jstype.EnumElementType var11 = var10.toMaybeEnumElementType();
    com.google.javascript.rhino.jstype.JSType var12 = var1.createOptionalType((com.google.javascript.rhino.jstype.JSType)var10);
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var16 = null;
    var15.setResolveMode(var16);
    var15.clearNamedTypes();
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var21 = null;
    var20.setResolveMode(var21);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var23 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var20);
    com.google.javascript.rhino.jstype.ObjectType var24 = var20.createAnonymousObjectType();
    com.google.javascript.rhino.jstype.EnumElementType var25 = var24.toMaybeEnumElementType();
    com.google.javascript.rhino.jstype.JSType var26 = var15.createOptionalType((com.google.javascript.rhino.jstype.JSType)var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.overwriteDeclaredType("function (): {540092593}", var26);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test486() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test486"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithEdgeAnnotations();
    com.google.javascript.jscomp.CompilerOptions var1 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var2 = null;
    var1.setStripTypes(var2);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var5 = var4.getDirectedGraphNodes();
    java.util.List var6 = var4.getEdges();
    var1.setManageClosureDependencies(var6);
    var1.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var12 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var13 = var12.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var14 = new com.google.javascript.jscomp.ComposeWarningsGuard(var13);
    com.google.javascript.jscomp.JSError var15 = null;
    com.google.javascript.jscomp.CheckLevel var16 = var14.level(var15);
    var1.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var14);
    com.google.javascript.jscomp.graph.GraphNode var18 = var0.getNode((java.lang.Object)var14);
    var0.clearNodeAnnotations();
    var0.clearNodeAnnotations();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test487() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test487"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isObject();
    boolean var61 = var58.hasProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);

  }

  public void test488() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test488"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.Collection var15 = var14.getAuthors();
    java.lang.String var16 = var14.getDeprecationReason();
    boolean var17 = var14.isConsistentIdGenerator();
    com.google.javascript.rhino.Node var18 = var14.getAssociatedNode();
    com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var21 = var20.recordExpose();
    boolean var23 = var20.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
    com.google.javascript.rhino.InputId var30 = com.google.javascript.jscomp.NodeUtil.getInputId(var27);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var27.setJSType(var31);
    com.google.javascript.rhino.JSDocInfo var33 = var20.build(var27);
    java.lang.String var34 = var33.getFileOverview();
    java.util.Set var35 = var33.getModifies();
    java.util.List var36 = var33.getImplementedInterfaces();
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.block(var36);
    boolean var38 = var37.isFalse();
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.empty();
    com.google.javascript.rhino.Node var40 = var39.cloneTree();
    com.google.javascript.rhino.Node var41 = var37.useSourceInfoFrom(var39);
    com.google.javascript.rhino.Node var42 = var18.copyInformationFromForTree(var37);
    int var44 = var42.getIntProp(1);
    var42.setLength(306);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "2014/12/24 11:10"+ "'", var16.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);

  }

  public void test489() {}
//   public void test489() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test489"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var1 = null;
//     var0.setStripTypes(var1);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var4 = var3.getDirectedGraphNodes();
//     java.util.List var5 = var3.getEdges();
//     var0.setManageClosureDependencies(var5);
//     var0.setDevirtualizePrototypeMethods(true);
//     var0.setInlineLocalVariables(false);
//     var0.setFoldConstants(false);
//     var0.setTweakToDoubleLiteral("goog.exportSymbol", 1.0d);
//     com.google.javascript.jscomp.Compiler var16 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var17 = var16.getAstDotGraph();
//     com.google.javascript.jscomp.LightweightMessageFormatter var18 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var16);
//     com.google.javascript.jscomp.ErrorManager var19 = var16.getErrorManager();
//     com.google.javascript.jscomp.LightweightMessageFormatter var20 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var16);
//     com.google.javascript.jscomp.CompilerOptions.LanguageMode var21 = var16.languageMode();
//     var0.setLanguageIn(var21);
//     com.google.javascript.jscomp.CompilerOptions.Reach var23 = null;
//     var0.setRemoveUnusedVariable(var23);
// 
//   }

  public void test490() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test490"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setSourceMapOutputPath("()");
    var0.setExternExports(true);
    com.google.javascript.jscomp.CheckLevel var15 = null;
    var0.setReportMissingOverride(var15);
    com.google.javascript.jscomp.CheckLevel var17 = null;
    var0.setReportUnknownTypes(var17);
    com.google.javascript.jscomp.MessageBundle var19 = null;
    var0.setMessageBundle(var19);
    var0.setDebugFunctionSideEffectsPath("{proxy:{1241367186}}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test491() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test491"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    com.google.javascript.jscomp.GoogleCodingConvention var33 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    boolean var35 = var33.isConstant("module$2014$12$24 11:10");
    boolean var38 = var33.isExported("Unversioned directory", false);
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var41 = var40.isTry();
    boolean var42 = var40.isSwitch();
    boolean var43 = var33.isVarArgsParameter(var40);
    var40.setLength(10);
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("module$2014$12$24 11:10");
    boolean var48 = var40.isEquivalentToTyped(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test492() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test492"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    var0.setReplaceStringsReservedStrings(var28);
    var0.setGroupVariableDeclarations(false);
    com.google.javascript.jscomp.CheckLevel var32 = null;
    var0.setCheckRequires(var32);
    var0.setExportTestFunctions(false);
    com.google.javascript.jscomp.CompilerOptions var36 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var37 = null;
    var36.setStripTypes(var37);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var39 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var40 = var39.getDirectedGraphNodes();
    java.util.List var41 = var39.getEdges();
    var36.setManageClosureDependencies(var41);
    boolean var43 = var36.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var44 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var45 = null;
    var44.setStripTypes(var45);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var47 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var48 = var47.getDirectedGraphNodes();
    java.util.List var49 = var47.getEdges();
    var44.setManageClosureDependencies(var49);
    var36.setManageClosureDependencies(var49);
    var36.setRemoveClosureAsserts(true);
    boolean var54 = var36.isExternExportsEnabled();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var55 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var56 = var55.getDirectedGraphNodes();
    java.util.List var57 = var55.getEdges();
    java.util.List var58 = var55.getGraphvizNodes();
    var36.setSourceMapLocationMappings(var58);
    var0.setManageClosureDependencies(var58);
    com.google.javascript.jscomp.CheckLevel var62 = null;
    com.google.javascript.jscomp.DiagnosticType var64 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var62, "Unversioned directory");
    com.google.javascript.jscomp.DiagnosticType[] var65 = new com.google.javascript.jscomp.DiagnosticType[] { var64};
    com.google.javascript.jscomp.DiagnosticGroup var66 = new com.google.javascript.jscomp.DiagnosticGroup(var65);
    com.google.javascript.jscomp.CompilerOptions var67 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var68 = null;
    var67.setStripTypes(var68);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var70 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var71 = var70.getDirectedGraphNodes();
    java.util.List var72 = var70.getEdges();
    var67.setManageClosureDependencies(var72);
    boolean var74 = var67.isExternExportsEnabled();
    var67.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var79 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var81 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var82 = com.google.javascript.jscomp.JSError.make(var79, var81);
    int var83 = var82.getCharno();
    com.google.javascript.jscomp.CheckLevel var84 = var82.getDefaultLevel();
    var67.setReportUnknownTypes(var84);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var86 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var66, var84);
    com.google.javascript.jscomp.CheckLevel var87 = null;
    var0.setWarningLevel(var66, var87);
    java.lang.Object var89 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test493() {}
//   public void test493() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test493"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.Collection var1 = var0.getNodes();
//     com.google.javascript.rhino.JSDocInfoBuilder var3 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var4 = var3.recordExpose();
//     boolean var6 = var3.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var11 = var10.getNext();
//     com.google.javascript.rhino.Node var12 = var8.srcrefTree(var10);
//     com.google.javascript.rhino.InputId var13 = com.google.javascript.jscomp.NodeUtil.getInputId(var10);
//     com.google.javascript.rhino.jstype.JSType var14 = null;
//     var10.setJSType(var14);
//     com.google.javascript.rhino.JSDocInfo var16 = var3.build(var10);
//     com.google.javascript.rhino.JSDocInfoBuilder var18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var19 = var18.recordExpose();
//     boolean var20 = var18.recordExterns();
//     com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var25 = var24.getNext();
//     com.google.javascript.rhino.Node var26 = var22.srcrefTree(var24);
//     boolean var27 = var24.isVarArgs();
//     boolean var28 = var24.isArrayLit();
//     com.google.javascript.rhino.Node var29 = var24.getNext();
//     var18.markTypeNode(var24, 10, 100, 0, 0, false);
//     com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var40 = var39.getNext();
//     com.google.javascript.rhino.Node var41 = var37.srcrefTree(var39);
//     boolean var42 = var39.isVarArgs();
//     com.google.javascript.rhino.Node var44 = var39.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var49 = var48.getNext();
//     com.google.javascript.rhino.Node var50 = var46.srcrefTree(var48);
//     com.google.javascript.rhino.JSDocInfo var51 = var48.getJSDocInfo();
//     com.google.javascript.rhino.Node var52 = var39.copyInformationFrom(var48);
//     java.lang.Object var54 = null;
//     var39.putProp(0, var54);
//     com.google.javascript.rhino.JSTypeExpression var57 = new com.google.javascript.rhino.JSTypeExpression(var39, "()");
//     com.google.javascript.rhino.JSTypeExpression var58 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var57);
//     boolean var59 = var18.recordBaseType(var57);
//     boolean var60 = var3.recordTypedef(var57);
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var61 = var0.getDirectedGraphNode((java.lang.Object)var57);
//     com.google.javascript.jscomp.CompilerOptions var62 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var63 = null;
//     var62.setStripTypes(var63);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var65 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var66 = var65.getDirectedGraphNodes();
//     java.util.List var67 = var65.getEdges();
//     var62.setManageClosureDependencies(var67);
//     boolean var69 = var62.isExternExportsEnabled();
//     var62.setCheckCaja(false);
//     java.util.Set var72 = null;
//     var62.setReplaceStringsReservedStrings(var72);
//     var62.setReserveRawExports(false);
//     var62.setReserveRawExports(true);
//     var62.setAppNameStr("(InputId: )");
//     com.google.javascript.jscomp.SourceMap.DetailLevel var80 = null;
//     var62.setSourceMapDetailLevel(var80);
//     java.lang.Object var82 = var62.clone();
//     java.util.List var83 = var0.getNeighborNodes((java.lang.Object)var62);
// 
//   }

  public void test494() {}
//   public void test494() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest6.test494"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var1 = null;
//     var0.setStripTypes(var1);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var4 = var3.getDirectedGraphNodes();
//     java.util.List var5 = var3.getEdges();
//     var0.setManageClosureDependencies(var5);
//     boolean var7 = var0.isExternExportsEnabled();
//     var0.setCheckCaja(false);
//     java.util.Set var10 = null;
//     var0.setReplaceStringsReservedStrings(var10);
//     com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var14 = var13.recordExpose();
//     boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var21 = var20.getNext();
//     com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
//     com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
//     com.google.javascript.rhino.jstype.JSType var24 = null;
//     var20.setJSType(var24);
//     com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
//     java.lang.String var27 = var26.getFileOverview();
//     java.util.Set var28 = var26.getModifies();
//     var0.setReplaceStringsReservedStrings(var28);
//     var0.setUnaliasableGlobals("");
//     com.google.javascript.jscomp.DiagnosticType var34 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var36 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var37 = com.google.javascript.jscomp.JSError.make(var34, var36);
//     int var38 = var37.getCharno();
//     com.google.javascript.jscomp.CheckLevel var39 = var37.getDefaultLevel();
//     var0.setCheckGlobalThisLevel(var39);
//     var0.setLabelRenaming(true);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var44 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var45 = var44.getDirectedGraphNodes();
//     java.util.List var46 = var44.getEdges();
//     java.util.Collection var47 = var44.getNodes();
//     java.util.List var48 = var44.getGraphvizEdges();
//     var0.setReplaceStringsConfiguration("{413092455}", var48);
//     com.google.javascript.jscomp.CompilerOptions.Reach var50 = null;
//     var0.setRemoveUnusedVariables(var50);
// 
//   }

  public void test495() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test495"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var2 = var0.hasNode((java.lang.Object)1);
    java.util.List var3 = var0.getGraphvizEdges();
    java.lang.Iterable var4 = var0.getDirectedGraphNodes();
    com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var6 = var5.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var7 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
    com.google.javascript.jscomp.LightweightMessageFormatter var8 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
    boolean var9 = var0.hasNode((java.lang.Object)var5);
    com.google.javascript.jscomp.MessageFormatter var10 = null;
    java.util.logging.Logger var11 = null;
    com.google.javascript.jscomp.LoggerErrorManager var12 = new com.google.javascript.jscomp.LoggerErrorManager(var10, var11);
    com.google.javascript.jscomp.Compiler var13 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var12);
    com.google.javascript.jscomp.Scope var14 = var13.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var15 = null;
    com.google.javascript.jscomp.NodeTraversal var16 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var13, var15);
    com.google.javascript.jscomp.CompilerOptions var17 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var18 = null;
    var17.setStripTypes(var18);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var21 = var20.getDirectedGraphNodes();
    java.util.List var22 = var20.getEdges();
    var17.setManageClosureDependencies(var22);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.script(var22);
    var16.traverseRoots(var22);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var26 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var27 = var26.getDirectedGraphNodes();
    java.util.List var28 = var26.getEdges();
    com.google.javascript.jscomp.CompilerOptions var29 = new com.google.javascript.jscomp.CompilerOptions();
    var29.setChainCalls(true);
    java.util.logging.Logger var32 = null;
    com.google.javascript.jscomp.LoggerErrorManager var33 = new com.google.javascript.jscomp.LoggerErrorManager(var32);
    var29.setErrorHandler((com.google.javascript.jscomp.ErrorHandler)var33);
    var29.setGatherCssNames(false);
    var5.<com.google.javascript.jscomp.SourceFile>initModules(var22, var28, var29);
    com.google.javascript.jscomp.CompilerOptions.TracerMode var38 = var29.getTracerMode();
    var29.enableExternExports(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test496() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test496"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newNumber(1.0d, 0, 10);
    com.google.javascript.rhino.Node var5 = var3.getAncestor(10);
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isArrayLit();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var16 = var15.isGetterDef();
    var15.putIntProp((-1), 10);
    var9.addChildrenToFront(var15);
    int var21 = var15.getLength();
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = var25.getNext();
    com.google.javascript.rhino.Node var27 = var23.srcrefTree(var25);
    com.google.javascript.rhino.Node var28 = var25.removeFirstChild();
    com.google.javascript.rhino.Node var29 = var15.useSourceInfoFromForTree(var25);
    boolean var30 = var15.isDebugger();
    com.google.javascript.rhino.Node var31 = var15.removeFirstChild();
    com.google.javascript.rhino.Node var32 = var3.srcrefTree(var15);
    boolean var33 = var32.isWhile();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test497() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test497"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.falseNode();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var3 = var0.copyInformationFrom(var2);
    boolean var4 = var3.isLabel();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test498() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test498"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    com.google.javascript.rhino.jstype.JSType var35 = var34.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.dereference();
    boolean var37 = var36.isUnknownType();
    com.google.javascript.rhino.JSDocInfoBuilder var40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var41 = var40.recordExpose();
    boolean var43 = var40.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.InputId var50 = com.google.javascript.jscomp.NodeUtil.getInputId(var47);
    com.google.javascript.rhino.jstype.JSType var51 = null;
    var47.setJSType(var51);
    com.google.javascript.rhino.JSDocInfo var53 = var40.build(var47);
    java.util.List var54 = var53.getThrownTypes();
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isOr();
    var53.setAssociatedNode(var58);
    boolean var63 = var53.isNoSideEffects();
    java.util.List var64 = var53.getThrownTypes();
    var36.setPropertyJSDocInfo("ERROR", var53);
    boolean var66 = var36.isNullable();
    boolean var67 = var36.hasAnyTemplate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test499() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test499"); }


    com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var3 = var1.isConstantKey("2014/12/24 11:10");
    java.util.Collection var4 = var1.getAssertionFunctions();
    com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var8.setJSType(var9);
    boolean var11 = var8.isScript();
    com.google.javascript.rhino.Node var12 = var8.removeFirstChild();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var16 = var15.isGetterDef();
    boolean var17 = var15.isAdd();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.String var35 = var34.toStringTree();
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var40 = var39.getNext();
    com.google.javascript.rhino.Node var41 = var37.srcrefTree(var39);
    boolean var43 = var39.getBooleanProp(100);
    int var44 = var39.getSideEffectFlags();
    boolean var45 = var39.isDefaultCase();
    com.google.javascript.rhino.Node var46 = new com.google.javascript.rhino.Node(1, var15, var34, var39);
    java.lang.String var47 = var1.extractClassNameIfProvide(var8, var39);
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var50 = var49.isGetterDef();
    boolean var51 = var49.isNE();
    boolean var52 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var49);
    com.google.javascript.rhino.Node var53 = var8.clonePropsFrom(var49);
    boolean var54 = var53.isThis();
    com.google.javascript.rhino.Node var57 = new com.google.javascript.rhino.Node(3, var53, 10, 3);
    int var58 = var53.getLineno();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var35.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);

  }

  public void test500() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest6.test500"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.util.Collection var19 = var0.getIndirectlyDeclaredProperties();
    java.lang.String var20 = var0.getExportPropertyFunction();
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = var24.getNext();
    boolean var26 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var24);
    int var27 = var24.getLength();
    com.google.javascript.rhino.Node var28 = null;
    boolean var29 = var24.hasChild(var28);
    com.google.javascript.rhino.Node var30 = var22.useSourceInfoIfMissingFromForTree(var24);
    var24.setSourceFileForTesting("Unversioned directory");
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.falseNode();
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var36 = var33.copyInformationFrom(var35);
    java.lang.String var37 = var0.extractClassNameIfProvide(var24, var33);
    boolean var38 = var33.isOr();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "goog.exportProperty"+ "'", var20.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

}
